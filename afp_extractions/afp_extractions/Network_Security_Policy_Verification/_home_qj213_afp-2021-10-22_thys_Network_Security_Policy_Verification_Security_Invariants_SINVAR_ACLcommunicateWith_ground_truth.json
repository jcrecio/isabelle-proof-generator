{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_ACLcommunicateWith.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma ACLcommunicateWith_sinvar_alternative:\n  \"wf_graph G \\<Longrightarrow> sinvar G nP = (\\<forall> (e1,e2) \\<in> (edges G)\\<^sup>+. e2 \\<in> set (nP e1))\"", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\"", "lemma unique_default_example: \"succ_tran \\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr> vertex_2 = {}\"", "lemma TopoS_ACLcommunicateWith: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], "translations": [["", "lemma ACLcommunicateWith_sinvar_alternative:\n  \"wf_graph G \\<Longrightarrow> sinvar G nP = (\\<forall> (e1,e2) \\<in> (edges G)\\<^sup>+. e2 \\<in> set (nP e1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_graph G \\<Longrightarrow>\n    sinvar G nP =\n    (\\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1))", "proof(unfold sinvar.simps, rule iffI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+.\n                         e2 \\<in> set (nP e1)\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)", "case 1"], ["proof (state)\nthis:\n  wf_graph G\n  \\<forall>v\\<in>nodes G. \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+.\n                         e2 \\<in> set (nP e1)\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)", "from 1(1)"], ["proof (chain)\npicking this:\n  wf_graph G", "have e1_nodes: \"(e1, e2) \\<in> edges G \\<Longrightarrow> e1 \\<in> nodes G\" for e1 e2"], ["proof (prove)\nusing this:\n  wf_graph G\n\ngoal (1 subgoal):\n 1. (e1, e2) \\<in> edges G \\<Longrightarrow> e1 \\<in> nodes G", "by (simp add: wf_graph.E_wfD(1))"], ["proof (state)\nthis:\n  (?e1.0, ?e2.0) \\<in> edges G \\<Longrightarrow> ?e1.0 \\<in> nodes G\n\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+.\n                         e2 \\<in> set (nP e1)\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)", "from 1(2)"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>nodes G. \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)", "have \"\\<forall>v\\<in>nodes G. \\<forall>a. (v, a) \\<in> (edges G)\\<^sup>+ \\<longrightarrow> a \\<in> set (nP v)\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>nodes G. \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>nodes G.\n       \\<forall>a.\n          (v, a) \\<in> (edges G)\\<^sup>+ \\<longrightarrow>\n          a \\<in> set (nP v)", "by(simp add: succ_tran_def)"], ["proof (state)\nthis:\n  \\<forall>v\\<in>nodes G.\n     \\<forall>a.\n        (v, a) \\<in> (edges G)\\<^sup>+ \\<longrightarrow> a \\<in> set (nP v)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+.\n                         e2 \\<in> set (nP e1)\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)", "with e1_nodes"], ["proof (chain)\npicking this:\n  (?e1.0, ?e2.0) \\<in> edges G \\<Longrightarrow> ?e1.0 \\<in> nodes G\n  \\<forall>v\\<in>nodes G.\n     \\<forall>a.\n        (v, a) \\<in> (edges G)\\<^sup>+ \\<longrightarrow> a \\<in> set (nP v)", "have \"(e1, e2)\\<in>(edges G)\\<^sup>+ \\<Longrightarrow> e2 \\<in> set (nP e1)\" for e1 e2"], ["proof (prove)\nusing this:\n  (?e1.0, ?e2.0) \\<in> edges G \\<Longrightarrow> ?e1.0 \\<in> nodes G\n  \\<forall>v\\<in>nodes G.\n     \\<forall>a.\n        (v, a) \\<in> (edges G)\\<^sup>+ \\<longrightarrow> a \\<in> set (nP v)\n\ngoal (1 subgoal):\n 1. (e1, e2) \\<in> (edges G)\\<^sup>+ \\<Longrightarrow> e2 \\<in> set (nP e1)", "by (meson tranclD)"], ["proof (state)\nthis:\n  (?e1.0, ?e2.0) \\<in> (edges G)\\<^sup>+ \\<Longrightarrow>\n  ?e2.0 \\<in> set (nP ?e1.0)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+.\n                         e2 \\<in> set (nP e1)\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)", "thus ?case"], ["proof (prove)\nusing this:\n  (?e1.0, ?e2.0) \\<in> (edges G)\\<^sup>+ \\<Longrightarrow>\n  ?e2.0 \\<in> set (nP ?e1.0)\n\ngoal (1 subgoal):\n 1. \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)", "by blast"], ["proof (state)\nthis:\n  \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)", "case 2"], ["proof (state)\nthis:\n  wf_graph G\n  \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)", "from 2(1)"], ["proof (chain)\npicking this:\n  wf_graph G", "have e1_nodes: \"(v, a) \\<in> edges G \\<Longrightarrow> v \\<in> nodes G\" for v a"], ["proof (prove)\nusing this:\n  wf_graph G\n\ngoal (1 subgoal):\n 1. (v, a) \\<in> edges G \\<Longrightarrow> v \\<in> nodes G", "by (simp add: wf_graph.E_wfD(1))"], ["proof (state)\nthis:\n  (?v, ?a) \\<in> edges G \\<Longrightarrow> ?v \\<in> nodes G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)", "with 2(2)"], ["proof (chain)\npicking this:\n  \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\n  (?v, ?a) \\<in> edges G \\<Longrightarrow> ?v \\<in> nodes G", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>(e1, e2)\\<in>(edges G)\\<^sup>+. e2 \\<in> set (nP e1)\n  (?v, ?a) \\<in> edges G \\<Longrightarrow> ?v \\<in> nodes G\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>nodes G. \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)", "by(auto simp add: succ_tran_def)"], ["proof (state)\nthis:\n  \\<forall>v\\<in>nodes G. \\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_mono sinvar", "unfolding SecurityInvariant_withOffendingFlows.sinvar_mono_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nP N E' E.\n       wf_graph \\<lparr>nodes = N, edges = E\\<rparr> \\<and>\n       E' \\<subseteq> E \\<and>\n       sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP \\<longrightarrow>\n       sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "proof(clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nP N E' E.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "fix nP::\"('v \\<Rightarrow> 'v list)\" and N E' E"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nP N E' E.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "assume a1: \"wf_graph \\<lparr>nodes = N, edges = E\\<rparr>\"\n    and    a2: \"E' \\<subseteq> E\"\n    and    a3: \"sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\""], ["proof (state)\nthis:\n  wf_graph \\<lparr>nodes = N, edges = E\\<rparr>\n  E' \\<subseteq> E\n  sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\n\ngoal (1 subgoal):\n 1. \\<And>nP N E' E.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "from a3"], ["proof (chain)\npicking this:\n  sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP", "have \"v \\<in> N \\<Longrightarrow> \\<forall>a\\<in>(succ_tran \\<lparr>nodes = N, edges = E\\<rparr> v). a \\<in> set (nP v)\" for v"], ["proof (prove)\nusing this:\n  sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\n\ngoal (1 subgoal):\n 1. v \\<in> N \\<Longrightarrow>\n    \\<forall>a\\<in>succ_tran \\<lparr>nodes = N, edges = E\\<rparr> v.\n       a \\<in> set (nP v)", "by fastforce"], ["proof (state)\nthis:\n  ?v \\<in> N \\<Longrightarrow>\n  \\<forall>a\\<in>succ_tran \\<lparr>nodes = N, edges = E\\<rparr> ?v.\n     a \\<in> set (nP ?v)\n\ngoal (1 subgoal):\n 1. \\<And>nP N E' E.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "with a2"], ["proof (chain)\npicking this:\n  E' \\<subseteq> E\n  ?v \\<in> N \\<Longrightarrow>\n  \\<forall>a\\<in>succ_tran \\<lparr>nodes = N, edges = E\\<rparr> ?v.\n     a \\<in> set (nP ?v)", "have g2: \"v \\<in> N \\<Longrightarrow> (\\<forall> a \\<in> (succ_tran \\<lparr>nodes = N, edges = E'\\<rparr> v). a \\<in> set (nP v))\" for v"], ["proof (prove)\nusing this:\n  E' \\<subseteq> E\n  ?v \\<in> N \\<Longrightarrow>\n  \\<forall>a\\<in>succ_tran \\<lparr>nodes = N, edges = E\\<rparr> ?v.\n     a \\<in> set (nP ?v)\n\ngoal (1 subgoal):\n 1. v \\<in> N \\<Longrightarrow>\n    \\<forall>a\\<in>succ_tran \\<lparr>nodes = N, edges = E'\\<rparr> v.\n       a \\<in> set (nP v)", "using succ_tran_mono[OF a1]"], ["proof (prove)\nusing this:\n  E' \\<subseteq> E\n  ?v \\<in> N \\<Longrightarrow>\n  \\<forall>a\\<in>succ_tran \\<lparr>nodes = N, edges = E\\<rparr> ?v.\n     a \\<in> set (nP ?v)\n  ?E' \\<subseteq> E \\<Longrightarrow>\n  succ_tran \\<lparr>nodes = N, edges = ?E'\\<rparr> ?v\n  \\<subseteq> succ_tran \\<lparr>nodes = N, edges = E\\<rparr> ?v\n\ngoal (1 subgoal):\n 1. v \\<in> N \\<Longrightarrow>\n    \\<forall>a\\<in>succ_tran \\<lparr>nodes = N, edges = E'\\<rparr> v.\n       a \\<in> set (nP v)", "by blast"], ["proof (state)\nthis:\n  ?v \\<in> N \\<Longrightarrow>\n  \\<forall>a\\<in>succ_tran \\<lparr>nodes = N, edges = E'\\<rparr> ?v.\n     a \\<in> set (nP ?v)\n\ngoal (1 subgoal):\n 1. \\<And>nP N E' E.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "thus \"sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\""], ["proof (prove)\nusing this:\n  ?v \\<in> N \\<Longrightarrow>\n  \\<forall>a\\<in>succ_tran \\<lparr>nodes = N, edges = E'\\<rparr> ?v.\n     a \\<in> set (nP ?v)\n\ngoal (1 subgoal):\n 1. sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "by simp"], ["proof (state)\nthis:\n  sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation SecurityInvariant_preliminaries\nwhere sinvar = sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_preliminaries sinvar", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(frule_tac finite_distinct_list[OF wf_graph.finiteE])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        \\<exists>xs. set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(erule_tac exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP xs.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rename_tac list_edges)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rule_tac ff=\"list_edges\" in SecurityInvariant_withOffendingFlows.mono_imp_set_offending_flows_not_empty[OF sinvar_mono])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> wf_graph G\n 2. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (set list_edges) G nP\n 3. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> set list_edges \\<subseteq> edges G\n 4. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> distinct list_edges\n 5. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 6. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto)[4]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP list_edges v a.\n       \\<lbrakk>wf_graph G; v \\<in> nodes G; a \\<in> succ_tran G v;\n        a \\<notin> set (nP v); set list_edges = edges G;\n        distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (edges G) G nP\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto simp add: SecurityInvariant_withOffendingFlows.is_offending_flows_def graph_ops False_set succ_tran_empty)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(fact SecurityInvariant_withOffendingFlows.sinvar_mono_imp_sinvar_mono[OF sinvar_mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(fact SecurityInvariant_withOffendingFlows.sinvar_mono_imp_is_offending_flows_mono[OF sinvar_mono])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma unique_default_example: \"succ_tran \\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr> vertex_2 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ_tran\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_1, vertex_2)}\\<rparr>\n     vertex_2 =\n    {}", "apply (simp add: succ_tran_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (vertex_2, x) \\<notin> {(vertex_1, vertex_2)}\\<^sup>+", "by (metis Domain.DomainI Domain_empty Domain_insert distinct_vertices12 singleton_iff trancl_domain)"], ["", "interpretation ACLcommunicateWith: SecurityInvariant_ACS\nwhere default_node_properties = SINVAR_ACLcommunicateWith.default_node_properties\nand sinvar = SINVAR_ACLcommunicateWith.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_ACS sinvar default_node_properties", "unfolding SINVAR_ACLcommunicateWith.default_node_properties_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_ACS sinvar []", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>fst ` f.\n                            \\<not> sinvar G (nP(i := []))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = []", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>f.\n                            \\<exists>v\\<in>nodes G.\n                               (v = fst i \\<longrightarrow>\n                                (\\<exists>a.\n                                    a \\<in> succ_tran G (fst i))) \\<and>\n                               (v \\<noteq> fst i \\<longrightarrow>\n                                (\\<exists>a\\<in>succ_tran G v.\n                                    a \\<notin> set (nP v)))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = []", "apply(subst(asm) SecurityInvariant_withOffendingFlows.set_offending_flows_simp, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G;\n        f \\<in> {F. F \\<subseteq> edges G \\<and>\n                    (\\<not> sinvar G nP \\<and>\n                     sinvar\n                      \\<lparr>nodes = nodes G, edges = edges G - F\\<rparr>\n                      nP) \\<and>\n                    (\\<forall>(e1, e2)\\<in>F.\n                        \\<not> sinvar\n                                \\<lparr>nodes = nodes G,\n                                   edges =\n                                     {(e1, e2)} \\<union>\n                                     (edges G - F)\\<rparr>\n                                nP)}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>f.\n                            \\<exists>v\\<in>nodes G.\n                               (v = fst i \\<longrightarrow>\n                                (\\<exists>a.\n                                    a \\<in> succ_tran G (fst i))) \\<and>\n                               (v \\<noteq> fst i \\<longrightarrow>\n                                (\\<exists>a\\<in>succ_tran G v.\n                                    a \\<notin> set (nP v)))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = []", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP a b v aa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; f \\<subseteq> edges G;\n        v \\<in> nodes G; aa \\<in> succ_tran G v; aa \\<notin> set (nP v);\n        \\<forall>v\\<in>nodes G.\n           \\<forall>a\\<in>succ_tran\n                           \\<lparr>nodes = nodes G,\n                              edges = edges G - f\\<rparr>\n                           v.\n              a \\<in> set (nP v);\n        \\<forall>x\\<in>f.\n           \\<exists>v\\<in>nodes G.\n              \\<exists>a\\<in>succ_tran\n                              \\<lparr>nodes = nodes G,\n                                 edges = insert x (edges G - f)\\<rparr>\n                              v.\n                 a \\<notin> set (nP v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            (v = a \\<longrightarrow>\n                             (\\<exists>aa. aa \\<in> succ_tran G a)) \\<and>\n                            (v \\<noteq> a \\<longrightarrow>\n                             (\\<exists>a\\<in>succ_tran G v.\n                                 a \\<notin> set (nP v)))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = []", "apply (metis)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = []", "apply(erule default_uniqueness_by_counterexample_ACS)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> [] \\<Longrightarrow>\n       \\<exists>G nP i f.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G f) nP \\<and>\n          i \\<in> fst ` f \\<and> sinvar G (nP(i := otherbot))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> [] \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>v\\<in>nodes G.\n                  \\<exists>a\\<in>succ_tran G v.\n                     a \\<notin> set (nP v)) \\<and>\n              (\\<exists>i f.\n                  f \\<in> set_offending_flows G nP \\<and>\n                  (\\<forall>v\\<in>nodes (delete_edges G f).\n                      \\<forall>a\\<in>succ_tran (delete_edges G f) v.\n                         a \\<in> set (nP v)) \\<and>\n                  i \\<in> fst ` f \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      (v = i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G i.\n                           a \\<in> set otherbot)) \\<and>\n                      (v \\<noteq> i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G v.\n                           a \\<in> set (nP v))))))", "apply (simp add: SecurityInvariant_withOffendingFlows.set_offending_flows_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_min_set_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> [] \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>v\\<in>nodes G.\n                  \\<exists>a\\<in>succ_tran G v.\n                     a \\<notin> set (nP v)) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>v\\<in>nodes G.\n                      \\<exists>a\\<in>succ_tran G v.\n                         a \\<notin> set (nP v)) \\<and>\n                  (\\<forall>v\\<in>nodes (delete_edges G f).\n                      \\<forall>a\\<in>succ_tran (delete_edges G f) v.\n                         a \\<in> set (nP v)) \\<and>\n                  (\\<forall>(e1, e2)\\<in>f.\n                      \\<exists>v\\<in>nodes\n(add_edge e1 e2 (delete_edges G f)).\n                         \\<exists>a\\<in>succ_tran\n   (add_edge e1 e2 (delete_edges G f)) v.\n                            a \\<notin> set (nP v)) \\<and>\n                  (\\<forall>v\\<in>nodes (delete_edges G f).\n                      \\<forall>a\\<in>succ_tran (delete_edges G f) v.\n                         a \\<in> set (nP v)) \\<and>\n                  i \\<in> fst ` f \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      (v = i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G i.\n                           a \\<in> set otherbot)) \\<and>\n                      (v \\<noteq> i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G v.\n                           a \\<in> set (nP v))))))", "apply (simp add:graph_ops)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> [] \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>v\\<in>nodes G.\n                  \\<exists>a\\<in>succ_tran G v.\n                     a \\<notin> set (nP v)) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>v\\<in>nodes G.\n                      \\<exists>a\\<in>succ_tran G v.\n                         a \\<notin> set (nP v)) \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      \\<forall>a\\<in>succ_tran\n\\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n                         a \\<in> set (nP v)) \\<and>\n                  (\\<forall>x\\<in>f.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        (\\<exists>a\\<in>succ_tran\n   \\<lparr>nodes = insert e1 (insert e2 (nodes G)),\n      edges = insert (e1, e2) (edges G - f)\\<rparr>\n   e1.\n                            a \\<notin> set (nP e1)) \\<or>\n                        (\\<exists>a\\<in>succ_tran\n   \\<lparr>nodes = insert e1 (insert e2 (nodes G)),\n      edges = insert (e1, e2) (edges G - f)\\<rparr>\n   e2.\n                            a \\<notin> set (nP e2)) \\<or>\n                        (\\<exists>v\\<in>nodes G.\n                            \\<exists>a\\<in>succ_tran\n      \\<lparr>nodes = insert e1 (insert e2 (nodes G)),\n         edges = insert (e1, e2) (edges G - f)\\<rparr>\n      v.\n                               a \\<notin> set (nP v))) \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      \\<forall>a\\<in>succ_tran\n\\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n                         a \\<in> set (nP v)) \\<and>\n                  i \\<in> fst ` f \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      (v = i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G i.\n                           a \\<in> set otherbot)) \\<and>\n                      (v \\<noteq> i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G v.\n                           a \\<in> set (nP v))))))", "apply (simp split: prod.split_asm prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> [] \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>v\\<in>nodes G.\n                  \\<exists>a\\<in>succ_tran G v.\n                     a \\<notin> set (nP v)) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>v\\<in>nodes G.\n                      \\<exists>a\\<in>succ_tran G v.\n                         a \\<notin> set (nP v)) \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      \\<forall>a\\<in>succ_tran\n\\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n                         a \\<in> set (nP v)) \\<and>\n                  (\\<forall>x\\<in>f.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         (\\<exists>a\\<in>succ_tran\n    \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n       edges = insert (x1, x2) (edges G - f)\\<rparr>\n    x1.\n                             a \\<notin> set (nP x1)) \\<or>\n                         (\\<exists>a\\<in>succ_tran\n    \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n       edges = insert (x1, x2) (edges G - f)\\<rparr>\n    x2.\n                             a \\<notin> set (nP x2)) \\<or>\n                         (\\<exists>v\\<in>nodes G.\n                             \\<exists>a\n\\<in>succ_tran\n      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n         edges = insert (x1, x2) (edges G - f)\\<rparr>\n      v.\n                                a \\<notin> set (nP v))) \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      \\<forall>a\\<in>succ_tran\n\\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n                         a \\<in> set (nP v)) \\<and>\n                  i \\<in> fst ` f \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      (v = i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G i.\n                           a \\<in> set otherbot)) \\<and>\n                      (v \\<noteq> i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G v.\n                           a \\<in> set (nP v))))))", "apply(simp add: List.neq_Nil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       \\<exists>y ys. otherbot = y # ys \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>v\\<in>nodes G.\n                  \\<exists>a\\<in>succ_tran G v.\n                     a \\<notin> set (nP v)) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>v\\<in>nodes G.\n                      \\<exists>a\\<in>succ_tran G v.\n                         a \\<notin> set (nP v)) \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      \\<forall>a\\<in>succ_tran\n\\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n                         a \\<in> set (nP v)) \\<and>\n                  (\\<forall>x\\<in>f.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         (\\<exists>a\\<in>succ_tran\n    \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n       edges = insert (x1, x2) (edges G - f)\\<rparr>\n    x1.\n                             a \\<notin> set (nP x1)) \\<or>\n                         (\\<exists>a\\<in>succ_tran\n    \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n       edges = insert (x1, x2) (edges G - f)\\<rparr>\n    x2.\n                             a \\<notin> set (nP x2)) \\<or>\n                         (\\<exists>v\\<in>nodes G.\n                             \\<exists>a\n\\<in>succ_tran\n      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n         edges = insert (x1, x2) (edges G - f)\\<rparr>\n      v.\n                                a \\<notin> set (nP v))) \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      \\<forall>a\\<in>succ_tran\n\\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n                         a \\<in> set (nP v)) \\<and>\n                  i \\<in> fst ` f \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      (v = i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G i.\n                           a \\<in> set otherbot)) \\<and>\n                      (v \\<noteq> i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G v.\n                           a \\<in> set (nP v))))))", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot y.\n       \\<exists>ys. otherbot = y # ys \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>v\\<in>nodes G.\n                  \\<exists>a\\<in>succ_tran G v.\n                     a \\<notin> set (nP v)) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>v\\<in>nodes G.\n                      \\<exists>a\\<in>succ_tran G v.\n                         a \\<notin> set (nP v)) \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      \\<forall>a\\<in>succ_tran\n\\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n                         a \\<in> set (nP v)) \\<and>\n                  (\\<forall>x\\<in>f.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         (\\<exists>a\\<in>succ_tran\n    \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n       edges = insert (x1, x2) (edges G - f)\\<rparr>\n    x1.\n                             a \\<notin> set (nP x1)) \\<or>\n                         (\\<exists>a\\<in>succ_tran\n    \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n       edges = insert (x1, x2) (edges G - f)\\<rparr>\n    x2.\n                             a \\<notin> set (nP x2)) \\<or>\n                         (\\<exists>v\\<in>nodes G.\n                             \\<exists>a\n\\<in>succ_tran\n      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n         edges = insert (x1, x2) (edges G - f)\\<rparr>\n      v.\n                                a \\<notin> set (nP v))) \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      \\<forall>a\\<in>succ_tran\n\\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n                         a \\<in> set (nP v)) \\<and>\n                  i \\<in> fst ` f \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      (v = i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G i.\n                           a \\<in> set otherbot)) \\<and>\n                      (v \\<noteq> i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G v.\n                           a \\<in> set (nP v))))))", "apply(rename_tac canAccessThis)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot canAccessThis.\n       \\<exists>ys. otherbot = canAccessThis # ys \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>v\\<in>nodes G.\n                  \\<exists>a\\<in>succ_tran G v.\n                     a \\<notin> set (nP v)) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>v\\<in>nodes G.\n                      \\<exists>a\\<in>succ_tran G v.\n                         a \\<notin> set (nP v)) \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      \\<forall>a\\<in>succ_tran\n\\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n                         a \\<in> set (nP v)) \\<and>\n                  (\\<forall>x\\<in>f.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         (\\<exists>a\\<in>succ_tran\n    \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n       edges = insert (x1, x2) (edges G - f)\\<rparr>\n    x1.\n                             a \\<notin> set (nP x1)) \\<or>\n                         (\\<exists>a\\<in>succ_tran\n    \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n       edges = insert (x1, x2) (edges G - f)\\<rparr>\n    x2.\n                             a \\<notin> set (nP x2)) \\<or>\n                         (\\<exists>v\\<in>nodes G.\n                             \\<exists>a\n\\<in>succ_tran\n      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n         edges = insert (x1, x2) (edges G - f)\\<rparr>\n      v.\n                                a \\<notin> set (nP v))) \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      \\<forall>a\\<in>succ_tran\n\\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n                         a \\<in> set (nP v)) \\<and>\n                  i \\<in> fst ` f \\<and>\n                  (\\<forall>v\\<in>nodes G.\n                      (v = i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G i.\n                           a \\<in> set otherbot)) \\<and>\n                      (v \\<noteq> i \\<longrightarrow>\n                       (\\<forall>a\\<in>succ_tran G v.\n                           a \\<in> set (nP v))))))", "apply(case_tac \"canAccessThis = vertex_1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis = vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>G.\n                            wf_graph G \\<and>\n                            (\\<exists>nP.\n                                (\\<exists>v\\<in>nodes G.\n                                    \\<exists>a\\<in>succ_tran G v.\n a \\<notin> set (nP v)) \\<and>\n                                (\\<exists>i f.\n                                    f \\<subseteq> edges G \\<and>\n                                    (\\<exists>v\\<in>nodes G.\n  \\<exists>a\\<in>succ_tran G v. a \\<notin> set (nP v)) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    (\\<forall>x\\<in>f.\n  \\<forall>x1 x2.\n     x = (x1, x2) \\<longrightarrow>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x1.\n         a \\<notin> set (nP x1)) \\<or>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x2.\n         a \\<notin> set (nP x2)) \\<or>\n     (\\<exists>v\\<in>nodes G.\n         \\<exists>a\\<in>succ_tran\n                         \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                            edges = insert (x1, x2) (edges G - f)\\<rparr>\n                         v.\n            a \\<notin> set (nP v))) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    i \\<in> fst ` f \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  (v = i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G i. a \\<in> set otherbot)) \\<and>\n  (v \\<noteq> i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v))))))\n 2. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>G.\n                            wf_graph G \\<and>\n                            (\\<exists>nP.\n                                (\\<exists>v\\<in>nodes G.\n                                    \\<exists>a\\<in>succ_tran G v.\n a \\<notin> set (nP v)) \\<and>\n                                (\\<exists>i f.\n                                    f \\<subseteq> edges G \\<and>\n                                    (\\<exists>v\\<in>nodes G.\n  \\<exists>a\\<in>succ_tran G v. a \\<notin> set (nP v)) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    (\\<forall>x\\<in>f.\n  \\<forall>x1 x2.\n     x = (x1, x2) \\<longrightarrow>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x1.\n         a \\<notin> set (nP x1)) \\<or>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x2.\n         a \\<notin> set (nP x2)) \\<or>\n     (\\<exists>v\\<in>nodes G.\n         \\<exists>a\\<in>succ_tran\n                         \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                            edges = insert (x1, x2) (edges G - f)\\<rparr>\n                         v.\n            a \\<notin> set (nP v))) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    i \\<in> fst ` f \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  (v = i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G i. a \\<in> set otherbot)) \\<and>\n  (v \\<noteq> i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v))))))", "apply(rule_tac x=\"\\<lparr> nodes={canAccessThis,vertex_2}, edges = {(vertex_2,canAccessThis)} \\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = vertex_1 # ys;\n        canAccessThis = vertex_1\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {(vertex_2, vertex_1)}\\<rparr> \\<and>\n                         (\\<exists>nP.\n                             ((\\<exists>a\n  \\<in>succ_tran\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_2, vertex_1)}\\<rparr>\n        vertex_1.\n                                  a \\<notin> set (nP vertex_1)) \\<or>\n                              (\\<exists>a\n  \\<in>succ_tran\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_2, vertex_1)}\\<rparr>\n        vertex_2.\n                                  a \\<notin> set (nP vertex_2))) \\<and>\n                             (\\<exists>i f.\n                                 f \\<subseteq> {(vertex_2, vertex_1)} \\<and>\n                                 ((\\<exists>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_2, vertex_1)}\\<rparr>\n            vertex_1.\na \\<notin> set (nP vertex_1)) \\<or>\n                                  (\\<exists>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_2, vertex_1)}\\<rparr>\n            vertex_2.\na \\<notin> set (nP vertex_2))) \\<and>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)} - f\\<rparr>\n           vertex_1.\n                                     a \\<in> set (nP vertex_1)) \\<and>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)} - f\\<rparr>\n           vertex_2.\n                                     a \\<in> set (nP vertex_2)) \\<and>\n                                 (\\<forall>x\\<in>f.\n                                     \\<forall>x1 x2.\n  x = (x1, x2) \\<longrightarrow>\n  (\\<exists>a\\<in>succ_tran\n                   \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                      edges =\n                        insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                   x1.\n      a \\<notin> set (nP x1)) \\<or>\n  (\\<exists>a\\<in>succ_tran\n                   \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                      edges =\n                        insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                   x2.\n      a \\<notin> set (nP x2)) \\<or>\n  (\\<exists>a\\<in>succ_tran\n                   \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                      edges =\n                        insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                   vertex_1.\n      a \\<notin> set (nP vertex_1)) \\<or>\n  (\\<exists>a\\<in>succ_tran\n                   \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                      edges =\n                        insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                   vertex_2.\n      a \\<notin> set (nP vertex_2))) \\<and>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)} - f\\<rparr>\n           vertex_1.\n                                     a \\<in> set (nP vertex_1)) \\<and>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)} - f\\<rparr>\n           vertex_2.\n                                     a \\<in> set (nP vertex_2)) \\<and>\n                                 i \\<in> fst ` f \\<and>\n                                 (vertex_1 = i \\<longrightarrow>\n                                  (\\<forall>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_2, vertex_1)}\\<rparr>\n            vertex_1.\na \\<in> set otherbot)) \\<and>\n                                 (vertex_1 \\<noteq> i \\<longrightarrow>\n                                  (\\<forall>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_2, vertex_1)}\\<rparr>\n            vertex_1.\na \\<in> set (nP vertex_1))) \\<and>\n                                 (vertex_2 = i \\<longrightarrow>\n                                  (\\<forall>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_2, vertex_1)}\\<rparr>\n            vertex_2.\na \\<in> set otherbot)) \\<and>\n                                 (vertex_2 \\<noteq> i \\<longrightarrow>\n                                  (\\<forall>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_2, vertex_1)}\\<rparr>\n            vertex_2.\na \\<in> set (nP vertex_2)))))\n 2. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>G.\n                            wf_graph G \\<and>\n                            (\\<exists>nP.\n                                (\\<exists>v\\<in>nodes G.\n                                    \\<exists>a\\<in>succ_tran G v.\n a \\<notin> set (nP v)) \\<and>\n                                (\\<exists>i f.\n                                    f \\<subseteq> edges G \\<and>\n                                    (\\<exists>v\\<in>nodes G.\n  \\<exists>a\\<in>succ_tran G v. a \\<notin> set (nP v)) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    (\\<forall>x\\<in>f.\n  \\<forall>x1 x2.\n     x = (x1, x2) \\<longrightarrow>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x1.\n         a \\<notin> set (nP x1)) \\<or>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x2.\n         a \\<notin> set (nP x2)) \\<or>\n     (\\<exists>v\\<in>nodes G.\n         \\<exists>a\\<in>succ_tran\n                         \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                            edges = insert (x1, x2) (edges G - f)\\<rparr>\n                         v.\n            a \\<notin> set (nP v))) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    i \\<in> fst ` f \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  (v = i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G i. a \\<in> set otherbot)) \\<and>\n  (v \\<noteq> i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v))))))", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = vertex_1 # ys;\n        canAccessThis = vertex_1\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {(vertex_2, vertex_1)}\\<rparr>\n 2. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = vertex_1 # ys;\n        canAccessThis = vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nP.\n                            ((\\<exists>a\n \\<in>succ_tran\n       \\<lparr>nodes = {vertex_1, vertex_2},\n          edges = {(vertex_2, vertex_1)}\\<rparr>\n       vertex_1.\n                                 a \\<notin> set (nP vertex_1)) \\<or>\n                             (\\<exists>a\n \\<in>succ_tran\n       \\<lparr>nodes = {vertex_1, vertex_2},\n          edges = {(vertex_2, vertex_1)}\\<rparr>\n       vertex_2.\n                                 a \\<notin> set (nP vertex_2))) \\<and>\n                            (\\<exists>i f.\n                                f \\<subseteq> {(vertex_2, vertex_1)} \\<and>\n                                ((\\<exists>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_1.\n                                     a \\<notin> set (nP vertex_1)) \\<or>\n                                 (\\<exists>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_2.\n                                     a \\<notin> set (nP vertex_2))) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_2, vertex_1)} - f\\<rparr>\n          vertex_1.\n                                    a \\<in> set (nP vertex_1)) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_2, vertex_1)} - f\\<rparr>\n          vertex_2.\n                                    a \\<in> set (nP vertex_2)) \\<and>\n                                (\\<forall>x\\<in>f.\n                                    \\<forall>x1 x2.\n x = (x1, x2) \\<longrightarrow>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                     edges =\n                       insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                  x1.\n     a \\<notin> set (nP x1)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                     edges =\n                       insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                  x2.\n     a \\<notin> set (nP x2)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                     edges =\n                       insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                  vertex_1.\n     a \\<notin> set (nP vertex_1)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                     edges =\n                       insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                  vertex_2.\n     a \\<notin> set (nP vertex_2))) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_2, vertex_1)} - f\\<rparr>\n          vertex_1.\n                                    a \\<in> set (nP vertex_1)) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_2, vertex_1)} - f\\<rparr>\n          vertex_2.\n                                    a \\<in> set (nP vertex_2)) \\<and>\n                                i \\<in> fst ` f \\<and>\n                                (vertex_1 = i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_1.\n                                     a \\<in> set otherbot)) \\<and>\n                                (vertex_1 \\<noteq> i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_1.\n                                     a \\<in> set (nP vertex_1))) \\<and>\n                                (vertex_2 = i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_2.\n                                     a \\<in> set otherbot)) \\<and>\n                                (vertex_2 \\<noteq> i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_2.\n                                     a \\<in> set (nP vertex_2))))\n 3. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>G.\n                            wf_graph G \\<and>\n                            (\\<exists>nP.\n                                (\\<exists>v\\<in>nodes G.\n                                    \\<exists>a\\<in>succ_tran G v.\n a \\<notin> set (nP v)) \\<and>\n                                (\\<exists>i f.\n                                    f \\<subseteq> edges G \\<and>\n                                    (\\<exists>v\\<in>nodes G.\n  \\<exists>a\\<in>succ_tran G v. a \\<notin> set (nP v)) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    (\\<forall>x\\<in>f.\n  \\<forall>x1 x2.\n     x = (x1, x2) \\<longrightarrow>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x1.\n         a \\<notin> set (nP x1)) \\<or>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x2.\n         a \\<notin> set (nP x2)) \\<or>\n     (\\<exists>v\\<in>nodes G.\n         \\<exists>a\\<in>succ_tran\n                         \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                            edges = insert (x1, x2) (edges G - f)\\<rparr>\n                         v.\n            a \\<notin> set (nP v))) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    i \\<in> fst ` f \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  (v = i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G i. a \\<in> set otherbot)) \\<and>\n  (v \\<noteq> i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v))))))", "apply(simp add: wf_graph_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = vertex_1 # ys;\n        canAccessThis = vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nP.\n                            ((\\<exists>a\n \\<in>succ_tran\n       \\<lparr>nodes = {vertex_1, vertex_2},\n          edges = {(vertex_2, vertex_1)}\\<rparr>\n       vertex_1.\n                                 a \\<notin> set (nP vertex_1)) \\<or>\n                             (\\<exists>a\n \\<in>succ_tran\n       \\<lparr>nodes = {vertex_1, vertex_2},\n          edges = {(vertex_2, vertex_1)}\\<rparr>\n       vertex_2.\n                                 a \\<notin> set (nP vertex_2))) \\<and>\n                            (\\<exists>i f.\n                                f \\<subseteq> {(vertex_2, vertex_1)} \\<and>\n                                ((\\<exists>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_1.\n                                     a \\<notin> set (nP vertex_1)) \\<or>\n                                 (\\<exists>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_2.\n                                     a \\<notin> set (nP vertex_2))) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_2, vertex_1)} - f\\<rparr>\n          vertex_1.\n                                    a \\<in> set (nP vertex_1)) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_2, vertex_1)} - f\\<rparr>\n          vertex_2.\n                                    a \\<in> set (nP vertex_2)) \\<and>\n                                (\\<forall>x\\<in>f.\n                                    \\<forall>x1 x2.\n x = (x1, x2) \\<longrightarrow>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                     edges =\n                       insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                  x1.\n     a \\<notin> set (nP x1)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                     edges =\n                       insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                  x2.\n     a \\<notin> set (nP x2)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                     edges =\n                       insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                  vertex_1.\n     a \\<notin> set (nP vertex_1)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                     edges =\n                       insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                  vertex_2.\n     a \\<notin> set (nP vertex_2))) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_2, vertex_1)} - f\\<rparr>\n          vertex_1.\n                                    a \\<in> set (nP vertex_1)) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_2, vertex_1)} - f\\<rparr>\n          vertex_2.\n                                    a \\<in> set (nP vertex_2)) \\<and>\n                                i \\<in> fst ` f \\<and>\n                                (vertex_1 = i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_1.\n                                     a \\<in> set otherbot)) \\<and>\n                                (vertex_1 \\<noteq> i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_1.\n                                     a \\<in> set (nP vertex_1))) \\<and>\n                                (vertex_2 = i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_2.\n                                     a \\<in> set otherbot)) \\<and>\n                                (vertex_2 \\<noteq> i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_2, vertex_1)}\\<rparr>\n           vertex_2.\n                                     a \\<in> set (nP vertex_2))))\n 2. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>G.\n                            wf_graph G \\<and>\n                            (\\<exists>nP.\n                                (\\<exists>v\\<in>nodes G.\n                                    \\<exists>a\\<in>succ_tran G v.\n a \\<notin> set (nP v)) \\<and>\n                                (\\<exists>i f.\n                                    f \\<subseteq> edges G \\<and>\n                                    (\\<exists>v\\<in>nodes G.\n  \\<exists>a\\<in>succ_tran G v. a \\<notin> set (nP v)) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    (\\<forall>x\\<in>f.\n  \\<forall>x1 x2.\n     x = (x1, x2) \\<longrightarrow>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x1.\n         a \\<notin> set (nP x1)) \\<or>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x2.\n         a \\<notin> set (nP x2)) \\<or>\n     (\\<exists>v\\<in>nodes G.\n         \\<exists>a\\<in>succ_tran\n                         \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                            edges = insert (x1, x2) (edges G - f)\\<rparr>\n                         v.\n            a \\<notin> set (nP v))) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    i \\<in> fst ` f \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  (v = i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G i. a \\<in> set otherbot)) \\<and>\n  (v \\<noteq> i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v))))))", "apply(rule_tac x=\"(\\<lambda> x. [])(vertex_1 := [], vertex_2 := [])\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = vertex_1 # ys;\n        canAccessThis = vertex_1\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>a.\n                              a \\<in> succ_tran\n \\<lparr>nodes = {vertex_1, vertex_2},\n    edges = {(vertex_2, vertex_1)}\\<rparr>\n vertex_1) \\<or>\n                          (\\<exists>a.\n                              a \\<in> succ_tran\n \\<lparr>nodes = {vertex_1, vertex_2},\n    edges = {(vertex_2, vertex_1)}\\<rparr>\n vertex_2)) \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_2, vertex_1)} \\<and>\n                             ((\\<exists>a.\n                                  a \\<in> succ_tran\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_2, vertex_1)}\\<rparr>\n     vertex_1) \\<or>\n                              (\\<exists>a.\n                                  a \\<in> succ_tran\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_2, vertex_1)}\\<rparr>\n     vertex_2)) \\<and>\n                             succ_tran\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_2, vertex_1)} - f\\<rparr>\n                              vertex_1 =\n                             {} \\<and>\n                             succ_tran\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_2, vertex_1)} - f\\<rparr>\n                              vertex_2 =\n                             {} \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1.\n                                    (x1 = vertex_2 \\<longrightarrow>\n                                     (\\<forall>x2.\n   (x2 = vertex_2 \\<longrightarrow>\n    x = (vertex_2, vertex_2) \\<longrightarrow>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {vertex_2, vertex_1, vertex_2},\n                    edges =\n                      insert (vertex_2, vertex_2)\n                       ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 vertex_2) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {vertex_2, vertex_1, vertex_2},\n                    edges =\n                      insert (vertex_2, vertex_2)\n                       ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 vertex_1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {vertex_2, vertex_1, vertex_2},\n                    edges =\n                      insert (vertex_2, vertex_2)\n                       ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 vertex_2)) \\<and>\n   (x2 \\<noteq> vertex_2 \\<longrightarrow>\n    x = (vertex_2, x2) \\<longrightarrow>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {vertex_2, x2, vertex_1, vertex_2},\n                    edges =\n                      insert (vertex_2, x2)\n                       ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 vertex_2) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {vertex_2, x2, vertex_1, vertex_2},\n                    edges =\n                      insert (vertex_2, x2)\n                       ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 x2) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {vertex_2, x2, vertex_1, vertex_2},\n                    edges =\n                      insert (vertex_2, x2)\n                       ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 vertex_1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {vertex_2, x2, vertex_1, vertex_2},\n                    edges =\n                      insert (vertex_2, x2)\n                       ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 vertex_2)))) \\<and>\n                                    (x1 \\<noteq> vertex_2 \\<longrightarrow>\n                                     (\\<forall>x2.\n   (x2 = vertex_2 \\<longrightarrow>\n    x = (x1, vertex_2) \\<longrightarrow>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, vertex_2, vertex_1, vertex_2},\n                    edges =\n                      insert (x1, vertex_2)\n                       ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 x1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, vertex_2, vertex_1, vertex_2},\n                    edges =\n                      insert (x1, vertex_2)\n                       ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 vertex_2) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, vertex_2, vertex_1, vertex_2},\n                    edges =\n                      insert (x1, vertex_2)\n                       ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 vertex_1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, vertex_2, vertex_1, vertex_2},\n                    edges =\n                      insert (x1, vertex_2)\n                       ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 vertex_2)) \\<and>\n   (x2 \\<noteq> vertex_2 \\<longrightarrow>\n    x = (x1, x2) \\<longrightarrow>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                    edges =\n                      insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 x1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                    edges =\n                      insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 x2) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                    edges =\n                      insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 vertex_1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                    edges =\n                      insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                 vertex_2))))) \\<and>\n                             succ_tran\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_2, vertex_1)} - f\\<rparr>\n                              vertex_1 =\n                             {} \\<and>\n                             succ_tran\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_2, vertex_1)} - f\\<rparr>\n                              vertex_2 =\n                             {} \\<and>\n                             i \\<in> fst ` f \\<and>\n                             (vertex_1 = i \\<longrightarrow>\n                              (\\<forall>a\n  \\<in>succ_tran\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_2, vertex_1)}\\<rparr>\n        vertex_1.\n                                  a \\<in> set otherbot)) \\<and>\n                             (vertex_1 \\<noteq> i \\<longrightarrow>\n                              succ_tran\n                               \\<lparr>nodes = {vertex_1, vertex_2},\n                                  edges = {(vertex_2, vertex_1)}\\<rparr>\n                               vertex_1 =\n                              {}) \\<and>\n                             (vertex_2 = i \\<longrightarrow>\n                              (\\<forall>a\n  \\<in>succ_tran\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_2, vertex_1)}\\<rparr>\n        vertex_2.\n                                  a \\<in> set otherbot)) \\<and>\n                             (vertex_2 \\<noteq> i \\<longrightarrow>\n                              succ_tran\n                               \\<lparr>nodes = {vertex_1, vertex_2},\n                                  edges = {(vertex_2, vertex_1)}\\<rparr>\n                               vertex_2 =\n                              {}))\n 2. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>G.\n                            wf_graph G \\<and>\n                            (\\<exists>nP.\n                                (\\<exists>v\\<in>nodes G.\n                                    \\<exists>a\\<in>succ_tran G v.\n a \\<notin> set (nP v)) \\<and>\n                                (\\<exists>i f.\n                                    f \\<subseteq> edges G \\<and>\n                                    (\\<exists>v\\<in>nodes G.\n  \\<exists>a\\<in>succ_tran G v. a \\<notin> set (nP v)) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    (\\<forall>x\\<in>f.\n  \\<forall>x1 x2.\n     x = (x1, x2) \\<longrightarrow>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x1.\n         a \\<notin> set (nP x1)) \\<or>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x2.\n         a \\<notin> set (nP x2)) \\<or>\n     (\\<exists>v\\<in>nodes G.\n         \\<exists>a\\<in>succ_tran\n                         \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                            edges = insert (x1, x2) (edges G - f)\\<rparr>\n                         v.\n            a \\<notin> set (nP v))) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    i \\<in> fst ` f \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  (v = i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G i. a \\<in> set otherbot)) \\<and>\n  (v \\<noteq> i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v))))))", "apply(simp add: example_simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = vertex_1 # ys;\n        canAccessThis = vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<subseteq>{(vertex_2, vertex_1)}.\n                            succ_tran\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_2, vertex_1)} - f\\<rparr>\n                             vertex_1 =\n                            {} \\<and>\n                            succ_tran\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_2, vertex_1)} - f\\<rparr>\n                             vertex_2 =\n                            {} \\<and>\n                            (\\<forall>x\\<in>f.\n                                \\<forall>x1.\n                                   (x1 = vertex_2 \\<longrightarrow>\n                                    (\\<forall>x2.\n  (x2 = vertex_2 \\<longrightarrow>\n   x = (vertex_2, vertex_2) \\<longrightarrow>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {vertex_1, vertex_2},\n                   edges =\n                     insert (vertex_2, vertex_2)\n                      ({(vertex_2, vertex_1)} - f)\\<rparr>\n                vertex_2) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {vertex_1, vertex_2},\n                   edges =\n                     insert (vertex_2, vertex_2)\n                      ({(vertex_2, vertex_1)} - f)\\<rparr>\n                vertex_1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {vertex_1, vertex_2},\n                   edges =\n                     insert (vertex_2, vertex_2)\n                      ({(vertex_2, vertex_1)} - f)\\<rparr>\n                vertex_2)) \\<and>\n  (x2 \\<noteq> vertex_2 \\<longrightarrow>\n   x = (vertex_2, x2) \\<longrightarrow>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {vertex_2, x2, vertex_1, vertex_2},\n                   edges =\n                     insert (vertex_2, x2)\n                      ({(vertex_2, vertex_1)} - f)\\<rparr>\n                vertex_2) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {vertex_2, x2, vertex_1, vertex_2},\n                   edges =\n                     insert (vertex_2, x2)\n                      ({(vertex_2, vertex_1)} - f)\\<rparr>\n                x2) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {vertex_2, x2, vertex_1, vertex_2},\n                   edges =\n                     insert (vertex_2, x2)\n                      ({(vertex_2, vertex_1)} - f)\\<rparr>\n                vertex_1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {vertex_2, x2, vertex_1, vertex_2},\n                   edges =\n                     insert (vertex_2, x2)\n                      ({(vertex_2, vertex_1)} - f)\\<rparr>\n                vertex_2)))) \\<and>\n                                   (x1 \\<noteq> vertex_2 \\<longrightarrow>\n                                    (\\<forall>x2.\n  (x2 = vertex_2 \\<longrightarrow>\n   x = (x1, vertex_2) \\<longrightarrow>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, vertex_1, vertex_2},\n                   edges =\n                     insert (x1, vertex_2)\n                      ({(vertex_2, vertex_1)} - f)\\<rparr>\n                x1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, vertex_1, vertex_2},\n                   edges =\n                     insert (x1, vertex_2)\n                      ({(vertex_2, vertex_1)} - f)\\<rparr>\n                vertex_2) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, vertex_1, vertex_2},\n                   edges =\n                     insert (x1, vertex_2)\n                      ({(vertex_2, vertex_1)} - f)\\<rparr>\n                vertex_1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, vertex_1, vertex_2},\n                   edges =\n                     insert (x1, vertex_2)\n                      ({(vertex_2, vertex_1)} - f)\\<rparr>\n                vertex_2)) \\<and>\n  (x2 \\<noteq> vertex_2 \\<longrightarrow>\n   x = (x1, x2) \\<longrightarrow>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                   edges =\n                     insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                x1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                   edges =\n                     insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                x2) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                   edges =\n                     insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                vertex_1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                   edges =\n                     insert (x1, x2) ({(vertex_2, vertex_1)} - f)\\<rparr>\n                vertex_2))))) \\<and>\n                            succ_tran\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_2, vertex_1)} - f\\<rparr>\n                             vertex_1 =\n                            {} \\<and>\n                            succ_tran\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_2, vertex_1)} - f\\<rparr>\n                             vertex_2 =\n                            {} \\<and>\n                            vertex_2 \\<in> fst ` f \\<and>\n                            vertex_1 \\<in> set otherbot\n 2. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>G.\n                            wf_graph G \\<and>\n                            (\\<exists>nP.\n                                (\\<exists>v\\<in>nodes G.\n                                    \\<exists>a\\<in>succ_tran G v.\n a \\<notin> set (nP v)) \\<and>\n                                (\\<exists>i f.\n                                    f \\<subseteq> edges G \\<and>\n                                    (\\<exists>v\\<in>nodes G.\n  \\<exists>a\\<in>succ_tran G v. a \\<notin> set (nP v)) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    (\\<forall>x\\<in>f.\n  \\<forall>x1 x2.\n     x = (x1, x2) \\<longrightarrow>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x1.\n         a \\<notin> set (nP x1)) \\<or>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x2.\n         a \\<notin> set (nP x2)) \\<or>\n     (\\<exists>v\\<in>nodes G.\n         \\<exists>a\\<in>succ_tran\n                         \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                            edges = insert (x1, x2) (edges G - f)\\<rparr>\n                         v.\n            a \\<notin> set (nP v))) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    i \\<in> fst ` f \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  (v = i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G i. a \\<in> set otherbot)) \\<and>\n  (v \\<noteq> i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v))))))", "apply(rule_tac x=\"{(vertex_2,vertex_1)}\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = vertex_1 # ys;\n        canAccessThis = vertex_1\\<rbrakk>\n       \\<Longrightarrow> succ_tran\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {}\\<rparr>\n                          vertex_1 =\n                         {} \\<and>\n                         succ_tran\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {}\\<rparr>\n                          vertex_2 =\n                         {} \\<and>\n                         ((\\<exists>a.\n                              a \\<in> succ_tran\n \\<lparr>nodes = {vertex_2, vertex_1, vertex_2},\n    edges = {(vertex_2, vertex_1)}\\<rparr>\n vertex_2) \\<or>\n                          (\\<exists>a.\n                              a \\<in> succ_tran\n \\<lparr>nodes = {vertex_2, vertex_1, vertex_2},\n    edges = {(vertex_2, vertex_1)}\\<rparr>\n vertex_1) \\<or>\n                          (\\<exists>a.\n                              a \\<in> succ_tran\n \\<lparr>nodes = {vertex_2, vertex_1, vertex_2},\n    edges = {(vertex_2, vertex_1)}\\<rparr>\n vertex_2)) \\<and>\n                         succ_tran\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {}\\<rparr>\n                          vertex_1 =\n                         {} \\<and>\n                         succ_tran\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {}\\<rparr>\n                          vertex_2 =\n                         {} \\<and>\n                         vertex_1 \\<in> set otherbot\n 2. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>G.\n                            wf_graph G \\<and>\n                            (\\<exists>nP.\n                                (\\<exists>v\\<in>nodes G.\n                                    \\<exists>a\\<in>succ_tran G v.\n a \\<notin> set (nP v)) \\<and>\n                                (\\<exists>i f.\n                                    f \\<subseteq> edges G \\<and>\n                                    (\\<exists>v\\<in>nodes G.\n  \\<exists>a\\<in>succ_tran G v. a \\<notin> set (nP v)) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    (\\<forall>x\\<in>f.\n  \\<forall>x1 x2.\n     x = (x1, x2) \\<longrightarrow>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x1.\n         a \\<notin> set (nP x1)) \\<or>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x2.\n         a \\<notin> set (nP x2)) \\<or>\n     (\\<exists>v\\<in>nodes G.\n         \\<exists>a\\<in>succ_tran\n                         \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                            edges = insert (x1, x2) (edges G - f)\\<rparr>\n                         v.\n            a \\<notin> set (nP v))) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    i \\<in> fst ` f \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  (v = i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G i. a \\<in> set otherbot)) \\<and>\n  (v \\<noteq> i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v))))))", "apply(simp add: example_simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = vertex_1 # ys;\n        canAccessThis = vertex_1\\<rbrakk>\n       \\<Longrightarrow> vertex_1 \\<in> set otherbot\n 2. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>G.\n                            wf_graph G \\<and>\n                            (\\<exists>nP.\n                                (\\<exists>v\\<in>nodes G.\n                                    \\<exists>a\\<in>succ_tran G v.\n a \\<notin> set (nP v)) \\<and>\n                                (\\<exists>i f.\n                                    f \\<subseteq> edges G \\<and>\n                                    (\\<exists>v\\<in>nodes G.\n  \\<exists>a\\<in>succ_tran G v. a \\<notin> set (nP v)) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    (\\<forall>x\\<in>f.\n  \\<forall>x1 x2.\n     x = (x1, x2) \\<longrightarrow>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x1.\n         a \\<notin> set (nP x1)) \\<or>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x2.\n         a \\<notin> set (nP x2)) \\<or>\n     (\\<exists>v\\<in>nodes G.\n         \\<exists>a\\<in>succ_tran\n                         \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                            edges = insert (x1, x2) (edges G - f)\\<rparr>\n                         v.\n            a \\<notin> set (nP v))) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    i \\<in> fst ` f \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  (v = i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G i. a \\<in> set otherbot)) \\<and>\n  (v \\<noteq> i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v))))))", "apply(fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>G.\n                            wf_graph G \\<and>\n                            (\\<exists>nP.\n                                (\\<exists>v\\<in>nodes G.\n                                    \\<exists>a\\<in>succ_tran G v.\n a \\<notin> set (nP v)) \\<and>\n                                (\\<exists>i f.\n                                    f \\<subseteq> edges G \\<and>\n                                    (\\<exists>v\\<in>nodes G.\n  \\<exists>a\\<in>succ_tran G v. a \\<notin> set (nP v)) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    (\\<forall>x\\<in>f.\n  \\<forall>x1 x2.\n     x = (x1, x2) \\<longrightarrow>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x1.\n         a \\<notin> set (nP x1)) \\<or>\n     (\\<exists>a\\<in>succ_tran\n                      \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                         edges = insert (x1, x2) (edges G - f)\\<rparr>\n                      x2.\n         a \\<notin> set (nP x2)) \\<or>\n     (\\<exists>v\\<in>nodes G.\n         \\<exists>a\\<in>succ_tran\n                         \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n                            edges = insert (x1, x2) (edges G - f)\\<rparr>\n                         v.\n            a \\<notin> set (nP v))) \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  \\<forall>a\\<in>succ_tran\n                  \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr> v.\n     a \\<in> set (nP v)) \\<and>\n                                    i \\<in> fst ` f \\<and>\n                                    (\\<forall>v\\<in>nodes G.\n  (v = i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G i. a \\<in> set otherbot)) \\<and>\n  (v \\<noteq> i \\<longrightarrow>\n   (\\<forall>a\\<in>succ_tran G v. a \\<in> set (nP v))))))", "apply(rule_tac x=\"\\<lparr> nodes={vertex_1,canAccessThis}, edges = {(vertex_1,canAccessThis)} \\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = {vertex_1, canAccessThis},\n                             edges =\n                               {(vertex_1, canAccessThis)}\\<rparr> \\<and>\n                         (\\<exists>nP.\n                             ((\\<exists>a\n  \\<in>succ_tran\n        \\<lparr>nodes = {vertex_1, canAccessThis},\n           edges = {(vertex_1, canAccessThis)}\\<rparr>\n        vertex_1.\n                                  a \\<notin> set (nP vertex_1)) \\<or>\n                              (\\<exists>a\n  \\<in>succ_tran\n        \\<lparr>nodes = {vertex_1, canAccessThis},\n           edges = {(vertex_1, canAccessThis)}\\<rparr>\n        canAccessThis.\n                                  a \\<notin> set (nP canAccessThis))) \\<and>\n                             (\\<exists>i f.\n                                 f \\<subseteq> {(vertex_1,\n           canAccessThis)} \\<and>\n                                 ((\\<exists>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, canAccessThis},\n               edges = {(vertex_1, canAccessThis)}\\<rparr>\n            vertex_1.\na \\<notin> set (nP vertex_1)) \\<or>\n                                  (\\<exists>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, canAccessThis},\n               edges = {(vertex_1, canAccessThis)}\\<rparr>\n            canAccessThis.\na \\<notin> set (nP canAccessThis))) \\<and>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n           vertex_1.\n                                     a \\<in> set (nP vertex_1)) \\<and>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n           canAccessThis.\n                                     a \\<in> set (nP canAccessThis)) \\<and>\n                                 (\\<forall>x\\<in>f.\n                                     \\<forall>x1 x2.\n  x = (x1, x2) \\<longrightarrow>\n  (\\<exists>a\\<in>succ_tran\n                   \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                      edges =\n                        insert (x1, x2)\n                         ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                   x1.\n      a \\<notin> set (nP x1)) \\<or>\n  (\\<exists>a\\<in>succ_tran\n                   \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                      edges =\n                        insert (x1, x2)\n                         ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                   x2.\n      a \\<notin> set (nP x2)) \\<or>\n  (\\<exists>a\\<in>succ_tran\n                   \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                      edges =\n                        insert (x1, x2)\n                         ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                   vertex_1.\n      a \\<notin> set (nP vertex_1)) \\<or>\n  (\\<exists>a\\<in>succ_tran\n                   \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                      edges =\n                        insert (x1, x2)\n                         ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                   canAccessThis.\n      a \\<notin> set (nP canAccessThis))) \\<and>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n           vertex_1.\n                                     a \\<in> set (nP vertex_1)) \\<and>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n           canAccessThis.\n                                     a \\<in> set (nP canAccessThis)) \\<and>\n                                 i \\<in> fst ` f \\<and>\n                                 (vertex_1 = i \\<longrightarrow>\n                                  (\\<forall>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, canAccessThis},\n               edges = {(vertex_1, canAccessThis)}\\<rparr>\n            vertex_1.\na \\<in> set otherbot)) \\<and>\n                                 (vertex_1 \\<noteq> i \\<longrightarrow>\n                                  (\\<forall>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, canAccessThis},\n               edges = {(vertex_1, canAccessThis)}\\<rparr>\n            vertex_1.\na \\<in> set (nP vertex_1))) \\<and>\n                                 (canAccessThis = i \\<longrightarrow>\n                                  (\\<forall>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, i}, edges = {(vertex_1, i)}\\<rparr>\n            i.\na \\<in> set otherbot)) \\<and>\n                                 (canAccessThis \\<noteq> i \\<longrightarrow>\n                                  (\\<forall>a\n      \\<in>succ_tran\n            \\<lparr>nodes = {vertex_1, canAccessThis},\n               edges = {(vertex_1, canAccessThis)}\\<rparr>\n            canAccessThis.\na \\<in> set (nP canAccessThis)))))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = {vertex_1, canAccessThis},\n                             edges = {(vertex_1, canAccessThis)}\\<rparr>\n 2. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nP.\n                            ((\\<exists>a\n \\<in>succ_tran\n       \\<lparr>nodes = {vertex_1, canAccessThis},\n          edges = {(vertex_1, canAccessThis)}\\<rparr>\n       vertex_1.\n                                 a \\<notin> set (nP vertex_1)) \\<or>\n                             (\\<exists>a\n \\<in>succ_tran\n       \\<lparr>nodes = {vertex_1, canAccessThis},\n          edges = {(vertex_1, canAccessThis)}\\<rparr>\n       canAccessThis.\n                                 a \\<notin> set (nP canAccessThis))) \\<and>\n                            (\\<exists>i f.\n                                f \\<subseteq> {(vertex_1,\n          canAccessThis)} \\<and>\n                                ((\\<exists>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)}\\<rparr>\n           vertex_1.\n                                     a \\<notin> set (nP vertex_1)) \\<or>\n                                 (\\<exists>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)}\\<rparr>\n           canAccessThis.\n                                     a \\<notin> set\n           (nP canAccessThis))) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, canAccessThis},\n             edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n          vertex_1.\n                                    a \\<in> set (nP vertex_1)) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, canAccessThis},\n             edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n          canAccessThis.\n                                    a \\<in> set (nP canAccessThis)) \\<and>\n                                (\\<forall>x\\<in>f.\n                                    \\<forall>x1 x2.\n x = (x1, x2) \\<longrightarrow>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                     edges =\n                       insert (x1, x2)\n                        ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                  x1.\n     a \\<notin> set (nP x1)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                     edges =\n                       insert (x1, x2)\n                        ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                  x2.\n     a \\<notin> set (nP x2)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                     edges =\n                       insert (x1, x2)\n                        ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                  vertex_1.\n     a \\<notin> set (nP vertex_1)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                     edges =\n                       insert (x1, x2)\n                        ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                  canAccessThis.\n     a \\<notin> set (nP canAccessThis))) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, canAccessThis},\n             edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n          vertex_1.\n                                    a \\<in> set (nP vertex_1)) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, canAccessThis},\n             edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n          canAccessThis.\n                                    a \\<in> set (nP canAccessThis)) \\<and>\n                                i \\<in> fst ` f \\<and>\n                                (vertex_1 = i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)}\\<rparr>\n           vertex_1.\n                                     a \\<in> set otherbot)) \\<and>\n                                (vertex_1 \\<noteq> i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)}\\<rparr>\n           vertex_1.\n                                     a \\<in> set (nP vertex_1))) \\<and>\n                                (canAccessThis = i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, i}, edges = {(vertex_1, i)}\\<rparr> i.\n                                     a \\<in> set otherbot)) \\<and>\n                                (canAccessThis \\<noteq> i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)}\\<rparr>\n           canAccessThis.\n                                     a \\<in> set (nP canAccessThis))))", "apply(simp add: wf_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nP.\n                            ((\\<exists>a\n \\<in>succ_tran\n       \\<lparr>nodes = {vertex_1, canAccessThis},\n          edges = {(vertex_1, canAccessThis)}\\<rparr>\n       vertex_1.\n                                 a \\<notin> set (nP vertex_1)) \\<or>\n                             (\\<exists>a\n \\<in>succ_tran\n       \\<lparr>nodes = {vertex_1, canAccessThis},\n          edges = {(vertex_1, canAccessThis)}\\<rparr>\n       canAccessThis.\n                                 a \\<notin> set (nP canAccessThis))) \\<and>\n                            (\\<exists>i f.\n                                f \\<subseteq> {(vertex_1,\n          canAccessThis)} \\<and>\n                                ((\\<exists>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)}\\<rparr>\n           vertex_1.\n                                     a \\<notin> set (nP vertex_1)) \\<or>\n                                 (\\<exists>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)}\\<rparr>\n           canAccessThis.\n                                     a \\<notin> set\n           (nP canAccessThis))) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, canAccessThis},\n             edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n          vertex_1.\n                                    a \\<in> set (nP vertex_1)) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, canAccessThis},\n             edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n          canAccessThis.\n                                    a \\<in> set (nP canAccessThis)) \\<and>\n                                (\\<forall>x\\<in>f.\n                                    \\<forall>x1 x2.\n x = (x1, x2) \\<longrightarrow>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                     edges =\n                       insert (x1, x2)\n                        ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                  x1.\n     a \\<notin> set (nP x1)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                     edges =\n                       insert (x1, x2)\n                        ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                  x2.\n     a \\<notin> set (nP x2)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                     edges =\n                       insert (x1, x2)\n                        ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                  vertex_1.\n     a \\<notin> set (nP vertex_1)) \\<or>\n (\\<exists>a\\<in>succ_tran\n                  \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                     edges =\n                       insert (x1, x2)\n                        ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                  canAccessThis.\n     a \\<notin> set (nP canAccessThis))) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, canAccessThis},\n             edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n          vertex_1.\n                                    a \\<in> set (nP vertex_1)) \\<and>\n                                (\\<forall>a\n    \\<in>succ_tran\n          \\<lparr>nodes = {vertex_1, canAccessThis},\n             edges = {(vertex_1, canAccessThis)} - f\\<rparr>\n          canAccessThis.\n                                    a \\<in> set (nP canAccessThis)) \\<and>\n                                i \\<in> fst ` f \\<and>\n                                (vertex_1 = i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)}\\<rparr>\n           vertex_1.\n                                     a \\<in> set otherbot)) \\<and>\n                                (vertex_1 \\<noteq> i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)}\\<rparr>\n           vertex_1.\n                                     a \\<in> set (nP vertex_1))) \\<and>\n                                (canAccessThis = i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, i}, edges = {(vertex_1, i)}\\<rparr> i.\n                                     a \\<in> set otherbot)) \\<and>\n                                (canAccessThis \\<noteq> i \\<longrightarrow>\n                                 (\\<forall>a\n     \\<in>succ_tran\n           \\<lparr>nodes = {vertex_1, canAccessThis},\n              edges = {(vertex_1, canAccessThis)}\\<rparr>\n           canAccessThis.\n                                     a \\<in> set (nP canAccessThis))))", "apply(rule_tac x=\"(\\<lambda> x. [])(vertex_1 := [], canAccessThis := [])\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>a.\n                              a \\<in> succ_tran\n \\<lparr>nodes = {vertex_1, canAccessThis},\n    edges = {(vertex_1, canAccessThis)}\\<rparr>\n vertex_1) \\<or>\n                          (\\<exists>a.\n                              a \\<in> succ_tran\n \\<lparr>nodes = {vertex_1, canAccessThis},\n    edges = {(vertex_1, canAccessThis)}\\<rparr>\n canAccessThis)) \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1,\n       canAccessThis)} \\<and>\n                             ((\\<exists>a.\n                                  a \\<in> succ_tran\n     \\<lparr>nodes = {vertex_1, canAccessThis},\n        edges = {(vertex_1, canAccessThis)}\\<rparr>\n     vertex_1) \\<or>\n                              (\\<exists>a.\n                                  a \\<in> succ_tran\n     \\<lparr>nodes = {vertex_1, canAccessThis},\n        edges = {(vertex_1, canAccessThis)}\\<rparr>\n     canAccessThis)) \\<and>\n                             succ_tran\n                              \\<lparr>nodes = {vertex_1, canAccessThis},\n                                 edges =\n                                   {(vertex_1, canAccessThis)} - f\\<rparr>\n                              vertex_1 =\n                             {} \\<and>\n                             succ_tran\n                              \\<lparr>nodes = {vertex_1, canAccessThis},\n                                 edges =\n                                   {(vertex_1, canAccessThis)} - f\\<rparr>\n                              canAccessThis =\n                             {} \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1.\n                                    (x1 = canAccessThis \\<longrightarrow>\n                                     (\\<forall>x2.\n   (x2 = canAccessThis \\<longrightarrow>\n    x = (canAccessThis, canAccessThis) \\<longrightarrow>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {canAccessThis, vertex_1, canAccessThis},\n                    edges =\n                      insert (canAccessThis, canAccessThis)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 canAccessThis) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {canAccessThis, vertex_1, canAccessThis},\n                    edges =\n                      insert (canAccessThis, canAccessThis)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 vertex_1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {canAccessThis, vertex_1, canAccessThis},\n                    edges =\n                      insert (canAccessThis, canAccessThis)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 canAccessThis)) \\<and>\n   (x2 \\<noteq> canAccessThis \\<longrightarrow>\n    x = (canAccessThis, x2) \\<longrightarrow>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes =\n                           {canAccessThis, x2, vertex_1, canAccessThis},\n                    edges =\n                      insert (canAccessThis, x2)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 canAccessThis) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes =\n                           {canAccessThis, x2, vertex_1, canAccessThis},\n                    edges =\n                      insert (canAccessThis, x2)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 x2) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes =\n                           {canAccessThis, x2, vertex_1, canAccessThis},\n                    edges =\n                      insert (canAccessThis, x2)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 vertex_1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes =\n                           {canAccessThis, x2, vertex_1, canAccessThis},\n                    edges =\n                      insert (canAccessThis, x2)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 canAccessThis)))) \\<and>\n                                    (x1 \\<noteq>\n                                     canAccessThis \\<longrightarrow>\n                                     (\\<forall>x2.\n   (x2 = canAccessThis \\<longrightarrow>\n    x = (x1, canAccessThis) \\<longrightarrow>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes =\n                           {x1, canAccessThis, vertex_1, canAccessThis},\n                    edges =\n                      insert (x1, canAccessThis)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 x1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes =\n                           {x1, canAccessThis, vertex_1, canAccessThis},\n                    edges =\n                      insert (x1, canAccessThis)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 canAccessThis) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes =\n                           {x1, canAccessThis, vertex_1, canAccessThis},\n                    edges =\n                      insert (x1, canAccessThis)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 vertex_1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes =\n                           {x1, canAccessThis, vertex_1, canAccessThis},\n                    edges =\n                      insert (x1, canAccessThis)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 canAccessThis)) \\<and>\n   (x2 \\<noteq> canAccessThis \\<longrightarrow>\n    x = (x1, x2) \\<longrightarrow>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                    edges =\n                      insert (x1, x2)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 x1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                    edges =\n                      insert (x1, x2)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 x2) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                    edges =\n                      insert (x1, x2)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 vertex_1) \\<or>\n    (\\<exists>a.\n        a \\<in> succ_tran\n                 \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                    edges =\n                      insert (x1, x2)\n                       ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                 canAccessThis))))) \\<and>\n                             succ_tran\n                              \\<lparr>nodes = {vertex_1, canAccessThis},\n                                 edges =\n                                   {(vertex_1, canAccessThis)} - f\\<rparr>\n                              vertex_1 =\n                             {} \\<and>\n                             succ_tran\n                              \\<lparr>nodes = {vertex_1, canAccessThis},\n                                 edges =\n                                   {(vertex_1, canAccessThis)} - f\\<rparr>\n                              canAccessThis =\n                             {} \\<and>\n                             i \\<in> fst ` f \\<and>\n                             (vertex_1 = i \\<longrightarrow>\n                              (\\<forall>a\n  \\<in>succ_tran\n        \\<lparr>nodes = {vertex_1, canAccessThis},\n           edges = {(vertex_1, canAccessThis)}\\<rparr>\n        vertex_1.\n                                  a \\<in> set otherbot)) \\<and>\n                             (vertex_1 \\<noteq> i \\<longrightarrow>\n                              succ_tran\n                               \\<lparr>nodes = {vertex_1, canAccessThis},\n                                  edges =\n                                    {(vertex_1, canAccessThis)}\\<rparr>\n                               vertex_1 =\n                              {}) \\<and>\n                             (canAccessThis = i \\<longrightarrow>\n                              (\\<forall>a\n  \\<in>succ_tran\n        \\<lparr>nodes = {vertex_1, i}, edges = {(vertex_1, i)}\\<rparr> i.\n                                  a \\<in> set otherbot)) \\<and>\n                             (canAccessThis \\<noteq> i \\<longrightarrow>\n                              succ_tran\n                               \\<lparr>nodes = {vertex_1, canAccessThis},\n                                  edges =\n                                    {(vertex_1, canAccessThis)}\\<rparr>\n                               canAccessThis =\n                              {}))", "apply(simp add: example_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<subseteq>{(vertex_1, canAccessThis)}.\n                            succ_tran\n                             \\<lparr>nodes = {vertex_1, canAccessThis},\n                                edges =\n                                  {(vertex_1, canAccessThis)} - f\\<rparr>\n                             vertex_1 =\n                            {} \\<and>\n                            succ_tran\n                             \\<lparr>nodes = {vertex_1, canAccessThis},\n                                edges =\n                                  {(vertex_1, canAccessThis)} - f\\<rparr>\n                             canAccessThis =\n                            {} \\<and>\n                            (\\<forall>x\\<in>f.\n                                \\<forall>x1.\n                                   (x1 = canAccessThis \\<longrightarrow>\n                                    (\\<forall>x2.\n  (x2 = canAccessThis \\<longrightarrow>\n   x = (canAccessThis, canAccessThis) \\<longrightarrow>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {canAccessThis, vertex_1, canAccessThis},\n                   edges =\n                     insert (canAccessThis, canAccessThis)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                canAccessThis) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {canAccessThis, vertex_1, canAccessThis},\n                   edges =\n                     insert (canAccessThis, canAccessThis)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                vertex_1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {canAccessThis, vertex_1, canAccessThis},\n                   edges =\n                     insert (canAccessThis, canAccessThis)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                canAccessThis)) \\<and>\n  (x2 \\<noteq> canAccessThis \\<longrightarrow>\n   x = (canAccessThis, x2) \\<longrightarrow>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes =\n                          {canAccessThis, x2, vertex_1, canAccessThis},\n                   edges =\n                     insert (canAccessThis, x2)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                canAccessThis) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes =\n                          {canAccessThis, x2, vertex_1, canAccessThis},\n                   edges =\n                     insert (canAccessThis, x2)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                x2) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes =\n                          {canAccessThis, x2, vertex_1, canAccessThis},\n                   edges =\n                     insert (canAccessThis, x2)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                vertex_1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes =\n                          {canAccessThis, x2, vertex_1, canAccessThis},\n                   edges =\n                     insert (canAccessThis, x2)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                canAccessThis)))) \\<and>\n                                   (x1 \\<noteq>\n                                    canAccessThis \\<longrightarrow>\n                                    (\\<forall>x2.\n  (x2 = canAccessThis \\<longrightarrow>\n   x = (x1, canAccessThis) \\<longrightarrow>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes =\n                          {x1, canAccessThis, vertex_1, canAccessThis},\n                   edges =\n                     insert (x1, canAccessThis)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                x1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes =\n                          {x1, canAccessThis, vertex_1, canAccessThis},\n                   edges =\n                     insert (x1, canAccessThis)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                canAccessThis) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes =\n                          {x1, canAccessThis, vertex_1, canAccessThis},\n                   edges =\n                     insert (x1, canAccessThis)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                vertex_1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes =\n                          {x1, canAccessThis, vertex_1, canAccessThis},\n                   edges =\n                     insert (x1, canAccessThis)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                canAccessThis)) \\<and>\n  (x2 \\<noteq> canAccessThis \\<longrightarrow>\n   x = (x1, x2) \\<longrightarrow>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                   edges =\n                     insert (x1, x2)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                x1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                   edges =\n                     insert (x1, x2)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                x2) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                   edges =\n                     insert (x1, x2)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                vertex_1) \\<or>\n   (\\<exists>a.\n       a \\<in> succ_tran\n                \\<lparr>nodes = {x1, x2, vertex_1, canAccessThis},\n                   edges =\n                     insert (x1, x2)\n                      ({(vertex_1, canAccessThis)} - f)\\<rparr>\n                canAccessThis))))) \\<and>\n                            succ_tran\n                             \\<lparr>nodes = {vertex_1, canAccessThis},\n                                edges =\n                                  {(vertex_1, canAccessThis)} - f\\<rparr>\n                             vertex_1 =\n                            {} \\<and>\n                            succ_tran\n                             \\<lparr>nodes = {vertex_1, canAccessThis},\n                                edges =\n                                  {(vertex_1, canAccessThis)} - f\\<rparr>\n                             canAccessThis =\n                            {} \\<and>\n                            vertex_1 \\<in> fst ` f \\<and>\n                            canAccessThis \\<in> set otherbot", "apply(rule_tac x=\"{(vertex_1,canAccessThis)}\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> succ_tran\n                          \\<lparr>nodes = {vertex_1, canAccessThis},\n                             edges = {}\\<rparr>\n                          vertex_1 =\n                         {} \\<and>\n                         succ_tran\n                          \\<lparr>nodes = {vertex_1, canAccessThis},\n                             edges = {}\\<rparr>\n                          canAccessThis =\n                         {} \\<and>\n                         ((\\<exists>a.\n                              a \\<in> succ_tran\n \\<lparr>nodes = {vertex_1, canAccessThis, vertex_1, canAccessThis},\n    edges = {(vertex_1, canAccessThis)}\\<rparr>\n vertex_1) \\<or>\n                          (\\<exists>a.\n                              a \\<in> succ_tran\n \\<lparr>nodes = {vertex_1, canAccessThis, vertex_1, canAccessThis},\n    edges = {(vertex_1, canAccessThis)}\\<rparr>\n canAccessThis) \\<or>\n                          (\\<exists>a.\n                              a \\<in> succ_tran\n \\<lparr>nodes = {vertex_1, canAccessThis, vertex_1, canAccessThis},\n    edges = {(vertex_1, canAccessThis)}\\<rparr>\n vertex_1) \\<or>\n                          (\\<exists>a.\n                              a \\<in> succ_tran\n \\<lparr>nodes = {vertex_1, canAccessThis, vertex_1, canAccessThis},\n    edges = {(vertex_1, canAccessThis)}\\<rparr>\n canAccessThis)) \\<and>\n                         succ_tran\n                          \\<lparr>nodes = {vertex_1, canAccessThis},\n                             edges = {}\\<rparr>\n                          vertex_1 =\n                         {} \\<and>\n                         succ_tran\n                          \\<lparr>nodes = {vertex_1, canAccessThis},\n                             edges = {}\\<rparr>\n                          canAccessThis =\n                         {} \\<and>\n                         canAccessThis \\<in> set otherbot", "apply(simp add: example_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot canAccessThis.\n       \\<lbrakk>\\<exists>ys. otherbot = canAccessThis # ys;\n        canAccessThis \\<noteq> vertex_1\\<rbrakk>\n       \\<Longrightarrow> canAccessThis \\<in> set otherbot", "apply(fastforce)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma TopoS_ACLcommunicateWith: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties receiver_violation", "unfolding receiver_violation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties False", "by unfold_locales"], ["", "hide_const (open) sinvar receiver_violation default_node_properties"], ["", "end"]]}