{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_BLPstrict.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\"", "lemma secret_default_candidate: \"\\<And> (nP::('v \\<Rightarrow> security_level)) e1 e2. \\<not> (nP e1) \\<le> (nP e2) \\<Longrightarrow> \\<not> Secret \\<le> (nP e2)\"", "lemma BLP_ENF: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar (\\<le>)\"", "lemma BLP_ENF_refl: \"SecurityInvariant_withOffendingFlows.ENF_refl sinvar (\\<le>)\"", "lemma BLP_offending_set: \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = BLP_offending_set\"", "lemma TopoS_BLPstrict: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], "translations": [["", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_mono sinvar", "apply(simp only: SecurityInvariant_withOffendingFlows.sinvar_mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nP N E' E.\n       wf_graph \\<lparr>nodes = N, edges = E\\<rparr> \\<and>\n       E' \\<subseteq> E \\<and>\n       sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP \\<longrightarrow>\n       sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' E.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "by auto"], ["", "interpretation SecurityInvariant_preliminaries\nwhere sinvar = sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_preliminaries sinvar", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(frule_tac finite_distinct_list[OF wf_graph.finiteE])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        \\<exists>xs. set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(erule_tac exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP xs.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rename_tac list_edges)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rule_tac ff=\"list_edges\" in SecurityInvariant_withOffendingFlows.mono_imp_set_offending_flows_not_empty[OF sinvar_mono])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> wf_graph G\n 2. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (set list_edges) G nP\n 3. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> set list_edges \\<subseteq> edges G\n 4. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> distinct list_edges\n 5. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 6. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto)[6]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP list_edges a b.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> edges G; \\<not> nP a \\<le> nP b;\n        set list_edges = edges G; distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (edges G) G nP\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto simp add: SecurityInvariant_withOffendingFlows.is_offending_flows_def graph_ops)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(fact SecurityInvariant_withOffendingFlows.sinvar_mono_imp_is_offending_flows_mono[OF sinvar_mono])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>ENF\\<close>"], ["", "lemma secret_default_candidate: \"\\<And> (nP::('v \\<Rightarrow> security_level)) e1 e2. \\<not> (nP e1) \\<le> (nP e2) \\<Longrightarrow> \\<not> Secret \\<le> (nP e2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP e1 e2.\n       \\<not> nP e1 \\<le> nP e2 \\<Longrightarrow> \\<not> Secret \\<le> nP e2", "apply(case_tac \"nP e1\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>nP e1 e2.\n       \\<lbrakk>\\<not> nP e1 \\<le> nP e2; nP e1 = Unclassified\\<rbrakk>\n       \\<Longrightarrow> \\<not> Secret \\<le> nP e2\n 2. \\<And>nP e1 e2.\n       \\<lbrakk>\\<not> nP e1 \\<le> nP e2; nP e1 = Confidential\\<rbrakk>\n       \\<Longrightarrow> \\<not> Secret \\<le> nP e2\n 3. \\<And>nP e1 e2.\n       \\<lbrakk>\\<not> nP e1 \\<le> nP e2; nP e1 = Secret\\<rbrakk>\n       \\<Longrightarrow> \\<not> Secret \\<le> nP e2", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>nP e1 e2.\n       \\<lbrakk>\\<not> Unclassified \\<le> nP e2;\n        nP e1 = Unclassified\\<rbrakk>\n       \\<Longrightarrow> \\<not> Secret \\<le> nP e2\n 2. \\<And>nP e1 e2.\n       \\<lbrakk>\\<not> Confidential \\<le> nP e2;\n        nP e1 = Confidential\\<rbrakk>\n       \\<Longrightarrow> \\<not> Secret \\<le> nP e2", "apply(case_tac [!] \"nP e2\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>nP e1 e2.\n       \\<lbrakk>\\<not> Unclassified \\<le> nP e2; nP e1 = Unclassified;\n        nP e2 = Unclassified\\<rbrakk>\n       \\<Longrightarrow> \\<not> Secret \\<le> nP e2\n 2. \\<And>nP e1 e2.\n       \\<lbrakk>\\<not> Unclassified \\<le> nP e2; nP e1 = Unclassified;\n        nP e2 = Confidential\\<rbrakk>\n       \\<Longrightarrow> \\<not> Secret \\<le> nP e2\n 3. \\<And>nP e1 e2.\n       \\<lbrakk>\\<not> Unclassified \\<le> nP e2; nP e1 = Unclassified;\n        nP e2 = Secret\\<rbrakk>\n       \\<Longrightarrow> \\<not> Secret \\<le> nP e2\n 4. \\<And>nP e1 e2.\n       \\<lbrakk>\\<not> Confidential \\<le> nP e2; nP e1 = Confidential;\n        nP e2 = Unclassified\\<rbrakk>\n       \\<Longrightarrow> \\<not> Secret \\<le> nP e2\n 5. \\<And>nP e1 e2.\n       \\<lbrakk>\\<not> Confidential \\<le> nP e2; nP e1 = Confidential;\n        nP e2 = Confidential\\<rbrakk>\n       \\<Longrightarrow> \\<not> Secret \\<le> nP e2\n 6. \\<And>nP e1 e2.\n       \\<lbrakk>\\<not> Confidential \\<le> nP e2; nP e1 = Confidential;\n        nP e2 = Secret\\<rbrakk>\n       \\<Longrightarrow> \\<not> Secret \\<le> nP e2", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma BLP_ENF: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar (\\<le>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<le>)", "unfolding SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2)", "by simp"], ["", "lemma BLP_ENF_refl: \"SecurityInvariant_withOffendingFlows.ENF_refl sinvar (\\<le>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.ENF_refl sinvar (\\<le>)", "unfolding SecurityInvariant_withOffendingFlows.ENF_refl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<le>) \\<and>\n    (\\<forall>p1. p1 \\<le> p1)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<le>)\n 2. \\<forall>p1. p1 \\<le> p1", "apply(simp add: BLP_ENF)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p1. p1 \\<le> p1", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition BLP_offending_set:: \"'v graph \\<Rightarrow> ('v \\<Rightarrow> security_level) \\<Rightarrow> ('v \\<times> 'v) set set\" where\n  \"BLP_offending_set G nP = (if sinvar G nP then\n      {}\n     else \n      { {e \\<in> edges G. case e of (e1,e2) \\<Rightarrow> (nP e1) > (nP e2)} })\""], ["", "lemma BLP_offending_set: \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = BLP_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = BLP_offending_set", "apply(simp only: fun_eq_iff SecurityInvariant_withOffendingFlows.ENF_offending_set[OF BLP_ENF] BLP_offending_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa.\n       (if sinvar x xa then {}\n        else {{(e1, e2).\n               (e1, e2) \\<in> edges x \\<and> \\<not> xa e1 \\<le> xa e2}}) =\n       (if sinvar x xa then {}\n        else {{e \\<in> edges x.\n               case e of (e1, e2) \\<Rightarrow> xa e2 < xa e1}})", "apply(rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (if sinvar x xa then {}\n        else {{(e1, e2).\n               (e1, e2) \\<in> edges x \\<and> \\<not> xa e1 \\<le> xa e2}}) =\n       (if sinvar x xa then {}\n        else {{e \\<in> edges x.\n               case e of (e1, e2) \\<Rightarrow> xa e2 < xa e1}})", "apply(rename_tac G nP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       (if sinvar G nP then {}\n        else {{(e1, e2).\n               (e1, e2) \\<in> edges G \\<and> \\<not> nP e1 \\<le> nP e2}}) =\n       (if sinvar G nP then {}\n        else {{e \\<in> edges G.\n               case e of (e1, e2) \\<Rightarrow> nP e2 < nP e1}})", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation BLPstrict: SecurityInvariant_ACS sinvar default_node_properties\n  (*TODO: why is there a where and no \"rewrites\" in the afp?*)\n  rewrites \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = BLP_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_ACS sinvar default_node_properties &&&\n    set_offending_flows = BLP_offending_set", "unfolding default_node_properties_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_ACS sinvar Secret &&&\n    set_offending_flows = BLP_offending_set", "apply(unfold_locales)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>fst ` f.\n                            \\<not> sinvar G (nP(i := Secret))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Secret\n 3. set_offending_flows = BLP_offending_set", "apply(rule ballI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> fst ` f\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := Secret))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Secret\n 3. set_offending_flows = BLP_offending_set", "apply(rule SecurityInvariant_withOffendingFlows.ENF_fsts_refl_instance[OF BLP_ENF_refl])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> fst ` f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nP e1 e2.\n                            \\<not> nP e1 \\<le> nP e2 \\<longrightarrow>\n                            \\<not> Secret \\<le> nP e2\n 2. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> fst ` f\\<rbrakk>\n       \\<Longrightarrow> ?f6 G f nP i \\<in> set_offending_flows G nP\n 3. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> fst ` f\\<rbrakk>\n       \\<Longrightarrow> i \\<in> fst ` ?f6 G f nP i\n 4. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Secret\n 5. set_offending_flows = BLP_offending_set", "apply(simp_all add: BLP_ENF BLP_ENF_refl)[3]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> fst ` f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nP e1 e2.\n                            \\<not> nP e1 \\<le> nP e2 \\<longrightarrow>\n                            \\<not> Secret \\<le> nP e2\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Secret\n 3. set_offending_flows = BLP_offending_set", "apply(simp add: secret_default_candidate; fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Secret\n 2. set_offending_flows = BLP_offending_set", "apply(erule default_uniqueness_by_counterexample_ACS)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Secret \\<Longrightarrow>\n       \\<exists>G nP i f.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G f) nP \\<and>\n          i \\<in> fst ` f \\<and> sinvar G (nP(i := otherbot))\n 2. set_offending_flows = BLP_offending_set", "apply(rule_tac x=\"\\<lparr> nodes=set [vertex_1,vertex_2], edges = set [(vertex_1,vertex_2)] \\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Secret \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_1, vertex_2)}\\<rparr> \\<and>\n       (\\<exists>nP.\n           \\<not> nP vertex_1 \\<le> nP vertex_2 \\<and>\n           (\\<exists>i.\n               (vertex_1 = i \\<longrightarrow>\n                (\\<exists>f.\n                    f \\<in> set_offending_flows\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             nP \\<and>\n                    (\\<forall>(e1, e2)\n                              \\<in>edges\n                                    (delete_edges\n\\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr>\nf).\n                        nP e1 \\<le> nP e2) \\<and>\n                    vertex_1 \\<in> fst ` f \\<and>\n                    otherbot \\<le> nP vertex_2)) \\<and>\n               (vertex_1 \\<noteq> i \\<longrightarrow>\n                (vertex_2 = i \\<longrightarrow>\n                 (\\<exists>f.\n                     f \\<in> set_offending_flows\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              nP \\<and>\n                     (\\<forall>x\\<in>edges\n(delete_edges\n  \\<lparr>nodes = {vertex_1, vertex_2},\n     edges = {(vertex_1, vertex_2)}\\<rparr>\n  f).\n                         case x of\n                         (e1, e2) \\<Rightarrow> nP e1 \\<le> nP e2) \\<and>\n                     vertex_2 \\<in> fst ` f \\<and>\n                     nP vertex_1 \\<le> otherbot)) \\<and>\n                (vertex_2 \\<noteq> i \\<longrightarrow>\n                 (\\<exists>f.\n                     f \\<in> set_offending_flows\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              nP \\<and>\n                     (\\<forall>x\\<in>edges\n(delete_edges\n  \\<lparr>nodes = {vertex_1, vertex_2},\n     edges = {(vertex_1, vertex_2)}\\<rparr>\n  f).\n                         case x of\n                         (e1, e2) \\<Rightarrow> nP e1 \\<le> nP e2) \\<and>\n                     i \\<in> fst ` f \\<and>\n                     nP vertex_1 \\<le> nP vertex_2)))))\n 2. set_offending_flows = BLP_offending_set", "apply(simp add: BLP_offending_set graph_ops wf_graph_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Secret \\<Longrightarrow>\n       \\<exists>nP.\n          \\<not> nP vertex_1 \\<le> nP vertex_2 \\<and>\n          (\\<exists>i.\n              (vertex_1 = i \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> BLP_offending_set\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            nP \\<and>\n                   ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n                    nP vertex_1 \\<le> nP vertex_2) \\<and>\n                   vertex_1 \\<in> fst ` f \\<and>\n                   otherbot \\<le> nP vertex_2)) \\<and>\n              (vertex_1 \\<noteq> i \\<longrightarrow>\n               (vertex_2 = i \\<longrightarrow>\n                (\\<exists>f.\n                    f \\<in> BLP_offending_set\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             nP \\<and>\n                    ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n                     nP vertex_1 \\<le> nP vertex_2) \\<and>\n                    vertex_2 \\<in> fst ` f \\<and>\n                    nP vertex_1 \\<le> otherbot)) \\<and>\n               (vertex_2 \\<noteq> i \\<longrightarrow>\n                (\\<exists>f.\n                    f \\<in> BLP_offending_set\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             nP \\<and>\n                    ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n                     nP vertex_1 \\<le> nP vertex_2) \\<and>\n                    i \\<in> fst ` f \\<and> nP vertex_1 \\<le> nP vertex_2))))\n 2. set_offending_flows = BLP_offending_set", "apply(rule_tac x=\"(\\<lambda> x. Secret)(vertex_1 := Secret, vertex_2 := Confidential)\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Secret \\<Longrightarrow>\n       \\<exists>i.\n          (vertex_1 = i \\<longrightarrow>\n           (\\<exists>f.\n               f \\<in> BLP_offending_set\n                        \\<lparr>nodes = {vertex_1, vertex_2},\n                           edges = {(vertex_1, vertex_2)}\\<rparr>\n                        ((\\<lambda>x. Secret)\n                         (vertex_1 := Secret,\n                          vertex_2 := Confidential)) \\<and>\n               (vertex_1, vertex_2) \\<in> f \\<and>\n               vertex_1 \\<in> fst ` f \\<and>\n               otherbot \\<le> Confidential)) \\<and>\n          (vertex_1 \\<noteq> i \\<longrightarrow>\n           (vertex_2 = i \\<longrightarrow>\n            (\\<exists>f.\n                f \\<in> BLP_offending_set\n                         \\<lparr>nodes = {vertex_1, vertex_2},\n                            edges = {(vertex_1, vertex_2)}\\<rparr>\n                         ((\\<lambda>x. Secret)\n                          (vertex_1 := Secret,\n                           vertex_2 := Confidential)) \\<and>\n                (vertex_1, vertex_2) \\<in> f \\<and>\n                vertex_2 \\<in> fst ` f \\<and> Secret \\<le> otherbot)) \\<and>\n           vertex_2 = i)\n 2. set_offending_flows = BLP_offending_set", "apply(rule_tac x=\"vertex_1\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Secret \\<Longrightarrow>\n       \\<exists>f.\n          f \\<in> BLP_offending_set\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   ((\\<lambda>x. Secret)\n                    (vertex_1 := Secret, vertex_2 := Confidential)) \\<and>\n          (vertex_1, vertex_2) \\<in> f \\<and>\n          vertex_1 \\<in> fst ` f \\<and> otherbot \\<le> Confidential\n 2. set_offending_flows = BLP_offending_set", "apply(rule_tac x=\"set [(vertex_1,vertex_2)]\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Secret \\<Longrightarrow>\n       {(vertex_1, vertex_2)}\n       \\<in> BLP_offending_set\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              ((\\<lambda>x. Secret)\n               (vertex_1 := Secret, vertex_2 := Confidential)) \\<and>\n       otherbot \\<le> Confidential\n 2. set_offending_flows = BLP_offending_set", "apply(simp add: BLP_offending_set_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Secret \\<Longrightarrow>\n       {(vertex_1, vertex_2)} =\n       {e. e = (vertex_1, vertex_2) \\<and>\n           (case e of\n            (e1, e2) \\<Rightarrow>\n              (e2 = vertex_2 \\<longrightarrow> e1 \\<noteq> vertex_2) \\<and>\n              e2 = vertex_2)} \\<and>\n       otherbot \\<le> Confidential\n 2. set_offending_flows = BLP_offending_set", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Secret \\<Longrightarrow>\n       {(vertex_1, vertex_2)} =\n       {e. e = (vertex_1, vertex_2) \\<and>\n           (case e of\n            (e1, e2) \\<Rightarrow>\n              (e2 = vertex_2 \\<longrightarrow> e1 \\<noteq> vertex_2) \\<and>\n              e2 = vertex_2)}\n 2. \\<And>otherbot.\n       otherbot \\<noteq> Secret \\<Longrightarrow>\n       otherbot \\<le> Confidential\n 3. set_offending_flows = BLP_offending_set", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Secret \\<Longrightarrow>\n       otherbot \\<le> Confidential\n 2. set_offending_flows = BLP_offending_set", "apply (case_tac otherbot, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = BLP_offending_set", "apply(fact BLP_offending_set)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma TopoS_BLPstrict: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties receiver_violation", "unfolding receiver_violation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties False", "by unfold_locales"], ["", "hide_fact (open) sinvar_mono"], ["", "hide_const (open) sinvar receiver_violation default_node_properties"], ["", "end"]]}