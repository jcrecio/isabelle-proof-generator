{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/TopoS_Vertices.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma distinct_vertices12[simp]: \"vertex_1 \\<noteq> vertex_2\"", "lemma distinct_vertices13[simp]: \"vertex_1 \\<noteq> vertex_3\"", "lemma distinct_vertices23[simp]: \"vertex_2 \\<noteq> vertex_3\"", "lemmas distinct_vertices_sym = distinct_vertices12[symmetric] distinct_vertices13[symmetric]\n          distinct_vertices23[symmetric]"], "translations": [["", "lemma distinct_vertices12[simp]: \"vertex_1 \\<noteq> vertex_2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertex_1 \\<noteq> vertex_2", "using distinct_vertices"], ["proof (prove)\nusing this:\n  distinct [vertex_1, vertex_2, vertex_3]\n\ngoal (1 subgoal):\n 1. vertex_1 \\<noteq> vertex_2", "by(simp)"], ["", "lemma distinct_vertices13[simp]: \"vertex_1 \\<noteq> vertex_3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertex_1 \\<noteq> vertex_3", "using distinct_vertices"], ["proof (prove)\nusing this:\n  distinct [vertex_1, vertex_2, vertex_3]\n\ngoal (1 subgoal):\n 1. vertex_1 \\<noteq> vertex_3", "by(simp)"], ["", "lemma distinct_vertices23[simp]: \"vertex_2 \\<noteq> vertex_3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertex_2 \\<noteq> vertex_3", "using distinct_vertices"], ["proof (prove)\nusing this:\n  distinct [vertex_1, vertex_2, vertex_3]\n\ngoal (1 subgoal):\n 1. vertex_2 \\<noteq> vertex_3", "by(simp)"], ["", "lemmas distinct_vertices_sym = distinct_vertices12[symmetric] distinct_vertices13[symmetric]\n          distinct_vertices23[symmetric]"], ["", "declare distinct_vertices_sym[simp]"], ["", "end"], ["", "text \\<open>Numbers, chars and strings are good candidates for vertices.\\<close>"], ["", "instantiation nat::vertex\nbegin"], ["", "definition \"vertex_1_nat\" ::nat where \"vertex_1 \\<equiv> (1::nat)\""], ["", "definition \"vertex_2_nat\" ::nat where \"vertex_2 \\<equiv> (2::nat)\""], ["", "definition \"vertex_3_nat\" ::nat where \"vertex_3 \\<equiv> (3::nat)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(nat, vertex_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct [vertex_1, vertex_2, vertex_3]", "qed(simp add: vertex_1_nat_def vertex_2_nat_def vertex_3_nat_def)"], ["", "end"], ["", "value \"vertex_1::nat\""], ["", "instantiation int::vertex\nbegin"], ["", "definition \"vertex_1_int\" ::int where \"vertex_1 \\<equiv> (1::int)\""], ["", "definition \"vertex_2_int\" ::int where \"vertex_2 \\<equiv> (2::int)\""], ["", "definition \"vertex_3_int\" ::int where \"vertex_3 \\<equiv> (3::int)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(int, vertex_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct [vertex_1, vertex_2, vertex_3]", "qed(simp add: vertex_1_int_def vertex_2_int_def vertex_3_int_def)"], ["", "end"], ["", "instantiation char::vertex\nbegin"], ["", "definition \"vertex_1_char\" ::char where \"vertex_1 \\<equiv> CHR ''A''\""], ["", "definition \"vertex_2_char\" ::char where \"vertex_2 \\<equiv> CHR ''B''\""], ["", "definition \"vertex_3_char\" ::char where \"vertex_3 \\<equiv> CHR ''C''\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(char, vertex_class)", "proof(intro_classes)"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct [vertex_1, vertex_2, vertex_3]", "qed(simp add: vertex_1_char_def  vertex_2_char_def vertex_3_char_def)"], ["", "end"], ["", "value \"vertex_1::char\""], ["", "instantiation list :: (\"vertex\") vertex\nbegin"], ["", "definition \"vertex_1_list\" where \"vertex_1 \\<equiv> []\""], ["", "definition \"vertex_2_list\" where \"vertex_2 \\<equiv> [vertex_1]\""], ["", "definition \"vertex_3_list\" where \"vertex_3 \\<equiv> [vertex_1, vertex_1]\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a list, vertex_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct [vertex_1, vertex_2, vertex_3]", "qed(simp add: vertex_1_list_def vertex_2_list_def vertex_3_list_def)"], ["", "end\n\n\\<comment> \\<open>for the ML graphviz visualizer\\<close>"], ["", "ML \\<open>\nfun tune_string_vertex_format (t: term) (s: string) : string = \n    if fastype_of t = @{typ string} then\n      if String.isPrefix \"''\" s then\n        String.substring (s, (size \"''\"), (size s - (size \"''''\")))\n      else let val _ = writeln (\"no tune_string_vertex_format for \\\"\"^s^\"\\\"\") in s end\n    else s\n    handle Subscript => let val _ = writeln (\"tune_string_vertex_format Subscript excpetion\") in s end;\n\\<close>"], ["", "end"]]}