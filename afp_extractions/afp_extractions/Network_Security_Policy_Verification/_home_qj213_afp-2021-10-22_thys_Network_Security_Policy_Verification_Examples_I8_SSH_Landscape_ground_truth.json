{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Examples/I8_SSH_Landscape.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma \"wf_list_graph I8SSHgraph\"", "lemma \"all_security_requirements_fulfilled I8Requirements I8SSHgraph\"", "lemma \"set (filter_IFS_no_violations I8SSHgraph I8Requirements) = set (edgesL I8SSHgraph)\"", "lemma \"set noBiFlows = set (filter_compliant_stateful_ACS I8SSHgraph I8Requirements)\"", "lemma \"flows_stateL (generate_valid_stateful_policy_IFSACS I8SSHgraph I8Requirements) = noBiFlows\"", "lemma \"set (flows_stateL (generate_valid_stateful_policy_IFSACS I8SSHgraph I8Requirements)) = set noBiFlows\""], "translations": [["", "lemma \"wf_list_graph I8SSHgraph\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph I8SSHgraph", "by eval"], ["", "definition Confidentiality1::\"(nat SecurityInvariant)\" where\n      \"Confidentiality1 \\<equiv> new_configured_list_SecurityInvariant SINVAR_BLPtrusted_impl.SINVAR_LIB_BLPtrusted \\<lparr> \n          node_properties = [0 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         1 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         2 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         3 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         4 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         5 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         6 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         7 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         8 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         9 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         10 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         11 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         12 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         13 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         14 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         15 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         16 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         17 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         18 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         19 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         20 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         21 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         22 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n         23 \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>]\n          \\<rparr> ''some confidentiality lables''\""], ["", "definition \"Subnet1 \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_SubnetsInGW \\<lparr> \n          node_properties = [0 \\<mapsto> Unassigned,\n         1 \\<mapsto> Unassigned,\n         2 \\<mapsto> Member,\n         3 \\<mapsto> InboundGateway,\n         4 \\<mapsto> Member,\n         5 \\<mapsto> InboundGateway,\n         6 \\<mapsto> InboundGateway,\n         7 \\<mapsto> InboundGateway,\n         8 \\<mapsto> InboundGateway,\n         9 \\<mapsto> InboundGateway,\n         10 \\<mapsto> Member,\n         11 \\<mapsto> InboundGateway,\n         12 \\<mapsto> InboundGateway,\n         13 \\<mapsto> InboundGateway,\n         14 \\<mapsto> InboundGateway,\n         15 \\<mapsto> InboundGateway,\n         16 \\<mapsto> InboundGateway,\n         17 \\<mapsto> Unassigned,\n         18 \\<mapsto> Member,\n         19 \\<mapsto> InboundGateway,\n         20 \\<mapsto> Unassigned,\n         21 \\<mapsto> InboundGateway,\n         22 \\<mapsto> InboundGateway,\n         23 \\<mapsto> Member]\n          \\<rparr> ''some subnet things''\""], ["", "definition \"PrintingSink \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_Sink \\<lparr> \n          node_properties = [3 \\<mapsto> Sink]\n          \\<rparr> ''information must not leave printer''\""], ["", "definition \"I8Requirements = [ Confidentiality1, Subnet1 ]\""], ["", "value \"implc_get_offending_flows I8Requirements I8SSHgraph\""], ["", "value \"implc_offending_flows PrintingSink I8SSHgraph\""], ["", "ML\\<open>\nvisualize_graph @{context} @{term \"I8Requirements\"} @{term \"I8SSHgraph\"};\n\\<close>"], ["", "lemma \"all_security_requirements_fulfilled I8Requirements I8SSHgraph\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     I8Requirements I8SSHgraph", "by eval"], ["", "lemma \"set (filter_IFS_no_violations I8SSHgraph I8Requirements) = set (edgesL I8SSHgraph)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (TopoS_Stateful_Policy_impl.filter_IFS_no_violations I8SSHgraph\n          I8Requirements) =\n    set (edgesL I8SSHgraph)", "by eval"], ["", "value \"filter_compliant_stateful_ACS I8SSHgraph I8Requirements\""], ["", "text\\<open>noBiFlows is the list of flows where not already a bidirectional flows is allowed.\n      That is, the list of flows we might wish to be stateful to enhance connectivity.\\<close>"], ["", "definition \"noBiFlows = [e \\<leftarrow> edgesL I8SSHgraph. case e of (s,r) \\<Rightarrow> \\<not> ((s,r) \\<in> set (edgesL I8SSHgraph) \\<and> (r,s) \\<in> set (edgesL I8SSHgraph)) ]\""], ["", "lemma \"set noBiFlows = set (filter_compliant_stateful_ACS I8SSHgraph I8Requirements)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set noBiFlows =\n    set (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS I8SSHgraph\n          I8Requirements)", "by eval"], ["", "value \"generate_valid_stateful_policy_IFSACS I8SSHgraph I8Requirements\""], ["", "text\\<open>even the order of the list is preserved!!\\<close>"], ["", "lemma \"flows_stateL (generate_valid_stateful_policy_IFSACS I8SSHgraph I8Requirements) = noBiFlows\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_stateL\n     (TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS\n       I8SSHgraph I8Requirements) =\n    noBiFlows", "by eval"], ["", "lemma \"set (flows_stateL (generate_valid_stateful_policy_IFSACS I8SSHgraph I8Requirements)) = set noBiFlows\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (flows_stateL\n          (TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS\n            I8SSHgraph I8Requirements)) =\n    set noBiFlows", "by eval"], ["", "end"]]}