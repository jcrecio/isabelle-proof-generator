{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/TopoS_ENF.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma monotonicity_sinvar_mono: \"sinvar_all_edges_normal_form P \\<Longrightarrow> sinvar_mono\"", "lemma ENF_offending_imp_not_P:\n    assumes \"sinvar_all_edges_normal_form P\" \"F \\<in> set_offending_flows G nP\" \"(e1, e2) \\<in> F\"\n    shows \"\\<not> P (nP e1) (nP e2)\"", "lemma ENF_offending_set_P_representation: \n    assumes \"sinvar_all_edges_normal_form P\" \"F \\<in> set_offending_flows G nP\"\n    shows \"F = {(e1,e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\" (is \"F = ?E\")", "lemma ENF_offending_subseteq_lhs:\n    assumes \"sinvar_all_edges_normal_form P\"\n    shows \"set_offending_flows G nP \\<subseteq> { {(e1,e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)} }\"", "lemma ENF_offending_not_empty_imp_ENF_offending_subseteq_rhs:\n    assumes \"sinvar_all_edges_normal_form P\" \"set_offending_flows G nP \\<noteq> {}\"\n    shows \"{ {(e1,e2) \\<in> edges G. \\<not> P (nP e1) (nP e2)} } \\<subseteq> set_offending_flows G nP\"", "lemma ENF_notevalmodel_imp_offending_not_empty:\n  \"sinvar_all_edges_normal_form P \\<Longrightarrow> \\<not> sinvar G nP \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}\"", "lemma ENF_offending_case1:\n    \"\\<lbrakk> sinvar_all_edges_normal_form P;  \\<not> sinvar G nP \\<rbrakk> \\<Longrightarrow>\n    { {(e1,e2). (e1, e2) \\<in> (edges G) \\<and> \\<not> P (nP e1) (nP e2)} } = set_offending_flows G nP\"", "lemma ENF_offending_case2:\n    \"\\<lbrakk> sinvar_all_edges_normal_form P; sinvar G nP \\<rbrakk> \\<Longrightarrow>\n    {} = set_offending_flows G nP\"", "theorem ENF_offending_set:\n    \"\\<lbrakk> sinvar_all_edges_normal_form P \\<rbrakk> \\<Longrightarrow>\n    set_offending_flows G nP = (if sinvar G nP then\n      {}\n     else \n      { {(e1,e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)} })\"", "lemma (in SecurityInvariant_withOffendingFlows)  ENF_offending_members:\n    \"\\<lbrakk> \\<not> sinvar G nP; sinvar_all_edges_normal_form P; f \\<in> set_offending_flows G nP\\<rbrakk> \\<Longrightarrow> \n    f \\<subseteq> (edges G) \\<and> (\\<forall> (e1, e2)\\<in> f. \\<not> P (nP e1) (nP e2))\"", "lemma (in SecurityInvariant_withOffendingFlows) ENF_refl_not_offedning:\n        \"\\<lbrakk> \\<not> sinvar G nP; f \\<in> set_offending_flows G nP; \n          ENF_refl P\\<rbrakk> \\<Longrightarrow>\n          \\<forall>(e1,e2) \\<in> f. e1 \\<noteq> e2\"", "lemma (in SecurityInvariant_withOffendingFlows) ENF_default_update_fst: \n  fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n  assumes modelInv: \"\\<not> sinvar G nP\"\n    and   ENFdef: \"sinvar_all_edges_normal_form P\"\n    and   secdef: \"\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow> \\<not> (P \\<bottom> (nP e2))\"\n  shows\n    \"\\<not> (\\<forall> (e1, e2) \\<in> edges G. P ((nP(i := \\<bottom>)) e1) (nP e2))\"", "lemma (in SecurityInvariant_withOffendingFlows) \n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    shows \"\\<not> sinvar G nP \\<Longrightarrow> sinvar_all_edges_normal_form P \\<Longrightarrow>\n    (\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow>  \\<not> (P \\<bottom> (nP e2))) \\<Longrightarrow>\n    (\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow> \\<not> (P (nP e1) \\<bottom>)) \\<Longrightarrow>\n    (\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> P \\<bottom> \\<bottom>)\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))\"", "lemma (in SecurityInvariant_withOffendingFlows)  ENF_fsts_refl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf_refl: \"ENF_refl P\"\n    and   a3: \"\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow> \\<not> (P \\<bottom> (nP e2))\" (*changed \\<And> to \\<forall>*)\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_fsts: \"i \\<in> fst ` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\"", "lemma (in SecurityInvariant_withOffendingFlows)  ENF_snds_refl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf_refl: \"ENF_refl P\"\n    and   a3: \"\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow> \\<not> (P (nP e1) \\<bottom>)\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_snds: \"i \\<in> snd ` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\"", "lemma (in SecurityInvariant_withOffendingFlows) ENFsr_monotonicity_sinvar_mono: \"\\<lbrakk> sinvar_all_edges_normal_form_sr P \\<rbrakk> \\<Longrightarrow>\n    sinvar_mono\"", "theorem (in SecurityInvariant_withOffendingFlows) ENFsr_offending_set:\n    assumes ENFsr: \"sinvar_all_edges_normal_form_sr P\"\n    shows \"set_offending_flows G nP = (if sinvar G nP then\n      {}\n     else \n      { {(s,r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r} })\" (is \"?A = ?B\")", "lemma (in SecurityInvariant_withOffendingFlows) ENFnrSR_to_ENFsr: \n    \"sinvar_all_edges_normal_form_not_refl_SR P \\<Longrightarrow> sinvar_all_edges_normal_form_sr (\\<lambda> p1 v1 p2 v2. v1 \\<noteq> v2 \\<longrightarrow> P p1 v1 p2 v2)\"", "theorem (in SecurityInvariant_withOffendingFlows) ENFnrSR_offending_set:\n    \"\\<lbrakk> sinvar_all_edges_normal_form_not_refl_SR P \\<rbrakk> \\<Longrightarrow>\n    set_offending_flows G nP = (if sinvar G nP then\n      {}\n     else \n      { {(e1,e2). (e1, e2) \\<in> edges G \\<and> e1 \\<noteq> e2 \\<and> \\<not> P (nP e1) e1 (nP e2) e2} })\"", "lemma (in SecurityInvariant_withOffendingFlows)  ENFnrSR_fsts_weakrefl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf: \"sinvar_all_edges_normal_form_not_refl_SR P\"\n    and   a_weakrefl: \"\\<forall> s r. P \\<bottom> s \\<bottom> r\"\n    and   a_botdefault: \"\\<forall> s r. (nP r) \\<noteq> \\<bottom> \\<longrightarrow> \\<not> P (nP s) s (nP r) r \\<longrightarrow> \\<not> P \\<bottom> s (nP r) r\"\n    and   a_alltobot: \"\\<forall> s r. P (nP s) s \\<bottom> r\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_fsts: \"i \\<in> fst` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\"", "lemma (in SecurityInvariant_withOffendingFlows)  ENFnrSR_snds_weakrefl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf: \"sinvar_all_edges_normal_form_not_refl_SR P\"\n    and   a_weakrefl: \"\\<forall> s r. P \\<bottom> s \\<bottom> r\"\n    and   a_botdefault: \"\\<forall> s r. (nP s) \\<noteq> \\<bottom> \\<longrightarrow> \\<not> P (nP s) s (nP r) r \\<longrightarrow> \\<not> P (nP s) s \\<bottom> r\"\n    and   a_bottoall: \"\\<forall> s r. P \\<bottom> s (nP r) r\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_snds: \"i \\<in> snd` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\"", "lemma (in SecurityInvariant_withOffendingFlows) ENFnr_to_ENFnrSR: \n    \"sinvar_all_edges_normal_form_not_refl P \\<Longrightarrow> sinvar_all_edges_normal_form_not_refl_SR (\\<lambda> v1 _ v2 _. P v1 v2)\"", "theorem (in SecurityInvariant_withOffendingFlows) ENFnr_offending_set:\n    \"\\<lbrakk> sinvar_all_edges_normal_form_not_refl P \\<rbrakk> \\<Longrightarrow>\n    set_offending_flows G nP = (if sinvar G nP then\n      {}\n     else \n      { {(e1,e2). (e1, e2) \\<in> edges G \\<and> e1 \\<noteq> e2 \\<and> \\<not> P (nP e1) (nP e2)} })\"", "lemma (in SecurityInvariant_withOffendingFlows)  ENFnr_fsts_weakrefl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf: \"sinvar_all_edges_normal_form_not_refl P\"\n    and   a_botdefault: \"\\<forall> e1 e2. e2 \\<noteq> \\<bottom> \\<longrightarrow> \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2\"\n    and   a_alltobot: \"\\<forall> e1. P e1 \\<bottom>\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_fsts: \"i \\<in> fst` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\"", "lemma (in SecurityInvariant_withOffendingFlows)  ENFnr_snds_weakrefl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf: \"sinvar_all_edges_normal_form_not_refl P\"\n    and   a_botdefault: \"\\<forall> e1 e2. \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>\"\n    and   a_bottoall: \"\\<forall> e2. P \\<bottom> e2\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_snds: \"i \\<in> snd` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\"", "lemma (in SecurityInvariant_withOffendingFlows)  ENF_weakrefl_instance_FALSE:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_wfG: \"wf_graph G\"\n    and   a_not_eval: \"\\<not> sinvar G nP\"\n    and   a_enf: \"sinvar_all_edges_normal_form P\"\n    and   a_weakrefl: \"P \\<bottom> \\<bottom>\"\n    and   a_botisolated: \"\\<And> e2. e2 \\<noteq> \\<bottom> \\<Longrightarrow> \\<not> P \\<bottom> e2\"\n    and   a_botdefault: \"\\<And> e1 e2. e1 \\<noteq> \\<bottom> \\<Longrightarrow> \\<not> P e1 e2 \\<Longrightarrow> \\<not> P e1 \\<bottom>\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_offending_rm: \"sinvar (delete_edges G f) nP\"\n    and   a_i_fsts: \"i \\<in> snd` f\"\n    and   a_not_eval_upd: \"\\<not> sinvar G (nP(i := \\<bottom>))\"\n    shows \"False\""], "translations": [["", "lemma monotonicity_sinvar_mono: \"sinvar_all_edges_normal_form P \\<Longrightarrow> sinvar_mono\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form P \\<Longrightarrow> sinvar_mono", "unfolding sinvar_all_edges_normal_form_def sinvar_mono_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G nP.\n       sinvar G nP =\n       (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2)) \\<Longrightarrow>\n    \\<forall>nP N E' E.\n       wf_graph \\<lparr>nodes = N, edges = E\\<rparr> \\<and>\n       E' \\<subseteq> E \\<and>\n       sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP \\<longrightarrow>\n       sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "by auto"], ["", "end"], ["", "subsubsection \\<open>Offending Flows\\<close>"], ["", "context SecurityInvariant_withOffendingFlows\nbegin"], ["", "text\\<open>The insight: for all edges in the members of the offending flows, @{term \"\\<not> P\"} holds.\\<close>"], ["", "lemma ENF_offending_imp_not_P:\n    assumes \"sinvar_all_edges_normal_form P\" \"F \\<in> set_offending_flows G nP\" \"(e1, e2) \\<in> F\"\n    shows \"\\<not> P (nP e1) (nP e2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P (nP e1) (nP e2)", "using assms"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n  F \\<in> set_offending_flows G nP\n  (e1, e2) \\<in> F\n\ngoal (1 subgoal):\n 1. \\<not> P (nP e1) (nP e2)", "unfolding sinvar_all_edges_normal_form_def set_offending_flows_def is_offending_flows_min_set_def is_offending_flows_def"], ["proof (prove)\nusing this:\n  \\<forall>G nP.\n     sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))\n  F \\<in> {F. F \\<subseteq> edges G \\<and>\n              (\\<not> sinvar G nP \\<and>\n               sinvar (delete_edges G F) nP) \\<and>\n              (\\<forall>(e1, e2)\\<in>F.\n                  \\<not> sinvar (add_edge e1 e2 (delete_edges G F)) nP)}\n  (e1, e2) \\<in> F\n\ngoal (1 subgoal):\n 1. \\<not> P (nP e1) (nP e2)", "by (fastforce simp: graph_ops)"], ["", "text\\<open>Hence, the members of @{const set_offending_flows} must look as follows.\\<close>"], ["", "lemma ENF_offending_set_P_representation: \n    assumes \"sinvar_all_edges_normal_form P\" \"F \\<in> set_offending_flows G nP\"\n    shows \"F = {(e1,e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\" (is \"F = ?E\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "assume \"(a, b) \\<in> F\""], ["proof (state)\nthis:\n  (a, b) \\<in> F\n\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "hence \"(a, b) \\<in> ?E\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> F\n\ngoal (1 subgoal):\n 1. (a, b)\n    \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "using assms"], ["proof (prove)\nusing this:\n  (a, b) \\<in> F\n  sinvar_all_edges_normal_form P\n  F \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. (a, b)\n    \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "by (auto simp: set_offending_flows_def ENF_offending_imp_not_P)"], ["proof (state)\nthis:\n  (a, b)\n  \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\n\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "}"], ["proof (state)\nthis:\n  (?a2, ?b2) \\<in> F \\<Longrightarrow>\n  (?a2, ?b2)\n  \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\n\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "moreover"], ["proof (state)\nthis:\n  (?a2, ?b2) \\<in> F \\<Longrightarrow>\n  (?a2, ?b2)\n  \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\n\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "{"], ["proof (state)\nthis:\n  (?a2, ?b2) \\<in> F \\<Longrightarrow>\n  (?a2, ?b2)\n  \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\n\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "assume \"x \\<in> ?E\""], ["proof (state)\nthis:\n  x \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\n\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "hence \"x \\<in> F\""], ["proof (prove)\nusing this:\n  x \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\n\ngoal (1 subgoal):\n 1. x \\<in> F", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\n  sinvar_all_edges_normal_form P\n  F \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. x \\<in> F", "unfolding sinvar_all_edges_normal_form_def set_offending_flows_def is_offending_flows_min_set_def"], ["proof (prove)\nusing this:\n  x \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\n  \\<forall>G nP.\n     sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))\n  F \\<in> {F. F \\<subseteq> edges G \\<and>\n              is_offending_flows F G nP \\<and>\n              (\\<forall>(e1, e2)\\<in>F.\n                  \\<not> sinvar (add_edge e1 e2 (delete_edges G F)) nP)}\n\ngoal (1 subgoal):\n 1. x \\<in> F", "by (fastforce simp: is_offending_flows_def graph_ops)"], ["proof (state)\nthis:\n  x \\<in> F\n\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "}"], ["proof (state)\nthis:\n  ?x2\n  \\<in> {(e1, e2).\n         (e1, e2) \\<in> edges G \\<and>\n         \\<not> P (nP e1) (nP e2)} \\<Longrightarrow>\n  ?x2 \\<in> F\n\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "ultimately"], ["proof (chain)\npicking this:\n  (?a2, ?b2) \\<in> F \\<Longrightarrow>\n  (?a2, ?b2)\n  \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\n  ?x2\n  \\<in> {(e1, e2).\n         (e1, e2) \\<in> edges G \\<and>\n         \\<not> P (nP e1) (nP e2)} \\<Longrightarrow>\n  ?x2 \\<in> F", "show ?thesis"], ["proof (prove)\nusing this:\n  (?a2, ?b2) \\<in> F \\<Longrightarrow>\n  (?a2, ?b2)\n  \\<in> {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\n  ?x2\n  \\<in> {(e1, e2).\n         (e1, e2) \\<in> edges G \\<and>\n         \\<not> P (nP e1) (nP e2)} \\<Longrightarrow>\n  ?x2 \\<in> F\n\ngoal (1 subgoal):\n 1. F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}", "by blast"], ["proof (state)\nthis:\n  F = {(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>We can show left to right of the desired representation of @{const set_offending_flows}\\<close>"], ["", "lemma ENF_offending_subseteq_lhs:\n    assumes \"sinvar_all_edges_normal_form P\"\n    shows \"set_offending_flows G nP \\<subseteq> { {(e1,e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)} }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows G nP\n    \\<subseteq> {{(e1, e2).\n                  (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}}", "using assms"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n\ngoal (1 subgoal):\n 1. set_offending_flows G nP\n    \\<subseteq> {{(e1, e2).\n                  (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}}", "by (force simp: ENF_offending_set_P_representation)"], ["", "text\\<open>if @{const set_offending_flows} is not empty, we have the other direction.\\<close>"], ["", "lemma ENF_offending_not_empty_imp_ENF_offending_subseteq_rhs:\n    assumes \"sinvar_all_edges_normal_form P\" \"set_offending_flows G nP \\<noteq> {}\"\n    shows \"{ {(e1,e2) \\<in> edges G. \\<not> P (nP e1) (nP e2)} } \\<subseteq> set_offending_flows G nP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {{(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}}\n    \\<subseteq> set_offending_flows G nP", "using assms ENF_offending_set_P_representation"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n  set_offending_flows G nP \\<noteq> {}\n  \\<lbrakk>sinvar_all_edges_normal_form ?P;\n   ?F \\<in> set_offending_flows ?G ?nP\\<rbrakk>\n  \\<Longrightarrow> ?F =\n                    {(e1, e2).\n                     (e1, e2) \\<in> edges ?G \\<and>\n                     \\<not> ?P (?nP e1) (?nP e2)}\n\ngoal (1 subgoal):\n 1. {{(e1, e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}}\n    \\<subseteq> set_offending_flows G nP", "by blast"], ["", "lemma ENF_notevalmodel_imp_offending_not_empty:\n  \"sinvar_all_edges_normal_form P \\<Longrightarrow> \\<not> sinvar G nP \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}", "(*TODO get easier from monotonicity? but would require valid graph assumption ...*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}", "assume enf: \"sinvar_all_edges_normal_form P\"\n      and ns: \"\\<not> sinvar G nP\""], ["proof (state)\nthis:\n  sinvar_all_edges_normal_form P\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}", "{"], ["proof (state)\nthis:\n  sinvar_all_edges_normal_form P\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}", "let ?F'=\"{(e1,e2) \\<in> (edges G). \\<not>P (nP e1) (nP e2)}\"\n        \\<comment> \\<open>select @{term \"?F'\"} as the list of all edges which violate @{term \"P\"}\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}", "from enf"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form P", "have ENF_notevalmodel_offending_imp_ex_offending_min:\n            \"\\<And>F. is_offending_flows F G nP \\<Longrightarrow> F \\<subseteq> edges G \\<Longrightarrow>\n             \\<exists>F'. F' \\<subseteq> edges G \\<and> is_offending_flows_min_set F' G nP\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>is_offending_flows F G nP; F \\<subseteq> edges G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F'\\<subseteq>edges G.\n                            is_offending_flows_min_set F' G nP", "unfolding sinvar_all_edges_normal_form_def is_offending_flows_min_set_def is_offending_flows_def"], ["proof (prove)\nusing this:\n  \\<forall>G nP.\n     sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>\\<not> sinvar G nP \\<and> sinvar (delete_edges G F) nP;\n        F \\<subseteq> edges G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F'\\<subseteq>edges G.\n                            (\\<not> sinvar G nP \\<and>\n                             sinvar (delete_edges G F') nP) \\<and>\n                            (\\<forall>(e1, e2)\\<in>F'.\n                                \\<not> sinvar\n  (add_edge e1 e2 (delete_edges G F')) nP)", "by (-) (rule exI[where x=\"?F'\"], fastforce simp: graph_ops)"], ["proof (state)\nthis:\n  \\<lbrakk>is_offending_flows ?F G nP; ?F \\<subseteq> edges G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>F'\\<subseteq>edges G.\n                       is_offending_flows_min_set F' G nP\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}", "from enf ns"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form P\n  \\<not> sinvar G nP", "have \"\\<exists>F. F \\<subseteq> (edges G) \\<and> is_offending_flows F G nP\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. \\<exists>F\\<subseteq>edges G. is_offending_flows F G nP", "unfolding sinvar_all_edges_normal_form_def is_offending_flows_def"], ["proof (prove)\nusing this:\n  \\<forall>G nP.\n     sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. \\<exists>F\\<subseteq>edges G.\n       \\<not> sinvar G nP \\<and> sinvar (delete_edges G F) nP", "by (-) (rule exI[where x=\"?F'\"], fastforce simp: graph_ops)"], ["proof (state)\nthis:\n  \\<exists>F\\<subseteq>edges G. is_offending_flows F G nP\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}", "from enf ns this ENF_notevalmodel_offending_imp_ex_offending_min"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form P\n  \\<not> sinvar G nP\n  \\<exists>F\\<subseteq>edges G. is_offending_flows F G nP\n  \\<lbrakk>is_offending_flows ?F G nP; ?F \\<subseteq> edges G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>F'\\<subseteq>edges G.\n                       is_offending_flows_min_set F' G nP", "have ENF_notevalmodel_imp_ex_offending_min:\n          \"\\<exists>F. F \\<subseteq> edges G \\<and> is_offending_flows_min_set F G nP\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n  \\<not> sinvar G nP\n  \\<exists>F\\<subseteq>edges G. is_offending_flows F G nP\n  \\<lbrakk>is_offending_flows ?F G nP; ?F \\<subseteq> edges G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>F'\\<subseteq>edges G.\n                       is_offending_flows_min_set F' G nP\n\ngoal (1 subgoal):\n 1. \\<exists>F\\<subseteq>edges G. is_offending_flows_min_set F G nP", "by blast"], ["proof (state)\nthis:\n  \\<exists>F\\<subseteq>edges G. is_offending_flows_min_set F G nP\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}", "}"], ["proof (state)\nthis:\n  \\<exists>F\\<subseteq>edges G. is_offending_flows_min_set F G nP\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}", "note ENF_notevalmodel_imp_ex_offending_min=this"], ["proof (state)\nthis:\n  \\<exists>F\\<subseteq>edges G. is_offending_flows_min_set F G nP\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}", "from ENF_notevalmodel_imp_ex_offending_min"], ["proof (chain)\npicking this:\n  \\<exists>F\\<subseteq>edges G. is_offending_flows_min_set F G nP", "show \"set_offending_flows G nP \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<exists>F\\<subseteq>edges G. is_offending_flows_min_set F G nP\n\ngoal (1 subgoal):\n 1. set_offending_flows G nP \\<noteq> {}", "using set_offending_flows_def"], ["proof (prove)\nusing this:\n  \\<exists>F\\<subseteq>edges G. is_offending_flows_min_set F G nP\n  set_offending_flows ?G ?nP =\n  {F. F \\<subseteq> edges ?G \\<and> is_offending_flows_min_set F ?G ?nP}\n\ngoal (1 subgoal):\n 1. set_offending_flows G nP \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  set_offending_flows G nP \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ENF_offending_case1:\n    \"\\<lbrakk> sinvar_all_edges_normal_form P;  \\<not> sinvar G nP \\<rbrakk> \\<Longrightarrow>\n    { {(e1,e2). (e1, e2) \\<in> (edges G) \\<and> \\<not> P (nP e1) (nP e2)} } = set_offending_flows G nP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> {{(e1, e2).\n                        (e1, e2) \\<in> edges G \\<and>\n                        \\<not> P (nP e1) (nP e2)}} =\n                      set_offending_flows G nP", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> {{(e1, e2).\n                        (e1, e2) \\<in> edges G \\<and>\n                        \\<not> P (nP e1) (nP e2)}}\n                      \\<subseteq> set_offending_flows G nP\n 2. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP\n                      \\<subseteq> {{(e1, e2).\n                                    (e1, e2) \\<in> edges G \\<and>\n                                    \\<not> P (nP e1) (nP e2)}}", "apply(frule ENF_notevalmodel_imp_offending_not_empty, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP;\n     set_offending_flows G nP \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> {{(e1, e2).\n                        (e1, e2) \\<in> edges G \\<and>\n                        \\<not> P (nP e1) (nP e2)}}\n                      \\<subseteq> set_offending_flows G nP\n 2. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP\n                      \\<subseteq> {{(e1, e2).\n                                    (e1, e2) \\<in> edges G \\<and>\n                                    \\<not> P (nP e1) (nP e2)}}", "apply(rule ENF_offending_not_empty_imp_ENF_offending_subseteq_rhs, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP;\n     set_offending_flows G nP \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP \\<noteq> {}\n 2. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP\n                      \\<subseteq> {{(e1, e2).\n                                    (e1, e2) \\<in> edges G \\<and>\n                                    \\<not> P (nP e1) (nP e2)}}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> set_offending_flows G nP\n                      \\<subseteq> {{(e1, e2).\n                                    (e1, e2) \\<in> edges G \\<and>\n                                    \\<not> P (nP e1) (nP e2)}}", "apply(rule ENF_offending_subseteq_lhs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; \\<not> sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> sinvar_all_edges_normal_form P", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ENF_offending_case2:\n    \"\\<lbrakk> sinvar_all_edges_normal_form P; sinvar G nP \\<rbrakk> \\<Longrightarrow>\n    {} = set_offending_flows G nP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P; sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> {} = set_offending_flows G nP", "apply(drule sinvar_no_offending[of G nP])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form P;\n     set_offending_flows G nP = {}\\<rbrakk>\n    \\<Longrightarrow> {} = set_offending_flows G nP", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem ENF_offending_set:\n    \"\\<lbrakk> sinvar_all_edges_normal_form P \\<rbrakk> \\<Longrightarrow>\n    set_offending_flows G nP = (if sinvar G nP then\n      {}\n     else \n      { {(e1,e2). (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)} })\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form P \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(e1, e2).\n            (e1, e2) \\<in> edges G \\<and> \\<not> P (nP e1) (nP e2)}})", "by(simp add: ENF_offending_case1 ENF_offending_case2)"], ["", "end"], ["", "subsubsection \\<open>Lemmata\\<close>"], ["", "lemma (in SecurityInvariant_withOffendingFlows)  ENF_offending_members:\n    \"\\<lbrakk> \\<not> sinvar G nP; sinvar_all_edges_normal_form P; f \\<in> set_offending_flows G nP\\<rbrakk> \\<Longrightarrow> \n    f \\<subseteq> (edges G) \\<and> (\\<forall> (e1, e2)\\<in> f. \\<not> P (nP e1) (nP e2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     f \\<in> set_offending_flows G nP\\<rbrakk>\n    \\<Longrightarrow> f \\<subseteq> edges G \\<and>\n                      (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))", "by(auto simp add: ENF_offending_set)"], ["", "subsubsection \\<open>Instance Helper\\<close>"], ["", "lemma (in SecurityInvariant_withOffendingFlows) ENF_refl_not_offedning:\n        \"\\<lbrakk> \\<not> sinvar G nP; f \\<in> set_offending_flows G nP; \n          ENF_refl P\\<rbrakk> \\<Longrightarrow>\n          \\<forall>(e1,e2) \\<in> f. e1 \\<noteq> e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; f \\<in> set_offending_flows G nP;\n     ENF_refl P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; f \\<in> set_offending_flows G nP;\n     ENF_refl P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2", "assume a_not_eval: \"\\<not> sinvar G nP\"\n    and   a_enf_refl: \"ENF_refl P\"\n    and   a_offedning: \"f \\<in> set_offending_flows G nP\""], ["proof (state)\nthis:\n  \\<not> sinvar G nP\n  ENF_refl P\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; f \\<in> set_offending_flows G nP;\n     ENF_refl P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2", "from a_enf_refl"], ["proof (chain)\npicking this:\n  ENF_refl P", "have a_enf: \"sinvar_all_edges_normal_form P\""], ["proof (prove)\nusing this:\n  ENF_refl P\n\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form P", "using ENF_refl_def"], ["proof (prove)\nusing this:\n  ENF_refl P\n  ENF_refl ?P \\<equiv>\n  sinvar_all_edges_normal_form ?P \\<and> (\\<forall>p1. ?P p1 p1)\n\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form P", "by simp"], ["proof (state)\nthis:\n  sinvar_all_edges_normal_form P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; f \\<in> set_offending_flows G nP;\n     ENF_refl P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2", "hence a_ENF: \"\\<And> G nP. sinvar G nP  = (\\<forall> (e1, e2) \\<in> edges G. P (nP e1) (nP e2))\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))", "using sinvar_all_edges_normal_form_def"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n  sinvar_all_edges_normal_form ?P \\<equiv>\n  \\<forall>G nP.\n     sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. ?P (nP e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))", "by simp"], ["proof (state)\nthis:\n  sinvar ?G ?nP = (\\<forall>(e1, e2)\\<in>edges ?G. P (?nP e1) (?nP e2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; f \\<in> set_offending_flows G nP;\n     ENF_refl P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2", "from a_enf_refl ENF_refl_def"], ["proof (chain)\npicking this:\n  ENF_refl P\n  ENF_refl ?P \\<equiv>\n  sinvar_all_edges_normal_form ?P \\<and> (\\<forall>p1. ?P p1 p1)", "have a_refl: \"\\<forall> (e1,e1) \\<in> f. P (nP e1) (nP e1)\""], ["proof (prove)\nusing this:\n  ENF_refl P\n  ENF_refl ?P \\<equiv>\n  sinvar_all_edges_normal_form ?P \\<and> (\\<forall>p1. ?P p1 p1)\n\ngoal (1 subgoal):\n 1. \\<forall>(e1a, e1)\\<in>f. P (nP e1) (nP e1)", "by simp"], ["proof (state)\nthis:\n  \\<forall>(e1a, e1)\\<in>f. P (nP e1) (nP e1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; f \\<in> set_offending_flows G nP;\n     ENF_refl P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2", "from ENF_offending_members[OF a_not_eval a_enf a_offedning]"], ["proof (chain)\npicking this:\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))", "have \"\\<forall> (e1, e2) \\<in> f. \\<not> P (nP e1) (nP e2)\""], ["proof (prove)\nusing this:\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2)", "by fast"], ["proof (state)\nthis:\n  \\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; f \\<in> set_offending_flows G nP;\n     ENF_refl P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2", "from this a_refl"], ["proof (chain)\npicking this:\n  \\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2)\n  \\<forall>(e1a, e1)\\<in>f. P (nP e1) (nP e1)", "show \"\\<forall>(e1,e2) \\<in> f. e1 \\<noteq> e2\""], ["proof (prove)\nusing this:\n  \\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2)\n  \\<forall>(e1a, e1)\\<in>f. P (nP e1) (nP e1)\n\ngoal (1 subgoal):\n 1. \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2", "by fast"], ["proof (state)\nthis:\n  \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in SecurityInvariant_withOffendingFlows) ENF_default_update_fst: \n  fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n  assumes modelInv: \"\\<not> sinvar G nP\"\n    and   ENFdef: \"sinvar_all_edges_normal_form P\"\n    and   secdef: \"\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow> \\<not> (P \\<bottom> (nP e2))\"\n  shows\n    \"\\<not> (\\<forall> (e1, e2) \\<in> edges G. P ((nP(i := \\<bottom>)) e1) (nP e2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) (nP e2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) (nP e2))", "from ENFdef"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form P", "have ENF: \"\\<And> G nP. sinvar G nP  = (\\<forall> (e1, e2)\\<in> edges G. P (nP e1) (nP e2))\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))", "using sinvar_all_edges_normal_form_def"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n  sinvar_all_edges_normal_form ?P \\<equiv>\n  \\<forall>G nP.\n     sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. ?P (nP e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))", "by simp"], ["proof (state)\nthis:\n  sinvar ?G ?nP = (\\<forall>(e1, e2)\\<in>edges ?G. P (?nP e1) (?nP e2))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) (nP e2))", "from modelInv ENF"], ["proof (chain)\npicking this:\n  \\<not> sinvar G nP\n  sinvar ?G ?nP = (\\<forall>(e1, e2)\\<in>edges ?G. P (?nP e1) (?nP e2))", "have modelInv': \"\\<not> (\\<forall> (e1, e2)\\<in> edges G. P (nP e1) (nP e2))\""], ["proof (prove)\nusing this:\n  \\<not> sinvar G nP\n  sinvar ?G ?nP = (\\<forall>(e1, e2)\\<in>edges ?G. P (?nP e1) (?nP e2))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) (nP e2))", "from this secdef"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P \\<bottom> (nP e2)", "have modelInv'': \"\\<not> (\\<forall> (e1, e2)\\<in> edges G. P \\<bottom> (nP e2))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P \\<bottom> (nP e2)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G. P \\<bottom> (nP e2))", "by blast"], ["proof (state)\nthis:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G. P \\<bottom> (nP e2))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) (nP e2))", "have simpUpdateI: \"\\<And> e1 e2. \\<not> P (nP e1) (nP e2) \\<Longrightarrow> \\<not> P \\<bottom> (nP e2) \\<Longrightarrow> \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       \\<lbrakk>\\<not> P (nP e1) (nP e2);\n        \\<not> P \\<bottom> (nP e2)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> P (nP ?e1.0) (nP ?e2.0);\n   \\<not> P \\<bottom> (nP ?e2.0)\\<rbrakk>\n  \\<Longrightarrow> \\<not> P ((nP(i := \\<bottom>)) ?e1.0) (nP ?e2.0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) (nP e2))", "hence \"\\<And> X. \\<exists>(e1,e2) \\<in> X. \\<not> P (nP e1) (nP e2) \\<Longrightarrow> \\<exists>(e1,e2) \\<in> X.\\<not> P \\<bottom> (nP e2) \\<Longrightarrow> \\<exists>(e1,e2) \\<in> X.\\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> P (nP ?e1.0) (nP ?e2.0);\n   \\<not> P \\<bottom> (nP ?e2.0)\\<rbrakk>\n  \\<Longrightarrow> \\<not> P ((nP(i := \\<bottom>)) ?e1.0) (nP ?e2.0)\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>\\<exists>(e1, e2)\\<in>X. \\<not> P (nP e1) (nP e2);\n        \\<exists>(e1, e2)\\<in>X. \\<not> P \\<bottom> (nP e2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>(e1, e2)\\<in>X.\n                            \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)", "using secdef"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> P (nP ?e1.0) (nP ?e2.0);\n   \\<not> P \\<bottom> (nP ?e2.0)\\<rbrakk>\n  \\<Longrightarrow> \\<not> P ((nP(i := \\<bottom>)) ?e1.0) (nP ?e2.0)\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P \\<bottom> (nP e2)\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>\\<exists>(e1, e2)\\<in>X. \\<not> P (nP e1) (nP e2);\n        \\<exists>(e1, e2)\\<in>X. \\<not> P \\<bottom> (nP e2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>(e1, e2)\\<in>X.\n                            \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>(e1, e2)\\<in>?X. \\<not> P (nP e1) (nP e2);\n   \\<exists>(e1, e2)\\<in>?X. \\<not> P \\<bottom> (nP e2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>(e1, e2)\\<in>?X.\n                       \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) (nP e2))", "from this modelInv' modelInv''"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<exists>(e1, e2)\\<in>?X. \\<not> P (nP e1) (nP e2);\n   \\<exists>(e1, e2)\\<in>?X. \\<not> P \\<bottom> (nP e2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>(e1, e2)\\<in>?X.\n                       \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G. P \\<bottom> (nP e2))", "show \"\\<not> (\\<forall> (e1, e2) \\<in> edges G. P ((nP(i := \\<bottom>)) e1) (nP e2))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<exists>(e1, e2)\\<in>?X. \\<not> P (nP e1) (nP e2);\n   \\<exists>(e1, e2)\\<in>?X. \\<not> P \\<bottom> (nP e2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>(e1, e2)\\<in>?X.\n                       \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G. P \\<bottom> (nP e2))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) (nP e2))", "by blast"], ["proof (state)\nthis:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) (nP e2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in SecurityInvariant_withOffendingFlows) \n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    shows \"\\<not> sinvar G nP \\<Longrightarrow> sinvar_all_edges_normal_form P \\<Longrightarrow>\n    (\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow>  \\<not> (P \\<bottom> (nP e2))) \\<Longrightarrow>\n    (\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow> \\<not> (P (nP e1) \\<bottom>)) \\<Longrightarrow>\n    (\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> P \\<bottom> \\<bottom>)\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "assume a1: \"\\<not> sinvar G nP\"\n    and   a2d: \"sinvar_all_edges_normal_form P\"\n    and    a3: \"\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow> \\<not> (P \\<bottom> (nP e2))\"\n    and    a4: \"\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow> \\<not> (P (nP e1) \\<bottom>)\"\n    and    a5: \"\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> P \\<bottom> \\<bottom>\""], ["proof (state)\nthis:\n  \\<not> sinvar G nP\n  sinvar_all_edges_normal_form P\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P \\<bottom> (nP e2)\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P (nP e1) \\<bottom>\n  \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "from a2d"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form P", "have a2: \"\\<And> G nP. sinvar G nP  = (\\<forall> (e1, e2) \\<in> edges G. P (nP e1) (nP e2))\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))", "using sinvar_all_edges_normal_form_def"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n  sinvar_all_edges_normal_form ?P \\<equiv>\n  \\<forall>G nP.\n     sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. ?P (nP e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))", "by simp"], ["proof (state)\nthis:\n  sinvar ?G1 ?nP1 = (\\<forall>(e1, e2)\\<in>edges ?G1. P (?nP1 e1) (?nP1 e2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "from ENF_default_update_fst[OF a1 a2d] a3"], ["proof (chain)\npicking this:\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n     \\<not> P ?default_node_properties (nP e2) \\<Longrightarrow>\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(?i := ?default_node_properties)) e1) (nP e2))\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P \\<bottom> (nP e2)", "have subgoal1: \"\\<not> (\\<forall> (e1, e2) \\<in> edges G. P ((nP(i := \\<bottom>)) e1) (nP e2))\""], ["proof (prove)\nusing this:\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n     \\<not> P ?default_node_properties (nP e2) \\<Longrightarrow>\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(?i := ?default_node_properties)) e1) (nP e2))\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P \\<bottom> (nP e2)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) (nP e2))", "by blast"], ["proof (state)\nthis:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "let ?nP' = \"(nP(i := \\<bottom>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "from subgoal1"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) (nP e2))", "have \"\\<exists> (e1, e2) \\<in> edges G. \\<not> P (?nP' e1) (nP e2)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<exists>(e1, e2)\\<in>edges G.\n       \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>(e1, e2)\\<in>edges G. \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "from this"], ["proof (chain)\npicking this:\n  \\<exists>(e1, e2)\\<in>edges G. \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)", "obtain e11 e21 where s1cond: \"(e11, e21) \\<in> edges G \\<and> \\<not> P (?nP' e11) (nP e21)\""], ["proof (prove)\nusing this:\n  \\<exists>(e1, e2)\\<in>edges G. \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)\n\ngoal (1 subgoal):\n 1. (\\<And>e11 e21.\n        (e11, e21) \\<in> edges G \\<and>\n        \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (e11, e21) \\<in> edges G \\<and>\n  \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "from s1cond"], ["proof (chain)\npicking this:\n  (e11, e21) \\<in> edges G \\<and>\n  \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21)", "have \"i \\<noteq> e11 \\<Longrightarrow> \\<not> P (nP e11) (nP e21)\""], ["proof (prove)\nusing this:\n  (e11, e21) \\<in> edges G \\<and>\n  \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21)\n\ngoal (1 subgoal):\n 1. i \\<noteq> e11 \\<Longrightarrow> \\<not> P (nP e11) (nP e21)", "by simp"], ["proof (state)\nthis:\n  i \\<noteq> e11 \\<Longrightarrow> \\<not> P (nP e11) (nP e21)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "from s1cond"], ["proof (chain)\npicking this:\n  (e11, e21) \\<in> edges G \\<and>\n  \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21)", "have \"e11 \\<noteq> e21 \\<Longrightarrow> \\<not> P (?nP' e11) (?nP' e21)\""], ["proof (prove)\nusing this:\n  (e11, e21) \\<in> edges G \\<and>\n  \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21)\n\ngoal (1 subgoal):\n 1. e11 \\<noteq> e21 \\<Longrightarrow>\n    \\<not> P ((nP(i := \\<bottom>)) e11) ((nP(i := \\<bottom>)) e21)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e11 \\<noteq> e21;\n     (e11, e21) \\<in> edges G \\<and>\n     \\<not> P (if e11 = i then \\<bottom> else nP e11) (nP e21)\\<rbrakk>\n    \\<Longrightarrow> (e11 = i \\<longrightarrow>\n                       e21 = i \\<longrightarrow>\n                       \\<not> P \\<bottom> \\<bottom>) \\<and>\n                      (e11 \\<noteq> i \\<longrightarrow>\n                       e21 = i \\<longrightarrow>\n                       \\<not> P (nP e11) \\<bottom>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>e11 \\<noteq> e21;\n     (e11, e21) \\<in> edges G \\<and>\n     \\<not> P (if e11 = i then \\<bottom> else nP e11) (nP e21)\\<rbrakk>\n    \\<Longrightarrow> e11 = i \\<longrightarrow>\n                      e21 = i \\<longrightarrow> \\<not> P \\<bottom> \\<bottom>\n 2. \\<lbrakk>e11 \\<noteq> e21;\n     (e11, e21) \\<in> edges G \\<and>\n     \\<not> P (if e11 = i then \\<bottom> else nP e11) (nP e21)\\<rbrakk>\n    \\<Longrightarrow> e11 \\<noteq> i \\<longrightarrow>\n                      e21 = i \\<longrightarrow> \\<not> P (nP e11) \\<bottom>", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e11 \\<noteq> e21;\n     (e11, e21) \\<in> edges G \\<and>\n     \\<not> P (if e11 = i then \\<bottom> else nP e11) (nP e21)\\<rbrakk>\n    \\<Longrightarrow> e11 \\<noteq> i \\<longrightarrow>\n                      e21 = i \\<longrightarrow> \\<not> P (nP e11) \\<bottom>", "apply(insert a4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e11 \\<noteq> e21;\n     (e11, e21) \\<in> edges G \\<and>\n     \\<not> P (if e11 = i then \\<bottom> else nP e11) (nP e21);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> e11 \\<noteq> i \\<longrightarrow>\n                      e21 = i \\<longrightarrow> \\<not> P (nP e11) \\<bottom>", "by force"], ["proof (state)\nthis:\n  e11 \\<noteq> e21 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e11) ((nP(i := \\<bottom>)) e21)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "from s1cond a4 fun_upd_apply"], ["proof (chain)\npicking this:\n  (e11, e21) \\<in> edges G \\<and>\n  \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21)\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P (nP e1) \\<bottom>\n  (?f(?x := ?y)) ?z = (if ?z = ?x then ?y else ?f ?z)", "have ex1: \"e11 \\<noteq> e21 \\<Longrightarrow> \\<not> P (?nP' e11) (?nP' e21)\""], ["proof (prove)\nusing this:\n  (e11, e21) \\<in> edges G \\<and>\n  \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21)\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P (nP e1) \\<bottom>\n  (?f(?x := ?y)) ?z = (if ?z = ?x then ?y else ?f ?z)\n\ngoal (1 subgoal):\n 1. e11 \\<noteq> e21 \\<Longrightarrow>\n    \\<not> P ((nP(i := \\<bottom>)) e11) ((nP(i := \\<bottom>)) e21)", "by metis"], ["proof (state)\nthis:\n  e11 \\<noteq> e21 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e11) ((nP(i := \\<bottom>)) e21)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "from s1cond a5"], ["proof (chain)\npicking this:\n  (e11, e21) \\<in> edges G \\<and>\n  \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21)\n  \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>", "have ex2: \"e11 = e21 \\<Longrightarrow> \\<not> P (?nP' e11) (?nP' e21)\""], ["proof (prove)\nusing this:\n  (e11, e21) \\<in> edges G \\<and>\n  \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21)\n  \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\n\ngoal (1 subgoal):\n 1. e11 = e21 \\<Longrightarrow>\n    \\<not> P ((nP(i := \\<bottom>)) e11) ((nP(i := \\<bottom>)) e21)", "by auto"], ["proof (state)\nthis:\n  e11 = e21 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e11) ((nP(i := \\<bottom>)) e21)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "from ex1 ex2 s1cond"], ["proof (chain)\npicking this:\n  e11 \\<noteq> e21 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e11) ((nP(i := \\<bottom>)) e21)\n  e11 = e21 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e11) ((nP(i := \\<bottom>)) e21)\n  (e11, e21) \\<in> edges G \\<and>\n  \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21)", "have \"\\<exists> (e1, e2) \\<in> edges G. \\<not> P (?nP' e1) (?nP' e2)\""], ["proof (prove)\nusing this:\n  e11 \\<noteq> e21 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e11) ((nP(i := \\<bottom>)) e21)\n  e11 = e21 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e11) ((nP(i := \\<bottom>)) e21)\n  (e11, e21) \\<in> edges G \\<and>\n  \\<not> P ((nP(i := \\<bottom>)) e11) (nP e21)\n\ngoal (1 subgoal):\n 1. \\<exists>(e1, e2)\\<in>edges G.\n       \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>(e1, e2)\\<in>edges G.\n     \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "hence \"\\<not> (\\<forall> (e1, e2) \\<in> edges G. P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\""], ["proof (prove)\nusing this:\n  \\<exists>(e1, e2)\\<in>edges G.\n     \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))", "by fast"], ["proof (state)\nthis:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> sinvar G nP; sinvar_all_edges_normal_form P;\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P \\<bottom> (nP e2);\n     \\<forall>nP e1 e2.\n        \\<not> P (nP e1) (nP e2) \\<longrightarrow>\n        \\<not> P (nP e1) \\<bottom>;\n     \\<forall>nP e1 e2. \\<not> P \\<bottom> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "from this a2"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\n  sinvar ?G1 ?nP1 = (\\<forall>(e1, e2)\\<in>edges ?G1. P (?nP1 e1) (?nP1 e2))", "show \"\\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\n  sinvar ?G1 ?nP1 = (\\<forall>(e1, e2)\\<in>edges ?G1. P (?nP1 e1) (?nP1 e2))\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "by presburger"], ["proof (state)\nthis:\n  \\<not> sinvar G (nP(i := \\<bottom>))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* fsts version *)"], ["", "lemma (in SecurityInvariant_withOffendingFlows)  ENF_fsts_refl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf_refl: \"ENF_refl P\"\n    and   a3: \"\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow> \\<not> (P \\<bottom> (nP e2))\" (*changed \\<And> to \\<forall>*)\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_fsts: \"i \\<in> fst ` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from a_offending"], ["proof (chain)\npicking this:\n  f \\<in> set_offending_flows G nP", "have a_not_eval: \"\\<not> sinvar G nP\""], ["proof (prove)\nusing this:\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP", "by (metis equals0D sinvar_no_offending)"], ["proof (state)\nthis:\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from valid_without_offending_flows[OF a_offending]"], ["proof (chain)\npicking this:\n  sinvar (delete_edges G f) nP", "have a_offending_rm: \"sinvar (delete_edges G f) nP\""], ["proof (prove)\nusing this:\n  sinvar (delete_edges G f) nP\n\ngoal (1 subgoal):\n 1. sinvar (delete_edges G f) nP", "."], ["proof (state)\nthis:\n  sinvar (delete_edges G f) nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from a_enf_refl"], ["proof (chain)\npicking this:\n  ENF_refl P", "have a_enf: \"sinvar_all_edges_normal_form P\""], ["proof (prove)\nusing this:\n  ENF_refl P\n\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form P", "using ENF_refl_def"], ["proof (prove)\nusing this:\n  ENF_refl P\n  ENF_refl ?P \\<equiv>\n  sinvar_all_edges_normal_form ?P \\<and> (\\<forall>p1. ?P p1 p1)\n\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form P", "by simp"], ["proof (state)\nthis:\n  sinvar_all_edges_normal_form P\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "hence a2: \"\\<And> G nP. sinvar G nP  = (\\<forall> (e1, e2) \\<in> edges G. P (nP e1) (nP e2))\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))", "using sinvar_all_edges_normal_form_def"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n  sinvar_all_edges_normal_form ?P \\<equiv>\n  \\<forall>G nP.\n     sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. ?P (nP e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))", "by simp"], ["proof (state)\nthis:\n  sinvar ?G ?nP = (\\<forall>(e1, e2)\\<in>edges ?G. P (?nP e1) (?nP e2))\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from ENF_offending_members[OF a_not_eval a_enf a_offending]"], ["proof (chain)\npicking this:\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))", "have a_f_3_in_f: \"\\<And> e1 e2. (e1, e2) \\<in> f \\<Longrightarrow> \\<not> P (nP e1) (nP e2)\""], ["proof (prove)\nusing this:\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2. (e1, e2) \\<in> f \\<Longrightarrow> \\<not> P (nP e1) (nP e2)", "by fast"], ["proof (state)\nthis:\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow> \\<not> P (nP ?e1.0) (nP ?e2.0)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "let ?nP' = \"(nP(i := \\<bottom>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "(* obain from f *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from offending_not_empty[OF a_offending] ENF_offending_members[OF a_not_eval a_enf a_offending] a_i_fsts hd_in_set"], ["proof (chain)\npicking this:\n  f \\<noteq> {}\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))\n  i \\<in> fst ` f\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs \\<in> set ?xs", "obtain e1 e2 where e1e2cond: \"(e1, e2) \\<in> f \\<and> e1 = i\""], ["proof (prove)\nusing this:\n  f \\<noteq> {}\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))\n  i \\<in> fst ` f\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. (\\<And>e1 e2.\n        (e1, e2) \\<in> f \\<and> e1 = i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (e1, e2) \\<in> f \\<and> e1 = i\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from conjunct1[OF e1e2cond] a_f_3_in_f"], ["proof (chain)\npicking this:\n  (e1, e2) \\<in> f\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow> \\<not> P (nP ?e1.0) (nP ?e2.0)", "have e1e2notP: \"\\<not> P (nP e1) (nP e2)\""], ["proof (prove)\nusing this:\n  (e1, e2) \\<in> f\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow> \\<not> P (nP ?e1.0) (nP ?e2.0)\n\ngoal (1 subgoal):\n 1. \\<not> P (nP e1) (nP e2)", "by simp"], ["proof (state)\nthis:\n  \\<not> P (nP e1) (nP e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this a3"], ["proof (chain)\npicking this:\n  \\<not> P (nP e1) (nP e2)\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P \\<bottom> (nP e2)", "have \"\\<not> P \\<bottom> (nP e2)\""], ["proof (prove)\nusing this:\n  \\<not> P (nP e1) (nP e2)\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P \\<bottom> (nP e2)\n\ngoal (1 subgoal):\n 1. \\<not> P \\<bottom> (nP e2)", "by simp"], ["proof (state)\nthis:\n  \\<not> P \\<bottom> (nP e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this e1e2notP"], ["proof (chain)\npicking this:\n  \\<not> P \\<bottom> (nP e2)\n  \\<not> P (nP e1) (nP e2)", "have e1e2subgoal1: \"\\<not> P (?nP' e1) (nP e2)\""], ["proof (prove)\nusing this:\n  \\<not> P \\<bottom> (nP e2)\n  \\<not> P (nP e1) (nP e2)\n\ngoal (1 subgoal):\n 1. \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)", "by simp"], ["proof (state)\nthis:\n  \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from ENF_refl_not_offedning[OF a_not_eval a_offending a_enf_refl] conjunct1[OF e1e2cond]"], ["proof (chain)\npicking this:\n  \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2\n  (e1, e2) \\<in> f", "have ENF_refl: \"e1 \\<noteq> e2\""], ["proof (prove)\nusing this:\n  \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2\n  (e1, e2) \\<in> f\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2", "by fast"], ["proof (state)\nthis:\n  e1 \\<noteq> e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from e1e2subgoal1"], ["proof (chain)\npicking this:\n  \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)", "have \"e1 \\<noteq> e2 \\<Longrightarrow> \\<not> P (?nP' e1) (?nP' e2)\""], ["proof (prove)\nusing this:\n  \\<not> P ((nP(i := \\<bottom>)) e1) (nP e2)\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow>\n    \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (if e1 = i then \\<bottom> else nP e1) (nP e2)\\<rbrakk>\n    \\<Longrightarrow> (e1 = i \\<longrightarrow>\n                       e2 = i \\<longrightarrow>\n                       \\<not> P \\<bottom> \\<bottom>) \\<and>\n                      (e1 \\<noteq> i \\<longrightarrow>\n                       e2 = i \\<longrightarrow> \\<not> P (nP e1) \\<bottom>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (if e1 = i then \\<bottom> else nP e1) (nP e2)\\<rbrakk>\n    \\<Longrightarrow> e1 = i \\<longrightarrow>\n                      e2 = i \\<longrightarrow> \\<not> P \\<bottom> \\<bottom>\n 2. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (if e1 = i then \\<bottom> else nP e1) (nP e2)\\<rbrakk>\n    \\<Longrightarrow> e1 \\<noteq> i \\<longrightarrow>\n                      e2 = i \\<longrightarrow> \\<not> P (nP e1) \\<bottom>", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (if e1 = i then \\<bottom> else nP e1) (nP e2)\\<rbrakk>\n    \\<Longrightarrow> e1 \\<noteq> i \\<longrightarrow>\n                      e2 = i \\<longrightarrow> \\<not> P (nP e1) \\<bottom>", "apply(insert conjunct2[OF e1e2cond])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (if e1 = i then \\<bottom> else nP e1) (nP e2); e1 = i\\<rbrakk>\n    \\<Longrightarrow> e1 \\<noteq> i \\<longrightarrow>\n                      e2 = i \\<longrightarrow> \\<not> P (nP e1) \\<bottom>", "by simp"], ["proof (state)\nthis:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this ENF_refl ENF_offending_members[OF a_not_eval a_enf a_offending]  conjunct1[OF e1e2cond]"], ["proof (chain)\npicking this:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n  e1 \\<noteq> e2\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))\n  (e1, e2) \\<in> f", "have \n      \"\\<exists> (e1, e2) \\<in> edges G. \\<not> P (?nP' e1) (?nP' e2)\""], ["proof (prove)\nusing this:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n  e1 \\<noteq> e2\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))\n  (e1, e2) \\<in> f\n\ngoal (1 subgoal):\n 1. \\<exists>(e1, e2)\\<in>edges G.\n       \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>(e1, e2)\\<in>edges G.\n     \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "hence \"\\<not> (\\<forall> (e1, e2) \\<in> edges G. P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\""], ["proof (prove)\nusing this:\n  \\<exists>(e1, e2)\\<in>edges G.\n     \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))", "by fast"], ["proof (state)\nthis:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this a2"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\n  sinvar ?G ?nP = (\\<forall>(e1, e2)\\<in>edges ?G. P (?nP e1) (?nP e2))", "show \"\\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\n  sinvar ?G ?nP = (\\<forall>(e1, e2)\\<in>edges ?G. P (?nP e1) (?nP e2))\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "by presburger"], ["proof (state)\nthis:\n  \\<not> sinvar G (nP(i := \\<bottom>))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* snds version *)"], ["", "lemma (in SecurityInvariant_withOffendingFlows)  ENF_snds_refl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf_refl: \"ENF_refl P\"\n    and   a3: \"\\<forall> (nP::'v \\<Rightarrow> 'a) e1 e2. \\<not> (P (nP e1) (nP e2)) \\<longrightarrow> \\<not> (P (nP e1) \\<bottom>)\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_snds: \"i \\<in> snd ` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from a_offending"], ["proof (chain)\npicking this:\n  f \\<in> set_offending_flows G nP", "have a_not_eval: \"\\<not> sinvar G nP\""], ["proof (prove)\nusing this:\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP", "by (metis equals0D sinvar_no_offending)"], ["proof (state)\nthis:\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from valid_without_offending_flows[OF a_offending]"], ["proof (chain)\npicking this:\n  sinvar (delete_edges G f) nP", "have a_offending_rm: \"sinvar (delete_edges G f) nP\""], ["proof (prove)\nusing this:\n  sinvar (delete_edges G f) nP\n\ngoal (1 subgoal):\n 1. sinvar (delete_edges G f) nP", "."], ["proof (state)\nthis:\n  sinvar (delete_edges G f) nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from a_enf_refl"], ["proof (chain)\npicking this:\n  ENF_refl P", "have a_enf: \"sinvar_all_edges_normal_form P\""], ["proof (prove)\nusing this:\n  ENF_refl P\n\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form P", "using ENF_refl_def"], ["proof (prove)\nusing this:\n  ENF_refl P\n  ENF_refl ?P \\<equiv>\n  sinvar_all_edges_normal_form ?P \\<and> (\\<forall>p1. ?P p1 p1)\n\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form P", "by simp"], ["proof (state)\nthis:\n  sinvar_all_edges_normal_form P\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "hence a2: \"\\<And> G nP. sinvar G nP  = (\\<forall> (e1, e2) \\<in> edges G. P (nP e1) (nP e2))\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))", "using sinvar_all_edges_normal_form_def"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form P\n  sinvar_all_edges_normal_form ?P \\<equiv>\n  \\<forall>G nP.\n     sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. ?P (nP e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. P (nP e1) (nP e2))", "by simp"], ["proof (state)\nthis:\n  sinvar ?G ?nP = (\\<forall>(e1, e2)\\<in>edges ?G. P (?nP e1) (?nP e2))\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from ENF_offending_members[OF a_not_eval a_enf a_offending]"], ["proof (chain)\npicking this:\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))", "have a_f_3_in_f: \"\\<And> e1 e2. (e1, e2) \\<in> f \\<Longrightarrow> \\<not> P (nP e1) (nP e2)\""], ["proof (prove)\nusing this:\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2. (e1, e2) \\<in> f \\<Longrightarrow> \\<not> P (nP e1) (nP e2)", "by fast"], ["proof (state)\nthis:\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow> \\<not> P (nP ?e1.0) (nP ?e2.0)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "let ?nP' = \"(nP(i := \\<bottom>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "(* obain from f *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from offending_not_empty[OF a_offending] ENF_offending_members[OF a_not_eval a_enf a_offending] a_i_snds hd_in_set"], ["proof (chain)\npicking this:\n  f \\<noteq> {}\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))\n  i \\<in> snd ` f\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs \\<in> set ?xs", "obtain e1 e2 where e1e2cond: \"(e1, e2) \\<in> f \\<and> e2 = i\""], ["proof (prove)\nusing this:\n  f \\<noteq> {}\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))\n  i \\<in> snd ` f\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. (\\<And>e1 e2.\n        (e1, e2) \\<in> f \\<and> e2 = i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (e1, e2) \\<in> f \\<and> e2 = i\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from conjunct1[OF e1e2cond] a_f_3_in_f"], ["proof (chain)\npicking this:\n  (e1, e2) \\<in> f\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow> \\<not> P (nP ?e1.0) (nP ?e2.0)", "have e1e2notP: \"\\<not> P (nP e1) (nP e2)\""], ["proof (prove)\nusing this:\n  (e1, e2) \\<in> f\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow> \\<not> P (nP ?e1.0) (nP ?e2.0)\n\ngoal (1 subgoal):\n 1. \\<not> P (nP e1) (nP e2)", "by simp"], ["proof (state)\nthis:\n  \\<not> P (nP e1) (nP e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this a3"], ["proof (chain)\npicking this:\n  \\<not> P (nP e1) (nP e2)\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P (nP e1) \\<bottom>", "have \"\\<not> P (nP e1) \\<bottom>\""], ["proof (prove)\nusing this:\n  \\<not> P (nP e1) (nP e2)\n  \\<forall>nP e1 e2.\n     \\<not> P (nP e1) (nP e2) \\<longrightarrow> \\<not> P (nP e1) \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<not> P (nP e1) \\<bottom>", "by auto"], ["proof (state)\nthis:\n  \\<not> P (nP e1) \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this e1e2notP"], ["proof (chain)\npicking this:\n  \\<not> P (nP e1) \\<bottom>\n  \\<not> P (nP e1) (nP e2)", "have e1e2subgoal1: \"\\<not> P (nP e1) (?nP' e2)\""], ["proof (prove)\nusing this:\n  \\<not> P (nP e1) \\<bottom>\n  \\<not> P (nP e1) (nP e2)\n\ngoal (1 subgoal):\n 1. \\<not> P (nP e1) ((nP(i := \\<bottom>)) e2)", "by simp"], ["proof (state)\nthis:\n  \\<not> P (nP e1) ((nP(i := \\<bottom>)) e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from ENF_refl_not_offedning[OF a_not_eval a_offending a_enf_refl] e1e2cond"], ["proof (chain)\npicking this:\n  \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2\n  (e1, e2) \\<in> f \\<and> e2 = i", "have ENF_refl: \"e1 \\<noteq> e2\""], ["proof (prove)\nusing this:\n  \\<forall>(e1, e2)\\<in>f. e1 \\<noteq> e2\n  (e1, e2) \\<in> f \\<and> e2 = i\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2", "by fast"], ["proof (state)\nthis:\n  e1 \\<noteq> e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from e1e2subgoal1"], ["proof (chain)\npicking this:\n  \\<not> P (nP e1) ((nP(i := \\<bottom>)) e2)", "have \"e1 \\<noteq> e2 \\<Longrightarrow> \\<not> P (?nP' e1) (?nP' e2)\""], ["proof (prove)\nusing this:\n  \\<not> P (nP e1) ((nP(i := \\<bottom>)) e2)\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow>\n    \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (nP e1) (if e2 = i then \\<bottom> else nP e2)\\<rbrakk>\n    \\<Longrightarrow> (e1 = i \\<longrightarrow>\n                       (e2 = i \\<longrightarrow>\n                        \\<not> P \\<bottom> \\<bottom>) \\<and>\n                       (e2 \\<noteq> i \\<longrightarrow>\n                        \\<not> P \\<bottom> (nP e2))) \\<and>\n                      (e1 \\<noteq> i \\<longrightarrow>\n                       (e2 = i \\<longrightarrow>\n                        \\<not> P (nP e1) \\<bottom>) \\<and>\n                       (e2 \\<noteq> i \\<longrightarrow>\n                        \\<not> P (nP e1) (nP e2)))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (nP e1) (if e2 = i then \\<bottom> else nP e2)\\<rbrakk>\n    \\<Longrightarrow> e1 = i \\<longrightarrow>\n                      (e2 = i \\<longrightarrow>\n                       \\<not> P \\<bottom> \\<bottom>) \\<and>\n                      (e2 \\<noteq> i \\<longrightarrow>\n                       \\<not> P \\<bottom> (nP e2))\n 2. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (nP e1) (if e2 = i then \\<bottom> else nP e2)\\<rbrakk>\n    \\<Longrightarrow> e1 \\<noteq> i \\<longrightarrow>\n                      (e2 = i \\<longrightarrow>\n                       \\<not> P (nP e1) \\<bottom>) \\<and>\n                      (e2 \\<noteq> i \\<longrightarrow>\n                       \\<not> P (nP e1) (nP e2))", "apply(insert conjunct2[OF e1e2cond])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (nP e1) (if e2 = i then \\<bottom> else nP e2); e2 = i\\<rbrakk>\n    \\<Longrightarrow> e1 = i \\<longrightarrow>\n                      (e2 = i \\<longrightarrow>\n                       \\<not> P \\<bottom> \\<bottom>) \\<and>\n                      (e2 \\<noteq> i \\<longrightarrow>\n                       \\<not> P \\<bottom> (nP e2))\n 2. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (nP e1) (if e2 = i then \\<bottom> else nP e2); e2 = i\\<rbrakk>\n    \\<Longrightarrow> e1 \\<noteq> i \\<longrightarrow>\n                      (e2 = i \\<longrightarrow>\n                       \\<not> P (nP e1) \\<bottom>) \\<and>\n                      (e2 \\<noteq> i \\<longrightarrow>\n                       \\<not> P (nP e1) (nP e2))", "by simp_all"], ["proof (state)\nthis:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this ENF_refl e1e2cond ENF_offending_members[OF a_not_eval a_enf a_offending]  conjunct1[OF e1e2cond]"], ["proof (chain)\npicking this:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n  e1 \\<noteq> e2\n  (e1, e2) \\<in> f \\<and> e2 = i\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))\n  (e1, e2) \\<in> f", "have \n      \"\\<exists> (e1, e2) \\<in> edges G. \\<not> P (?nP' e1) (?nP' e2)\""], ["proof (prove)\nusing this:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n  e1 \\<noteq> e2\n  (e1, e2) \\<in> f \\<and> e2 = i\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> P (nP e1) (nP e2))\n  (e1, e2) \\<in> f\n\ngoal (1 subgoal):\n 1. \\<exists>(e1, e2)\\<in>edges G.\n       \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>(e1, e2)\\<in>edges G.\n     \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "hence \"\\<not> (\\<forall> (e1, e2) \\<in> edges G. P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\""], ["proof (prove)\nusing this:\n  \\<exists>(e1, e2)\\<in>edges G.\n     \\<not> P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))", "by fast"], ["proof (state)\nthis:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this a2"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\n  sinvar ?G ?nP = (\\<forall>(e1, e2)\\<in>edges ?G. P (?nP e1) (?nP e2))", "show \"\\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             P ((nP(i := \\<bottom>)) e1) ((nP(i := \\<bottom>)) e2))\n  sinvar ?G ?nP = (\\<forall>(e1, e2)\\<in>edges ?G. P (?nP e1) (?nP e2))\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "by presburger"], ["proof (state)\nthis:\n  \\<not> sinvar G (nP(i := \\<bottom>))\n\ngoal:\nNo subgoals!", "qed"], ["", "(*ENF_sr*)"], ["", "subsection \\<open>edges normal form ENF with sender and receiver names\\<close>"], ["", "definition (in SecurityInvariant_withOffendingFlows) sinvar_all_edges_normal_form_sr :: \"('a \\<Rightarrow> 'v \\<Rightarrow> 'a \\<Rightarrow> 'v \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n    \"sinvar_all_edges_normal_form_sr P \\<equiv> \\<forall> G nP. sinvar G nP = (\\<forall> (s, r)\\<in> edges G. P (nP s) s (nP r) r)\""], ["", "lemma (in SecurityInvariant_withOffendingFlows) ENFsr_monotonicity_sinvar_mono: \"\\<lbrakk> sinvar_all_edges_normal_form_sr P \\<rbrakk> \\<Longrightarrow>\n    sinvar_mono\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form_sr P \\<Longrightarrow> sinvar_mono", "apply(simp add: sinvar_all_edges_normal_form_sr_def sinvar_mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G nP.\n       sinvar G nP =\n       (\\<forall>x\\<in>edges G.\n           case x of\n           (s, r) \\<Rightarrow> P (nP s) s (nP r) r) \\<Longrightarrow>\n    \\<forall>nP N E'.\n       (\\<exists>E.\n           wf_graph \\<lparr>nodes = N, edges = E\\<rparr> \\<and>\n           E' \\<subseteq> E \\<and>\n           (\\<forall>x\\<in>E.\n               case x of\n               (s, r) \\<Rightarrow> P (nP s) s (nP r) r)) \\<longrightarrow>\n       (\\<forall>x\\<in>E'.\n           case x of (s, r) \\<Rightarrow> P (nP s) s (nP r) r)", "by blast"], ["", "subsubsection \\<open>Offending Flows:\\<close>"], ["", "theorem (in SecurityInvariant_withOffendingFlows) ENFsr_offending_set:\n    assumes ENFsr: \"sinvar_all_edges_normal_form_sr P\"\n    shows \"set_offending_flows G nP = (if sinvar G nP then\n      {}\n     else \n      { {(s,r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r} })\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "proof(cases \"sinvar G nP\")"], ["proof (state)\ngoal (2 subgoals):\n 1. sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})\n 2. \\<not> sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "case True"], ["proof (state)\nthis:\n  sinvar G nP\n\ngoal (2 subgoals):\n 1. sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})\n 2. \\<not> sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "thus \"?A = ?B\""], ["proof (prove)\nusing this:\n  sinvar G nP\n\ngoal (1 subgoal):\n 1. set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "by(simp add: set_offending_flows_def is_offending_flows_min_set_def is_offending_flows_def)"], ["proof (state)\nthis:\n  set_offending_flows G nP =\n  (if sinvar G nP then {}\n   else {{(s, r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "case False"], ["proof (state)\nthis:\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "from ENFsr"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form_sr P", "have ENFsr_offending_imp_not_P: \"\\<And> F s r. F \\<in> set_offending_flows G nP \\<Longrightarrow> (s, r) \\<in> F  \\<Longrightarrow> \\<not> P (nP s) s (nP r) r\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form_sr P\n\ngoal (1 subgoal):\n 1. \\<And>F s r.\n       \\<lbrakk>F \\<in> set_offending_flows G nP; (s, r) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> \\<not> P (nP s) s (nP r) r", "unfolding sinvar_all_edges_normal_form_sr_def"], ["proof (prove)\nusing this:\n  \\<forall>G nP.\n     sinvar G nP = (\\<forall>(s, r)\\<in>edges G. P (nP s) s (nP r) r)\n\ngoal (1 subgoal):\n 1. \\<And>F s r.\n       \\<lbrakk>F \\<in> set_offending_flows G nP; (s, r) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> \\<not> P (nP s) s (nP r) r", "apply(simp add: set_offending_flows_def is_offending_flows_def is_offending_flows_min_set_def graph_ops)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F s r.\n       \\<lbrakk>F \\<subseteq> edges G \\<and>\n                (\\<exists>x\\<in>edges G.\n                    \\<not> (case x of\n                            (s, r) \\<Rightarrow>\n                              P (nP s) s (nP r) r)) \\<and>\n                (\\<forall>x\\<in>edges G - F.\n                    case x of\n                    (s, r) \\<Rightarrow> P (nP s) s (nP r) r) \\<and>\n                (\\<forall>x\\<in>F.\n                    case x of\n                    (e1, e2) \\<Rightarrow>\n                      P (nP e1) e1 (nP e2) e2 \\<longrightarrow>\n                      (\\<exists>x\\<in>edges G - F.\n                          \\<not> (case x of\n                                  (s, r) \\<Rightarrow>\n                                    P (nP s) s (nP r) r)));\n        (s, r) \\<in> F;\n        \\<forall>G nP.\n           sinvar G nP =\n           (\\<forall>x\\<in>edges G.\n               case x of (s, r) \\<Rightarrow> P (nP s) s (nP r) r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P (nP s) s (nP r) r", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F s r a b.\n       \\<lbrakk>(s, r) \\<in> F;\n        \\<forall>G nP.\n           sinvar G nP = (\\<forall>(s, r)\\<in>edges G. P (nP s) s (nP r) r);\n        F \\<subseteq> edges G; (a, b) \\<in> edges G;\n        \\<not> P (nP a) a (nP b) b;\n        \\<forall>(s, r)\\<in>edges G - F. P (nP s) s (nP r) r;\n        \\<forall>(e1, e2)\\<in>F.\n           P (nP e1) e1 (nP e2) e2 \\<longrightarrow>\n           (\\<exists>x\\<in>edges G - F.\n               \\<not> (case x of (s, r) \\<Rightarrow> P (nP s) s (nP r) r));\n        P (nP s) s (nP r) r\\<rbrakk>\n       \\<Longrightarrow> False", "by fastforce"], ["proof (state)\nthis:\n  \\<lbrakk>?F \\<in> set_offending_flows G nP; (?s, ?r) \\<in> ?F\\<rbrakk>\n  \\<Longrightarrow> \\<not> P (nP ?s) ?s (nP ?r) ?r\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "from ENFsr"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form_sr P", "have  ENFsr_offending_set_P_representation: \n    \"\\<And> F. F \\<in> set_offending_flows G nP  \\<Longrightarrow> F = {(s,r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form_sr P\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       F \\<in> set_offending_flows G nP \\<Longrightarrow>\n       F = {(s, r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P\\<rbrakk>\n       \\<Longrightarrow> F =\n                         {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P\\<rbrakk>\n       \\<Longrightarrow> F \\<subseteq> {(s, r).\n  (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}\n 2. \\<And>F.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P\\<rbrakk>\n       \\<Longrightarrow> {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}\n                         \\<subseteq> F", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F x.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P; x \\<in> F\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {(s, r).\n                                  (s, r) \\<in> edges G \\<and>\n                                  \\<not> P (nP s) s (nP r) r}\n 2. \\<And>F.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P\\<rbrakk>\n       \\<Longrightarrow> {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}\n                         \\<subseteq> F", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F a b.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P; (a, b) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> edges G \\<and>\n                         \\<not> P (nP a) a (nP b) b\n 2. \\<And>F.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P\\<rbrakk>\n       \\<Longrightarrow> {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}\n                         \\<subseteq> F", "apply(rename_tac a b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F a b.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P; (a, b) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> edges G \\<and>\n                         \\<not> P (nP a) a (nP b) b\n 2. \\<And>F.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P\\<rbrakk>\n       \\<Longrightarrow> {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}\n                         \\<subseteq> F", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>F a b.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P; (a, b) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> edges G\n 2. \\<And>F a b.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P; (a, b) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> \\<not> P (nP a) a (nP b) b\n 3. \\<And>F.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P\\<rbrakk>\n       \\<Longrightarrow> {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}\n                         \\<subseteq> F", "apply(auto simp add:set_offending_flows_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F a b.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P; (a, b) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> \\<not> P (nP a) a (nP b) b\n 2. \\<And>F.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P\\<rbrakk>\n       \\<Longrightarrow> {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}\n                         \\<subseteq> F", "apply(simp add: ENFsr_offending_imp_not_P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        sinvar_all_edges_normal_form_sr P\\<rbrakk>\n       \\<Longrightarrow> {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}\n                         \\<subseteq> F", "unfolding sinvar_all_edges_normal_form_sr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>F \\<in> set_offending_flows G nP;\n        \\<forall>G nP.\n           sinvar G nP =\n           (\\<forall>(s, r)\\<in>edges G. P (nP s) s (nP r) r)\\<rbrakk>\n       \\<Longrightarrow> {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}\n                         \\<subseteq> F", "apply(simp add:set_offending_flows_def is_offending_flows_def is_offending_flows_min_set_def graph_ops)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>F \\<subseteq> edges G \\<and>\n                (\\<exists>x\\<in>edges G.\n                    \\<not> (case x of\n                            (s, r) \\<Rightarrow>\n                              P (nP s) s (nP r) r)) \\<and>\n                (\\<forall>x\\<in>edges G - F.\n                    case x of\n                    (s, r) \\<Rightarrow> P (nP s) s (nP r) r) \\<and>\n                (\\<forall>x\\<in>F.\n                    case x of\n                    (e1, e2) \\<Rightarrow>\n                      P (nP e1) e1 (nP e2) e2 \\<longrightarrow>\n                      (\\<exists>x\\<in>edges G - F.\n                          \\<not> (case x of\n                                  (s, r) \\<Rightarrow>\n                                    P (nP s) s (nP r) r)));\n        \\<forall>G nP.\n           sinvar G nP =\n           (\\<forall>x\\<in>edges G.\n               case x of (s, r) \\<Rightarrow> P (nP s) s (nP r) r)\\<rbrakk>\n       \\<Longrightarrow> {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}\n                         \\<subseteq> F", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F a b aa ba.\n       \\<lbrakk>\\<forall>G nP.\n                   sinvar G nP =\n                   (\\<forall>(s, r)\\<in>edges G. P (nP s) s (nP r) r);\n        F \\<subseteq> edges G; (a, b) \\<in> edges G;\n        \\<not> P (nP a) a (nP b) b; (aa, ba) \\<in> edges G;\n        \\<not> P (nP aa) aa (nP ba) ba;\n        \\<forall>(s, r)\\<in>edges G - F. P (nP s) s (nP r) r;\n        \\<forall>(e1, e2)\\<in>F.\n           P (nP e1) e1 (nP e2) e2 \\<longrightarrow>\n           (\\<exists>x\\<in>edges G - F.\n               \\<not> (case x of\n                       (s, r) \\<Rightarrow> P (nP s) s (nP r) r))\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> F", "apply(rename_tac a b a1 b1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F a b a1 b1.\n       \\<lbrakk>\\<forall>G nP.\n                   sinvar G nP =\n                   (\\<forall>(s, r)\\<in>edges G. P (nP s) s (nP r) r);\n        F \\<subseteq> edges G; (a, b) \\<in> edges G;\n        \\<not> P (nP a) a (nP b) b; (a1, b1) \\<in> edges G;\n        \\<not> P (nP a1) a1 (nP b1) b1;\n        \\<forall>(s, r)\\<in>edges G - F. P (nP s) s (nP r) r;\n        \\<forall>(e1, e2)\\<in>F.\n           P (nP e1) e1 (nP e2) e2 \\<longrightarrow>\n           (\\<exists>x\\<in>edges G - F.\n               \\<not> (case x of\n                       (s, r) \\<Rightarrow> P (nP s) s (nP r) r))\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> F", "apply(blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?F \\<in> set_offending_flows G nP \\<Longrightarrow>\n  ?F = {(s, r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "from ENFsr False"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form_sr P\n  \\<not> sinvar G nP", "have ENFsr_offending_flows_exist: \"set_offending_flows G nP \\<noteq> {}\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form_sr P\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. set_offending_flows G nP \\<noteq> {}", "apply(simp add: set_offending_flows_def is_offending_flows_min_set_def is_offending_flows_def sinvar_all_edges_normal_form_sr_def\n            delete_edges_def add_edge_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>G nP.\n                sinvar G nP =\n                (\\<forall>x\\<in>edges G.\n                    case x of (s, r) \\<Rightarrow> P (nP s) s (nP r) r);\n     \\<exists>x\\<in>edges G.\n        \\<not> (case x of (s, r) \\<Rightarrow> P (nP s) s (nP r) r)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<subseteq>edges G.\n                         (\\<forall>a b.\n                             (a, b) \\<in> edges G \\<longrightarrow>\n                             (a, b) \\<in> x \\<or>\n                             P (nP a) a (nP b) b) \\<and>\n                         (\\<forall>xa\\<in>x.\n                             case xa of\n                             (e1, e2) \\<Rightarrow>\n                               P (nP e1) e1 (nP e2) e2 \\<longrightarrow>\n                               (\\<exists>a b.\n                                   (a, b) \\<in> edges G \\<and>\n                                   (a, b) \\<notin> x \\<and>\n                                   \\<not> P (nP a) a (nP b) b))", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>G nP.\n                   sinvar G nP =\n                   (\\<forall>(s, r)\\<in>edges G. P (nP s) s (nP r) r);\n        (a, b) \\<in> edges G; \\<not> P (nP a) a (nP b) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<subseteq>edges G.\n                            (\\<forall>a b.\n                                (a, b) \\<in> edges G \\<longrightarrow>\n                                (a, b) \\<in> x \\<or>\n                                P (nP a) a (nP b) b) \\<and>\n                            (\\<forall>(e1, e2)\\<in>x.\n                                P (nP e1) e1 (nP e2) e2 \\<longrightarrow>\n                                (\\<exists>a b.\n                                    (a, b) \\<in> edges G \\<and>\n                                    (a, b) \\<notin> x \\<and>\n                                    \\<not> P (nP a) a (nP b) b))", "apply(rename_tac s r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s r.\n       \\<lbrakk>\\<forall>G nP.\n                   sinvar G nP =\n                   (\\<forall>(s, r)\\<in>edges G. P (nP s) s (nP r) r);\n        (s, r) \\<in> edges G; \\<not> P (nP s) s (nP r) r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<subseteq>edges G.\n                            (\\<forall>a b.\n                                (a, b) \\<in> edges G \\<longrightarrow>\n                                (a, b) \\<in> x \\<or>\n                                P (nP a) a (nP b) b) \\<and>\n                            (\\<forall>(e1, e2)\\<in>x.\n                                P (nP e1) e1 (nP e2) e2 \\<longrightarrow>\n                                (\\<exists>a b.\n                                    (a, b) \\<in> edges G \\<and>\n                                    (a, b) \\<notin> x \\<and>\n                                    \\<not> P (nP a) a (nP b) b))", "apply(rule_tac x=\"{(s,r). (s,r) \\<in> (edges G) \\<and> \\<not>P (nP s) s (nP r) r}\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s r.\n       \\<lbrakk>\\<forall>G nP.\n                   sinvar G nP =\n                   (\\<forall>(s, r)\\<in>edges G. P (nP s) s (nP r) r);\n        (s, r) \\<in> edges G; \\<not> P (nP s) s (nP r) r\\<rbrakk>\n       \\<Longrightarrow> {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}\n                         \\<subseteq> edges G \\<and>\n                         (\\<forall>a b.\n                             (a, b) \\<in> edges G \\<longrightarrow>\n                             (a, b)\n                             \\<in> {(s, r).\n                                    (s, r) \\<in> edges G \\<and>\n                                    \\<not> P (nP s) s (nP r) r} \\<or>\n                             P (nP a) a (nP b) b) \\<and>\n                         (\\<forall>(e1, e2)\n                                   \\<in>{(s, r).\n   (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}.\n                             P (nP e1) e1 (nP e2) e2 \\<longrightarrow>\n                             (\\<exists>a b.\n                                 (a, b) \\<in> edges G \\<and>\n                                 (a, b)\n                                 \\<notin> {(s, r).\n     (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r} \\<and>\n                                 \\<not> P (nP a) a (nP b) b))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s r.\n       \\<lbrakk>\\<forall>G nP.\n                   sinvar G nP =\n                   (\\<forall>x\\<in>edges G.\n                       case x of (s, r) \\<Rightarrow> P (nP s) s (nP r) r);\n        (s, r) \\<in> edges G; \\<not> P (nP s) s (nP r) r\\<rbrakk>\n       \\<Longrightarrow> {(s, r).\n                          (s, r) \\<in> edges G \\<and>\n                          \\<not> P (nP s) s (nP r) r}\n                         \\<subseteq> edges G", "by blast"], ["proof (state)\nthis:\n  set_offending_flows G nP \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "from ENFsr"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form_sr P", "have ENFsr_offenindg_not_empty_imp_ENF_offending_subseteq_rhs:\n      \"set_offending_flows G nP \\<noteq> {}  \\<Longrightarrow>\n      { {(s,r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r} } \\<subseteq> set_offending_flows G nP\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form_sr P\n\ngoal (1 subgoal):\n 1. set_offending_flows G nP \\<noteq> {} \\<Longrightarrow>\n    {{(s, r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}}\n    \\<subseteq> set_offending_flows G nP", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_offending_flows G nP \\<noteq> {};\n     sinvar_all_edges_normal_form_sr P\\<rbrakk>\n    \\<Longrightarrow> {{(s, r).\n                        (s, r) \\<in> edges G \\<and>\n                        \\<not> P (nP s) s (nP r) r}}\n                      \\<subseteq> set_offending_flows G nP", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>set_offending_flows G nP \\<noteq> {};\n        sinvar_all_edges_normal_form_sr P;\n        x \\<in> {{(s, r).\n                  (s, r) \\<in> edges G \\<and>\n                  \\<not> P (nP s) s (nP r) r}}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set_offending_flows G nP", "using ENFsr_offending_set_P_representation"], ["proof (prove)\nusing this:\n  ?F \\<in> set_offending_flows G nP \\<Longrightarrow>\n  ?F = {(s, r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>set_offending_flows G nP \\<noteq> {};\n        sinvar_all_edges_normal_form_sr P;\n        x \\<in> {{(s, r).\n                  (s, r) \\<in> edges G \\<and>\n                  \\<not> P (nP s) s (nP r) r}}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set_offending_flows G nP", "by blast"], ["proof (state)\nthis:\n  set_offending_flows G nP \\<noteq> {} \\<Longrightarrow>\n  {{(s, r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}}\n  \\<subseteq> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "from ENFsr"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form_sr P", "have ENFsr_offending_subseteq_lhs:\n      \"(set_offending_flows G nP) \\<subseteq> { {(s,r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r} }\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form_sr P\n\ngoal (1 subgoal):\n 1. set_offending_flows G nP\n    \\<subseteq> {{(s, r).\n                  (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}}", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form_sr P \\<Longrightarrow>\n    set_offending_flows G nP\n    \\<subseteq> {{(s, r).\n                  (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}}", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>sinvar_all_edges_normal_form_sr P;\n        x \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {{(s, r).\n                                   (s, r) \\<in> edges G \\<and>\n                                   \\<not> P (nP s) s (nP r) r}}", "by(simp add: ENFsr_offending_set_P_representation)"], ["proof (state)\nthis:\n  set_offending_flows G nP\n  \\<subseteq> {{(s, r).\n                (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}}\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "from False ENFsr_offenindg_not_empty_imp_ENF_offending_subseteq_rhs[OF ENFsr_offending_flows_exist] ENFsr_offending_subseteq_lhs"], ["proof (chain)\npicking this:\n  \\<not> sinvar G nP\n  {{(s, r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}}\n  \\<subseteq> set_offending_flows G nP\n  set_offending_flows G nP\n  \\<subseteq> {{(s, r).\n                (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}}", "show \"?A = ?B\""], ["proof (prove)\nusing this:\n  \\<not> sinvar G nP\n  {{(s, r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}}\n  \\<subseteq> set_offending_flows G nP\n  set_offending_flows G nP\n  \\<subseteq> {{(s, r).\n                (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}}\n\ngoal (1 subgoal):\n 1. set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(s, r).\n            (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})", "by force"], ["proof (state)\nthis:\n  set_offending_flows G nP =\n  (if sinvar G nP then {}\n   else {{(s, r). (s, r) \\<in> edges G \\<and> \\<not> P (nP s) s (nP r) r}})\n\ngoal:\nNo subgoals!", "qed"], ["", "(*ENFnrSR*)"], ["", "subsection \\<open>edges normal form not refl ENFnrSR\\<close>"], ["", "definition (in SecurityInvariant_withOffendingFlows) sinvar_all_edges_normal_form_not_refl_SR :: \"('a \\<Rightarrow> 'v \\<Rightarrow> 'a \\<Rightarrow> 'v \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n    \"sinvar_all_edges_normal_form_not_refl_SR P \\<equiv> \n    \\<forall> G nP. sinvar G nP = (\\<forall> (s, r) \\<in> edges G. s \\<noteq> r \\<longrightarrow> P (nP s) s (nP r) r)\""], ["", "text\\<open>we derive everything from the ENFnrSR form\\<close>"], ["", "lemma (in SecurityInvariant_withOffendingFlows) ENFnrSR_to_ENFsr: \n    \"sinvar_all_edges_normal_form_not_refl_SR P \\<Longrightarrow> sinvar_all_edges_normal_form_sr (\\<lambda> p1 v1 p2 v2. v1 \\<noteq> v2 \\<longrightarrow> P p1 v1 p2 v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form_not_refl_SR P \\<Longrightarrow>\n    sinvar_all_edges_normal_form_sr\n     (\\<lambda>p1 v1 p2 v2. v1 \\<noteq> v2 \\<longrightarrow> P p1 v1 p2 v2)", "by(simp add: sinvar_all_edges_normal_form_sr_def sinvar_all_edges_normal_form_not_refl_SR_def)"], ["", "subsubsection \\<open>Offending Flows\\<close>"], ["", "theorem (in SecurityInvariant_withOffendingFlows) ENFnrSR_offending_set:\n    \"\\<lbrakk> sinvar_all_edges_normal_form_not_refl_SR P \\<rbrakk> \\<Longrightarrow>\n    set_offending_flows G nP = (if sinvar G nP then\n      {}\n     else \n      { {(e1,e2). (e1, e2) \\<in> edges G \\<and> e1 \\<noteq> e2 \\<and> \\<not> P (nP e1) e1 (nP e2) e2} })\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form_not_refl_SR P \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(e1, e2).\n            (e1, e2) \\<in> edges G \\<and>\n            e1 \\<noteq> e2 \\<and> \\<not> P (nP e1) e1 (nP e2) e2}})", "by(auto dest: ENFnrSR_to_ENFsr simp: ENFsr_offending_set)"], ["", "subsubsection \\<open>Instance helper\\<close>"], ["", "(* fsts version *)"], ["", "lemma (in SecurityInvariant_withOffendingFlows)  ENFnrSR_fsts_weakrefl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf: \"sinvar_all_edges_normal_form_not_refl_SR P\"\n    and   a_weakrefl: \"\\<forall> s r. P \\<bottom> s \\<bottom> r\"\n    and   a_botdefault: \"\\<forall> s r. (nP r) \\<noteq> \\<bottom> \\<longrightarrow> \\<not> P (nP s) s (nP r) r \\<longrightarrow> \\<not> P \\<bottom> s (nP r) r\"\n    and   a_alltobot: \"\\<forall> s r. P (nP s) s \\<bottom> r\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_fsts: \"i \\<in> fst` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from a_offending"], ["proof (chain)\npicking this:\n  f \\<in> set_offending_flows G nP", "have a_not_eval: \"\\<not> sinvar G nP\""], ["proof (prove)\nusing this:\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP", "by (metis ex_in_conv sinvar_no_offending)"], ["proof (state)\nthis:\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from valid_without_offending_flows[OF a_offending]"], ["proof (chain)\npicking this:\n  sinvar (delete_edges G f) nP", "have a_offending_rm: \"sinvar (delete_edges G f) nP\""], ["proof (prove)\nusing this:\n  sinvar (delete_edges G f) nP\n\ngoal (1 subgoal):\n 1. sinvar (delete_edges G f) nP", "."], ["proof (state)\nthis:\n  sinvar (delete_edges G f) nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from a_enf"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form_not_refl_SR P", "have a_enf': \"\\<And> G nP. sinvar G nP  = (\\<forall> (e1, e2)\\<in> (edges G). e1 \\<noteq> e2 \\<longrightarrow> P (nP e1) e1 (nP e2) e2)\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form_not_refl_SR P\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP =\n       (\\<forall>(e1, e2)\\<in>edges G.\n           e1 \\<noteq> e2 \\<longrightarrow> P (nP e1) e1 (nP e2) e2)", "using sinvar_all_edges_normal_form_not_refl_SR_def"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form_not_refl_SR P\n  sinvar_all_edges_normal_form_not_refl_SR ?P \\<equiv>\n  \\<forall>G nP.\n     sinvar G nP =\n     (\\<forall>(s, r)\\<in>edges G.\n         s \\<noteq> r \\<longrightarrow> ?P (nP s) s (nP r) r)\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP =\n       (\\<forall>(e1, e2)\\<in>edges G.\n           e1 \\<noteq> e2 \\<longrightarrow> P (nP e1) e1 (nP e2) e2)", "by simp"], ["proof (state)\nthis:\n  sinvar ?G ?nP =\n  (\\<forall>(e1, e2)\\<in>edges ?G.\n      e1 \\<noteq> e2 \\<longrightarrow> P (?nP e1) e1 (?nP e2) e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from ENFnrSR_offending_set[OF a_enf] a_not_eval a_offending"], ["proof (chain)\npicking this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP", "have a_f_3_in_f: \"\\<And> e1 e2. (e1, e2)\\<in>f \\<Longrightarrow> \\<not> P (nP e1) e1 (nP e2) e2\""], ["proof (prove)\nusing this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       (e1, e2) \\<in> f \\<Longrightarrow> \\<not> P (nP e1) e1 (nP e2) e2", "by(simp)"], ["proof (state)\nthis:\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow>\n  \\<not> P (nP ?e1.0) ?e1.0 (nP ?e2.0) ?e2.0\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from ENFnrSR_offending_set[OF a_enf] a_not_eval a_offending"], ["proof (chain)\npicking this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP", "have a_f_3_neq: \"\\<And> e1 e2. (e1, e2)\\<in>f \\<Longrightarrow> e1 \\<noteq> e2\""], ["proof (prove)\nusing this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2. (e1, e2) \\<in> f \\<Longrightarrow> e1 \\<noteq> e2", "by simp"], ["proof (state)\nthis:\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow> ?e1.0 \\<noteq> ?e2.0\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "let ?nP' = \"(nP(i := \\<bottom>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from ENFnrSR_offending_set[OF a_enf] a_not_eval a_offending a_i_fsts"], ["proof (chain)\npicking this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP\n  i \\<in> fst ` f", "obtain e1 e2 where e1e2cond: \"(e1, e2) \\<in> f \\<and> e1 = i\""], ["proof (prove)\nusing this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP\n  i \\<in> fst ` f\n\ngoal (1 subgoal):\n 1. (\\<And>e1 e2.\n        (e1, e2) \\<in> f \\<and> e1 = i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (e1, e2) \\<in> f \\<and> e1 = i\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from conjunct1[OF e1e2cond] a_offending"], ["proof (chain)\npicking this:\n  (e1, e2) \\<in> f\n  f \\<in> set_offending_flows G nP", "have \"(e1, e2) \\<in> edges G\""], ["proof (prove)\nusing this:\n  (e1, e2) \\<in> f\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. (e1, e2) \\<in> edges G", "by (metis (lifting, no_types) SecurityInvariant_withOffendingFlows.set_offending_flows_def mem_Collect_eq rev_subsetD)"], ["proof (state)\nthis:\n  (e1, e2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from conjunct1[OF e1e2cond] a_f_3_in_f"], ["proof (chain)\npicking this:\n  (e1, e2) \\<in> f\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow>\n  \\<not> P (nP ?e1.0) ?e1.0 (nP ?e2.0) ?e2.0", "have e1e2notP: \"\\<not> P (nP e1) e1 (nP e2) e2\""], ["proof (prove)\nusing this:\n  (e1, e2) \\<in> f\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow>\n  \\<not> P (nP ?e1.0) ?e1.0 (nP ?e2.0) ?e2.0\n\ngoal (1 subgoal):\n 1. \\<not> P (nP e1) e1 (nP e2) e2", "by simp"], ["proof (state)\nthis:\n  \\<not> P (nP e1) e1 (nP e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from e1e2notP a_weakrefl"], ["proof (chain)\npicking this:\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r. P \\<bottom> s \\<bottom> r", "have e1ore2neqbot: \"(nP e1) \\<noteq> \\<bottom> \\<or> (nP e2) \\<noteq> \\<bottom>\""], ["proof (prove)\nusing this:\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r. P \\<bottom> s \\<bottom> r\n\ngoal (1 subgoal):\n 1. nP e1 \\<noteq> \\<bottom> \\<or> nP e2 \\<noteq> \\<bottom>", "by fastforce"], ["proof (state)\nthis:\n  nP e1 \\<noteq> \\<bottom> \\<or> nP e2 \\<noteq> \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from e1e2notP a_alltobot"], ["proof (chain)\npicking this:\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r. P (nP s) s \\<bottom> r", "have \"(nP e2) \\<noteq> \\<bottom>\""], ["proof (prove)\nusing this:\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r. P (nP s) s \\<bottom> r\n\ngoal (1 subgoal):\n 1. nP e2 \\<noteq> \\<bottom>", "by fastforce"], ["proof (state)\nthis:\n  nP e2 \\<noteq> \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this e1e2notP a_botdefault"], ["proof (chain)\npicking this:\n  nP e2 \\<noteq> \\<bottom>\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r.\n     nP r \\<noteq> \\<bottom> \\<longrightarrow>\n     \\<not> P (nP s) s (nP r) r \\<longrightarrow>\n     \\<not> P \\<bottom> s (nP r) r", "have \"\\<not> P \\<bottom> e1 (nP e2) e2\""], ["proof (prove)\nusing this:\n  nP e2 \\<noteq> \\<bottom>\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r.\n     nP r \\<noteq> \\<bottom> \\<longrightarrow>\n     \\<not> P (nP s) s (nP r) r \\<longrightarrow>\n     \\<not> P \\<bottom> s (nP r) r\n\ngoal (1 subgoal):\n 1. \\<not> P \\<bottom> e1 (nP e2) e2", "by simp"], ["proof (state)\nthis:\n  \\<not> P \\<bottom> e1 (nP e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this e1e2notP"], ["proof (chain)\npicking this:\n  \\<not> P \\<bottom> e1 (nP e2) e2\n  \\<not> P (nP e1) e1 (nP e2) e2", "have e1e2subgoal1: \"\\<not> P (?nP' e1) e1 (nP e2) e2\""], ["proof (prove)\nusing this:\n  \\<not> P \\<bottom> e1 (nP e2) e2\n  \\<not> P (nP e1) e1 (nP e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> P ((nP(i := \\<bottom>)) e1) e1 (nP e2) e2", "by auto"], ["proof (state)\nthis:\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 (nP e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from a_f_3_neq e1e2cond"], ["proof (chain)\npicking this:\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow> ?e1.0 \\<noteq> ?e2.0\n  (e1, e2) \\<in> f \\<and> e1 = i", "have \"e2 \\<noteq> e1\""], ["proof (prove)\nusing this:\n  (?e1.0, ?e2.0) \\<in> f \\<Longrightarrow> ?e1.0 \\<noteq> ?e2.0\n  (e1, e2) \\<in> f \\<and> e1 = i\n\ngoal (1 subgoal):\n 1. e2 \\<noteq> e1", "by blast"], ["proof (state)\nthis:\n  e2 \\<noteq> e1\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from e1e2subgoal1"], ["proof (chain)\npicking this:\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 (nP e2) e2", "have \"e1 \\<noteq> e2 \\<Longrightarrow> \\<not> P (?nP' e1) e1 (?nP' e2) e2\""], ["proof (prove)\nusing this:\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 (nP e2) e2\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow>\n    \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (if e1 = i then \\<bottom> else nP e1) e1 (nP e2) e2\\<rbrakk>\n    \\<Longrightarrow> (e1 = i \\<longrightarrow>\n                       e2 = i \\<longrightarrow>\n                       \\<not> P \\<bottom> i \\<bottom> i) \\<and>\n                      (e1 \\<noteq> i \\<longrightarrow>\n                       e2 = i \\<longrightarrow>\n                       \\<not> P (nP e1) e1 \\<bottom> i)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (if e1 = i then \\<bottom> else nP e1) e1 (nP e2) e2\\<rbrakk>\n    \\<Longrightarrow> e1 = i \\<longrightarrow>\n                      e2 = i \\<longrightarrow>\n                      \\<not> P \\<bottom> i \\<bottom> i\n 2. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (if e1 = i then \\<bottom> else nP e1) e1 (nP e2) e2\\<rbrakk>\n    \\<Longrightarrow> e1 \\<noteq> i \\<longrightarrow>\n                      e2 = i \\<longrightarrow>\n                      \\<not> P (nP e1) e1 \\<bottom> i", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (if e1 = i then \\<bottom> else nP e1) e1 (nP e2) e2\\<rbrakk>\n    \\<Longrightarrow> e1 \\<noteq> i \\<longrightarrow>\n                      e2 = i \\<longrightarrow>\n                      \\<not> P (nP e1) e1 \\<bottom> i", "apply(insert e1e2cond)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e1 \\<noteq> e2;\n     \\<not> P (if e1 = i then \\<bottom> else nP e1) e1 (nP e2) e2;\n     (e1, e2) \\<in> f \\<and> e1 = i\\<rbrakk>\n    \\<Longrightarrow> e1 \\<noteq> i \\<longrightarrow>\n                      e2 = i \\<longrightarrow>\n                      \\<not> P (nP e1) e1 \\<bottom> i", "by simp"], ["proof (state)\nthis:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this \\<open>e2 \\<noteq> e1\\<close>"], ["proof (chain)\npicking this:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n  e2 \\<noteq> e1", "have \"\\<not> P (?nP' e1) e1 (?nP' e2) e2\""], ["proof (prove)\nusing this:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n  e2 \\<noteq> e1\n\ngoal (1 subgoal):\n 1. \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2", "by simp"], ["proof (state)\nthis:\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this \\<open>e2 \\<noteq> e1\\<close> ENFnrSR_offending_set[OF a_enf] a_offending \\<open>(e1, e2) \\<in> edges G\\<close>"], ["proof (chain)\npicking this:\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n  e2 \\<noteq> e1\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  f \\<in> set_offending_flows G nP\n  (e1, e2) \\<in> edges G", "have \n      \"\\<exists> (e1, e2)\\<in>(edges G). e2 \\<noteq> e1 \\<and> \\<not> P (?nP' e1) e1 (?nP' e2) e2\""], ["proof (prove)\nusing this:\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n  e2 \\<noteq> e1\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  f \\<in> set_offending_flows G nP\n  (e1, e2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<exists>(e1, e2)\\<in>edges G.\n       e2 \\<noteq> e1 \\<and>\n       \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2", "by blast"], ["proof (state)\nthis:\n  \\<exists>(e1, e2)\\<in>edges G.\n     e2 \\<noteq> e1 \\<and>\n     \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "hence \"\\<not> (\\<forall> (e1, e2)\\<in>(edges G). e2 \\<noteq> e1 \\<longrightarrow> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2)\""], ["proof (prove)\nusing this:\n  \\<exists>(e1, e2)\\<in>edges G.\n     e2 \\<noteq> e1 \\<and>\n     \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               e2 \\<noteq> e1 \\<longrightarrow>\n               P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2)", "by fast"], ["proof (state)\nthis:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             e2 \\<noteq> e1 \\<longrightarrow>\n             P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this a_enf'"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             e2 \\<noteq> e1 \\<longrightarrow>\n             P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2)\n  sinvar ?G ?nP =\n  (\\<forall>(e1, e2)\\<in>edges ?G.\n      e1 \\<noteq> e2 \\<longrightarrow> P (?nP e1) e1 (?nP e2) e2)", "show \"\\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             e2 \\<noteq> e1 \\<longrightarrow>\n             P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2)\n  sinvar ?G ?nP =\n  (\\<forall>(e1, e2)\\<in>edges ?G.\n      e1 \\<noteq> e2 \\<longrightarrow> P (?nP e1) e1 (?nP e2) e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "by fast"], ["proof (state)\nthis:\n  \\<not> sinvar G (nP(i := \\<bottom>))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* snds version *)"], ["", "lemma (in SecurityInvariant_withOffendingFlows)  ENFnrSR_snds_weakrefl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf: \"sinvar_all_edges_normal_form_not_refl_SR P\"\n    and   a_weakrefl: \"\\<forall> s r. P \\<bottom> s \\<bottom> r\"\n    and   a_botdefault: \"\\<forall> s r. (nP s) \\<noteq> \\<bottom> \\<longrightarrow> \\<not> P (nP s) s (nP r) r \\<longrightarrow> \\<not> P (nP s) s \\<bottom> r\"\n    and   a_bottoall: \"\\<forall> s r. P \\<bottom> s (nP r) r\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_snds: \"i \\<in> snd` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from a_offending"], ["proof (chain)\npicking this:\n  f \\<in> set_offending_flows G nP", "have a_not_eval: \"\\<not> sinvar G nP\""], ["proof (prove)\nusing this:\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G nP", "by (metis equals0D sinvar_no_offending)"], ["proof (state)\nthis:\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from valid_without_offending_flows[OF a_offending]"], ["proof (chain)\npicking this:\n  sinvar (delete_edges G f) nP", "have a_offending_rm: \"sinvar (delete_edges G f) nP\""], ["proof (prove)\nusing this:\n  sinvar (delete_edges G f) nP\n\ngoal (1 subgoal):\n 1. sinvar (delete_edges G f) nP", "."], ["proof (state)\nthis:\n  sinvar (delete_edges G f) nP\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from a_enf"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form_not_refl_SR P", "have a_enf': \"\\<And> G nP. sinvar G nP  = (\\<forall> (e1, e2)\\<in>(edges G). e1 \\<noteq> e2 \\<longrightarrow> P (nP e1) e1 (nP e2) e2)\""], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form_not_refl_SR P\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP =\n       (\\<forall>(e1, e2)\\<in>edges G.\n           e1 \\<noteq> e2 \\<longrightarrow> P (nP e1) e1 (nP e2) e2)", "using sinvar_all_edges_normal_form_not_refl_SR_def"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form_not_refl_SR P\n  sinvar_all_edges_normal_form_not_refl_SR ?P \\<equiv>\n  \\<forall>G nP.\n     sinvar G nP =\n     (\\<forall>(s, r)\\<in>edges G.\n         s \\<noteq> r \\<longrightarrow> ?P (nP s) s (nP r) r)\n\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       sinvar G nP =\n       (\\<forall>(e1, e2)\\<in>edges G.\n           e1 \\<noteq> e2 \\<longrightarrow> P (nP e1) e1 (nP e2) e2)", "by simp"], ["proof (state)\nthis:\n  sinvar ?G ?nP =\n  (\\<forall>(e1, e2)\\<in>edges ?G.\n      e1 \\<noteq> e2 \\<longrightarrow> P (?nP e1) e1 (?nP e2) e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from ENFnrSR_offending_set[OF a_enf] a_not_eval a_offending"], ["proof (chain)\npicking this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP", "have a_f_3_in_f: \"\\<And> s r. (s, r)\\<in>f \\<Longrightarrow> \\<not> P (nP s) s (nP r) r\""], ["proof (prove)\nusing this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. \\<And>s r. (s, r) \\<in> f \\<Longrightarrow> \\<not> P (nP s) s (nP r) r", "by simp"], ["proof (state)\nthis:\n  (?s, ?r) \\<in> f \\<Longrightarrow> \\<not> P (nP ?s) ?s (nP ?r) ?r\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from ENFnrSR_offending_set[OF a_enf] a_not_eval a_offending"], ["proof (chain)\npicking this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP", "have a_f_3_neq: \"\\<And> s r. (s, r)\\<in>f \\<Longrightarrow> s \\<noteq> r\""], ["proof (prove)\nusing this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. \\<And>s r. (s, r) \\<in> f \\<Longrightarrow> s \\<noteq> r", "by simp"], ["proof (state)\nthis:\n  (?s, ?r) \\<in> f \\<Longrightarrow> ?s \\<noteq> ?r\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "let ?nP' = \"(nP(i := \\<bottom>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from ENFnrSR_offending_set[OF a_enf] a_not_eval a_offending a_i_snds"], ["proof (chain)\npicking this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP\n  i \\<in> snd ` f", "obtain e1 e2 where e1e2cond: \"(e1, e2)\\<in>f \\<and> e2 = i\""], ["proof (prove)\nusing this:\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  \\<not> sinvar G nP\n  f \\<in> set_offending_flows G nP\n  i \\<in> snd ` f\n\ngoal (1 subgoal):\n 1. (\\<And>e1 e2.\n        (e1, e2) \\<in> f \\<and> e2 = i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (e1, e2) \\<in> f \\<and> e2 = i\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from conjunct1[OF e1e2cond] a_offending"], ["proof (chain)\npicking this:\n  (e1, e2) \\<in> f\n  f \\<in> set_offending_flows G nP", "have \"(e1, e2) \\<in> edges G\""], ["proof (prove)\nusing this:\n  (e1, e2) \\<in> f\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. (e1, e2) \\<in> edges G", "by (metis (lifting, no_types) SecurityInvariant_withOffendingFlows.set_offending_flows_def mem_Collect_eq rev_subsetD)"], ["proof (state)\nthis:\n  (e1, e2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from conjunct1[OF e1e2cond] a_f_3_in_f"], ["proof (chain)\npicking this:\n  (e1, e2) \\<in> f\n  (?s, ?r) \\<in> f \\<Longrightarrow> \\<not> P (nP ?s) ?s (nP ?r) ?r", "have e1e2notP: \"\\<not> P (nP e1) e1 (nP e2) e2\""], ["proof (prove)\nusing this:\n  (e1, e2) \\<in> f\n  (?s, ?r) \\<in> f \\<Longrightarrow> \\<not> P (nP ?s) ?s (nP ?r) ?r\n\ngoal (1 subgoal):\n 1. \\<not> P (nP e1) e1 (nP e2) e2", "by simp"], ["proof (state)\nthis:\n  \\<not> P (nP e1) e1 (nP e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from e1e2notP a_weakrefl"], ["proof (chain)\npicking this:\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r. P \\<bottom> s \\<bottom> r", "have e1ore2neqbot: \"(nP e1) \\<noteq> \\<bottom> \\<or> (nP e2) \\<noteq> \\<bottom>\""], ["proof (prove)\nusing this:\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r. P \\<bottom> s \\<bottom> r\n\ngoal (1 subgoal):\n 1. nP e1 \\<noteq> \\<bottom> \\<or> nP e2 \\<noteq> \\<bottom>", "by fastforce"], ["proof (state)\nthis:\n  nP e1 \\<noteq> \\<bottom> \\<or> nP e2 \\<noteq> \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from e1e2notP a_bottoall"], ["proof (chain)\npicking this:\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r. P \\<bottom> s (nP r) r", "have x1: \"(nP e1) \\<noteq> \\<bottom>\""], ["proof (prove)\nusing this:\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r. P \\<bottom> s (nP r) r\n\ngoal (1 subgoal):\n 1. nP e1 \\<noteq> \\<bottom>", "by fastforce"], ["proof (state)\nthis:\n  nP e1 \\<noteq> \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this e1e2notP a_botdefault"], ["proof (chain)\npicking this:\n  nP e1 \\<noteq> \\<bottom>\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r.\n     nP s \\<noteq> \\<bottom> \\<longrightarrow>\n     \\<not> P (nP s) s (nP r) r \\<longrightarrow>\n     \\<not> P (nP s) s \\<bottom> r", "have x2: \"\\<not> P (nP e1) e1 \\<bottom> e2\""], ["proof (prove)\nusing this:\n  nP e1 \\<noteq> \\<bottom>\n  \\<not> P (nP e1) e1 (nP e2) e2\n  \\<forall>s r.\n     nP s \\<noteq> \\<bottom> \\<longrightarrow>\n     \\<not> P (nP s) s (nP r) r \\<longrightarrow>\n     \\<not> P (nP s) s \\<bottom> r\n\ngoal (1 subgoal):\n 1. \\<not> P (nP e1) e1 \\<bottom> e2", "by fast"], ["proof (state)\nthis:\n  \\<not> P (nP e1) e1 \\<bottom> e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this e1e2notP"], ["proof (chain)\npicking this:\n  \\<not> P (nP e1) e1 \\<bottom> e2\n  \\<not> P (nP e1) e1 (nP e2) e2", "have e1e2subgoal1: \"\\<not> P (nP e1) e1 (?nP' e2) e2\""], ["proof (prove)\nusing this:\n  \\<not> P (nP e1) e1 \\<bottom> e2\n  \\<not> P (nP e1) e1 (nP e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> P (nP e1) e1 ((nP(i := \\<bottom>)) e2) e2", "by auto"], ["proof (state)\nthis:\n  \\<not> P (nP e1) e1 ((nP(i := \\<bottom>)) e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from a_f_3_neq e1e2cond"], ["proof (chain)\npicking this:\n  (?s, ?r) \\<in> f \\<Longrightarrow> ?s \\<noteq> ?r\n  (e1, e2) \\<in> f \\<and> e2 = i", "have \"e2 \\<noteq> e1\""], ["proof (prove)\nusing this:\n  (?s, ?r) \\<in> f \\<Longrightarrow> ?s \\<noteq> ?r\n  (e1, e2) \\<in> f \\<and> e2 = i\n\ngoal (1 subgoal):\n 1. e2 \\<noteq> e1", "by blast"], ["proof (state)\nthis:\n  e2 \\<noteq> e1\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from e1e2subgoal1"], ["proof (chain)\npicking this:\n  \\<not> P (nP e1) e1 ((nP(i := \\<bottom>)) e2) e2", "have \"e1 \\<noteq> e2 \\<Longrightarrow> \\<not> P (?nP' e1) e1 (?nP' e2) e2\""], ["proof (prove)\nusing this:\n  \\<not> P (nP e1) e1 ((nP(i := \\<bottom>)) e2) e2\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow>\n    \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2", "by(simp add: e1e2cond)"], ["proof (state)\nthis:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this \\<open>e2 \\<noteq> e1\\<close> ENFnrSR_offending_set[OF a_enf] a_offending \\<open>(e1, e2) \\<in> edges G\\<close>"], ["proof (chain)\npicking this:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n  e2 \\<noteq> e1\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  f \\<in> set_offending_flows G nP\n  (e1, e2) \\<in> edges G", "have \n      \"\\<exists> (e1, e2)\\<in>(edges G). e2 \\<noteq> e1 \\<and> \\<not> P (?nP' e1) e1 (?nP' e2) e2\""], ["proof (prove)\nusing this:\n  e1 \\<noteq> e2 \\<Longrightarrow>\n  \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n  e2 \\<noteq> e1\n  set_offending_flows ?G ?nP =\n  (if sinvar ?G ?nP then {}\n   else {{(e1, e2).\n          (e1, e2) \\<in> edges ?G \\<and>\n          e1 \\<noteq> e2 \\<and> \\<not> P (?nP e1) e1 (?nP e2) e2}})\n  f \\<in> set_offending_flows G nP\n  (e1, e2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<exists>(e1, e2)\\<in>edges G.\n       e2 \\<noteq> e1 \\<and>\n       \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>(e1, e2)\\<in>edges G.\n     e2 \\<noteq> e1 \\<and>\n     \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "hence \"\\<not> (\\<forall> (e1, e2)\\<in>(edges G). e2 \\<noteq> e1 \\<longrightarrow> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2)\""], ["proof (prove)\nusing this:\n  \\<exists>(e1, e2)\\<in>edges G.\n     e2 \\<noteq> e1 \\<and>\n     \\<not> P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n               e2 \\<noteq> e1 \\<longrightarrow>\n               P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2)", "by fast"], ["proof (state)\nthis:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             e2 \\<noteq> e1 \\<longrightarrow>\n             P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from this a_enf'"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             e2 \\<noteq> e1 \\<longrightarrow>\n             P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2)\n  sinvar ?G ?nP =\n  (\\<forall>(e1, e2)\\<in>edges ?G.\n      e1 \\<noteq> e2 \\<longrightarrow> P (?nP e1) e1 (?nP e2) e2)", "show \"\\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>(e1, e2)\\<in>edges G.\n             e2 \\<noteq> e1 \\<longrightarrow>\n             P ((nP(i := \\<bottom>)) e1) e1 ((nP(i := \\<bottom>)) e2) e2)\n  sinvar ?G ?nP =\n  (\\<forall>(e1, e2)\\<in>edges ?G.\n      e1 \\<noteq> e2 \\<longrightarrow> P (?nP e1) e1 (?nP e2) e2)\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "by fast"], ["proof (state)\nthis:\n  \\<not> sinvar G (nP(i := \\<bottom>))\n\ngoal:\nNo subgoals!", "qed"], ["", "(*ENFnr*)"], ["", "subsection \\<open>edges normal form not refl ENFnr\\<close>"], ["", "definition (in SecurityInvariant_withOffendingFlows) sinvar_all_edges_normal_form_not_refl :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n    \"sinvar_all_edges_normal_form_not_refl P \\<equiv> \\<forall> G nP. sinvar G nP = (\\<forall> (e1, e2) \\<in> edges G. e1 \\<noteq> e2 \\<longrightarrow> P (nP e1) (nP e2))\""], ["", "text\\<open>we derive everything from the ENFnrSR form\\<close>"], ["", "lemma (in SecurityInvariant_withOffendingFlows) ENFnr_to_ENFnrSR: \n    \"sinvar_all_edges_normal_form_not_refl P \\<Longrightarrow> sinvar_all_edges_normal_form_not_refl_SR (\\<lambda> v1 _ v2 _. P v1 v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form_not_refl P \\<Longrightarrow>\n    sinvar_all_edges_normal_form_not_refl_SR (\\<lambda>v1 _ v2 _. P v1 v2)", "by(simp add: sinvar_all_edges_normal_form_not_refl_def sinvar_all_edges_normal_form_not_refl_SR_def)"], ["", "(*most of results are now implied from previous lemma*)"], ["", "subsubsection \\<open>Offending Flows\\<close>"], ["", "theorem (in SecurityInvariant_withOffendingFlows) ENFnr_offending_set:\n    \"\\<lbrakk> sinvar_all_edges_normal_form_not_refl P \\<rbrakk> \\<Longrightarrow>\n    set_offending_flows G nP = (if sinvar G nP then\n      {}\n     else \n      { {(e1,e2). (e1, e2) \\<in> edges G \\<and> e1 \\<noteq> e2 \\<and> \\<not> P (nP e1) (nP e2)} })\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form_not_refl P \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(e1, e2).\n            (e1, e2) \\<in> edges G \\<and>\n            e1 \\<noteq> e2 \\<and> \\<not> P (nP e1) (nP e2)}})", "apply(drule ENFnr_to_ENFnrSR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form_not_refl_SR\n     (\\<lambda>v1 _ v2 _. P v1 v2) \\<Longrightarrow>\n    set_offending_flows G nP =\n    (if sinvar G nP then {}\n     else {{(e1, e2).\n            (e1, e2) \\<in> edges G \\<and>\n            e1 \\<noteq> e2 \\<and> \\<not> P (nP e1) (nP e2)}})", "by(drule(1) ENFnrSR_offending_set)"], ["", "subsubsection \\<open>Instance helper\\<close>"], ["", "(* fsts version *)"], ["", "lemma (in SecurityInvariant_withOffendingFlows)  ENFnr_fsts_weakrefl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf: \"sinvar_all_edges_normal_form_not_refl P\"\n    and   a_botdefault: \"\\<forall> e1 e2. e2 \\<noteq> \\<bottom> \\<longrightarrow> \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2\"\n    and   a_alltobot: \"\\<forall> e1. P e1 \\<bottom>\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_fsts: \"i \\<in> fst` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from assms"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form_not_refl P\n  \\<forall>e1 e2.\n     e2 \\<noteq> \\<bottom> \\<longrightarrow>\n     \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2\n  \\<forall>e1. P e1 \\<bottom>\n  f \\<in> set_offending_flows G nP\n  i \\<in> fst ` f", "show ?thesis"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form_not_refl P\n  \\<forall>e1 e2.\n     e2 \\<noteq> \\<bottom> \\<longrightarrow>\n     \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2\n  \\<forall>e1. P e1 \\<bottom>\n  f \\<in> set_offending_flows G nP\n  i \\<in> fst ` f\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form_not_refl P;\n     \\<forall>e1 e2.\n        e2 \\<noteq> \\<bottom> \\<longrightarrow>\n        \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2;\n     \\<forall>e1. P e1 \\<bottom>; f \\<in> set_offending_flows G nP;\n     i \\<in> fst ` f\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "apply(drule ENFnr_to_ENFnrSR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>e1 e2.\n                e2 \\<noteq> \\<bottom> \\<longrightarrow>\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2;\n     \\<forall>e1. P e1 \\<bottom>; f \\<in> set_offending_flows G nP;\n     i \\<in> fst ` f;\n     sinvar_all_edges_normal_form_not_refl_SR\n      (\\<lambda>v1 _ v2 _. P v1 v2)\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "apply(drule ENFnrSR_fsts_weakrefl_instance)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<forall>e1 e2.\n                e2 \\<noteq> \\<bottom> \\<longrightarrow>\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2;\n     \\<forall>e1. P e1 \\<bottom>; f \\<in> set_offending_flows G nP;\n     i \\<in> fst ` f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s r.\n                         P ?default_node_properties7\n                          ?default_node_properties7\n 2. \\<lbrakk>\\<forall>e1 e2.\n                e2 \\<noteq> \\<bottom> \\<longrightarrow>\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2;\n     \\<forall>e1. P e1 \\<bottom>; f \\<in> set_offending_flows G nP;\n     i \\<in> fst ` f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s r.\n                         ?nP7 r \\<noteq>\n                         ?default_node_properties7 \\<longrightarrow>\n                         \\<not> P (?nP7 s) (?nP7 r) \\<longrightarrow>\n                         \\<not> P ?default_node_properties7 (?nP7 r)\n 3. \\<lbrakk>\\<forall>e1 e2.\n                e2 \\<noteq> \\<bottom> \\<longrightarrow>\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2;\n     \\<forall>e1. P e1 \\<bottom>; f \\<in> set_offending_flows G nP;\n     i \\<in> fst ` f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s r. P (?nP7 s) ?default_node_properties7\n 4. \\<lbrakk>\\<forall>e1 e2.\n                e2 \\<noteq> \\<bottom> \\<longrightarrow>\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2;\n     \\<forall>e1. P e1 \\<bottom>; f \\<in> set_offending_flows G nP;\n     i \\<in> fst ` f\\<rbrakk>\n    \\<Longrightarrow> ?f7 \\<in> set_offending_flows ?G7 ?nP7\n 5. \\<lbrakk>\\<forall>e1 e2.\n                e2 \\<noteq> \\<bottom> \\<longrightarrow>\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2;\n     \\<forall>e1. P e1 \\<bottom>; f \\<in> set_offending_flows G nP;\n     i \\<in> fst ` f\\<rbrakk>\n    \\<Longrightarrow> ?i7 \\<in> fst ` ?f7\n 6. \\<lbrakk>\\<forall>e1 e2.\n                e2 \\<noteq> \\<bottom> \\<longrightarrow>\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P \\<bottom> e2;\n     \\<forall>e1. P e1 \\<bottom>; f \\<in> set_offending_flows G nP;\n     i \\<in> fst ` f;\n     \\<not> sinvar ?G7 (?nP7(?i7 := ?default_node_properties7))\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "by auto"], ["proof (state)\nthis:\n  \\<not> sinvar G (nP(i := \\<bottom>))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* snds version *)"], ["", "lemma (in SecurityInvariant_withOffendingFlows)  ENFnr_snds_weakrefl_instance:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_enf: \"sinvar_all_edges_normal_form_not_refl P\"\n    and   a_botdefault: \"\\<forall> e1 e2. \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>\"\n    and   a_bottoall: \"\\<forall> e2. P \\<bottom> e2\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_i_snds: \"i \\<in> snd` f\"\n    shows\n          \"\\<not> sinvar G (nP(i := \\<bottom>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "from assms"], ["proof (chain)\npicking this:\n  sinvar_all_edges_normal_form_not_refl P\n  \\<forall>e1 e2. \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>\n  \\<forall>e2. P \\<bottom> e2\n  f \\<in> set_offending_flows G nP\n  i \\<in> snd ` f", "show ?thesis"], ["proof (prove)\nusing this:\n  sinvar_all_edges_normal_form_not_refl P\n  \\<forall>e1 e2. \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>\n  \\<forall>e2. P \\<bottom> e2\n  f \\<in> set_offending_flows G nP\n  i \\<in> snd ` f\n\ngoal (1 subgoal):\n 1. \\<not> sinvar G (nP(i := \\<bottom>))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sinvar_all_edges_normal_form_not_refl P;\n     \\<forall>e1 e2. \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>;\n     \\<forall>e2. P \\<bottom> e2; f \\<in> set_offending_flows G nP;\n     i \\<in> snd ` f\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "apply(drule ENFnr_to_ENFnrSR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>e1 e2.\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>;\n     \\<forall>e2. P \\<bottom> e2; f \\<in> set_offending_flows G nP;\n     i \\<in> snd ` f;\n     sinvar_all_edges_normal_form_not_refl_SR\n      (\\<lambda>v1 _ v2 _. P v1 v2)\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "apply(drule ENFnrSR_snds_weakrefl_instance)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<forall>e1 e2.\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>;\n     \\<forall>e2. P \\<bottom> e2; f \\<in> set_offending_flows G nP;\n     i \\<in> snd ` f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s r.\n                         P ?default_node_properties7\n                          ?default_node_properties7\n 2. \\<lbrakk>\\<forall>e1 e2.\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>;\n     \\<forall>e2. P \\<bottom> e2; f \\<in> set_offending_flows G nP;\n     i \\<in> snd ` f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s r.\n                         ?nP7 s \\<noteq>\n                         ?default_node_properties7 \\<longrightarrow>\n                         \\<not> P (?nP7 s) (?nP7 r) \\<longrightarrow>\n                         \\<not> P (?nP7 s) ?default_node_properties7\n 3. \\<lbrakk>\\<forall>e1 e2.\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>;\n     \\<forall>e2. P \\<bottom> e2; f \\<in> set_offending_flows G nP;\n     i \\<in> snd ` f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s r. P ?default_node_properties7 (?nP7 r)\n 4. \\<lbrakk>\\<forall>e1 e2.\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>;\n     \\<forall>e2. P \\<bottom> e2; f \\<in> set_offending_flows G nP;\n     i \\<in> snd ` f\\<rbrakk>\n    \\<Longrightarrow> ?f7 \\<in> set_offending_flows ?G7 ?nP7\n 5. \\<lbrakk>\\<forall>e1 e2.\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>;\n     \\<forall>e2. P \\<bottom> e2; f \\<in> set_offending_flows G nP;\n     i \\<in> snd ` f\\<rbrakk>\n    \\<Longrightarrow> ?i7 \\<in> snd ` ?f7\n 6. \\<lbrakk>\\<forall>e1 e2.\n                \\<not> P e1 e2 \\<longrightarrow> \\<not> P e1 \\<bottom>;\n     \\<forall>e2. P \\<bottom> e2; f \\<in> set_offending_flows G nP;\n     i \\<in> snd ` f;\n     \\<not> sinvar ?G7 (?nP7(?i7 := ?default_node_properties7))\\<rbrakk>\n    \\<Longrightarrow> \\<not> sinvar G (nP(i := \\<bottom>))", "by auto"], ["proof (state)\nthis:\n  \\<not> sinvar G (nP(i := \\<bottom>))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* snds version DRAFT*)"], ["", "lemma (in SecurityInvariant_withOffendingFlows)  ENF_weakrefl_instance_FALSE:\n    fixes \"default_node_properties\" :: \"'a\" (\"\\<bottom>\")\n    assumes a_wfG: \"wf_graph G\"\n    and   a_not_eval: \"\\<not> sinvar G nP\"\n    and   a_enf: \"sinvar_all_edges_normal_form P\"\n    and   a_weakrefl: \"P \\<bottom> \\<bottom>\"\n    and   a_botisolated: \"\\<And> e2. e2 \\<noteq> \\<bottom> \\<Longrightarrow> \\<not> P \\<bottom> e2\"\n    and   a_botdefault: \"\\<And> e1 e2. e1 \\<noteq> \\<bottom> \\<Longrightarrow> \\<not> P e1 e2 \\<Longrightarrow> \\<not> P e1 \\<bottom>\"\n    and   a_offending: \"f \\<in> set_offending_flows G nP\"\n    and   a_offending_rm: \"sinvar (delete_edges G f) nP\"\n    and   a_i_fsts: \"i \\<in> snd` f\"\n    and   a_not_eval_upd: \"\\<not> sinvar G (nP(i := \\<bottom>))\"\n    shows \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "oops"], ["", "end"]]}