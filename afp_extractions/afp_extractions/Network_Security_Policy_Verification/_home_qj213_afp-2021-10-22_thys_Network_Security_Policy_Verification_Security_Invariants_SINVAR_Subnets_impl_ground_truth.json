{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_Subnets_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_Subnets.default_node_properties P = NetModel_node_props P\""], "translations": [["", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_Subnets.default_node_properties P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subnets.node_props P = NetModel_node_props P", "apply(simp add: NetModel_node_props_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"Subnets_eval G P = (wf_list_graph G \\<and>\n  sinvar G (SecurityInvariant.node_props SINVAR_Subnets.default_node_properties P))\""], ["", "interpretation Subnets_impl:TopoS_List_Impl \n  where default_node_properties=SINVAR_Subnets.default_node_properties\n  and sinvar_spec=SINVAR_Subnets.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_Subnets.receiver_violation\n  and offending_flows_impl=Subnets_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=Subnets_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_Subnets.default_node_properties\n     SINVAR_Subnets.sinvar sinvar SINVAR_Subnets.receiver_violation\n     Subnets_offending_list NetModel_node_props Subnets_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_Subnets.sinvar\n      SINVAR_Subnets.default_node_properties\n      SINVAR_Subnets.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_Subnets.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Subnets_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        Subnets.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Subnets.eval (list_graph_to_graph G) P) =\n        Subnets_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_Subnets.sinvar\n     SINVAR_Subnets.default_node_properties\n     SINVAR_Subnets.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_Subnets.sinvar (list_graph_to_graph G) nP = sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Subnets_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        Subnets.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Subnets.eval (list_graph_to_graph G) P) =\n        Subnets_eval G P)", "apply(simp add: TopoS_Subnets list_graph_to_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Subnets_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        Subnets.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Subnets.eval (list_graph_to_graph G) P) =\n        Subnets_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (Subnets_offending_list G nP)\n 2. (\\<forall>P.\n        Subnets.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Subnets.eval (list_graph_to_graph G) P) =\n        Subnets_eval G P)", "apply(simp add: list_graph_to_graph_def Subnets_offending_set Subnets_offending_set_def Subnets_offending_list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P.\n        Subnets.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Subnets.eval (list_graph_to_graph G) P) =\n        Subnets_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P. Subnets.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> Subnets.eval (list_graph_to_graph G) P) =\n       Subnets_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       Subnets.node_props_formaldef P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> SINVAR_Subnets.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> Subnets.eval (list_graph_to_graph G) P) =\n       Subnets_eval G P", "apply(metis Subnets.node_props.simps Subnets.node_props_eq_node_props_formaldef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> Subnets.eval (list_graph_to_graph G) P) =\n       Subnets_eval G P", "apply(simp only: Subnets_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> Subnets.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (Subnets.node_props P))", "apply(simp add: TopoS_eval_impl_proofrule[OF TopoS_Subnets])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (wf_list_graph G \\<and>\n        (\\<forall>x\\<in>edges (list_graph_to_graph G).\n            case x of\n            (e1, e2) \\<Rightarrow>\n              allowed_subnet_flow\n               (case node_properties P e1 of\n                None \\<Rightarrow> SINVAR_Subnets.default_node_properties\n                | Some property \\<Rightarrow> property)\n               (case node_properties P e2 of\n                None \\<Rightarrow> SINVAR_Subnets.default_node_properties\n                | Some property \\<Rightarrow> property))) =\n       (wf_list_graph G \\<and>\n        (\\<forall>x\\<in>set (edgesL G).\n            case x of\n            (e1, e2) \\<Rightarrow>\n              allowed_subnet_flow\n               (case node_properties P e1 of\n                None \\<Rightarrow> SINVAR_Subnets.default_node_properties\n                | Some property \\<Rightarrow> property)\n               (case node_properties P e2 of\n                None \\<Rightarrow> SINVAR_Subnets.default_node_properties\n                | Some property \\<Rightarrow> property)))", "apply(simp_all add: list_graph_to_graph_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Subnets packing\\<close>"], ["", "definition SINVAR_LIB_Subnets :: \"('v::vertex, SINVAR_Subnets.subnets) TopoS_packed\" where\n    \"SINVAR_LIB_Subnets \\<equiv> \n    \\<lparr> nm_name = ''Subnets'', \n      nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n      nm_default = SINVAR_Subnets.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = Subnets_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = Subnets_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_Subnets_interpretation: TopoS_modelLibrary SINVAR_LIB_Subnets\n      SINVAR_Subnets.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_Subnets SINVAR_Subnets.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_Subnets_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''Subnets'',\n              nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n              nm_default = SINVAR_Subnets.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = Subnets_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = Subnets_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     SINVAR_Subnets.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''Subnets'',\n              nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n              nm_default = SINVAR_Subnets.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = Subnets_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = Subnets_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     SINVAR_Subnets.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     SINVAR_Subnets.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Subnets'',\n          nm_receiver_violation = SINVAR_Subnets.receiver_violation,\n          nm_default = SINVAR_Subnets.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Subnets_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Subnets_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_Subnets.default_node_properties\n     SINVAR_Subnets.sinvar sinvar SINVAR_Subnets.receiver_violation\n     Subnets_offending_list NetModel_node_props Subnets_eval", "by(unfold_locales)"], ["", "text \\<open>Examples\\<close>"], ["", "definition example_net_sub :: \"nat list_graph\" where\n  \"example_net_sub \\<equiv> \\<lparr> nodesL = [1::nat,2,3,4, 8,9, 11,12, 42], \n    edgesL = [(1,2),(1,3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3), \n    (4,11),(1,11), \n    (8,9),(9,8),\n    (8,12),\n    (11,12),\n    (11,42), (12,42), (3,42)] \\<rparr>\""], ["", "value \"wf_list_graph example_net_sub\""], ["", "definition example_conf_sub where\n  \"example_conf_sub \\<equiv> ((\\<lambda>e. SINVAR_Subnets.default_node_properties)\n    (1 := Subnet 1, 2:= Subnet 1, 3:= Subnet 1, 4:=Subnet 1, \n     11:=BorderRouter 1,\n     8:=Subnet 2, 9:=Subnet 2, \n     12:=BorderRouter 2,\n     42 := Unassigned))\""], ["", "value \"sinvar example_net_sub example_conf_sub\""], ["", "definition example_net_sub_invalid where\n  \"example_net_sub_invalid \\<equiv> example_net_sub\\<lparr>edgesL := (42,4)#(3,8)#(11,8)#(edgesL example_net_sub)\\<rparr>\""], ["", "value \"sinvar example_net_sub_invalid example_conf_sub\""], ["", "value \"Subnets_offending_list example_net_sub_invalid example_conf_sub\""], ["", "value \"sinvar \n      \\<lparr> nodesL = [1::nat,2,3,4], edgesL = [(1,2), (2,3), (3,4), (8,9),(9,8)] \\<rparr>\n      (\\<lambda>e. SINVAR_Subnets.default_node_properties)\""], ["", "value \"sinvar \n      \\<lparr> nodesL = [1::nat,2,3,4,8,9,11,12], edgesL = [(1,2),(2,3),(3,4), (4,11),(1,11), (8,9),(9,8),(8,12),  (11,12)] \\<rparr>\n      ((\\<lambda>e. SINVAR_Subnets.default_node_properties)(1 := Subnet 1, 2:= Subnet 1, 3:= Subnet 1, 4:=Subnet 1, 11:=BorderRouter 1,\n                                    8:=Subnet 2, 9:=Subnet 2, 12:=BorderRouter 2))\""], ["", "value \"sinvar \n      \\<lparr> nodesL = [1::nat,2,3,4,8,9,11,12], edgesL = [(1,2),(2,3),(3,4), (4,11),(1,11), (8,9),(9,8),(8,12),  (11,12)] \\<rparr>\n      ((\\<lambda>e. SINVAR_Subnets.default_node_properties)(1 := Subnet 1, 2:= Subnet 1, 3:= Subnet 1, 4:=Subnet 1, 11:=BorderRouter 1))\""], ["", "value \"sinvar \n      \\<lparr> nodesL = [1::nat,2,3,4,8,9,10], edgesL = [(1,2), (2,3), (3,4), (8,9),(9,8)] \\<rparr>\n      ((\\<lambda>e. SINVAR_Subnets.default_node_properties)(8:=Subnet 8, 9:=Subnet 8))\""], ["", "hide_const (open) NetModel_node_props"], ["", "hide_const (open) sinvar"], ["", "end"]]}