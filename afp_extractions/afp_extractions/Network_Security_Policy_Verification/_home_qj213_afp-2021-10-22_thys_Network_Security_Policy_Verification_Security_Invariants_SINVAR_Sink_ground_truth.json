{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_Sink.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\"", "lemma Sink_ENFnr: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl sinvar allowed_sink_flow\"", "lemma Unassigned_to_All: \"\\<forall> e2. allowed_sink_flow Unassigned e2\"", "lemma Unassigned_default_candidate: \"\\<forall> e1 e2. \\<not> allowed_sink_flow e1 e2 \\<longrightarrow> \\<not> allowed_sink_flow e1 Unassigned\"", "lemma Sink_offending_set: \n  \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = Sink_offending_set\"", "lemma TopoS_Sink: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], "translations": [["", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_mono sinvar", "apply(simp only: SecurityInvariant_withOffendingFlows.sinvar_mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nP N E' E.\n       wf_graph \\<lparr>nodes = N, edges = E\\<rparr> \\<and>\n       E' \\<subseteq> E \\<and>\n       sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP \\<longrightarrow>\n       sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' E.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "by auto"], ["", "interpretation SecurityInvariant_preliminaries\n  where sinvar = sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_preliminaries sinvar", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(frule_tac finite_distinct_list[OF wf_graph.finiteE])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        \\<exists>xs. set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(erule_tac exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP xs.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rename_tac list_edges)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rule_tac ff=\"list_edges\" in SecurityInvariant_withOffendingFlows.mono_imp_set_offending_flows_not_empty[OF sinvar_mono])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> wf_graph G\n 2. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (set list_edges) G nP\n 3. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> set list_edges \\<subseteq> edges G\n 4. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> distinct list_edges\n 5. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 6. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto)[6]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP list_edges a b.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> edges G; set list_edges = edges G;\n        distinct list_edges;\n        \\<not> SecurityInvariant_withOffendingFlows.is_offending_flows\n                sinvar (edges G) G nP;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> allowed_sink_flow (nP a) (nP b)\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto simp add: SecurityInvariant_withOffendingFlows.is_offending_flows_def graph_ops)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(fact SecurityInvariant_withOffendingFlows.sinvar_mono_imp_is_offending_flows_mono[OF sinvar_mono])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection\\<open>ENF\\<close>"], ["", "lemma Sink_ENFnr: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl sinvar allowed_sink_flow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl\n     sinvar allowed_sink_flow", "by(simp add: SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl_def)"], ["", "lemma Unassigned_to_All: \"\\<forall> e2. allowed_sink_flow Unassigned e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e2. allowed_sink_flow Unassigned e2", "by (rule allI, case_tac e2, simp_all)"], ["", "lemma Unassigned_default_candidate: \"\\<forall> e1 e2. \\<not> allowed_sink_flow e1 e2 \\<longrightarrow> \\<not> allowed_sink_flow e1 Unassigned\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e1 e2.\n       \\<not> allowed_sink_flow e1 e2 \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned", "apply(rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       \\<not> allowed_sink_flow e1 e2 \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned", "apply(case_tac \"e2\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       e2 = Sink \\<Longrightarrow>\n       \\<not> allowed_sink_flow e1 e2 \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned\n 2. \\<And>e1 e2.\n       e2 = SinkPool \\<Longrightarrow>\n       \\<not> allowed_sink_flow e1 e2 \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned\n 3. \\<And>e1 e2.\n       e2 = Unassigned \\<Longrightarrow>\n       \\<not> allowed_sink_flow e1 e2 \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>e1.\n       \\<not> allowed_sink_flow e1 Sink \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned\n 2. \\<And>e1.\n       \\<not> allowed_sink_flow e1 SinkPool \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned", "apply(case_tac \"e1\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>e1.\n       e1 = Sink \\<Longrightarrow>\n       \\<not> allowed_sink_flow e1 Sink \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned\n 2. \\<And>e1.\n       e1 = SinkPool \\<Longrightarrow>\n       \\<not> allowed_sink_flow e1 Sink \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned\n 3. \\<And>e1.\n       e1 = Unassigned \\<Longrightarrow>\n       \\<not> allowed_sink_flow e1 Sink \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned\n 4. \\<And>e1.\n       \\<not> allowed_sink_flow e1 SinkPool \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e1.\n       \\<not> allowed_sink_flow e1 SinkPool \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned", "apply(case_tac \"e1\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>e1.\n       e1 = Sink \\<Longrightarrow>\n       \\<not> allowed_sink_flow e1 SinkPool \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned\n 2. \\<And>e1.\n       e1 = SinkPool \\<Longrightarrow>\n       \\<not> allowed_sink_flow e1 SinkPool \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned\n 3. \\<And>e1.\n       e1 = Unassigned \\<Longrightarrow>\n       \\<not> allowed_sink_flow e1 SinkPool \\<longrightarrow>\n       \\<not> allowed_sink_flow e1 Unassigned", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition Sink_offending_set:: \"'v graph \\<Rightarrow> ('v \\<Rightarrow> node_config) \\<Rightarrow> ('v \\<times> 'v) set set\" where\n  \"Sink_offending_set G nP = (if sinvar G nP then\n      {}\n     else \n      { {e \\<in> edges G. case e of (e1,e2) \\<Rightarrow> e1 \\<noteq> e2 \\<and> \\<not> allowed_sink_flow (nP e1) (nP e2)} })\""], ["", "lemma Sink_offending_set: \n  \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = Sink_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = Sink_offending_set", "apply(simp only: fun_eq_iff ENFnr_offending_set[OF Sink_ENFnr] Sink_offending_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa.\n       (if sinvar x xa then {}\n        else {{(e1, e2).\n               (e1, e2) \\<in> edges x \\<and>\n               e1 \\<noteq> e2 \\<and>\n               \\<not> allowed_sink_flow (xa e1) (xa e2)}}) =\n       (if sinvar x xa then {}\n        else {{e \\<in> edges x.\n               case e of\n               (e1, e2) \\<Rightarrow>\n                 e1 \\<noteq> e2 \\<and>\n                 \\<not> allowed_sink_flow (xa e1) (xa e2)}})", "apply(rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (if sinvar x xa then {}\n        else {{(e1, e2).\n               (e1, e2) \\<in> edges x \\<and>\n               e1 \\<noteq> e2 \\<and>\n               \\<not> allowed_sink_flow (xa e1) (xa e2)}}) =\n       (if sinvar x xa then {}\n        else {{e \\<in> edges x.\n               case e of\n               (e1, e2) \\<Rightarrow>\n                 e1 \\<noteq> e2 \\<and>\n                 \\<not> allowed_sink_flow (xa e1) (xa e2)}})", "apply(rename_tac G nP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       (if sinvar G nP then {}\n        else {{(e1, e2).\n               (e1, e2) \\<in> edges G \\<and>\n               e1 \\<noteq> e2 \\<and>\n               \\<not> allowed_sink_flow (nP e1) (nP e2)}}) =\n       (if sinvar G nP then {}\n        else {{e \\<in> edges G.\n               case e of\n               (e1, e2) \\<Rightarrow>\n                 e1 \\<noteq> e2 \\<and>\n                 \\<not> allowed_sink_flow (nP e1) (nP e2)}})", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation Sink: SecurityInvariant_IFS\nwhere default_node_properties = default_node_properties\nand sinvar = sinvar\nrewrites \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = Sink_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar default_node_properties &&&\n    set_offending_flows = Sink_offending_set", "unfolding default_node_properties_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar Unassigned &&&\n    set_offending_flows = Sink_offending_set", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>snd ` f.\n                            \\<not> sinvar G (nP(i := Unassigned))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Unassigned\n 3. set_offending_flows = Sink_offending_set", "apply(rule ballI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := Unassigned))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Unassigned\n 3. set_offending_flows = Sink_offending_set", "apply (rule SecurityInvariant_withOffendingFlows.ENFnr_snds_weakrefl_instance[OF Sink_ENFnr Unassigned_default_candidate Unassigned_to_All])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> ?f6 G f nP i \\<in> set_offending_flows G nP\n 2. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> i \\<in> snd ` ?f6 G f nP i\n 3. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Unassigned\n 4. set_offending_flows = Sink_offending_set", "apply(simp_all)[2]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Unassigned\n 2. set_offending_flows = Sink_offending_set", "apply(erule default_uniqueness_by_counterexample_IFS)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Unassigned \\<Longrightarrow>\n       \\<exists>G nP i f.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G f) nP \\<and>\n          i \\<in> snd ` f \\<and> sinvar G (nP(i := otherbot))\n 2. set_offending_flows = Sink_offending_set", "apply (simp add: SecurityInvariant_withOffendingFlows.set_offending_flows_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_min_set_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Unassigned \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>x\\<in>edges G.\n                  \\<not> (case x of\n                          (e1, e2) \\<Rightarrow>\n                            e1 \\<noteq> e2 \\<longrightarrow>\n                            allowed_sink_flow (nP e1) (nP e2))) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>x\\<in>edges G.\n                      \\<not> (case x of\n                              (e1, e2) \\<Rightarrow>\n                                e1 \\<noteq> e2 \\<longrightarrow>\n                                allowed_sink_flow (nP e1) (nP e2))) \\<and>\n                  (\\<forall>x\\<in>edges (delete_edges G f).\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        e1 \\<noteq> e2 \\<longrightarrow>\n                        allowed_sink_flow (nP e1) (nP e2)) \\<and>\n                  (\\<forall>x\\<in>f.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        \\<exists>x\\<in>edges\n  (add_edge e1 e2 (delete_edges G f)).\n                           \\<not> (case x of\n                                   (e1, e2) \\<Rightarrow>\n                                     e1 \\<noteq> e2 \\<longrightarrow>\n                                     allowed_sink_flow (nP e1)\n(nP e2))) \\<and>\n                  (\\<forall>x\\<in>edges (delete_edges G f).\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        e1 \\<noteq> e2 \\<longrightarrow>\n                        allowed_sink_flow (nP e1) (nP e2)) \\<and>\n                  i \\<in> snd ` f \\<and>\n                  (\\<forall>x\\<in>edges G.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        (e2 = i \\<longrightarrow>\n                         e1 \\<noteq> i \\<longrightarrow>\n                         allowed_sink_flow (nP e1) otherbot) \\<and>\n                        (e2 \\<noteq> i \\<longrightarrow>\n                         e1 \\<noteq> e2 \\<longrightarrow>\n                         allowed_sink_flow\n                          (if e1 = i then otherbot else nP e1) (nP e2)))))\n 2. set_offending_flows = Sink_offending_set", "apply (simp add:graph_ops)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Unassigned \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>x\\<in>edges G.\n                  \\<not> (case x of\n                          (e1, e2) \\<Rightarrow>\n                            e1 \\<noteq> e2 \\<longrightarrow>\n                            allowed_sink_flow (nP e1) (nP e2))) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>x\\<in>edges G.\n                      \\<not> (case x of\n                              (e1, e2) \\<Rightarrow>\n                                e1 \\<noteq> e2 \\<longrightarrow>\n                                allowed_sink_flow (nP e1) (nP e2))) \\<and>\n                  (\\<forall>x\\<in>edges G - f.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        e1 \\<noteq> e2 \\<longrightarrow>\n                        allowed_sink_flow (nP e1) (nP e2)) \\<and>\n                  (\\<forall>x\\<in>f.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        e1 \\<noteq> e2 \\<and>\n                        \\<not> allowed_sink_flow (nP e1) (nP e2) \\<or>\n                        (\\<exists>x\\<in>edges G - f.\n                            \\<not> (case x of\n                                    (e1, e2) \\<Rightarrow>\ne1 \\<noteq> e2 \\<longrightarrow> allowed_sink_flow (nP e1) (nP e2)))) \\<and>\n                  (\\<forall>x\\<in>edges G - f.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        e1 \\<noteq> e2 \\<longrightarrow>\n                        allowed_sink_flow (nP e1) (nP e2)) \\<and>\n                  i \\<in> snd ` f \\<and>\n                  (\\<forall>x\\<in>edges G.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        (e2 = i \\<longrightarrow>\n                         e1 \\<noteq> i \\<longrightarrow>\n                         allowed_sink_flow (nP e1) otherbot) \\<and>\n                        (e2 \\<noteq> i \\<longrightarrow>\n                         e1 \\<noteq> e2 \\<longrightarrow>\n                         allowed_sink_flow\n                          (if e1 = i then otherbot else nP e1) (nP e2)))))\n 2. set_offending_flows = Sink_offending_set", "apply (simp split: prod.split_asm prod.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Unassigned \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>x\\<in>edges G.\n                  \\<forall>x1 x2.\n                     x = (x1, x2) \\<longrightarrow>\n                     x1 \\<noteq> x2 \\<and>\n                     \\<not> allowed_sink_flow (nP x1) (nP x2)) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>x\\<in>edges G.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         x1 \\<noteq> x2 \\<and>\n                         \\<not> allowed_sink_flow (nP x1) (nP x2)) \\<and>\n                  (\\<forall>x\\<in>edges G - f.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         x1 \\<noteq> x2 \\<longrightarrow>\n                         allowed_sink_flow (nP x1) (nP x2)) \\<and>\n                  (\\<forall>x\\<in>f.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         x1 \\<noteq> x2 \\<and>\n                         \\<not> allowed_sink_flow (nP x1) (nP x2) \\<or>\n                         (\\<exists>x\\<in>edges G - f.\n                             \\<forall>x1 x2.\n                                x = (x1, x2) \\<longrightarrow>\n                                x1 \\<noteq> x2 \\<and>\n                                \\<not> allowed_sink_flow (nP x1)\n  (nP x2))) \\<and>\n                  (\\<forall>x\\<in>edges G - f.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         x1 \\<noteq> x2 \\<longrightarrow>\n                         allowed_sink_flow (nP x1) (nP x2)) \\<and>\n                  i \\<in> snd ` f \\<and>\n                  (\\<forall>x\\<in>edges G.\n                      \\<forall>x1.\n                         (x1 = i \\<longrightarrow>\n                          (\\<forall>x2.\n                              x = (i, x2) \\<longrightarrow>\n                              x2 \\<noteq> i \\<longrightarrow>\n                              allowed_sink_flow otherbot (nP x2))) \\<and>\n                         (x1 \\<noteq> i \\<longrightarrow>\n                          (\\<forall>x2.\n                              x = (x1, x2) \\<longrightarrow>\n                              (x2 = i \\<longrightarrow>\n                               allowed_sink_flow (nP x1) otherbot) \\<and>\n                              (x2 \\<noteq> i \\<longrightarrow>\n                               x1 \\<noteq> x2 \\<longrightarrow>\n                               allowed_sink_flow (nP x1) (nP x2)))))))\n 2. set_offending_flows = Sink_offending_set", "apply(rule_tac x=\"\\<lparr> nodes={vertex_1,vertex_2}, edges = {(vertex_1,vertex_2)} \\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Unassigned \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_1, vertex_2)}\\<rparr> \\<and>\n       (\\<exists>nP.\n           \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n               \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n               ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n                allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n               (\\<forall>x\\<in>f.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow>\n                      x1 \\<noteq> x2 \\<and>\n                      \\<not> allowed_sink_flow (nP x1) (nP x2) \\<or>\n                      (vertex_1, vertex_2) \\<notin> f \\<and>\n                      \\<not> allowed_sink_flow (nP vertex_1)\n                              (nP vertex_2)) \\<and>\n               ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n                allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n               i \\<in> snd ` f \\<and>\n               (\\<forall>x1.\n                   (x1 = i \\<longrightarrow>\n                    vertex_1 = i \\<longrightarrow>\n                    allowed_sink_flow otherbot (nP vertex_2)) \\<and>\n                   (x1 \\<noteq> i \\<longrightarrow>\n                    vertex_1 = x1 \\<longrightarrow>\n                    (vertex_2 = i \\<longrightarrow>\n                     allowed_sink_flow (nP vertex_1) otherbot) \\<and>\n                    (vertex_2 \\<noteq> i \\<longrightarrow>\n                     allowed_sink_flow (nP vertex_1) (nP vertex_2))))))\n 2. set_offending_flows = Sink_offending_set", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Unassigned \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_1, vertex_2)}\\<rparr>\n 2. \\<And>otherbot.\n       otherbot \\<noteq> Unassigned \\<Longrightarrow>\n       \\<exists>nP.\n          \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n          (\\<exists>i f.\n              f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n              \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n              ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n               allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n              (\\<forall>x\\<in>f.\n                  \\<forall>x1 x2.\n                     x = (x1, x2) \\<longrightarrow>\n                     x1 \\<noteq> x2 \\<and>\n                     \\<not> allowed_sink_flow (nP x1) (nP x2) \\<or>\n                     (vertex_1, vertex_2) \\<notin> f \\<and>\n                     \\<not> allowed_sink_flow (nP vertex_1)\n                             (nP vertex_2)) \\<and>\n              ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n               allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n              i \\<in> snd ` f \\<and>\n              (\\<forall>x1.\n                  (x1 = i \\<longrightarrow>\n                   vertex_1 = i \\<longrightarrow>\n                   allowed_sink_flow otherbot (nP vertex_2)) \\<and>\n                  (x1 \\<noteq> i \\<longrightarrow>\n                   vertex_1 = x1 \\<longrightarrow>\n                   (vertex_2 = i \\<longrightarrow>\n                    allowed_sink_flow (nP vertex_1) otherbot) \\<and>\n                   (vertex_2 \\<noteq> i \\<longrightarrow>\n                    allowed_sink_flow (nP vertex_1) (nP vertex_2)))))\n 3. set_offending_flows = Sink_offending_set", "apply(simp add: wf_graph_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Unassigned \\<Longrightarrow>\n       \\<exists>nP.\n          \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n          (\\<exists>i f.\n              f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n              \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n              ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n               allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n              (\\<forall>x\\<in>f.\n                  \\<forall>x1 x2.\n                     x = (x1, x2) \\<longrightarrow>\n                     x1 \\<noteq> x2 \\<and>\n                     \\<not> allowed_sink_flow (nP x1) (nP x2) \\<or>\n                     (vertex_1, vertex_2) \\<notin> f \\<and>\n                     \\<not> allowed_sink_flow (nP vertex_1)\n                             (nP vertex_2)) \\<and>\n              ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n               allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n              i \\<in> snd ` f \\<and>\n              (\\<forall>x1.\n                  (x1 = i \\<longrightarrow>\n                   vertex_1 = i \\<longrightarrow>\n                   allowed_sink_flow otherbot (nP vertex_2)) \\<and>\n                  (x1 \\<noteq> i \\<longrightarrow>\n                   vertex_1 = x1 \\<longrightarrow>\n                   (vertex_2 = i \\<longrightarrow>\n                    allowed_sink_flow (nP vertex_1) otherbot) \\<and>\n                   (vertex_2 \\<noteq> i \\<longrightarrow>\n                    allowed_sink_flow (nP vertex_1) (nP vertex_2)))))\n 2. set_offending_flows = Sink_offending_set", "apply(case_tac otherbot, simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>nP.\n       \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n           \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  x1 \\<noteq> x2 \\<and>\n                  \\<not> allowed_sink_flow (nP x1) (nP x2) \\<or>\n                  (vertex_1, vertex_2) \\<notin> f \\<and>\n                  \\<not> allowed_sink_flow (nP vertex_1)\n                          (nP vertex_2)) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n           i \\<in> snd ` f \\<and>\n           (\\<forall>x1.\n               (x1 = i \\<longrightarrow> vertex_1 \\<noteq> i) \\<and>\n               (x1 \\<noteq> i \\<longrightarrow>\n                vertex_1 = x1 \\<longrightarrow>\n                (vertex_2 = i \\<longrightarrow>\n                 allowed_sink_flow (nP vertex_1) Sink) \\<and>\n                (vertex_2 \\<noteq> i \\<longrightarrow>\n                 allowed_sink_flow (nP vertex_1) (nP vertex_2)))))\n 2. \\<exists>nP.\n       \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n           \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  x1 \\<noteq> x2 \\<and>\n                  \\<not> allowed_sink_flow (nP x1) (nP x2) \\<or>\n                  (vertex_1, vertex_2) \\<notin> f \\<and>\n                  \\<not> allowed_sink_flow (nP vertex_1)\n                          (nP vertex_2)) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n           i \\<in> snd ` f \\<and>\n           (\\<forall>x1.\n               (x1 = i \\<longrightarrow>\n                vertex_1 = i \\<longrightarrow>\n                allowed_sink_flow SinkPool (nP vertex_2)) \\<and>\n               (x1 \\<noteq> i \\<longrightarrow>\n                vertex_1 = x1 \\<longrightarrow>\n                (vertex_2 = i \\<longrightarrow>\n                 allowed_sink_flow (nP vertex_1) SinkPool) \\<and>\n                (vertex_2 \\<noteq> i \\<longrightarrow>\n                 allowed_sink_flow (nP vertex_1) (nP vertex_2)))))\n 3. set_offending_flows = Sink_offending_set", "apply(rule_tac x=\"(\\<lambda> x. Unassigned)(vertex_1 := SinkPool, vertex_2 := Unassigned)\" in exI, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>i f.\n       f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n       (vertex_1, vertex_2) \\<in> f \\<and>\n       (\\<forall>x\\<in>f.\n           \\<forall>x1.\n              (x1 = vertex_1 \\<longrightarrow>\n               x = (vertex_1, vertex_1) \\<longrightarrow>\n               (vertex_1, vertex_2) \\<notin> f) \\<and>\n              (x1 \\<noteq> vertex_1 \\<longrightarrow>\n               (x1 = vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (vertex_2, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f) \\<and>\n               (x1 \\<noteq> vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (x1, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f))) \\<and>\n       (vertex_1, vertex_2) \\<in> f \\<and>\n       i \\<in> snd ` f \\<and>\n       (\\<forall>x1.\n           (x1 = i \\<longrightarrow> vertex_1 \\<noteq> i) \\<and>\n           (x1 \\<noteq> i \\<longrightarrow>\n            vertex_1 = x1 \\<longrightarrow> vertex_2 = i))\n 2. \\<exists>nP.\n       \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n           \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  x1 \\<noteq> x2 \\<and>\n                  \\<not> allowed_sink_flow (nP x1) (nP x2) \\<or>\n                  (vertex_1, vertex_2) \\<notin> f \\<and>\n                  \\<not> allowed_sink_flow (nP vertex_1)\n                          (nP vertex_2)) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n           i \\<in> snd ` f \\<and>\n           (\\<forall>x1.\n               (x1 = i \\<longrightarrow>\n                vertex_1 = i \\<longrightarrow>\n                allowed_sink_flow SinkPool (nP vertex_2)) \\<and>\n               (x1 \\<noteq> i \\<longrightarrow>\n                vertex_1 = x1 \\<longrightarrow>\n                (vertex_2 = i \\<longrightarrow>\n                 allowed_sink_flow (nP vertex_1) SinkPool) \\<and>\n                (vertex_2 \\<noteq> i \\<longrightarrow>\n                 allowed_sink_flow (nP vertex_1) (nP vertex_2)))))\n 3. set_offending_flows = Sink_offending_set", "apply(rule_tac x=\"vertex_2\" in exI, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>f\\<subseteq>{(vertex_1, vertex_2)}.\n       (vertex_1, vertex_2) \\<in> f \\<and>\n       (\\<forall>x\\<in>f.\n           \\<forall>x1.\n              (x1 = vertex_1 \\<longrightarrow>\n               x = (vertex_1, vertex_1) \\<longrightarrow>\n               (vertex_1, vertex_2) \\<notin> f) \\<and>\n              (x1 \\<noteq> vertex_1 \\<longrightarrow>\n               (x1 = vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (vertex_2, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f) \\<and>\n               (x1 \\<noteq> vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (x1, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f))) \\<and>\n       (vertex_1, vertex_2) \\<in> f \\<and> vertex_2 \\<in> snd ` f\n 2. \\<exists>nP.\n       \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n           \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  x1 \\<noteq> x2 \\<and>\n                  \\<not> allowed_sink_flow (nP x1) (nP x2) \\<or>\n                  (vertex_1, vertex_2) \\<notin> f \\<and>\n                  \\<not> allowed_sink_flow (nP vertex_1)\n                          (nP vertex_2)) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n           i \\<in> snd ` f \\<and>\n           (\\<forall>x1.\n               (x1 = i \\<longrightarrow>\n                vertex_1 = i \\<longrightarrow>\n                allowed_sink_flow SinkPool (nP vertex_2)) \\<and>\n               (x1 \\<noteq> i \\<longrightarrow>\n                vertex_1 = x1 \\<longrightarrow>\n                (vertex_2 = i \\<longrightarrow>\n                 allowed_sink_flow (nP vertex_1) SinkPool) \\<and>\n                (vertex_2 \\<noteq> i \\<longrightarrow>\n                 allowed_sink_flow (nP vertex_1) (nP vertex_2)))))\n 3. set_offending_flows = Sink_offending_set", "apply(rule_tac x=\"{(vertex_1, vertex_2)}\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>nP.\n       \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n           \\<not> allowed_sink_flow (nP vertex_1) (nP vertex_2) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  x1 \\<noteq> x2 \\<and>\n                  \\<not> allowed_sink_flow (nP x1) (nP x2) \\<or>\n                  (vertex_1, vertex_2) \\<notin> f \\<and>\n                  \\<not> allowed_sink_flow (nP vertex_1)\n                          (nP vertex_2)) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            allowed_sink_flow (nP vertex_1) (nP vertex_2)) \\<and>\n           i \\<in> snd ` f \\<and>\n           (\\<forall>x1.\n               (x1 = i \\<longrightarrow>\n                vertex_1 = i \\<longrightarrow>\n                allowed_sink_flow SinkPool (nP vertex_2)) \\<and>\n               (x1 \\<noteq> i \\<longrightarrow>\n                vertex_1 = x1 \\<longrightarrow>\n                (vertex_2 = i \\<longrightarrow>\n                 allowed_sink_flow (nP vertex_1) SinkPool) \\<and>\n                (vertex_2 \\<noteq> i \\<longrightarrow>\n                 allowed_sink_flow (nP vertex_1) (nP vertex_2)))))\n 2. set_offending_flows = Sink_offending_set", "apply(rule_tac x=\"(\\<lambda> x. Unassigned)(vertex_1 := SinkPool, vertex_2 := Unassigned)\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>i f.\n       f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n       (vertex_1, vertex_2) \\<in> f \\<and>\n       (\\<forall>x\\<in>f.\n           \\<forall>x1.\n              (x1 = vertex_1 \\<longrightarrow>\n               x = (vertex_1, vertex_1) \\<longrightarrow>\n               (vertex_1, vertex_2) \\<notin> f) \\<and>\n              (x1 \\<noteq> vertex_1 \\<longrightarrow>\n               (x1 = vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (vertex_2, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f) \\<and>\n               (x1 \\<noteq> vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (x1, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f))) \\<and>\n       (vertex_1, vertex_2) \\<in> f \\<and>\n       i \\<in> snd ` f \\<and>\n       (\\<forall>x1.\n           (x1 = i \\<longrightarrow> vertex_1 \\<noteq> i) \\<and>\n           (x1 \\<noteq> i \\<longrightarrow>\n            vertex_1 = x1 \\<longrightarrow> vertex_2 = i))\n 2. set_offending_flows = Sink_offending_set", "apply(rule_tac x=\"vertex_2\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>f\\<subseteq>{(vertex_1, vertex_2)}.\n       (vertex_1, vertex_2) \\<in> f \\<and>\n       (\\<forall>x\\<in>f.\n           \\<forall>x1.\n              (x1 = vertex_1 \\<longrightarrow>\n               x = (vertex_1, vertex_1) \\<longrightarrow>\n               (vertex_1, vertex_2) \\<notin> f) \\<and>\n              (x1 \\<noteq> vertex_1 \\<longrightarrow>\n               (x1 = vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (vertex_2, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f) \\<and>\n               (x1 \\<noteq> vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (x1, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f))) \\<and>\n       (vertex_1, vertex_2) \\<in> f \\<and> vertex_2 \\<in> snd ` f\n 2. set_offending_flows = Sink_offending_set", "apply(rule_tac x=\"{(vertex_1, vertex_2)}\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = Sink_offending_set", "apply(fact Sink_offending_set)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma TopoS_Sink: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties receiver_violation", "unfolding receiver_violation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties True", "by unfold_locales"], ["", "hide_fact (open) sinvar_mono"], ["", "hide_const (open) sinvar receiver_violation default_node_properties"], ["", "end"]]}