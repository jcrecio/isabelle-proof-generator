{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_BLPbasic_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_BLPbasic.default_node_properties P = NetModel_node_props P\""], "translations": [["", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_BLPbasic.default_node_properties P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BLPbasic.node_props P = NetModel_node_props P", "apply(simp add: NetModel_node_props_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"BLP_eval G P = (wf_list_graph G \\<and> \n  sinvar G (SecurityInvariant.node_props SINVAR_BLPbasic.default_node_properties P))\""], ["", "interpretation BLPbasic_impl:TopoS_List_Impl\n  where default_node_properties=SINVAR_BLPbasic.default_node_properties\n  and sinvar_spec=SINVAR_BLPbasic.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_BLPbasic.receiver_violation\n  and offending_flows_impl=BLP_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=BLP_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_BLPbasic.default_node_properties\n     SINVAR_BLPbasic.sinvar sinvar SINVAR_BLPbasic.receiver_violation\n     BLP_offending_list NetModel_node_props BLP_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_BLPbasic.sinvar\n      SINVAR_BLPbasic.default_node_properties\n      SINVAR_BLPbasic.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_BLPbasic.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (BLP_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        BLPbasic.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPbasic.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_BLPbasic.sinvar\n     SINVAR_BLPbasic.default_node_properties\n     SINVAR_BLPbasic.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_BLPbasic.sinvar (list_graph_to_graph G) nP = sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (BLP_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        BLPbasic.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPbasic.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(simp add: TopoS_BLPBasic)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G.\n       wf_list_graph G \\<longrightarrow>\n       (\\<forall>nP.\n           (\\<forall>(e1, e2)\\<in>edges (list_graph_to_graph G).\n               nP e1 \\<le> nP e2) =\n           (\\<forall>(e1, e2)\\<in>set (edgesL G). nP e1 \\<le> nP e2))\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (BLP_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        BLPbasic.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPbasic.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(simp add: list_graph_to_graph_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (BLP_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        BLPbasic.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPbasic.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (BLP_offending_list G nP)\n 2. (\\<forall>P.\n        BLPbasic.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPbasic.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(simp add: list_graph_to_graph_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G.\n       wf_list_graph G \\<longrightarrow>\n       (\\<forall>nP.\n           set_offending_flows\n            \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>\n            nP =\n           set ` set (BLP_offending_list G nP))\n 2. (\\<forall>P.\n        BLPbasic.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPbasic.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(simp add: list_graph_to_graph_def BLP_offending_set BLP_offending_set_def BLP_offending_list_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P.\n        BLPbasic.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPbasic.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P. BLPbasic.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        BLPbasic.eval (list_graph_to_graph G) P) =\n       BLP_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       BLPbasic.node_props_formaldef P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> SINVAR_BLPbasic.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        BLPbasic.eval (list_graph_to_graph G) P) =\n       BLP_eval G P", "apply(metis BLPbasic.node_props.simps BLPbasic.node_props_eq_node_props_formaldef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        BLPbasic.eval (list_graph_to_graph G) P) =\n       BLP_eval G P", "apply(simp only: BLP_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        BLPbasic.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (BLPbasic.node_props P))", "apply(simp add: TopoS_eval_impl_proofrule[OF TopoS_BLPBasic])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (wf_list_graph G \\<and>\n        (\\<forall>x\\<in>edges (list_graph_to_graph G).\n            case x of\n            (e1, e2) \\<Rightarrow>\n              (case node_properties P e1 of\n               None \\<Rightarrow> SINVAR_BLPbasic.default_node_properties\n               | Some property \\<Rightarrow> property)\n              \\<le> (case node_properties P e2 of\n                     None \\<Rightarrow>\n                       SINVAR_BLPbasic.default_node_properties\n                     | Some property \\<Rightarrow> property))) =\n       (wf_list_graph G \\<and>\n        (\\<forall>x\\<in>set (edgesL G).\n            case x of\n            (e1, e2) \\<Rightarrow>\n              (case node_properties P e1 of\n               None \\<Rightarrow> SINVAR_BLPbasic.default_node_properties\n               | Some property \\<Rightarrow> property)\n              \\<le> (case node_properties P e2 of\n                     None \\<Rightarrow>\n                       SINVAR_BLPbasic.default_node_properties\n                     | Some property \\<Rightarrow> property)))", "apply(simp add: list_graph_to_graph_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>BLPbasic packing\\<close>"], ["", "definition SINVAR_LIB_BLPbasic :: \"('v::vertex, security_level) TopoS_packed\" where\n    \"SINVAR_LIB_BLPbasic \\<equiv> \n    \\<lparr> nm_name = ''BLPbasic'', \n      nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n      nm_default = SINVAR_BLPbasic.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = BLP_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = BLP_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_BLPbasic_interpretation: TopoS_modelLibrary SINVAR_LIB_BLPbasic \n      SINVAR_BLPbasic.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_BLPbasic SINVAR_BLPbasic.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_BLPbasic_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''BLPbasic'',\n              nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n              nm_default = SINVAR_BLPbasic.default_node_properties,\n              nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = BLP_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     SINVAR_BLPbasic.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''BLPbasic'',\n              nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n              nm_default = SINVAR_BLPbasic.default_node_properties,\n              nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = BLP_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     SINVAR_BLPbasic.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     SINVAR_BLPbasic.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''BLPbasic'',\n          nm_receiver_violation = SINVAR_BLPbasic.receiver_violation,\n          nm_default = SINVAR_BLPbasic.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_BLPbasic.default_node_properties\n     SINVAR_BLPbasic.sinvar sinvar SINVAR_BLPbasic.receiver_violation\n     BLP_offending_list NetModel_node_props BLP_eval", "by(unfold_locales)"], ["", "subsubsection\\<open>Example\\<close>"], ["", "definition fabNet :: \"string list_graph\" where\n  \"fabNet \\<equiv> \\<lparr> nodesL = [''Statistics'', ''SensorSink'', ''PresenceSensor'', ''Webcam'', ''TempSensor'', ''FireSesnsor'',\n                     ''MissionControl1'', ''MissionControl2'', ''Watchdog'', ''Bot1'', ''Bot2''], \n              edgesL =[(''PresenceSensor'', ''SensorSink''), (''Webcam'', ''SensorSink''), \n                     (''TempSensor'', ''SensorSink''),  (''FireSesnsor'', ''SensorSink''),\n                     (''SensorSink'', ''Statistics''),\n                     (''MissionControl1'', ''Bot1''), (''MissionControl1'', ''Bot2''),\n                     (''MissionControl2'', ''Bot2''),\n                     (''Watchdog'', ''Bot1''), (''Watchdog'', ''Bot2'')] \\<rparr>\""], ["", "value \"wf_list_graph fabNet\""], ["", "definition sensorProps_try1 :: \"string \\<Rightarrow> security_level\" where\n    \"sensorProps_try1 \\<equiv> (\\<lambda> n. SINVAR_BLPbasic.default_node_properties)(''PresenceSensor'' := 2, ''Webcam'' := 3)\""], ["", "value \"BLP_offending_list fabNet sensorProps_try1\""], ["", "value \"sinvar fabNet sensorProps_try1\""], ["", "definition sensorProps_try2 :: \"string \\<Rightarrow> security_level\" where\n    \"sensorProps_try2 \\<equiv> (\\<lambda> n. SINVAR_BLPbasic.default_node_properties)(''PresenceSensor'' := 2, ''Webcam'' := 3, \n                                                       ''SensorSink'' := 3)\""], ["", "value \"BLP_offending_list fabNet sensorProps_try2\""], ["", "value \"sinvar fabNet sensorProps_try2\""], ["", "definition sensorProps_try3 :: \"string \\<Rightarrow> security_level\" where\n    \"sensorProps_try3 \\<equiv> (\\<lambda> n. SINVAR_BLPbasic.default_node_properties)(''PresenceSensor'' := 2, ''Webcam'' := 3, \n                                                       ''SensorSink'' := 3, ''Statistics'' := 3)\""], ["", "value \"BLP_offending_list fabNet sensorProps_try3\""], ["", "value \"sinvar fabNet sensorProps_try3\""], ["", "text \\<open>Another parameter set for confidential controlling information\\<close>"], ["", "definition sensorProps_conf :: \"string \\<Rightarrow> security_level\" where\n    \"sensorProps_conf \\<equiv> (\\<lambda> n. SINVAR_BLPbasic.default_node_properties)(''MissionControl1'' := 1, ''MissionControl2'' := 2,\n      ''Bot1'' := 1, ''Bot2'' := 2 )\""], ["", "value \"BLP_offending_list fabNet sensorProps_conf\""], ["", "value \"sinvar fabNet sensorProps_conf\""], ["", "text \\<open>Complete example:\\<close>"], ["", "definition sensorProps_NMParams_try3 :: \"(string, nat) TopoS_Params\" where\n  \"sensorProps_NMParams_try3 \\<equiv> \\<lparr> node_properties = [''PresenceSensor'' \\<mapsto> 2, \n                                                    ''Webcam'' \\<mapsto> 3, \n                                                    ''SensorSink'' \\<mapsto> 3,\n                                                    ''Statistics'' \\<mapsto> 3] \\<rparr>\""], ["", "value \"BLP_eval fabNet sensorProps_NMParams_try3\""], ["", "export_code SINVAR_LIB_BLPbasic checking Scala"], ["", "hide_const (open) NetModel_node_props BLP_offending_list BLP_eval"], ["", "hide_const (open) sinvar"], ["", "end"]]}