{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Lib/FiniteListGraph_Impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma wf_list_graph_impl_axioms_locale_props: \n    \"wf_list_graph_impl V E \\<longleftrightarrow> fst` set E \\<subseteq> set V \\<and> snd` set E \\<subseteq> set V\"", "lemma rbt_contains: \"rbt_contains a (rbt_fromlist V) \\<longleftrightarrow> a \\<in> set V\"", "lemma[code]: \"wf_list_graph_impl V E = wf_list_graph_impl_rs (rbt_fromlist V) E\"", "lemma[code]: \"FiniteListGraph.wf_list_graph_axioms G = wf_list_graph_impl (nodesL G) (edgesL G)\"", "theorem wf_list_graph_iff_wf_graph: \n    \"wf_graph (list_graph_to_graph G) \\<longleftrightarrow> wf_list_graph_axioms G\""], "translations": [["", "lemma wf_list_graph_impl_axioms_locale_props: \n    \"wf_list_graph_impl V E \\<longleftrightarrow> fst` set E \\<subseteq> set V \\<and> snd` set E \\<subseteq> set V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph_impl V E =\n    (fst ` set E \\<subseteq> set V \\<and> snd ` set E \\<subseteq> set V)", "by (induction E) auto"], ["", "definition rbt_fromlist :: \"'a list \\<Rightarrow> ('a::linorder, unit) RBT.rbt\" where \n  \"rbt_fromlist ls \\<equiv> RBT.bulkload (map (\\<lambda>l. (l, ())) ls)\""], ["", "definition \"rbt_contains a rbt \\<equiv> RBT.lookup rbt a \\<noteq> None\""], ["", "lemma rbt_contains: \"rbt_contains a (rbt_fromlist V) \\<longleftrightarrow> a \\<in> set V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rbt_contains a (rbt_fromlist V) = (a \\<in> set V)", "apply(simp add: rbt_contains_def rbt_fromlist_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_of (map (\\<lambda>l. (l, ())) V) a = Some ()) = (a \\<in> set V)", "apply(induction V)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (map_of (map (\\<lambda>l. (l, ())) []) a = Some ()) = (a \\<in> set [])\n 2. \\<And>aa V.\n       (map_of (map (\\<lambda>l. (l, ())) V) a = Some ()) =\n       (a \\<in> set V) \\<Longrightarrow>\n       (map_of (map (\\<lambda>l. (l, ())) (aa # V)) a = Some ()) =\n       (a \\<in> set (aa # V))", "by(simp)+"], ["", "(*making the \\<in> more efficient*)"], ["", "fun wf_list_graph_impl_rs::\"('v::linorder,unit) RBT.rbt \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> bool\" where\n    \"wf_list_graph_impl_rs V [] = True\" |\n    \"wf_list_graph_impl_rs V ((v1,v2)#Es) = (rbt_contains v1 V \\<and> rbt_contains v2 V \\<and> wf_list_graph_impl_rs V Es)\""], ["", "lemma[code]: \"wf_list_graph_impl V E = wf_list_graph_impl_rs (rbt_fromlist V) E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph_impl V E = wf_list_graph_impl_rs (rbt_fromlist V) E", "apply(induction E)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf_list_graph_impl V [] = wf_list_graph_impl_rs (rbt_fromlist V) []\n 2. \\<And>a E.\n       wf_list_graph_impl V E =\n       wf_list_graph_impl_rs (rbt_fromlist V) E \\<Longrightarrow>\n       wf_list_graph_impl V (a # E) =\n       wf_list_graph_impl_rs (rbt_fromlist V) (a # E)", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a E.\n       wf_list_graph_impl V E =\n       wf_list_graph_impl_rs (rbt_fromlist V) E \\<Longrightarrow>\n       wf_list_graph_impl V (a # E) =\n       wf_list_graph_impl_rs (rbt_fromlist V) (a # E)", "apply(rename_tac e Es)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e Es.\n       wf_list_graph_impl V Es =\n       wf_list_graph_impl_rs (rbt_fromlist V) Es \\<Longrightarrow>\n       wf_list_graph_impl V (e # Es) =\n       wf_list_graph_impl_rs (rbt_fromlist V) (e # Es)", "apply(case_tac e)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e Es a b.\n       \\<lbrakk>wf_list_graph_impl V Es =\n                wf_list_graph_impl_rs (rbt_fromlist V) Es;\n        e = (a, b)\\<rbrakk>\n       \\<Longrightarrow> wf_list_graph_impl V (e # Es) =\n                         wf_list_graph_impl_rs (rbt_fromlist V) (e # Es)", "by(simp add: rbt_contains)"], ["", "lemma[code]: \"FiniteListGraph.wf_list_graph_axioms G = wf_list_graph_impl (nodesL G) (edgesL G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph_axioms G = wf_list_graph_impl (nodesL G) (edgesL G)", "by(simp add: FiniteListGraph.wf_list_graph_axioms_def wf_list_graph_impl_axioms_locale_props)"], ["", "text\\<open>The list implementation matches the @{term \"wf_graph\"} definition\\<close>"], ["", "theorem wf_list_graph_iff_wf_graph: \n    \"wf_graph (list_graph_to_graph G) \\<longleftrightarrow> wf_list_graph_axioms G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_graph (list_graph_to_graph G) = wf_list_graph_axioms G", "apply(unfold list_graph_to_graph_def wf_graph_def wf_list_graph_axioms_def wf_list_graph_impl_axioms_locale_props)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((fst `\n      edges \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>\n      \\<subseteq> nodes\n                   \\<lparr>nodes = set (nodesL G),\n                      edges = set (edgesL G)\\<rparr> \\<and>\n      snd `\n      edges \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>\n      \\<subseteq> nodes\n                   \\<lparr>nodes = set (nodesL G),\n                      edges = set (edgesL G)\\<rparr>) \\<and>\n     finite\n      (edges\n        \\<lparr>nodes = set (nodesL G),\n           edges = set (edgesL G)\\<rparr>) \\<and>\n     finite\n      (nodes\n        \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>)) =\n    (fst ` set (edgesL G) \\<subseteq> set (nodesL G) \\<and>\n     snd ` set (edgesL G) \\<subseteq> set (nodesL G))", "by simp"], ["", "corollary wf_list_graph_iff_wf_graph_simplified: \n  \"wf_graph \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr> \\<longleftrightarrow> wf_list_graph_axioms G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr> =\n    wf_list_graph_axioms G", "apply(simp add: wf_list_graph_iff_wf_graph[unfolded list_graph_to_graph_def, simplified])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Code examples.\\<close>"], ["", "definition wf_graph_example where\n  \"wf_graph_example \\<equiv> \\<lparr> nodesL = [1::nat,4,6], edgesL = [(1,4), (1,6), (6,4)] \\<rparr>\""], ["", "value \"wf_list_graph wf_graph_example\""], ["", "definition wf_graph_impl_example where\n  \"wf_graph_impl_example \\<equiv> wf_list_graph wf_graph_example\""], ["", "export_code wf_list_graph empty add_node delete_node add_edge delete_edge checking Scala"], ["", "end"]]}