{"file_name": "/home/qj213/afp-2021-10-22/thys/Possibilistic_Noninterference/Language_Semantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Possibilistic_Noninterference", "problem_names": ["lemmas trans_Atm = Atm", "lemmas trans_WhileFalse = WhileFalse", "lemmas trans_SeqC = SeqC", "lemmas trans_SeqT = SeqT", "lemmas trans_IfTrue = IfTrue", "lemmas trans_IfFalse = IfFalse", "lemmas trans_WhileTrue = WhileTrue", "lemmas trans_ParCL = ParCL", "lemmas trans_ParCR = ParCR", "lemmas trans_ParTL = ParTL", "lemmas trans_ParTR = ParTR", "lemmas trans_Refl = Refl", "lemmas trans_Step = Step", "lemma MtransC_Refl[simp]: \"cf \\<rightarrow>*c cf\"", "lemmas transC_induct = transC_MtransC.inducts(1)\n  [split_format(complete), \n   where ?P2.0 = \"\\<lambda> c s c' s'. True\"]", "lemmas MtransC_induct_temp = transC_MtransC.inducts(2)[split_format(complete)]", "lemma MtransC_rtranclp_transC:\n\"MtransC = transC ^**\"", "lemma transC_MtransC[simp]:\nassumes \"cf \\<rightarrow>c cf'\"\nshows \"cf \\<rightarrow>*c cf'\"", "lemma MtransC_Trans:\nassumes \"cf \\<rightarrow>*c cf'\" and \"cf' \\<rightarrow>*c cf''\"\nshows \"cf \\<rightarrow>*c cf''\"", "lemma MtransC_StepC:\nassumes *: \"cf \\<rightarrow>*c cf'\" and **: \"cf' \\<rightarrow>c cf''\"\nshows \"cf \\<rightarrow>*c cf''\"", "lemma MtransC_induct[consumes 1, case_names Refl Trans]:\nassumes \"cf \\<rightarrow>*c cf'\"\nand \"\\<And>cf. phi cf cf\"\nand \n\"\\<And> cf cf' cf''. \n   \\<lbrakk>cf \\<rightarrow>*c cf'; phi cf cf'; cf' \\<rightarrow>c cf''\\<rbrakk>\n   \\<Longrightarrow> phi cf cf''\"\nshows \"phi cf cf'\"", "lemma MtransC_induct2[consumes 1, case_names Refl Trans, induct pred: MtransC]:\nassumes \"(c,s) \\<rightarrow>*c (c',s')\"\nand \"\\<And>c s. phi c s c s\"\nand \n\"\\<And> c s c' s' c'' s''. \n   \\<lbrakk>(c,s) \\<rightarrow>*c (c',s'); phi c s c' s'; (c',s') \\<rightarrow>c (c'',s'')\\<rbrakk>\n   \\<Longrightarrow> phi c s c'' s''\"\nshows \"phi c s c' s'\"", "lemma transT_MtransT[simp]:\nassumes \"cf \\<rightarrow>t s'\"\nshows \"cf \\<rightarrow>*t s'\"", "lemma MtransC_MtransT:\nassumes \"cf \\<rightarrow>*c cf'\" and \"cf' \\<rightarrow>*t cf''\"\nshows \"cf \\<rightarrow>*t cf''\"", "lemma transC_MtransT[simp]:\nassumes \"cf \\<rightarrow>c cf'\" and \"cf' \\<rightarrow>*t s''\"\nshows \"cf \\<rightarrow>*t s''\"", "lemma Atm_transC_simp[simp]:\n\"~ (Atm atm, s) \\<rightarrow>c cf\"", "lemma Atm_transC_invert[elim!]:\nassumes \"(Atm atm, s) \\<rightarrow>c cf\"\nshows phi", "lemma Atm_transT_invert[elim!]:\nassumes \"(Atm atm, s) \\<rightarrow>t s'\"\nand \"s' = aval atm s \\<Longrightarrow> phi\"\nshows phi", "lemma Seq_transC_invert[elim!]:\nassumes \"(c1 ;; c2, s) \\<rightarrow>c (c', s')\"\nand \"\\<And> c1'. \\<lbrakk>(c1, s) \\<rightarrow>c (c1',s'); c' = c1' ;; c2\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma Seq_transT_invert[simp]:\n\"~ (c1 ;; c2, s) \\<rightarrow>t s'\"", "lemma If_transC_invert[elim!]:\nassumes \"(If tst c1 c2, s) \\<rightarrow>c (c', s')\"\nand \"\\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<lbrakk>~ tval tst s; c' = c2; s' = s\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma If_transT_simp[simp]:\n\"~ (If b c1 c2, s) \\<rightarrow>t s'\"", "lemma If_transT_invert[elim!]:\nassumes \"(If b c1 c2, s) \\<rightarrow>t s'\"\nshows phi", "lemma While_transC_invert[elim]:\nassumes \"(While tst c1, s) \\<rightarrow>c (c', s')\"\nand \"\\<lbrakk>tval tst s; c' = c1 ;; (While tst c1); s' = s\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma While_transT_invert[elim!]:\nassumes \"(While tst c1, s) \\<rightarrow>t s'\"\nand \"\\<lbrakk>~ tval tst s; s' = s\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma Par_transC_invert[elim!]:\nassumes \"(Par c1 c2, s) \\<rightarrow>c (c', s')\"\nand \"\\<And> c1'. \\<lbrakk>(c1, s) \\<rightarrow>c (c1',s'); c' = Par c1' c2\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<And> c2'. \\<lbrakk>(c2, s) \\<rightarrow>c (c2',s'); c' = Par c1 c2'\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma Par_transT_simp[simp]:\n\"~ (Par c1 c2, s) \\<rightarrow>t s'\"", "lemma Par_transT_invert[elim!]:\nassumes \"(Par c1 c2, s) \\<rightarrow>t s'\"\nshows phi", "lemma trans_nchotomy:\n\"(\\<exists> c' s'. (c,s) \\<rightarrow>c (c',s')) \\<or> \n (\\<exists> s'. (c,s) \\<rightarrow>t s')\"", "lemma not_transC_transT:\n\"\\<lbrakk>cf \\<rightarrow>c cf'; cf \\<rightarrow>t s'\\<rbrakk> \\<Longrightarrow> phi\"", "lemmas MtransT_invert = MtransT.cases", "lemma MtransT_invert2:\nassumes \"(c, s) \\<rightarrow>*t s''\"\nand \"\\<And> c' s'. \\<lbrakk>(c,s) \\<rightarrow>*c (c',s'); (c', s') \\<rightarrow>t s''\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma Seq_MtransC_invert[elim!]:\nassumes \"(c1 ;; c2, s) \\<rightarrow>*c (d', t')\"\nand \"\\<And> c1'. \\<lbrakk>(c1, s) \\<rightarrow>*c (c1',t'); d' = c1' ;; c2\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<And> s'. \\<lbrakk>(c1, s) \\<rightarrow>*t s'; (c2, s') \\<rightarrow>*c (d',t')\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma Seq_MtransT_invert[elim!]:\nassumes *: \"(c1 ;; c2, s) \\<rightarrow>*t s''\"\nand **: \"\\<And> s'. \\<lbrakk>(c1, s) \\<rightarrow>*t s'; (c2, s') \\<rightarrow>*t s''\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma Seq_MtransC[simp]:\nassumes \"(c1, s) \\<rightarrow>*c (c1', s')\"\nshows \"(c1 ;; c2, s) \\<rightarrow>*c (c1' ;; c2, s')\"", "lemma Seq_MtransT_MtransC[simp]:\nassumes \"(c1, s) \\<rightarrow>*t s'\"\nshows \"(c1 ;; c2, s) \\<rightarrow>*c (c2, s')\"", "lemma ParCL_MtransC[simp]:\nassumes \"(c1, s) \\<rightarrow>*c (c1', s')\"\nshows \"(Par c1 c2, s) \\<rightarrow>*c (Par c1' c2, s')\"", "lemma ParCR_MtransC[simp]:\nassumes \"(c2, s) \\<rightarrow>*c (c2', s')\"\nshows \"(Par c1 c2, s) \\<rightarrow>*c (Par c1 c2', s')\"", "lemma ParTL_MtransC[simp]:\nassumes \"(c1, s) \\<rightarrow>*t s'\"\nshows \"(Par c1 c2, s) \\<rightarrow>*c (c2, s')\"", "lemma ParTR_MtransC[simp]:\nassumes \"(c2, s) \\<rightarrow>*t s'\"\nshows \"(Par c1 c2, s) \\<rightarrow>*c (c1, s')\"", "lemma noWhile_transC:\nassumes \"noWhile c\" and \"(c,s) \\<rightarrow>c (c',s')\"\nshows \"noWhile c'\"", "lemma seq_transC:\nassumes \"seq c\" and \"(c,s) \\<rightarrow>c (c',s')\"\nshows \"seq c'\"", "lemma numSt_gt_0[simp]:\n\"noWhile c \\<Longrightarrow> numSt c > 0\"", "lemma numSt_transC:\nassumes \"noWhile c\" and \"(c,s) \\<rightarrow>c (c',s')\"\nshows \"numSt c' < numSt c\"", "lemma noWhile_MtransT:\nassumes \"noWhile c\"\nshows \"\\<exists> s'. (c,s) \\<rightarrow>*t s'\"", "lemma mayDiverge_coind[consumes 1, case_names Hyp, induct pred: mayDiverge]:\nassumes *: \"phi c s\" and \n**: \"\\<And> c s. phi c s \\<Longrightarrow> \n            \\<exists> c' s'. (c,s) \\<rightarrow>c (c',s') \\<and> (phi c' s' \\<or> mayDiverge c' s')\" \nshows \"mayDiverge c s\"", "lemma mayDiverge_raw_coind[consumes 1, case_names Hyp]:\nassumes *: \"phi c s\" and \n**: \"\\<And> c s. phi c s \\<Longrightarrow> \n            \\<exists> c' s'. (c,s) \\<rightarrow>c (c',s') \\<and> phi c' s'\" \nshows \"mayDiverge c s\"", "lemma mayDiverge_transC:\nassumes \"mayDiverge c s\"\nshows \"\\<exists> c' s'. (c,s) \\<rightarrow>c (c',s') \\<and> mayDiverge c' s'\"", "lemma transC_mayDiverge:\nassumes \"(c,s) \\<rightarrow>c (c',s')\" and \"mayDiverge c' s'\"\nshows \"mayDiverge c s\"", "lemma mayDiverge_not_transT:\nassumes \"mayDiverge c s\"\nshows \"\\<not> (c,s) \\<rightarrow>t s'\"", "lemma MtransC_mayDiverge:\nassumes \"(c,s) \\<rightarrow>*c (c',s')\" and \"mayDiverge c' s'\"\nshows \"mayDiverge c s\"", "lemma not_MtransT_mayDiverge: \nassumes \"\\<And> s'. \\<not> (c,s) \\<rightarrow>*t s'\"\nshows \"mayDiverge c s\"", "lemma not_mayDiverge_Atm[simp]:\n\"\\<not> mayDiverge (Atm atm) s\"", "lemma mayDiverge_Seq_L:\nassumes \"mayDiverge c1 s\" \nshows \"mayDiverge (c1 ;; c2) s\"", "lemma mayDiverge_Seq_R:\nassumes c1: \"(c1, s) \\<rightarrow>*t s'\" and c2: \"mayDiverge c2 s'\"\nshows \"mayDiverge (c1 ;; c2) s\"", "lemma mayDiverge_If_L: \nassumes \"tval tst s\" and \"mayDiverge c1 s\"\nshows \"mayDiverge (If tst c1 c2) s\"", "lemma mayDiverge_If_R: \nassumes \"\\<not> tval tst s\" and \"mayDiverge c2 s\"\nshows \"mayDiverge (If tst c1 c2) s\"", "lemma mayDiverge_If: \nassumes \"mayDiverge c1 s\" and \"mayDiverge c2 s\"\nshows \"mayDiverge (If tst c1 c2) s\"", "lemma mayDiverge_Par_L: \nassumes \"mayDiverge c1 s\"\nshows \"mayDiverge (Par c1 c2) s\"", "lemma mayDiverge_Par_R: \nassumes \"mayDiverge c2 s\"\nshows \"mayDiverge (Par c1 c2) s\"", "lemma mustT_transC:\nassumes \"mustT c s\" and \"(c,s) \\<rightarrow>c (c',s')\"\nshows \"mustT c' s'\"", "lemma transT_not_mustT:\nassumes \"(c,s) \\<rightarrow>t s'\"\nshows \"mustT c s\"", "lemma mustT_MtransC:\nassumes \"mustT c s\" and \"(c,s) \\<rightarrow>*c (c',s')\"\nshows \"mustT c' s'\"", "lemma mustT_MtransT:\nassumes \"mustT c s\"\nshows \"\\<exists> s'. (c,s) \\<rightarrow>*t s'\"", "lemma mustT_Atm[simp]:\n\"mustT (Atm atm) s\"", "lemma mustT_Seq_L:\nassumes \"mustT (c1 ;; c2) s\"\nshows \"mustT c1 s\"", "lemma mustT_Seq_R:\nassumes \"mustT (c1 ;; c2) s\" and \"(c1, s) \\<rightarrow>*t s'\" \nshows \"mustT c2 s'\"", "lemma mustT_If_L: \nassumes \"tval tst s\" and \"mustT (If tst c1 c2) s\" \nshows \"mustT c1 s\"", "lemma mustT_If_R: \nassumes \"\\<not> tval tst s\" and \"mustT (If tst c1 c2) s\" \nshows \"mustT c2 s\"", "lemma mustT_If: \nassumes \"mustT (If tst c1 c2) s\"\nshows \"mustT c1 s \\<or> mustT c2 s\"", "lemma mustT_Par_L: \nassumes \"mustT (Par c1 c2) s\"\nshows \"mustT c1 s\"", "lemma mustT_Par_R: \nassumes \"mustT (Par c1 c2) s\"\nshows \"mustT c2 s\"", "lemma determOn_seq_transT:\n\"determOn (\\<lambda>(c,s). seq c) transT\""], "translations": [["", "lemmas trans_Atm = Atm"], ["", "lemmas trans_WhileFalse = WhileFalse"], ["", "(* The RT-closure of \\<rightarrow>c is inlined since later versions of \\<rightarrow>c may refer to it. *)"], ["", "inductive transC :: \n\"(('test,'atom)com * 'state) \\<Rightarrow> (('test,'atom)com * 'state) \\<Rightarrow> bool\"\n(infix \"\\<rightarrow>c\" 55)\nand MtransC :: \n\"(('test,'atom)com * 'state) \\<Rightarrow> (('test,'atom)com * 'state) \\<Rightarrow> bool\"\n(infix \"\\<rightarrow>*c\" 55)\nwhere\n  SeqC[simp]:\n\"(c1, s) \\<rightarrow>c (c1', s') \\<Longrightarrow> (c1 ;; c2, s) \\<rightarrow>c (c1' ;; c2, s')\" \n| SeqT[simp]:\n\"(c1, s) \\<rightarrow>t s' \\<Longrightarrow> (c1 ;; c2, s) \\<rightarrow>c (c2, s')\" \n| IfTrue[simp]:  \n\"tval tst s \\<Longrightarrow> (If tst c1 c2, s) \\<rightarrow>c (c1, s)\"\n| IfFalse[simp]:  \n\"~ tval tst s \\<Longrightarrow> (If tst c1 c2,s) \\<rightarrow>c (c2, s)\"\n| WhileTrue[simp]:  \n\"tval tst s \\<Longrightarrow> (While tst c, s) \\<rightarrow>c (c ;; (While tst c), s)\"\n(*  *)\n| ParCL[simp]:\n\"(c1, s) \\<rightarrow>c (c1', s') \\<Longrightarrow> (Par c1 c2, s) \\<rightarrow>c (Par c1' c2, s')\" \n| ParCR[simp]:\n\"(c2, s) \\<rightarrow>c (c2', s') \\<Longrightarrow> (Par c1 c2, s) \\<rightarrow>c (Par c1 c2', s')\" \n| ParTL[simp]:\n\"(c1, s) \\<rightarrow>t s' \\<Longrightarrow> (Par c1 c2, s) \\<rightarrow>c (c2, s')\" \n| ParTR[simp]:\n\"(c2, s) \\<rightarrow>t s' \\<Longrightarrow> (Par c1 c2, s) \\<rightarrow>c (c1, s')\" \n| Refl:\n\"(c,s) \\<rightarrow>*c (c,s)\"\n| Step:\n\"\\<lbrakk>(c,s) \\<rightarrow>*c (c',s'); (c',s') \\<rightarrow>c (c'',s'')\\<rbrakk> \\<Longrightarrow> (c,s) \\<rightarrow>*c (c'',s'')\""], ["", "lemmas trans_SeqC = SeqC"], ["", "lemmas trans_SeqT = SeqT"], ["", "lemmas trans_IfTrue = IfTrue"], ["", "lemmas trans_IfFalse = IfFalse"], ["", "lemmas trans_WhileTrue = WhileTrue"], ["", "lemmas trans_ParCL = ParCL"], ["", "lemmas trans_ParCR = ParCR"], ["", "lemmas trans_ParTL = ParTL"], ["", "lemmas trans_ParTR = ParTR"], ["", "lemmas trans_Refl = Refl"], ["", "lemmas trans_Step = Step"], ["", "lemma MtransC_Refl[simp]: \"cf \\<rightarrow>*c cf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*c cf", "using trans_Refl"], ["proof (prove)\nusing this:\n  (?c, ?s) \\<rightarrow>*c (?c, ?s)\n\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*c cf", "by(cases cf, simp)"], ["", "lemmas transC_induct = transC_MtransC.inducts(1)\n  [split_format(complete), \n   where ?P2.0 = \"\\<lambda> c s c' s'. True\"]"], ["", "lemmas MtransC_induct_temp = transC_MtransC.inducts(2)[split_format(complete)]"], ["", "inductive MtransT :: \n\"(('test,'atom)com * 'state) \\<Rightarrow> 'state \\<Rightarrow> bool\"\n(infix \"\\<rightarrow>*t\" 55)\nwhere\n  StepT:\n\"\\<lbrakk>cf \\<rightarrow>*c cf'; cf' \\<rightarrow>t s''\\<rbrakk> \\<Longrightarrow> cf \\<rightarrow>*t s''\""], ["", "lemma MtransC_rtranclp_transC:\n\"MtransC = transC ^**\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "fix c s c' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "have \"(c,s) \\<rightarrow>*c (c',s') \\<Longrightarrow> transC ^** (c,s) (c',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, s) \\<rightarrow>*c (c', s') \\<Longrightarrow>\n    (\\<rightarrow>c)\\<^sup>*\\<^sup>* (c, s) (c', s')", "apply(rule MtransC_induct_temp[of _ _ c s c' s' \"\\<lambda>c s c' s'. True\"])"], ["proof (prove)\ngoal (12 subgoals):\n 1. (c, s) \\<rightarrow>*c (c', s') \\<Longrightarrow>\n    PL.MtransC ?tval ?aval (c, s) (c', s')\n 2. \\<And>c1 sa c1' s'a c2.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        PL.transC ?tval ?aval (c1, sa) (c1', s'a); True\\<rbrakk>\n       \\<Longrightarrow> True\n 3. \\<And>c1 sa s'a c2.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        PL.transT ?tval ?aval (c1, sa) s'a\\<rbrakk>\n       \\<Longrightarrow> True\n 4. \\<And>tst sa c1 c2.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s'); ?tval tst sa\\<rbrakk>\n       \\<Longrightarrow> True\n 5. \\<And>tst sa c1 c2.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        \\<not> ?tval tst sa\\<rbrakk>\n       \\<Longrightarrow> True\n 6. \\<And>tst sa ca.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s'); ?tval tst sa\\<rbrakk>\n       \\<Longrightarrow> True\n 7. \\<And>c1 sa c1' s'a c2.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        PL.transC ?tval ?aval (c1, sa) (c1', s'a); True\\<rbrakk>\n       \\<Longrightarrow> True\n 8. \\<And>c2 sa c2' s'a c1.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        PL.transC ?tval ?aval (c2, sa) (c2', s'a); True\\<rbrakk>\n       \\<Longrightarrow> True\n 9. \\<And>c1 sa s'a c2.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        PL.transT ?tval ?aval (c1, sa) s'a\\<rbrakk>\n       \\<Longrightarrow> True\n 10. \\<And>c2 sa s'a c1.\n        \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n         PL.transT ?tval ?aval (c2, sa) s'a\\<rbrakk>\n        \\<Longrightarrow> True\nA total of 12 subgoals...", "by auto"], ["proof (state)\nthis:\n  (c, s) \\<rightarrow>*c (c', s') \\<Longrightarrow>\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* (c, s) (c', s')\n\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "}"], ["proof (state)\nthis:\n  (?c2, ?s2) \\<rightarrow>*c (?c'2, ?s'2) \\<Longrightarrow>\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* (?c2, ?s2) (?c'2, ?s'2)\n\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "moreover"], ["proof (state)\nthis:\n  (?c2, ?s2) \\<rightarrow>*c (?c'2, ?s'2) \\<Longrightarrow>\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* (?c2, ?s2) (?c'2, ?s'2)\n\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "{"], ["proof (state)\nthis:\n  (?c2, ?s2) \\<rightarrow>*c (?c'2, ?s'2) \\<Longrightarrow>\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* (?c2, ?s2) (?c'2, ?s'2)\n\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "fix c s c' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "have \"transC ^** (c,s) (c',s') \\<Longrightarrow> (c,s) \\<rightarrow>*c (c',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<rightarrow>c)\\<^sup>*\\<^sup>* (c, s) (c', s') \\<Longrightarrow>\n    (c, s) \\<rightarrow>*c (c', s')", "apply(erule rtranclp.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a. a \\<rightarrow>*c a\n 2. \\<And>a b c.\n       \\<lbrakk>(\\<rightarrow>c)\\<^sup>*\\<^sup>* a b; a \\<rightarrow>*c b;\n        b \\<rightarrow>c c\\<rbrakk>\n       \\<Longrightarrow> a \\<rightarrow>*c c", "using trans_Step"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?c, ?s) \\<rightarrow>*c (?c', ?s');\n   (?c', ?s') \\<rightarrow>c (?c'', ?s'')\\<rbrakk>\n  \\<Longrightarrow> (?c, ?s) \\<rightarrow>*c (?c'', ?s'')\n\ngoal (2 subgoals):\n 1. \\<And>a. a \\<rightarrow>*c a\n 2. \\<And>a b c.\n       \\<lbrakk>(\\<rightarrow>c)\\<^sup>*\\<^sup>* a b; a \\<rightarrow>*c b;\n        b \\<rightarrow>c c\\<rbrakk>\n       \\<Longrightarrow> a \\<rightarrow>*c c", "by auto"], ["proof (state)\nthis:\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* (c, s) (c', s') \\<Longrightarrow>\n  (c, s) \\<rightarrow>*c (c', s')\n\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "}"], ["proof (state)\nthis:\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* (?c2, ?s2) (?c'2, ?s'2) \\<Longrightarrow>\n  (?c2, ?s2) \\<rightarrow>*c (?c'2, ?s'2)\n\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "ultimately"], ["proof (chain)\npicking this:\n  (?c2, ?s2) \\<rightarrow>*c (?c'2, ?s'2) \\<Longrightarrow>\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* (?c2, ?s2) (?c'2, ?s'2)\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* (?c2, ?s2) (?c'2, ?s'2) \\<Longrightarrow>\n  (?c2, ?s2) \\<rightarrow>*c (?c'2, ?s'2)", "show ?thesis"], ["proof (prove)\nusing this:\n  (?c2, ?s2) \\<rightarrow>*c (?c'2, ?s'2) \\<Longrightarrow>\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* (?c2, ?s2) (?c'2, ?s'2)\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* (?c2, ?s2) (?c'2, ?s'2) \\<Longrightarrow>\n  (?c2, ?s2) \\<rightarrow>*c (?c'2, ?s'2)\n\ngoal (1 subgoal):\n 1. (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s c' s'.\n                (c, s) \\<rightarrow>*c (c', s') \\<Longrightarrow>\n                (\\<rightarrow>c)\\<^sup>*\\<^sup>* (c, s) (c', s');\n     \\<And>c s c' s'.\n        (\\<rightarrow>c)\\<^sup>*\\<^sup>* (c, s) (c', s') \\<Longrightarrow>\n        (c, s) \\<rightarrow>*c (c', s')\\<rbrakk>\n    \\<Longrightarrow> (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*", "apply(rule ext, rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<And>c s c' s'.\n                   (c, s) \\<rightarrow>*c (c', s') \\<Longrightarrow>\n                   (\\<rightarrow>c)\\<^sup>*\\<^sup>* (c, s) (c', s');\n        \\<And>c s c' s'.\n           (\\<rightarrow>c)\\<^sup>*\\<^sup>* (c, s)\n            (c', s') \\<Longrightarrow>\n           (c, s) \\<rightarrow>*c (c', s')\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>*c xa =\n                         (\\<rightarrow>c)\\<^sup>*\\<^sup>* x xa", "by auto"], ["proof (state)\nthis:\n  (\\<rightarrow>*c) = (\\<rightarrow>c)\\<^sup>*\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transC_MtransC[simp]:\nassumes \"cf \\<rightarrow>c cf'\"\nshows \"cf \\<rightarrow>*c cf'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*c cf'", "using assms"], ["proof (prove)\nusing this:\n  cf \\<rightarrow>c cf'\n\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*c cf'", "unfolding MtransC_rtranclp_transC"], ["proof (prove)\nusing this:\n  cf \\<rightarrow>c cf'\n\ngoal (1 subgoal):\n 1. (\\<rightarrow>c)\\<^sup>*\\<^sup>* cf cf'", "by blast"], ["", "lemma MtransC_Trans:\nassumes \"cf \\<rightarrow>*c cf'\" and \"cf' \\<rightarrow>*c cf''\"\nshows \"cf \\<rightarrow>*c cf''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*c cf''", "using assms rtranclp_trans[of transC cf cf' cf'']"], ["proof (prove)\nusing this:\n  cf \\<rightarrow>*c cf'\n  cf' \\<rightarrow>*c cf''\n  \\<lbrakk>(\\<rightarrow>c)\\<^sup>*\\<^sup>* cf cf';\n   (\\<rightarrow>c)\\<^sup>*\\<^sup>* cf' cf''\\<rbrakk>\n  \\<Longrightarrow> (\\<rightarrow>c)\\<^sup>*\\<^sup>* cf cf''\n\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*c cf''", "unfolding MtransC_rtranclp_transC"], ["proof (prove)\nusing this:\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* cf cf'\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* cf' cf''\n  \\<lbrakk>(\\<rightarrow>c)\\<^sup>*\\<^sup>* cf cf';\n   (\\<rightarrow>c)\\<^sup>*\\<^sup>* cf' cf''\\<rbrakk>\n  \\<Longrightarrow> (\\<rightarrow>c)\\<^sup>*\\<^sup>* cf cf''\n\ngoal (1 subgoal):\n 1. (\\<rightarrow>c)\\<^sup>*\\<^sup>* cf cf''", "by blast"], ["", "lemma MtransC_StepC:\nassumes *: \"cf \\<rightarrow>*c cf'\" and **: \"cf' \\<rightarrow>c cf''\"\nshows \"cf \\<rightarrow>*c cf''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*c cf''", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*c cf''", "have \"cf' \\<rightarrow>*c cf''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf' \\<rightarrow>*c cf''", "using **"], ["proof (prove)\nusing this:\n  cf' \\<rightarrow>c cf''\n\ngoal (1 subgoal):\n 1. cf' \\<rightarrow>*c cf''", "by simp"], ["proof (state)\nthis:\n  cf' \\<rightarrow>*c cf''\n\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*c cf''", "thus ?thesis"], ["proof (prove)\nusing this:\n  cf' \\<rightarrow>*c cf''\n\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*c cf''", "using * MtransC_Trans"], ["proof (prove)\nusing this:\n  cf' \\<rightarrow>*c cf''\n  cf \\<rightarrow>*c cf'\n  \\<lbrakk>?cf \\<rightarrow>*c ?cf'; ?cf' \\<rightarrow>*c ?cf''\\<rbrakk>\n  \\<Longrightarrow> ?cf \\<rightarrow>*c ?cf''\n\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*c cf''", "by blast"], ["proof (state)\nthis:\n  cf \\<rightarrow>*c cf''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma MtransC_induct[consumes 1, case_names Refl Trans]:\nassumes \"cf \\<rightarrow>*c cf'\"\nand \"\\<And>cf. phi cf cf\"\nand \n\"\\<And> cf cf' cf''. \n   \\<lbrakk>cf \\<rightarrow>*c cf'; phi cf cf'; cf' \\<rightarrow>c cf''\\<rbrakk>\n   \\<Longrightarrow> phi cf cf''\"\nshows \"phi cf cf'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi cf cf'", "using assms"], ["proof (prove)\nusing this:\n  cf \\<rightarrow>*c cf'\n  phi ?cf ?cf\n  \\<lbrakk>?cf \\<rightarrow>*c ?cf'; phi ?cf ?cf';\n   ?cf' \\<rightarrow>c ?cf''\\<rbrakk>\n  \\<Longrightarrow> phi ?cf ?cf''\n\ngoal (1 subgoal):\n 1. phi cf cf'", "unfolding MtransC_rtranclp_transC"], ["proof (prove)\nusing this:\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* cf cf'\n  phi ?cf ?cf\n  \\<lbrakk>(\\<rightarrow>c)\\<^sup>*\\<^sup>* ?cf ?cf'; phi ?cf ?cf';\n   ?cf' \\<rightarrow>c ?cf''\\<rbrakk>\n  \\<Longrightarrow> phi ?cf ?cf''\n\ngoal (1 subgoal):\n 1. phi cf cf'", "using rtranclp.induct[of transC cf cf']"], ["proof (prove)\nusing this:\n  (\\<rightarrow>c)\\<^sup>*\\<^sup>* cf cf'\n  phi ?cf ?cf\n  \\<lbrakk>(\\<rightarrow>c)\\<^sup>*\\<^sup>* ?cf ?cf'; phi ?cf ?cf';\n   ?cf' \\<rightarrow>c ?cf''\\<rbrakk>\n  \\<Longrightarrow> phi ?cf ?cf''\n  \\<lbrakk>(\\<rightarrow>c)\\<^sup>*\\<^sup>* cf cf'; \\<And>a. ?P a a;\n   \\<And>a b c.\n      \\<lbrakk>(\\<rightarrow>c)\\<^sup>*\\<^sup>* a b; ?P a b;\n       b \\<rightarrow>c c\\<rbrakk>\n      \\<Longrightarrow> ?P a c\\<rbrakk>\n  \\<Longrightarrow> ?P cf cf'\n\ngoal (1 subgoal):\n 1. phi cf cf'", "by blast"], ["", "lemma MtransC_induct2[consumes 1, case_names Refl Trans, induct pred: MtransC]:\nassumes \"(c,s) \\<rightarrow>*c (c',s')\"\nand \"\\<And>c s. phi c s c s\"\nand \n\"\\<And> c s c' s' c'' s''. \n   \\<lbrakk>(c,s) \\<rightarrow>*c (c',s'); phi c s c' s'; (c',s') \\<rightarrow>c (c'',s'')\\<rbrakk>\n   \\<Longrightarrow> phi c s c'' s''\"\nshows \"phi c s c' s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi c s c' s'", "using assms \nMtransC_induct[of \"(c,s)\" \"(c',s')\" \"\\<lambda>(c,s) (c',s'). phi c s c' s'\"]"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>*c (c', s')\n  phi ?c ?s ?c ?s\n  \\<lbrakk>(?c, ?s) \\<rightarrow>*c (?c', ?s'); phi ?c ?s ?c' ?s';\n   (?c', ?s') \\<rightarrow>c (?c'', ?s'')\\<rbrakk>\n  \\<Longrightarrow> phi ?c ?s ?c'' ?s''\n  \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n   \\<And>cf.\n      (case cf of (c, s) \\<Rightarrow> \\<lambda>(c', s'). phi c s c' s') cf;\n   \\<And>cf cf' cf''.\n      \\<lbrakk>cf \\<rightarrow>*c cf';\n       (case cf of (c, s) \\<Rightarrow> \\<lambda>(c', s'). phi c s c' s')\n        cf';\n       cf' \\<rightarrow>c cf''\\<rbrakk>\n      \\<Longrightarrow> (case cf of\n                         (c, s) \\<Rightarrow>\n                           \\<lambda>(c', s'). phi c s c' s')\n                         cf''\\<rbrakk>\n  \\<Longrightarrow> (case (c, s) of\n                     (c, s) \\<Rightarrow> \\<lambda>(c', s'). phi c s c' s')\n                     (c', s')\n\ngoal (1 subgoal):\n 1. phi c s c' s'", "by blast"], ["", "lemma transT_MtransT[simp]:\nassumes \"cf \\<rightarrow>t s'\"\nshows \"cf \\<rightarrow>*t s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*t s'", "by (metis PL.MtransC_Refl PL.MtransT.intros assms)"], ["", "lemma MtransC_MtransT:\nassumes \"cf \\<rightarrow>*c cf'\" and \"cf' \\<rightarrow>*t cf''\"\nshows \"cf \\<rightarrow>*t cf''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*t cf''", "by (metis MtransT.cases PL.MtransC_Trans PL.MtransT.intros assms)"], ["", "lemma transC_MtransT[simp]:\nassumes \"cf \\<rightarrow>c cf'\" and \"cf' \\<rightarrow>*t s''\"\nshows \"cf \\<rightarrow>*t s''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf \\<rightarrow>*t s''", "by (metis PL.MtransC_MtransT assms(1) assms(2) transC_MtransC)"], ["", "text\\<open>Inversion rules, nchotomies and such:\\<close>"], ["", "lemma Atm_transC_simp[simp]:\n\"~ (Atm atm, s) \\<rightarrow>c cf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (Atm atm, s) \\<rightarrow>c cf", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Atm atm, s) \\<rightarrow>c cf \\<Longrightarrow> False", "apply(erule transC.cases)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>c1 sa c1' s' c2.\n       \\<lbrakk>(Atm atm, s) = (c1 ;; c2, sa); cf = (c1' ;; c2, s');\n        (c1, sa) \\<rightarrow>c (c1', s')\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>c1 sa s' c2.\n       \\<lbrakk>(Atm atm, s) = (c1 ;; c2, sa); cf = (c2, s');\n        (c1, sa) \\<rightarrow>t s'\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>tst sa c1 c2.\n       \\<lbrakk>(Atm atm, s) = (if tst then c1 else c2, sa); cf = (c1, sa);\n        tval tst sa\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>tst sa c1 c2.\n       \\<lbrakk>(Atm atm, s) = (if tst then c1 else c2, sa); cf = (c2, sa);\n        \\<not> tval tst sa\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>tst sa c.\n       \\<lbrakk>(Atm atm, s) = (while tst do c, sa);\n        cf = (c ;; while tst do c, sa); tval tst sa\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>c1 sa c1' s' c2.\n       \\<lbrakk>(Atm atm, s) = (c1 | c2, sa); cf = (c1' | c2, s');\n        (c1, sa) \\<rightarrow>c (c1', s')\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>c2 sa c2' s' c1.\n       \\<lbrakk>(Atm atm, s) = (c1 | c2, sa); cf = (c1 | c2', s');\n        (c2, sa) \\<rightarrow>c (c2', s')\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>c1 sa s' c2.\n       \\<lbrakk>(Atm atm, s) = (c1 | c2, sa); cf = (c2, s');\n        (c1, sa) \\<rightarrow>t s'\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>c2 sa s' c1.\n       \\<lbrakk>(Atm atm, s) = (c1 | c2, sa); cf = (c1, s');\n        (c2, sa) \\<rightarrow>t s'\\<rbrakk>\n       \\<Longrightarrow> False", "by auto"], ["", "lemma Atm_transC_invert[elim!]:\nassumes \"(Atm atm, s) \\<rightarrow>c cf\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using assms"], ["proof (prove)\nusing this:\n  (Atm atm, s) \\<rightarrow>c cf\n\ngoal (1 subgoal):\n 1. phi", "by simp"], ["", "lemma Atm_transT_invert[elim!]:\nassumes \"(Atm atm, s) \\<rightarrow>t s'\"\nand \"s' = aval atm s \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using assms"], ["proof (prove)\nusing this:\n  (Atm atm, s) \\<rightarrow>t s'\n  s' = aval atm s \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(Atm atm, s) \\<rightarrow>t s';\n     s' = aval atm s \\<Longrightarrow> phi\\<rbrakk>\n    \\<Longrightarrow> phi", "apply(erule transT.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>atma sa.\n       \\<lbrakk>s' = aval atm s \\<Longrightarrow> phi;\n        (Atm atm, s) = (Atm atma, sa); s' = aval atma sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 2. \\<And>tst sa c.\n       \\<lbrakk>s' = aval atm s \\<Longrightarrow> phi;\n        (Atm atm, s) = (while tst do c, sa); s' = sa;\n        \\<not> tval tst sa\\<rbrakk>\n       \\<Longrightarrow> phi", "by auto"], ["", "lemma Seq_transC_invert[elim!]:\nassumes \"(c1 ;; c2, s) \\<rightarrow>c (c', s')\"\nand \"\\<And> c1'. \\<lbrakk>(c1, s) \\<rightarrow>c (c1',s'); c' = c1' ;; c2\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using assms"], ["proof (prove)\nusing this:\n  (c1 ;; c2, s) \\<rightarrow>c (c', s')\n  \\<lbrakk>(c1, s) \\<rightarrow>c (?c1', s'); c' = ?c1' ;; c2\\<rbrakk>\n  \\<Longrightarrow> phi\n  \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk> \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c1 ;; c2, s) \\<rightarrow>c (c', s');\n     \\<And>c1'.\n        \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s'); c' = c1' ;; c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n     \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n     \\<Longrightarrow> phi\\<rbrakk>\n    \\<Longrightarrow> phi", "apply(erule transC.cases)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>c1a sa c1' s'a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' ;; c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 ;; c2, s) = (c1a ;; c2a, sa); (c', s') = (c1' ;; c2a, s'a);\n        (c1a, sa) \\<rightarrow>c (c1', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 2. \\<And>c1a sa s'a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' ;; c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 ;; c2, s) = (c1a ;; c2a, sa); (c', s') = (c2a, s'a);\n        (c1a, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi\n 3. \\<And>tst sa c1a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' ;; c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 ;; c2, s) = (if tst then c1a else c2a, sa);\n        (c', s') = (c1a, sa); tval tst sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 4. \\<And>tst sa c1a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' ;; c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 ;; c2, s) = (if tst then c1a else c2a, sa);\n        (c', s') = (c2a, sa); \\<not> tval tst sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 5. \\<And>tst sa c.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' ;; c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 ;; c2, s) = (while tst do c, sa);\n        (c', s') = (c ;; while tst do c, sa); tval tst sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 6. \\<And>c1a sa c1' s'a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' ;; c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 ;; c2, s) = (c1a | c2a, sa); (c', s') = (c1' | c2a, s'a);\n        (c1a, sa) \\<rightarrow>c (c1', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 7. \\<And>c2a sa c2' s'a c1a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' ;; c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 ;; c2, s) = (c1a | c2a, sa); (c', s') = (c1a | c2', s'a);\n        (c2a, sa) \\<rightarrow>c (c2', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 8. \\<And>c1a sa s'a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' ;; c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 ;; c2, s) = (c1a | c2a, sa); (c', s') = (c2a, s'a);\n        (c1a, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi\n 9. \\<And>c2a sa s'a c1a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' ;; c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 ;; c2, s) = (c1a | c2a, sa); (c', s') = (c1a, s'a);\n        (c2a, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi", "by auto"], ["", "lemma Seq_transT_invert[simp]:\n\"~ (c1 ;; c2, s) \\<rightarrow>t s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (c1 ;; c2, s) \\<rightarrow>t s'", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1 ;; c2, s) \\<rightarrow>t s' \\<Longrightarrow> False", "apply(erule transT.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>atm sa.\n       \\<lbrakk>(c1 ;; c2, s) = (Atm atm, sa); s' = aval atm sa\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>tst sa c.\n       \\<lbrakk>(c1 ;; c2, s) = (while tst do c, sa); s' = sa;\n        \\<not> tval tst sa\\<rbrakk>\n       \\<Longrightarrow> False", "by auto"], ["", "lemma If_transC_invert[elim!]:\nassumes \"(If tst c1 c2, s) \\<rightarrow>c (c', s')\"\nand \"\\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<lbrakk>~ tval tst s; c' = c2; s' = s\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using assms"], ["proof (prove)\nusing this:\n  (if tst then c1 else c2, s) \\<rightarrow>c (c', s')\n  \\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk> \\<Longrightarrow> phi\n  \\<lbrakk>\\<not> tval tst s; c' = c2; s' = s\\<rbrakk> \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if tst then c1 else c2, s) \\<rightarrow>c (c', s');\n     \\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk> \\<Longrightarrow> phi;\n     \\<lbrakk>\\<not> tval tst s; c' = c2; s' = s\\<rbrakk>\n     \\<Longrightarrow> phi\\<rbrakk>\n    \\<Longrightarrow> phi", "apply(erule transC.cases)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>c1a sa c1' s'a c2a.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        \\<lbrakk>\\<not> tval tst s; c' = c2; s' = s\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (if tst then c1 else c2, s) = (c1a ;; c2a, sa);\n        (c', s') = (c1' ;; c2a, s'a);\n        (c1a, sa) \\<rightarrow>c (c1', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 2. \\<And>c1a sa s'a c2a.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        \\<lbrakk>\\<not> tval tst s; c' = c2; s' = s\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (if tst then c1 else c2, s) = (c1a ;; c2a, sa);\n        (c', s') = (c2a, s'a); (c1a, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi\n 3. \\<And>tsta sa c1a c2a.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        \\<lbrakk>\\<not> tval tst s; c' = c2; s' = s\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (if tst then c1 else c2, s) = (if tsta then c1a else c2a, sa);\n        (c', s') = (c1a, sa); tval tsta sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 4. \\<And>tsta sa c1a c2a.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        \\<lbrakk>\\<not> tval tst s; c' = c2; s' = s\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (if tst then c1 else c2, s) = (if tsta then c1a else c2a, sa);\n        (c', s') = (c2a, sa); \\<not> tval tsta sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 5. \\<And>tsta sa c.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        \\<lbrakk>\\<not> tval tst s; c' = c2; s' = s\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (if tst then c1 else c2, s) = (while tsta do c, sa);\n        (c', s') = (c ;; while tsta do c, sa); tval tsta sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 6. \\<And>c1a sa c1' s'a c2a.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        \\<lbrakk>\\<not> tval tst s; c' = c2; s' = s\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (if tst then c1 else c2, s) = (c1a | c2a, sa);\n        (c', s') = (c1' | c2a, s'a);\n        (c1a, sa) \\<rightarrow>c (c1', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 7. \\<And>c2a sa c2' s'a c1a.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        \\<lbrakk>\\<not> tval tst s; c' = c2; s' = s\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (if tst then c1 else c2, s) = (c1a | c2a, sa);\n        (c', s') = (c1a | c2', s'a);\n        (c2a, sa) \\<rightarrow>c (c2', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 8. \\<And>c1a sa s'a c2a.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        \\<lbrakk>\\<not> tval tst s; c' = c2; s' = s\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (if tst then c1 else c2, s) = (c1a | c2a, sa);\n        (c', s') = (c2a, s'a); (c1a, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi\n 9. \\<And>c2a sa s'a c1a.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1; s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        \\<lbrakk>\\<not> tval tst s; c' = c2; s' = s\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (if tst then c1 else c2, s) = (c1a | c2a, sa);\n        (c', s') = (c1a, s'a); (c2a, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi", "by auto"], ["", "lemma If_transT_simp[simp]:\n\"~ (If b c1 c2, s) \\<rightarrow>t s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (if b then c1 else c2, s) \\<rightarrow>t s'", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if b then c1 else c2, s) \\<rightarrow>t s' \\<Longrightarrow> False", "apply(erule transT.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>atm sa.\n       \\<lbrakk>(if b then c1 else c2, s) = (Atm atm, sa);\n        s' = aval atm sa\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>tst sa c.\n       \\<lbrakk>(if b then c1 else c2, s) = (while tst do c, sa); s' = sa;\n        \\<not> tval tst sa\\<rbrakk>\n       \\<Longrightarrow> False", "by auto"], ["", "lemma If_transT_invert[elim!]:\nassumes \"(If b c1 c2, s) \\<rightarrow>t s'\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using assms"], ["proof (prove)\nusing this:\n  (if b then c1 else c2, s) \\<rightarrow>t s'\n\ngoal (1 subgoal):\n 1. phi", "by simp"], ["", "lemma While_transC_invert[elim]:\nassumes \"(While tst c1, s) \\<rightarrow>c (c', s')\"\nand \"\\<lbrakk>tval tst s; c' = c1 ;; (While tst c1); s' = s\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using assms"], ["proof (prove)\nusing this:\n  (while tst do c1, s) \\<rightarrow>c (c', s')\n  \\<lbrakk>tval tst s; c' = c1 ;; while tst do c1; s' = s\\<rbrakk>\n  \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(while tst do c1, s) \\<rightarrow>c (c', s');\n     \\<lbrakk>tval tst s; c' = c1 ;; while tst do c1; s' = s\\<rbrakk>\n     \\<Longrightarrow> phi\\<rbrakk>\n    \\<Longrightarrow> phi", "apply(erule transC.cases)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>c1a sa c1' s'a c2.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1 ;; while tst do c1;\n                 s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        (while tst do c1, s) = (c1a ;; c2, sa); (c', s') = (c1' ;; c2, s'a);\n        (c1a, sa) \\<rightarrow>c (c1', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 2. \\<And>c1a sa s'a c2.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1 ;; while tst do c1;\n                 s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        (while tst do c1, s) = (c1a ;; c2, sa); (c', s') = (c2, s'a);\n        (c1a, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi\n 3. \\<And>tsta sa c1a c2.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1 ;; while tst do c1;\n                 s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        (while tst do c1, s) = (if tsta then c1a else c2, sa);\n        (c', s') = (c1a, sa); tval tsta sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 4. \\<And>tsta sa c1a c2.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1 ;; while tst do c1;\n                 s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        (while tst do c1, s) = (if tsta then c1a else c2, sa);\n        (c', s') = (c2, sa); \\<not> tval tsta sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 5. \\<And>tsta sa c.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1 ;; while tst do c1;\n                 s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        (while tst do c1, s) = (while tsta do c, sa);\n        (c', s') = (c ;; while tsta do c, sa); tval tsta sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 6. \\<And>c1a sa c1' s'a c2.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1 ;; while tst do c1;\n                 s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        (while tst do c1, s) = (c1a | c2, sa); (c', s') = (c1' | c2, s'a);\n        (c1a, sa) \\<rightarrow>c (c1', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 7. \\<And>c2 sa c2' s'a c1a.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1 ;; while tst do c1;\n                 s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        (while tst do c1, s) = (c1a | c2, sa); (c', s') = (c1a | c2', s'a);\n        (c2, sa) \\<rightarrow>c (c2', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 8. \\<And>c1a sa s'a c2.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1 ;; while tst do c1;\n                 s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        (while tst do c1, s) = (c1a | c2, sa); (c', s') = (c2, s'a);\n        (c1a, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi\n 9. \\<And>c2 sa s'a c1a.\n       \\<lbrakk>\\<lbrakk>tval tst s; c' = c1 ;; while tst do c1;\n                 s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        (while tst do c1, s) = (c1a | c2, sa); (c', s') = (c1a, s'a);\n        (c2, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi", "by auto"], ["", "lemma While_transT_invert[elim!]:\nassumes \"(While tst c1, s) \\<rightarrow>t s'\"\nand \"\\<lbrakk>~ tval tst s; s' = s\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using assms"], ["proof (prove)\nusing this:\n  (while tst do c1, s) \\<rightarrow>t s'\n  \\<lbrakk>\\<not> tval tst s; s' = s\\<rbrakk> \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(while tst do c1, s) \\<rightarrow>t s';\n     \\<lbrakk>\\<not> tval tst s; s' = s\\<rbrakk>\n     \\<Longrightarrow> phi\\<rbrakk>\n    \\<Longrightarrow> phi", "apply(erule transT.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>atm sa.\n       \\<lbrakk>\\<lbrakk>\\<not> tval tst s; s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        (while tst do c1, s) = (Atm atm, sa); s' = aval atm sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 2. \\<And>tsta sa c.\n       \\<lbrakk>\\<lbrakk>\\<not> tval tst s; s' = s\\<rbrakk>\n                \\<Longrightarrow> phi;\n        (while tst do c1, s) = (while tsta do c, sa); s' = sa;\n        \\<not> tval tsta sa\\<rbrakk>\n       \\<Longrightarrow> phi", "by blast+"], ["", "lemma Par_transC_invert[elim!]:\nassumes \"(Par c1 c2, s) \\<rightarrow>c (c', s')\"\nand \"\\<And> c1'. \\<lbrakk>(c1, s) \\<rightarrow>c (c1',s'); c' = Par c1' c2\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<And> c2'. \\<lbrakk>(c2, s) \\<rightarrow>c (c2',s'); c' = Par c1 c2'\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using assms"], ["proof (prove)\nusing this:\n  (c1 | c2, s) \\<rightarrow>c (c', s')\n  \\<lbrakk>(c1, s) \\<rightarrow>c (?c1', s'); c' = ?c1' | c2\\<rbrakk>\n  \\<Longrightarrow> phi\n  \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk> \\<Longrightarrow> phi\n  \\<lbrakk>(c2, s) \\<rightarrow>c (?c2', s'); c' = c1 | ?c2'\\<rbrakk>\n  \\<Longrightarrow> phi\n  \\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk> \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c1 | c2, s) \\<rightarrow>c (c', s');\n     \\<And>c1'.\n        \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s'); c' = c1' | c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n     \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n     \\<Longrightarrow> phi;\n     \\<And>c2'.\n        \\<lbrakk>(c2, s) \\<rightarrow>c (c2', s'); c' = c1 | c2'\\<rbrakk>\n        \\<Longrightarrow> phi;\n     \\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk>\n     \\<Longrightarrow> phi\\<rbrakk>\n    \\<Longrightarrow> phi", "apply(erule transC.cases)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>c1a sa c1' s'a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' | c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        \\<And>c2'.\n           \\<lbrakk>(c2, s) \\<rightarrow>c (c2', s'); c' = c1 | c2'\\<rbrakk>\n           \\<Longrightarrow> phi;\n        \\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 | c2, s) = (c1a ;; c2a, sa); (c', s') = (c1' ;; c2a, s'a);\n        (c1a, sa) \\<rightarrow>c (c1', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 2. \\<And>c1a sa s'a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' | c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        \\<And>c2'.\n           \\<lbrakk>(c2, s) \\<rightarrow>c (c2', s'); c' = c1 | c2'\\<rbrakk>\n           \\<Longrightarrow> phi;\n        \\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 | c2, s) = (c1a ;; c2a, sa); (c', s') = (c2a, s'a);\n        (c1a, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi\n 3. \\<And>tst sa c1a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' | c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        \\<And>c2'.\n           \\<lbrakk>(c2, s) \\<rightarrow>c (c2', s'); c' = c1 | c2'\\<rbrakk>\n           \\<Longrightarrow> phi;\n        \\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 | c2, s) = (if tst then c1a else c2a, sa); (c', s') = (c1a, sa);\n        tval tst sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 4. \\<And>tst sa c1a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' | c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        \\<And>c2'.\n           \\<lbrakk>(c2, s) \\<rightarrow>c (c2', s'); c' = c1 | c2'\\<rbrakk>\n           \\<Longrightarrow> phi;\n        \\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 | c2, s) = (if tst then c1a else c2a, sa); (c', s') = (c2a, sa);\n        \\<not> tval tst sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 5. \\<And>tst sa c.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' | c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        \\<And>c2'.\n           \\<lbrakk>(c2, s) \\<rightarrow>c (c2', s'); c' = c1 | c2'\\<rbrakk>\n           \\<Longrightarrow> phi;\n        \\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 | c2, s) = (while tst do c, sa);\n        (c', s') = (c ;; while tst do c, sa); tval tst sa\\<rbrakk>\n       \\<Longrightarrow> phi\n 6. \\<And>c1a sa c1' s'a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' | c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        \\<And>c2'.\n           \\<lbrakk>(c2, s) \\<rightarrow>c (c2', s'); c' = c1 | c2'\\<rbrakk>\n           \\<Longrightarrow> phi;\n        \\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 | c2, s) = (c1a | c2a, sa); (c', s') = (c1' | c2a, s'a);\n        (c1a, sa) \\<rightarrow>c (c1', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 7. \\<And>c2a sa c2' s'a c1a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' | c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        \\<And>c2'.\n           \\<lbrakk>(c2, s) \\<rightarrow>c (c2', s'); c' = c1 | c2'\\<rbrakk>\n           \\<Longrightarrow> phi;\n        \\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 | c2, s) = (c1a | c2a, sa); (c', s') = (c1a | c2', s'a);\n        (c2a, sa) \\<rightarrow>c (c2', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 8. \\<And>c1a sa s'a c2a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' | c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        \\<And>c2'.\n           \\<lbrakk>(c2, s) \\<rightarrow>c (c2', s'); c' = c1 | c2'\\<rbrakk>\n           \\<Longrightarrow> phi;\n        \\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 | c2, s) = (c1a | c2a, sa); (c', s') = (c2a, s'a);\n        (c1a, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi\n 9. \\<And>c2a sa s'a c1a.\n       \\<lbrakk>\\<And>c1'.\n                   \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n                    c' = c1' | c2\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        \\<lbrakk>(c1, s) \\<rightarrow>t s'; c' = c2\\<rbrakk>\n        \\<Longrightarrow> phi;\n        \\<And>c2'.\n           \\<lbrakk>(c2, s) \\<rightarrow>c (c2', s'); c' = c1 | c2'\\<rbrakk>\n           \\<Longrightarrow> phi;\n        \\<lbrakk>(c2, s) \\<rightarrow>t s'; c' = c1\\<rbrakk>\n        \\<Longrightarrow> phi;\n        (c1 | c2, s) = (c1a | c2a, sa); (c', s') = (c1a, s'a);\n        (c2a, sa) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi", "by auto"], ["", "lemma Par_transT_simp[simp]:\n\"~ (Par c1 c2, s) \\<rightarrow>t s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (c1 | c2, s) \\<rightarrow>t s'", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1 | c2, s) \\<rightarrow>t s' \\<Longrightarrow> False", "apply(erule transT.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>atm sa.\n       \\<lbrakk>(c1 | c2, s) = (Atm atm, sa); s' = aval atm sa\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>tst sa c.\n       \\<lbrakk>(c1 | c2, s) = (while tst do c, sa); s' = sa;\n        \\<not> tval tst sa\\<rbrakk>\n       \\<Longrightarrow> False", "by auto"], ["", "lemma Par_transT_invert[elim!]:\nassumes \"(Par c1 c2, s) \\<rightarrow>t s'\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using assms"], ["proof (prove)\nusing this:\n  (c1 | c2, s) \\<rightarrow>t s'\n\ngoal (1 subgoal):\n 1. phi", "by simp"], ["", "lemma trans_nchotomy:\n\"(\\<exists> c' s'. (c,s) \\<rightarrow>c (c',s')) \\<or> \n (\\<exists> s'. (c,s) \\<rightarrow>t s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. (c, s) \\<rightarrow>c (c', s')) \\<or>\n    (\\<exists>s'. (c, s) \\<rightarrow>t s')", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. (c, s) \\<rightarrow>c (c', s')) \\<or>\n    (\\<exists>s'. (c, s) \\<rightarrow>t s')", "let ?phiC = \"\\<lambda>c. \\<exists> c' s'. (c,s) \\<rightarrow>c (c',s')\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. (c, s) \\<rightarrow>c (c', s')) \\<or>\n    (\\<exists>s'. (c, s) \\<rightarrow>t s')", "let ?phiT = \"\\<lambda>c. \\<exists> s'. (c,s) \\<rightarrow>t s'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. (c, s) \\<rightarrow>c (c', s')) \\<or>\n    (\\<exists>s'. (c, s) \\<rightarrow>t s')", "let ?phi = \"\\<lambda>c. ?phiC c \\<or> ?phiT c\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. (c, s) \\<rightarrow>c (c', s')) \\<or>\n    (\\<exists>s'. (c, s) \\<rightarrow>t s')", "show \"?phi c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. (c, s) \\<rightarrow>c (c', s')) \\<or>\n    (\\<exists>s'. (c, s) \\<rightarrow>t s')", "apply(induct c)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       (\\<exists>c' s'. (Atm x, s) \\<rightarrow>c (c', s')) \\<or>\n       (\\<exists>s'. (Atm x, s) \\<rightarrow>t s')\n 2. \\<And>c1 c2.\n       \\<lbrakk>(\\<exists>c' s'. (c1, s) \\<rightarrow>c (c', s')) \\<or>\n                (\\<exists>s'. (c1, s) \\<rightarrow>t s');\n        (\\<exists>c' s'. (c2, s) \\<rightarrow>c (c', s')) \\<or>\n        (\\<exists>s'. (c2, s) \\<rightarrow>t s')\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c' s'.\n                             (c1 ;; c2, s) \\<rightarrow>c (c', s')) \\<or>\n                         (\\<exists>s'. (c1 ;; c2, s) \\<rightarrow>t s')\n 3. \\<And>x1a c1 c2.\n       \\<lbrakk>(\\<exists>c' s'. (c1, s) \\<rightarrow>c (c', s')) \\<or>\n                (\\<exists>s'. (c1, s) \\<rightarrow>t s');\n        (\\<exists>c' s'. (c2, s) \\<rightarrow>c (c', s')) \\<or>\n        (\\<exists>s'. (c2, s) \\<rightarrow>t s')\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c' s'.\n                             (if x1a then c1 else c2, s) \\<rightarrow>c\n                             (c', s')) \\<or>\n                         (\\<exists>s'.\n                             (if x1a then c1 else c2, s) \\<rightarrow>t s')\n 4. \\<And>x1a c.\n       (\\<exists>c' s'. (c, s) \\<rightarrow>c (c', s')) \\<or>\n       (\\<exists>s'. (c, s) \\<rightarrow>t s') \\<Longrightarrow>\n       (\\<exists>c' s'. (while x1a do c, s) \\<rightarrow>c (c', s')) \\<or>\n       (\\<exists>s'. (while x1a do c, s) \\<rightarrow>t s')\n 5. \\<And>c1 c2.\n       \\<lbrakk>(\\<exists>c' s'. (c1, s) \\<rightarrow>c (c', s')) \\<or>\n                (\\<exists>s'. (c1, s) \\<rightarrow>t s');\n        (\\<exists>c' s'. (c2, s) \\<rightarrow>c (c', s')) \\<or>\n        (\\<exists>s'. (c2, s) \\<rightarrow>t s')\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c' s'.\n                             (c1 | c2, s) \\<rightarrow>c (c', s')) \\<or>\n                         (\\<exists>s'. (c1 | c2, s) \\<rightarrow>t s')", "by(metis Atm, metis SeqC SeqT, metis IfFalse IfTrue, \n  metis WhileFalse WhileTrue, \n  metis ParCL ParCR ParTL ParTR)"], ["proof (state)\nthis:\n  (\\<exists>c' s'. (c, s) \\<rightarrow>c (c', s')) \\<or>\n  (\\<exists>s'. (c, s) \\<rightarrow>t s')\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary trans_invert:\nassumes \n\"\\<And> c' s'. (c,s) \\<rightarrow>c (c',s') \\<Longrightarrow> phi\"\nand \"\\<And> s'. (c,s) \\<rightarrow>t s' \\<Longrightarrow> phi\" \nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using assms trans_nchotomy"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>c (?c', ?s') \\<Longrightarrow> phi\n  (c, s) \\<rightarrow>t ?s' \\<Longrightarrow> phi\n  (\\<exists>c' s'. (?c, ?s) \\<rightarrow>c (c', s')) \\<or>\n  (\\<exists>s'. (?c, ?s) \\<rightarrow>t s')\n\ngoal (1 subgoal):\n 1. phi", "by blast"], ["", "lemma not_transC_transT:\n\"\\<lbrakk>cf \\<rightarrow>c cf'; cf \\<rightarrow>t s'\\<rbrakk> \\<Longrightarrow> phi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cf \\<rightarrow>c cf'; cf \\<rightarrow>t s'\\<rbrakk>\n    \\<Longrightarrow> phi", "apply(erule transC.cases)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>c1 s c1' s'a c2.\n       \\<lbrakk>cf \\<rightarrow>t s'; cf = (c1 ;; c2, s);\n        cf' = (c1' ;; c2, s'a); (c1, s) \\<rightarrow>c (c1', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 2. \\<And>c1 s s'a c2.\n       \\<lbrakk>cf \\<rightarrow>t s'; cf = (c1 ;; c2, s); cf' = (c2, s'a);\n        (c1, s) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi\n 3. \\<And>tst s c1 c2.\n       \\<lbrakk>cf \\<rightarrow>t s'; cf = (if tst then c1 else c2, s);\n        cf' = (c1, s); tval tst s\\<rbrakk>\n       \\<Longrightarrow> phi\n 4. \\<And>tst s c1 c2.\n       \\<lbrakk>cf \\<rightarrow>t s'; cf = (if tst then c1 else c2, s);\n        cf' = (c2, s); \\<not> tval tst s\\<rbrakk>\n       \\<Longrightarrow> phi\n 5. \\<And>tst s c.\n       \\<lbrakk>cf \\<rightarrow>t s'; cf = (while tst do c, s);\n        cf' = (c ;; while tst do c, s); tval tst s\\<rbrakk>\n       \\<Longrightarrow> phi\n 6. \\<And>c1 s c1' s'a c2.\n       \\<lbrakk>cf \\<rightarrow>t s'; cf = (c1 | c2, s);\n        cf' = (c1' | c2, s'a); (c1, s) \\<rightarrow>c (c1', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 7. \\<And>c2 s c2' s'a c1.\n       \\<lbrakk>cf \\<rightarrow>t s'; cf = (c1 | c2, s);\n        cf' = (c1 | c2', s'a); (c2, s) \\<rightarrow>c (c2', s'a)\\<rbrakk>\n       \\<Longrightarrow> phi\n 8. \\<And>c1 s s'a c2.\n       \\<lbrakk>cf \\<rightarrow>t s'; cf = (c1 | c2, s); cf' = (c2, s'a);\n        (c1, s) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi\n 9. \\<And>c2 s s'a c1.\n       \\<lbrakk>cf \\<rightarrow>t s'; cf = (c1 | c2, s); cf' = (c1, s'a);\n        (c2, s) \\<rightarrow>t s'a\\<rbrakk>\n       \\<Longrightarrow> phi", "by auto"], ["", "lemmas MtransT_invert = MtransT.cases"], ["", "lemma MtransT_invert2:\nassumes \"(c, s) \\<rightarrow>*t s''\"\nand \"\\<And> c' s'. \\<lbrakk>(c,s) \\<rightarrow>*c (c',s'); (c', s') \\<rightarrow>t s''\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using assms"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>*t s''\n  \\<lbrakk>(c, s) \\<rightarrow>*c (?c', ?s');\n   (?c', ?s') \\<rightarrow>t s''\\<rbrakk>\n  \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c, s) \\<rightarrow>*t s'';\n     \\<And>c' s'.\n        \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n         (c', s') \\<rightarrow>t s''\\<rbrakk>\n        \\<Longrightarrow> phi\\<rbrakk>\n    \\<Longrightarrow> phi", "apply(erule MtransT.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cf cf' s''a.\n       \\<lbrakk>\\<And>c' s'.\n                   \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n                    (c', s') \\<rightarrow>t s''\\<rbrakk>\n                   \\<Longrightarrow> phi;\n        (c, s) = cf; s'' = s''a; cf \\<rightarrow>*c cf';\n        cf' \\<rightarrow>t s''a\\<rbrakk>\n       \\<Longrightarrow> phi", "by auto"], ["", "lemma Seq_MtransC_invert[elim!]:\nassumes \"(c1 ;; c2, s) \\<rightarrow>*c (d', t')\"\nand \"\\<And> c1'. \\<lbrakk>(c1, s) \\<rightarrow>*c (c1',t'); d' = c1' ;; c2\\<rbrakk> \\<Longrightarrow> phi\"\nand \"\\<And> s'. \\<lbrakk>(c1, s) \\<rightarrow>*t s'; (c2, s') \\<rightarrow>*c (d',t')\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. phi", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. phi", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. phi", "have \"(c,s) \\<rightarrow>*c (d',t') \\<Longrightarrow> \n   \\<forall> c1 c2. \n     c = c1 ;; c2 \\<longrightarrow>  \n     (\\<exists> c1'. (c1, s) \\<rightarrow>*c (c1',t') \\<and> d' = c1' ;; c2) \\<or> \n     (\\<exists> s'. (c1, s) \\<rightarrow>*t s' \\<and> (c2, s') \\<rightarrow>*c (d',t'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, s) \\<rightarrow>*c (d', t') \\<Longrightarrow>\n    \\<forall>c1 c2.\n       c = c1 ;; c2 \\<longrightarrow>\n       (\\<exists>c1'.\n           (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or>\n       (\\<exists>s'.\n           (c1, s) \\<rightarrow>*t s' \\<and>\n           (c2, s') \\<rightarrow>*c (d', t'))", "apply(erule MtransC_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c s.\n       \\<forall>c1 c2.\n          c = c1 ;; c2 \\<longrightarrow>\n          (\\<exists>c1'.\n              (c1, s) \\<rightarrow>*c (c1', s) \\<and> c = c1' ;; c2) \\<or>\n          (\\<exists>s'.\n              (c1, s) \\<rightarrow>*t s' \\<and>\n              (c2, s') \\<rightarrow>*c (c, s))\n 2. \\<And>c s c' s' c'' s''.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        \\<forall>c1 c2.\n           c = c1 ;; c2 \\<longrightarrow>\n           (\\<exists>c1'.\n               (c1, s) \\<rightarrow>*c (c1', s') \\<and>\n               c' = c1' ;; c2) \\<or>\n           (\\<exists>s'a.\n               (c1, s) \\<rightarrow>*t s'a \\<and>\n               (c2, s'a) \\<rightarrow>*c (c', s'));\n        (c', s') \\<rightarrow>c (c'', s'')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>c1 c2.\n                            c = c1 ;; c2 \\<longrightarrow>\n                            (\\<exists>c1'.\n                                (c1, s) \\<rightarrow>*c (c1', s'') \\<and>\n                                c'' = c1' ;; c2) \\<or>\n                            (\\<exists>s'.\n                                (c1, s) \\<rightarrow>*t s' \\<and>\n                                (c2, s') \\<rightarrow>*c (c'', s''))", "proof(tactic \\<open>mauto_no_simp_tac @{context}\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c s c1 c2.\n       c = c1 ;; c2 \\<Longrightarrow>\n       (\\<exists>c1'.\n           (c1, s) \\<rightarrow>*c (c1', s) \\<and> c = c1' ;; c2) \\<or>\n       (\\<exists>s'.\n           (c1, s) \\<rightarrow>*t s' \\<and>\n           (c2, s') \\<rightarrow>*c (c, s))\n 2. \\<And>c s c' s' c'' s'' c1 c2.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        \\<forall>c1 c2.\n           c = c1 ;; c2 \\<longrightarrow>\n           (\\<exists>c1'.\n               (c1, s) \\<rightarrow>*c (c1', s') \\<and>\n               c' = c1' ;; c2) \\<or>\n           (\\<exists>s'a.\n               (c1, s) \\<rightarrow>*t s'a \\<and>\n               (c2, s'a) \\<rightarrow>*c (c', s'));\n        (c', s') \\<rightarrow>c (c'', s''); c = c1 ;; c2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c1'.\n                             (c1, s) \\<rightarrow>*c (c1', s'') \\<and>\n                             c'' = c1' ;; c2) \\<or>\n                         (\\<exists>s'.\n                             (c1, s) \\<rightarrow>*t s' \\<and>\n                             (c2, s') \\<rightarrow>*c (c'', s''))", "fix c s d' t' d'' t'' c1 c2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c s c1 c2.\n       c = c1 ;; c2 \\<Longrightarrow>\n       (\\<exists>c1'.\n           (c1, s) \\<rightarrow>*c (c1', s) \\<and> c = c1' ;; c2) \\<or>\n       (\\<exists>s'.\n           (c1, s) \\<rightarrow>*t s' \\<and>\n           (c2, s') \\<rightarrow>*c (c, s))\n 2. \\<And>c s c' s' c'' s'' c1 c2.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        \\<forall>c1 c2.\n           c = c1 ;; c2 \\<longrightarrow>\n           (\\<exists>c1'.\n               (c1, s) \\<rightarrow>*c (c1', s') \\<and>\n               c' = c1' ;; c2) \\<or>\n           (\\<exists>s'a.\n               (c1, s) \\<rightarrow>*t s'a \\<and>\n               (c2, s'a) \\<rightarrow>*c (c', s'));\n        (c', s') \\<rightarrow>c (c'', s''); c = c1 ;; c2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c1'.\n                             (c1, s) \\<rightarrow>*c (c1', s'') \\<and>\n                             c'' = c1' ;; c2) \\<or>\n                         (\\<exists>s'.\n                             (c1, s) \\<rightarrow>*t s' \\<and>\n                             (c2, s') \\<rightarrow>*c (c'', s''))", "assume (*  \"(c, s) \\<rightarrow>*c (d', t')\" and *)\n     \"\\<forall>c1 c2. c = c1 ;; c2 \\<longrightarrow> \n        (\\<exists>c1'. (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or> \n        (\\<exists>s'. (c1, s) \\<rightarrow>*t s' \\<and> (c2, s') \\<rightarrow>*c (d', t'))\"\n     and 1: \"(d', t') \\<rightarrow>c (d'', t'')\" and \"c = c1 ;; c2\""], ["proof (state)\nthis:\n  \\<forall>c1 c2.\n     c = c1 ;; c2 \\<longrightarrow>\n     (\\<exists>c1'.\n         (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or>\n     (\\<exists>s'.\n         (c1, s) \\<rightarrow>*t s' \\<and>\n         (c2, s') \\<rightarrow>*c (d', t'))\n  (d', t') \\<rightarrow>c (d'', t'')\n  c = c1 ;; c2\n\ngoal (2 subgoals):\n 1. \\<And>c s c1 c2.\n       c = c1 ;; c2 \\<Longrightarrow>\n       (\\<exists>c1'.\n           (c1, s) \\<rightarrow>*c (c1', s) \\<and> c = c1' ;; c2) \\<or>\n       (\\<exists>s'.\n           (c1, s) \\<rightarrow>*t s' \\<and>\n           (c2, s') \\<rightarrow>*c (c, s))\n 2. \\<And>c s c' s' c'' s'' c1 c2.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        \\<forall>c1 c2.\n           c = c1 ;; c2 \\<longrightarrow>\n           (\\<exists>c1'.\n               (c1, s) \\<rightarrow>*c (c1', s') \\<and>\n               c' = c1' ;; c2) \\<or>\n           (\\<exists>s'a.\n               (c1, s) \\<rightarrow>*t s'a \\<and>\n               (c2, s'a) \\<rightarrow>*c (c', s'));\n        (c', s') \\<rightarrow>c (c'', s''); c = c1 ;; c2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c1'.\n                             (c1, s) \\<rightarrow>*c (c1', s'') \\<and>\n                             c'' = c1' ;; c2) \\<or>\n                         (\\<exists>s'.\n                             (c1, s) \\<rightarrow>*t s' \\<and>\n                             (c2, s') \\<rightarrow>*c (c'', s''))", "hence IH: \n     \"(\\<exists>c1'. (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or> \n      (\\<exists>s'. (c1, s) \\<rightarrow>*t s' \\<and> (c2, s') \\<rightarrow>*c (d', t'))\""], ["proof (prove)\nusing this:\n  \\<forall>c1 c2.\n     c = c1 ;; c2 \\<longrightarrow>\n     (\\<exists>c1'.\n         (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or>\n     (\\<exists>s'.\n         (c1, s) \\<rightarrow>*t s' \\<and>\n         (c2, s') \\<rightarrow>*c (d', t'))\n  (d', t') \\<rightarrow>c (d'', t'')\n  c = c1 ;; c2\n\ngoal (1 subgoal):\n 1. (\\<exists>c1'.\n        (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or>\n    (\\<exists>s'.\n        (c1, s) \\<rightarrow>*t s' \\<and> (c2, s') \\<rightarrow>*c (d', t'))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>c1'.\n      (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or>\n  (\\<exists>s'.\n      (c1, s) \\<rightarrow>*t s' \\<and> (c2, s') \\<rightarrow>*c (d', t'))\n\ngoal (2 subgoals):\n 1. \\<And>c s c1 c2.\n       c = c1 ;; c2 \\<Longrightarrow>\n       (\\<exists>c1'.\n           (c1, s) \\<rightarrow>*c (c1', s) \\<and> c = c1' ;; c2) \\<or>\n       (\\<exists>s'.\n           (c1, s) \\<rightarrow>*t s' \\<and>\n           (c2, s') \\<rightarrow>*c (c, s))\n 2. \\<And>c s c' s' c'' s'' c1 c2.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        \\<forall>c1 c2.\n           c = c1 ;; c2 \\<longrightarrow>\n           (\\<exists>c1'.\n               (c1, s) \\<rightarrow>*c (c1', s') \\<and>\n               c' = c1' ;; c2) \\<or>\n           (\\<exists>s'a.\n               (c1, s) \\<rightarrow>*t s'a \\<and>\n               (c2, s'a) \\<rightarrow>*c (c', s'));\n        (c', s') \\<rightarrow>c (c'', s''); c = c1 ;; c2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c1'.\n                             (c1, s) \\<rightarrow>*c (c1', s'') \\<and>\n                             c'' = c1' ;; c2) \\<or>\n                         (\\<exists>s'.\n                             (c1, s) \\<rightarrow>*t s' \\<and>\n                             (c2, s') \\<rightarrow>*c (c'', s''))", "show \"(\\<exists>c1''. (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or> \n           (\\<exists>s''. (c1, s) \\<rightarrow>*t s'' \\<and> (c2, s'') \\<rightarrow>*c (d'', t''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "fix c1'"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "assume 2: \"(c1, s) \\<rightarrow>*c (c1', t')\" and d': \"d' = c1' ;; c2\""], ["proof (state)\nthis:\n  (c1, s) \\<rightarrow>*c (c1', t')\n  d' = c1' ;; c2\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "using 1"], ["proof (prove)\nusing this:\n  (d', t') \\<rightarrow>c (d'', t'')\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "unfolding d'"], ["proof (prove)\nusing this:\n  (c1' ;; c2, t') \\<rightarrow>c (d'', t'')\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1' ;; c2, t') \\<rightarrow>c (d'', t'') \\<Longrightarrow>\n    (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "proof(erule Seq_transC_invert)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c1'a.\n       \\<lbrakk>(c1', t') \\<rightarrow>c (c1'a, t'');\n        d'' = c1'a ;; c2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c1''.\n                             (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                             d'' = c1'' ;; c2) \\<or>\n                         (\\<exists>s''.\n                             (c1, s) \\<rightarrow>*t s'' \\<and>\n                             (c2, s'') \\<rightarrow>*c (d'', t''))\n 2. \\<lbrakk>(c1', t') \\<rightarrow>t t''; d'' = c2\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>c1''.\n                          (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                          d'' = c1'' ;; c2) \\<or>\n                      (\\<exists>s''.\n                          (c1, s) \\<rightarrow>*t s'' \\<and>\n                          (c2, s'') \\<rightarrow>*c (d'', t''))", "fix c1''"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c1'a.\n       \\<lbrakk>(c1', t') \\<rightarrow>c (c1'a, t'');\n        d'' = c1'a ;; c2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c1''.\n                             (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                             d'' = c1'' ;; c2) \\<or>\n                         (\\<exists>s''.\n                             (c1, s) \\<rightarrow>*t s'' \\<and>\n                             (c2, s'') \\<rightarrow>*c (d'', t''))\n 2. \\<lbrakk>(c1', t') \\<rightarrow>t t''; d'' = c2\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>c1''.\n                          (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                          d'' = c1'' ;; c2) \\<or>\n                      (\\<exists>s''.\n                          (c1, s) \\<rightarrow>*t s'' \\<and>\n                          (c2, s'') \\<rightarrow>*c (d'', t''))", "assume \"(c1', t') \\<rightarrow>c (c1'', t'')\" and d'': \"d'' = c1'' ;; c2\""], ["proof (state)\nthis:\n  (c1', t') \\<rightarrow>c (c1'', t'')\n  d'' = c1'' ;; c2\n\ngoal (2 subgoals):\n 1. \\<And>c1'a.\n       \\<lbrakk>(c1', t') \\<rightarrow>c (c1'a, t'');\n        d'' = c1'a ;; c2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c1''.\n                             (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                             d'' = c1'' ;; c2) \\<or>\n                         (\\<exists>s''.\n                             (c1, s) \\<rightarrow>*t s'' \\<and>\n                             (c2, s'') \\<rightarrow>*c (d'', t''))\n 2. \\<lbrakk>(c1', t') \\<rightarrow>t t''; d'' = c2\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>c1''.\n                          (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                          d'' = c1'' ;; c2) \\<or>\n                      (\\<exists>s''.\n                          (c1, s) \\<rightarrow>*t s'' \\<and>\n                          (c2, s'') \\<rightarrow>*c (d'', t''))", "hence \"(c1, s) \\<rightarrow>*c (c1'', t'')\""], ["proof (prove)\nusing this:\n  (c1', t') \\<rightarrow>c (c1'', t'')\n  d'' = c1'' ;; c2\n\ngoal (1 subgoal):\n 1. (c1, s) \\<rightarrow>*c (c1'', t'')", "using 2 MtransC_StepC"], ["proof (prove)\nusing this:\n  (c1', t') \\<rightarrow>c (c1'', t'')\n  d'' = c1'' ;; c2\n  (c1, s) \\<rightarrow>*c (c1', t')\n  \\<lbrakk>?cf \\<rightarrow>*c ?cf'; ?cf' \\<rightarrow>c ?cf''\\<rbrakk>\n  \\<Longrightarrow> ?cf \\<rightarrow>*c ?cf''\n\ngoal (1 subgoal):\n 1. (c1, s) \\<rightarrow>*c (c1'', t'')", "by blast"], ["proof (state)\nthis:\n  (c1, s) \\<rightarrow>*c (c1'', t'')\n\ngoal (2 subgoals):\n 1. \\<And>c1'a.\n       \\<lbrakk>(c1', t') \\<rightarrow>c (c1'a, t'');\n        d'' = c1'a ;; c2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c1''.\n                             (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                             d'' = c1'' ;; c2) \\<or>\n                         (\\<exists>s''.\n                             (c1, s) \\<rightarrow>*t s'' \\<and>\n                             (c2, s'') \\<rightarrow>*c (d'', t''))\n 2. \\<lbrakk>(c1', t') \\<rightarrow>t t''; d'' = c2\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>c1''.\n                          (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                          d'' = c1'' ;; c2) \\<or>\n                      (\\<exists>s''.\n                          (c1, s) \\<rightarrow>*t s'' \\<and>\n                          (c2, s'') \\<rightarrow>*c (d'', t''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*c (c1'', t'')\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "using d''"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*c (c1'', t'')\n  d'' = c1'' ;; c2\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>c1''.\n      (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n  (\\<exists>s''.\n      (c1, s) \\<rightarrow>*t s'' \\<and>\n      (c2, s'') \\<rightarrow>*c (d'', t''))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(c1', t') \\<rightarrow>t t''; d'' = c2\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>c1''.\n                          (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                          d'' = c1'' ;; c2) \\<or>\n                      (\\<exists>s''.\n                          (c1, s) \\<rightarrow>*t s'' \\<and>\n                          (c2, s'') \\<rightarrow>*c (d'', t''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c1', t') \\<rightarrow>t t''; d'' = c2\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>c1''.\n                          (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                          d'' = c1'' ;; c2) \\<or>\n                      (\\<exists>s''.\n                          (c1, s) \\<rightarrow>*t s'' \\<and>\n                          (c2, s'') \\<rightarrow>*c (d'', t''))", "assume \"(c1', t') \\<rightarrow>t t''\" and d'': \"d'' = c2\""], ["proof (state)\nthis:\n  (c1', t') \\<rightarrow>t t''\n  d'' = c2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(c1', t') \\<rightarrow>t t''; d'' = c2\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>c1''.\n                          (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                          d'' = c1'' ;; c2) \\<or>\n                      (\\<exists>s''.\n                          (c1, s) \\<rightarrow>*t s'' \\<and>\n                          (c2, s'') \\<rightarrow>*c (d'', t''))", "hence \"(c1, s) \\<rightarrow>*t t''\""], ["proof (prove)\nusing this:\n  (c1', t') \\<rightarrow>t t''\n  d'' = c2\n\ngoal (1 subgoal):\n 1. (c1, s) \\<rightarrow>*t t''", "using 2 MtransT.StepT"], ["proof (prove)\nusing this:\n  (c1', t') \\<rightarrow>t t''\n  d'' = c2\n  (c1, s) \\<rightarrow>*c (c1', t')\n  \\<lbrakk>?cf \\<rightarrow>*c ?cf'; ?cf' \\<rightarrow>t ?s''\\<rbrakk>\n  \\<Longrightarrow> ?cf \\<rightarrow>*t ?s''\n\ngoal (1 subgoal):\n 1. (c1, s) \\<rightarrow>*t t''", "by blast"], ["proof (state)\nthis:\n  (c1, s) \\<rightarrow>*t t''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(c1', t') \\<rightarrow>t t''; d'' = c2\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>c1''.\n                          (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                          d'' = c1'' ;; c2) \\<or>\n                      (\\<exists>s''.\n                          (c1, s) \\<rightarrow>*t s'' \\<and>\n                          (c2, s'') \\<rightarrow>*c (d'', t''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*t t''\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "unfolding d''"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*t t''\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> c2 = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (c2, t''))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>c1''.\n      (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n  (\\<exists>s''.\n      (c1, s) \\<rightarrow>*t s'' \\<and>\n      (c2, s'') \\<rightarrow>*c (d'', t''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>c1''.\n      (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n  (\\<exists>s''.\n      (c1, s) \\<rightarrow>*t s'' \\<and>\n      (c2, s'') \\<rightarrow>*c (d'', t''))\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(c1, s) \\<rightarrow>*c (?c1'2, t'); d' = ?c1'2 ;; c2\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>c1''.\n                        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                        d'' = c1'' ;; c2) \\<or>\n                    (\\<exists>s''.\n                        (c1, s) \\<rightarrow>*t s'' \\<and>\n                        (c2, s'') \\<rightarrow>*c (d'', t''))\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>(c1, s) \\<rightarrow>*c (?c1'2, t'); d' = ?c1'2 ;; c2\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>c1''.\n                        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                        d'' = c1'' ;; c2) \\<or>\n                    (\\<exists>s''.\n                        (c1, s) \\<rightarrow>*t s'' \\<and>\n                        (c2, s'') \\<rightarrow>*c (d'', t''))\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>(c1, s) \\<rightarrow>*c (?c1'2, t'); d' = ?c1'2 ;; c2\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>c1''.\n                        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                        d'' = c1'' ;; c2) \\<or>\n                    (\\<exists>s''.\n                        (c1, s) \\<rightarrow>*t s'' \\<and>\n                        (c2, s'') \\<rightarrow>*c (d'', t''))\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "fix s'"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "assume 2: \"(c1, s) \\<rightarrow>*t s'\" and \"(c2, s') \\<rightarrow>*c (d', t')\""], ["proof (state)\nthis:\n  (c1, s) \\<rightarrow>*t s'\n  (c2, s') \\<rightarrow>*c (d', t')\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "hence \"(c2, s') \\<rightarrow>*c (d'', t'')\""], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*t s'\n  (c2, s') \\<rightarrow>*c (d', t')\n\ngoal (1 subgoal):\n 1. (c2, s') \\<rightarrow>*c (d'', t'')", "using 1 MtransC_StepC"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*t s'\n  (c2, s') \\<rightarrow>*c (d', t')\n  (d', t') \\<rightarrow>c (d'', t'')\n  \\<lbrakk>?cf \\<rightarrow>*c ?cf'; ?cf' \\<rightarrow>c ?cf''\\<rbrakk>\n  \\<Longrightarrow> ?cf \\<rightarrow>*c ?cf''\n\ngoal (1 subgoal):\n 1. (c2, s') \\<rightarrow>*c (d'', t'')", "by blast"], ["proof (state)\nthis:\n  (c2, s') \\<rightarrow>*c (d'', t'')\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "hence ?thesis"], ["proof (prove)\nusing this:\n  (c2, s') \\<rightarrow>*c (d'', t'')\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "using 2"], ["proof (prove)\nusing this:\n  (c2, s') \\<rightarrow>*c (d'', t'')\n  (c1, s) \\<rightarrow>*t s'\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>c1''.\n      (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n  (\\<exists>s''.\n      (c1, s) \\<rightarrow>*t s'' \\<and>\n      (c2, s'') \\<rightarrow>*c (d'', t''))\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(c1, s) \\<rightarrow>*t ?s'2;\n   (c2, ?s'2) \\<rightarrow>*c (d', t')\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>c1''.\n                        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                        d'' = c1'' ;; c2) \\<or>\n                    (\\<exists>s''.\n                        (c1, s) \\<rightarrow>*t s'' \\<and>\n                        (c2, s'') \\<rightarrow>*c (d'', t''))\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>(c1, s) \\<rightarrow>*c (?c1'2, t'); d' = ?c1'2 ;; c2\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>c1''.\n                        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                        d'' = c1'' ;; c2) \\<or>\n                    (\\<exists>s''.\n                        (c1, s) \\<rightarrow>*t s'' \\<and>\n                        (c2, s'') \\<rightarrow>*c (d'', t''))\n  \\<lbrakk>(c1, s) \\<rightarrow>*t ?s'2;\n   (c2, ?s'2) \\<rightarrow>*c (d', t')\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>c1''.\n                        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                        d'' = c1'' ;; c2) \\<or>\n                    (\\<exists>s''.\n                        (c1, s) \\<rightarrow>*t s'' \\<and>\n                        (c2, s'') \\<rightarrow>*c (d'', t''))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>(c1, s) \\<rightarrow>*c (?c1'2, t'); d' = ?c1'2 ;; c2\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>c1''.\n                        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                        d'' = c1'' ;; c2) \\<or>\n                    (\\<exists>s''.\n                        (c1, s) \\<rightarrow>*t s'' \\<and>\n                        (c2, s'') \\<rightarrow>*c (d'', t''))\n  \\<lbrakk>(c1, s) \\<rightarrow>*t ?s'2;\n   (c2, ?s'2) \\<rightarrow>*c (d', t')\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>c1''.\n                        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                        d'' = c1'' ;; c2) \\<or>\n                    (\\<exists>s''.\n                        (c1, s) \\<rightarrow>*t s'' \\<and>\n                        (c2, s'') \\<rightarrow>*c (d'', t''))\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "using IH"], ["proof (prove)\nusing this:\n  \\<lbrakk>(c1, s) \\<rightarrow>*c (?c1'2, t'); d' = ?c1'2 ;; c2\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>c1''.\n                        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                        d'' = c1'' ;; c2) \\<or>\n                    (\\<exists>s''.\n                        (c1, s) \\<rightarrow>*t s'' \\<and>\n                        (c2, s'') \\<rightarrow>*c (d'', t''))\n  \\<lbrakk>(c1, s) \\<rightarrow>*t ?s'2;\n   (c2, ?s'2) \\<rightarrow>*c (d', t')\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>c1''.\n                        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and>\n                        d'' = c1'' ;; c2) \\<or>\n                    (\\<exists>s''.\n                        (c1, s) \\<rightarrow>*t s'' \\<and>\n                        (c2, s'') \\<rightarrow>*c (d'', t''))\n  (\\<exists>c1'.\n      (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or>\n  (\\<exists>s'.\n      (c1, s) \\<rightarrow>*t s' \\<and> (c2, s') \\<rightarrow>*c (d', t'))\n\ngoal (1 subgoal):\n 1. (\\<exists>c1''.\n        (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n    (\\<exists>s''.\n        (c1, s) \\<rightarrow>*t s'' \\<and>\n        (c2, s'') \\<rightarrow>*c (d'', t''))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>c1''.\n      (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n  (\\<exists>s''.\n      (c1, s) \\<rightarrow>*t s'' \\<and>\n      (c2, s'') \\<rightarrow>*c (d'', t''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>c1''.\n      (c1, s) \\<rightarrow>*c (c1'', t'') \\<and> d'' = c1'' ;; c2) \\<or>\n  (\\<exists>s''.\n      (c1, s) \\<rightarrow>*t s'' \\<and>\n      (c2, s'') \\<rightarrow>*c (d'', t''))\n\ngoal (1 subgoal):\n 1. \\<And>c s c1 c2.\n       c = c1 ;; c2 \\<Longrightarrow>\n       (\\<exists>c1'.\n           (c1, s) \\<rightarrow>*c (c1', s) \\<and> c = c1' ;; c2) \\<or>\n       (\\<exists>s'.\n           (c1, s) \\<rightarrow>*t s' \\<and>\n           (c2, s') \\<rightarrow>*c (c, s))", "qed (metis PL.MtransC_Refl)"], ["proof (state)\nthis:\n  (c, s) \\<rightarrow>*c (d', t') \\<Longrightarrow>\n  \\<forall>c1 c2.\n     c = c1 ;; c2 \\<longrightarrow>\n     (\\<exists>c1'.\n         (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or>\n     (\\<exists>s'.\n         (c1, s) \\<rightarrow>*t s' \\<and>\n         (c2, s') \\<rightarrow>*c (d', t'))\n\ngoal (1 subgoal):\n 1. phi", "}"], ["proof (state)\nthis:\n  (?c2, s) \\<rightarrow>*c (d', t') \\<Longrightarrow>\n  \\<forall>c1 c2.\n     ?c2 = c1 ;; c2 \\<longrightarrow>\n     (\\<exists>c1'.\n         (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or>\n     (\\<exists>s'.\n         (c1, s) \\<rightarrow>*t s' \\<and>\n         (c2, s') \\<rightarrow>*c (d', t'))\n\ngoal (1 subgoal):\n 1. phi", "thus ?thesis"], ["proof (prove)\nusing this:\n  (?c2, s) \\<rightarrow>*c (d', t') \\<Longrightarrow>\n  \\<forall>c1 c2.\n     ?c2 = c1 ;; c2 \\<longrightarrow>\n     (\\<exists>c1'.\n         (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or>\n     (\\<exists>s'.\n         (c1, s) \\<rightarrow>*t s' \\<and>\n         (c2, s') \\<rightarrow>*c (d', t'))\n\ngoal (1 subgoal):\n 1. phi", "using assms"], ["proof (prove)\nusing this:\n  (?c2, s) \\<rightarrow>*c (d', t') \\<Longrightarrow>\n  \\<forall>c1 c2.\n     ?c2 = c1 ;; c2 \\<longrightarrow>\n     (\\<exists>c1'.\n         (c1, s) \\<rightarrow>*c (c1', t') \\<and> d' = c1' ;; c2) \\<or>\n     (\\<exists>s'.\n         (c1, s) \\<rightarrow>*t s' \\<and>\n         (c2, s') \\<rightarrow>*c (d', t'))\n  (c1 ;; c2, s) \\<rightarrow>*c (d', t')\n  \\<lbrakk>(c1, s) \\<rightarrow>*c (?c1', t'); d' = ?c1' ;; c2\\<rbrakk>\n  \\<Longrightarrow> phi\n  \\<lbrakk>(c1, s) \\<rightarrow>*t ?s';\n   (c2, ?s') \\<rightarrow>*c (d', t')\\<rbrakk>\n  \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "by blast"], ["proof (state)\nthis:\n  phi\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Seq_MtransT_invert[elim!]:\nassumes *: \"(c1 ;; c2, s) \\<rightarrow>*t s''\"\nand **: \"\\<And> s'. \\<lbrakk>(c1, s) \\<rightarrow>*t s'; (c2, s') \\<rightarrow>*t s''\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. phi", "obtain d' t' where 1: \"(c1 ;; c2, s) \\<rightarrow>*c (d',t')\" and 2: \"(d',t') \\<rightarrow>t s''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d' t'.\n        \\<lbrakk>(c1 ;; c2, s) \\<rightarrow>*c (d', t');\n         (d', t') \\<rightarrow>t s''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using *"], ["proof (prove)\nusing this:\n  (c1 ;; c2, s) \\<rightarrow>*t s''\n\ngoal (1 subgoal):\n 1. (\\<And>d' t'.\n        \\<lbrakk>(c1 ;; c2, s) \\<rightarrow>*c (d', t');\n         (d', t') \\<rightarrow>t s''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>d' t'.\n                \\<lbrakk>(c1 ;; c2, s) \\<rightarrow>*c (d', t');\n                 (d', t') \\<rightarrow>t s''\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     (c1 ;; c2, s) \\<rightarrow>*t s''\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply(erule MtransT_invert2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' s'.\n       \\<lbrakk>\\<And>d' t'.\n                   \\<lbrakk>(c1 ;; c2, s) \\<rightarrow>*c (d', t');\n                    (d', t') \\<rightarrow>t s''\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (c1 ;; c2, s) \\<rightarrow>*c (c', s');\n        (c', s') \\<rightarrow>t s''\\<rbrakk>\n       \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  (c1 ;; c2, s) \\<rightarrow>*c (d', t')\n  (d', t') \\<rightarrow>t s''\n\ngoal (1 subgoal):\n 1. phi", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using 1"], ["proof (prove)\nusing this:\n  (c1 ;; c2, s) \\<rightarrow>*c (d', t')\n\ngoal (1 subgoal):\n 1. phi", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1 ;; c2, s) \\<rightarrow>*c (d', t') \\<Longrightarrow> phi", "proof(erule Seq_MtransC_invert)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c1'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*c (c1', t'); d' = c1' ;; c2\\<rbrakk>\n       \\<Longrightarrow> phi\n 2. \\<And>s'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*t s';\n        (c2, s') \\<rightarrow>*c (d', t')\\<rbrakk>\n       \\<Longrightarrow> phi", "fix c1'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c1'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*c (c1', t'); d' = c1' ;; c2\\<rbrakk>\n       \\<Longrightarrow> phi\n 2. \\<And>s'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*t s';\n        (c2, s') \\<rightarrow>*c (d', t')\\<rbrakk>\n       \\<Longrightarrow> phi", "assume \"d' = c1' ;; c2\""], ["proof (state)\nthis:\n  d' = c1' ;; c2\n\ngoal (2 subgoals):\n 1. \\<And>c1'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*c (c1', t'); d' = c1' ;; c2\\<rbrakk>\n       \\<Longrightarrow> phi\n 2. \\<And>s'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*t s';\n        (c2, s') \\<rightarrow>*c (d', t')\\<rbrakk>\n       \\<Longrightarrow> phi", "hence False"], ["proof (prove)\nusing this:\n  d' = c1' ;; c2\n\ngoal (1 subgoal):\n 1. False", "using 2"], ["proof (prove)\nusing this:\n  d' = c1' ;; c2\n  (d', t') \\<rightarrow>t s''\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>c1'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*c (c1', t'); d' = c1' ;; c2\\<rbrakk>\n       \\<Longrightarrow> phi\n 2. \\<And>s'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*t s';\n        (c2, s') \\<rightarrow>*c (d', t')\\<rbrakk>\n       \\<Longrightarrow> phi", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. phi", "by simp"], ["proof (state)\nthis:\n  phi\n\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*t s';\n        (c2, s') \\<rightarrow>*c (d', t')\\<rbrakk>\n       \\<Longrightarrow> phi", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*t s';\n        (c2, s') \\<rightarrow>*c (d', t')\\<rbrakk>\n       \\<Longrightarrow> phi", "fix s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*t s';\n        (c2, s') \\<rightarrow>*c (d', t')\\<rbrakk>\n       \\<Longrightarrow> phi", "assume 3: \"(c1, s) \\<rightarrow>*t s'\" and \"(c2, s') \\<rightarrow>*c (d', t')\""], ["proof (state)\nthis:\n  (c1, s) \\<rightarrow>*t s'\n  (c2, s') \\<rightarrow>*c (d', t')\n\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*t s';\n        (c2, s') \\<rightarrow>*c (d', t')\\<rbrakk>\n       \\<Longrightarrow> phi", "hence \"(c2, s') \\<rightarrow>*t s''\""], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*t s'\n  (c2, s') \\<rightarrow>*c (d', t')\n\ngoal (1 subgoal):\n 1. (c2, s') \\<rightarrow>*t s''", "using 2 MtransT.StepT"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*t s'\n  (c2, s') \\<rightarrow>*c (d', t')\n  (d', t') \\<rightarrow>t s''\n  \\<lbrakk>?cf \\<rightarrow>*c ?cf'; ?cf' \\<rightarrow>t ?s''\\<rbrakk>\n  \\<Longrightarrow> ?cf \\<rightarrow>*t ?s''\n\ngoal (1 subgoal):\n 1. (c2, s') \\<rightarrow>*t s''", "by blast"], ["proof (state)\nthis:\n  (c2, s') \\<rightarrow>*t s''\n\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<lbrakk>(c1, s) \\<rightarrow>*t s';\n        (c2, s') \\<rightarrow>*c (d', t')\\<rbrakk>\n       \\<Longrightarrow> phi", "thus ?thesis"], ["proof (prove)\nusing this:\n  (c2, s') \\<rightarrow>*t s''\n\ngoal (1 subgoal):\n 1. phi", "using 3 **"], ["proof (prove)\nusing this:\n  (c2, s') \\<rightarrow>*t s''\n  (c1, s) \\<rightarrow>*t s'\n  \\<lbrakk>(c1, s) \\<rightarrow>*t ?s';\n   (c2, ?s') \\<rightarrow>*t s''\\<rbrakk>\n  \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "by blast"], ["proof (state)\nthis:\n  phi\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  phi\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Direct rules for the multi-step relations\\<close>"], ["", "lemma Seq_MtransC[simp]:\nassumes \"(c1, s) \\<rightarrow>*c (c1', s')\"\nshows \"(c1 ;; c2, s) \\<rightarrow>*c (c1' ;; c2, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1 ;; c2, s) \\<rightarrow>*c (c1' ;; c2, s')", "using assms"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*c (c1', s')\n\ngoal (1 subgoal):\n 1. (c1 ;; c2, s) \\<rightarrow>*c (c1' ;; c2, s')", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1, s) \\<rightarrow>*c (c1', s') \\<Longrightarrow>\n    (c1 ;; c2, s) \\<rightarrow>*c (c1' ;; c2, s')", "apply(erule MtransC_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c s. (c ;; c2, s) \\<rightarrow>*c (c ;; c2, s)\n 2. \\<And>c s c' s' c'' s''.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        (c ;; c2, s) \\<rightarrow>*c (c' ;; c2, s');\n        (c', s') \\<rightarrow>c (c'', s'')\\<rbrakk>\n       \\<Longrightarrow> (c ;; c2, s) \\<rightarrow>*c (c'' ;; c2, s'')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c s c' s' c'' s''.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        (c ;; c2, s) \\<rightarrow>*c (c' ;; c2, s');\n        (c', s') \\<rightarrow>c (c'', s'')\\<rbrakk>\n       \\<Longrightarrow> (c ;; c2, s) \\<rightarrow>*c (c'' ;; c2, s'')", "by (metis MtransC_StepC SeqC)"], ["", "lemma Seq_MtransT_MtransC[simp]:\nassumes \"(c1, s) \\<rightarrow>*t s'\"\nshows \"(c1 ;; c2, s) \\<rightarrow>*c (c2, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1 ;; c2, s) \\<rightarrow>*c (c2, s')", "using assms"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*t s'\n\ngoal (1 subgoal):\n 1. (c1 ;; c2, s) \\<rightarrow>*c (c2, s')", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1, s) \\<rightarrow>*t s' \\<Longrightarrow>\n    (c1 ;; c2, s) \\<rightarrow>*c (c2, s')", "apply(erule MtransT_invert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cf cf' s''.\n       \\<lbrakk>(c1, s) = cf; s' = s''; cf \\<rightarrow>*c cf';\n        cf' \\<rightarrow>t s''\\<rbrakk>\n       \\<Longrightarrow> (c1 ;; c2, s) \\<rightarrow>*c (c2, s')", "by (metis MtransC_StepC MtransT_invert2 PL.SeqT PL.Seq_MtransC assms)"], ["", "lemma ParCL_MtransC[simp]:\nassumes \"(c1, s) \\<rightarrow>*c (c1', s')\"\nshows \"(Par c1 c2, s) \\<rightarrow>*c (Par c1' c2, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1 | c2, s) \\<rightarrow>*c (c1' | c2, s')", "using assms"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*c (c1', s')\n\ngoal (1 subgoal):\n 1. (c1 | c2, s) \\<rightarrow>*c (c1' | c2, s')", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1, s) \\<rightarrow>*c (c1', s') \\<Longrightarrow>\n    (c1 | c2, s) \\<rightarrow>*c (c1' | c2, s')", "apply(erule MtransC_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c s. (c | c2, s) \\<rightarrow>*c (c | c2, s)\n 2. \\<And>c s c' s' c'' s''.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        (c | c2, s) \\<rightarrow>*c (c' | c2, s');\n        (c', s') \\<rightarrow>c (c'', s'')\\<rbrakk>\n       \\<Longrightarrow> (c | c2, s) \\<rightarrow>*c (c'' | c2, s'')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c s c' s' c'' s''.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        (c | c2, s) \\<rightarrow>*c (c' | c2, s');\n        (c', s') \\<rightarrow>c (c'', s'')\\<rbrakk>\n       \\<Longrightarrow> (c | c2, s) \\<rightarrow>*c (c'' | c2, s'')", "by (metis MtransC_StepC ParCL)"], ["", "lemma ParCR_MtransC[simp]:\nassumes \"(c2, s) \\<rightarrow>*c (c2', s')\"\nshows \"(Par c1 c2, s) \\<rightarrow>*c (Par c1 c2', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1 | c2, s) \\<rightarrow>*c (c1 | c2', s')", "using assms"], ["proof (prove)\nusing this:\n  (c2, s) \\<rightarrow>*c (c2', s')\n\ngoal (1 subgoal):\n 1. (c1 | c2, s) \\<rightarrow>*c (c1 | c2', s')", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c2, s) \\<rightarrow>*c (c2', s') \\<Longrightarrow>\n    (c1 | c2, s) \\<rightarrow>*c (c1 | c2', s')", "apply(erule MtransC_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c s. (c1 | c, s) \\<rightarrow>*c (c1 | c, s)\n 2. \\<And>c s c' s' c'' s''.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        (c1 | c, s) \\<rightarrow>*c (c1 | c', s');\n        (c', s') \\<rightarrow>c (c'', s'')\\<rbrakk>\n       \\<Longrightarrow> (c1 | c, s) \\<rightarrow>*c (c1 | c'', s'')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c s c' s' c'' s''.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        (c1 | c, s) \\<rightarrow>*c (c1 | c', s');\n        (c', s') \\<rightarrow>c (c'', s'')\\<rbrakk>\n       \\<Longrightarrow> (c1 | c, s) \\<rightarrow>*c (c1 | c'', s'')", "by (metis MtransC_StepC ParCR)"], ["", "lemma ParTL_MtransC[simp]:\nassumes \"(c1, s) \\<rightarrow>*t s'\"\nshows \"(Par c1 c2, s) \\<rightarrow>*c (c2, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1 | c2, s) \\<rightarrow>*c (c2, s')", "using assms"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*t s'\n\ngoal (1 subgoal):\n 1. (c1 | c2, s) \\<rightarrow>*c (c2, s')", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1, s) \\<rightarrow>*t s' \\<Longrightarrow>\n    (c1 | c2, s) \\<rightarrow>*c (c2, s')", "apply(erule MtransT_invert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cf cf' s''.\n       \\<lbrakk>(c1, s) = cf; s' = s''; cf \\<rightarrow>*c cf';\n        cf' \\<rightarrow>t s''\\<rbrakk>\n       \\<Longrightarrow> (c1 | c2, s) \\<rightarrow>*c (c2, s')", "by (metis MtransC_StepC MtransT_invert2 PL.ParTL ParCL_MtransC assms)"], ["", "lemma ParTR_MtransC[simp]:\nassumes \"(c2, s) \\<rightarrow>*t s'\"\nshows \"(Par c1 c2, s) \\<rightarrow>*c (c1, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1 | c2, s) \\<rightarrow>*c (c1, s')", "using assms"], ["proof (prove)\nusing this:\n  (c2, s) \\<rightarrow>*t s'\n\ngoal (1 subgoal):\n 1. (c1 | c2, s) \\<rightarrow>*c (c1, s')", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c2, s) \\<rightarrow>*t s' \\<Longrightarrow>\n    (c1 | c2, s) \\<rightarrow>*c (c1, s')", "apply(erule MtransT_invert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cf cf' s''.\n       \\<lbrakk>(c2, s) = cf; s' = s''; cf \\<rightarrow>*c cf';\n        cf' \\<rightarrow>t s''\\<rbrakk>\n       \\<Longrightarrow> (c1 | c2, s) \\<rightarrow>*c (c1, s')", "by (metis MtransC_StepC MtransT_invert2 PL.ParTR ParCR_MtransC assms)"], ["", "subsection\\<open>Sublanguages\\<close>"], ["", "(* Commands not containing \"while\": *)"], ["", "fun noWhile where \n \"noWhile (Atm atm) = True\"\n|\"noWhile (c1 ;; c2) = (noWhile c1 \\<and> noWhile c2)\"\n|\"noWhile (If b c1 c2) = (noWhile c1 \\<and> noWhile c2)\"\n|\"noWhile (While b c) = False\"\n|\"noWhile (Par c1 c2) = (noWhile c1 \\<and> noWhile c2)\""], ["", "(* Sequential commands: *)"], ["", "fun seq where \n \"seq (Atm atm) = True\"\n|\"seq (c1 ;; c2) = (seq c1 \\<and> seq c2)\"\n|\"seq (If b c1 c2) = (seq c1 \\<and> seq c2)\"\n|\"seq (While b c) = seq c\"\n|\"seq (Par c1 c2) = False\""], ["", "lemma noWhile_transC:\nassumes \"noWhile c\" and \"(c,s) \\<rightarrow>c (c',s')\"\nshows \"noWhile c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. noWhile c'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. noWhile c'", "have \"(c,s) \\<rightarrow>c (c',s') \\<Longrightarrow> noWhile c \\<longrightarrow> noWhile c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n    noWhile c \\<longrightarrow> noWhile c'", "by(erule transC_induct, auto)"], ["proof (state)\nthis:\n  (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n  noWhile c \\<longrightarrow> noWhile c'\n\ngoal (1 subgoal):\n 1. noWhile c'", "thus ?thesis"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n  noWhile c \\<longrightarrow> noWhile c'\n\ngoal (1 subgoal):\n 1. noWhile c'", "using assms"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n  noWhile c \\<longrightarrow> noWhile c'\n  noWhile c\n  (c, s) \\<rightarrow>c (c', s')\n\ngoal (1 subgoal):\n 1. noWhile c'", "by simp"], ["proof (state)\nthis:\n  noWhile c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_transC:\nassumes \"seq c\" and \"(c,s) \\<rightarrow>c (c',s')\"\nshows \"seq c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq c'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. seq c'", "have \"(c,s) \\<rightarrow>c (c',s') \\<Longrightarrow> seq c \\<longrightarrow> seq c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n    seq c \\<longrightarrow> seq c'", "by(erule transC_induct, auto)"], ["proof (state)\nthis:\n  (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n  seq c \\<longrightarrow> seq c'\n\ngoal (1 subgoal):\n 1. seq c'", "thus ?thesis"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n  seq c \\<longrightarrow> seq c'\n\ngoal (1 subgoal):\n 1. seq c'", "using assms"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n  seq c \\<longrightarrow> seq c'\n  seq c\n  (c, s) \\<rightarrow>c (c', s')\n\ngoal (1 subgoal):\n 1. seq c'", "by simp"], ["proof (state)\nthis:\n  seq c'\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation wfP_on where \n\"wfP_on phi A \\<equiv> wfP (\\<lambda>a b. a \\<in> A \\<and> b \\<in> A \\<and> phi a b)\""], ["", "(* The number of steps -- makes sense only for the noWhile sublanguage: *)"], ["", "fun numSt where \n \"numSt (Atm atm) = Suc 0\"\n|\"numSt (c1 ;; c2) = numSt c1 + numSt c2\"\n|\"numSt (If b c1 c2) = 1 + max (numSt c1) (numSt c2)\"\n|\"numSt (Par c1 c2) = numSt c1 + numSt c2\""], ["", "lemma numSt_gt_0[simp]:\n\"noWhile c \\<Longrightarrow> numSt c > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. noWhile c \\<Longrightarrow> 0 < numSt c", "by(induct c, auto)"], ["", "lemma numSt_transC:\nassumes \"noWhile c\" and \"(c,s) \\<rightarrow>c (c',s')\"\nshows \"numSt c' < numSt c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. numSt c' < numSt c", "using assms"], ["proof (prove)\nusing this:\n  noWhile c\n  (c, s) \\<rightarrow>c (c', s')\n\ngoal (1 subgoal):\n 1. numSt c' < numSt c", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>noWhile c; (c, s) \\<rightarrow>c (c', s')\\<rbrakk>\n    \\<Longrightarrow> numSt c' < numSt c", "apply(induct c arbitrary: c')"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x c'.\n       \\<lbrakk>noWhile (Atm x); (Atm x, s) \\<rightarrow>c (c', s')\\<rbrakk>\n       \\<Longrightarrow> numSt c' < numSt (Atm x)\n 2. \\<And>c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   \\<lbrakk>noWhile c1;\n                    (c1, s) \\<rightarrow>c (c', s')\\<rbrakk>\n                   \\<Longrightarrow> numSt c' < numSt c1;\n        \\<And>c'.\n           \\<lbrakk>noWhile c2; (c2, s) \\<rightarrow>c (c', s')\\<rbrakk>\n           \\<Longrightarrow> numSt c' < numSt c2;\n        noWhile (c1 ;; c2); (c1 ;; c2, s) \\<rightarrow>c (c', s')\\<rbrakk>\n       \\<Longrightarrow> numSt c' < numSt (c1 ;; c2)\n 3. \\<And>x1a c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   \\<lbrakk>noWhile c1;\n                    (c1, s) \\<rightarrow>c (c', s')\\<rbrakk>\n                   \\<Longrightarrow> numSt c' < numSt c1;\n        \\<And>c'.\n           \\<lbrakk>noWhile c2; (c2, s) \\<rightarrow>c (c', s')\\<rbrakk>\n           \\<Longrightarrow> numSt c' < numSt c2;\n        noWhile (if x1a then c1 else c2);\n        (if x1a then c1 else c2, s) \\<rightarrow>c (c', s')\\<rbrakk>\n       \\<Longrightarrow> numSt c' < numSt (if x1a then c1 else c2)\n 4. \\<And>x1a c c'.\n       \\<lbrakk>\\<And>c'.\n                   \\<lbrakk>noWhile c;\n                    (c, s) \\<rightarrow>c (c', s')\\<rbrakk>\n                   \\<Longrightarrow> numSt c' < numSt c;\n        noWhile (while x1a do c);\n        (while x1a do c, s) \\<rightarrow>c (c', s')\\<rbrakk>\n       \\<Longrightarrow> numSt c' < numSt (while x1a do c)\n 5. \\<And>c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   \\<lbrakk>noWhile c1;\n                    (c1, s) \\<rightarrow>c (c', s')\\<rbrakk>\n                   \\<Longrightarrow> numSt c' < numSt c1;\n        \\<And>c'.\n           \\<lbrakk>noWhile c2; (c2, s) \\<rightarrow>c (c', s')\\<rbrakk>\n           \\<Longrightarrow> numSt c' < numSt c2;\n        noWhile (c1 | c2); (c1 | c2, s) \\<rightarrow>c (c', s')\\<rbrakk>\n       \\<Longrightarrow> numSt c' < numSt (c1 | c2)", "by auto"], ["", "corollary wfP_tranC_noWhile:\n\"wfP (\\<lambda> (c',s') (c,s). noWhile c \\<and> (c,s) \\<rightarrow>c (c',s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>(c', s') (c, s).\n            noWhile c \\<and> (c, s) \\<rightarrow>c (c', s'))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>(c', s') (c, s).\n            noWhile c \\<and> (c, s) \\<rightarrow>c (c', s'))", "let ?K = \"{((c',s'),(c,s)). noWhile c \\<and> (c,s) \\<rightarrow>c (c',s')}\""], ["proof (state)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>(c', s') (c, s).\n            noWhile c \\<and> (c, s) \\<rightarrow>c (c', s'))", "have \"?K \\<le> inv_image {(m,n). m < n} (\\<lambda>(c,s). numSt c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {((c', s'), c, s). noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}\n    \\<subseteq> inv_image {(m, n). m < n} (\\<lambda>(c, s). numSt c)", "by(auto simp add: numSt_transC)"], ["proof (state)\nthis:\n  {((c', s'), c, s). noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}\n  \\<subseteq> inv_image {(m, n). m < n} (\\<lambda>(c, s). numSt c)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>(c', s') (c, s).\n            noWhile c \\<and> (c, s) \\<rightarrow>c (c', s'))", "hence \"wf ?K\""], ["proof (prove)\nusing this:\n  {((c', s'), c, s). noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}\n  \\<subseteq> inv_image {(m, n). m < n} (\\<lambda>(c, s). numSt c)\n\ngoal (1 subgoal):\n 1. wf {((c', s'), c, s). noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}", "using wf_less wf_subset[of _ ?K]"], ["proof (prove)\nusing this:\n  {((c', s'), c, s). noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}\n  \\<subseteq> inv_image {(m, n). m < n} (\\<lambda>(c, s). numSt c)\n  wf {(x, y). x < y}\n  \\<lbrakk>wf ?r;\n   {((c', s'), c, s). noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}\n   \\<subseteq> ?r\\<rbrakk>\n  \\<Longrightarrow> wf {((c', s'), c, s).\n                        noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}\n\ngoal (1 subgoal):\n 1. wf {((c', s'), c, s). noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}", "by blast"], ["proof (state)\nthis:\n  wf {((c', s'), c, s). noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>(c', s') (c, s).\n            noWhile c \\<and> (c, s) \\<rightarrow>c (c', s'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  wf {((c', s'), c, s). noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>(c', s') (c, s).\n            noWhile c \\<and> (c, s) \\<rightarrow>c (c', s'))", "unfolding wfP_def"], ["proof (prove)\nusing this:\n  wf {((c', s'), c, s). noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}\n\ngoal (1 subgoal):\n 1. wf {((c', s'), c, s). noWhile c \\<and> (c, s) \\<rightarrow>c (c', s')}", "by (metis CollectD Collect_mem_eq Compl_eq Compl_iff double_complement)"], ["proof (state)\nthis:\n  wfP (\\<lambda>(c', s') (c, s).\n          noWhile c \\<and> (c, s) \\<rightarrow>c (c', s'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma noWhile_MtransT:\nassumes \"noWhile c\"\nshows \"\\<exists> s'. (c,s) \\<rightarrow>*t s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'. (c, s) \\<rightarrow>*t s'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s'. (c, s) \\<rightarrow>*t s'", "have \"noWhile c \\<longrightarrow> (\\<forall> s. \\<exists> s'. (c,s) \\<rightarrow>*t s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. noWhile c \\<longrightarrow>\n    (\\<forall>s. \\<exists>s'. (c, s) \\<rightarrow>*t s')", "apply(rule measure_induct[of numSt])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>y.\n          numSt y < numSt x \\<longrightarrow>\n          noWhile y \\<longrightarrow>\n          (\\<forall>s.\n              \\<exists>s'. (y, s) \\<rightarrow>*t s') \\<Longrightarrow>\n       noWhile x \\<longrightarrow>\n       (\\<forall>s. \\<exists>s'. (x, s) \\<rightarrow>*t s')", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>y.\n                   numSt y < numSt x \\<longrightarrow>\n                   noWhile y \\<longrightarrow>\n                   (\\<forall>s. \\<exists>s'. (y, s) \\<rightarrow>*t s');\n        noWhile x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s'. (x, s) \\<rightarrow>*t s'", "fix c :: \"('test,'atom) com\" and s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>y.\n                   numSt y < numSt x \\<longrightarrow>\n                   noWhile y \\<longrightarrow>\n                   (\\<forall>s. \\<exists>s'. (y, s) \\<rightarrow>*t s');\n        noWhile x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s'. (x, s) \\<rightarrow>*t s'", "assume IH: \"\\<forall>c'. numSt c' < numSt c \\<longrightarrow> noWhile c' \\<longrightarrow> \n                     (\\<forall>s'. \\<exists>s''. (c', s') \\<rightarrow>*t s'')\" and c: \"noWhile c\""], ["proof (state)\nthis:\n  \\<forall>c'.\n     numSt c' < numSt c \\<longrightarrow>\n     noWhile c' \\<longrightarrow>\n     (\\<forall>s'. \\<exists>s''. (c', s') \\<rightarrow>*t s'')\n  noWhile c\n\ngoal (1 subgoal):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>y.\n                   numSt y < numSt x \\<longrightarrow>\n                   noWhile y \\<longrightarrow>\n                   (\\<forall>s. \\<exists>s'. (y, s) \\<rightarrow>*t s');\n        noWhile x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s'. (x, s) \\<rightarrow>*t s'", "show \"\\<exists>s''. (c, s) \\<rightarrow>*t s''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s''. (c, s) \\<rightarrow>*t s''", "proof(rule trans_invert[of c s])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''\n 2. \\<And>s'.\n       (c, s) \\<rightarrow>t s' \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''", "fix c' s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''\n 2. \\<And>s'.\n       (c, s) \\<rightarrow>t s' \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''", "assume cs: \"(c, s) \\<rightarrow>c (c', s')\""], ["proof (state)\nthis:\n  (c, s) \\<rightarrow>c (c', s')\n\ngoal (2 subgoals):\n 1. \\<And>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''\n 2. \\<And>s'.\n       (c, s) \\<rightarrow>t s' \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''", "hence \"numSt c' < numSt c\" and \"noWhile c'\""], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>c (c', s')\n\ngoal (1 subgoal):\n 1. numSt c' < numSt c &&& noWhile c'", "using numSt_transC noWhile_transC c"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>c (c', s')\n  \\<lbrakk>noWhile ?c; (?c, ?s) \\<rightarrow>c (?c', ?s')\\<rbrakk>\n  \\<Longrightarrow> numSt ?c' < numSt ?c\n  \\<lbrakk>noWhile ?c; (?c, ?s) \\<rightarrow>c (?c', ?s')\\<rbrakk>\n  \\<Longrightarrow> noWhile ?c'\n  noWhile c\n\ngoal (1 subgoal):\n 1. numSt c' < numSt c &&& noWhile c'", "by blast+"], ["proof (state)\nthis:\n  numSt c' < numSt c\n  noWhile c'\n\ngoal (2 subgoals):\n 1. \\<And>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''\n 2. \\<And>s'.\n       (c, s) \\<rightarrow>t s' \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''", "then"], ["proof (chain)\npicking this:\n  numSt c' < numSt c\n  noWhile c'", "obtain s'' where \"(c', s') \\<rightarrow>*t s''\""], ["proof (prove)\nusing this:\n  numSt c' < numSt c\n  noWhile c'\n\ngoal (1 subgoal):\n 1. (\\<And>s''.\n        (c', s') \\<rightarrow>*t s'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using IH"], ["proof (prove)\nusing this:\n  numSt c' < numSt c\n  noWhile c'\n  \\<forall>c'.\n     numSt c' < numSt c \\<longrightarrow>\n     noWhile c' \\<longrightarrow>\n     (\\<forall>s'. \\<exists>s''. (c', s') \\<rightarrow>*t s'')\n\ngoal (1 subgoal):\n 1. (\\<And>s''.\n        (c', s') \\<rightarrow>*t s'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c', s') \\<rightarrow>*t s''\n\ngoal (2 subgoals):\n 1. \\<And>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''\n 2. \\<And>s'.\n       (c, s) \\<rightarrow>t s' \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''", "hence \"(c, s) \\<rightarrow>*t s''\""], ["proof (prove)\nusing this:\n  (c', s') \\<rightarrow>*t s''\n\ngoal (1 subgoal):\n 1. (c, s) \\<rightarrow>*t s''", "using cs"], ["proof (prove)\nusing this:\n  (c', s') \\<rightarrow>*t s''\n  (c, s) \\<rightarrow>c (c', s')\n\ngoal (1 subgoal):\n 1. (c, s) \\<rightarrow>*t s''", "by simp"], ["proof (state)\nthis:\n  (c, s) \\<rightarrow>*t s''\n\ngoal (2 subgoals):\n 1. \\<And>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''\n 2. \\<And>s'.\n       (c, s) \\<rightarrow>t s' \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''", "thus ?thesis"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>*t s''\n\ngoal (1 subgoal):\n 1. \\<exists>s''. (c, s) \\<rightarrow>*t s''", "by blast"], ["proof (state)\nthis:\n  \\<exists>s''. (c, s) \\<rightarrow>*t s''\n\ngoal (1 subgoal):\n 1. \\<And>s'.\n       (c, s) \\<rightarrow>t s' \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s'.\n       (c, s) \\<rightarrow>t s' \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''", "fix s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s'.\n       (c, s) \\<rightarrow>t s' \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''", "assume \"(c, s) \\<rightarrow>t s'\""], ["proof (state)\nthis:\n  (c, s) \\<rightarrow>t s'\n\ngoal (1 subgoal):\n 1. \\<And>s'.\n       (c, s) \\<rightarrow>t s' \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''", "hence \"(c, s) \\<rightarrow>*t s'\""], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>t s'\n\ngoal (1 subgoal):\n 1. (c, s) \\<rightarrow>*t s'", "by simp"], ["proof (state)\nthis:\n  (c, s) \\<rightarrow>*t s'\n\ngoal (1 subgoal):\n 1. \\<And>s'.\n       (c, s) \\<rightarrow>t s' \\<Longrightarrow>\n       \\<exists>s''. (c, s) \\<rightarrow>*t s''", "thus ?thesis"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>*t s'\n\ngoal (1 subgoal):\n 1. \\<exists>s''. (c, s) \\<rightarrow>*t s''", "by blast"], ["proof (state)\nthis:\n  \\<exists>s''. (c, s) \\<rightarrow>*t s''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s''. (c, s) \\<rightarrow>*t s''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  noWhile c \\<longrightarrow>\n  (\\<forall>s. \\<exists>s'. (c, s) \\<rightarrow>*t s')\n\ngoal (1 subgoal):\n 1. \\<exists>s'. (c, s) \\<rightarrow>*t s'", "thus ?thesis"], ["proof (prove)\nusing this:\n  noWhile c \\<longrightarrow>\n  (\\<forall>s. \\<exists>s'. (c, s) \\<rightarrow>*t s')\n\ngoal (1 subgoal):\n 1. \\<exists>s'. (c, s) \\<rightarrow>*t s'", "using assms"], ["proof (prove)\nusing this:\n  noWhile c \\<longrightarrow>\n  (\\<forall>s. \\<exists>s'. (c, s) \\<rightarrow>*t s')\n  noWhile c\n\ngoal (1 subgoal):\n 1. \\<exists>s'. (c, s) \\<rightarrow>*t s'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s'. (c, s) \\<rightarrow>*t s'\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Configurations that may diverge: *)"], ["", "coinductive mayDiverge where \nintro: \n\"\\<lbrakk>(c,s) \\<rightarrow>c (c',s') \\<and> mayDiverge c' s'\\<rbrakk> \n  \\<Longrightarrow> mayDiverge c s\""], ["", "text\\<open>Coinduction for may-diverge :\\<close>"], ["", "lemma mayDiverge_coind[consumes 1, case_names Hyp, induct pred: mayDiverge]:\nassumes *: \"phi c s\" and \n**: \"\\<And> c s. phi c s \\<Longrightarrow> \n            \\<exists> c' s'. (c,s) \\<rightarrow>c (c',s') \\<and> (phi c' s' \\<or> mayDiverge c' s')\" \nshows \"mayDiverge c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge c s", "using *"], ["proof (prove)\nusing this:\n  phi c s\n\ngoal (1 subgoal):\n 1. mayDiverge c s", "apply(elim mayDiverge.coinduct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       phi x1 x2 \\<Longrightarrow>\n       \\<exists>c s c' s'.\n          x1 = c \\<and>\n          x2 = s \\<and>\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (phi c' s' \\<or> mayDiverge c' s')", "using **"], ["proof (prove)\nusing this:\n  phi ?c ?s \\<Longrightarrow>\n  \\<exists>c' s'.\n     (?c, ?s) \\<rightarrow>c (c', s') \\<and>\n     (phi c' s' \\<or> mayDiverge c' s')\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       phi x1 x2 \\<Longrightarrow>\n       \\<exists>c s c' s'.\n          x1 = c \\<and>\n          x2 = s \\<and>\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (phi c' s' \\<or> mayDiverge c' s')", "by auto"], ["", "lemma mayDiverge_raw_coind[consumes 1, case_names Hyp]:\nassumes *: \"phi c s\" and \n**: \"\\<And> c s. phi c s \\<Longrightarrow> \n            \\<exists> c' s'. (c,s) \\<rightarrow>c (c',s') \\<and> phi c' s'\" \nshows \"mayDiverge c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge c s", "using *"], ["proof (prove)\nusing this:\n  phi c s\n\ngoal (1 subgoal):\n 1. mayDiverge c s", "apply induct"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c s.\n       phi c s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (phi c' s' \\<or> mayDiverge c' s')", "using **"], ["proof (prove)\nusing this:\n  phi ?c ?s \\<Longrightarrow>\n  \\<exists>c' s'. (?c, ?s) \\<rightarrow>c (c', s') \\<and> phi c' s'\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       phi c s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (phi c' s' \\<or> mayDiverge c' s')", "by blast"], ["", "text\\<open>May-diverge versus transition:\\<close>"], ["", "lemma mayDiverge_transC:\nassumes \"mayDiverge c s\"\nshows \"\\<exists> c' s'. (c,s) \\<rightarrow>c (c',s') \\<and> mayDiverge c' s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' s'. (c, s) \\<rightarrow>c (c', s') \\<and> mayDiverge c' s'", "using assms"], ["proof (prove)\nusing this:\n  mayDiverge c s\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'. (c, s) \\<rightarrow>c (c', s') \\<and> mayDiverge c' s'", "by (elim mayDiverge.cases) blast"], ["", "lemma transC_mayDiverge:\nassumes \"(c,s) \\<rightarrow>c (c',s')\" and \"mayDiverge c' s'\"\nshows \"mayDiverge c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge c s", "using assms"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>c (c', s')\n  mayDiverge c' s'\n\ngoal (1 subgoal):\n 1. mayDiverge c s", "by (metis mayDiverge.intro)"], ["", "lemma mayDiverge_not_transT:\nassumes \"mayDiverge c s\"\nshows \"\\<not> (c,s) \\<rightarrow>t s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (c, s) \\<rightarrow>t s'", "by (metis assms mayDiverge_transC not_transC_transT)"], ["", "lemma MtransC_mayDiverge:\nassumes \"(c,s) \\<rightarrow>*c (c',s')\" and \"mayDiverge c' s'\"\nshows \"mayDiverge c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge c s", "using assms transC_mayDiverge"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>*c (c', s')\n  mayDiverge c' s'\n  \\<lbrakk>(?c, ?s) \\<rightarrow>c (?c', ?s'); mayDiverge ?c' ?s'\\<rbrakk>\n  \\<Longrightarrow> mayDiverge ?c ?s\n\ngoal (1 subgoal):\n 1. mayDiverge c s", "by (induct) auto"], ["", "lemma not_MtransT_mayDiverge: \nassumes \"\\<And> s'. \\<not> (c,s) \\<rightarrow>*t s'\"\nshows \"mayDiverge c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge c s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mayDiverge c s", "have \"\\<forall> s'. \\<not> (c,s) \\<rightarrow>*t s' \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s' \\<Longrightarrow>\n    mayDiverge c s", "proof (induct rule: mayDiverge_raw_coind)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s' \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<forall>s'a. \\<not> (c', s') \\<rightarrow>*t s'a)", "case (Hyp c s)"], ["proof (state)\nthis:\n  \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s'\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s' \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<forall>s'a. \\<not> (c', s') \\<rightarrow>*t s'a)", "hence \"\\<forall> s''. \\<not> (c, s) \\<rightarrow>t s''\""], ["proof (prove)\nusing this:\n  \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s'\n\ngoal (1 subgoal):\n 1. \\<forall>s''. \\<not> (c, s) \\<rightarrow>t s''", "by (metis transT_MtransT)"], ["proof (state)\nthis:\n  \\<forall>s''. \\<not> (c, s) \\<rightarrow>t s''\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s' \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<forall>s'a. \\<not> (c', s') \\<rightarrow>*t s'a)", "then"], ["proof (chain)\npicking this:\n  \\<forall>s''. \\<not> (c, s) \\<rightarrow>t s''", "obtain c' s' where 1: \"(c,s) \\<rightarrow>c (c',s')\""], ["proof (prove)\nusing this:\n  \\<forall>s''. \\<not> (c, s) \\<rightarrow>t s''\n\ngoal (1 subgoal):\n 1. (\\<And>c' s'.\n        (c, s) \\<rightarrow>c (c', s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis trans_invert)"], ["proof (state)\nthis:\n  (c, s) \\<rightarrow>c (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s' \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<forall>s'a. \\<not> (c', s') \\<rightarrow>*t s'a)", "hence \"\\<forall> s''. \\<not> (c', s') \\<rightarrow>*t s''\""], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>c (c', s')\n\ngoal (1 subgoal):\n 1. \\<forall>s''. \\<not> (c', s') \\<rightarrow>*t s''", "using Hyp 1"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>c (c', s')\n  \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s'\n  (c, s) \\<rightarrow>c (c', s')\n\ngoal (1 subgoal):\n 1. \\<forall>s''. \\<not> (c', s') \\<rightarrow>*t s''", "by (metis transC_MtransT)"], ["proof (state)\nthis:\n  \\<forall>s''. \\<not> (c', s') \\<rightarrow>*t s''\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s' \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<forall>s'a. \\<not> (c', s') \\<rightarrow>*t s'a)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>s''. \\<not> (c', s') \\<rightarrow>*t s''\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<and>\n       (\\<forall>s'a. \\<not> (c', s') \\<rightarrow>*t s'a)", "using 1"], ["proof (prove)\nusing this:\n  \\<forall>s''. \\<not> (c', s') \\<rightarrow>*t s''\n  (c, s) \\<rightarrow>c (c', s')\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<and>\n       (\\<forall>s'a. \\<not> (c', s') \\<rightarrow>*t s'a)", "by blast"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     (c, s) \\<rightarrow>c (c', s') \\<and>\n     (\\<forall>s'a. \\<not> (c', s') \\<rightarrow>*t s'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s' \\<Longrightarrow>\n  mayDiverge c s\n\ngoal (1 subgoal):\n 1. mayDiverge c s", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s' \\<Longrightarrow>\n  mayDiverge c s\n\ngoal (1 subgoal):\n 1. mayDiverge c s", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>s'. \\<not> (c, s) \\<rightarrow>*t s' \\<Longrightarrow>\n  mayDiverge c s\n  \\<not> (c, s) \\<rightarrow>*t ?s'\n\ngoal (1 subgoal):\n 1. mayDiverge c s", "by simp"], ["proof (state)\nthis:\n  mayDiverge c s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_mayDiverge_Atm[simp]:\n\"\\<not> mayDiverge (Atm atm) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> mayDiverge (Atm atm) s", "by (metis Atm_transC_invert mayDiverge.simps)"], ["", "lemma mayDiverge_Seq_L:\nassumes \"mayDiverge c1 s\" \nshows \"mayDiverge (c1 ;; c2) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "assume \"\\<exists> c1 c2. c = c1 ;; c2 \\<and> mayDiverge c1 s\""], ["proof (state)\nthis:\n  \\<exists>c1 c2. c = c1 ;; c2 \\<and> mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "hence \"mayDiverge c s\""], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. c = c1 ;; c2 \\<and> mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. mayDiverge c s", "proof (induct rule: mayDiverge_raw_coind)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 ;; c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 ;; c2 \\<and> mayDiverge c1 s')", "case (Hyp c s)"], ["proof (state)\nthis:\n  \\<exists>c1 c2. c = c1 ;; c2 \\<and> mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 ;; c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 ;; c2 \\<and> mayDiverge c1 s')", "then"], ["proof (chain)\npicking this:\n  \\<exists>c1 c2. c = c1 ;; c2 \\<and> mayDiverge c1 s", "obtain c1 c2 where c: \"c = c1 ;; c2\" \n    and \"mayDiverge c1 s\""], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. c = c1 ;; c2 \\<and> mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. (\\<And>c1 c2.\n        \\<lbrakk>c = c1 ;; c2; mayDiverge c1 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c = c1 ;; c2\n  mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 ;; c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 ;; c2 \\<and> mayDiverge c1 s')", "then"], ["proof (chain)\npicking this:\n  c = c1 ;; c2\n  mayDiverge c1 s", "obtain c1' s' where \"(c1,s) \\<rightarrow>c (c1',s')\" \n    and \"mayDiverge c1' s'\""], ["proof (prove)\nusing this:\n  c = c1 ;; c2\n  mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. (\\<And>c1' s'.\n        \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n         mayDiverge c1' s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis mayDiverge_transC)"], ["proof (state)\nthis:\n  (c1, s) \\<rightarrow>c (c1', s')\n  mayDiverge c1' s'\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 ;; c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 ;; c2 \\<and> mayDiverge c1 s')", "thus ?case"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>c (c1', s')\n  mayDiverge c1' s'\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<and>\n       (\\<exists>c1 c2. c' = c1 ;; c2 \\<and> mayDiverge c1 s')", "using c SeqC"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>c (c1', s')\n  mayDiverge c1' s'\n  c = c1 ;; c2\n  (?c1.0, ?s) \\<rightarrow>c (?c1', ?s') \\<Longrightarrow>\n  (?c1.0 ;; ?c2.0, ?s) \\<rightarrow>c (?c1' ;; ?c2.0, ?s')\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<and>\n       (\\<exists>c1 c2. c' = c1 ;; c2 \\<and> mayDiverge c1 s')", "by metis"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     (c, s) \\<rightarrow>c (c', s') \\<and>\n     (\\<exists>c1 c2. c' = c1 ;; c2 \\<and> mayDiverge c1 s')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mayDiverge c s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "}"], ["proof (state)\nthis:\n  \\<exists>c1 c2. ?c2 = c1 ;; c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n  mayDiverge ?c2 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. ?c2 = c1 ;; c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n  mayDiverge ?c2 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. ?c2 = c1 ;; c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n  mayDiverge ?c2 s\n  mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "by auto"], ["proof (state)\nthis:\n  mayDiverge (c1 ;; c2) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mayDiverge_Seq_R:\nassumes c1: \"(c1, s) \\<rightarrow>*t s'\" and c2: \"mayDiverge c2 s'\"\nshows \"mayDiverge (c1 ;; c2) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "have \"(c1 ;; c2, s) \\<rightarrow>*c (c2, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1 ;; c2, s) \\<rightarrow>*c (c2, s')", "using c1"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>*t s'\n\ngoal (1 subgoal):\n 1. (c1 ;; c2, s) \\<rightarrow>*c (c2, s')", "by (metis Seq_MtransT_MtransC)"], ["proof (state)\nthis:\n  (c1 ;; c2, s) \\<rightarrow>*c (c2, s')\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  (c1 ;; c2, s) \\<rightarrow>*c (c2, s')\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 ;; c2) s", "by (metis MtransC_mayDiverge c2)"], ["proof (state)\nthis:\n  mayDiverge (c1 ;; c2) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mayDiverge_If_L: \nassumes \"tval tst s\" and \"mayDiverge c1 s\"\nshows \"mayDiverge (If tst c1 c2) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge (if tst then c1 else c2) s", "using assms IfTrue transC_mayDiverge"], ["proof (prove)\nusing this:\n  tval tst s\n  mayDiverge c1 s\n  tval ?tst ?s \\<Longrightarrow>\n  (if ?tst then ?c1.0 else ?c2.0, ?s) \\<rightarrow>c (?c1.0, ?s)\n  \\<lbrakk>(?c, ?s) \\<rightarrow>c (?c', ?s'); mayDiverge ?c' ?s'\\<rbrakk>\n  \\<Longrightarrow> mayDiverge ?c ?s\n\ngoal (1 subgoal):\n 1. mayDiverge (if tst then c1 else c2) s", "by metis"], ["", "lemma mayDiverge_If_R: \nassumes \"\\<not> tval tst s\" and \"mayDiverge c2 s\"\nshows \"mayDiverge (If tst c1 c2) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge (if tst then c1 else c2) s", "using assms IfFalse transC_mayDiverge"], ["proof (prove)\nusing this:\n  \\<not> tval tst s\n  mayDiverge c2 s\n  \\<not> tval ?tst ?s \\<Longrightarrow>\n  (if ?tst then ?c1.0 else ?c2.0, ?s) \\<rightarrow>c (?c2.0, ?s)\n  \\<lbrakk>(?c, ?s) \\<rightarrow>c (?c', ?s'); mayDiverge ?c' ?s'\\<rbrakk>\n  \\<Longrightarrow> mayDiverge ?c ?s\n\ngoal (1 subgoal):\n 1. mayDiverge (if tst then c1 else c2) s", "by metis"], ["", "lemma mayDiverge_If: \nassumes \"mayDiverge c1 s\" and \"mayDiverge c2 s\"\nshows \"mayDiverge (If tst c1 c2) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge (if tst then c1 else c2) s", "using assms mayDiverge_If_L mayDiverge_If_R"], ["proof (prove)\nusing this:\n  mayDiverge c1 s\n  mayDiverge c2 s\n  \\<lbrakk>tval ?tst ?s; mayDiverge ?c1.0 ?s\\<rbrakk>\n  \\<Longrightarrow> mayDiverge (if ?tst then ?c1.0 else ?c2.0) ?s\n  \\<lbrakk>\\<not> tval ?tst ?s; mayDiverge ?c2.0 ?s\\<rbrakk>\n  \\<Longrightarrow> mayDiverge (if ?tst then ?c1.0 else ?c2.0) ?s\n\ngoal (1 subgoal):\n 1. mayDiverge (if tst then c1 else c2) s", "by (cases \"tval tst s\") auto"], ["", "lemma mayDiverge_Par_L: \nassumes \"mayDiverge c1 s\"\nshows \"mayDiverge (Par c1 c2) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "assume \"\\<exists> c1 c2. c = Par c1 c2 \\<and> mayDiverge c1 s\""], ["proof (state)\nthis:\n  \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "hence \"mayDiverge c s\""], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. mayDiverge c s", "proof (induct rule: mayDiverge_raw_coind)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c1 s')", "case (Hyp c s)"], ["proof (state)\nthis:\n  \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c1 s')", "then"], ["proof (chain)\npicking this:\n  \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c1 s", "obtain c1 c2 where c: \"c = Par c1 c2\" \n    and \"mayDiverge c1 s\""], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. (\\<And>c1 c2.\n        \\<lbrakk>c = c1 | c2; mayDiverge c1 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c = c1 | c2\n  mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c1 s')", "then"], ["proof (chain)\npicking this:\n  c = c1 | c2\n  mayDiverge c1 s", "obtain c1' s' where \"(c1,s) \\<rightarrow>c (c1',s')\" \n    and \"mayDiverge c1' s'\""], ["proof (prove)\nusing this:\n  c = c1 | c2\n  mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. (\\<And>c1' s'.\n        \\<lbrakk>(c1, s) \\<rightarrow>c (c1', s');\n         mayDiverge c1' s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis mayDiverge_transC)"], ["proof (state)\nthis:\n  (c1, s) \\<rightarrow>c (c1', s')\n  mayDiverge c1' s'\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c1 s')", "thus ?case"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>c (c1', s')\n  mayDiverge c1' s'\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<and>\n       (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c1 s')", "using c ParCL"], ["proof (prove)\nusing this:\n  (c1, s) \\<rightarrow>c (c1', s')\n  mayDiverge c1' s'\n  c = c1 | c2\n  (?c1.0, ?s) \\<rightarrow>c (?c1', ?s') \\<Longrightarrow>\n  (?c1.0 | ?c2.0, ?s) \\<rightarrow>c (?c1' | ?c2.0, ?s')\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<and>\n       (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c1 s')", "by metis"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     (c, s) \\<rightarrow>c (c', s') \\<and>\n     (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c1 s')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mayDiverge c s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "}"], ["proof (state)\nthis:\n  \\<exists>c1 c2. ?c2 = c1 | c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n  mayDiverge ?c2 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. ?c2 = c1 | c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n  mayDiverge ?c2 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. ?c2 = c1 | c2 \\<and> mayDiverge c1 s \\<Longrightarrow>\n  mayDiverge ?c2 s\n  mayDiverge c1 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "by auto"], ["proof (state)\nthis:\n  mayDiverge (c1 | c2) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mayDiverge_Par_R: \nassumes \"mayDiverge c2 s\"\nshows \"mayDiverge (Par c1 c2) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "assume \"\\<exists> c1 c2. c = Par c1 c2 \\<and> mayDiverge c2 s\""], ["proof (state)\nthis:\n  \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c2 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "hence \"mayDiverge c s\""], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c2 s\n\ngoal (1 subgoal):\n 1. mayDiverge c s", "proof (induct rule: mayDiverge_raw_coind)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c2 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c2 s')", "case (Hyp c s)"], ["proof (state)\nthis:\n  \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c2 s\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c2 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c2 s')", "then"], ["proof (chain)\npicking this:\n  \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c2 s", "obtain c1 c2 where c: \"c = Par c1 c2\" \n    and \"mayDiverge c2 s\""], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c2 s\n\ngoal (1 subgoal):\n 1. (\\<And>c1 c2.\n        \\<lbrakk>c = c1 | c2; mayDiverge c2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c = c1 | c2\n  mayDiverge c2 s\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c2 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c2 s')", "then"], ["proof (chain)\npicking this:\n  c = c1 | c2\n  mayDiverge c2 s", "obtain c2' s' where \"(c2,s) \\<rightarrow>c (c2',s')\" \n    and \"mayDiverge c2' s'\""], ["proof (prove)\nusing this:\n  c = c1 | c2\n  mayDiverge c2 s\n\ngoal (1 subgoal):\n 1. (\\<And>c2' s'.\n        \\<lbrakk>(c2, s) \\<rightarrow>c (c2', s');\n         mayDiverge c2' s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis mayDiverge_transC)"], ["proof (state)\nthis:\n  (c2, s) \\<rightarrow>c (c2', s')\n  mayDiverge c2' s'\n\ngoal (1 subgoal):\n 1. \\<And>c s.\n       \\<exists>c1 c2. c = c1 | c2 \\<and> mayDiverge c2 s \\<Longrightarrow>\n       \\<exists>c' s'.\n          (c, s) \\<rightarrow>c (c', s') \\<and>\n          (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c2 s')", "thus ?case"], ["proof (prove)\nusing this:\n  (c2, s) \\<rightarrow>c (c2', s')\n  mayDiverge c2' s'\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<and>\n       (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c2 s')", "using c ParCR"], ["proof (prove)\nusing this:\n  (c2, s) \\<rightarrow>c (c2', s')\n  mayDiverge c2' s'\n  c = c1 | c2\n  (?c2.0, ?s) \\<rightarrow>c (?c2', ?s') \\<Longrightarrow>\n  (?c1.0 | ?c2.0, ?s) \\<rightarrow>c (?c1.0 | ?c2', ?s')\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       (c, s) \\<rightarrow>c (c', s') \\<and>\n       (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c2 s')", "by metis"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     (c, s) \\<rightarrow>c (c', s') \\<and>\n     (\\<exists>c1 c2. c' = c1 | c2 \\<and> mayDiverge c2 s')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mayDiverge c s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "}"], ["proof (state)\nthis:\n  \\<exists>c1 c2. ?c2 = c1 | c2 \\<and> mayDiverge c2 s \\<Longrightarrow>\n  mayDiverge ?c2 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. ?c2 = c1 | c2 \\<and> mayDiverge c2 s \\<Longrightarrow>\n  mayDiverge ?c2 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>c1 c2. ?c2 = c1 | c2 \\<and> mayDiverge c2 s \\<Longrightarrow>\n  mayDiverge ?c2 s\n  mayDiverge c2 s\n\ngoal (1 subgoal):\n 1. mayDiverge (c1 | c2) s", "by auto"], ["proof (state)\nthis:\n  mayDiverge (c1 | c2) s\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Configurations that must terminate: *)"], ["", "definition mustT where \n\"mustT c s \\<equiv> \\<not> mayDiverge c s\""], ["", "lemma mustT_transC:\nassumes \"mustT c s\" and \"(c,s) \\<rightarrow>c (c',s')\"\nshows \"mustT c' s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mustT c' s'", "using assms intro"], ["proof (prove)\nusing this:\n  mustT c s\n  (c, s) \\<rightarrow>c (c', s')\n  (?c, ?s) \\<rightarrow>c (?c', ?s') \\<and>\n  mayDiverge ?c' ?s' \\<Longrightarrow>\n  mayDiverge ?c ?s\n\ngoal (1 subgoal):\n 1. mustT c' s'", "unfolding mustT_def"], ["proof (prove)\nusing this:\n  \\<not> mayDiverge c s\n  (c, s) \\<rightarrow>c (c', s')\n  (?c, ?s) \\<rightarrow>c (?c', ?s') \\<and>\n  mayDiverge ?c' ?s' \\<Longrightarrow>\n  mayDiverge ?c ?s\n\ngoal (1 subgoal):\n 1. \\<not> mayDiverge c' s'", "by blast"], ["", "lemma transT_not_mustT:\nassumes \"(c,s) \\<rightarrow>t s'\"\nshows \"mustT c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mustT c s", "by (metis assms mayDiverge_not_transT mustT_def)"], ["", "lemma mustT_MtransC:\nassumes \"mustT c s\" and \"(c,s) \\<rightarrow>*c (c',s')\"\nshows \"mustT c' s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mustT c' s'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mustT c' s'", "have \"(c,s) \\<rightarrow>*c (c',s') \\<Longrightarrow> mustT c s \\<longrightarrow> mustT c' s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, s) \\<rightarrow>*c (c', s') \\<Longrightarrow>\n    mustT c s \\<longrightarrow> mustT c' s'", "apply(erule MtransC_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c s. mustT c s \\<longrightarrow> mustT c s\n 2. \\<And>c s c' s' c'' s''.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        mustT c s \\<longrightarrow> mustT c' s';\n        (c', s') \\<rightarrow>c (c'', s'')\\<rbrakk>\n       \\<Longrightarrow> mustT c s \\<longrightarrow> mustT c'' s''", "using mustT_transC"], ["proof (prove)\nusing this:\n  \\<lbrakk>mustT ?c ?s; (?c, ?s) \\<rightarrow>c (?c', ?s')\\<rbrakk>\n  \\<Longrightarrow> mustT ?c' ?s'\n\ngoal (2 subgoals):\n 1. \\<And>c s. mustT c s \\<longrightarrow> mustT c s\n 2. \\<And>c s c' s' c'' s''.\n       \\<lbrakk>(c, s) \\<rightarrow>*c (c', s');\n        mustT c s \\<longrightarrow> mustT c' s';\n        (c', s') \\<rightarrow>c (c'', s'')\\<rbrakk>\n       \\<Longrightarrow> mustT c s \\<longrightarrow> mustT c'' s''", "by blast+"], ["proof (state)\nthis:\n  (c, s) \\<rightarrow>*c (c', s') \\<Longrightarrow>\n  mustT c s \\<longrightarrow> mustT c' s'\n\ngoal (1 subgoal):\n 1. mustT c' s'", "thus ?thesis"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>*c (c', s') \\<Longrightarrow>\n  mustT c s \\<longrightarrow> mustT c' s'\n\ngoal (1 subgoal):\n 1. mustT c' s'", "using assms"], ["proof (prove)\nusing this:\n  (c, s) \\<rightarrow>*c (c', s') \\<Longrightarrow>\n  mustT c s \\<longrightarrow> mustT c' s'\n  mustT c s\n  (c, s) \\<rightarrow>*c (c', s')\n\ngoal (1 subgoal):\n 1. mustT c' s'", "by blast"], ["proof (state)\nthis:\n  mustT c' s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mustT_MtransT:\nassumes \"mustT c s\"\nshows \"\\<exists> s'. (c,s) \\<rightarrow>*t s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'. (c, s) \\<rightarrow>*t s'", "using assms not_MtransT_mayDiverge"], ["proof (prove)\nusing this:\n  mustT c s\n  (\\<And>s'. \\<not> (?c, ?s) \\<rightarrow>*t s') \\<Longrightarrow>\n  mayDiverge ?c ?s\n\ngoal (1 subgoal):\n 1. \\<exists>s'. (c, s) \\<rightarrow>*t s'", "unfolding mustT_def"], ["proof (prove)\nusing this:\n  \\<not> mayDiverge c s\n  (\\<And>s'. \\<not> (?c, ?s) \\<rightarrow>*t s') \\<Longrightarrow>\n  mayDiverge ?c ?s\n\ngoal (1 subgoal):\n 1. \\<exists>s'. (c, s) \\<rightarrow>*t s'", "by blast"], ["", "lemma mustT_Atm[simp]:\n\"mustT (Atm atm) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mustT (Atm atm) s", "by (metis not_mayDiverge_Atm mustT_def)"], ["", "lemma mustT_Seq_L:\nassumes \"mustT (c1 ;; c2) s\"\nshows \"mustT c1 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mustT c1 s", "by (metis PL.mayDiverge_Seq_L assms mustT_def)"], ["", "lemma mustT_Seq_R:\nassumes \"mustT (c1 ;; c2) s\" and \"(c1, s) \\<rightarrow>*t s'\" \nshows \"mustT c2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mustT c2 s'", "by (metis Seq_MtransT_MtransC mustT_MtransC assms)"], ["", "lemma mustT_If_L: \nassumes \"tval tst s\" and \"mustT (If tst c1 c2) s\" \nshows \"mustT c1 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mustT c1 s", "by (metis assms trans_IfTrue  mustT_transC)"], ["", "lemma mustT_If_R: \nassumes \"\\<not> tval tst s\" and \"mustT (If tst c1 c2) s\" \nshows \"mustT c2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mustT c2 s", "by (metis assms trans_IfFalse  mustT_transC)"], ["", "lemma mustT_If: \nassumes \"mustT (If tst c1 c2) s\"\nshows \"mustT c1 s \\<or> mustT c2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mustT c1 s \\<or> mustT c2 s", "by (metis assms mustT_If_L mustT_If_R)"], ["", "lemma mustT_Par_L: \nassumes \"mustT (Par c1 c2) s\"\nshows \"mustT c1 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mustT c1 s", "by (metis assms mayDiverge_Par_L mustT_def)"], ["", "lemma mustT_Par_R: \nassumes \"mustT (Par c1 c2) s\"\nshows \"mustT c2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mustT c2 s", "by (metis assms mayDiverge_Par_R mustT_def)"], ["", "(* Semantically deterministic commands: *)"], ["", "definition determOn where\n\"determOn phi r \\<equiv> \n \\<forall> a b b'. phi a \\<and> r a b \\<and> r a b' \\<longrightarrow> b = b'\""], ["", "lemma determOn_seq_transT:\n\"determOn (\\<lambda>(c,s). seq c) transT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. determOn (\\<lambda>(c, s). seq c) (\\<rightarrow>t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. determOn (\\<lambda>(c, s). seq c) (\\<rightarrow>t)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. determOn (\\<lambda>(c, s). seq c) (\\<rightarrow>t)", "fix c s s1' s2'"], ["proof (state)\ngoal (1 subgoal):\n 1. determOn (\\<lambda>(c, s). seq c) (\\<rightarrow>t)", "have \"seq c \\<and> (c,s) \\<rightarrow>t s1' \\<and> (c,s) \\<rightarrow>t s2' \\<longrightarrow> s1' = s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq c \\<and>\n    (c, s) \\<rightarrow>t s1' \\<and>\n    (c, s) \\<rightarrow>t s2' \\<longrightarrow>\n    s1' = s2'", "apply(induct c arbitrary: s1' s2')"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x s1' s2'.\n       seq (Atm x) \\<and>\n       (Atm x, s) \\<rightarrow>t s1' \\<and>\n       (Atm x, s) \\<rightarrow>t s2' \\<longrightarrow>\n       s1' = s2'\n 2. \\<And>c1 c2 s1' s2'.\n       \\<lbrakk>\\<And>s1' s2'.\n                   seq c1 \\<and>\n                   (c1, s) \\<rightarrow>t s1' \\<and>\n                   (c1, s) \\<rightarrow>t s2' \\<longrightarrow>\n                   s1' = s2';\n        \\<And>s1' s2'.\n           seq c2 \\<and>\n           (c2, s) \\<rightarrow>t s1' \\<and>\n           (c2, s) \\<rightarrow>t s2' \\<longrightarrow>\n           s1' = s2'\\<rbrakk>\n       \\<Longrightarrow> seq (c1 ;; c2) \\<and>\n                         (c1 ;; c2, s) \\<rightarrow>t s1' \\<and>\n                         (c1 ;; c2, s) \\<rightarrow>t s2' \\<longrightarrow>\n                         s1' = s2'\n 3. \\<And>x1a c1 c2 s1' s2'.\n       \\<lbrakk>\\<And>s1' s2'.\n                   seq c1 \\<and>\n                   (c1, s) \\<rightarrow>t s1' \\<and>\n                   (c1, s) \\<rightarrow>t s2' \\<longrightarrow>\n                   s1' = s2';\n        \\<And>s1' s2'.\n           seq c2 \\<and>\n           (c2, s) \\<rightarrow>t s1' \\<and>\n           (c2, s) \\<rightarrow>t s2' \\<longrightarrow>\n           s1' = s2'\\<rbrakk>\n       \\<Longrightarrow> seq (if x1a then c1 else c2) \\<and>\n                         (if x1a then c1 else c2, s) \\<rightarrow>t\n                         s1' \\<and>\n                         (if x1a then c1 else c2, s) \\<rightarrow>t\n                         s2' \\<longrightarrow>\n                         s1' = s2'\n 4. \\<And>x1a c s1' s2'.\n       (\\<And>s1' s2'.\n           seq c \\<and>\n           (c, s) \\<rightarrow>t s1' \\<and>\n           (c, s) \\<rightarrow>t s2' \\<longrightarrow>\n           s1' = s2') \\<Longrightarrow>\n       seq (while x1a do c) \\<and>\n       (while x1a do c, s) \\<rightarrow>t s1' \\<and>\n       (while x1a do c, s) \\<rightarrow>t s2' \\<longrightarrow>\n       s1' = s2'\n 5. \\<And>c1 c2 s1' s2'.\n       \\<lbrakk>\\<And>s1' s2'.\n                   seq c1 \\<and>\n                   (c1, s) \\<rightarrow>t s1' \\<and>\n                   (c1, s) \\<rightarrow>t s2' \\<longrightarrow>\n                   s1' = s2';\n        \\<And>s1' s2'.\n           seq c2 \\<and>\n           (c2, s) \\<rightarrow>t s1' \\<and>\n           (c2, s) \\<rightarrow>t s2' \\<longrightarrow>\n           s1' = s2'\\<rbrakk>\n       \\<Longrightarrow> seq (c1 | c2) \\<and>\n                         (c1 | c2, s) \\<rightarrow>t s1' \\<and>\n                         (c1 | c2, s) \\<rightarrow>t s2' \\<longrightarrow>\n                         s1' = s2'", "by auto"], ["proof (state)\nthis:\n  seq c \\<and>\n  (c, s) \\<rightarrow>t s1' \\<and>\n  (c, s) \\<rightarrow>t s2' \\<longrightarrow>\n  s1' = s2'\n\ngoal (1 subgoal):\n 1. determOn (\\<lambda>(c, s). seq c) (\\<rightarrow>t)", "}"], ["proof (state)\nthis:\n  seq ?c2 \\<and>\n  (?c2, ?s2) \\<rightarrow>t ?s1'2 \\<and>\n  (?c2, ?s2) \\<rightarrow>t ?s2'2 \\<longrightarrow>\n  ?s1'2 = ?s2'2\n\ngoal (1 subgoal):\n 1. determOn (\\<lambda>(c, s). seq c) (\\<rightarrow>t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  seq ?c2 \\<and>\n  (?c2, ?s2) \\<rightarrow>t ?s1'2 \\<and>\n  (?c2, ?s2) \\<rightarrow>t ?s2'2 \\<longrightarrow>\n  ?s1'2 = ?s2'2\n\ngoal (1 subgoal):\n 1. determOn (\\<lambda>(c, s). seq c) (\\<rightarrow>t)", "unfolding determOn_def"], ["proof (prove)\nusing this:\n  seq ?c2 \\<and>\n  (?c2, ?s2) \\<rightarrow>t ?s1'2 \\<and>\n  (?c2, ?s2) \\<rightarrow>t ?s2'2 \\<longrightarrow>\n  ?s1'2 = ?s2'2\n\ngoal (1 subgoal):\n 1. \\<forall>a b b'.\n       (case a of (c, s) \\<Rightarrow> seq c) \\<and>\n       a \\<rightarrow>t b \\<and> a \\<rightarrow>t b' \\<longrightarrow>\n       b = b'", "by fastforce"], ["proof (state)\nthis:\n  determOn (\\<lambda>(c, s). seq c) (\\<rightarrow>t)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* context PL *)\n(*******************************************)"], ["", "end"]]}