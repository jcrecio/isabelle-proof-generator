{"file_name": "/home/qj213/afp-2021-10-22/thys/Floyd_Warshall/Recursion_Combinators.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Floyd_Warshall", "problem_names": ["lemma for_comb_for_rec: \"for_comb f a n = for_rec f a n\"", "lemma for_rec2_for_rec2':\n  \"for_rec2 f a n i j = for_rec2' f a n i j\"", "lemma for_rec3_for_rec3':\n  \"for_rec3 f a n k i j = for_rec3' f a n k i j\"", "lemma for_rec2'_for_rec:\n  \"for_rec2' f a n n n =\n    for_rec (\\<lambda>a i. for_rec (\\<lambda> a. f a i) a n) a n\"", "lemma for_rec3'_for_rec:\n  \"for_rec3' f a n n n n =\n    for_rec (\\<lambda> a k. for_rec (\\<lambda>a i. for_rec (\\<lambda> a. f a k i) a n) a n) a n\"", "theorem for_rec_eq:\n  \"for_rec f a n = nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a\"", "theorem for_rec2_eq:\n  \"for_rec2 f a n n n =\n     nfoldli [0..<n + 1] (\\<lambda>x. True)\n           (\\<lambda>i. nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>j a. f a i j)) a\"", "theorem for_rec3_eq:\n  \"for_rec3 f a n n n n =\n    nfoldli [0..<n + 1] (\\<lambda>x. True)\n     (\\<lambda>k. nfoldli [0..<n + 1] (\\<lambda>x. True)\n           (\\<lambda>i. nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>j a. f a k i j)))\n     a\"", "lemmas [intf_of_assn] = intf_of_assnI[where R= \"is_mtx n\" and 'a= \"'b i_mtx\" for n]"], "translations": [["", "lemma for_comb_for_rec: \"for_comb f a n = for_rec f a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. for_comb f a n = for_rec f a n", "unfolding for_comb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n    for_rec f a n", "proof (induction f a n rule: for_rec.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f a.\n       nfoldli [0..<0 + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a 0\n 2. \\<And>f a n.\n       nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a n \\<Longrightarrow>\n       nfoldli [0..<Suc n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a (Suc n)", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>f a.\n       nfoldli [0..<0 + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a 0\n 2. \\<And>f a n.\n       nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a n \\<Longrightarrow>\n       nfoldli [0..<Suc n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a (Suc n)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nfoldli [0..<0 + 1] (\\<lambda>x. True) (\\<lambda>k a. f_ a k) a_ =\n    for_rec f_ a_ 0", "by (auto simp: pw_eq_iff refine_pw_simps)"], ["proof (state)\nthis:\n  nfoldli [0..<0 + 1] (\\<lambda>x. True) (\\<lambda>k a. f_ a k) a_ =\n  for_rec f_ a_ 0\n\ngoal (1 subgoal):\n 1. \\<And>f a n.\n       nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a n \\<Longrightarrow>\n       nfoldli [0..<Suc n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f a n.\n       nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a n \\<Longrightarrow>\n       nfoldli [0..<Suc n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a (Suc n)", "case IH: (2 a n)"], ["proof (state)\nthis:\n  nfoldli [0..<n_ + 1] (\\<lambda>x. True) (\\<lambda>k a. a a k) n =\n  for_rec a n n_\n\ngoal (1 subgoal):\n 1. \\<And>f a n.\n       nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a n \\<Longrightarrow>\n       nfoldli [0..<Suc n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a =\n       for_rec f a (Suc n)", "then"], ["proof (chain)\npicking this:\n  nfoldli [0..<n_ + 1] (\\<lambda>x. True) (\\<lambda>k a. a a k) n =\n  for_rec a n n_", "show ?case"], ["proof (prove)\nusing this:\n  nfoldli [0..<n_ + 1] (\\<lambda>x. True) (\\<lambda>k a. a a k) n =\n  for_rec a n n_\n\ngoal (1 subgoal):\n 1. nfoldli [0..<Suc n_ + 1] (\\<lambda>x. True) (\\<lambda>k a. a a k) n =\n    for_rec a n (Suc n_)", "by (fastforce simp: nfoldli_append pw_eq_iff refine_pw_simps)"], ["proof (state)\nthis:\n  nfoldli [0..<Suc n_ + 1] (\\<lambda>x. True) (\\<lambda>k a. a a k) n =\n  for_rec a n (Suc n_)\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "definition for_rec2' where\n  \"for_rec2' f a n i j =\n    (if i = 0 then RETURN a else for_rec (\\<lambda>a i. for_rec (\\<lambda> a. f a i) a n) a (i - 1))\n    \\<bind> (\\<lambda> a. for_rec (\\<lambda> a. f a i) a j)\""], ["", "fun for_rec2 :: \"('a \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> 'a nres) \\<Rightarrow> 'a \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> 'a nres\" where\n  \"for_rec2 f a n 0 0 = f a 0 0\" |\n  \"for_rec2 f a n (Suc i) 0 = for_rec2 f a n i n \\<bind> (\\<lambda> a. f a (Suc i) 0)\" |\n  \"for_rec2 f a n i (Suc j) = for_rec2 f a n i j \\<bind> (\\<lambda> a. f a i (Suc j))\""], ["", "private"], ["", "lemma for_rec2_for_rec2':\n  \"for_rec2 f a n i j = for_rec2' f a n i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. for_rec2 f a n i j = for_rec2' f a n i j", "unfolding for_rec2'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. for_rec2 f a n i j =\n    (if i = 0 then RETURN a\n     else for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n           (i - 1)) \\<bind>\n    (\\<lambda>a. for_rec (\\<lambda>a. f a i) a j)", "apply (induction f a n i j rule: for_rec2.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f a n.\n       for_rec2 f a n 0 0 =\n       (if 0 = 0 then RETURN a\n        else for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n              (0 - 1)) \\<bind>\n       (\\<lambda>a. for_rec (\\<lambda>a. f a 0) a 0)\n 2. \\<And>f a n i.\n       for_rec2 f a n i n =\n       (if i = 0 then RETURN a\n        else for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n              (i - 1)) \\<bind>\n       (\\<lambda>a. for_rec (\\<lambda>a. f a i) a n) \\<Longrightarrow>\n       for_rec2 f a n (Suc i) 0 =\n       (if Suc i = 0 then RETURN a\n        else for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n              (Suc i - 1)) \\<bind>\n       (\\<lambda>a. for_rec (\\<lambda>a. f a (Suc i)) a 0)\n 3. \\<And>f a n i j.\n       for_rec2 f a n i j =\n       (if i = 0 then RETURN a\n        else for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n              (i - 1)) \\<bind>\n       (\\<lambda>a. for_rec (\\<lambda>a. f a i) a j) \\<Longrightarrow>\n       for_rec2 f a n i (Suc j) =\n       (if i = 0 then RETURN a\n        else for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n              (i - 1)) \\<bind>\n       (\\<lambda>a. for_rec (\\<lambda>a. f a i) a (Suc j))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f a n i.\n       for_rec2 f a n i n =\n       (if i = 0\n        then RETURN a \\<bind> (\\<lambda>a. for_rec (\\<lambda>a. f a i) a n)\n        else for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n              (i - 1) \\<bind>\n             (\\<lambda>a.\n                 for_rec (\\<lambda>a. f a i) a n)) \\<Longrightarrow>\n       0 < i \\<longrightarrow>\n       for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n        (i - Suc 0) \\<bind>\n       (\\<lambda>x.\n           for_rec (\\<lambda>a. f a i) x n \\<bind>\n           (\\<lambda>a. f a (Suc i) 0)) =\n       for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a i \\<bind>\n       (\\<lambda>a. f a (Suc i) 0)", "subgoal for f a n i"], ["proof (prove)\ngoal (1 subgoal):\n 1. for_rec2 f a n i n =\n    (if i = 0\n     then RETURN a \\<bind> (\\<lambda>a. for_rec (\\<lambda>a. f a i) a n)\n     else for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n           (i - 1) \\<bind>\n          (\\<lambda>a. for_rec (\\<lambda>a. f a i) a n)) \\<Longrightarrow>\n    0 < i \\<longrightarrow>\n    for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n     (i - Suc 0) \\<bind>\n    (\\<lambda>x.\n        for_rec (\\<lambda>a. f a i) x n \\<bind>\n        (\\<lambda>a. f a (Suc i) 0)) =\n    for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a i \\<bind>\n    (\\<lambda>a. f a (Suc i) 0)", "apply (cases i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>for_rec2 f a n i n =\n             (if i = 0\n              then RETURN a \\<bind>\n                   (\\<lambda>a. for_rec (\\<lambda>a. f a i) a n)\n              else for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n                    (i - 1) \\<bind>\n                   (\\<lambda>a. for_rec (\\<lambda>a. f a i) a n));\n     i = 0\\<rbrakk>\n    \\<Longrightarrow> 0 < i \\<longrightarrow>\n                      for_rec\n                       (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n                       (i - Suc 0) \\<bind>\n                      (\\<lambda>x.\n                          for_rec (\\<lambda>a. f a i) x n \\<bind>\n                          (\\<lambda>a. f a (Suc i) 0)) =\n                      for_rec\n                       (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n                       i \\<bind>\n                      (\\<lambda>a. f a (Suc i) 0)\n 2. \\<And>nat.\n       \\<lbrakk>for_rec2 f a n i n =\n                (if i = 0\n                 then RETURN a \\<bind>\n                      (\\<lambda>a. for_rec (\\<lambda>a. f a i) a n)\n                 else for_rec\n                       (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n                       (i - 1) \\<bind>\n                      (\\<lambda>a. for_rec (\\<lambda>a. f a i) a n));\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> 0 < i \\<longrightarrow>\n                         for_rec\n                          (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n                          (i - Suc 0) \\<bind>\n                         (\\<lambda>x.\n                             for_rec (\\<lambda>a. f a i) x n \\<bind>\n                             (\\<lambda>a. f a (Suc i) 0)) =\n                         for_rec\n                          (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n                          i \\<bind>\n                         (\\<lambda>a. f a (Suc i) 0)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "fun for_rec3 :: \"('a \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> 'a nres) \\<Rightarrow> 'a \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> 'a nres\"\nwhere\n  \"for_rec3 f m n 0       0       0        = f m 0 0 0\" |\n  \"for_rec3 f m n (Suc k) 0       0        = for_rec3 f m n k n n \\<bind> (\\<lambda> a. f a (Suc k) 0 0)\" |\n  \"for_rec3 f m n k       (Suc i) 0        = for_rec3 f m n k i n \\<bind> (\\<lambda> a. f a k (Suc i) 0)\" |\n  \"for_rec3 f m n k       i       (Suc j)  = for_rec3 f m n k i j \\<bind> (\\<lambda> a. f a k i (Suc j))\""], ["", "private"], ["", "definition for_rec3' where\n  \"for_rec3' f a n k i j =\n    (if k = 0 then RETURN a else for_rec (\\<lambda>a k. for_rec2' (\\<lambda> a. f a k) a n n n) a (k - 1))\n    \\<bind> (\\<lambda> a. for_rec2' (\\<lambda> a. f a k) a n i j)\""], ["", "private"], ["", "lemma for_rec3_for_rec3':\n  \"for_rec3 f a n k i j = for_rec3' f a n k i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. for_rec3 f a n k i j = for_rec3' f a n k i j", "unfolding for_rec3'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. for_rec3 f a n k i j =\n    (if k = 0 then RETURN a\n     else for_rec (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n) a\n           (k - 1)) \\<bind>\n    (\\<lambda>a. for_rec2' (\\<lambda>a. f a k) a n i j)", "apply (induction f a n k i j rule: for_rec3.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f m n.\n       for_rec3 f m n 0 0 0 =\n       (if 0 = 0 then RETURN m\n        else for_rec (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n) m\n              (0 - 1)) \\<bind>\n       (\\<lambda>a. for_rec2' (\\<lambda>a. f a 0) a n 0 0)\n 2. \\<And>f m n k.\n       for_rec3 f m n k n n =\n       (if k = 0 then RETURN m\n        else for_rec (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n) m\n              (k - 1)) \\<bind>\n       (\\<lambda>a. for_rec2' (\\<lambda>a. f a k) a n n n) \\<Longrightarrow>\n       for_rec3 f m n (Suc k) 0 0 =\n       (if Suc k = 0 then RETURN m\n        else for_rec (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n) m\n              (Suc k - 1)) \\<bind>\n       (\\<lambda>a. for_rec2' (\\<lambda>a. f a (Suc k)) a n 0 0)\n 3. \\<And>f m n k i.\n       for_rec3 f m n k i n =\n       (if k = 0 then RETURN m\n        else for_rec (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n) m\n              (k - 1)) \\<bind>\n       (\\<lambda>a. for_rec2' (\\<lambda>a. f a k) a n i n) \\<Longrightarrow>\n       for_rec3 f m n k (Suc i) 0 =\n       (if k = 0 then RETURN m\n        else for_rec (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n) m\n              (k - 1)) \\<bind>\n       (\\<lambda>a. for_rec2' (\\<lambda>a. f a k) a n (Suc i) 0)\n 4. \\<And>f m n k i j.\n       for_rec3 f m n k i j =\n       (if k = 0 then RETURN m\n        else for_rec (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n) m\n              (k - 1)) \\<bind>\n       (\\<lambda>a. for_rec2' (\\<lambda>a. f a k) a n i j) \\<Longrightarrow>\n       for_rec3 f m n k i (Suc j) =\n       (if k = 0 then RETURN m\n        else for_rec (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n) m\n              (k - 1)) \\<bind>\n       (\\<lambda>a. for_rec2' (\\<lambda>a. f a k) a n i (Suc j))", "apply (simp_all add: for_rec2_for_rec2'[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f m n k.\n       for_rec3 f m n k n n =\n       (if k = 0\n        then RETURN m \\<bind>\n             (\\<lambda>a. for_rec2 (\\<lambda>a. f a k) a n n n)\n        else for_rec (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n) m\n              (k - 1) \\<bind>\n             (\\<lambda>a.\n                 for_rec2 (\\<lambda>a. f a k) a n n n)) \\<Longrightarrow>\n       0 < k \\<longrightarrow>\n       for_rec (\\<lambda>a k. for_rec2 (\\<lambda>a. f a k) a n n n) m\n        (k - Suc 0) \\<bind>\n       (\\<lambda>x.\n           for_rec2 (\\<lambda>a. f a k) x n n n \\<bind>\n           (\\<lambda>a. f a (Suc k) 0 0)) =\n       for_rec (\\<lambda>a k. for_rec2 (\\<lambda>a. f a k) a n n n) m\n        k \\<bind>\n       (\\<lambda>a. f a (Suc k) 0 0)", "subgoal for f a n k"], ["proof (prove)\ngoal (1 subgoal):\n 1. for_rec3 f a n k n n =\n    (if k = 0\n     then RETURN a \\<bind>\n          (\\<lambda>a. for_rec2 (\\<lambda>a. f a k) a n n n)\n     else for_rec (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n) a\n           (k - 1) \\<bind>\n          (\\<lambda>a.\n              for_rec2 (\\<lambda>a. f a k) a n n n)) \\<Longrightarrow>\n    0 < k \\<longrightarrow>\n    for_rec (\\<lambda>a k. for_rec2 (\\<lambda>a. f a k) a n n n) a\n     (k - Suc 0) \\<bind>\n    (\\<lambda>x.\n        for_rec2 (\\<lambda>a. f a k) x n n n \\<bind>\n        (\\<lambda>a. f a (Suc k) 0 0)) =\n    for_rec (\\<lambda>a k. for_rec2 (\\<lambda>a. f a k) a n n n) a k \\<bind>\n    (\\<lambda>a. f a (Suc k) 0 0)", "apply (cases k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>for_rec3 f a n k n n =\n             (if k = 0\n              then RETURN a \\<bind>\n                   (\\<lambda>a. for_rec2 (\\<lambda>a. f a k) a n n n)\n              else for_rec\n                    (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n) a\n                    (k - 1) \\<bind>\n                   (\\<lambda>a. for_rec2 (\\<lambda>a. f a k) a n n n));\n     k = 0\\<rbrakk>\n    \\<Longrightarrow> 0 < k \\<longrightarrow>\n                      for_rec\n                       (\\<lambda>a k. for_rec2 (\\<lambda>a. f a k) a n n n)\n                       a (k - Suc 0) \\<bind>\n                      (\\<lambda>x.\n                          for_rec2 (\\<lambda>a. f a k) x n n n \\<bind>\n                          (\\<lambda>a. f a (Suc k) 0 0)) =\n                      for_rec\n                       (\\<lambda>a k. for_rec2 (\\<lambda>a. f a k) a n n n)\n                       a k \\<bind>\n                      (\\<lambda>a. f a (Suc k) 0 0)\n 2. \\<And>nat.\n       \\<lbrakk>for_rec3 f a n k n n =\n                (if k = 0\n                 then RETURN a \\<bind>\n                      (\\<lambda>a. for_rec2 (\\<lambda>a. f a k) a n n n)\n                 else for_rec\n                       (\\<lambda>a k. for_rec2' (\\<lambda>a. f a k) a n n n)\n                       a (k - 1) \\<bind>\n                      (\\<lambda>a. for_rec2 (\\<lambda>a. f a k) a n n n));\n        k = Suc nat\\<rbrakk>\n       \\<Longrightarrow> 0 < k \\<longrightarrow>\n                         for_rec\n                          (\\<lambda>a k.\n                              for_rec2 (\\<lambda>a. f a k) a n n n)\n                          a (k - Suc 0) \\<bind>\n                         (\\<lambda>x.\n                             for_rec2 (\\<lambda>a. f a k) x n n n \\<bind>\n                             (\\<lambda>a. f a (Suc k) 0 0)) =\n                         for_rec\n                          (\\<lambda>a k.\n                              for_rec2 (\\<lambda>a. f a k) a n n n)\n                          a k \\<bind>\n                         (\\<lambda>a. f a (Suc k) 0 0)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "private"], ["", "lemma for_rec2'_for_rec:\n  \"for_rec2' f a n n n =\n    for_rec (\\<lambda>a i. for_rec (\\<lambda> a. f a i) a n) a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. for_rec2' f a n n n =\n    for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a n", "unfolding for_rec2'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if n = 0 then RETURN a\n     else for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a\n           (n - 1)) \\<bind>\n    (\\<lambda>a. for_rec (\\<lambda>a. f a n) a n) =\n    for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a i) a n) a n", "by (cases n) auto"], ["", "private"], ["", "lemma for_rec3'_for_rec:\n  \"for_rec3' f a n n n n =\n    for_rec (\\<lambda> a k. for_rec (\\<lambda>a i. for_rec (\\<lambda> a. f a k i) a n) a n) a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. for_rec3' f a n n n n =\n    for_rec\n     (\\<lambda>a k.\n         for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a k i) a n) a n)\n     a n", "unfolding for_rec3'_def for_rec2'_for_rec"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if n = 0 then RETURN a\n     else for_rec\n           (\\<lambda>a k.\n               for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a k i) a n) a\n                n)\n           a (n - 1)) \\<bind>\n    (\\<lambda>a.\n        for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a n i) a n) a n) =\n    for_rec\n     (\\<lambda>a k.\n         for_rec (\\<lambda>a i. for_rec (\\<lambda>a. f a k i) a n) a n)\n     a n", "by (cases n) auto"], ["", "theorem for_rec_eq:\n  \"for_rec f a n = nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. for_rec f a n =\n    nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a", "using for_comb_for_rec[unfolded for_comb_def, symmetric]"], ["proof (prove)\nusing this:\n  for_rec ?f ?a ?n =\n  nfoldli [0..<?n + 1] (\\<lambda>x. True) (\\<lambda>k a. ?f a k) ?a\n\ngoal (1 subgoal):\n 1. for_rec f a n =\n    nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>k a. f a k) a", "."], ["", "theorem for_rec2_eq:\n  \"for_rec2 f a n n n =\n     nfoldli [0..<n + 1] (\\<lambda>x. True)\n           (\\<lambda>i. nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>j a. f a i j)) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. for_rec2 f a n n n =\n    nfoldli [0..<n + 1] (\\<lambda>x. True)\n     (\\<lambda>i.\n         nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>j a. f a i j))\n     a", "using\n  for_rec2'_for_rec[\n    unfolded for_rec2_for_rec2'[symmetric], unfolded for_comb_for_rec[symmetric] for_comb_def\n  ]"], ["proof (prove)\nusing this:\n  for_rec2 ?f ?a ?n ?n ?n =\n  nfoldli [0..<?n + 1] (\\<lambda>x. True)\n   (\\<lambda>k.\n       nfoldli [0..<?n + 1] (\\<lambda>x. True) (\\<lambda>ka a. ?f a k ka))\n   ?a\n\ngoal (1 subgoal):\n 1. for_rec2 f a n n n =\n    nfoldli [0..<n + 1] (\\<lambda>x. True)\n     (\\<lambda>i.\n         nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>j a. f a i j))\n     a", "."], ["", "theorem for_rec3_eq:\n  \"for_rec3 f a n n n n =\n    nfoldli [0..<n + 1] (\\<lambda>x. True)\n     (\\<lambda>k. nfoldli [0..<n + 1] (\\<lambda>x. True)\n           (\\<lambda>i. nfoldli [0..<n + 1] (\\<lambda>x. True) (\\<lambda>j a. f a k i j)))\n     a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. for_rec3 f a n n n n =\n    nfoldli [0..<n + 1] (\\<lambda>x. True)\n     (\\<lambda>k.\n         nfoldli [0..<n + 1] (\\<lambda>x. True)\n          (\\<lambda>i.\n              nfoldli [0..<n + 1] (\\<lambda>x. True)\n               (\\<lambda>j a. f a k i j)))\n     a", "using\n  for_rec3'_for_rec[\n    unfolded for_rec3_for_rec3'[symmetric], unfolded for_comb_for_rec[symmetric] for_comb_def\n  ]"], ["proof (prove)\nusing this:\n  for_rec3 ?f ?a ?n ?n ?n ?n =\n  nfoldli [0..<?n + 1] (\\<lambda>x. True)\n   (\\<lambda>k.\n       nfoldli [0..<?n + 1] (\\<lambda>x. True)\n        (\\<lambda>ka.\n            nfoldli [0..<?n + 1] (\\<lambda>x. True)\n             (\\<lambda>kb a. ?f a k ka kb)))\n   ?a\n\ngoal (1 subgoal):\n 1. for_rec3 f a n n n n =\n    nfoldli [0..<n + 1] (\\<lambda>x. True)\n     (\\<lambda>k.\n         nfoldli [0..<n + 1] (\\<lambda>x. True)\n          (\\<lambda>i.\n              nfoldli [0..<n + 1] (\\<lambda>x. True)\n               (\\<lambda>j a. f a k i j)))\n     a", "."], ["", "end"], ["", "lemmas [intf_of_assn] = intf_of_assnI[where R= \"is_mtx n\" and 'a= \"'b i_mtx\" for n]"], ["", "declare param_upt[sepref_import_param]"], ["", "end"]]}