{"file_name": "/home/qj213/afp-2021-10-22/thys/Transitive-Closure/RBT_Map_Set_Extension.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Transitive-Closure", "problem_names": ["lemma rs_subset [simp]:\n  \"rs_subset as bs = None \\<longleftrightarrow> rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs\"", "lemma rs_subset_list [simp]:\n  \"rs_subset_list as bs = None \\<longleftrightarrow> rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs\"", "lemma rs_Union [simp]:\n  \"rs.\\<alpha> (rs_Union qs) = \\<Union> (rs.\\<alpha> ` set qs)\"", "lemma rm_to_list_empty [simp]:\n  \"rm.to_list (rm.empty ()) = []\"", "lemma data_lookup:\n  \"data = \\<Union> {set (rm_set_lookup rm k) | k. True}\" (is \"_ = ?R\")", "lemma finite_data:\n  \"finite data\""], "translations": [["", "lemma rs_subset [simp]:\n  \"rs_subset as bs = None \\<longleftrightarrow> rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rs_subset as bs = None) = (rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (rs_subset as bs = None) = (rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs)", "let ?abort = \"\\<lambda> maybe. case maybe of None \\<Rightarrow> True | Some _ \\<Rightarrow> False\""], ["proof (state)\ngoal (1 subgoal):\n 1. (rs_subset as bs = None) = (rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs)", "let ?I = \"\\<lambda> aas maybe. maybe = None \\<longleftrightarrow> (\\<forall> a. a \\<in> rs.\\<alpha> as - aas \\<longrightarrow> a \\<in> rs.\\<alpha> bs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (rs_subset as bs = None) = (rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs)", "let ?it = \"rs_subset as bs\""], ["proof (state)\ngoal (1 subgoal):\n 1. (rs_subset as bs = None) = (rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs)", "have \"?I {} ?it \\<or> (\\<exists> it \\<subseteq> rs.\\<alpha> as. it \\<noteq> {} \\<and> \\<not> ?abort ?it \\<and> ?I it ?it)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rs_subset as bs = None) =\n    (\\<forall>a.\n        a \\<in> rs.\\<alpha> as - {} \\<longrightarrow>\n        a \\<in> rs.\\<alpha> bs) \\<or>\n    (\\<exists>it\\<subseteq>rs.\\<alpha> as.\n        it \\<noteq> {} \\<and>\n        \\<not> (case rs_subset as bs of None \\<Rightarrow> True\n                | Some x \\<Rightarrow> False) \\<and>\n        (rs_subset as bs = None) =\n        (\\<forall>a.\n            a \\<in> rs.\\<alpha> as - it \\<longrightarrow>\n            a \\<in> rs.\\<alpha> bs))", "unfolding rs_subset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rs.iteratei as (case_option True (\\<lambda>x. False))\n      (\\<lambda>a _. if rs.memb a bs then None else Some a) None =\n     None) =\n    (\\<forall>a.\n        a \\<in> rs.\\<alpha> as - {} \\<longrightarrow>\n        a \\<in> rs.\\<alpha> bs) \\<or>\n    (\\<exists>it\\<subseteq>rs.\\<alpha> as.\n        it \\<noteq> {} \\<and>\n        \\<not> (case rs.iteratei as (case_option True (\\<lambda>x. False))\n                      (\\<lambda>a _. if rs.memb a bs then None else Some a)\n                      None of\n                None \\<Rightarrow> True | Some x \\<Rightarrow> False) \\<and>\n        (rs.iteratei as (case_option True (\\<lambda>x. False))\n          (\\<lambda>a _. if rs.memb a bs then None else Some a) None =\n         None) =\n        (\\<forall>a.\n            a \\<in> rs.\\<alpha> as - it \\<longrightarrow>\n            a \\<in> rs.\\<alpha> bs))", "by (rule rs.iteratei_rule_P [where I=\"?I\"]) (auto simp: rs.correct)"], ["proof (state)\nthis:\n  (rs_subset as bs = None) =\n  (\\<forall>a.\n      a \\<in> rs.\\<alpha> as - {} \\<longrightarrow>\n      a \\<in> rs.\\<alpha> bs) \\<or>\n  (\\<exists>it\\<subseteq>rs.\\<alpha> as.\n      it \\<noteq> {} \\<and>\n      \\<not> (case rs_subset as bs of None \\<Rightarrow> True\n              | Some x \\<Rightarrow> False) \\<and>\n      (rs_subset as bs = None) =\n      (\\<forall>a.\n          a \\<in> rs.\\<alpha> as - it \\<longrightarrow>\n          a \\<in> rs.\\<alpha> bs))\n\ngoal (1 subgoal):\n 1. (rs_subset as bs = None) = (rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs)", "then"], ["proof (chain)\npicking this:\n  (rs_subset as bs = None) =\n  (\\<forall>a.\n      a \\<in> rs.\\<alpha> as - {} \\<longrightarrow>\n      a \\<in> rs.\\<alpha> bs) \\<or>\n  (\\<exists>it\\<subseteq>rs.\\<alpha> as.\n      it \\<noteq> {} \\<and>\n      \\<not> (case rs_subset as bs of None \\<Rightarrow> True\n              | Some x \\<Rightarrow> False) \\<and>\n      (rs_subset as bs = None) =\n      (\\<forall>a.\n          a \\<in> rs.\\<alpha> as - it \\<longrightarrow>\n          a \\<in> rs.\\<alpha> bs))", "show ?thesis"], ["proof (prove)\nusing this:\n  (rs_subset as bs = None) =\n  (\\<forall>a.\n      a \\<in> rs.\\<alpha> as - {} \\<longrightarrow>\n      a \\<in> rs.\\<alpha> bs) \\<or>\n  (\\<exists>it\\<subseteq>rs.\\<alpha> as.\n      it \\<noteq> {} \\<and>\n      \\<not> (case rs_subset as bs of None \\<Rightarrow> True\n              | Some x \\<Rightarrow> False) \\<and>\n      (rs_subset as bs = None) =\n      (\\<forall>a.\n          a \\<in> rs.\\<alpha> as - it \\<longrightarrow>\n          a \\<in> rs.\\<alpha> bs))\n\ngoal (1 subgoal):\n 1. (rs_subset as bs = None) = (rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs)", "by auto"], ["proof (state)\nthis:\n  (rs_subset as bs = None) = (rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition rs_subset_list :: \"('a :: linorder) rs \\<Rightarrow> 'a rs \\<Rightarrow> 'a option\"\nwhere\n  \"rs_subset_list as bs = sorted_list_subset (rs.to_sorted_list as) (rs.to_sorted_list bs)\""], ["", "lemma rs_subset_list [simp]:\n  \"rs_subset_list as bs = None \\<longleftrightarrow> rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rs_subset_list as bs = None) =\n    (rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs)", "unfolding rs_subset_list_def\n    sorted_list_subset[OF rs.to_sorted_list_correct(3)[OF rs.invar, of as]\n    rs.to_sorted_list_correct(3)[OF rs.invar, of bs]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (set (rs.to_sorted_list as) \\<subseteq> set (rs.to_sorted_list bs)) =\n    (rs.\\<alpha> as \\<subseteq> rs.\\<alpha> bs)", "by (simp add: rs.to_sorted_list_correct)"], ["", "definition rs_Union :: \"('q :: linorder) rs list \\<Rightarrow> 'q rs\"\nwhere\n  \"rs_Union = foldl rs.union (rs.empty ())\""], ["", "lemma rs_Union [simp]:\n  \"rs.\\<alpha> (rs_Union qs) = \\<Union> (rs.\\<alpha> ` set qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs.\\<alpha> (rs_Union qs) = \\<Union> (rs.\\<alpha> ` set qs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rs.\\<alpha> (rs_Union qs) = \\<Union> (rs.\\<alpha> ` set qs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. rs.\\<alpha> (rs_Union qs) = \\<Union> (rs.\\<alpha> ` set qs)", "fix start"], ["proof (state)\ngoal (1 subgoal):\n 1. rs.\\<alpha> (rs_Union qs) = \\<Union> (rs.\\<alpha> ` set qs)", "have \"rs.\\<alpha> (foldl rs.union start qs) = rs.\\<alpha> start \\<union> \\<Union> (rs.\\<alpha> ` set qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs.\\<alpha> (foldl rs.union start qs) =\n    rs.\\<alpha> start \\<union> \\<Union> (rs.\\<alpha> ` set qs)", "by (induct qs arbitrary: start, auto simp: rs.correct)"], ["proof (state)\nthis:\n  rs.\\<alpha> (foldl rs.union start qs) =\n  rs.\\<alpha> start \\<union> \\<Union> (rs.\\<alpha> ` set qs)\n\ngoal (1 subgoal):\n 1. rs.\\<alpha> (rs_Union qs) = \\<Union> (rs.\\<alpha> ` set qs)", "}"], ["proof (state)\nthis:\n  rs.\\<alpha> (foldl rs.union ?start2 qs) =\n  rs.\\<alpha> ?start2 \\<union> \\<Union> (rs.\\<alpha> ` set qs)\n\ngoal (1 subgoal):\n 1. rs.\\<alpha> (rs_Union qs) = \\<Union> (rs.\\<alpha> ` set qs)", "from this[of \"rs.empty ()\"]"], ["proof (chain)\npicking this:\n  rs.\\<alpha> (foldl rs.union (rs.empty ()) qs) =\n  rs.\\<alpha> (rs.empty ()) \\<union> \\<Union> (rs.\\<alpha> ` set qs)", "show ?thesis"], ["proof (prove)\nusing this:\n  rs.\\<alpha> (foldl rs.union (rs.empty ()) qs) =\n  rs.\\<alpha> (rs.empty ()) \\<union> \\<Union> (rs.\\<alpha> ` set qs)\n\ngoal (1 subgoal):\n 1. rs.\\<alpha> (rs_Union qs) = \\<Union> (rs.\\<alpha> ` set qs)", "unfolding rs_Union_def"], ["proof (prove)\nusing this:\n  rs.\\<alpha> (foldl rs.union (rs.empty ()) qs) =\n  rs.\\<alpha> (rs.empty ()) \\<union> \\<Union> (rs.\\<alpha> ` set qs)\n\ngoal (1 subgoal):\n 1. rs.\\<alpha> (foldl rs.union (rs.empty ()) qs) =\n    \\<Union> (rs.\\<alpha> ` set qs)", "by (auto simp: rs.correct)"], ["proof (state)\nthis:\n  rs.\\<alpha> (rs_Union qs) = \\<Union> (rs.\\<alpha> ` set qs)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Grouping Values via Keys\\<close>"], ["", "text \\<open>\n  The functions to produce the index (@{term elem_list_to_rm}) and the lookup function (@{term\n  rm_set_lookup}) are straight-forward, however it requires some tedious reasoning that they perform\n  as they should.\n\\<close>"], ["", "fun elem_list_to_rm :: \"('d \\<Rightarrow> 'k :: linorder) \\<Rightarrow> 'd list \\<Rightarrow> ('k, 'd list) rm\"\nwhere\n  \"elem_list_to_rm key [] = rm.empty ()\" |\n  \"elem_list_to_rm key (d # ds) =\n    (let\n      rm = elem_list_to_rm key ds;\n      k = key d\n    in\n      (case rm.\\<alpha> rm k of\n        None \\<Rightarrow> rm.update_dj k [d] rm\n      | Some data \\<Rightarrow> rm.update k (d # data) rm))\""], ["", "definition \"rm_set_lookup rm = (\\<lambda> a. (case rm.\\<alpha> rm a of None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules))\""], ["", "lemma rm_to_list_empty [simp]:\n  \"rm.to_list (rm.empty ()) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rm.to_list (rm.empty ()) = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rm.to_list (rm.empty ()) = []", "have \"map_of (rm.to_list (rm.empty ())) = Map.empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (rm.to_list (rm.empty ())) = Map.empty", "by (simp add: rm.correct)"], ["proof (state)\nthis:\n  map_of (rm.to_list (rm.empty ())) = Map.empty\n\ngoal (1 subgoal):\n 1. rm.to_list (rm.empty ()) = []", "moreover"], ["proof (state)\nthis:\n  map_of (rm.to_list (rm.empty ())) = Map.empty\n\ngoal (1 subgoal):\n 1. rm.to_list (rm.empty ()) = []", "have map_of_empty_iff: \"\\<And>l. map_of l = Map.empty \\<longleftrightarrow> l = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l. (map_of l = Map.empty) = (l = [])", "by (case_tac l) auto"], ["proof (state)\nthis:\n  (map_of ?l1 = Map.empty) = (?l1 = [])\n\ngoal (1 subgoal):\n 1. rm.to_list (rm.empty ()) = []", "ultimately"], ["proof (chain)\npicking this:\n  map_of (rm.to_list (rm.empty ())) = Map.empty\n  (map_of ?l1 = Map.empty) = (?l1 = [])", "show ?thesis"], ["proof (prove)\nusing this:\n  map_of (rm.to_list (rm.empty ())) = Map.empty\n  (map_of ?l1 = Map.empty) = (?l1 = [])\n\ngoal (1 subgoal):\n 1. rm.to_list (rm.empty ()) = []", "by metis"], ["proof (state)\nthis:\n  rm.to_list (rm.empty ()) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "locale rm_set = \n  fixes rm :: \"('k :: linorder, 'd list) rm\"\n    and key :: \"'d \\<Rightarrow> 'k\"\n    and data :: \"'d set\"\n  assumes rm_set_lookup: \"\\<And> k. set (rm_set_lookup rm k) = {d \\<in> data. key d = k}\"\nbegin"], ["", "lemma data_lookup:\n  \"data = \\<Union> {set (rm_set_lookup rm k) | k. True}\" (is \"_ = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "assume d: \"d \\<in> data\""], ["proof (state)\nthis:\n  d \\<in> data\n\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "then"], ["proof (chain)\npicking this:\n  d \\<in> data", "have d: \"d \\<in> {d' \\<in> data. key d' = key d}\""], ["proof (prove)\nusing this:\n  d \\<in> data\n\ngoal (1 subgoal):\n 1. d \\<in> {d' \\<in> data. key d' = key d}", "by auto"], ["proof (state)\nthis:\n  d \\<in> {d' \\<in> data. key d' = key d}\n\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "have \"d \\<in> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<in> \\<Union> {set (rm_set_lookup rm k) |k. True}", "by (rule UnionI[OF _ d], rule CollectI, rule exI[of _ \"key d\"], unfold rm_set_lookup[of \"key d\"], simp)"], ["proof (state)\nthis:\n  d \\<in> \\<Union> {set (rm_set_lookup rm k) |k. True}\n\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "}"], ["proof (state)\nthis:\n  ?d2 \\<in> data \\<Longrightarrow>\n  ?d2 \\<in> \\<Union> {set (rm_set_lookup rm k) |k. True}\n\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "moreover"], ["proof (state)\nthis:\n  ?d2 \\<in> data \\<Longrightarrow>\n  ?d2 \\<in> \\<Union> {set (rm_set_lookup rm k) |k. True}\n\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "{"], ["proof (state)\nthis:\n  ?d2 \\<in> data \\<Longrightarrow>\n  ?d2 \\<in> \\<Union> {set (rm_set_lookup rm k) |k. True}\n\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "assume \"d \\<in> ?R\""], ["proof (state)\nthis:\n  d \\<in> \\<Union> {set (rm_set_lookup rm k) |k. True}\n\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "from this[unfolded rm_set_lookup]"], ["proof (chain)\npicking this:\n  d \\<in> \\<Union> {{d \\<in> data. key d = k} |k. True}", "have \"d \\<in> data\""], ["proof (prove)\nusing this:\n  d \\<in> \\<Union> {{d \\<in> data. key d = k} |k. True}\n\ngoal (1 subgoal):\n 1. d \\<in> data", "by auto"], ["proof (state)\nthis:\n  d \\<in> data\n\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "}"], ["proof (state)\nthis:\n  ?d2 \\<in> \\<Union> {set (rm_set_lookup rm k) |k. True} \\<Longrightarrow>\n  ?d2 \\<in> data\n\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "ultimately"], ["proof (chain)\npicking this:\n  ?d2 \\<in> data \\<Longrightarrow>\n  ?d2 \\<in> \\<Union> {set (rm_set_lookup rm k) |k. True}\n  ?d2 \\<in> \\<Union> {set (rm_set_lookup rm k) |k. True} \\<Longrightarrow>\n  ?d2 \\<in> data", "show ?thesis"], ["proof (prove)\nusing this:\n  ?d2 \\<in> data \\<Longrightarrow>\n  ?d2 \\<in> \\<Union> {set (rm_set_lookup rm k) |k. True}\n  ?d2 \\<in> \\<Union> {set (rm_set_lookup rm k) |k. True} \\<Longrightarrow>\n  ?d2 \\<in> data\n\ngoal (1 subgoal):\n 1. data = \\<Union> {set (rm_set_lookup rm k) |k. True}", "by blast"], ["proof (state)\nthis:\n  data = \\<Union> {set (rm_set_lookup rm k) |k. True}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_data:\n  \"finite data\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite data", "unfolding data_lookup"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> {set (rm_set_lookup rm k) |k. True})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {set (rm_set_lookup rm k) |k. True}\n 2. \\<And>M.\n       M \\<in> {set (rm_set_lookup rm k) |k. True} \\<Longrightarrow>\n       finite M", "show \"finite {set (rm_set_lookup rm k) | k. True}\" (is \"finite ?L\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {set (rm_set_lookup rm k) |k. True}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {set (rm_set_lookup rm k) |k. True}", "let ?rmset = \"rm.\\<alpha> rm\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite {set (rm_set_lookup rm k) |k. True}", "let ?M = \"?rmset ` Map.dom ?rmset\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite {set (rm_set_lookup rm k) |k. True}", "let ?N = \"((\\<lambda> e. set (case e of None \\<Rightarrow> [] | Some ds \\<Rightarrow> ds)) ` ?M)\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite {set (rm_set_lookup rm k) |k. True}", "let ?K = \"?N \\<union> {{}}\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite {set (rm_set_lookup rm k) |k. True}", "from rm.finite[of rm]"], ["proof (chain)\npicking this:\n  rm.invar rm \\<Longrightarrow> finite (dom (rm.\\<alpha> rm))", "have fin: \"finite ?K\""], ["proof (prove)\nusing this:\n  rm.invar rm \\<Longrightarrow> finite (dom (rm.\\<alpha> rm))\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>e.\n          set (case e of None \\<Rightarrow> []\n               | Some ds \\<Rightarrow> ds)) `\n      rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n      {{}})", "by auto"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>e.\n        set (case e of None \\<Rightarrow> [] | Some ds \\<Rightarrow> ds)) `\n    rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n    {{}})\n\ngoal (1 subgoal):\n 1. finite {set (rm_set_lookup rm k) |k. True}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {set (rm_set_lookup rm k) |k. True}", "proof (rule finite_subset[OF _ fin], rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {set (rm_set_lookup rm k) |k. True} \\<Longrightarrow>\n       x \\<in> (\\<lambda>e.\n                   set (case e of None \\<Rightarrow> []\n                        | Some ds \\<Rightarrow> ds)) `\n               rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n               {{}}", "fix ds"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {set (rm_set_lookup rm k) |k. True} \\<Longrightarrow>\n       x \\<in> (\\<lambda>e.\n                   set (case e of None \\<Rightarrow> []\n                        | Some ds \\<Rightarrow> ds)) `\n               rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n               {{}}", "assume \"ds \\<in> ?L\""], ["proof (state)\nthis:\n  ds \\<in> {set (rm_set_lookup rm k) |k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {set (rm_set_lookup rm k) |k. True} \\<Longrightarrow>\n       x \\<in> (\\<lambda>e.\n                   set (case e of None \\<Rightarrow> []\n                        | Some ds \\<Rightarrow> ds)) `\n               rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n               {{}}", "from this[unfolded rm_set_lookup_def]"], ["proof (chain)\npicking this:\n  ds \\<in> {set (case rm.\\<alpha> rm k of None \\<Rightarrow> []\n                 | Some rules \\<Rightarrow> rules) |\n            k. True}", "obtain fn where ds: \"ds = set (case rm.\\<alpha> rm fn of None \\<Rightarrow> []\n          | Some ds \\<Rightarrow> ds)\""], ["proof (prove)\nusing this:\n  ds \\<in> {set (case rm.\\<alpha> rm k of None \\<Rightarrow> []\n                 | Some rules \\<Rightarrow> rules) |\n            k. True}\n\ngoal (1 subgoal):\n 1. (\\<And>fn.\n        ds =\n        set (case rm.\\<alpha> rm fn of None \\<Rightarrow> []\n             | Some ds \\<Rightarrow> ds) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ds =\n  set (case rm.\\<alpha> rm fn of None \\<Rightarrow> []\n       | Some ds \\<Rightarrow> ds)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {set (rm_set_lookup rm k) |k. True} \\<Longrightarrow>\n       x \\<in> (\\<lambda>e.\n                   set (case e of None \\<Rightarrow> []\n                        | Some ds \\<Rightarrow> ds)) `\n               rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n               {{}}", "show \"ds \\<in> ?K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ds \\<in> (\\<lambda>e.\n                 set (case e of None \\<Rightarrow> []\n                      | Some ds \\<Rightarrow> ds)) `\n             rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n             {{}}", "proof (cases \"rm.\\<alpha> rm fn\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rm.\\<alpha> rm fn = None \\<Longrightarrow>\n    ds \\<in> (\\<lambda>e.\n                 set (case e of None \\<Rightarrow> []\n                      | Some ds \\<Rightarrow> ds)) `\n             rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n             {{}}\n 2. \\<And>a.\n       rm.\\<alpha> rm fn = Some a \\<Longrightarrow>\n       ds \\<in> (\\<lambda>e.\n                    set (case e of None \\<Rightarrow> []\n                         | Some ds \\<Rightarrow> ds)) `\n                rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n                {{}}", "case None"], ["proof (state)\nthis:\n  rm.\\<alpha> rm fn = None\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> rm fn = None \\<Longrightarrow>\n    ds \\<in> (\\<lambda>e.\n                 set (case e of None \\<Rightarrow> []\n                      | Some ds \\<Rightarrow> ds)) `\n             rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n             {{}}\n 2. \\<And>a.\n       rm.\\<alpha> rm fn = Some a \\<Longrightarrow>\n       ds \\<in> (\\<lambda>e.\n                    set (case e of None \\<Rightarrow> []\n                         | Some ds \\<Rightarrow> ds)) `\n                rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n                {{}}", "then"], ["proof (chain)\npicking this:\n  rm.\\<alpha> rm fn = None", "show ?thesis"], ["proof (prove)\nusing this:\n  rm.\\<alpha> rm fn = None\n\ngoal (1 subgoal):\n 1. ds \\<in> (\\<lambda>e.\n                 set (case e of None \\<Rightarrow> []\n                      | Some ds \\<Rightarrow> ds)) `\n             rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n             {{}}", "unfolding ds"], ["proof (prove)\nusing this:\n  rm.\\<alpha> rm fn = None\n\ngoal (1 subgoal):\n 1. set (case rm.\\<alpha> rm fn of None \\<Rightarrow> []\n         | Some ds \\<Rightarrow> ds)\n    \\<in> (\\<lambda>e.\n              set (case e of None \\<Rightarrow> []\n                   | Some ds \\<Rightarrow> ds)) `\n          rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n          {{}}", "by auto"], ["proof (state)\nthis:\n  ds \\<in> (\\<lambda>e.\n               set (case e of None \\<Rightarrow> []\n                    | Some ds \\<Rightarrow> ds)) `\n           rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n           {{}}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> rm fn = Some a \\<Longrightarrow>\n       ds \\<in> (\\<lambda>e.\n                    set (case e of None \\<Rightarrow> []\n                         | Some ds \\<Rightarrow> ds)) `\n                rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n                {{}}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> rm fn = Some a \\<Longrightarrow>\n       ds \\<in> (\\<lambda>e.\n                    set (case e of None \\<Rightarrow> []\n                         | Some ds \\<Rightarrow> ds)) `\n                rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n                {{}}", "case (Some rules)"], ["proof (state)\nthis:\n  rm.\\<alpha> rm fn = Some rules\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> rm fn = Some a \\<Longrightarrow>\n       ds \\<in> (\\<lambda>e.\n                    set (case e of None \\<Rightarrow> []\n                         | Some ds \\<Rightarrow> ds)) `\n                rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n                {{}}", "from Some"], ["proof (chain)\npicking this:\n  rm.\\<alpha> rm fn = Some rules", "have fn: \"fn \\<in> Map.dom ?rmset\""], ["proof (prove)\nusing this:\n  rm.\\<alpha> rm fn = Some rules\n\ngoal (1 subgoal):\n 1. fn \\<in> dom (rm.\\<alpha> rm)", "by auto"], ["proof (state)\nthis:\n  fn \\<in> dom (rm.\\<alpha> rm)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> rm fn = Some a \\<Longrightarrow>\n       ds \\<in> (\\<lambda>e.\n                    set (case e of None \\<Rightarrow> []\n                         | Some ds \\<Rightarrow> ds)) `\n                rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n                {{}}", "have \"ds \\<in> ?N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ds \\<in> (\\<lambda>e.\n                 set (case e of None \\<Rightarrow> []\n                      | Some ds \\<Rightarrow> ds)) `\n             rm.\\<alpha> rm ` dom (rm.\\<alpha> rm)", "unfolding ds"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (case rm.\\<alpha> rm fn of None \\<Rightarrow> []\n         | Some ds \\<Rightarrow> ds)\n    \\<in> (\\<lambda>e.\n              set (case e of None \\<Rightarrow> []\n                   | Some ds \\<Rightarrow> ds)) `\n          rm.\\<alpha> rm ` dom (rm.\\<alpha> rm)", "by (rule, rule refl, rule, rule refl, rule fn)"], ["proof (state)\nthis:\n  ds \\<in> (\\<lambda>e.\n               set (case e of None \\<Rightarrow> []\n                    | Some ds \\<Rightarrow> ds)) `\n           rm.\\<alpha> rm ` dom (rm.\\<alpha> rm)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> rm fn = Some a \\<Longrightarrow>\n       ds \\<in> (\\<lambda>e.\n                    set (case e of None \\<Rightarrow> []\n                         | Some ds \\<Rightarrow> ds)) `\n                rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n                {{}}", "then"], ["proof (chain)\npicking this:\n  ds \\<in> (\\<lambda>e.\n               set (case e of None \\<Rightarrow> []\n                    | Some ds \\<Rightarrow> ds)) `\n           rm.\\<alpha> rm ` dom (rm.\\<alpha> rm)", "show ?thesis"], ["proof (prove)\nusing this:\n  ds \\<in> (\\<lambda>e.\n               set (case e of None \\<Rightarrow> []\n                    | Some ds \\<Rightarrow> ds)) `\n           rm.\\<alpha> rm ` dom (rm.\\<alpha> rm)\n\ngoal (1 subgoal):\n 1. ds \\<in> (\\<lambda>e.\n                 set (case e of None \\<Rightarrow> []\n                      | Some ds \\<Rightarrow> ds)) `\n             rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n             {{}}", "by auto"], ["proof (state)\nthis:\n  ds \\<in> (\\<lambda>e.\n               set (case e of None \\<Rightarrow> []\n                    | Some ds \\<Rightarrow> ds)) `\n           rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n           {{}}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ds \\<in> (\\<lambda>e.\n               set (case e of None \\<Rightarrow> []\n                    | Some ds \\<Rightarrow> ds)) `\n           rm.\\<alpha> rm ` dom (rm.\\<alpha> rm) \\<union>\n           {{}}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite {set (rm_set_lookup rm k) |k. True}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite {set (rm_set_lookup rm k) |k. True}\n\ngoal (1 subgoal):\n 1. \\<And>M.\n       M \\<in> {set (rm_set_lookup rm k) |k. True} \\<Longrightarrow>\n       finite M", "qed (force simp: rm_set_lookup_def)"], ["", "end"], ["", "interpretation elem_list_to_rm: rm_set \"elem_list_to_rm key ds\" key \"set ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rm_set (elem_list_to_rm key ds) key (set ds)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       set (rm_set_lookup (elem_list_to_rm key ds) k) =\n       {d \\<in> set ds. key d = k}", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       set (rm_set_lookup (elem_list_to_rm key ds) k) =\n       {d \\<in> set ds. key d = k}", "show \"set (rm_set_lookup (elem_list_to_rm key ds) k) = {d \\<in> set ds. key d = k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rm_set_lookup (elem_list_to_rm key ds) k) =\n    {d \\<in> set ds. key d = k}", "proof (induct ds arbitrary: k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       set (rm_set_lookup (elem_list_to_rm key []) k) =\n       {d \\<in> set []. key d = k}\n 2. \\<And>a ds k.\n       (\\<And>k.\n           set (rm_set_lookup (elem_list_to_rm key ds) k) =\n           {d \\<in> set ds. key d = k}) \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (a # ds)) k) =\n       {d \\<in> set (a # ds). key d = k}", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>k.\n       set (rm_set_lookup (elem_list_to_rm key []) k) =\n       {d \\<in> set []. key d = k}\n 2. \\<And>a ds k.\n       (\\<And>k.\n           set (rm_set_lookup (elem_list_to_rm key ds) k) =\n           {d \\<in> set ds. key d = k}) \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (a # ds)) k) =\n       {d \\<in> set (a # ds). key d = k}", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rm_set_lookup (elem_list_to_rm key []) k) =\n    {d \\<in> set []. key d = k}", "unfolding rm_set_lookup_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (case rm.\\<alpha> (elem_list_to_rm key []) k of\n         None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n    {d \\<in> set []. key d = k}", "by (simp add: rm.correct)"], ["proof (state)\nthis:\n  set (rm_set_lookup (elem_list_to_rm key []) k) =\n  {d \\<in> set []. key d = k}\n\ngoal (1 subgoal):\n 1. \\<And>a ds k.\n       (\\<And>k.\n           set (rm_set_lookup (elem_list_to_rm key ds) k) =\n           {d \\<in> set ds. key d = k}) \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (a # ds)) k) =\n       {d \\<in> set (a # ds). key d = k}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ds k.\n       (\\<And>k.\n           set (rm_set_lookup (elem_list_to_rm key ds) k) =\n           {d \\<in> set ds. key d = k}) \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (a # ds)) k) =\n       {d \\<in> set (a # ds). key d = k}", "case (Cons d ds k)"], ["proof (state)\nthis:\n  set (rm_set_lookup (elem_list_to_rm key ds) ?k) =\n  {d \\<in> set ds. key d = ?k}\n\ngoal (1 subgoal):\n 1. \\<And>a ds k.\n       (\\<And>k.\n           set (rm_set_lookup (elem_list_to_rm key ds) k) =\n           {d \\<in> set ds. key d = k}) \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (a # ds)) k) =\n       {d \\<in> set (a # ds). key d = k}", "let ?el = \"elem_list_to_rm key\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ds k.\n       (\\<And>k.\n           set (rm_set_lookup (elem_list_to_rm key ds) k) =\n           {d \\<in> set ds. key d = k}) \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (a # ds)) k) =\n       {d \\<in> set (a # ds). key d = k}", "let ?l = \"\\<lambda>k ds. set (rm_set_lookup (?el ds) k)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ds k.\n       (\\<And>k.\n           set (rm_set_lookup (elem_list_to_rm key ds) k) =\n           {d \\<in> set ds. key d = k}) \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (a # ds)) k) =\n       {d \\<in> set (a # ds). key d = k}", "let ?r = \"\\<lambda>k ds. {d \\<in> set ds. key d = k}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ds k.\n       (\\<And>k.\n           set (rm_set_lookup (elem_list_to_rm key ds) k) =\n           {d \\<in> set ds. key d = k}) \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (a # ds)) k) =\n       {d \\<in> set (a # ds). key d = k}", "from Cons"], ["proof (chain)\npicking this:\n  set (rm_set_lookup (elem_list_to_rm key ds) ?k) =\n  {d \\<in> set ds. key d = ?k}", "have ind:\n      \"\\<And> k. ?l k ds = ?r k ds\""], ["proof (prove)\nusing this:\n  set (rm_set_lookup (elem_list_to_rm key ds) ?k) =\n  {d \\<in> set ds. key d = ?k}\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       set (rm_set_lookup (elem_list_to_rm key ds) k) =\n       {d \\<in> set ds. key d = k}", "by auto"], ["proof (state)\nthis:\n  set (rm_set_lookup (elem_list_to_rm key ds) ?k) =\n  {d \\<in> set ds. key d = ?k}\n\ngoal (1 subgoal):\n 1. \\<And>a ds k.\n       (\\<And>k.\n           set (rm_set_lookup (elem_list_to_rm key ds) k) =\n           {d \\<in> set ds. key d = k}) \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (a # ds)) k) =\n       {d \\<in> set (a # ds). key d = k}", "show \"?l k (d # ds) = ?r k (d # ds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}", "proof (cases \"rm.\\<alpha> (?el ds) (key d)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "case None"], ["proof (state)\nthis:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "from None ind[of \"key d\"]"], ["proof (chain)\npicking this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None\n  set (rm_set_lookup (elem_list_to_rm key ds) (key d)) =\n  {da \\<in> set ds. key da = key d}", "have r: \"{da \\<in> set ds. key da = key d} = {}\""], ["proof (prove)\nusing this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None\n  set (rm_set_lookup (elem_list_to_rm key ds) (key d)) =\n  {da \\<in> set ds. key da = key d}\n\ngoal (1 subgoal):\n 1. {da \\<in> set ds. key da = key d} = {}", "unfolding rm_set_lookup_def"], ["proof (prove)\nusing this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None\n  set (case rm.\\<alpha> (elem_list_to_rm key ds) (key d) of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n  {da \\<in> set ds. key da = key d}\n\ngoal (1 subgoal):\n 1. {da \\<in> set ds. key da = key d} = {}", "by auto"], ["proof (state)\nthis:\n  {da \\<in> set ds. key da = key d} = {}\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "from None"], ["proof (chain)\npicking this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None", "have el: \"?el (d # ds) = rm.update_dj (key d) [d] (?el ds)\""], ["proof (prove)\nusing this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None\n\ngoal (1 subgoal):\n 1. elem_list_to_rm key (d # ds) =\n    rm.update_dj (key d) [d] (elem_list_to_rm key ds)", "by simp"], ["proof (state)\nthis:\n  elem_list_to_rm key (d # ds) =\n  rm.update_dj (key d) [d] (elem_list_to_rm key ds)\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "from None"], ["proof (chain)\npicking this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None", "have ndom: \"key d \\<notin> Map.dom (rm.\\<alpha> (?el ds))\""], ["proof (prove)\nusing this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None\n\ngoal (1 subgoal):\n 1. key d \\<notin> dom (rm.\\<alpha> (elem_list_to_rm key ds))", "by auto"], ["proof (state)\nthis:\n  key d \\<notin> dom (rm.\\<alpha> (elem_list_to_rm key ds))\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "have r: \"?r k (d # ds) = ?r k ds \\<inter> {da. key da \\<noteq> key d} \\<union> {da . key da = k \\<and> da = d}\" (is \"_ = ?r1 \\<union> ?r2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {da \\<in> set (d # ds). key da = k} =\n    {d \\<in> set ds. key d = k} \\<inter>\n    {da. key da \\<noteq> key d} \\<union>\n    {da. key da = k \\<and> da = d}", "using r"], ["proof (prove)\nusing this:\n  {da \\<in> set ds. key da = key d} = {}\n\ngoal (1 subgoal):\n 1. {da \\<in> set (d # ds). key da = k} =\n    {d \\<in> set ds. key d = k} \\<inter>\n    {da. key da \\<noteq> key d} \\<union>\n    {da. key da = k \\<and> da = d}", "by auto"], ["proof (state)\nthis:\n  {da \\<in> set (d # ds). key da = k} =\n  {d \\<in> set ds. key d = k} \\<inter> {da. key da \\<noteq> key d} \\<union>\n  {da. key da = k \\<and> da = d}\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "from ndom"], ["proof (chain)\npicking this:\n  key d \\<notin> dom (rm.\\<alpha> (elem_list_to_rm key ds))", "have l: \"?l k (d # ds) = \n        set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k of None \\<Rightarrow> []\n        | Some rules \\<Rightarrow> rules)\" (is \"_ = ?l\")"], ["proof (prove)\nusing this:\n  key d \\<notin> dom (rm.\\<alpha> (elem_list_to_rm key ds))\n\ngoal (1 subgoal):\n 1. set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d]))\n               k of\n         None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "unfolding el rm_set_lookup_def"], ["proof (prove)\nusing this:\n  key d \\<notin> dom (rm.\\<alpha> (elem_list_to_rm key ds))\n\ngoal (1 subgoal):\n 1. set (case rm.\\<alpha>\n               (rm.update_dj (key d) [d] (elem_list_to_rm key ds)) k of\n         None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n    set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d]))\n               k of\n         None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "by (simp add: rm.correct)"], ["proof (state)\nthis:\n  set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n  set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "{"], ["proof (state)\nthis:\n  set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n  set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "fix da"], ["proof (state)\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "assume \"da \\<in> ?r1 \\<union> ?r2\""], ["proof (state)\nthis:\n  da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n           {da. key da \\<noteq> key d} \\<union>\n           {da. key da = k \\<and> da = d}\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "then"], ["proof (chain)\npicking this:\n  da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n           {da. key da \\<noteq> key d} \\<union>\n           {da. key da = k \\<and> da = d}", "have \"da \\<in> ?l\""], ["proof (prove)\nusing this:\n  da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n           {da. key da \\<noteq> key d} \\<union>\n           {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n 2. da \\<in> {da. key da = k \\<and> da = d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "assume \"da \\<in> ?r2\""], ["proof (state)\nthis:\n  da \\<in> {da. key da = k \\<and> da = d}\n\ngoal (2 subgoals):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n 2. da \\<in> {da. key da = k \\<and> da = d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "then"], ["proof (chain)\npicking this:\n  da \\<in> {da. key da = k \\<and> da = d}", "have da: \"da = d\" and k: \"key d = k\""], ["proof (prove)\nusing this:\n  da \\<in> {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. da = d &&& key d = k", "by auto"], ["proof (state)\nthis:\n  da = d\n  key d = k\n\ngoal (2 subgoals):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n 2. da \\<in> {da. key da = k \\<and> da = d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "unfolding da k"], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(k \\<mapsto>\n                       [d]))\n                       k of\n                 None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "by auto"], ["proof (state)\nthis:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      [d]))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "assume \"da \\<in> ?r1\""], ["proof (state)\nthis:\n  da \\<in> {d \\<in> set ds. key d = k} \\<inter> {da. key da \\<noteq> key d}\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "from this[unfolded ind[symmetric] rm_set_lookup_def]"], ["proof (chain)\npicking this:\n  da \\<in> set (case rm.\\<alpha> (elem_list_to_rm key ds) k of\n                None \\<Rightarrow> []\n                | Some rules \\<Rightarrow> rules) \\<inter>\n           {da. key da \\<noteq> key d}", "obtain das where rm: \"rm.\\<alpha> (?el ds) k = Some das\" and da: \"da \\<in> set das\" and k: \"key da \\<noteq> key d\""], ["proof (prove)\nusing this:\n  da \\<in> set (case rm.\\<alpha> (elem_list_to_rm key ds) k of\n                None \\<Rightarrow> []\n                | Some rules \\<Rightarrow> rules) \\<inter>\n           {da. key da \\<noteq> key d}\n\ngoal (1 subgoal):\n 1. (\\<And>das.\n        \\<lbrakk>rm.\\<alpha> (elem_list_to_rm key ds) k = Some das;\n         da \\<in> set das; key da \\<noteq> key d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"rm.\\<alpha> (?el ds) k\", auto)"], ["proof (state)\nthis:\n  rm.\\<alpha> (elem_list_to_rm key ds) k = Some das\n  da \\<in> set das\n  key da \\<noteq> key d\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "from ind[of k, unfolded rm_set_lookup_def] rm da k"], ["proof (chain)\npicking this:\n  set (case rm.\\<alpha> (elem_list_to_rm key ds) k of None \\<Rightarrow> []\n       | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k}\n  rm.\\<alpha> (elem_list_to_rm key ds) k = Some das\n  da \\<in> set das\n  key da \\<noteq> key d", "have k: \"key d \\<noteq> k\""], ["proof (prove)\nusing this:\n  set (case rm.\\<alpha> (elem_list_to_rm key ds) k of None \\<Rightarrow> []\n       | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k}\n  rm.\\<alpha> (elem_list_to_rm key ds) k = Some das\n  da \\<in> set das\n  key da \\<noteq> key d\n\ngoal (1 subgoal):\n 1. key d \\<noteq> k", "by auto"], ["proof (state)\nthis:\n  key d \\<noteq> k\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "have rm: \"(rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k = Some das\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k = Some das", "unfolding rm[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k =\n    rm.\\<alpha> (elem_list_to_rm key ds) k", "using k"], ["proof (prove)\nusing this:\n  key d \\<noteq> k\n\ngoal (1 subgoal):\n 1. (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k =\n    rm.\\<alpha> (elem_list_to_rm key ds) k", "by auto"], ["proof (state)\nthis:\n  (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k = Some das\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        [d]))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "unfolding rm"], ["proof (prove)\ngoal (1 subgoal):\n 1. da \\<in> set (case Some das of None \\<Rightarrow> []\n                  | Some rules \\<Rightarrow> rules)", "using da"], ["proof (prove)\nusing this:\n  da \\<in> set das\n\ngoal (1 subgoal):\n 1. da \\<in> set (case Some das of None \\<Rightarrow> []\n                  | Some rules \\<Rightarrow> rules)", "by auto"], ["proof (state)\nthis:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      [d]))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      [d]))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "}"], ["proof (state)\nthis:\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<inter>\n        {da. key da \\<noteq> key d} \\<union>\n        {da. key da = k \\<and> da = d} \\<Longrightarrow>\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   [d]))\n                   k of\n             None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "moreover"], ["proof (state)\nthis:\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<inter>\n        {da. key da \\<noteq> key d} \\<union>\n        {da. key da = k \\<and> da = d} \\<Longrightarrow>\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   [d]))\n                   k of\n             None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "{"], ["proof (state)\nthis:\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<inter>\n        {da. key da \\<noteq> key d} \\<union>\n        {da. key da = k \\<and> da = d} \\<Longrightarrow>\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   [d]))\n                   k of\n             None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "fix da"], ["proof (state)\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "assume l: \"da \\<in> ?l\""], ["proof (state)\nthis:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      [d]))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "let ?rm = \"((rm.\\<alpha> (elem_list_to_rm key ds))(key d \\<mapsto> [d])) k\""], ["proof (state)\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "from l"], ["proof (chain)\npicking this:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      [d]))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "obtain das where rm: \"?rm = Some das\" and da: \"da \\<in> set das\""], ["proof (prove)\nusing this:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      [d]))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. (\\<And>das.\n        \\<lbrakk>(rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d]))\n                  k =\n                 Some das;\n         da \\<in> set das\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases ?rm, auto)"], ["proof (state)\nthis:\n  (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k = Some das\n  da \\<in> set das\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "have \"da \\<in> ?r1 \\<union> ?r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}", "proof (cases \"k = key d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k = key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}\n 2. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}", "case True"], ["proof (state)\nthis:\n  k = key d\n\ngoal (2 subgoals):\n 1. k = key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}\n 2. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}", "with rm da"], ["proof (chain)\npicking this:\n  (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k = Some das\n  da \\<in> set das\n  k = key d", "have da: \"da = d\""], ["proof (prove)\nusing this:\n  (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k = Some das\n  da \\<in> set das\n  k = key d\n\ngoal (1 subgoal):\n 1. da = d", "by auto"], ["proof (state)\nthis:\n  da = d\n\ngoal (2 subgoals):\n 1. k = key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}\n 2. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}", "then"], ["proof (chain)\npicking this:\n  da = d", "show ?thesis"], ["proof (prove)\nusing this:\n  da = d\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}", "using True"], ["proof (prove)\nusing this:\n  da = d\n  k = key d\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}", "by auto"], ["proof (state)\nthis:\n  da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n           {da. key da \\<noteq> key d} \\<union>\n           {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}", "case False"], ["proof (state)\nthis:\n  k \\<noteq> key d\n\ngoal (1 subgoal):\n 1. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}", "with rm"], ["proof (chain)\npicking this:\n  (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k = Some das\n  k \\<noteq> key d", "have \"rm.\\<alpha> (?el ds) k = Some das\""], ["proof (prove)\nusing this:\n  (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k = Some das\n  k \\<noteq> key d\n\ngoal (1 subgoal):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) k = Some das", "by auto"], ["proof (state)\nthis:\n  rm.\\<alpha> (elem_list_to_rm key ds) k = Some das\n\ngoal (1 subgoal):\n 1. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}", "from ind[of k, unfolded rm_set_lookup_def this] da False"], ["proof (chain)\npicking this:\n  set (case Some das of None \\<Rightarrow> []\n       | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k}\n  da \\<in> set das\n  k \\<noteq> key d", "show ?thesis"], ["proof (prove)\nusing this:\n  set (case Some das of None \\<Rightarrow> []\n       | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k}\n  da \\<in> set das\n  k \\<noteq> key d\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n             {da. key da \\<noteq> key d} \\<union>\n             {da. key da = k \\<and> da = d}", "by auto"], ["proof (state)\nthis:\n  da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n           {da. key da \\<noteq> key d} \\<union>\n           {da. key da = k \\<and> da = d}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  da \\<in> {d \\<in> set ds. key d = k} \\<inter>\n           {da. key da \\<noteq> key d} \\<union>\n           {da. key da = k \\<and> da = d}\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "}"], ["proof (state)\nthis:\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   [d]))\n                   k of\n             None \\<Rightarrow> []\n             | Some rules \\<Rightarrow> rules) \\<Longrightarrow>\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<inter>\n        {da. key da \\<noteq> key d} \\<union>\n        {da. key da = k \\<and> da = d}\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "ultimately"], ["proof (chain)\npicking this:\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<inter>\n        {da. key da \\<noteq> key d} \\<union>\n        {da. key da = k \\<and> da = d} \\<Longrightarrow>\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   [d]))\n                   k of\n             None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   [d]))\n                   k of\n             None \\<Rightarrow> []\n             | Some rules \\<Rightarrow> rules) \\<Longrightarrow>\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<inter>\n        {da. key da \\<noteq> key d} \\<union>\n        {da. key da = k \\<and> da = d}", "have \"?l = ?r1 \\<union> ?r2\""], ["proof (prove)\nusing this:\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<inter>\n        {da. key da \\<noteq> key d} \\<union>\n        {da. key da = k \\<and> da = d} \\<Longrightarrow>\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   [d]))\n                   k of\n             None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   [d]))\n                   k of\n             None \\<Rightarrow> []\n             | Some rules \\<Rightarrow> rules) \\<Longrightarrow>\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<inter>\n        {da. key da \\<noteq> key d} \\<union>\n        {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d]))\n               k of\n         None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n    {d \\<in> set ds. key d = k} \\<inter>\n    {da. key da \\<noteq> key d} \\<union>\n    {da. key da = k \\<and> da = d}", "by blast"], ["proof (state)\nthis:\n  set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k} \\<inter> {da. key da \\<noteq> key d} \\<union>\n  {da. key da = k \\<and> da = d}\n\ngoal (2 subgoals):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) (key d) = None \\<Longrightarrow>\n    set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}\n 2. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "then"], ["proof (chain)\npicking this:\n  set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k} \\<inter> {da. key da \\<noteq> key d} \\<union>\n  {da. key da = k \\<and> da = d}", "show ?thesis"], ["proof (prove)\nusing this:\n  set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k} \\<inter> {da. key da \\<noteq> key d} \\<union>\n  {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}", "unfolding l r"], ["proof (prove)\nusing this:\n  set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d])) k of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k} \\<inter> {da. key da \\<noteq> key d} \\<union>\n  {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> [d]))\n               k of\n         None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n    {d \\<in> set ds. key d = k} \\<inter>\n    {da. key da \\<noteq> key d} \\<union>\n    {da. key da = k \\<and> da = d}", "."], ["proof (state)\nthis:\n  set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n  {da \\<in> set (d # ds). key da = k}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "case (Some das)"], ["proof (state)\nthis:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = Some das\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "from Some ind[of \"key d\"]"], ["proof (chain)\npicking this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = Some das\n  set (rm_set_lookup (elem_list_to_rm key ds) (key d)) =\n  {da \\<in> set ds. key da = key d}", "have das: \"{da \\<in> set ds. key da = key d} = set das\""], ["proof (prove)\nusing this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = Some das\n  set (rm_set_lookup (elem_list_to_rm key ds) (key d)) =\n  {da \\<in> set ds. key da = key d}\n\ngoal (1 subgoal):\n 1. {da \\<in> set ds. key da = key d} = set das", "unfolding rm_set_lookup_def"], ["proof (prove)\nusing this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = Some das\n  set (case rm.\\<alpha> (elem_list_to_rm key ds) (key d) of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n  {da \\<in> set ds. key da = key d}\n\ngoal (1 subgoal):\n 1. {da \\<in> set ds. key da = key d} = set das", "by auto"], ["proof (state)\nthis:\n  {da \\<in> set ds. key da = key d} = set das\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "from Some"], ["proof (chain)\npicking this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = Some das", "have el: \"?el (d # ds) = rm.update (key d) (d # das) (?el ds)\""], ["proof (prove)\nusing this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = Some das\n\ngoal (1 subgoal):\n 1. elem_list_to_rm key (d # ds) =\n    rm.update (key d) (d # das) (elem_list_to_rm key ds)", "by simp"], ["proof (state)\nthis:\n  elem_list_to_rm key (d # ds) =\n  rm.update (key d) (d # das) (elem_list_to_rm key ds)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "from Some"], ["proof (chain)\npicking this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = Some das", "have dom: \"key d \\<in> Map.dom (rm.\\<alpha> (?el ds))\""], ["proof (prove)\nusing this:\n  rm.\\<alpha> (elem_list_to_rm key ds) (key d) = Some das\n\ngoal (1 subgoal):\n 1. key d \\<in> dom (rm.\\<alpha> (elem_list_to_rm key ds))", "by auto"], ["proof (state)\nthis:\n  key d \\<in> dom (rm.\\<alpha> (elem_list_to_rm key ds))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "from dom"], ["proof (chain)\npicking this:\n  key d \\<in> dom (rm.\\<alpha> (elem_list_to_rm key ds))", "have l: \"?l k (d # ds) = \n        set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> (d # das))) k of None \\<Rightarrow> []\n        | Some rules \\<Rightarrow> rules)\" (is \"_ = ?l\")"], ["proof (prove)\nusing this:\n  key d \\<in> dom (rm.\\<alpha> (elem_list_to_rm key ds))\n\ngoal (1 subgoal):\n 1. set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n               d # das))\n               k of\n         None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "unfolding el rm_set_lookup_def"], ["proof (prove)\nusing this:\n  key d \\<in> dom (rm.\\<alpha> (elem_list_to_rm key ds))\n\ngoal (1 subgoal):\n 1. set (case rm.\\<alpha>\n               (rm.update (key d) (d # das) (elem_list_to_rm key ds)) k of\n         None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n    set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n               d # das))\n               k of\n         None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "by (simp add: rm.correct)"], ["proof (state)\nthis:\n  set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n  set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> d # das))\n             k of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "have r: \"?r k (d # ds) = ?r k ds \\<union> {da. key da = k \\<and> da = d}\" (is \"_ = ?r1 \\<union> ?r2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {da \\<in> set (d # ds). key da = k} =\n    {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}", "by auto"], ["proof (state)\nthis:\n  {da \\<in> set (d # ds). key da = k} =\n  {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "{"], ["proof (state)\nthis:\n  {da \\<in> set (d # ds). key da = k} =\n  {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "fix da"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "assume \"da \\<in> ?r1 \\<union> ?r2\""], ["proof (state)\nthis:\n  da \\<in> {d \\<in> set ds. key d = k} \\<union>\n           {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "then"], ["proof (chain)\npicking this:\n  da \\<in> {d \\<in> set ds. key d = k} \\<union>\n           {da. key da = k \\<and> da = d}", "have \"da \\<in> ?l\""], ["proof (prove)\nusing this:\n  da \\<in> {d \\<in> set ds. key d = k} \\<union>\n           {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n 2. da \\<in> {da. key da = k \\<and> da = d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "assume \"da \\<in> ?r2\""], ["proof (state)\nthis:\n  da \\<in> {da. key da = k \\<and> da = d}\n\ngoal (2 subgoals):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n 2. da \\<in> {da. key da = k \\<and> da = d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "then"], ["proof (chain)\npicking this:\n  da \\<in> {da. key da = k \\<and> da = d}", "have da: \"da = d\" and k: \"key d = k\""], ["proof (prove)\nusing this:\n  da \\<in> {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. da = d &&& key d = k", "by auto"], ["proof (state)\nthis:\n  da = d\n  key d = k\n\ngoal (2 subgoals):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n 2. da \\<in> {da. key da = k \\<and> da = d} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "unfolding da k"], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(k \\<mapsto>\n                       d # das))\n                       k of\n                 None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "by auto"], ["proof (state)\nthis:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      d # das))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "assume \"da \\<in> ?r1\""], ["proof (state)\nthis:\n  da \\<in> {d \\<in> set ds. key d = k}\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "from this[unfolded ind[symmetric] rm_set_lookup_def]"], ["proof (chain)\npicking this:\n  da \\<in> set (case rm.\\<alpha> (elem_list_to_rm key ds) k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "obtain das' where rm: \"rm.\\<alpha> (?el ds) k = Some das'\" and da: \"da \\<in> set das'\""], ["proof (prove)\nusing this:\n  da \\<in> set (case rm.\\<alpha> (elem_list_to_rm key ds) k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. (\\<And>das'.\n        \\<lbrakk>rm.\\<alpha> (elem_list_to_rm key ds) k = Some das';\n         da \\<in> set das'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"rm.\\<alpha> (?el ds) k\", auto)"], ["proof (state)\nthis:\n  rm.\\<alpha> (elem_list_to_rm key ds) k = Some das'\n  da \\<in> set das'\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "from ind[of k, unfolded rm_set_lookup_def rm]"], ["proof (chain)\npicking this:\n  set (case Some das' of None \\<Rightarrow> []\n       | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k}", "have das': \"set das' = {d \\<in> set ds. key d = k}\""], ["proof (prove)\nusing this:\n  set (case Some das' of None \\<Rightarrow> []\n       | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k}\n\ngoal (1 subgoal):\n 1. set das' = {d \\<in> set ds. key d = k}", "by auto"], ["proof (state)\nthis:\n  set das' = {d \\<in> set ds. key d = k}\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "proof (cases \"k = key d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k = key d \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n 2. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "case True"], ["proof (state)\nthis:\n  k = key d\n\ngoal (2 subgoals):\n 1. k = key d \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n 2. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "using das' das da"], ["proof (prove)\nusing this:\n  set das' = {d \\<in> set ds. key d = k}\n  {da \\<in> set ds. key da = key d} = set das\n  da \\<in> set das'\n\ngoal (1 subgoal):\n 1. da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "unfolding True"], ["proof (prove)\nusing this:\n  set das' = {da \\<in> set ds. key da = key d}\n  {da \\<in> set ds. key da = key d} = set das\n  da \\<in> set das'\n\ngoal (1 subgoal):\n 1. da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        (key d) of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "by simp"], ["proof (state)\nthis:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      d # das))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "case False"], ["proof (state)\nthis:\n  k \\<noteq> key d\n\ngoal (1 subgoal):\n 1. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "then"], ["proof (chain)\npicking this:\n  k \\<noteq> key d", "show ?thesis"], ["proof (prove)\nusing this:\n  k \\<noteq> key d\n\ngoal (1 subgoal):\n 1. da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "using das' da rm"], ["proof (prove)\nusing this:\n  k \\<noteq> key d\n  set das' = {d \\<in> set ds. key d = k}\n  da \\<in> set das'\n  rm.\\<alpha> (elem_list_to_rm key ds) k = Some das'\n\ngoal (1 subgoal):\n 1. da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                        d # das))\n                        k of\n                  None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "by auto"], ["proof (state)\nthis:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      d # das))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      d # das))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      d # das))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "}"], ["proof (state)\nthis:\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<union>\n        {da. key da = k \\<and> da = d} \\<Longrightarrow>\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   d # das))\n                   k of\n             None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "moreover"], ["proof (state)\nthis:\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<union>\n        {da. key da = k \\<and> da = d} \\<Longrightarrow>\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   d # das))\n                   k of\n             None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "{"], ["proof (state)\nthis:\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<union>\n        {da. key da = k \\<and> da = d} \\<Longrightarrow>\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   d # das))\n                   k of\n             None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "fix da"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "assume l: \"da \\<in> ?l\""], ["proof (state)\nthis:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      d # das))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "let ?rm = \"((rm.\\<alpha> (elem_list_to_rm key ds))(key d \\<mapsto> d # das)) k\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "from l"], ["proof (chain)\npicking this:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      d # das))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)", "obtain das' where rm: \"?rm = Some das'\" and da: \"da \\<in> set das'\""], ["proof (prove)\nusing this:\n  da \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                      d # das))\n                      k of\n                None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n\ngoal (1 subgoal):\n 1. (\\<And>das'.\n        \\<lbrakk>(rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                  d # das))\n                  k =\n                 Some das';\n         da \\<in> set das'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases ?rm, auto)"], ["proof (state)\nthis:\n  (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> d # das)) k =\n  Some das'\n  da \\<in> set das'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "have \"da \\<in> ?r1 \\<union> ?r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "proof (cases \"k = key d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k = key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}\n 2. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "case True"], ["proof (state)\nthis:\n  k = key d\n\ngoal (2 subgoals):\n 1. k = key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}\n 2. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "with rm da das"], ["proof (chain)\npicking this:\n  (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> d # das)) k =\n  Some das'\n  da \\<in> set das'\n  {da \\<in> set ds. key da = key d} = set das\n  k = key d", "have da: \"da \\<in> set (d # das)\""], ["proof (prove)\nusing this:\n  (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> d # das)) k =\n  Some das'\n  da \\<in> set das'\n  {da \\<in> set ds. key da = key d} = set das\n  k = key d\n\ngoal (1 subgoal):\n 1. da \\<in> set (d # das)", "by auto"], ["proof (state)\nthis:\n  da \\<in> set (d # das)\n\ngoal (2 subgoals):\n 1. k = key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}\n 2. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "then"], ["proof (chain)\npicking this:\n  da \\<in> set (d # das)", "have \"da = d \\<or> da \\<in> set das\""], ["proof (prove)\nusing this:\n  da \\<in> set (d # das)\n\ngoal (1 subgoal):\n 1. da = d \\<or> da \\<in> set das", "by auto"], ["proof (state)\nthis:\n  da = d \\<or> da \\<in> set das\n\ngoal (2 subgoals):\n 1. k = key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}\n 2. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "then"], ["proof (chain)\npicking this:\n  da = d \\<or> da \\<in> set das", "have k: \"key da = k\""], ["proof (prove)\nusing this:\n  da = d \\<or> da \\<in> set das\n\ngoal (1 subgoal):\n 1. key da = k", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. da = d \\<Longrightarrow> key da = k\n 2. da \\<in> set das \\<Longrightarrow> key da = k", "assume \"da = d\""], ["proof (state)\nthis:\n  da = d\n\ngoal (2 subgoals):\n 1. da = d \\<Longrightarrow> key da = k\n 2. da \\<in> set das \\<Longrightarrow> key da = k", "then"], ["proof (chain)\npicking this:\n  da = d", "show ?thesis"], ["proof (prove)\nusing this:\n  da = d\n\ngoal (1 subgoal):\n 1. key da = k", "using True"], ["proof (prove)\nusing this:\n  da = d\n  k = key d\n\ngoal (1 subgoal):\n 1. key da = k", "by simp"], ["proof (state)\nthis:\n  key da = k\n\ngoal (1 subgoal):\n 1. da \\<in> set das \\<Longrightarrow> key da = k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. da \\<in> set das \\<Longrightarrow> key da = k", "assume \"da \\<in> set das\""], ["proof (state)\nthis:\n  da \\<in> set das\n\ngoal (1 subgoal):\n 1. da \\<in> set das \\<Longrightarrow> key da = k", "with das True"], ["proof (chain)\npicking this:\n  {da \\<in> set ds. key da = key d} = set das\n  k = key d\n  da \\<in> set das", "show ?thesis"], ["proof (prove)\nusing this:\n  {da \\<in> set ds. key da = key d} = set das\n  k = key d\n  da \\<in> set das\n\ngoal (1 subgoal):\n 1. key da = k", "by auto"], ["proof (state)\nthis:\n  key da = k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  key da = k\n\ngoal (2 subgoals):\n 1. k = key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}\n 2. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "from da k"], ["proof (chain)\npicking this:\n  da \\<in> set (d # das)\n  key da = k", "show ?thesis"], ["proof (prove)\nusing this:\n  da \\<in> set (d # das)\n  key da = k\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "using das"], ["proof (prove)\nusing this:\n  da \\<in> set (d # das)\n  key da = k\n  {da \\<in> set ds. key da = key d} = set das\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "by auto"], ["proof (state)\nthis:\n  da \\<in> {d \\<in> set ds. key d = k} \\<union>\n           {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "case False"], ["proof (state)\nthis:\n  k \\<noteq> key d\n\ngoal (1 subgoal):\n 1. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "with rm"], ["proof (chain)\npicking this:\n  (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> d # das)) k =\n  Some das'\n  k \\<noteq> key d", "have \"rm.\\<alpha> (?el ds) k = Some das'\""], ["proof (prove)\nusing this:\n  (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> d # das)) k =\n  Some das'\n  k \\<noteq> key d\n\ngoal (1 subgoal):\n 1. rm.\\<alpha> (elem_list_to_rm key ds) k = Some das'", "by auto"], ["proof (state)\nthis:\n  rm.\\<alpha> (elem_list_to_rm key ds) k = Some das'\n\ngoal (1 subgoal):\n 1. k \\<noteq> key d \\<Longrightarrow>\n    da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "from ind[of k, unfolded rm_set_lookup_def this] da False"], ["proof (chain)\npicking this:\n  set (case Some das' of None \\<Rightarrow> []\n       | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k}\n  da \\<in> set das'\n  k \\<noteq> key d", "show ?thesis"], ["proof (prove)\nusing this:\n  set (case Some das' of None \\<Rightarrow> []\n       | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k}\n  da \\<in> set das'\n  k \\<noteq> key d\n\ngoal (1 subgoal):\n 1. da \\<in> {d \\<in> set ds. key d = k} \\<union>\n             {da. key da = k \\<and> da = d}", "by auto"], ["proof (state)\nthis:\n  da \\<in> {d \\<in> set ds. key d = k} \\<union>\n           {da. key da = k \\<and> da = d}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  da \\<in> {d \\<in> set ds. key d = k} \\<union>\n           {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "}"], ["proof (state)\nthis:\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   d # das))\n                   k of\n             None \\<Rightarrow> []\n             | Some rules \\<Rightarrow> rules) \\<Longrightarrow>\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "ultimately"], ["proof (chain)\npicking this:\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<union>\n        {da. key da = k \\<and> da = d} \\<Longrightarrow>\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   d # das))\n                   k of\n             None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   d # das))\n                   k of\n             None \\<Rightarrow> []\n             | Some rules \\<Rightarrow> rules) \\<Longrightarrow>\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}", "have \"?l = ?r1 \\<union> ?r2\""], ["proof (prove)\nusing this:\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<union>\n        {da. key da = k \\<and> da = d} \\<Longrightarrow>\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   d # das))\n                   k of\n             None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules)\n  ?da2\n  \\<in> set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n                   d # das))\n                   k of\n             None \\<Rightarrow> []\n             | Some rules \\<Rightarrow> rules) \\<Longrightarrow>\n  ?da2\n  \\<in> {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n               d # das))\n               k of\n         None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n    {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}", "by blast"], ["proof (state)\nthis:\n  set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> d # das))\n             k of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rm.\\<alpha> (elem_list_to_rm key ds) (key d) =\n       Some a \\<Longrightarrow>\n       set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n       {da \\<in> set (d # ds). key da = k}", "then"], ["proof (chain)\npicking this:\n  set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> d # das))\n             k of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}", "show ?thesis"], ["proof (prove)\nusing this:\n  set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> d # das))\n             k of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n    {da \\<in> set (d # ds). key da = k}", "unfolding l r"], ["proof (prove)\nusing this:\n  set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto> d # das))\n             k of\n       None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n  {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}\n\ngoal (1 subgoal):\n 1. set (case (rm.\\<alpha> (elem_list_to_rm key ds)(key d \\<mapsto>\n               d # das))\n               k of\n         None \\<Rightarrow> [] | Some rules \\<Rightarrow> rules) =\n    {d \\<in> set ds. key d = k} \\<union> {da. key da = k \\<and> da = d}", "."], ["proof (state)\nthis:\n  set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n  {da \\<in> set (d # ds). key da = k}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (rm_set_lookup (elem_list_to_rm key (d # ds)) k) =\n  {da \\<in> set (d # ds). key da = k}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (rm_set_lookup (elem_list_to_rm key ds) k) =\n  {d \\<in> set ds. key d = k}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}