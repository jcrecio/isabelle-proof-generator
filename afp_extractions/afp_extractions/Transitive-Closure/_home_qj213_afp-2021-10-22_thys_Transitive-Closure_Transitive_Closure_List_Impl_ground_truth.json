{"file_name": "/home/qj213/afp-2021-10-22/thys/Transitive-Closure/Transitive_Closure_List_Impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Transitive-Closure", "problem_names": ["lemma rtrancl_list_impl:\n  \"set (rtrancl_list_impl r as) = {b. \\<exists> a \\<in> set as. (a, b) \\<in> (set r)\\<^sup>*}\"", "lemma trancl_list_impl:\n  \"set (trancl_list_impl r as) = {b. \\<exists> a \\<in> set as. (a, b) \\<in> (set r)\\<^sup>+}\"", "lemma memo_list_rtrancl:\n  \"set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\" (is \"?l = ?r\")", "lemma memo_list_trancl:\n  \"set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\" (is \"?l = ?r\")"], "translations": [["", "lemma rtrancl_list_impl:\n  \"set (rtrancl_list_impl r as) = {b. \\<exists> a \\<in> set as. (a, b) \\<in> (set r)\\<^sup>*}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rtrancl_list_impl r as) =\n    {b. \\<exists>a\\<in>set as. (a, b) \\<in> (set r)\\<^sup>*}", "unfolding rtrancl_list_impl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rtrancl_impl\n          (\\<lambda>r as.\n              remdups\n               (map snd (filter (\\<lambda>(a, b). a \\<in> set as) r)))\n          (\\<lambda>xs ys. filter (\\<lambda>x. x \\<notin> set ys) xs @ ys)\n          (\\<lambda>x xs. x \\<in> set xs) [] r as) =\n    {b. \\<exists>a\\<in>set as. (a, b) \\<in> (set r)\\<^sup>*}", "by (rule set_access_gen.rtrancl_impl, unfold_locales, force+)"], ["", "lemma trancl_list_impl:\n  \"set (trancl_list_impl r as) = {b. \\<exists> a \\<in> set as. (a, b) \\<in> (set r)\\<^sup>+}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (trancl_list_impl r as) =\n    {b. \\<exists>a\\<in>set as. (a, b) \\<in> (set r)\\<^sup>+}", "unfolding trancl_list_impl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (trancl_impl\n          (\\<lambda>r as.\n              remdups\n               (map snd (filter (\\<lambda>(a, b). a \\<in> set as) r)))\n          (\\<lambda>xs ys. filter (\\<lambda>x. x \\<notin> set ys) xs @ ys)\n          (\\<lambda>x xs. x \\<in> set xs) [] r as) =\n    {b. \\<exists>a\\<in>set as. (a, b) \\<in> (set r)\\<^sup>+}", "by (rule set_access_gen.trancl_impl, unfold_locales, force+)"], ["", "subsection \\<open>Precomputing Closures for Single States\\<close>"], ["", "text \\<open>\n  Storing all relevant entries is done by mapping all left-hand sides of the relation to their\n  closure. To avoid redundant entries, @{const remdups} is used.\n\\<close>"], ["", "definition memo_list_rtrancl :: \"('a \\<times> 'a) list \\<Rightarrow> ('a \\<Rightarrow> 'a list)\"\nwhere\n  \"memo_list_rtrancl r =\n    (let\n      tr = rtrancl_list_impl r;\n      rm = map (\\<lambda>a. (a, tr [a])) ((remdups \\<circ> map fst) r)\n    in\n      (\\<lambda>a. case map_of rm a of\n        None \\<Rightarrow> [a]\n      | Some as \\<Rightarrow> as))\""], ["", "lemma memo_list_rtrancl:\n  \"set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "let ?rm = \"map (\\<lambda> a. (a, rtrancl_list_impl r [a])) ((remdups \\<circ> map fst) r)\""], ["proof (state)\ngoal (1 subgoal):\n 1. set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "proof (cases \"map_of ?rm a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "case None"], ["proof (state)\nthis:\n  map_of\n   (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n     ((remdups \\<circ> map fst) r))\n   a =\n  None\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "have one: \"?l = {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (memo_list_rtrancl r a) = {a}", "unfolding memo_list_rtrancl_def Let_def None"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (case None of None \\<Rightarrow> [a] | Some as \\<Rightarrow> as) =\n    {a}", "by auto"], ["proof (state)\nthis:\n  set (memo_list_rtrancl r a) = {a}\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "from None [unfolded map_of_eq_None_iff]"], ["proof (chain)\npicking this:\n  a \\<notin> fst `\n             set (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n                   ((remdups \\<circ> map fst) r))", "have a: \"a \\<notin> fst ` set r\""], ["proof (prove)\nusing this:\n  a \\<notin> fst `\n             set (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n                   ((remdups \\<circ> map fst) r))\n\ngoal (1 subgoal):\n 1. a \\<notin> fst ` set r", "by force"], ["proof (state)\nthis:\n  a \\<notin> fst ` set r\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "{"], ["proof (state)\nthis:\n  a \\<notin> fst ` set r\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "fix b"], ["proof (state)\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "assume \"b \\<in> ?r\""], ["proof (state)\nthis:\n  b \\<in> {b. (a, b) \\<in> (set r)\\<^sup>*}\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "from this [unfolded rtrancl_power relpow_fun_conv]"], ["proof (chain)\npicking this:\n  b \\<in> {b. \\<exists>n f.\n                 f 0 = a \\<and>\n                 f n = b \\<and>\n                 (\\<forall>i<n. (f i, f (Suc i)) \\<in> set r)}", "obtain n f where \n        ab: \"f 0 = a \\<and> f n = b\" and steps: \"\\<And> i. i < n \\<Longrightarrow> (f i, f (Suc i)) \\<in> set r\""], ["proof (prove)\nusing this:\n  b \\<in> {b. \\<exists>n f.\n                 f 0 = a \\<and>\n                 f n = b \\<and>\n                 (\\<forall>i<n. (f i, f (Suc i)) \\<in> set r)}\n\ngoal (1 subgoal):\n 1. (\\<And>f n.\n        \\<lbrakk>f 0 = a \\<and> f n = b;\n         \\<And>i.\n            i < n \\<Longrightarrow> (f i, f (Suc i)) \\<in> set r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f 0 = a \\<and> f n = b\n  ?i < n \\<Longrightarrow> (f ?i, f (Suc ?i)) \\<in> set r\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "from ab steps [of 0] a"], ["proof (chain)\npicking this:\n  f 0 = a \\<and> f n = b\n  0 < n \\<Longrightarrow> (f 0, f (Suc 0)) \\<in> set r\n  a \\<notin> fst ` set r", "have \"a = b\""], ["proof (prove)\nusing this:\n  f 0 = a \\<and> f n = b\n  0 < n \\<Longrightarrow> (f 0, f (Suc 0)) \\<in> set r\n  a \\<notin> fst ` set r\n\ngoal (1 subgoal):\n 1. a = b", "by (cases n, force+)"], ["proof (state)\nthis:\n  a = b\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "}"], ["proof (state)\nthis:\n  ?b2 \\<in> {b. (a, b) \\<in> (set r)\\<^sup>*} \\<Longrightarrow> a = ?b2\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "then"], ["proof (chain)\npicking this:\n  ?b2 \\<in> {b. (a, b) \\<in> (set r)\\<^sup>*} \\<Longrightarrow> a = ?b2", "have \"?r = {a}\""], ["proof (prove)\nusing this:\n  ?b2 \\<in> {b. (a, b) \\<in> (set r)\\<^sup>*} \\<Longrightarrow> a = ?b2\n\ngoal (1 subgoal):\n 1. {b. (a, b) \\<in> (set r)\\<^sup>*} = {a}", "by auto"], ["proof (state)\nthis:\n  {b. (a, b) \\<in> (set r)\\<^sup>*} = {a}\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "then"], ["proof (chain)\npicking this:\n  {b. (a, b) \\<in> (set r)\\<^sup>*} = {a}", "show ?thesis"], ["proof (prove)\nusing this:\n  {b. (a, b) \\<in> (set r)\\<^sup>*} = {a}\n\ngoal (1 subgoal):\n 1. set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "unfolding one"], ["proof (prove)\nusing this:\n  {b. (a, b) \\<in> (set r)\\<^sup>*} = {a}\n\ngoal (1 subgoal):\n 1. {a} = {b. (a, b) \\<in> (set r)\\<^sup>*}", "by simp"], ["proof (state)\nthis:\n  set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "case (Some as)"], ["proof (state)\nthis:\n  map_of\n   (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n     ((remdups \\<circ> map fst) r))\n   a =\n  Some as\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "have as: \"set as = {b. (a, b) \\<in> (set r)^*}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set as = {b. (a, b) \\<in> (set r)\\<^sup>*}", "using map_of_SomeD [OF Some]\n        rtrancl_list_impl [of r \"[a]\"]"], ["proof (prove)\nusing this:\n  (a, as)\n  \\<in> set (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n              ((remdups \\<circ> map fst) r))\n  set (rtrancl_list_impl r [a]) =\n  {b. \\<exists>a\\<in>set [a]. (a, b) \\<in> (set r)\\<^sup>*}\n\ngoal (1 subgoal):\n 1. set as = {b. (a, b) \\<in> (set r)\\<^sup>*}", "by force"], ["proof (state)\nthis:\n  set as = {b. (a, b) \\<in> (set r)\\<^sup>*}\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, rtrancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "then"], ["proof (chain)\npicking this:\n  set as = {b. (a, b) \\<in> (set r)\\<^sup>*}", "show ?thesis"], ["proof (prove)\nusing this:\n  set as = {b. (a, b) \\<in> (set r)\\<^sup>*}\n\ngoal (1 subgoal):\n 1. set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}", "unfolding memo_list_rtrancl_def Let_def Some"], ["proof (prove)\nusing this:\n  set as = {b. (a, b) \\<in> (set r)\\<^sup>*}\n\ngoal (1 subgoal):\n 1. set (case Some as of None \\<Rightarrow> [a]\n         | Some as \\<Rightarrow> as) =\n    {b. (a, b) \\<in> (set r)\\<^sup>*}", "by simp"], ["proof (state)\nthis:\n  set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (memo_list_rtrancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>*}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition memo_list_trancl :: \"('a \\<times> 'a) list \\<Rightarrow> ('a \\<Rightarrow> 'a list)\"\nwhere\n  \"memo_list_trancl r =\n    (let\n      tr = trancl_list_impl r;\n      rm = map (\\<lambda>a. (a, tr [a])) ((remdups \\<circ> map fst) r)\n    in\n      (\\<lambda>a. case map_of rm a of\n        None \\<Rightarrow> []\n      | Some as \\<Rightarrow> as))\""], ["", "lemma memo_list_trancl:\n  \"set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "let ?rm = \"map (\\<lambda> a. (a, trancl_list_impl r [a])) ((remdups \\<circ> map fst) r)\""], ["proof (state)\ngoal (1 subgoal):\n 1. set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "proof (cases \"map_of ?rm a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "case None"], ["proof (state)\nthis:\n  map_of\n   (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n     ((remdups \\<circ> map fst) r))\n   a =\n  None\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "have one: \"?l = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (memo_list_trancl r a) = {}", "unfolding memo_list_trancl_def Let_def None"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (case None of None \\<Rightarrow> [] | Some as \\<Rightarrow> as) = {}", "by auto"], ["proof (state)\nthis:\n  set (memo_list_trancl r a) = {}\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "from None [unfolded map_of_eq_None_iff]"], ["proof (chain)\npicking this:\n  a \\<notin> fst `\n             set (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n                   ((remdups \\<circ> map fst) r))", "have a: \"a \\<notin> fst ` set r\""], ["proof (prove)\nusing this:\n  a \\<notin> fst `\n             set (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n                   ((remdups \\<circ> map fst) r))\n\ngoal (1 subgoal):\n 1. a \\<notin> fst ` set r", "by force"], ["proof (state)\nthis:\n  a \\<notin> fst ` set r\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "{"], ["proof (state)\nthis:\n  a \\<notin> fst ` set r\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "fix b"], ["proof (state)\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "assume \"b \\<in> ?r\""], ["proof (state)\nthis:\n  b \\<in> {b. (a, b) \\<in> (set r)\\<^sup>+}\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "from this [unfolded trancl_unfold_left] a"], ["proof (chain)\npicking this:\n  b \\<in> {b. (a, b) \\<in> set r O (set r)\\<^sup>*}\n  a \\<notin> fst ` set r", "have False"], ["proof (prove)\nusing this:\n  b \\<in> {b. (a, b) \\<in> set r O (set r)\\<^sup>*}\n  a \\<notin> fst ` set r\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "}"], ["proof (state)\nthis:\n  ?b2 \\<in> {b. (a, b) \\<in> (set r)\\<^sup>+} \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "then"], ["proof (chain)\npicking this:\n  ?b2 \\<in> {b. (a, b) \\<in> (set r)\\<^sup>+} \\<Longrightarrow> False", "have \"?r = {}\""], ["proof (prove)\nusing this:\n  ?b2 \\<in> {b. (a, b) \\<in> (set r)\\<^sup>+} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. {b. (a, b) \\<in> (set r)\\<^sup>+} = {}", "by auto"], ["proof (state)\nthis:\n  {b. (a, b) \\<in> (set r)\\<^sup>+} = {}\n\ngoal (2 subgoals):\n 1. map_of\n     (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n       ((remdups \\<circ> map fst) r))\n     a =\n    None \\<Longrightarrow>\n    set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n 2. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "then"], ["proof (chain)\npicking this:\n  {b. (a, b) \\<in> (set r)\\<^sup>+} = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  {b. (a, b) \\<in> (set r)\\<^sup>+} = {}\n\ngoal (1 subgoal):\n 1. set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "unfolding one"], ["proof (prove)\nusing this:\n  {b. (a, b) \\<in> (set r)\\<^sup>+} = {}\n\ngoal (1 subgoal):\n 1. {} = {b. (a, b) \\<in> (set r)\\<^sup>+}", "by simp"], ["proof (state)\nthis:\n  set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "case (Some as)"], ["proof (state)\nthis:\n  map_of\n   (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n     ((remdups \\<circ> map fst) r))\n   a =\n  Some as\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "have as: \"set as = {b. (a, b) \\<in> (set r)\\<^sup>+}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set as = {b. (a, b) \\<in> (set r)\\<^sup>+}", "using map_of_SomeD [OF Some]\n        trancl_list_impl[of r \"[a]\"]"], ["proof (prove)\nusing this:\n  (a, as)\n  \\<in> set (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n              ((remdups \\<circ> map fst) r))\n  set (trancl_list_impl r [a]) =\n  {b. \\<exists>a\\<in>set [a]. (a, b) \\<in> (set r)\\<^sup>+}\n\ngoal (1 subgoal):\n 1. set as = {b. (a, b) \\<in> (set r)\\<^sup>+}", "by force"], ["proof (state)\nthis:\n  set as = {b. (a, b) \\<in> (set r)\\<^sup>+}\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       map_of\n        (map (\\<lambda>a. (a, trancl_list_impl r [a]))\n          ((remdups \\<circ> map fst) r))\n        a =\n       Some aa \\<Longrightarrow>\n       set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "then"], ["proof (chain)\npicking this:\n  set as = {b. (a, b) \\<in> (set r)\\<^sup>+}", "show ?thesis"], ["proof (prove)\nusing this:\n  set as = {b. (a, b) \\<in> (set r)\\<^sup>+}\n\ngoal (1 subgoal):\n 1. set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}", "unfolding memo_list_trancl_def Let_def Some"], ["proof (prove)\nusing this:\n  set as = {b. (a, b) \\<in> (set r)\\<^sup>+}\n\ngoal (1 subgoal):\n 1. set (case Some as of None \\<Rightarrow> [] | Some as \\<Rightarrow> as) =\n    {b. (a, b) \\<in> (set r)\\<^sup>+}", "by simp"], ["proof (state)\nthis:\n  set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (memo_list_trancl r a) = {b. (a, b) \\<in> (set r)\\<^sup>+}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}