{"file_name": "/home/qj213/afp-2021-10-22/thys/Poincare_Bendixson/Invariance.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Poincare_Bendixson", "problem_names": ["lemma positively_invariant_iff:\n  \"positively_invariant M \\<longleftrightarrow>\n  (\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x \\<inter> {0..})) \\<subseteq> M\"", "lemma negatively_invariant_iff:\n  \"negatively_invariant M \\<longleftrightarrow>\n  (\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x \\<inter> {..0})) \\<subseteq> M\"", "lemma invariant_iff_pos_and_neg_invariant:\n  \"invariant M \\<longleftrightarrow> positively_invariant M \\<and> negatively_invariant M\"", "lemma invariant_iff:\n  \"invariant M \\<longleftrightarrow> (\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x)) \\<subseteq>  M\"", "lemma positively_invariant_restrict_dom: \"positively_invariant M = positively_invariant (M \\<inter> X)\"", "lemma negatively_invariant_restrict_dom: \"negatively_invariant M = negatively_invariant (M \\<inter> X)\"", "lemma invariant_restrict_dom: \"invariant M = invariant (M \\<inter> X)\"", "lemma positively_invariant_eq_rev: \"positively_invariant M = rev.negatively_invariant M\"", "lemma negatively_invariant_eq_rev: \"negatively_invariant M = rev.positively_invariant M\"", "lemma invariant_eq_rev: \"invariant M = rev.invariant M\"", "lemma negatively_invariant_complI: \"negatively_invariant (X-M)\" if \"positively_invariant M\"", "lemma negatively_invariant_complD: \"positively_invariant M\" if \"negatively_invariant (X-M)\"", "lemma pos_invariant_iff_compl_neg_invariant: \"positively_invariant M \\<longleftrightarrow> negatively_invariant (X - M)\"", "lemma neg_invariant_iff_compl_pos_invariant:\n  shows \"negatively_invariant M \\<longleftrightarrow> positively_invariant (X - M)\"", "lemma invariant_iff_compl_invariant:\n  shows \"invariant M \\<longleftrightarrow> invariant (X - M)\"", "lemma invariant_iff_pos_invariant_and_compl_pos_invariant:\n  shows \"invariant M \\<longleftrightarrow> positively_invariant M \\<and> positively_invariant (X-M)\"", "lemma positively_invariant_left_inter:\n  assumes \"positively_invariant C\"\n  assumes \"\\<forall>x \\<in> C \\<inter> D. trapped_forward x D\"\n  shows \"positively_invariant (C \\<inter> D)\"", "lemma trapped_forward_le:\n  fixes V :: \"'a \\<Rightarrow> real\"\n  assumes \"V x \\<le> 0\"\n  assumes contg: \"continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..})) g\"\n  assumes \"\\<And>x. (V has_derivative V' x) (at x)\"\n  assumes \"\\<And>s. s \\<in> existence_ivl0 x \\<inter> {0..} \\<Longrightarrow> V' (flow0 x s) (f (flow0 x s)) \\<le> g (flow0 x s) * V (flow0 x s)\"\n  shows \"trapped_forward x {x. V x \\<le> 0}\"", "lemma positively_invariant_le_domain:\n  fixes V :: \"'a \\<Rightarrow> real\"\n  assumes \"positively_invariant D\"\n  assumes contg: \"continuous_on D g\"\n  assumes \"\\<And>x. (V has_derivative V' x) (at x)\" (* TODO: domain can be added here too ? *)\n  assumes \"\\<And>s. s \\<in> D \\<Longrightarrow> V' s (f s) \\<le> g s * V s\"\n  shows \"positively_invariant (D \\<inter> {x. V x \\<le> 0})\"", "lemma positively_invariant_barrier_domain:\n  fixes V :: \"'a \\<Rightarrow> real\"\n  assumes \"positively_invariant D\"\n  assumes \"\\<And>x. (V has_derivative V' x) (at x)\"\n  assumes \"continuous_on D (\\<lambda>x. V' x (f x))\"\n  assumes \"\\<And>s. s \\<in> D \\<Longrightarrow> V s = 0 \\<Longrightarrow> V' s (f s) < 0\"\n  shows \"positively_invariant (D \\<inter> {x. V x \\<le> 0})\"", "lemma positively_invariant_UNIV:\n  shows \"positively_invariant UNIV\"", "lemma positively_invariant_conj:\n  assumes \"positively_invariant C\"\n  assumes \"positively_invariant D\"\n  shows \"positively_invariant (C \\<inter> D)\"", "lemma positively_invariant_le:\n  fixes V :: \"'a \\<Rightarrow> real\"\n  assumes contg: \"continuous_on UNIV g\"\n  assumes \"\\<And>x. (V has_derivative V' x) (at x)\"\n  assumes \"\\<And>s. V' s (f s) \\<le> g s * V s\"\n  shows \"positively_invariant {x. V x \\<le> 0}\"", "lemma positively_invariant_barrier:\n  fixes V :: \"'a \\<Rightarrow> real\"\n  assumes \"\\<And>x. (V has_derivative V' x) (at x)\"\n  assumes \"continuous_on UNIV (\\<lambda>x. V' x (f x))\"\n  assumes \"\\<And>s. V s = 0 \\<Longrightarrow> V' s (f s) < 0\"\n  shows \"positively_invariant {x. V x \\<le> 0}\""], "translations": [["", "lemma positively_invariant_iff:\n  \"positively_invariant M \\<longleftrightarrow>\n  (\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x \\<inter> {0..})) \\<subseteq> M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant M =\n    ((\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x \\<inter> {0..}))\n     \\<subseteq> M)", "unfolding positively_invariant_def trapped_forward_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>M.\n        flow0 x ` (existence_ivl0 x \\<inter> {0..}) \\<subseteq> M) =\n    ((\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x \\<inter> {0..}))\n     \\<subseteq> M)", "by auto"], ["", "lemma negatively_invariant_iff:\n  \"negatively_invariant M \\<longleftrightarrow>\n  (\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x \\<inter> {..0})) \\<subseteq> M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. negatively_invariant M =\n    ((\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x \\<inter> {..0}))\n     \\<subseteq> M)", "unfolding negatively_invariant_def trapped_backward_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>M.\n        flow0 x ` (existence_ivl0 x \\<inter> {..0}) \\<subseteq> M) =\n    ((\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x \\<inter> {..0}))\n     \\<subseteq> M)", "by auto"], ["", "lemma invariant_iff_pos_and_neg_invariant:\n  \"invariant M \\<longleftrightarrow> positively_invariant M \\<and> negatively_invariant M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invariant M = (positively_invariant M \\<and> negatively_invariant M)", "unfolding invariant_def trapped_def positively_invariant_def negatively_invariant_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>M. trapped_forward x M \\<and> trapped_backward x M) =\n    ((\\<forall>x\\<in>M. trapped_forward x M) \\<and>\n     (\\<forall>x\\<in>M. trapped_backward x M))", "by blast"], ["", "lemma invariant_iff:\n  \"invariant M \\<longleftrightarrow> (\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x)) \\<subseteq>  M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invariant M =\n    ((\\<Union>x\\<in>M. flow0 x ` existence_ivl0 x) \\<subseteq> M)", "unfolding invariant_iff_pos_and_neg_invariant positively_invariant_iff negatively_invariant_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x \\<inter> {0..}))\n     \\<subseteq> M \\<and>\n     (\\<Union>x\\<in>M. flow0 x ` (existence_ivl0 x \\<inter> {..0}))\n     \\<subseteq> M) =\n    ((\\<Union>x\\<in>M. flow0 x ` existence_ivl0 x) \\<subseteq> M)", "by (metis (mono_tags) SUP_le_iff invariant_def invariant_iff_pos_and_neg_invariant negatively_invariant_iff positively_invariant_iff trapped_iff_on_existence_ivl0)"], ["", "lemma positively_invariant_restrict_dom: \"positively_invariant M = positively_invariant (M \\<inter> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant M = positively_invariant (M \\<inter> X)", "unfolding positively_invariant_def trapped_forward_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>M.\n        flow0 x ` (existence_ivl0 x \\<inter> {0..}) \\<subseteq> M) =\n    (\\<forall>x\\<in>M \\<inter> X.\n        flow0 x ` (existence_ivl0 x \\<inter> {0..})\n        \\<subseteq> M \\<inter> X)", "by (auto intro!: flow_in_domain dest: mem_existence_ivl_iv_defined)"], ["", "lemma negatively_invariant_restrict_dom: \"negatively_invariant M = negatively_invariant (M \\<inter> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. negatively_invariant M = negatively_invariant (M \\<inter> X)", "unfolding negatively_invariant_def trapped_backward_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>M.\n        flow0 x ` (existence_ivl0 x \\<inter> {..0}) \\<subseteq> M) =\n    (\\<forall>x\\<in>M \\<inter> X.\n        flow0 x ` (existence_ivl0 x \\<inter> {..0})\n        \\<subseteq> M \\<inter> X)", "by (auto intro!: flow_in_domain dest: mem_existence_ivl_iv_defined)"], ["", "lemma invariant_restrict_dom: \"invariant M = invariant (M \\<inter> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invariant M = invariant (M \\<inter> X)", "using invariant_iff_pos_and_neg_invariant\n    negatively_invariant_restrict_dom\n    positively_invariant_restrict_dom"], ["proof (prove)\nusing this:\n  invariant ?M = (positively_invariant ?M \\<and> negatively_invariant ?M)\n  negatively_invariant ?M = negatively_invariant (?M \\<inter> X)\n  positively_invariant ?M = positively_invariant (?M \\<inter> X)\n\ngoal (1 subgoal):\n 1. invariant M = invariant (M \\<inter> X)", "by auto"], ["", "(*\nlemma positively_invariant_imp_subset:\n  \"M \\<subseteq> X\" if \"positively_invariant M\"\n  using positively_invariant_iff that by blast\n\nlemma negatively_invariant_imp_subset:\n  \"M \\<subseteq> X\" if \"negatively_invariant M\"\n  using negatively_invariant_iff that by blast\n\nlemma invariant_imp_subset:\n  \"M \\<subseteq> X\" if \"invariant M\"\n  using invariant_iff that by blast\n*)"], ["", "end"], ["", "context auto_ll_on_open begin"], ["", "lemma positively_invariant_eq_rev: \"positively_invariant M = rev.negatively_invariant M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant M = rev.negatively_invariant M", "unfolding positively_invariant_def rev.negatively_invariant_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>M. trapped_forward x M) =\n    (\\<forall>x\\<in>M. rev.trapped_backward x M)", "by (simp add: rev.trapped_backward_iff_rev_trapped_forward)"], ["", "lemma negatively_invariant_eq_rev: \"negatively_invariant M = rev.positively_invariant M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. negatively_invariant M = rev.positively_invariant M", "unfolding negatively_invariant_def rev.positively_invariant_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>M. trapped_backward x M) =\n    (\\<forall>x\\<in>M. rev.trapped_forward x M)", "by (simp add: trapped_backward_iff_rev_trapped_forward)"], ["", "lemma invariant_eq_rev: \"invariant M = rev.invariant M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invariant M = rev.invariant M", "unfolding invariant_iff_pos_and_neg_invariant rev.invariant_iff_pos_and_neg_invariant\n    positively_invariant_eq_rev negatively_invariant_eq_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev.negatively_invariant M \\<and> rev.positively_invariant M) =\n    (rev.positively_invariant M \\<and> rev.negatively_invariant M)", "by auto"], ["", "lemma negatively_invariant_complI: \"negatively_invariant (X-M)\" if \"positively_invariant M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. negatively_invariant (X - M)", "unfolding negatively_invariant_def trapped_backward_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X - M.\n       flow0 x ` (existence_ivl0 x \\<inter> {..0}) \\<subseteq> X - M", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xb.\n       \\<lbrakk>x \\<in> X; x \\<notin> M; xb \\<in> existence_ivl0 x;\n        xb \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> flow0 x xb \\<in> X \\<and> flow0 x xb \\<notin> M", "fix x t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xb.\n       \\<lbrakk>x \\<in> X; x \\<notin> M; xb \\<in> existence_ivl0 x;\n        xb \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> flow0 x xb \\<in> X \\<and> flow0 x xb \\<notin> M", "assume x: \"x \\<in> X\" \"x \\<notin> M\" \"t \\<in> existence_ivl0 x\" \"t \\<le> 0\""], ["proof (state)\nthis:\n  x \\<in> X\n  x \\<notin> M\n  t \\<in> existence_ivl0 x\n  t \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<And>x xb.\n       \\<lbrakk>x \\<in> X; x \\<notin> M; xb \\<in> existence_ivl0 x;\n        xb \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> flow0 x xb \\<in> X \\<and> flow0 x xb \\<notin> M", "have a1:\"flow0 x t \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flow0 x t \\<in> X", "using x"], ["proof (prove)\nusing this:\n  x \\<in> X\n  x \\<notin> M\n  t \\<in> existence_ivl0 x\n  t \\<le> 0\n\ngoal (1 subgoal):\n 1. flow0 x t \\<in> X", "using flow_in_domain"], ["proof (prove)\nusing this:\n  x \\<in> X\n  x \\<notin> M\n  t \\<in> existence_ivl0 x\n  t \\<le> 0\n  ?t \\<in> existence_ivl0 ?x0.0 \\<Longrightarrow> flow0 ?x0.0 ?t \\<in> X\n\ngoal (1 subgoal):\n 1. flow0 x t \\<in> X", "by blast"], ["proof (state)\nthis:\n  flow0 x t \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>x xb.\n       \\<lbrakk>x \\<in> X; x \\<notin> M; xb \\<in> existence_ivl0 x;\n        xb \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> flow0 x xb \\<in> X \\<and> flow0 x xb \\<notin> M", "have a2:\"flow0 x t \\<notin> M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flow0 x t \\<notin> M", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> flow0 x t \\<notin> M \\<Longrightarrow> False", "assume \"\\<not> flow0 x t \\<notin> M\""], ["proof (state)\nthis:\n  \\<not> flow0 x t \\<notin> M\n\ngoal (1 subgoal):\n 1. \\<not> flow0 x t \\<notin> M \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> flow0 x t \\<notin> M", "have \"trapped_forward (flow0 x t) M\""], ["proof (prove)\nusing this:\n  \\<not> flow0 x t \\<notin> M\n\ngoal (1 subgoal):\n 1. trapped_forward (flow0 x t) M", "using positively_invariant_def that"], ["proof (prove)\nusing this:\n  \\<not> flow0 x t \\<notin> M\n  positively_invariant ?M = (\\<forall>x\\<in>?M. trapped_forward x ?M)\n  positively_invariant M\n\ngoal (1 subgoal):\n 1. trapped_forward (flow0 x t) M", "by auto"], ["proof (state)\nthis:\n  trapped_forward (flow0 x t) M\n\ngoal (1 subgoal):\n 1. \\<not> flow0 x t \\<notin> M \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  trapped_forward (flow0 x t) M\n\ngoal (1 subgoal):\n 1. \\<not> flow0 x t \\<notin> M \\<Longrightarrow> False", "have \"flow0 (flow0 x t) (-t) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flow0 (flow0 x t) (- t) = x", "using \\<open>t \\<in> existence_ivl0 x\\<close> flows_reverse"], ["proof (prove)\nusing this:\n  t \\<in> existence_ivl0 x\n  ?t \\<in> existence_ivl0 ?x0.0 \\<Longrightarrow>\n  flow0 (flow0 ?x0.0 ?t) (0 - ?t) = ?x0.0\n\ngoal (1 subgoal):\n 1. flow0 (flow0 x t) (- t) = x", "by auto"], ["proof (state)\nthis:\n  flow0 (flow0 x t) (- t) = x\n\ngoal (1 subgoal):\n 1. \\<not> flow0 x t \\<notin> M \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  flow0 (flow0 x t) (- t) = x\n\ngoal (1 subgoal):\n 1. \\<not> flow0 x t \\<notin> M \\<Longrightarrow> False", "have \"-t \\<in> existence_ivl0 (flow0 x t) \\<inter> {0..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - t \\<in> existence_ivl0 (flow0 x t) \\<inter> {0..}", "using existence_ivl_reverse x(3) x(4)"], ["proof (prove)\nusing this:\n  ?t \\<in> existence_ivl0 ?x0.0 \\<Longrightarrow>\n  0 - ?t \\<in> existence_ivl0 (flow0 ?x0.0 ?t)\n  t \\<in> existence_ivl0 x\n  t \\<le> 0\n\ngoal (1 subgoal):\n 1. - t \\<in> existence_ivl0 (flow0 x t) \\<inter> {0..}", "by auto"], ["proof (state)\nthis:\n  - t \\<in> existence_ivl0 (flow0 x t) \\<inter> {0..}\n\ngoal (1 subgoal):\n 1. \\<not> flow0 x t \\<notin> M \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  trapped_forward (flow0 x t) M\n  flow0 (flow0 x t) (- t) = x\n  - t \\<in> existence_ivl0 (flow0 x t) \\<inter> {0..}", "have \"x \\<in> M\""], ["proof (prove)\nusing this:\n  trapped_forward (flow0 x t) M\n  flow0 (flow0 x t) (- t) = x\n  - t \\<in> existence_ivl0 (flow0 x t) \\<inter> {0..}\n\ngoal (1 subgoal):\n 1. x \\<in> M", "unfolding trapped_forward_def"], ["proof (prove)\nusing this:\n  flow0 (flow0 x t) ` (existence_ivl0 (flow0 x t) \\<inter> {0..})\n  \\<subseteq> M\n  flow0 (flow0 x t) (- t) = x\n  - t \\<in> existence_ivl0 (flow0 x t) \\<inter> {0..}\n\ngoal (1 subgoal):\n 1. x \\<in> M", "by (metis image_subset_iff)"], ["proof (state)\nthis:\n  x \\<in> M\n\ngoal (1 subgoal):\n 1. \\<not> flow0 x t \\<notin> M \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  x \\<in> M\n\ngoal (1 subgoal):\n 1. False", "using x(2)"], ["proof (prove)\nusing this:\n  x \\<in> M\n  x \\<notin> M\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  flow0 x t \\<notin> M\n\ngoal (1 subgoal):\n 1. \\<And>x xb.\n       \\<lbrakk>x \\<in> X; x \\<notin> M; xb \\<in> existence_ivl0 x;\n        xb \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> flow0 x xb \\<in> X \\<and> flow0 x xb \\<notin> M", "show \"flow0 x t \\<in> X \\<and> flow0 x t \\<notin> M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flow0 x t \\<in> X \\<and> flow0 x t \\<notin> M", "using a1 a2"], ["proof (prove)\nusing this:\n  flow0 x t \\<in> X\n  flow0 x t \\<notin> M\n\ngoal (1 subgoal):\n 1. flow0 x t \\<in> X \\<and> flow0 x t \\<notin> M", "by auto"], ["proof (state)\nthis:\n  flow0 x t \\<in> X \\<and> flow0 x t \\<notin> M\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context auto_ll_on_open begin"], ["", "lemma negatively_invariant_complD: \"positively_invariant M\" if \"negatively_invariant (X-M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. positively_invariant M", "have \"rev.positively_invariant (X-M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev.positively_invariant (X - M)", "using that"], ["proof (prove)\nusing this:\n  negatively_invariant (X - M)\n\ngoal (1 subgoal):\n 1. rev.positively_invariant (X - M)", "by (simp add: negatively_invariant_eq_rev)"], ["proof (state)\nthis:\n  rev.positively_invariant (X - M)\n\ngoal (1 subgoal):\n 1. positively_invariant M", "then"], ["proof (chain)\npicking this:\n  rev.positively_invariant (X - M)", "have \"rev.negatively_invariant (X-(X-M))\""], ["proof (prove)\nusing this:\n  rev.positively_invariant (X - M)\n\ngoal (1 subgoal):\n 1. rev.negatively_invariant (X - (X - M))", "by (simp add: rev.negatively_invariant_complI)"], ["proof (state)\nthis:\n  rev.negatively_invariant (X - (X - M))\n\ngoal (1 subgoal):\n 1. positively_invariant M", "then"], ["proof (chain)\npicking this:\n  rev.negatively_invariant (X - (X - M))", "have \"positively_invariant (X-(X-M))\""], ["proof (prove)\nusing this:\n  rev.negatively_invariant (X - (X - M))\n\ngoal (1 subgoal):\n 1. positively_invariant (X - (X - M))", "using rev.negatively_invariant_eq_rev"], ["proof (prove)\nusing this:\n  rev.negatively_invariant (X - (X - M))\n  rev.negatively_invariant ?M = positively_invariant ?M\n\ngoal (1 subgoal):\n 1. positively_invariant (X - (X - M))", "by auto"], ["proof (state)\nthis:\n  positively_invariant (X - (X - M))\n\ngoal (1 subgoal):\n 1. positively_invariant M", "thus ?thesis"], ["proof (prove)\nusing this:\n  positively_invariant (X - (X - M))\n\ngoal (1 subgoal):\n 1. positively_invariant M", "using Diff_Diff_Int"], ["proof (prove)\nusing this:\n  positively_invariant (X - (X - M))\n  ?A - (?A - ?B) = ?A \\<inter> ?B\n\ngoal (1 subgoal):\n 1. positively_invariant M", "by (metis inf_commute positively_invariant_restrict_dom)"], ["proof (state)\nthis:\n  positively_invariant M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pos_invariant_iff_compl_neg_invariant: \"positively_invariant M \\<longleftrightarrow> negatively_invariant (X - M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant M = negatively_invariant (X - M)", "by (safe intro!: negatively_invariant_complI dest!: negatively_invariant_complD)"], ["", "lemma neg_invariant_iff_compl_pos_invariant:\n  shows \"negatively_invariant M \\<longleftrightarrow> positively_invariant (X - M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. negatively_invariant M = positively_invariant (X - M)", "by (simp add: auto_ll_on_open.pos_invariant_iff_compl_neg_invariant negatively_invariant_eq_rev positively_invariant_eq_rev rev.auto_ll_on_open_axioms)"], ["", "lemma invariant_iff_compl_invariant:\n  shows \"invariant M \\<longleftrightarrow> invariant (X - M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invariant M = invariant (X - M)", "using invariant_iff_pos_and_neg_invariant neg_invariant_iff_compl_pos_invariant pos_invariant_iff_compl_neg_invariant"], ["proof (prove)\nusing this:\n  invariant ?M = (positively_invariant ?M \\<and> negatively_invariant ?M)\n  negatively_invariant ?M = positively_invariant (X - ?M)\n  positively_invariant ?M = negatively_invariant (X - ?M)\n\ngoal (1 subgoal):\n 1. invariant M = invariant (X - M)", "by blast"], ["", "lemma invariant_iff_pos_invariant_and_compl_pos_invariant:\n  shows \"invariant M \\<longleftrightarrow> positively_invariant M \\<and> positively_invariant (X-M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invariant M =\n    (positively_invariant M \\<and> positively_invariant (X - M))", "by (simp add: invariant_iff_pos_and_neg_invariant neg_invariant_iff_compl_pos_invariant)"], ["", "end"], ["", "subsection \\<open>Tools for proving invariance\\<close>"], ["", "context auto_ll_on_open begin"], ["", "lemma positively_invariant_left_inter:\n  assumes \"positively_invariant C\"\n  assumes \"\\<forall>x \\<in> C \\<inter> D. trapped_forward x D\"\n  shows \"positively_invariant (C \\<inter> D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant (C \\<inter> D)", "using assms positively_invariant_def trapped_forward_def"], ["proof (prove)\nusing this:\n  positively_invariant C\n  \\<forall>x\\<in>C \\<inter> D. trapped_forward x D\n  positively_invariant ?M = (\\<forall>x\\<in>?M. trapped_forward x ?M)\n  trapped_forward ?x ?K =\n  (flow0 ?x ` (existence_ivl0 ?x \\<inter> {0..}) \\<subseteq> ?K)\n\ngoal (1 subgoal):\n 1. positively_invariant (C \\<inter> D)", "by auto"], ["", "lemma trapped_forward_le:\n  fixes V :: \"'a \\<Rightarrow> real\"\n  assumes \"V x \\<le> 0\"\n  assumes contg: \"continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..})) g\"\n  assumes \"\\<And>x. (V has_derivative V' x) (at x)\"\n  assumes \"\\<And>s. s \\<in> existence_ivl0 x \\<inter> {0..} \\<Longrightarrow> V' (flow0 x s) (f (flow0 x s)) \\<le> g (flow0 x s) * V (flow0 x s)\"\n  shows \"trapped_forward x {x. V x \\<le> 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trapped_forward x {x. V x \\<le> 0}", "unfolding trapped_forward_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. flow0 x ` (existence_ivl0 x \\<inter> {0..}) \\<subseteq> {x. V x \\<le> 0}", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> existence_ivl0 x; 0 \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> V (flow0 x xa) \\<le> 0", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> existence_ivl0 x; 0 \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> V (flow0 x xa) \\<le> 0", "assume t: \"t \\<in> existence_ivl0 x\" \"0 \\<le> t\""], ["proof (state)\nthis:\n  t \\<in> existence_ivl0 x\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> existence_ivl0 x; 0 \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> V (flow0 x xa) \\<le> 0", "then"], ["proof (chain)\npicking this:\n  t \\<in> existence_ivl0 x\n  0 \\<le> t", "have ex:\"{0..t} \\<subseteq> existence_ivl0 x\""], ["proof (prove)\nusing this:\n  t \\<in> existence_ivl0 x\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. {0..t} \\<subseteq> existence_ivl0 x", "by (simp add: local.ivl_subset_existence_ivl)"], ["proof (state)\nthis:\n  {0..t} \\<subseteq> existence_ivl0 x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> existence_ivl0 x; 0 \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> V (flow0 x xa) \\<le> 0", "have contV: \"continuous_on UNIV V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV V", "using assms(3) has_derivative_continuous_on"], ["proof (prove)\nusing this:\n  (V has_derivative V' ?x) (at ?x)\n  (\\<And>x.\n      x \\<in> ?s \\<Longrightarrow>\n      (?f has_derivative ?f' x) (at x within ?s)) \\<Longrightarrow>\n  continuous_on ?s ?f\n\ngoal (1 subgoal):\n 1. continuous_on UNIV V", "by blast"], ["proof (state)\nthis:\n  continuous_on UNIV V\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> existence_ivl0 x; 0 \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> V (flow0 x xa) \\<le> 0", "have 1: \"continuous_on {0..t} (g \\<circ> flow0 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {0..t} (g \\<circ> flow0 x)", "apply (rule continuous_on_compose)"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on {0..t} (flow0 x)\n 2. continuous_on (flow0 x ` {0..t}) g", "using continuous_on_subset ex local.flow_continuous_on"], ["proof (prove)\nusing this:\n  \\<lbrakk>continuous_on ?s ?f; ?t \\<subseteq> ?s\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?t ?f\n  {0..t} \\<subseteq> existence_ivl0 x\n  continuous_on (existence_ivl0 ?x0.0) (flow0 ?x0.0)\n\ngoal (2 subgoals):\n 1. continuous_on {0..t} (flow0 x)\n 2. continuous_on (flow0 x ` {0..t}) g", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (flow0 x ` {0..t}) g", "by (meson Int_subset_iff atLeastAtMost_iff atLeast_iff contg continuous_on_subset ex image_mono subsetI)"], ["proof (state)\nthis:\n  continuous_on {0..t} (g \\<circ> flow0 x)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> existence_ivl0 x; 0 \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> V (flow0 x xa) \\<le> 0", "have 2: \"(\\<And>s. s \\<in> {0..t} \\<Longrightarrow>\n         (V \\<circ> flow0 x has_real_derivative (V' (flow0 x s) \\<circ> f \\<circ> flow0 x) s) (at s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       (V \\<circ> flow0 x has_real_derivative\n        (V' (flow0 x s) \\<circ> f \\<circ> flow0 x) s)\n        (at s)", "apply (auto simp add:o_def has_field_derivative_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n                          (*) (V' (flow0 x s) (f (flow0 x s))))\n                          (at s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n                          (*) (V' (flow0 x s) (f (flow0 x s))))\n                          (at s)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n                          (*) (V' (flow0 x s) (f (flow0 x s))))\n                          (at s)", "assume \"0 \\<le> s\" \"s \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> s\n  s \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n                          (*) (V' (flow0 x s) (f (flow0 x s))))\n                          (at s)", "then"], ["proof (chain)\npicking this:\n  0 \\<le> s\n  s \\<le> t", "have \"s \\<in> existence_ivl0 x\""], ["proof (prove)\nusing this:\n  0 \\<le> s\n  s \\<le> t\n\ngoal (1 subgoal):\n 1. s \\<in> existence_ivl0 x", "using ex"], ["proof (prove)\nusing this:\n  0 \\<le> s\n  s \\<le> t\n  {0..t} \\<subseteq> existence_ivl0 x\n\ngoal (1 subgoal):\n 1. s \\<in> existence_ivl0 x", "by auto"], ["proof (state)\nthis:\n  s \\<in> existence_ivl0 x\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n                          (*) (V' (flow0 x s) (f (flow0 x s))))\n                          (at s)", "from flow_has_derivative[OF this]"], ["proof (chain)\npicking this:\n  (flow0 x has_derivative (\\<lambda>i. i *\\<^sub>R f (flow0 x s))) (at s)", "have\n      \"(flow0 x has_derivative (\\<lambda>i. i *\\<^sub>R f (flow0 x s))) (at s)\""], ["proof (prove)\nusing this:\n  (flow0 x has_derivative (\\<lambda>i. i *\\<^sub>R f (flow0 x s))) (at s)\n\ngoal (1 subgoal):\n 1. (flow0 x has_derivative (\\<lambda>i. i *\\<^sub>R f (flow0 x s))) (at s)", "."], ["proof (state)\nthis:\n  (flow0 x has_derivative (\\<lambda>i. i *\\<^sub>R f (flow0 x s))) (at s)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n                          (*) (V' (flow0 x s) (f (flow0 x s))))\n                          (at s)", "from has_derivative_compose[OF this assms(3)]"], ["proof (chain)\npicking this:\n  ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n   (\\<lambda>xa. V' (flow0 x s) (xa *\\<^sub>R f (flow0 x s))))\n   (at s)", "have \"((\\<lambda>t. V (flow0 x t)) has_derivative (\\<lambda>t. V' (flow0 x s)  (t *\\<^sub>R f (flow0 x s)))) (at s)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n   (\\<lambda>xa. V' (flow0 x s) (xa *\\<^sub>R f (flow0 x s))))\n   (at s)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t. V (flow0 x t)) has_derivative\n     (\\<lambda>t. V' (flow0 x s) (t *\\<^sub>R f (flow0 x s))))\n     (at s)", "."], ["proof (state)\nthis:\n  ((\\<lambda>t. V (flow0 x t)) has_derivative\n   (\\<lambda>t. V' (flow0 x s) (t *\\<^sub>R f (flow0 x s))))\n   (at s)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n                          (*) (V' (flow0 x s) (f (flow0 x s))))\n                          (at s)", "moreover"], ["proof (state)\nthis:\n  ((\\<lambda>t. V (flow0 x t)) has_derivative\n   (\\<lambda>t. V' (flow0 x s) (t *\\<^sub>R f (flow0 x s))))\n   (at s)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n                          (*) (V' (flow0 x s) (f (flow0 x s))))\n                          (at s)", "have \"linear (V' (flow0 x s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear (V' (flow0 x s))", "using assms(3) has_derivative_linear"], ["proof (prove)\nusing this:\n  (V has_derivative V' ?x) (at ?x)\n  (?f has_derivative ?f') ?F \\<Longrightarrow> linear ?f'\n\ngoal (1 subgoal):\n 1. linear (V' (flow0 x s))", "by blast"], ["proof (state)\nthis:\n  linear (V' (flow0 x s))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n                          (*) (V' (flow0 x s) (f (flow0 x s))))\n                          (at s)", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<lambda>t. V (flow0 x t)) has_derivative\n   (\\<lambda>t. V' (flow0 x s) (t *\\<^sub>R f (flow0 x s))))\n   (at s)\n  linear (V' (flow0 x s))", "have \"((\\<lambda>t. V (flow0 x t)) has_derivative (\\<lambda>t. t *\\<^sub>R V' (flow0 x s) (f (flow0 x s)))) (at s)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>t. V (flow0 x t)) has_derivative\n   (\\<lambda>t. V' (flow0 x s) (t *\\<^sub>R f (flow0 x s))))\n   (at s)\n  linear (V' (flow0 x s))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t. V (flow0 x t)) has_derivative\n     (\\<lambda>t. t *\\<^sub>R V' (flow0 x s) (f (flow0 x s))))\n     (at s)", "unfolding linear_cmul[OF \\<open>linear (V' (flow0 x s))\\<close>]"], ["proof (prove)\nusing this:\n  ((\\<lambda>t. V (flow0 x t)) has_derivative\n   (\\<lambda>t. t *\\<^sub>R V' (flow0 x s) (f (flow0 x s))))\n   (at s)\n  linear (V' (flow0 x s))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t. V (flow0 x t)) has_derivative\n     (\\<lambda>t. t *\\<^sub>R V' (flow0 x s) (f (flow0 x s))))\n     (at s)", "by blast"], ["proof (state)\nthis:\n  ((\\<lambda>t. V (flow0 x t)) has_derivative\n   (\\<lambda>t. t *\\<^sub>R V' (flow0 x s) (f (flow0 x s))))\n   (at s)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>xa. V (flow0 x xa)) has_derivative\n                          (*) (V' (flow0 x s) (f (flow0 x s))))\n                          (at s)", "thus \"((\\<lambda>t. V (flow0 x t)) has_derivative (*) (V' (flow0 x s) (f (flow0 x s)))) (at s)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>t. V (flow0 x t)) has_derivative\n   (\\<lambda>t. t *\\<^sub>R V' (flow0 x s) (f (flow0 x s))))\n   (at s)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t. V (flow0 x t)) has_derivative\n     (*) (V' (flow0 x s) (f (flow0 x s))))\n     (at s)", "by (auto intro!: derivative_eq_intros simp add: mult_commute_abs)"], ["proof (state)\nthis:\n  ((\\<lambda>t. V (flow0 x t)) has_derivative\n   (*) (V' (flow0 x s) (f (flow0 x s))))\n   (at s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?s \\<in> {0..t} \\<Longrightarrow>\n  (V \\<circ> flow0 x has_real_derivative\n   (V' (flow0 x ?s) \\<circ> f \\<circ> flow0 x) ?s)\n   (at ?s)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> existence_ivl0 x; 0 \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> V (flow0 x xa) \\<le> 0", "have 3: \"(\\<And>s. s \\<in> {0..t} \\<Longrightarrow>\n         (V' (flow0 x s)  \\<circ> f \\<circ> flow0 x) s \\<le> (g \\<circ> flow0 x) s *\\<^sub>R (V \\<circ> flow0 x) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       (V' (flow0 x s) \\<circ> f \\<circ> flow0 x) s\n       \\<le> (g \\<circ> flow0 x) s *\\<^sub>R (V \\<circ> flow0 x) s", "using ex"], ["proof (prove)\nusing this:\n  {0..t} \\<subseteq> existence_ivl0 x\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       (V' (flow0 x s) \\<circ> f \\<circ> flow0 x) s\n       \\<le> (g \\<circ> flow0 x) s *\\<^sub>R (V \\<circ> flow0 x) s", "by (auto intro!:assms(4))"], ["proof (state)\nthis:\n  ?s \\<in> {0..t} \\<Longrightarrow>\n  (V' (flow0 x ?s) \\<circ> f \\<circ> flow0 x) ?s\n  \\<le> (g \\<circ> flow0 x) ?s *\\<^sub>R (V \\<circ> flow0 x) ?s\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> existence_ivl0 x; 0 \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> V (flow0 x xa) \\<le> 0", "from comparison_principle_le_linear[OF 1 2 _ 3] assms(1)"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>ta. ta \\<in> {0..t} \\<Longrightarrow> ta \\<in> {0..t};\n   (V \\<circ> flow0 x) 0 \\<le> 0;\n   \\<And>ta. ta \\<in> {0..t} \\<Longrightarrow> ta \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> \\<forall>t\\<in>{0..t}. (V \\<circ> flow0 x) t \\<le> 0\n  V x \\<le> 0", "have \"\\<forall>s \\<in> {0..t}. (V \\<circ> flow0 x) s \\<le> 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>ta. ta \\<in> {0..t} \\<Longrightarrow> ta \\<in> {0..t};\n   (V \\<circ> flow0 x) 0 \\<le> 0;\n   \\<And>ta. ta \\<in> {0..t} \\<Longrightarrow> ta \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> \\<forall>t\\<in>{0..t}. (V \\<circ> flow0 x) t \\<le> 0\n  V x \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>{0..t}. (V \\<circ> flow0 x) s \\<le> 0", "using local.mem_existence_ivl_iv_defined(2) t(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>ta. ta \\<in> {0..t} \\<Longrightarrow> ta \\<in> {0..t};\n   (V \\<circ> flow0 x) 0 \\<le> 0;\n   \\<And>ta. ta \\<in> {0..t} \\<Longrightarrow> ta \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> \\<forall>t\\<in>{0..t}. (V \\<circ> flow0 x) t \\<le> 0\n  V x \\<le> 0\n  ?t \\<in> existence_ivl0 ?x0.0 \\<Longrightarrow> ?x0.0 \\<in> X\n  t \\<in> existence_ivl0 x\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>{0..t}. (V \\<circ> flow0 x) s \\<le> 0", "by auto"], ["proof (state)\nthis:\n  \\<forall>s\\<in>{0..t}. (V \\<circ> flow0 x) s \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> existence_ivl0 x; 0 \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> V (flow0 x xa) \\<le> 0", "thus \" V (flow0 x t) \\<le> 0\""], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>{0..t}. (V \\<circ> flow0 x) s \\<le> 0\n\ngoal (1 subgoal):\n 1. V (flow0 x t) \\<le> 0", "by (simp add: t(2))"], ["proof (state)\nthis:\n  V (flow0 x t) \\<le> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma positively_invariant_le_domain:\n  fixes V :: \"'a \\<Rightarrow> real\"\n  assumes \"positively_invariant D\"\n  assumes contg: \"continuous_on D g\"\n  assumes \"\\<And>x. (V has_derivative V' x) (at x)\" (* TODO: domain can be added here too ? *)\n  assumes \"\\<And>s. s \\<in> D \\<Longrightarrow> V' s (f s) \\<le> g s * V s\"\n  shows \"positively_invariant (D \\<inter> {x. V x \\<le> 0})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant (D \\<inter> {x. V x \\<le> 0})", "apply (auto intro!:positively_invariant_left_inter[OF assms(1)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "assume \"x \\<in> D\" \"V x \\<le> 0\""], ["proof (state)\nthis:\n  x \\<in> D\n  V x \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "have \"continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..})) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..})) g", "by (meson \\<open>x \\<in> D\\<close> assms(1) contg continuous_on_subset positively_invariant_def trapped_forward_def)"], ["proof (state)\nthis:\n  continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..})) g\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "from trapped_forward_le[OF \\<open>V x \\<le> 0\\<close> this assms(3)]"], ["proof (chain)\npicking this:\n  (\\<And>s.\n      s \\<in> existence_ivl0 x \\<inter> {0..} \\<Longrightarrow>\n      V' (flow0 x s) (f (flow0 x s))\n      \\<le> g (flow0 x s) * V (flow0 x s)) \\<Longrightarrow>\n  trapped_forward x {x. V x \\<le> 0}", "show \"trapped_forward x {x. V x \\<le> 0}\""], ["proof (prove)\nusing this:\n  (\\<And>s.\n      s \\<in> existence_ivl0 x \\<inter> {0..} \\<Longrightarrow>\n      V' (flow0 x s) (f (flow0 x s))\n      \\<le> g (flow0 x s) * V (flow0 x s)) \\<Longrightarrow>\n  trapped_forward x {x. V x \\<le> 0}\n\ngoal (1 subgoal):\n 1. trapped_forward x {x. V x \\<le> 0}", "using assms(4)"], ["proof (prove)\nusing this:\n  (\\<And>s.\n      s \\<in> existence_ivl0 x \\<inter> {0..} \\<Longrightarrow>\n      V' (flow0 x s) (f (flow0 x s))\n      \\<le> g (flow0 x s) * V (flow0 x s)) \\<Longrightarrow>\n  trapped_forward x {x. V x \\<le> 0}\n  ?s \\<in> D \\<Longrightarrow> V' ?s (f ?s) \\<le> g ?s * V ?s\n\ngoal (1 subgoal):\n 1. trapped_forward x {x. V x \\<le> 0}", "using \\<open>x \\<in> D\\<close> assms(1) positively_invariant_def trapped_forward_def"], ["proof (prove)\nusing this:\n  (\\<And>s.\n      s \\<in> existence_ivl0 x \\<inter> {0..} \\<Longrightarrow>\n      V' (flow0 x s) (f (flow0 x s))\n      \\<le> g (flow0 x s) * V (flow0 x s)) \\<Longrightarrow>\n  trapped_forward x {x. V x \\<le> 0}\n  ?s \\<in> D \\<Longrightarrow> V' ?s (f ?s) \\<le> g ?s * V ?s\n  x \\<in> D\n  positively_invariant D\n  positively_invariant ?M = (\\<forall>x\\<in>?M. trapped_forward x ?M)\n  trapped_forward ?x ?K =\n  (flow0 ?x ` (existence_ivl0 ?x \\<inter> {0..}) \\<subseteq> ?K)\n\ngoal (1 subgoal):\n 1. trapped_forward x {x. V x \\<le> 0}", "by auto"], ["proof (state)\nthis:\n  trapped_forward x {x. V x \\<le> 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma positively_invariant_barrier_domain:\n  fixes V :: \"'a \\<Rightarrow> real\"\n  assumes \"positively_invariant D\"\n  assumes \"\\<And>x. (V has_derivative V' x) (at x)\"\n  assumes \"continuous_on D (\\<lambda>x. V' x (f x))\"\n  assumes \"\\<And>s. s \\<in> D \\<Longrightarrow> V s = 0 \\<Longrightarrow> V' s (f s) < 0\"\n  shows \"positively_invariant (D \\<inter> {x. V x \\<le> 0})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant (D \\<inter> {x. V x \\<le> 0})", "apply (auto intro!:positively_invariant_left_inter[OF assms(1)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "assume \"x \\<in> D\" \"V x \\<le> 0\""], ["proof (state)\nthis:\n  x \\<in> D\n  V x \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "have contV: \"continuous_on UNIV V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV V", "using assms(2) has_derivative_continuous_on"], ["proof (prove)\nusing this:\n  (V has_derivative V' ?x) (at ?x)\n  (\\<And>x.\n      x \\<in> ?s \\<Longrightarrow>\n      (?f has_derivative ?f' x) (at x within ?s)) \\<Longrightarrow>\n  continuous_on ?s ?f\n\ngoal (1 subgoal):\n 1. continuous_on UNIV V", "by blast"], ["proof (state)\nthis:\n  continuous_on UNIV V\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "then"], ["proof (chain)\npicking this:\n  continuous_on UNIV V", "have *: \"continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..})) V\""], ["proof (prove)\nusing this:\n  continuous_on UNIV V\n\ngoal (1 subgoal):\n 1. continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..})) V", "using continuous_on_subset"], ["proof (prove)\nusing this:\n  continuous_on UNIV V\n  \\<lbrakk>continuous_on ?s ?f; ?t \\<subseteq> ?s\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?t ?f\n\ngoal (1 subgoal):\n 1. continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..})) V", "by blast"], ["proof (state)\nthis:\n  continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..})) V\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "have sub: \"flow0 x ` (existence_ivl0 x \\<inter> {0..}) \\<subseteq> D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flow0 x ` (existence_ivl0 x \\<inter> {0..}) \\<subseteq> D", "using \\<open>x \\<in> D\\<close> assms(1) positively_invariant_def trapped_forward_def"], ["proof (prove)\nusing this:\n  x \\<in> D\n  positively_invariant D\n  positively_invariant ?M = (\\<forall>x\\<in>?M. trapped_forward x ?M)\n  trapped_forward ?x ?K =\n  (flow0 ?x ` (existence_ivl0 ?x \\<inter> {0..}) \\<subseteq> ?K)\n\ngoal (1 subgoal):\n 1. flow0 x ` (existence_ivl0 x \\<inter> {0..}) \\<subseteq> D", "by auto"], ["proof (state)\nthis:\n  flow0 x ` (existence_ivl0 x \\<inter> {0..}) \\<subseteq> D\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "then"], ["proof (chain)\npicking this:\n  flow0 x ` (existence_ivl0 x \\<inter> {0..}) \\<subseteq> D", "have contV': \"continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..})) (\\<lambda>x. V' x (f x))\""], ["proof (prove)\nusing this:\n  flow0 x ` (existence_ivl0 x \\<inter> {0..}) \\<subseteq> D\n\ngoal (1 subgoal):\n 1. continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..}))\n     (\\<lambda>x. V' x (f x))", "by (metis assms(3) continuous_on_subset)"], ["proof (state)\nthis:\n  continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..}))\n   (\\<lambda>x. V' x (f x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "have nz: \"\\<And>i t. t \\<in> existence_ivl0 x \\<Longrightarrow>\n       0 \\<le> t \\<Longrightarrow>  max (-V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> 0 < max (- V' (flow0 x t) (f (flow0 x t)))\n                              ((V (flow0 x t))\\<^sup>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> 0 < max (- V' (flow0 x t) (f (flow0 x t)))\n                              ((V (flow0 x t))\\<^sup>2)", "fix i t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> 0 < max (- V' (flow0 x t) (f (flow0 x t)))\n                              ((V (flow0 x t))\\<^sup>2)", "assume \"t \\<in> existence_ivl0 x\" \"0 \\<le> t\""], ["proof (state)\nthis:\n  t \\<in> existence_ivl0 x\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> 0 < max (- V' (flow0 x t) (f (flow0 x t)))\n                              ((V (flow0 x t))\\<^sup>2)", "then"], ["proof (chain)\npicking this:\n  t \\<in> existence_ivl0 x\n  0 \\<le> t", "have \"flow0 x t \\<in> D\""], ["proof (prove)\nusing this:\n  t \\<in> existence_ivl0 x\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. flow0 x t \\<in> D", "using \\<open>x \\<in> D\\<close> assms(1) positively_invariant_def trapped_forward_def"], ["proof (prove)\nusing this:\n  t \\<in> existence_ivl0 x\n  0 \\<le> t\n  x \\<in> D\n  positively_invariant D\n  positively_invariant ?M = (\\<forall>x\\<in>?M. trapped_forward x ?M)\n  trapped_forward ?x ?K =\n  (flow0 ?x ` (existence_ivl0 ?x \\<inter> {0..}) \\<subseteq> ?K)\n\ngoal (1 subgoal):\n 1. flow0 x t \\<in> D", "by auto"], ["proof (state)\nthis:\n  flow0 x t \\<in> D\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> 0 < max (- V' (flow0 x t) (f (flow0 x t)))\n                              ((V (flow0 x t))\\<^sup>2)", "then"], ["proof (chain)\npicking this:\n  flow0 x t \\<in> D", "have \"V (flow0 x t) = 0 \\<Longrightarrow> - V' (flow0 x t) (f (flow0 x t)) > 0\""], ["proof (prove)\nusing this:\n  flow0 x t \\<in> D\n\ngoal (1 subgoal):\n 1. V (flow0 x t) = 0 \\<Longrightarrow> 0 < - V' (flow0 x t) (f (flow0 x t))", "using assms(4)"], ["proof (prove)\nusing this:\n  flow0 x t \\<in> D\n  \\<lbrakk>?s \\<in> D; V ?s = 0\\<rbrakk> \\<Longrightarrow> V' ?s (f ?s) < 0\n\ngoal (1 subgoal):\n 1. V (flow0 x t) = 0 \\<Longrightarrow> 0 < - V' (flow0 x t) (f (flow0 x t))", "by simp"], ["proof (state)\nthis:\n  V (flow0 x t) = 0 \\<Longrightarrow> 0 < - V' (flow0 x t) (f (flow0 x t))\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> 0 < max (- V' (flow0 x t) (f (flow0 x t)))\n                              ((V (flow0 x t))\\<^sup>2)", "then"], ["proof (chain)\npicking this:\n  V (flow0 x t) = 0 \\<Longrightarrow> 0 < - V' (flow0 x t) (f (flow0 x t))", "have \"(V (flow0 x t))^2 > 0 \\<or> - V' (flow0 x t) (f (flow0 x t)) > 0\""], ["proof (prove)\nusing this:\n  V (flow0 x t) = 0 \\<Longrightarrow> 0 < - V' (flow0 x t) (f (flow0 x t))\n\ngoal (1 subgoal):\n 1. 0 < (V (flow0 x t))\\<^sup>2 \\<or> 0 < - V' (flow0 x t) (f (flow0 x t))", "by simp"], ["proof (state)\nthis:\n  0 < (V (flow0 x t))\\<^sup>2 \\<or> 0 < - V' (flow0 x t) (f (flow0 x t))\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> 0 < max (- V' (flow0 x t) (f (flow0 x t)))\n                              ((V (flow0 x t))\\<^sup>2)", "thus \"max (-V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2) > 0\""], ["proof (prove)\nusing this:\n  0 < (V (flow0 x t))\\<^sup>2 \\<or> 0 < - V' (flow0 x t) (f (flow0 x t))\n\ngoal (1 subgoal):\n 1. 0 < max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)", "unfolding less_max_iff_disj"], ["proof (prove)\nusing this:\n  0 < (V (flow0 x t))\\<^sup>2 \\<or> 0 < - V' (flow0 x t) (f (flow0 x t))\n\ngoal (1 subgoal):\n 1. 0 < - V' (flow0 x t) (f (flow0 x t)) \\<or> 0 < (V (flow0 x t))\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  0 < max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?t \\<in> existence_ivl0 x; 0 \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> 0 < max (- V' (flow0 x ?t) (f (flow0 x ?t)))\n                         ((V (flow0 x ?t))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "have *: \"continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..})) (\\<lambda>x. V' x (f x) * V x / max (- V' x (f x)) ((V x)^2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..}))\n     (\\<lambda>x. V' x (f x) * V x / max (- V' x (f x)) ((V x)\\<^sup>2))", "apply (auto intro!:continuous_intros continuous_on_max simp add: * contV')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> existence_ivl0 x; 0 \\<le> xa;\n        max (- V' (flow0 x xa) (f (flow0 x xa)))\n         ((V (flow0 x xa))\\<^sup>2) =\n        0\\<rbrakk>\n       \\<Longrightarrow> False", "using nz"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> existence_ivl0 x; 0 \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> 0 < max (- V' (flow0 x ?t) (f (flow0 x ?t)))\n                         ((V (flow0 x ?t))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> existence_ivl0 x; 0 \\<le> xa;\n        max (- V' (flow0 x xa) (f (flow0 x xa)))\n         ((V (flow0 x xa))\\<^sup>2) =\n        0\\<rbrakk>\n       \\<Longrightarrow> False", "by fastforce"], ["proof (state)\nthis:\n  continuous_on (flow0 x ` (existence_ivl0 x \\<inter> {0..}))\n   (\\<lambda>x. V' x (f x) * V x / max (- V' x (f x)) ((V x)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "have \"(\\<And>t. t \\<in> existence_ivl0 x \\<inter> {0..} \\<Longrightarrow>\n        V' (flow0 x t) (f (flow0 x t)) \\<le>\n        (V' (flow0 x t) (f (flow0 x t)) * V (flow0 x t)\n        / max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)) * V (flow0 x t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> existence_ivl0 x \\<inter> {0..} \\<Longrightarrow>\n       V' (flow0 x t) (f (flow0 x t))\n       \\<le> V' (flow0 x t) (f (flow0 x t)) * V (flow0 x t) /\n             max (- V' (flow0 x t) (f (flow0 x t)))\n              ((V (flow0 x t))\\<^sup>2) *\n             V (flow0 x t)", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> V' (flow0 x t) (f (flow0 x t))\n                         \\<le> V' (flow0 x t) (f (flow0 x t)) *\n                               V (flow0 x t) *\n                               V (flow0 x t) /\n                               max (- V' (flow0 x t) (f (flow0 x t)))\n                                ((V (flow0 x t))\\<^sup>2)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> V' (flow0 x t) (f (flow0 x t))\n                         \\<le> V' (flow0 x t) (f (flow0 x t)) *\n                               V (flow0 x t) *\n                               V (flow0 x t) /\n                               max (- V' (flow0 x t) (f (flow0 x t)))\n                                ((V (flow0 x t))\\<^sup>2)", "assume \"t \\<in> existence_ivl0 x\" \"0 \\<le> t\""], ["proof (state)\nthis:\n  t \\<in> existence_ivl0 x\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> V' (flow0 x t) (f (flow0 x t))\n                         \\<le> V' (flow0 x t) (f (flow0 x t)) *\n                               V (flow0 x t) *\n                               V (flow0 x t) /\n                               max (- V' (flow0 x t) (f (flow0 x t)))\n                                ((V (flow0 x t))\\<^sup>2)", "then"], ["proof (chain)\npicking this:\n  t \\<in> existence_ivl0 x\n  0 \\<le> t", "have p: \"max (-V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2) > 0\""], ["proof (prove)\nusing this:\n  t \\<in> existence_ivl0 x\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. 0 < max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)", "using nz"], ["proof (prove)\nusing this:\n  t \\<in> existence_ivl0 x\n  0 \\<le> t\n  \\<lbrakk>?t \\<in> existence_ivl0 x; 0 \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> 0 < max (- V' (flow0 x ?t) (f (flow0 x ?t)))\n                         ((V (flow0 x ?t))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. 0 < max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)", "by auto"], ["proof (state)\nthis:\n  0 < max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> V' (flow0 x t) (f (flow0 x t))\n                         \\<le> V' (flow0 x t) (f (flow0 x t)) *\n                               V (flow0 x t) *\n                               V (flow0 x t) /\n                               max (- V' (flow0 x t) (f (flow0 x t)))\n                                ((V (flow0 x t))\\<^sup>2)", "have \" V' (flow0 x t) (f (flow0 x t)) * max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n      \\<le>  V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t))\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V' (flow0 x t) (f (flow0 x t)) *\n    max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n    \\<le> V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t))\\<^sup>2", "by (smt mult_minus_left mult_minus_right power2_eq_square mult_le_cancel_iff2)"], ["proof (state)\nthis:\n  V' (flow0 x t) (f (flow0 x t)) *\n  max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n  \\<le> V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t))\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> V' (flow0 x t) (f (flow0 x t))\n                         \\<le> V' (flow0 x t) (f (flow0 x t)) *\n                               V (flow0 x t) *\n                               V (flow0 x t) /\n                               max (- V' (flow0 x t) (f (flow0 x t)))\n                                ((V (flow0 x t))\\<^sup>2)", "then"], ["proof (chain)\npicking this:\n  V' (flow0 x t) (f (flow0 x t)) *\n  max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n  \\<le> V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t))\\<^sup>2", "have \"V' (flow0 x t) (f (flow0 x t))\n      \\<le>  V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t))\\<^sup>2\n      / max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\""], ["proof (prove)\nusing this:\n  V' (flow0 x t) (f (flow0 x t)) *\n  max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n  \\<le> V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t))\\<^sup>2\n\ngoal (1 subgoal):\n 1. V' (flow0 x t) (f (flow0 x t))\n    \\<le> V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t))\\<^sup>2 /\n          max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)", "using p pos_le_divide_eq"], ["proof (prove)\nusing this:\n  V' (flow0 x t) (f (flow0 x t)) *\n  max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n  \\<le> V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t))\\<^sup>2\n  0 < max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n  (0::?'a) < ?c \\<Longrightarrow> (?a \\<le> ?b / ?c) = (?a * ?c \\<le> ?b)\n\ngoal (1 subgoal):\n 1. V' (flow0 x t) (f (flow0 x t))\n    \\<le> V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t))\\<^sup>2 /\n          max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)", "by blast"], ["proof (state)\nthis:\n  V' (flow0 x t) (f (flow0 x t))\n  \\<le> V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t))\\<^sup>2 /\n        max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>t \\<in> existence_ivl0 x; 0 \\<le> t\\<rbrakk>\n       \\<Longrightarrow> V' (flow0 x t) (f (flow0 x t))\n                         \\<le> V' (flow0 x t) (f (flow0 x t)) *\n                               V (flow0 x t) *\n                               V (flow0 x t) /\n                               max (- V' (flow0 x t) (f (flow0 x t)))\n                                ((V (flow0 x t))\\<^sup>2)", "thus \" V' (flow0 x t) (f (flow0 x t))\n         \\<le> V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t)) * V (flow0 x t) /\n           max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\""], ["proof (prove)\nusing this:\n  V' (flow0 x t) (f (flow0 x t))\n  \\<le> V' (flow0 x t) (f (flow0 x t)) * (V (flow0 x t))\\<^sup>2 /\n        max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. V' (flow0 x t) (f (flow0 x t))\n    \\<le> V' (flow0 x t) (f (flow0 x t)) * V (flow0 x t) * V (flow0 x t) /\n          max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)", "by (simp add: power2_eq_square)"], ["proof (state)\nthis:\n  V' (flow0 x t) (f (flow0 x t))\n  \\<le> V' (flow0 x t) (f (flow0 x t)) * V (flow0 x t) * V (flow0 x t) /\n        max (- V' (flow0 x t) (f (flow0 x t))) ((V (flow0 x t))\\<^sup>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?t1 \\<in> existence_ivl0 x \\<inter> {0..} \\<Longrightarrow>\n  V' (flow0 x ?t1) (f (flow0 x ?t1))\n  \\<le> V' (flow0 x ?t1) (f (flow0 x ?t1)) * V (flow0 x ?t1) /\n        max (- V' (flow0 x ?t1) (f (flow0 x ?t1)))\n         ((V (flow0 x ?t1))\\<^sup>2) *\n        V (flow0 x ?t1)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; V x \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> trapped_forward x {x. V x \\<le> 0}", "from trapped_forward_le[OF \\<open>V x \\<le> 0\\<close> * assms(2) this]"], ["proof (chain)\npicking this:\n  (\\<And>s.\n      s \\<in> existence_ivl0 x \\<inter> {0..} \\<Longrightarrow>\n      s \\<in> existence_ivl0 x \\<inter> {0..}) \\<Longrightarrow>\n  trapped_forward x {x. V x \\<le> 0}", "show \"trapped_forward x {x. V x \\<le> 0}\""], ["proof (prove)\nusing this:\n  (\\<And>s.\n      s \\<in> existence_ivl0 x \\<inter> {0..} \\<Longrightarrow>\n      s \\<in> existence_ivl0 x \\<inter> {0..}) \\<Longrightarrow>\n  trapped_forward x {x. V x \\<le> 0}\n\ngoal (1 subgoal):\n 1. trapped_forward x {x. V x \\<le> 0}", "by auto"], ["proof (state)\nthis:\n  trapped_forward x {x. V x \\<le> 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma positively_invariant_UNIV:\n  shows \"positively_invariant UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant UNIV", "using positively_invariant_iff"], ["proof (prove)\nusing this:\n  positively_invariant ?M =\n  ((\\<Union>x\\<in>?M. flow0 x ` (existence_ivl0 x \\<inter> {0..}))\n   \\<subseteq> ?M)\n\ngoal (1 subgoal):\n 1. positively_invariant UNIV", "by blast"], ["", "lemma positively_invariant_conj:\n  assumes \"positively_invariant C\"\n  assumes \"positively_invariant D\"\n  shows \"positively_invariant (C \\<inter> D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant (C \\<inter> D)", "using assms positively_invariant_def"], ["proof (prove)\nusing this:\n  positively_invariant C\n  positively_invariant D\n  positively_invariant ?M = (\\<forall>x\\<in>?M. trapped_forward x ?M)\n\ngoal (1 subgoal):\n 1. positively_invariant (C \\<inter> D)", "using positively_invariant_left_inter"], ["proof (prove)\nusing this:\n  positively_invariant C\n  positively_invariant D\n  positively_invariant ?M = (\\<forall>x\\<in>?M. trapped_forward x ?M)\n  \\<lbrakk>positively_invariant ?C;\n   \\<forall>x\\<in>?C \\<inter> ?D. trapped_forward x ?D\\<rbrakk>\n  \\<Longrightarrow> positively_invariant (?C \\<inter> ?D)\n\ngoal (1 subgoal):\n 1. positively_invariant (C \\<inter> D)", "by auto"], ["", "lemma positively_invariant_le:\n  fixes V :: \"'a \\<Rightarrow> real\"\n  assumes contg: \"continuous_on UNIV g\"\n  assumes \"\\<And>x. (V has_derivative V' x) (at x)\"\n  assumes \"\\<And>s. V' s (f s) \\<le> g s * V s\"\n  shows \"positively_invariant {x. V x \\<le> 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant {x. V x \\<le> 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. positively_invariant {x. V x \\<le> 0}", "from positively_invariant_le_domain[OF positively_invariant_UNIV assms]"], ["proof (chain)\npicking this:\n  positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})", "have \"positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})\""], ["proof (prove)\nusing this:\n  positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})\n\ngoal (1 subgoal):\n 1. positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})", "."], ["proof (state)\nthis:\n  positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})\n\ngoal (1 subgoal):\n 1. positively_invariant {x. V x \\<le> 0}", "thus ?thesis"], ["proof (prove)\nusing this:\n  positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})\n\ngoal (1 subgoal):\n 1. positively_invariant {x. V x \\<le> 0}", "by auto"], ["proof (state)\nthis:\n  positively_invariant {x. V x \\<le> 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma positively_invariant_barrier:\n  fixes V :: \"'a \\<Rightarrow> real\"\n  assumes \"\\<And>x. (V has_derivative V' x) (at x)\"\n  assumes \"continuous_on UNIV (\\<lambda>x. V' x (f x))\"\n  assumes \"\\<And>s. V s = 0 \\<Longrightarrow> V' s (f s) < 0\"\n  shows \"positively_invariant {x. V x \\<le> 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positively_invariant {x. V x \\<le> 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. positively_invariant {x. V x \\<le> 0}", "from positively_invariant_barrier_domain[OF positively_invariant_UNIV assms]"], ["proof (chain)\npicking this:\n  (\\<And>s.\n      \\<lbrakk>s \\<in> UNIV; V s = 0\\<rbrakk>\n      \\<Longrightarrow> V s = 0) \\<Longrightarrow>\n  positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})", "have \"positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})\""], ["proof (prove)\nusing this:\n  (\\<And>s.\n      \\<lbrakk>s \\<in> UNIV; V s = 0\\<rbrakk>\n      \\<Longrightarrow> V s = 0) \\<Longrightarrow>\n  positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})\n\ngoal (1 subgoal):\n 1. positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})", "."], ["proof (state)\nthis:\n  positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})\n\ngoal (1 subgoal):\n 1. positively_invariant {x. V x \\<le> 0}", "thus ?thesis"], ["proof (prove)\nusing this:\n  positively_invariant (UNIV \\<inter> {x. V x \\<le> 0})\n\ngoal (1 subgoal):\n 1. positively_invariant {x. V x \\<le> 0}", "by auto"], ["proof (state)\nthis:\n  positively_invariant {x. V x \\<le> 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}