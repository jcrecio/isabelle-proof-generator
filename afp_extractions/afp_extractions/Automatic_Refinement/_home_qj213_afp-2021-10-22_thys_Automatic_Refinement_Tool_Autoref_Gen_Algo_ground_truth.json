{"file_name": "/home/qj213/afp-2021-10-22/thys/Automatic_Refinement/Tool/Autoref_Gen_Algo.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Automatic_Refinement", "problem_names": ["lemma GEN_ALGO_tagI: \"P ==> GEN_ALGO_tag P\""], "translations": [["", "lemma GEN_ALGO_tagI: \"P ==> GEN_ALGO_tag P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Longrightarrow> GEN_ALGO_tag P", "by simp"], ["", "abbreviation \"SIDE_GEN_ALGO P == PREFER_tag (GEN_ALGO_tag P)\""], ["", "ML \\<open>\n  structure Autoref_Gen_Algo = struct \n\n    fun transform_ga_rule context rl = let\n      val ctxt = Context.proof_of context\n\n      fun warn msg = Pretty.block [\n        Pretty.str msg, \n        Pretty.brk 1,\n        Pretty.str \"(\",\n        Thm.pretty_thm ctxt rl,\n        Pretty.str \")\"\n        ]\n      |> Pretty.string_of |> warning\n   \n      fun is_side_prem @{mpat \"Trueprop (PREFER_tag _)\"} = true\n        | is_side_prem @{mpat \"Trueprop (DEFER_tag _)\"} = true\n        | is_side_prem _ = false\n    in\n      if exists is_side_prem (Thm.prems_of rl) then\n        warn (\"autoref_ga_rules: SIDE condition premise not allowed here\")\n      else ()\n      ;\n      case Thm.concl_of rl of\n        @{mpat \"Trueprop ((_,_)\\<in>_)\"} => \n          warn (\"autoref_ga_rules: Refinement condition conclusion. Did you\"\n            ^\" mean an autoref_rule?\")  \n      | _ => ()\n      ;\n      [rl]\n    end\n\n    structure ga_side_thms = Named_Sorted_Thms (\n      val name = @{binding autoref_ga_rules}\n      val description = \"Additional rules for generic algorithm side conditions\"\n      val sort = K I\n      val transform = transform_ga_rule\n    )\n\n    fun side_ga_tac ctxt = resolve_tac ctxt (ga_side_thms.get ctxt)\n\n    fun side_ga_op_tac ctxt = \n      SOLVED' (Autoref_Tacticals.REPEAT_ON_SUBGOAL \n        (Autoref_Translate.trans_step_tac ctxt))\n\n\n    val setup = ga_side_thms.setup\n\n    fun decl_setup phi = I\n    #> Tagged_Solver.declare_solver @{thms GEN_ALGO_tagI} @{binding GEN_ALGO} \n        \"Autoref: Generic algorithm side condition solver\" \n        ( side_ga_tac) phi\n    #> Autoref_Phases.declare_solver @{thms GEN_OP_tagI} @{binding GEN_OP} \n        \"Autoref: Generic algorithm operation instantiation\" \n        ( side_ga_op_tac) phi\n  end\n\\<close>"], ["", "setup Autoref_Gen_Algo.setup"], ["", "declaration Autoref_Gen_Algo.decl_setup"], ["", "end"]]}