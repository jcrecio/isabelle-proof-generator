{"file_name": "/home/qj213/afp-2021-10-22/thys/Automatic_Refinement/Lib/Indep_Vars.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Automatic_Refinement", "problem_names": ["lemma INDEPI: \"INDEP v\""], "translations": [["", "lemma INDEPI: \"INDEP v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. INDEP v", "by simp"], ["", "ML \\<open>\n  signature INDEP_VARS = sig\n    val indep_tac: Proof.context -> tactic'\n  end\n\n  structure Indep_Vars: INDEP_VARS = struct\n\n    local\n      fun vsubterms (Abs (_,_,t)) = vsubterms t\n        | vsubterms (t as (_$_)) = let\n            val (f,args) = strip_comb t\n            val args_vsts = map vsubterms args |> flat\n          in\n            case f of\n              (Var (name,vT)) => [(name,vT,fastype_of t,args)]@args_vsts\n            | _ => vsubterms f @ args_vsts\n          end\n        | vsubterms _ = []\n\n      fun indep_vars ctxt t st = let\n        val cert = Thm.cterm_of ctxt\n\n        fun inst_of (name,vT,T,args) = let\n          val Ts = map fastype_of args |> rev\n          val t' = fold absdummy Ts (Var (name,T))\n          val inst = ((name, vT), cert t')\n        in inst end\n\n        val inst = vsubterms t\n          |> distinct ((op =) o apply2 #1)\n          |> map inst_of\n\n        val st' = Drule.instantiate_normalize ([],inst) st\n          |> Conv.fconv_rule (Thm.beta_conversion true)\n      in\n        Seq.single st'\n      end\n\n      fun indep_tac_aux ctxt i st = case Logic.concl_of_goal (Thm.prop_of st) i of\n        @{mpat \"Trueprop (INDEP ?v)\"}\n          => (indep_vars ctxt v THEN resolve_tac ctxt @{thms INDEPI} i) st\n      | _ => Seq.empty\n\n    in\n      (* Remove explicit parameters from schematic variable. *)\n      fun indep_tac ctxt = IF_EXGOAL\n        (CONVERSION Thm.eta_conversion THEN' indep_tac_aux ctxt)\n    end\n  end\n\\<close>"], ["", "end"]]}