{"file_name": "/home/qj213/afp-2021-10-22/thys/BNF_CC/Concrete_Examples.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BNF_CC", "problem_names": ["lemma rel_fun_mono: \"(A ===> B) \\<le> (A' ===> B')\" if \"A' \\<le> A\" \"B \\<le> B'\"", "lemma rel_fun_eq: \"((=) ===> (=)) = (=)\"", "lemma rel_fun_conversep: \"(A\\<inverse>\\<inverse> ===> B\\<inverse>\\<inverse>) = (A ===> B)\\<inverse>\\<inverse>\"", "lemma map_fun_id0: \"(id ---> id) = id\"", "lemma map_fun_comp: \"(f ---> g) \\<circ> (f' ---> g') = ((f' \\<circ> f) ---> (g \\<circ> g'))\"", "lemma map_fun_parametric: \"((A ===> A') ===> (B ===> B') ===> (A' ===> B) ===> (A ===> B')) (--->) (--->)\"", "lemmas\n  rel_fun_pos_distr = rel_fun_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_fun_neg_distr = rel_fun_neg_distr_cond_def[THEN iffD1, rule_format]", "lemma rel_fun_pos_distr_iff [simp]: \"rel_fun_pos_distr_cond A A' tytok = True\"", "lemma rel_fun_neg_distr_imp: \"\\<lbrakk> left_unique A; right_total A; right_unique A'; left_total A' \\<rbrakk> \\<Longrightarrow>\n  rel_fun_neg_distr_cond A A' tytok\"", "lemma rel_fun_pos_distr_cond_eq: \"rel_fun_pos_distr_cond (=) (=) tytok\"", "lemma rel_fun_neg_distr_cond_eq: \"rel_fun_neg_distr_cond (=) (=) tytok\"", "lemma rel_set_mono: \"A \\<le> A' \\<Longrightarrow> rel_set A \\<le> rel_set A'\"", "lemma rel_set_eq: \"rel_set (=) = (=)\"", "lemma rel_set_conversep: \"rel_set A\\<inverse>\\<inverse> = (rel_set A)\\<inverse>\\<inverse>\"", "lemma map_set_id0: \"image id = id\"", "lemma map_set_comp: \"image f \\<circ> image g = image (f \\<circ> g)\"", "lemma map_set_parametric: includes lifting_syntax shows\n  \"((A ===> B) ===> rel_set A ===> rel_set B) image image\"", "lemmas\n  rel_set_pos_distr = rel_set_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_set_neg_distr = rel_set_neg_distr_cond_def[THEN iffD1, rule_format]", "lemma rel_set_pos_distr_iff [simp]: \"rel_set_pos_distr_cond A A' = True\"", "lemma rel_set_neg_distr_iff [simp]: \"rel_set_neg_distr_cond A A' = True\"", "lemma rel_set_pos_distr_eq: \"rel_set_pos_distr_cond (=) (=)\"", "lemma rel_set_neg_distr_eq: \"rel_set_neg_distr_cond (=) (=)\"", "lemma bset_map_closed:\n  fixes f A\n  defines \"B \\<equiv> image f A\"\n  assumes \"finite A \\<and> card A \\<le> CARD('k)\"\n  shows \"finite B \\<and> card B \\<le> CARD('k)\"", "lemma right_unique_rel_set_lemma:\n  assumes \"right_unique R\" and \"rel_set R X Y\"\n  obtains f where \"Y = image f X\" and \"\\<forall>x\\<in>X. R x (f x)\"", "lemma left_unique_rel_set_lemma:\n  assumes \"left_unique R\" and \"rel_set R Y X\"\n  obtains f where \"Y = image f X\" and \"\\<forall>x\\<in>X. R (f x) x\"", "lemma neg_distr_cond_bset_right_unique:\n  \"right_unique C \\<Longrightarrow> neg_distr_cond_bset C D tytok\"", "lemma neg_distr_cond_bset_left_unique:\n  \"left_unique D \\<Longrightarrow> neg_distr_cond_bset C D tytok\"", "lemma neg_distr_cond_bset_eq: \"neg_distr_cond_bset (=) (=) tytok\"", "lemma rel_pred_mono: \"A' \\<le> A \\<Longrightarrow> rel_pred A \\<le> rel_pred A'\"", "lemma rel_pred_eq: \"rel_pred (=) = (=)\"", "lemma rel_pred_conversep: \"rel_pred A\\<inverse>\\<inverse> = (rel_pred A)\\<inverse>\\<inverse>\"", "lemma map_pred_id0: \"map_pred id = id\"", "lemma map_pred_comp: \"map_pred f \\<circ> map_pred g = map_pred (g \\<circ> f)\"", "lemma map_pred_parametric: \"((A' ===> A) ===> rel_pred A ===> rel_pred A') map_pred map_pred\"", "lemmas\n  rel_pred_pos_distr = rel_pred_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_pred_neg_distr = rel_pred_neg_distr_cond_def[THEN iffD1, rule_format]", "lemma rel_pred_pos_distr_iff [simp]: \"rel_pred_pos_distr_cond A B = True\"", "lemma rel_pred_pos_distr_cond_eq: \"rel_pred_pos_distr_cond (=) (=)\"", "lemma neg_fun_distr3:\n  assumes 1: \"left_unique R\" \"right_total R\"\n    and 2: \"right_unique S\" \"left_total S\"\n  shows \"rel_fun (R OO R') (S OO S') \\<le> rel_fun R S OO rel_fun R' S'\"", "lemma rel_pred_neg_distr_imp:\n  \"right_unique B \\<and> left_total B \\<or> left_unique A \\<and> right_total A \\<Longrightarrow> rel_pred_neg_distr_cond A B\"", "lemma rel_pred_neg_distr_cond_eq: \"rel_pred_neg_distr_cond (=) (=)\"", "lemma left_unique_rel_pred: \"left_total A \\<Longrightarrow> left_unique (rel_pred A)\"", "lemma right_unique_rel_pred: \"right_total A \\<Longrightarrow> right_unique (rel_pred A)\"", "lemma left_total_rel_pred: \"left_unique A \\<Longrightarrow> left_total (rel_pred A)\"", "lemma right_total_rel_pred: \"right_unique A \\<Longrightarrow> right_total (rel_pred A)\"", "lemma map_filter_closed:\n  includes lifting_syntax\n  assumes \"is_filter F\"\n  shows \"is_filter (((f ---> id) ---> id) F)\"", "lemmas rel_pred2_witness = rel_pred2_witness1 rel_pred2_witness2", "lemma rel_filter_neg_distr_cond'_stronger:\n  assumes \"rel_filter_neg_distr_cond' C C'\"\n  shows \"rel_pred2_neg_distr_cond C C'\"", "lemma rel_filter_neg_distr_cond'_eq: \"rel_filter_neg_distr_cond' (=) (=)\"", "lemma is_filter_rel_witness:\n  assumes F: \"is_filter F\" and G: \"is_filter G\"\n    and FG: \"rel_pred (rel_pred (C OO C')) F G\"\n    and cond: \"rel_filter_neg_distr_cond' C C'\"\n  shows \"is_filter (rel_pred2_witness C C' (F, G))\"", "lemma raw_filtermap_apply: \"raw_filtermap f F = (\\<lambda>P. F (\\<lambda>x. P (f x)))\"", "lemma \"filtermap f = Abs_filter \\<circ> raw_filtermap f \\<circ> Rep_filter\"", "lemma \"is_filter (raw_filtermap fst Z')\"", "lemma \"is_filter (raw_filtermap snd Z')\"", "lemma \"\\<not> is_filter Z'\"", "lemma equivp_aeseq_eq: \"equivp aeseq_eq\"", "lemma map_aeseq_id: \"map_aeseq id x = x\"", "lemma map_aeseq_comp: \"map_aeseq f (map_aeseq g x) = map_aeseq (f \\<circ> g) x\"", "lemma rel_aeseq_mono: \"R \\<le> S \\<Longrightarrow> rel_aeseq R \\<le> rel_aeseq S\"", "lemma rel_aeseq_eq: \"rel_aeseq (=) = (=)\"", "lemma rel_aeseq_conversep: \"rel_aeseq R\\<inverse>\\<inverse> = (rel_aeseq R)\\<inverse>\\<inverse>\"", "lemma map_aeseq_parametric: includes lifting_syntax shows\n  \"((A ===> B) ===> rel_aeseq A ===> rel_aeseq B) map_aeseq map_aeseq\"", "lemma rel_aeseq_distr: \"rel_aeseq (R OO S) = rel_aeseq R OO rel_aeseq S\""], "translations": [["", "lemma rel_fun_mono: \"(A ===> B) \\<le> (A' ===> B')\" if \"A' \\<le> A\" \"B \\<le> B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ===> B \\<le> A' ===> B'", "using that"], ["proof (prove)\nusing this:\n  A' \\<le> A\n  B \\<le> B'\n\ngoal (1 subgoal):\n 1. A ===> B \\<le> A' ===> B'", "by(auto simp add: rel_fun_def)"], ["", "lemma rel_fun_eq: \"((=) ===> (=)) = (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (=) ===> (=) = (=)", "by(fact fun.rel_eq)"], ["", "lemma rel_fun_conversep: \"(A\\<inverse>\\<inverse> ===> B\\<inverse>\\<inverse>) = (A ===> B)\\<inverse>\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A\\<inverse>\\<inverse> ===> B\\<inverse>\\<inverse> =\n    (A ===> B)\\<inverse>\\<inverse>", "by(auto simp add: rel_fun_def)"], ["", "lemma map_fun_id0: \"(id ---> id) = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id ---> id = id", "by(fact map_fun.id)"], ["", "lemma map_fun_comp: \"(f ---> g) \\<circ> (f' ---> g') = ((f' \\<circ> f) ---> (g \\<circ> g'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ---> g \\<circ> (f' ---> g') = (f' \\<circ> f) ---> g \\<circ> g'", "by(fact map_fun.comp)"], ["", "lemma map_fun_parametric: \"((A ===> A') ===> (B ===> B') ===> (A' ===> B) ===> (A ===> B')) (--->) (--->)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A') ===> (B ===> B') ===> (A' ===> B) ===> A ===> B') (--->)\n     (--->)", "by(fact map_fun_parametric)"], ["", "definition rel_fun_pos_distr_cond :: \"('a \\<Rightarrow> 'a' \\<Rightarrow> bool) \\<Rightarrow> ('a' \\<Rightarrow> 'a'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('b \\<times> 'b' \\<times> 'b'') itself \\<Rightarrow> bool\" where\n  \"rel_fun_pos_distr_cond A A' _ \\<longleftrightarrow> (\\<forall>(B :: 'b \\<Rightarrow> 'b' \\<Rightarrow> bool) (B' :: 'b' \\<Rightarrow> 'b'' \\<Rightarrow> bool).\n    (A ===> B) OO (A' ===> B') \\<le> (A OO A') ===> (B OO B'))\""], ["", "definition rel_fun_neg_distr_cond :: \"('a \\<Rightarrow> 'a' \\<Rightarrow> bool) \\<Rightarrow> ('a' \\<Rightarrow> 'a'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('b \\<times> 'b' \\<times> 'b'') itself \\<Rightarrow> bool\" where\n  \"rel_fun_neg_distr_cond A A' _ \\<longleftrightarrow> (\\<forall>(B :: 'b \\<Rightarrow> 'b' \\<Rightarrow> bool) (B' :: 'b' \\<Rightarrow> 'b'' \\<Rightarrow> bool).\n    (A OO A') ===> (B OO B') \\<le> (A ===> B) OO (A' ===> B'))\""], ["", "lemmas\n  rel_fun_pos_distr = rel_fun_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_fun_neg_distr = rel_fun_neg_distr_cond_def[THEN iffD1, rule_format]"], ["", "lemma rel_fun_pos_distr_iff [simp]: \"rel_fun_pos_distr_cond A A' tytok = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun_pos_distr_cond A A' tytok = True", "unfolding rel_fun_pos_distr_cond_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>B B'. (A ===> B) OO (A' ===> B') \\<le> A OO A' ===> B OO B') =\n    True", "by (blast intro!: pos_fun_distr)"], ["", "lemma rel_fun_neg_distr_imp: \"\\<lbrakk> left_unique A; right_total A; right_unique A'; left_total A' \\<rbrakk> \\<Longrightarrow>\n  rel_fun_neg_distr_cond A A' tytok\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>left_unique A; right_total A; right_unique A';\n     left_total A'\\<rbrakk>\n    \\<Longrightarrow> rel_fun_neg_distr_cond A A' tytok", "unfolding rel_fun_neg_distr_cond_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>left_unique A; right_total A; right_unique A';\n     left_total A'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>B B'.\n                         A OO A' ===> B OO B'\n                         \\<le> (A ===> B) OO (A' ===> B')", "by (fast elim!: neg_fun_distr1[THEN predicate2D])"], ["", "lemma rel_fun_pos_distr_cond_eq: \"rel_fun_pos_distr_cond (=) (=) tytok\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun_pos_distr_cond (=) (=) tytok", "by simp"], ["", "lemma rel_fun_neg_distr_cond_eq: \"rel_fun_neg_distr_cond (=) (=) tytok\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun_neg_distr_cond (=) (=) tytok", "by (blast intro: rel_fun_neg_distr_imp left_unique_eq right_unique_eq right_total_eq left_total_eq)"], ["", "thm fun.set_map fun.map_cong0 fun.rel_mono_strong"], ["", "subsection \\<open>Covariant powerset\\<close>"], ["", "lemma rel_set_mono: \"A \\<le> A' \\<Longrightarrow> rel_set A \\<le> rel_set A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<le> A' \\<Longrightarrow> rel_set A \\<le> rel_set A'", "by(fact rel_set_mono)"], ["", "lemma rel_set_eq: \"rel_set (=) = (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set (=) = (=)", "by(fact rel_set_eq)"], ["", "lemma rel_set_conversep: \"rel_set A\\<inverse>\\<inverse> = (rel_set A)\\<inverse>\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set A\\<inverse>\\<inverse> = (rel_set A)\\<inverse>\\<inverse>", "by(fact rel_set_conversep)"], ["", "lemma map_set_id0: \"image id = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (`) id = id", "by(fact image_id)"], ["", "lemma map_set_comp: \"image f \\<circ> image g = image (f \\<circ> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (`) f \\<circ> (`) g = (`) (f \\<circ> g)", "by(simp add: fun_eq_iff image_image o_def)"], ["", "lemma map_set_parametric: includes lifting_syntax shows\n  \"((A ===> B) ===> rel_set A ===> rel_set B) image image\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> B) ===> rel_set A ===> rel_set B) (`) (`)", "by(fact image_transfer)"], ["", "definition rel_set_pos_distr_cond :: \"('a \\<Rightarrow> 'a' \\<Rightarrow> bool) \\<Rightarrow> ('a' \\<Rightarrow> 'a'' \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n  \"rel_set_pos_distr_cond A A' \\<longleftrightarrow> rel_set A OO rel_set A' \\<le> rel_set (A OO A')\""], ["", "definition rel_set_neg_distr_cond :: \"('a \\<Rightarrow> 'a' \\<Rightarrow> bool) \\<Rightarrow> ('a' \\<Rightarrow> 'a'' \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n  \"rel_set_neg_distr_cond A A' \\<longleftrightarrow> rel_set (A OO A') \\<le> rel_set A OO rel_set A'\""], ["", "lemmas\n  rel_set_pos_distr = rel_set_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_set_neg_distr = rel_set_neg_distr_cond_def[THEN iffD1, rule_format]"], ["", "lemma rel_set_pos_distr_iff [simp]: \"rel_set_pos_distr_cond A A' = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set_pos_distr_cond A A' = True", "unfolding rel_set_pos_distr_cond_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A OO rel_set A' \\<le> rel_set (A OO A')) = True", "by(simp add: rel_set_OO)"], ["", "lemma rel_set_neg_distr_iff [simp]: \"rel_set_neg_distr_cond A A' = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set_neg_distr_cond A A' = True", "unfolding rel_set_neg_distr_cond_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set (A OO A') \\<le> rel_set A OO rel_set A') = True", "by(simp add: rel_set_OO)"], ["", "lemma rel_set_pos_distr_eq: \"rel_set_pos_distr_cond (=) (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set_pos_distr_cond (=) (=)", "by simp"], ["", "lemma rel_set_neg_distr_eq: \"rel_set_neg_distr_cond (=) (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set_neg_distr_cond (=) (=)", "by simp"], ["", "subsection \\<open>Bounded sets\\<close>"], ["", "text \\<open>\n  We define bounded sets as a subtype, with an additional fixed parameter which controls the bound.\n  Using the \\BNFCC{} structure on the covariant powerset functor, it suffices to show the\n  preconditions for the closedness of \\BNFCC{} under subtypes.\n\\<close>"], ["", "typedef ('a, 'k) bset = \"{A :: 'a set. finite A \\<and> card A \\<le> CARD('k)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {A. finite A \\<and> card A \\<le> CARD('k)}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ?x \\<in> {A. finite A \\<and> card A \\<le> CARD('k)}", "show \"{} \\<in> ?bset\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<in> {A. finite A \\<and> card A \\<le> CARD('k)}", "by simp"], ["proof (state)\nthis:\n  {} \\<in> {A. finite A \\<and> card A \\<le> CARD('k)}\n\ngoal:\nNo subgoals!", "qed"], ["", "setup_lifting type_definition_bset"], ["", "lemma bset_map_closed:\n  fixes f A\n  defines \"B \\<equiv> image f A\"\n  assumes \"finite A \\<and> card A \\<le> CARD('k)\"\n  shows \"finite B \\<and> card B \\<le> CARD('k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite B \\<and> card B \\<le> CARD('k)", "using assms"], ["proof (prove)\nusing this:\n  B \\<equiv> f ` A\n  finite A \\<and> card A \\<le> CARD('k)\n\ngoal (1 subgoal):\n 1. finite B \\<and> card B \\<le> CARD('k)", "by(auto intro: card_image_le[THEN order_trans])"], ["", "lift_definition map_bset :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> ('a, 'k) bset \\<Rightarrow> ('b, 'k) bset\" is image"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun set.\n       finite set \\<and> card set \\<le> CARD('k) \\<Longrightarrow>\n       finite (fun ` set) \\<and> card (fun ` set) \\<le> CARD('k)", "by(fact bset_map_closed)"], ["", "lift_definition rel_bset :: \"('a \\<Rightarrow> 'b \\<Rightarrow> bool) \\<Rightarrow> ('a, 'k) bset \\<Rightarrow> ('b, 'k) bset \\<Rightarrow> bool\" is rel_set"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "definition neg_distr_cond_bset :: \"('a \\<Rightarrow> 'b \\<Rightarrow> bool) \\<Rightarrow> ('b \\<Rightarrow> 'c \\<Rightarrow> bool) \\<Rightarrow> 'k itself \\<Rightarrow> bool\" where\n  \"neg_distr_cond_bset C C' _ \\<longleftrightarrow> rel_bset (C OO C') \\<le> rel_bset C OO (rel_bset C' :: (_, 'k) bset \\<Rightarrow> _)\""], ["", "lemma right_unique_rel_set_lemma:\n  assumes \"right_unique R\" and \"rel_set R X Y\"\n  obtains f where \"Y = image f X\" and \"\\<forall>x\\<in>X. R x (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R x (?f2 x)", "define f where \"f x = (THE y. R x y)\" for x"], ["proof (state)\nthis:\n  f ?x = (THE y. R ?x y)\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R x (?f2 x)", "{"], ["proof (state)\nthis:\n  f ?x = (THE y. R ?x y)\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R x (?f2 x)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R x (?f2 x)", "assume \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R x (?f2 x)", "with \\<open>rel_set R X Y\\<close> \\<open>right_unique R\\<close>"], ["proof (chain)\npicking this:\n  rel_set R X Y\n  right_unique R\n  x \\<in> X", "have \"R x (f x)\""], ["proof (prove)\nusing this:\n  rel_set R X Y\n  right_unique R\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. R x (f x)", "by (simp add: right_unique_def rel_set_def f_def) (metis theI)"], ["proof (state)\nthis:\n  R x (f x)\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R x (?f2 x)", "with assms \\<open>x \\<in> X\\<close>"], ["proof (chain)\npicking this:\n  right_unique R\n  rel_set R X Y\n  x \\<in> X\n  R x (f x)", "have  \"R x (f x)\" \"f x \\<in> Y\""], ["proof (prove)\nusing this:\n  right_unique R\n  rel_set R X Y\n  x \\<in> X\n  R x (f x)\n\ngoal (1 subgoal):\n 1. R x (f x) &&& f x \\<in> Y", "by (fastforce simp add: right_unique_def rel_set_def)+"], ["proof (state)\nthis:\n  R x (f x)\n  f x \\<in> Y\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R x (?f2 x)", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> X \\<Longrightarrow> R ?x2 (f ?x2)\n  ?x2 \\<in> X \\<Longrightarrow> f ?x2 \\<in> Y\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R x (?f2 x)", "moreover"], ["proof (state)\nthis:\n  ?x2 \\<in> X \\<Longrightarrow> R ?x2 (f ?x2)\n  ?x2 \\<in> X \\<Longrightarrow> f ?x2 \\<in> Y\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R x (?f2 x)", "have \"\\<exists>x\\<in>X. y = f x\" if \"y \\<in> Y\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. y = f x", "using \\<open>rel_set R X Y\\<close> that"], ["proof (prove)\nusing this:\n  rel_set R X Y\n  y \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. y = f x", "by(auto simp add: f_def dest!: rel_setD2 dest: right_uniqueD[OF \\<open>right_unique R\\<close>]\n        intro: the_equality[symmetric])"], ["proof (state)\nthis:\n  ?y \\<in> Y \\<Longrightarrow> \\<exists>x\\<in>X. ?y = f x\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R x (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R x (?f2 x)", "ultimately"], ["proof (chain)\npicking this:\n  ?x2 \\<in> X \\<Longrightarrow> R ?x2 (f ?x2)\n  ?x2 \\<in> X \\<Longrightarrow> f ?x2 \\<in> Y\n  ?y \\<in> Y \\<Longrightarrow> \\<exists>x\\<in>X. ?y = f x", "show \"\\<forall>x\\<in>X. R x (f x)\" \"Y = image f X\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> X \\<Longrightarrow> R ?x2 (f ?x2)\n  ?x2 \\<in> X \\<Longrightarrow> f ?x2 \\<in> Y\n  ?y \\<in> Y \\<Longrightarrow> \\<exists>x\\<in>X. ?y = f x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. R x (f x) &&& Y = f ` X", "by (auto simp: inj_on_def image_iff)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. R x (f x)\n  Y = f ` X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma left_unique_rel_set_lemma:\n  assumes \"left_unique R\" and \"rel_set R Y X\"\n  obtains f where \"Y = image f X\" and \"\\<forall>x\\<in>X. R (f x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R (?f2 x) x", "define f where \"f x = (THE y. R y x)\" for x"], ["proof (state)\nthis:\n  f ?x = (THE y. R y ?x)\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R (?f2 x) x", "{"], ["proof (state)\nthis:\n  f ?x = (THE y. R y ?x)\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R (?f2 x) x", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R (?f2 x) x", "assume \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R (?f2 x) x", "with \\<open>rel_set R Y X\\<close> \\<open>left_unique R\\<close>"], ["proof (chain)\npicking this:\n  rel_set R Y X\n  left_unique R\n  x \\<in> X", "have \"R (f x) x\""], ["proof (prove)\nusing this:\n  rel_set R Y X\n  left_unique R\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. R (f x) x", "by (simp add: left_unique_def rel_set_def f_def)  (metis theI)"], ["proof (state)\nthis:\n  R (f x) x\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R (?f2 x) x", "with assms \\<open>x \\<in> X\\<close>"], ["proof (chain)\npicking this:\n  left_unique R\n  rel_set R Y X\n  x \\<in> X\n  R (f x) x", "have  \"R (f x) x\" \"f x \\<in> Y\""], ["proof (prove)\nusing this:\n  left_unique R\n  rel_set R Y X\n  x \\<in> X\n  R (f x) x\n\ngoal (1 subgoal):\n 1. R (f x) x &&& f x \\<in> Y", "by (fastforce simp add: left_unique_def rel_set_def)+"], ["proof (state)\nthis:\n  R (f x) x\n  f x \\<in> Y\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R (?f2 x) x", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> X \\<Longrightarrow> R (f ?x2) ?x2\n  ?x2 \\<in> X \\<Longrightarrow> f ?x2 \\<in> Y\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R (?f2 x) x", "moreover"], ["proof (state)\nthis:\n  ?x2 \\<in> X \\<Longrightarrow> R (f ?x2) ?x2\n  ?x2 \\<in> X \\<Longrightarrow> f ?x2 \\<in> Y\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R (?f2 x) x", "have \"\\<exists>x\\<in>X. y = f x\" if \"y \\<in> Y\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. y = f x", "using \\<open>rel_set R Y X\\<close> that"], ["proof (prove)\nusing this:\n  rel_set R Y X\n  y \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. y = f x", "by(auto simp add: f_def dest!: rel_setD1 dest: left_uniqueD[OF \\<open>left_unique R\\<close>]\n        intro: the_equality[symmetric])"], ["proof (state)\nthis:\n  ?y \\<in> Y \\<Longrightarrow> \\<exists>x\\<in>X. ?y = f x\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    Y = ?f2 ` X\n 2. (\\<And>f.\n        \\<lbrakk>Y = f ` X; \\<forall>x\\<in>X. R (f x) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>x\\<in>X. R (?f2 x) x", "ultimately"], ["proof (chain)\npicking this:\n  ?x2 \\<in> X \\<Longrightarrow> R (f ?x2) ?x2\n  ?x2 \\<in> X \\<Longrightarrow> f ?x2 \\<in> Y\n  ?y \\<in> Y \\<Longrightarrow> \\<exists>x\\<in>X. ?y = f x", "show \"\\<forall>x\\<in>X. R (f x) x\" \"Y = image f X\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> X \\<Longrightarrow> R (f ?x2) ?x2\n  ?x2 \\<in> X \\<Longrightarrow> f ?x2 \\<in> Y\n  ?y \\<in> Y \\<Longrightarrow> \\<exists>x\\<in>X. ?y = f x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. R (f x) x &&& Y = f ` X", "by (auto simp: inj_on_def image_iff)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. R (f x) x\n  Y = f ` X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma neg_distr_cond_bset_right_unique:\n  \"right_unique C \\<Longrightarrow> neg_distr_cond_bset C D tytok\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_unique C \\<Longrightarrow> neg_distr_cond_bset C D tytok", "unfolding neg_distr_cond_bset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. right_unique C \\<Longrightarrow>\n    rel_bset (C OO D) \\<le> rel_bset C OO rel_bset D", "apply(rule predicate2I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>right_unique C; rel_bset (C OO D) x y\\<rbrakk>\n       \\<Longrightarrow> (rel_bset C OO rel_bset D) x y", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y C D.\n       \\<lbrakk>finite x \\<and> card x \\<le> CARD('d);\n        finite y \\<and> card y \\<le> CARD('d); right_unique C;\n        rel_set (C OO D) x y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya\\<in>{A.\n    finite A \\<and> card A \\<le> CARD('d)}.\n                            rel_set C x ya \\<and> rel_set D ya y", "apply(auto 6 2 intro: card_image_le[THEN order_trans] elim: right_unique_rel_set_lemma\n      simp add: rel_set_OO[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma neg_distr_cond_bset_left_unique:\n  \"left_unique D \\<Longrightarrow> neg_distr_cond_bset C D tytok\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_unique D \\<Longrightarrow> neg_distr_cond_bset C D tytok", "unfolding neg_distr_cond_bset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. left_unique D \\<Longrightarrow>\n    rel_bset (C OO D) \\<le> rel_bset C OO rel_bset D", "apply(rule predicate2I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>left_unique D; rel_bset (C OO D) x y\\<rbrakk>\n       \\<Longrightarrow> (rel_bset C OO rel_bset D) x y", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D C.\n       \\<lbrakk>finite x \\<and> card x \\<le> CARD('d);\n        finite y \\<and> card y \\<le> CARD('d); left_unique D;\n        rel_set (C OO D) x y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya\\<in>{A.\n    finite A \\<and> card A \\<le> CARD('d)}.\n                            rel_set C x ya \\<and> rel_set D ya y", "apply(auto 6 2 intro: card_image_le[THEN order_trans] elim: left_unique_rel_set_lemma\n      simp add: rel_set_OO[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma neg_distr_cond_bset_eq: \"neg_distr_cond_bset (=) (=) tytok\""], ["proof (prove)\ngoal (1 subgoal):\n 1. neg_distr_cond_bset (=) (=) tytok", "by (intro neg_distr_cond_bset_right_unique right_unique_eq)"], ["", "subsection \\<open>Contravariant powerset (sets as predicates)\\<close>"], ["", "type_synonym 'a pred = \"'a \\<Rightarrow> bool\""], ["", "definition map_pred :: \"('b \\<Rightarrow> 'a) \\<Rightarrow> 'a pred \\<Rightarrow> 'b pred\" where\n  \"map_pred f = (f ---> id)\""], ["", "definition rel_pred :: \"('a \\<Rightarrow> 'b \\<Rightarrow> bool) \\<Rightarrow> 'a pred \\<Rightarrow> 'b pred \\<Rightarrow> bool\" where\n  \"rel_pred R = (R ===> (\\<longleftrightarrow>))\""], ["", "lemma rel_pred_mono: \"A' \\<le> A \\<Longrightarrow> rel_pred A \\<le> rel_pred A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' \\<le> A \\<Longrightarrow> rel_pred A \\<le> rel_pred A'", "unfolding rel_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A' \\<le> A \\<Longrightarrow> A ===> (=) \\<le> A' ===> (=)", "by(auto elim!: rel_fun_mono)"], ["", "lemma rel_pred_eq: \"rel_pred (=) = (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred (=) = (=)", "by(simp add: rel_pred_def rel_fun_eq)"], ["", "lemma rel_pred_conversep: \"rel_pred A\\<inverse>\\<inverse> = (rel_pred A)\\<inverse>\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred A\\<inverse>\\<inverse> = (rel_pred A)\\<inverse>\\<inverse>", "using rel_fun_conversep[of _ \"(=)\"]"], ["proof (prove)\nusing this:\n  ?A\\<inverse>\\<inverse> ===> (=)\\<inverse>\\<inverse> =\n  (?A ===> (=))\\<inverse>\\<inverse>\n\ngoal (1 subgoal):\n 1. rel_pred A\\<inverse>\\<inverse> = (rel_pred A)\\<inverse>\\<inverse>", "by (simp add: rel_pred_def)"], ["", "lemma map_pred_id0: \"map_pred id = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pred id = id", "by (simp add: map_pred_def map_fun_id)"], ["", "lemma map_pred_comp: \"map_pred f \\<circ> map_pred g = map_pred (g \\<circ> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pred f \\<circ> map_pred g = map_pred (g \\<circ> f)", "using map_fun_comp[where g=id and g'=id]"], ["proof (prove)\nusing this:\n  ?f ---> id \\<circ> (?f' ---> id) = (?f' \\<circ> ?f) ---> id \\<circ> id\n\ngoal (1 subgoal):\n 1. map_pred f \\<circ> map_pred g = map_pred (g \\<circ> f)", "by (simp add: map_pred_def)"], ["", "lemma map_pred_parametric: \"((A' ===> A) ===> rel_pred A ===> rel_pred A') map_pred map_pred\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A' ===> A) ===> rel_pred A ===> rel_pred A') map_pred map_pred", "by (simp add: rel_fun_def rel_pred_def map_pred_def)"], ["", "definition rel_pred_pos_distr_cond :: \"('a \\<Rightarrow> 'a' \\<Rightarrow> bool) \\<Rightarrow> ('a' \\<Rightarrow> 'a'' \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n  \"rel_pred_pos_distr_cond A B \\<longleftrightarrow> rel_pred A OO rel_pred B \\<le> rel_pred (A OO B)\""], ["", "definition rel_pred_neg_distr_cond :: \"('a \\<Rightarrow> 'a' \\<Rightarrow> bool) \\<Rightarrow> ('a' \\<Rightarrow> 'a'' \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n  \"rel_pred_neg_distr_cond A B \\<longleftrightarrow>  rel_pred (A OO B) \\<le> rel_pred A OO rel_pred B\""], ["", "lemmas\n  rel_pred_pos_distr = rel_pred_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_pred_neg_distr = rel_pred_neg_distr_cond_def[THEN iffD1, rule_format]"], ["", "lemma rel_pred_pos_distr_iff [simp]: \"rel_pred_pos_distr_cond A B = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred_pos_distr_cond A B = True", "unfolding rel_pred_pos_distr_cond_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_pred A OO rel_pred B \\<le> rel_pred (A OO B)) = True", "by (auto simp add: rel_pred_def rel_fun_def)"], ["", "lemma rel_pred_pos_distr_cond_eq: \"rel_pred_pos_distr_cond (=) (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred_pos_distr_cond (=) (=)", "by simp"], ["", "lemma neg_fun_distr3:\n  assumes 1: \"left_unique R\" \"right_total R\"\n    and 2: \"right_unique S\" \"left_total S\"\n  shows \"rel_fun (R OO R') (S OO S') \\<le> rel_fun R S OO rel_fun R' S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R OO R' ===> S OO S' \\<le> (R ===> S) OO (R' ===> S')", "using functional_converse_relation[OF 1] functional_relation[OF 2]"], ["proof (prove)\nusing this:\n  \\<forall>y. \\<exists>!x. R x y\n  \\<forall>x. \\<exists>!y. S x y\n\ngoal (1 subgoal):\n 1. R OO R' ===> S OO S' \\<le> (R ===> S) OO (R' ===> S')", "unfolding rel_fun_def OO_def"], ["proof (prove)\nusing this:\n  \\<forall>y. \\<exists>!x. R x y\n  \\<forall>x. \\<exists>!y. S x y\n\ngoal (1 subgoal):\n 1. (\\<lambda>f g.\n        \\<forall>x y.\n           (\\<exists>ya. R x ya \\<and> R' ya y) \\<longrightarrow>\n           (\\<exists>ya. S (f x) ya \\<and> S' ya (g y)))\n    \\<le> (\\<lambda>x z.\n              \\<exists>y.\n                 (\\<forall>xa ya.\n                     R xa ya \\<longrightarrow> S (x xa) (y ya)) \\<and>\n                 (\\<forall>x ya. R' x ya \\<longrightarrow> S' (y x) (z ya)))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>y. \\<exists>!x. R x y;\n        \\<forall>x. \\<exists>!y. S x y;\n        \\<forall>xa ya.\n           (\\<exists>y. R xa y \\<and> R' y ya) \\<longrightarrow>\n           (\\<exists>yb. S (x xa) yb \\<and> S' yb (y ya))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya.\n                            (\\<forall>xa y.\n                                R xa y \\<longrightarrow>\n                                S (x xa) (ya y)) \\<and>\n                            (\\<forall>x yb.\n                                R' x yb \\<longrightarrow> S' (ya x) (y yb))", "apply (subst all_comm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>y. \\<exists>!x. R x y;\n        \\<forall>x. \\<exists>!y. S x y;\n        \\<forall>xa ya.\n           (\\<exists>y. R xa y \\<and> R' y ya) \\<longrightarrow>\n           (\\<exists>yb. S (x xa) yb \\<and> S' yb (y ya))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya.\n                            (\\<forall>y xa.\n                                R xa y \\<longrightarrow>\n                                S (x xa) (ya y)) \\<and>\n                            (\\<forall>x yb.\n                                R' x yb \\<longrightarrow> S' (ya x) (y yb))", "apply (subst all_conj_distrib[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>y. \\<exists>!x. R x y;\n        \\<forall>x. \\<exists>!y. S x y;\n        \\<forall>xa ya.\n           (\\<exists>y. R xa y \\<and> R' y ya) \\<longrightarrow>\n           (\\<exists>yb. S (x xa) yb \\<and> S' yb (y ya))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya.\n                            \\<forall>xa.\n                               (\\<forall>xb.\n                                   R xb xa \\<longrightarrow>\n                                   S (x xb) (ya xa)) \\<and>\n                               (\\<forall>yb.\n                                   R' xa yb \\<longrightarrow>\n                                   S' (ya xa) (y yb))", "apply (intro choice)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>y. \\<exists>!x. R x y;\n        \\<forall>x. \\<exists>!y. S x y;\n        \\<forall>xa ya.\n           (\\<exists>y. R xa y \\<and> R' y ya) \\<longrightarrow>\n           (\\<exists>yb. S (x xa) yb \\<and> S' yb (y ya))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa.\n                            \\<exists>ya.\n                               (\\<forall>xb.\n                                   R xb xa \\<longrightarrow>\n                                   S (x xb) ya) \\<and>\n                               (\\<forall>yb.\n                                   R' xa yb \\<longrightarrow> S' ya (y yb))", "by metis"], ["", "text \\<open>\n  As there are no live variables, we can get a weaker condition than if we derived it\n  from @{const rel_fun}'s condition!\n\\<close>"], ["", "lemma rel_pred_neg_distr_imp:\n  \"right_unique B \\<and> left_total B \\<or> left_unique A \\<and> right_total A \\<Longrightarrow> rel_pred_neg_distr_cond A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_unique B \\<and> left_total B \\<or>\n    left_unique A \\<and> right_total A \\<Longrightarrow>\n    rel_pred_neg_distr_cond A B", "unfolding rel_pred_neg_distr_cond_def rel_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. right_unique B \\<and> left_total B \\<or>\n    left_unique A \\<and> right_total A \\<Longrightarrow>\n    A OO B ===> (=) \\<le> (A ===> (=)) OO (B ===> (=))", "apply(clarsimp simp add: vimage2p_def rel_pred_neg_distr_cond_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>right_unique B \\<and> left_total B \\<or>\n                left_unique A \\<and> right_total A;\n        (A OO B ===> (=)) x y\\<rbrakk>\n       \\<Longrightarrow> ((A ===> (=)) OO (B ===> (=))) x y", "apply(rewrite in \"rel_fun _ \\<hole>\" in asm eq_OO[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>right_unique B \\<and> left_total B \\<or>\n                left_unique A \\<and> right_total A;\n        (A OO B ===> (=) OO (=)) x y\\<rbrakk>\n       \\<Longrightarrow> ((A ===> (=)) OO (B ===> (=))) x y", "apply(elim disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>(A OO B ===> (=) OO (=)) x y;\n        right_unique B \\<and> left_total B\\<rbrakk>\n       \\<Longrightarrow> ((A ===> (=)) OO (B ===> (=))) x y\n 2. \\<And>x y.\n       \\<lbrakk>(A OO B ===> (=) OO (=)) x y;\n        left_unique A \\<and> right_total A\\<rbrakk>\n       \\<Longrightarrow> ((A ===> (=)) OO (B ===> (=))) x y", "apply(drule neg_fun_distr2[THEN predicate2D, rotated -1];\n      (simp add: left_unique_eq right_unique_eq left_total_eq right_total_eq)?)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(A OO B ===> (=) OO (=)) x y;\n        left_unique A \\<and> right_total A\\<rbrakk>\n       \\<Longrightarrow> ((A ===> (=)) OO (B ===> (=))) x y", "apply(drule neg_fun_distr3[THEN predicate2D, rotated -1];\n      (simp add: left_unique_eq right_unique_eq left_total_eq right_total_eq)?)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rel_pred_neg_distr_cond_eq: \"rel_pred_neg_distr_cond (=) (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred_neg_distr_cond (=) (=)", "by(blast intro: rel_pred_neg_distr_imp left_unique_eq right_total_eq)"], ["", "lemma left_unique_rel_pred: \"left_total A \\<Longrightarrow> left_unique (rel_pred A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_total A \\<Longrightarrow> left_unique (rel_pred A)", "unfolding rel_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. left_total A \\<Longrightarrow> left_unique (A ===> (=))", "by (erule left_unique_fun) (rule left_unique_eq)"], ["", "lemma right_unique_rel_pred: \"right_total A \\<Longrightarrow> right_unique (rel_pred A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_total A \\<Longrightarrow> right_unique (rel_pred A)", "unfolding rel_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. right_total A \\<Longrightarrow> right_unique (A ===> (=))", "by (erule right_unique_fun) (rule right_unique_eq)"], ["", "lemma left_total_rel_pred: \"left_unique A \\<Longrightarrow> left_total (rel_pred A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_unique A \\<Longrightarrow> left_total (rel_pred A)", "unfolding rel_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. left_unique A \\<Longrightarrow> left_total (A ===> (=))", "by (erule left_total_fun) (rule left_total_eq)"], ["", "lemma right_total_rel_pred: \"right_unique A \\<Longrightarrow> right_total (rel_pred A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_unique A \\<Longrightarrow> right_total (rel_pred A)", "unfolding rel_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. right_unique A \\<Longrightarrow> right_total (A ===> (=))", "by (erule right_total_fun) (rule right_total_eq)"], ["", "end"], ["", "(* context includes lifting_syntax *)"], ["", "subsection \\<open>Filter\\<close>"], ["", "text \\<open>\n  Similarly to bounded sets, we exploit the definition of filters as a subtype in order to\n  lift the \\BNFCC{} operations. Here we use that the @{const is_filter} predicate is closed under\n  zippings.\n\\<close>"], ["", "lemma map_filter_closed:\n  includes lifting_syntax\n  assumes \"is_filter F\"\n  shows \"is_filter (((f ---> id) ---> id) F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_filter (((f ---> id) ---> id) F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_filter (((f ---> id) ---> id) F)", "define F' where \"F' = Abs_filter F\""], ["proof (state)\nthis:\n  F' = Abs_filter F\n\ngoal (1 subgoal):\n 1. is_filter (((f ---> id) ---> id) F)", "have \"is_filter (((f ---> id) ---> id) (\\<lambda>P. eventually P F'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_filter (((f ---> id) ---> id) (\\<lambda>P. eventually P F'))", "by (rule is_filter.intro)(auto elim!: eventually_rev_mp simp add: map_fun_def o_def)"], ["proof (state)\nthis:\n  is_filter (((f ---> id) ---> id) (\\<lambda>P. eventually P F'))\n\ngoal (1 subgoal):\n 1. is_filter (((f ---> id) ---> id) F)", "then"], ["proof (chain)\npicking this:\n  is_filter (((f ---> id) ---> id) (\\<lambda>P. eventually P F'))", "show ?thesis"], ["proof (prove)\nusing this:\n  is_filter (((f ---> id) ---> id) (\\<lambda>P. eventually P F'))\n\ngoal (1 subgoal):\n 1. is_filter (((f ---> id) ---> id) F)", "using assms"], ["proof (prove)\nusing this:\n  is_filter (((f ---> id) ---> id) (\\<lambda>P. eventually P F'))\n  is_filter F\n\ngoal (1 subgoal):\n 1. is_filter (((f ---> id) ---> id) F)", "by(simp add: F'_def eventually_Abs_filter)"], ["proof (state)\nthis:\n  is_filter (((f ---> id) ---> id) F)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition rel_pred2_neg_distr_cond :: \"('a \\<Rightarrow> 'a' \\<Rightarrow> bool) \\<Rightarrow> ('a' \\<Rightarrow> 'a'' \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n  \"rel_pred2_neg_distr_cond A B \\<longleftrightarrow>\n  rel_pred (rel_pred (A OO B)) \\<le> rel_pred (rel_pred A) OO rel_pred (rel_pred B)\""], ["", "consts rel_pred2_witness :: \"('a \\<Rightarrow> 'a' \\<Rightarrow> bool) \\<Rightarrow> ('a' \\<Rightarrow> 'a'' \\<Rightarrow> bool) \\<Rightarrow>\n  (('a \\<Rightarrow> bool) \\<Rightarrow> bool) \\<times> (('a'' \\<Rightarrow> bool) \\<Rightarrow> bool) \\<Rightarrow> ('a' \\<Rightarrow> bool) \\<Rightarrow> bool\""], ["", "specification (rel_pred2_witness)\n  rel_pred2_witness1: \"\\<And>K K' x y. \\<lbrakk> rel_pred2_neg_distr_cond K K'; rel_pred (rel_pred (K OO K')) x y \\<rbrakk> \\<Longrightarrow>\n    rel_pred (rel_pred K) x (rel_pred2_witness K K' (x, y))\"\n  rel_pred2_witness2: \"\\<And>K K' x y. \\<lbrakk> rel_pred2_neg_distr_cond K K'; rel_pred (rel_pred (K OO K')) x y \\<rbrakk> \\<Longrightarrow>\n    rel_pred (rel_pred K') (rel_pred2_witness K K' (x, y)) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rel_pred2_witness.\n       (\\<forall>K K' x y.\n           rel_pred2_neg_distr_cond K K' \\<longrightarrow>\n           rel_pred (rel_pred (K OO K')) x y \\<longrightarrow>\n           rel_pred (rel_pred K) x (rel_pred2_witness K K' (x, y))) \\<and>\n       (\\<forall>K K' x y.\n           rel_pred2_neg_distr_cond K K' \\<longrightarrow>\n           rel_pred (rel_pred (K OO K')) x y \\<longrightarrow>\n           rel_pred (rel_pred K') (rel_pred2_witness K K' (x, y)) y)", "apply (rule exI[of _ \"\\<lambda>K K' (x, y). SOME z. rel_pred (rel_pred K) x z \\<and> rel_pred (rel_pred K') z y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>K K' x y.\n        rel_pred2_neg_distr_cond K K' \\<longrightarrow>\n        rel_pred (rel_pred (K OO K')) x y \\<longrightarrow>\n        rel_pred (rel_pred K) x\n         (case (x, y) of\n          (rel_pred2_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_pred (rel_pred K) rel_pred2_witness z \\<and>\n               rel_pred (rel_pred K') z y)) \\<and>\n    (\\<forall>K K' x y.\n        rel_pred2_neg_distr_cond K K' \\<longrightarrow>\n        rel_pred (rel_pred (K OO K')) x y \\<longrightarrow>\n        rel_pred (rel_pred K')\n         (case (x, y) of\n          (rel_pred2_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_pred (rel_pred K) rel_pred2_witness z \\<and>\n               rel_pred (rel_pred K') z y)\n         y)", "apply (fold all_conj_distrib)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa xaa xaaa.\n       (rel_pred2_neg_distr_cond x xa \\<longrightarrow>\n        rel_pred (rel_pred (x OO xa)) xaa xaaa \\<longrightarrow>\n        rel_pred (rel_pred x) xaa\n         (case (xaa, xaaa) of\n          (rel_pred2_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_pred (rel_pred x) rel_pred2_witness z \\<and>\n               rel_pred (rel_pred xa) z y)) \\<and>\n       (rel_pred2_neg_distr_cond x xa \\<longrightarrow>\n        rel_pred (rel_pred (x OO xa)) xaa xaaa \\<longrightarrow>\n        rel_pred (rel_pred xa)\n         (case (xaa, xaaa) of\n          (rel_pred2_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_pred (rel_pred x) rel_pred2_witness z \\<and>\n               rel_pred (rel_pred xa) z y)\n         xaaa)", "apply (intro allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc.\n       (rel_pred2_neg_distr_cond x xa \\<longrightarrow>\n        rel_pred (rel_pred (x OO xa)) xb xc \\<longrightarrow>\n        rel_pred (rel_pred x) xb\n         (case (xb, xc) of\n          (rel_pred2_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_pred (rel_pred x) rel_pred2_witness z \\<and>\n               rel_pred (rel_pred xa) z y)) \\<and>\n       (rel_pred2_neg_distr_cond x xa \\<longrightarrow>\n        rel_pred (rel_pred (x OO xa)) xb xc \\<longrightarrow>\n        rel_pred (rel_pred xa)\n         (case (xb, xc) of\n          (rel_pred2_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_pred (rel_pred x) rel_pred2_witness z \\<and>\n               rel_pred (rel_pred xa) z y)\n         xc)", "apply (fold imp_conjR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc.\n       rel_pred2_neg_distr_cond x xa \\<longrightarrow>\n       rel_pred (rel_pred (x OO xa)) xb xc \\<longrightarrow>\n       rel_pred (rel_pred x) xb\n        (case (xb, xc) of\n         (rel_pred2_witness, y) \\<Rightarrow>\n           SOME z.\n              rel_pred (rel_pred x) rel_pred2_witness z \\<and>\n              rel_pred (rel_pred xa) z y) \\<and>\n       rel_pred (rel_pred xa)\n        (case (xb, xc) of\n         (rel_pred2_witness, y) \\<Rightarrow>\n           SOME z.\n              rel_pred (rel_pred x) rel_pred2_witness z \\<and>\n              rel_pred (rel_pred xa) z y)\n        xc", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc.\n       \\<lbrakk>rel_pred2_neg_distr_cond x xa;\n        rel_pred (rel_pred (x OO xa)) xb xc\\<rbrakk>\n       \\<Longrightarrow> rel_pred (rel_pred x) xb\n                          (SOME z.\n                              rel_pred (rel_pred x) xb z \\<and>\n                              rel_pred (rel_pred xa) z xc) \\<and>\n                         rel_pred (rel_pred xa)\n                          (SOME z.\n                              rel_pred (rel_pred x) xb z \\<and>\n                              rel_pred (rel_pred xa) z xc)\n                          xc", "apply (rule relcomppE[of \"rel_pred (rel_pred _)\" \"rel_pred (rel_pred _)\", rotated])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa xb xc b.\n       \\<lbrakk>rel_pred2_neg_distr_cond x xa;\n        rel_pred (rel_pred (x OO xa)) xb xc;\n        rel_pred (rel_pred (?uu14 x xa xb xc)) (?a9 x xa xb xc) b;\n        rel_pred (rel_pred (?uua14 x xa xb xc)) b (?c9 x xa xb xc)\\<rbrakk>\n       \\<Longrightarrow> rel_pred (rel_pred x) xb\n                          (SOME z.\n                              rel_pred (rel_pred x) xb z \\<and>\n                              rel_pred (rel_pred xa) z xc) \\<and>\n                         rel_pred (rel_pred xa)\n                          (SOME z.\n                              rel_pred (rel_pred x) xb z \\<and>\n                              rel_pred (rel_pred xa) z xc)\n                          xc\n 2. \\<And>x xa xb xc.\n       \\<lbrakk>rel_pred2_neg_distr_cond x xa;\n        rel_pred (rel_pred (x OO xa)) xb xc\\<rbrakk>\n       \\<Longrightarrow> (rel_pred (rel_pred (?uu14 x xa xb xc)) OO\n                          rel_pred (rel_pred (?uua14 x xa xb xc)))\n                          (?a9 x xa xb xc) (?c9 x xa xb xc)", "apply (rule someI[where P=\"\\<lambda>z. rel_pred (rel_pred _) _ z \\<and> rel_pred (rel_pred _) z _\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa xb xc b.\n       \\<lbrakk>rel_pred2_neg_distr_cond x xa;\n        rel_pred (rel_pred (x OO xa)) xb xc;\n        rel_pred (rel_pred (?uu14 x xa xb xc)) (?a9 x xa xb xc) b;\n        rel_pred (rel_pred (?uua14 x xa xb xc)) b (?c9 x xa xb xc)\\<rbrakk>\n       \\<Longrightarrow> rel_pred (rel_pred x) xb (?x17 x xa xb xc b) \\<and>\n                         rel_pred (rel_pred xa) (?x17 x xa xb xc b) xc\n 2. \\<And>x xa xb xc.\n       \\<lbrakk>rel_pred2_neg_distr_cond x xa;\n        rel_pred (rel_pred (x OO xa)) xb xc\\<rbrakk>\n       \\<Longrightarrow> (rel_pred (rel_pred (?uu14 x xa xb xc)) OO\n                          rel_pred (rel_pred (?uua14 x xa xb xc)))\n                          (?a9 x xa xb xc) (?c9 x xa xb xc)", "apply (erule (1) conjI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc.\n       \\<lbrakk>rel_pred2_neg_distr_cond x xa;\n        rel_pred (rel_pred (x OO xa)) xb xc\\<rbrakk>\n       \\<Longrightarrow> (rel_pred (rel_pred x) OO rel_pred (rel_pred xa))\n                          xb xc", "apply (auto simp add: rel_pred2_neg_distr_cond_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas rel_pred2_witness = rel_pred2_witness1 rel_pred2_witness2"], ["", "context includes lifting_syntax\nbegin"], ["", "definition rel_filter_neg_distr_cond' :: \"('a \\<Rightarrow> 'b \\<Rightarrow> bool) \\<Rightarrow> ('b \\<Rightarrow> 'c \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n  \"rel_filter_neg_distr_cond' C C' \\<longleftrightarrow> left_total C \\<and> right_unique C \\<or> right_total C' \\<and> left_unique C'\""], ["", "lemma rel_filter_neg_distr_cond'_stronger:\n  assumes \"rel_filter_neg_distr_cond' C C'\"\n  shows \"rel_pred2_neg_distr_cond C C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred2_neg_distr_cond C C'", "unfolding rel_pred2_neg_distr_cond_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred (rel_pred (C OO C'))\n    \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_pred (rel_pred (C OO C'))\n    \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')", "have \"rel_pred (rel_pred (C OO C')) \\<le> rel_pred (rel_pred C OO rel_pred C')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred (rel_pred (C OO C')) \\<le> rel_pred (rel_pred C OO rel_pred C')", "by (auto intro!: rel_pred_mono rel_pred_pos_distr)"], ["proof (state)\nthis:\n  rel_pred (rel_pred (C OO C')) \\<le> rel_pred (rel_pred C OO rel_pred C')\n\ngoal (1 subgoal):\n 1. rel_pred (rel_pred (C OO C'))\n    \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')", "also"], ["proof (state)\nthis:\n  rel_pred (rel_pred (C OO C')) \\<le> rel_pred (rel_pred C OO rel_pred C')\n\ngoal (1 subgoal):\n 1. rel_pred (rel_pred (C OO C'))\n    \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')", "have \"... \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred (rel_pred C OO rel_pred C')\n    \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')", "apply (rule rel_pred_neg_distr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred_neg_distr_cond (rel_pred C) (rel_pred C')", "apply (rule rel_pred_neg_distr_imp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. right_unique (rel_pred C') \\<and> left_total (rel_pred C') \\<or>\n    left_unique (rel_pred C) \\<and> right_total (rel_pred C)", "apply (insert assms[unfolded rel_filter_neg_distr_cond'_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. left_total C \\<and> right_unique C \\<or>\n    right_total C' \\<and> left_unique C' \\<Longrightarrow>\n    right_unique (rel_pred C') \\<and> left_total (rel_pred C') \\<or>\n    left_unique (rel_pred C) \\<and> right_total (rel_pred C)", "by (blast dest: left_unique_rel_pred right_total_rel_pred right_unique_rel_pred left_total_rel_pred)"], ["proof (state)\nthis:\n  rel_pred (rel_pred C OO rel_pred C')\n  \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')\n\ngoal (1 subgoal):\n 1. rel_pred (rel_pred (C OO C'))\n    \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')", "finally"], ["proof (chain)\npicking this:\n  rel_pred (rel_pred (C OO C'))\n  \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')", "show \"rel_pred (rel_pred (C OO C')) \\<le> ...\""], ["proof (prove)\nusing this:\n  rel_pred (rel_pred (C OO C'))\n  \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')\n\ngoal (1 subgoal):\n 1. rel_pred (rel_pred (C OO C'))\n    \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')", "."], ["proof (state)\nthis:\n  rel_pred (rel_pred (C OO C'))\n  \\<le> rel_pred (rel_pred C) OO rel_pred (rel_pred C')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rel_filter_neg_distr_cond'_eq: \"rel_filter_neg_distr_cond' (=) (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_filter_neg_distr_cond' (=) (=)", "unfolding rel_filter_neg_distr_cond'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. left_total (=) \\<and> right_unique (=) \\<or>\n    right_total (=) \\<and> left_unique (=)", "by (simp add: left_total_eq right_unique_eq)"], ["", "lemma is_filter_rel_witness:\n  assumes F: \"is_filter F\" and G: \"is_filter G\"\n    and FG: \"rel_pred (rel_pred (C OO C')) F G\"\n    and cond: \"rel_filter_neg_distr_cond' C C'\"\n  shows \"is_filter (rel_pred2_witness C C' (F, G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_filter (rel_pred2_witness C C' (F, G))", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>x. True)\n 2. \\<And>P Q.\n       \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n        rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                          (\\<lambda>x. P x \\<and> Q x)\n 3. \\<And>P Q.\n       \\<lbrakk>\\<forall>x. P x \\<longrightarrow> Q x;\n        rel_pred2_witness C C' (F, G) P\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "let ?C = \"rel_pred (rel_pred C)\" and ?C' = \"rel_pred (rel_pred C')\""], ["proof (state)\ngoal (3 subgoals):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>x. True)\n 2. \\<And>P Q.\n       \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n        rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                          (\\<lambda>x. P x \\<and> Q x)\n 3. \\<And>P Q.\n       \\<lbrakk>\\<forall>x. P x \\<longrightarrow> Q x;\n        rel_pred2_witness C C' (F, G) P\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "let ?wit = \"rel_pred2_witness C C' (F, G)\""], ["proof (state)\ngoal (3 subgoals):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>x. True)\n 2. \\<And>P Q.\n       \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n        rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                          (\\<lambda>x. P x \\<and> Q x)\n 3. \\<And>P Q.\n       \\<lbrakk>\\<forall>x. P x \\<longrightarrow> Q x;\n        rel_pred2_witness C C' (F, G) P\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "have \"rel_pred2_neg_distr_cond C C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred2_neg_distr_cond C C'", "using cond"], ["proof (prove)\nusing this:\n  rel_filter_neg_distr_cond' C C'\n\ngoal (1 subgoal):\n 1. rel_pred2_neg_distr_cond C C'", "by (rule rel_filter_neg_distr_cond'_stronger)"], ["proof (state)\nthis:\n  rel_pred2_neg_distr_cond C C'\n\ngoal (3 subgoals):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>x. True)\n 2. \\<And>P Q.\n       \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n        rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                          (\\<lambda>x. P x \\<and> Q x)\n 3. \\<And>P Q.\n       \\<lbrakk>\\<forall>x. P x \\<longrightarrow> Q x;\n        rel_pred2_witness C C' (F, G) P\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "with FG"], ["proof (chain)\npicking this:\n  rel_pred (rel_pred (C OO C')) F G\n  rel_pred2_neg_distr_cond C C'", "have wit1: \"?C F ?wit\" and wit2: \"?C' ?wit G\""], ["proof (prove)\nusing this:\n  rel_pred (rel_pred (C OO C')) F G\n  rel_pred2_neg_distr_cond C C'\n\ngoal (1 subgoal):\n 1. rel_pred (rel_pred C) F (rel_pred2_witness C C' (F, G)) &&&\n    rel_pred (rel_pred C') (rel_pred2_witness C C' (F, G)) G", "by (rule rel_pred2_witness[rotated])+"], ["proof (state)\nthis:\n  rel_pred (rel_pred C) F (rel_pred2_witness C C' (F, G))\n  rel_pred (rel_pred C') (rel_pred2_witness C C' (F, G)) G\n\ngoal (3 subgoals):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>x. True)\n 2. \\<And>P Q.\n       \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n        rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                          (\\<lambda>x. P x \\<and> Q x)\n 3. \\<And>P Q.\n       \\<lbrakk>\\<forall>x. P x \\<longrightarrow> Q x;\n        rel_pred2_witness C C' (F, G) P\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "from wit1[unfolded rel_pred_def, THEN rel_funD, of \"\\<lambda>_. True\" \"\\<lambda>_. True\"] F"], ["proof (chain)\npicking this:\n  (C ===> (=)) (\\<lambda>_. True) (\\<lambda>_. True) \\<Longrightarrow>\n  F (\\<lambda>_. True) = rel_pred2_witness C C' (F, G) (\\<lambda>_. True)\n  is_filter F", "show \"?wit (\\<lambda>_. True)\""], ["proof (prove)\nusing this:\n  (C ===> (=)) (\\<lambda>_. True) (\\<lambda>_. True) \\<Longrightarrow>\n  F (\\<lambda>_. True) = rel_pred2_witness C C' (F, G) (\\<lambda>_. True)\n  is_filter F\n\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>_. True)", "by (auto simp add: is_filter.True)"], ["proof (state)\nthis:\n  rel_pred2_witness C C' (F, G) (\\<lambda>_. True)\n\ngoal (2 subgoals):\n 1. \\<And>P Q.\n       \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n        rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                          (\\<lambda>x. P x \\<and> Q x)\n 2. \\<And>P Q.\n       \\<lbrakk>\\<forall>x. P x \\<longrightarrow> Q x;\n        rel_pred2_witness C C' (F, G) P\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "fix P Q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P Q.\n       \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n        rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                          (\\<lambda>x. P x \\<and> Q x)\n 2. \\<And>P Q.\n       \\<lbrakk>\\<forall>x. P x \\<longrightarrow> Q x;\n        rel_pred2_witness C C' (F, G) P\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "have *: \"(?wit P \\<longrightarrow> ?wit Q \\<longrightarrow> ?wit (\\<lambda>x. P x \\<and> Q x)) \\<and> (?wit P \\<longrightarrow> (\\<forall>x. P x \\<longrightarrow> Q x) \\<longrightarrow> ?wit Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n     rel_pred2_witness C C' (F, G) Q \\<longrightarrow>\n     rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)) \\<and>\n    (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n     (\\<forall>x. P x \\<longrightarrow> Q x) \\<longrightarrow>\n     rel_pred2_witness C C' (F, G) Q)", "using cond"], ["proof (prove)\nusing this:\n  rel_filter_neg_distr_cond' C C'\n\ngoal (1 subgoal):\n 1. (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n     rel_pred2_witness C C' (F, G) Q \\<longrightarrow>\n     rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)) \\<and>\n    (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n     (\\<forall>x. P x \\<longrightarrow> Q x) \\<longrightarrow>\n     rel_pred2_witness C C' (F, G) Q)", "unfolding rel_filter_neg_distr_cond'_def"], ["proof (prove)\nusing this:\n  left_total C \\<and> right_unique C \\<or>\n  right_total C' \\<and> left_unique C'\n\ngoal (1 subgoal):\n 1. (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n     rel_pred2_witness C C' (F, G) Q \\<longrightarrow>\n     rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)) \\<and>\n    (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n     (\\<forall>x. P x \\<longrightarrow> Q x) \\<longrightarrow>\n     rel_pred2_witness C C' (F, G) Q)", "proof(elim disjE conjE; use nothing in \\<open>intro conjI strip\\<close>)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q\n 3. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 4. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "assume \"left_total C\" \"right_unique C\""], ["proof (state)\nthis:\n  left_total C\n  right_unique C\n\ngoal (4 subgoals):\n 1. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q\n 3. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 4. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "hence \"left_unique (C ===> (=))\" \"right_total (C ===> (=))\""], ["proof (prove)\nusing this:\n  left_total C\n  right_unique C\n\ngoal (1 subgoal):\n 1. left_unique (C ===> (=)) &&& right_total (C ===> (=))", "by(blast intro: left_unique_fun left_unique_eq right_total_fun right_total_eq)+"], ["proof (state)\nthis:\n  left_unique (C ===> (=))\n  right_total (C ===> (=))\n\ngoal (4 subgoals):\n 1. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q\n 3. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 4. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "from functional_converse_relation[OF this]"], ["proof (chain)\npicking this:\n  \\<forall>y. \\<exists>!x. (C ===> (=)) x y", "obtain P' Q'\n      where P' [transfer_rule]: \"(C ===> (=)) P' P\" and Q' [transfer_rule]: \"(C ===> (=)) Q' Q\""], ["proof (prove)\nusing this:\n  \\<forall>y. \\<exists>!x. (C ===> (=)) x y\n\ngoal (1 subgoal):\n 1. (\\<And>P' Q'.\n        \\<lbrakk>(C ===> (=)) P' P; (C ===> (=)) Q' Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (C ===> (=)) P' P\n  (C ===> (=)) Q' Q\n\ngoal (4 subgoals):\n 1. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q\n 3. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 4. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "have PQ: \"(C ===> (=)) (\\<lambda>x. P' x \\<and> Q' x) (\\<lambda>x. P x \\<and> Q x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C ===> (=)) (\\<lambda>x. P' x \\<and> Q' x) (\\<lambda>x. P x \\<and> Q x)", "by transfer_prover"], ["proof (state)\nthis:\n  (C ===> (=)) (\\<lambda>x. P' x \\<and> Q' x) (\\<lambda>x. P x \\<and> Q x)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q\n 3. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 4. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "with wit1 P' Q'"], ["proof (chain)\npicking this:\n  rel_pred (rel_pred C) F (rel_pred2_witness C C' (F, G))\n  (C ===> (=)) P' P\n  (C ===> (=)) Q' Q\n  (C ===> (=)) (\\<lambda>x. P' x \\<and> Q' x) (\\<lambda>x. P x \\<and> Q x)", "have P: \"?wit P \\<longleftrightarrow> F P'\" and Q: \"?wit Q \\<longleftrightarrow> F Q'\"\n      and PQ: \"?wit (\\<lambda>x. P x \\<and> Q x) \\<longleftrightarrow> F (\\<lambda>x. P' x \\<and> Q' x)\""], ["proof (prove)\nusing this:\n  rel_pred (rel_pred C) F (rel_pred2_witness C C' (F, G))\n  (C ===> (=)) P' P\n  (C ===> (=)) Q' Q\n  (C ===> (=)) (\\<lambda>x. P' x \\<and> Q' x) (\\<lambda>x. P x \\<and> Q x)\n\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) P = F P' &&&\n    rel_pred2_witness C C' (F, G) Q = F Q' &&&\n    rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x) =\n    F (\\<lambda>x. P' x \\<and> Q' x)", "by(auto dest: rel_funD simp add: rel_pred_def)"], ["proof (state)\nthis:\n  rel_pred2_witness C C' (F, G) P = F P'\n  rel_pred2_witness C C' (F, G) Q = F Q'\n  rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x) =\n  F (\\<lambda>x. P' x \\<and> Q' x)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q\n 3. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 4. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "show \"?wit (\\<lambda>x. P x \\<and> Q x)\" if \"?wit P\" \"?wit Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)", "using that P Q PQ"], ["proof (prove)\nusing this:\n  rel_pred2_witness C C' (F, G) P\n  rel_pred2_witness C C' (F, G) Q\n  rel_pred2_witness C C' (F, G) P = F P'\n  rel_pred2_witness C C' (F, G) Q = F Q'\n  rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x) =\n  F (\\<lambda>x. P' x \\<and> Q' x)\n\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)", "by(auto intro: is_filter.conj[OF F])"], ["proof (state)\nthis:\n  \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n   rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n  \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                     (\\<lambda>x. P x \\<and> Q x)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q\n 2. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 3. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "assume \"\\<forall>x. P x \\<longrightarrow> Q x\""], ["proof (state)\nthis:\n  \\<forall>x. P x \\<longrightarrow> Q x\n\ngoal (3 subgoals):\n 1. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q\n 2. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 3. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "with P' Q' \\<open>left_total C\\<close>"], ["proof (chain)\npicking this:\n  (C ===> (=)) P' P\n  (C ===> (=)) Q' Q\n  left_total C\n  \\<forall>x. P x \\<longrightarrow> Q x", "have \"\\<forall>x. P' x \\<longrightarrow> Q' x\""], ["proof (prove)\nusing this:\n  (C ===> (=)) P' P\n  (C ===> (=)) Q' Q\n  left_total C\n  \\<forall>x. P x \\<longrightarrow> Q x\n\ngoal (1 subgoal):\n 1. \\<forall>x. P' x \\<longrightarrow> Q' x", "by(metis (full_types) apply_rsp' left_total_def)"], ["proof (state)\nthis:\n  \\<forall>x. P' x \\<longrightarrow> Q' x\n\ngoal (3 subgoals):\n 1. \\<lbrakk>left_total C; right_unique C; rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q\n 2. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 3. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. P' x \\<longrightarrow> Q' x", "show \"?wit Q\" if \"?wit P\""], ["proof (prove)\nusing this:\n  \\<forall>x. P' x \\<longrightarrow> Q' x\n\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) Q", "using P Q that"], ["proof (prove)\nusing this:\n  \\<forall>x. P' x \\<longrightarrow> Q' x\n  rel_pred2_witness C C' (F, G) P = F P'\n  rel_pred2_witness C C' (F, G) Q = F Q'\n  rel_pred2_witness C C' (F, G) P\n\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) Q", "by(simp add: is_filter.mono[OF F])"], ["proof (state)\nthis:\n  rel_pred2_witness C C' (F, G) P \\<Longrightarrow>\n  rel_pred2_witness C C' (F, G) Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "assume \"right_total C'\" \"left_unique C'\""], ["proof (state)\nthis:\n  right_total C'\n  left_unique C'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "hence \"right_unique (C' ===> (=))\" \"left_total (C' ===> (=))\""], ["proof (prove)\nusing this:\n  right_total C'\n  left_unique C'\n\ngoal (1 subgoal):\n 1. right_unique (C' ===> (=)) &&& left_total (C' ===> (=))", "by(blast intro: right_unique_fun right_unique_eq left_total_fun left_total_eq)+"], ["proof (state)\nthis:\n  right_unique (C' ===> (=))\n  left_total (C' ===> (=))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "from functional_relation[OF this]"], ["proof (chain)\npicking this:\n  \\<forall>x. \\<exists>!y. (C' ===> (=)) x y", "obtain P' Q'\n      where P' [transfer_rule]: \"(C' ===> (=)) P P'\" and Q' [transfer_rule]: \"(C' ===> (=)) Q Q'\""], ["proof (prove)\nusing this:\n  \\<forall>x. \\<exists>!y. (C' ===> (=)) x y\n\ngoal (1 subgoal):\n 1. (\\<And>P' Q'.\n        \\<lbrakk>(C' ===> (=)) P P'; (C' ===> (=)) Q Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (C' ===> (=)) P P'\n  (C' ===> (=)) Q Q'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "have PQ: \"(C' ===> (=)) (\\<lambda>x. P x \\<and> Q x) (\\<lambda>x. P' x \\<and> Q' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C' ===> (=)) (\\<lambda>x. P x \\<and> Q x)\n     (\\<lambda>x. P' x \\<and> Q' x)", "by transfer_prover"], ["proof (state)\nthis:\n  (C' ===> (=)) (\\<lambda>x. P x \\<and> Q x) (\\<lambda>x. P' x \\<and> Q' x)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "with wit2 P' Q'"], ["proof (chain)\npicking this:\n  rel_pred (rel_pred C') (rel_pred2_witness C C' (F, G)) G\n  (C' ===> (=)) P P'\n  (C' ===> (=)) Q Q'\n  (C' ===> (=)) (\\<lambda>x. P x \\<and> Q x) (\\<lambda>x. P' x \\<and> Q' x)", "have P: \"?wit P \\<longleftrightarrow> G P'\" and Q: \"?wit Q \\<longleftrightarrow> G Q'\"\n      and PQ: \"?wit (\\<lambda>x. P x \\<and> Q x) \\<longleftrightarrow> G (\\<lambda>x. P' x \\<and> Q' x)\""], ["proof (prove)\nusing this:\n  rel_pred (rel_pred C') (rel_pred2_witness C C' (F, G)) G\n  (C' ===> (=)) P P'\n  (C' ===> (=)) Q Q'\n  (C' ===> (=)) (\\<lambda>x. P x \\<and> Q x) (\\<lambda>x. P' x \\<and> Q' x)\n\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) P = G P' &&&\n    rel_pred2_witness C C' (F, G) Q = G Q' &&&\n    rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x) =\n    G (\\<lambda>x. P' x \\<and> Q' x)", "by(auto dest: rel_funD simp add: rel_pred_def)"], ["proof (state)\nthis:\n  rel_pred2_witness C C' (F, G) P = G P'\n  rel_pred2_witness C C' (F, G) Q = G Q'\n  rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x) =\n  G (\\<lambda>x. P' x \\<and> Q' x)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                       (\\<lambda>x. P x \\<and> Q x)\n 2. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "show \"?wit (\\<lambda>x. P x \\<and> Q x)\" if \"?wit P\" \"?wit Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)", "using that P Q PQ"], ["proof (prove)\nusing this:\n  rel_pred2_witness C C' (F, G) P\n  rel_pred2_witness C C' (F, G) Q\n  rel_pred2_witness C C' (F, G) P = G P'\n  rel_pred2_witness C C' (F, G) Q = G Q'\n  rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x) =\n  G (\\<lambda>x. P' x \\<and> Q' x)\n\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)", "by(auto intro: is_filter.conj[OF G])"], ["proof (state)\nthis:\n  \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n   rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n  \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                     (\\<lambda>x. P x \\<and> Q x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "assume \"\\<forall>x. P x \\<longrightarrow> Q x\""], ["proof (state)\nthis:\n  \\<forall>x. P x \\<longrightarrow> Q x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "with P' Q' \\<open>right_total C'\\<close>"], ["proof (chain)\npicking this:\n  (C' ===> (=)) P P'\n  (C' ===> (=)) Q Q'\n  right_total C'\n  \\<forall>x. P x \\<longrightarrow> Q x", "have \"\\<forall>x. P' x \\<longrightarrow> Q' x\""], ["proof (prove)\nusing this:\n  (C' ===> (=)) P P'\n  (C' ===> (=)) Q Q'\n  right_total C'\n  \\<forall>x. P x \\<longrightarrow> Q x\n\ngoal (1 subgoal):\n 1. \\<forall>x. P' x \\<longrightarrow> Q' x", "by(metis (full_types) apply_rsp' right_total_def)"], ["proof (state)\nthis:\n  \\<forall>x. P' x \\<longrightarrow> Q' x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>right_total C'; left_unique C';\n     rel_pred2_witness C C' (F, G) P;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. P' x \\<longrightarrow> Q' x", "show \"?wit Q\" if \"?wit P\""], ["proof (prove)\nusing this:\n  \\<forall>x. P' x \\<longrightarrow> Q' x\n\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) Q", "using P Q that"], ["proof (prove)\nusing this:\n  \\<forall>x. P' x \\<longrightarrow> Q' x\n  rel_pred2_witness C C' (F, G) P = G P'\n  rel_pred2_witness C C' (F, G) Q = G Q'\n  rel_pred2_witness C C' (F, G) P\n\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) Q", "by(simp add: is_filter.mono[OF G])"], ["proof (state)\nthis:\n  rel_pred2_witness C C' (F, G) P \\<Longrightarrow>\n  rel_pred2_witness C C' (F, G) Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n   rel_pred2_witness C C' (F, G) Q \\<longrightarrow>\n   rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)) \\<and>\n  (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n   (\\<forall>x. P x \\<longrightarrow> Q x) \\<longrightarrow>\n   rel_pred2_witness C C' (F, G) Q)\n\ngoal (2 subgoals):\n 1. \\<And>P Q.\n       \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n        rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                          (\\<lambda>x. P x \\<and> Q x)\n 2. \\<And>P Q.\n       \\<lbrakk>\\<forall>x. P x \\<longrightarrow> Q x;\n        rel_pred2_witness C C' (F, G) P\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "show \"?wit (\\<lambda>x. P x \\<and> Q x)\" if P: \"?wit P\" and Q: \"?wit Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)", "using * that"], ["proof (prove)\nusing this:\n  (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n   rel_pred2_witness C C' (F, G) Q \\<longrightarrow>\n   rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)) \\<and>\n  (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n   (\\<forall>x. P x \\<longrightarrow> Q x) \\<longrightarrow>\n   rel_pred2_witness C C' (F, G) Q)\n  rel_pred2_witness C C' (F, G) P\n  rel_pred2_witness C C' (F, G) Q\n\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n   rel_pred2_witness C C' (F, G) Q\\<rbrakk>\n  \\<Longrightarrow> rel_pred2_witness C C' (F, G)\n                     (\\<lambda>x. P x \\<and> Q x)\n\ngoal (1 subgoal):\n 1. \\<And>P Q.\n       \\<lbrakk>\\<forall>x. P x \\<longrightarrow> Q x;\n        rel_pred2_witness C C' (F, G) P\\<rbrakk>\n       \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q", "show \"?wit Q\" if P: \"?wit P\" and imp: \"\\<forall>x. P x \\<longrightarrow> Q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) Q", "using * that"], ["proof (prove)\nusing this:\n  (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n   rel_pred2_witness C C' (F, G) Q \\<longrightarrow>\n   rel_pred2_witness C C' (F, G) (\\<lambda>x. P x \\<and> Q x)) \\<and>\n  (rel_pred2_witness C C' (F, G) P \\<longrightarrow>\n   (\\<forall>x. P x \\<longrightarrow> Q x) \\<longrightarrow>\n   rel_pred2_witness C C' (F, G) Q)\n  rel_pred2_witness C C' (F, G) P\n  \\<forall>x. P x \\<longrightarrow> Q x\n\ngoal (1 subgoal):\n 1. rel_pred2_witness C C' (F, G) Q", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>rel_pred2_witness C C' (F, G) P;\n   \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n  \\<Longrightarrow> rel_pred2_witness C C' (F, G) Q\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* context includes lifting_syntax *)"], ["", "text \\<open>The following example shows that filters do not satisfy @{command lift_bnf}'s condition.\\<close>"], ["", "experiment begin"], ["", "unbundle lifting_syntax"], ["", "definition \"raw_filtermap f = ((f ---> id) ---> id)\""], ["", "lemma raw_filtermap_apply: \"raw_filtermap f F = (\\<lambda>P. F (\\<lambda>x. P (f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_filtermap f F = (\\<lambda>P. F (\\<lambda>x. P (f x)))", "unfolding raw_filtermap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((f ---> id) ---> id) F = (\\<lambda>P. F (\\<lambda>x. P (f x)))", "by (simp add: map_fun_def comp_def)"], ["", "lemma \"filtermap f = Abs_filter \\<circ> raw_filtermap f \\<circ> Rep_filter\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filtermap f = Abs_filter \\<circ> raw_filtermap f \\<circ> Rep_filter", "unfolding filtermap_def eventually_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>F.\n        Abs_filter (\\<lambda>P. Rep_filter F (\\<lambda>x. P (f x)))) =\n    Abs_filter \\<circ> raw_filtermap f \\<circ> Rep_filter", "by (simp add: fun_eq_iff raw_filtermap_apply)"], ["", "definition Z where\n  \"Z = {{(False, False), (False, True)}, {(False, False), (True, False)},\n    {(False, False), (False, True), (True, False), (True, True)}}\""], ["", "abbreviation \"Z' \\<equiv> (\\<lambda>P. Collect P \\<in> Z)\""], ["", "lemma \"is_filter (raw_filtermap fst Z')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_filter (raw_filtermap fst (\\<lambda>P. Collect P \\<in> Z))", "unfolding Z_def raw_filtermap_apply"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_filter\n     (\\<lambda>P.\n         {x. P (fst x)}\n         \\<in> {{(False, False), (False, True)},\n                {(False, False), (True, False)},\n                {(False, False), (False, True), (True, False),\n                 (True, True)}})", "apply (rule is_filter.intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. {x. True}\n    \\<in> {{(False, False), (False, True)}, {(False, False), (True, False)},\n           {(False, False), (False, True), (True, False), (True, True)}}\n 2. \\<And>P Q.\n       \\<lbrakk>{x. P (fst x)}\n                \\<in> {{(False, False), (False, True)},\n                       {(False, False), (True, False)},\n                       {(False, False), (False, True), (True, False),\n                        (True, True)}};\n        {x. Q (fst x)}\n        \\<in> {{(False, False), (False, True)},\n               {(False, False), (True, False)},\n               {(False, False), (False, True), (True, False),\n                (True, True)}}\\<rbrakk>\n       \\<Longrightarrow> {x. P (fst x) \\<and> Q (fst x)}\n                         \\<in> {{(False, False), (False, True)},\n                                {(False, False), (True, False)},\n                                {(False, False), (False, True),\n                                 (True, False), (True, True)}}\n 3. \\<And>P Q.\n       \\<lbrakk>\\<forall>x. P x \\<longrightarrow> Q x;\n        {x. P (fst x)}\n        \\<in> {{(False, False), (False, True)},\n               {(False, False), (True, False)},\n               {(False, False), (False, True), (True, False),\n                (True, True)}}\\<rbrakk>\n       \\<Longrightarrow> {x. Q (fst x)}\n                         \\<in> {{(False, False), (False, True)},\n                                {(False, False), (True, False)},\n                                {(False, False), (False, True),\n                                 (True, False), (True, True)}}", "apply (simp add: set_eq_iff; smt)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"is_filter (raw_filtermap snd Z')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_filter (raw_filtermap snd (\\<lambda>P. Collect P \\<in> Z))", "unfolding Z_def raw_filtermap_apply"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_filter\n     (\\<lambda>P.\n         {x. P (snd x)}\n         \\<in> {{(False, False), (False, True)},\n                {(False, False), (True, False)},\n                {(False, False), (False, True), (True, False),\n                 (True, True)}})", "apply (rule is_filter.intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. {x. True}\n    \\<in> {{(False, False), (False, True)}, {(False, False), (True, False)},\n           {(False, False), (False, True), (True, False), (True, True)}}\n 2. \\<And>P Q.\n       \\<lbrakk>{x. P (snd x)}\n                \\<in> {{(False, False), (False, True)},\n                       {(False, False), (True, False)},\n                       {(False, False), (False, True), (True, False),\n                        (True, True)}};\n        {x. Q (snd x)}\n        \\<in> {{(False, False), (False, True)},\n               {(False, False), (True, False)},\n               {(False, False), (False, True), (True, False),\n                (True, True)}}\\<rbrakk>\n       \\<Longrightarrow> {x. P (snd x) \\<and> Q (snd x)}\n                         \\<in> {{(False, False), (False, True)},\n                                {(False, False), (True, False)},\n                                {(False, False), (False, True),\n                                 (True, False), (True, True)}}\n 3. \\<And>P Q.\n       \\<lbrakk>\\<forall>x. P x \\<longrightarrow> Q x;\n        {x. P (snd x)}\n        \\<in> {{(False, False), (False, True)},\n               {(False, False), (True, False)},\n               {(False, False), (False, True), (True, False),\n                (True, True)}}\\<rbrakk>\n       \\<Longrightarrow> {x. Q (snd x)}\n                         \\<in> {{(False, False), (False, True)},\n                                {(False, False), (True, False)},\n                                {(False, False), (False, True),\n                                 (True, False), (True, True)}}", "apply (simp add: set_eq_iff; smt)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"\\<not> is_filter Z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_filter (\\<lambda>P. Collect P \\<in> Z)", "apply (rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_filter (\\<lambda>P. Collect P \\<in> Z) \\<Longrightarrow> False", "apply (drule is_filter.mono[of _ \"\\<lambda>x. x \\<in> {(False, False), (False, True)}\"\n        \"\\<lambda>x. x \\<in> {(False, False), (False, True), (True, False)}\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x.\n       x \\<in> {(False, False), (False, True)} \\<longrightarrow>\n       x \\<in> {(False, False), (False, True), (True, False)}\n 2. {x. x \\<in> {(False, False), (False, True)}} \\<in> Z\n 3. {x. x \\<in> {(False, False), (False, True), (True, False)}}\n    \\<in> Z \\<Longrightarrow>\n    False", "apply (auto 3 0 simp add: Z_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "(* experiment *)"], ["", "subsection \\<open>Almost-everywhere equal sequences\\<close>"], ["", "inductive aeseq_eq :: \"(nat \\<Rightarrow> 'a) \\<Rightarrow> (nat \\<Rightarrow> 'a) \\<Rightarrow> bool\" for f g where\n  \"aeseq_eq f g\" if \"finite {n. f n \\<noteq> g n}\""], ["", "lemma equivp_aeseq_eq: \"equivp aeseq_eq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp aeseq_eq", "proof(rule equivpI)"], ["proof (state)\ngoal (3 subgoals):\n 1. reflp aeseq_eq\n 2. symp aeseq_eq\n 3. transp aeseq_eq", "show \"reflp aeseq_eq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflp aeseq_eq", "by(simp add: reflp_def aeseq_eq.simps)"], ["proof (state)\nthis:\n  reflp aeseq_eq\n\ngoal (2 subgoals):\n 1. symp aeseq_eq\n 2. transp aeseq_eq", "show \"symp aeseq_eq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp aeseq_eq", "by(simp add: symp_def aeseq_eq.simps eq_commute)"], ["proof (state)\nthis:\n  symp aeseq_eq\n\ngoal (1 subgoal):\n 1. transp aeseq_eq", "have \"finite {n. f n \\<noteq> h n}\" if \"finite {n. f n \\<noteq> g n}\" \"finite {n. g n \\<noteq> h n}\"\n    for f g h :: \"nat \\<Rightarrow> 'b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {n. f n \\<noteq> h n}", "using finite_subset[of \"{n. f n \\<noteq> h n}\" \"{n. f n \\<noteq> g n} \\<union> {n. g n \\<noteq> h n}\"] that"], ["proof (prove)\nusing this:\n  \\<lbrakk>{n. f n \\<noteq> h n}\n           \\<subseteq> {n. f n \\<noteq> g n} \\<union> {n. g n \\<noteq> h n};\n   finite ({n. f n \\<noteq> g n} \\<union> {n. g n \\<noteq> h n})\\<rbrakk>\n  \\<Longrightarrow> finite {n. f n \\<noteq> h n}\n  finite {n. f n \\<noteq> g n}\n  finite {n. g n \\<noteq> h n}\n\ngoal (1 subgoal):\n 1. finite {n. f n \\<noteq> h n}", "by(fastforce intro: finite_subset)"], ["proof (state)\nthis:\n  \\<lbrakk>finite {n. ?f3 n \\<noteq> ?g3 n};\n   finite {n. ?g3 n \\<noteq> ?h3 n}\\<rbrakk>\n  \\<Longrightarrow> finite {n. ?f3 n \\<noteq> ?h3 n}\n\ngoal (1 subgoal):\n 1. transp aeseq_eq", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>finite {n. ?f3 n \\<noteq> ?g3 n};\n   finite {n. ?g3 n \\<noteq> ?h3 n}\\<rbrakk>\n  \\<Longrightarrow> finite {n. ?f3 n \\<noteq> ?h3 n}", "show \"transp aeseq_eq\""], ["proof (prove)\nusing this:\n  \\<lbrakk>finite {n. ?f3 n \\<noteq> ?g3 n};\n   finite {n. ?g3 n \\<noteq> ?h3 n}\\<rbrakk>\n  \\<Longrightarrow> finite {n. ?f3 n \\<noteq> ?h3 n}\n\ngoal (1 subgoal):\n 1. transp aeseq_eq", "by(auto simp add: transp_def aeseq_eq.simps)"], ["proof (state)\nthis:\n  transp aeseq_eq\n\ngoal:\nNo subgoals!", "qed"], ["", "quotient_type 'a aeseq = \"nat \\<Rightarrow> 'a\" / aeseq_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp aeseq_eq", "by(rule equivp_aeseq_eq)"], ["", "lift_definition map_aeseq :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> 'a aeseq \\<Rightarrow> 'b aeseq\" is \"(\\<circ>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2 fun3.\n       aeseq_eq fun2 fun3 \\<Longrightarrow>\n       aeseq_eq (fun1 \\<circ> fun2) (fun1 \\<circ> fun3)", "by(auto simp add: aeseq_eq.simps elim: finite_subset[rotated])"], ["", "lemma map_aeseq_id: \"map_aeseq id x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_aeseq id x = x", "by transfer(simp add: equivp_reflp[OF equivp_aeseq_eq])"], ["", "lemma map_aeseq_comp: \"map_aeseq f (map_aeseq g x) = map_aeseq (f \\<circ> g) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_aeseq f (map_aeseq g x) = map_aeseq (f \\<circ> g) x", "by transfer(simp add: o_assoc equivp_reflp[OF equivp_aeseq_eq])"], ["", "lift_definition rel_aeseq :: \"('a \\<Rightarrow> 'b \\<Rightarrow> bool) \\<Rightarrow> 'a aeseq \\<Rightarrow> 'b aeseq \\<Rightarrow> bool\" is\n  \"\\<lambda>R f g. finite {n. \\<not> R (f n) (g n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2 fun3 fun4 fun5.\n       \\<lbrakk>aeseq_eq fun2 fun3; aeseq_eq fun4 fun5\\<rbrakk>\n       \\<Longrightarrow> finite {n. \\<not> fun1 (fun2 n) (fun4 n)} =\n                         finite {n. \\<not> fun1 (fun3 n) (fun5 n)}", "proof(unfold aeseq_eq.simps)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2 fun3 fun4 fun5.\n       \\<lbrakk>finite {n. fun2 n \\<noteq> fun3 n};\n        finite {n. fun4 n \\<noteq> fun5 n}\\<rbrakk>\n       \\<Longrightarrow> finite {n. \\<not> fun1 (fun2 n) (fun4 n)} =\n                         finite {n. \\<not> fun1 (fun3 n) (fun5 n)}", "show \"finite {n. \\<not> R (f n) (g n)} \\<longleftrightarrow> finite {n. \\<not> R (f' n) (g' n)}\"\n    if ff': \"finite {n. f n \\<noteq> f' n}\" and gg': \"finite {n. g n \\<noteq> g' n}\"\n    for R and f f' :: \"nat \\<Rightarrow> 'a\" and g g' :: \"nat \\<Rightarrow> 'b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {n. \\<not> R (f n) (g n)} = finite {n. \\<not> R (f' n) (g' n)}", "proof(rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {n. \\<not> R (f n) (g n)} \\<Longrightarrow>\n    finite {n. \\<not> R (f' n) (g' n)}\n 2. finite {n. \\<not> R (f' n) (g' n)} \\<Longrightarrow>\n    finite {n. \\<not> R (f n) (g n)}", "assume \"finite {n. \\<not> R (f n) (g n)}\""], ["proof (state)\nthis:\n  finite {n. \\<not> R (f n) (g n)}\n\ngoal (2 subgoals):\n 1. finite {n. \\<not> R (f n) (g n)} \\<Longrightarrow>\n    finite {n. \\<not> R (f' n) (g' n)}\n 2. finite {n. \\<not> R (f' n) (g' n)} \\<Longrightarrow>\n    finite {n. \\<not> R (f n) (g n)}", "with ff' gg'"], ["proof (chain)\npicking this:\n  finite {n. f n \\<noteq> f' n}\n  finite {n. g n \\<noteq> g' n}\n  finite {n. \\<not> R (f n) (g n)}", "have \"finite ({n. \\<not> R (f n) (g n)} \\<union> {n. f n \\<noteq> f' n} \\<union> {n. g n \\<noteq> g' n})\""], ["proof (prove)\nusing this:\n  finite {n. f n \\<noteq> f' n}\n  finite {n. g n \\<noteq> g' n}\n  finite {n. \\<not> R (f n) (g n)}\n\ngoal (1 subgoal):\n 1. finite\n     ({n. \\<not> R (f n) (g n)} \\<union> {n. f n \\<noteq> f' n} \\<union>\n      {n. g n \\<noteq> g' n})", "by simp"], ["proof (state)\nthis:\n  finite\n   ({n. \\<not> R (f n) (g n)} \\<union> {n. f n \\<noteq> f' n} \\<union>\n    {n. g n \\<noteq> g' n})\n\ngoal (2 subgoals):\n 1. finite {n. \\<not> R (f n) (g n)} \\<Longrightarrow>\n    finite {n. \\<not> R (f' n) (g' n)}\n 2. finite {n. \\<not> R (f' n) (g' n)} \\<Longrightarrow>\n    finite {n. \\<not> R (f n) (g n)}", "then"], ["proof (chain)\npicking this:\n  finite\n   ({n. \\<not> R (f n) (g n)} \\<union> {n. f n \\<noteq> f' n} \\<union>\n    {n. g n \\<noteq> g' n})", "show \"finite {n. \\<not> R (f' n) (g' n)}\""], ["proof (prove)\nusing this:\n  finite\n   ({n. \\<not> R (f n) (g n)} \\<union> {n. f n \\<noteq> f' n} \\<union>\n    {n. g n \\<noteq> g' n})\n\ngoal (1 subgoal):\n 1. finite {n. \\<not> R (f' n) (g' n)}", "by(rule finite_subset[rotated]) auto"], ["proof (state)\nthis:\n  finite {n. \\<not> R (f' n) (g' n)}\n\ngoal (1 subgoal):\n 1. finite {n. \\<not> R (f' n) (g' n)} \\<Longrightarrow>\n    finite {n. \\<not> R (f n) (g n)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {n. \\<not> R (f' n) (g' n)} \\<Longrightarrow>\n    finite {n. \\<not> R (f n) (g n)}", "assume \"finite {n. \\<not> R (f' n) (g' n)}\""], ["proof (state)\nthis:\n  finite {n. \\<not> R (f' n) (g' n)}\n\ngoal (1 subgoal):\n 1. finite {n. \\<not> R (f' n) (g' n)} \\<Longrightarrow>\n    finite {n. \\<not> R (f n) (g n)}", "with ff' gg'"], ["proof (chain)\npicking this:\n  finite {n. f n \\<noteq> f' n}\n  finite {n. g n \\<noteq> g' n}\n  finite {n. \\<not> R (f' n) (g' n)}", "have \"finite ({n. \\<not> R (f' n) (g' n)} \\<union> {n. f n \\<noteq> f' n} \\<union> {n. g n \\<noteq> g' n})\""], ["proof (prove)\nusing this:\n  finite {n. f n \\<noteq> f' n}\n  finite {n. g n \\<noteq> g' n}\n  finite {n. \\<not> R (f' n) (g' n)}\n\ngoal (1 subgoal):\n 1. finite\n     ({n. \\<not> R (f' n) (g' n)} \\<union> {n. f n \\<noteq> f' n} \\<union>\n      {n. g n \\<noteq> g' n})", "by simp"], ["proof (state)\nthis:\n  finite\n   ({n. \\<not> R (f' n) (g' n)} \\<union> {n. f n \\<noteq> f' n} \\<union>\n    {n. g n \\<noteq> g' n})\n\ngoal (1 subgoal):\n 1. finite {n. \\<not> R (f' n) (g' n)} \\<Longrightarrow>\n    finite {n. \\<not> R (f n) (g n)}", "then"], ["proof (chain)\npicking this:\n  finite\n   ({n. \\<not> R (f' n) (g' n)} \\<union> {n. f n \\<noteq> f' n} \\<union>\n    {n. g n \\<noteq> g' n})", "show \"finite {n. \\<not> R (f n) (g n)}\""], ["proof (prove)\nusing this:\n  finite\n   ({n. \\<not> R (f' n) (g' n)} \\<union> {n. f n \\<noteq> f' n} \\<union>\n    {n. g n \\<noteq> g' n})\n\ngoal (1 subgoal):\n 1. finite {n. \\<not> R (f n) (g n)}", "by(rule finite_subset[rotated]) auto"], ["proof (state)\nthis:\n  finite {n. \\<not> R (f n) (g n)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>finite {n. ?f n \\<noteq> ?f' n};\n   finite {n. ?g n \\<noteq> ?g' n}\\<rbrakk>\n  \\<Longrightarrow> finite {n. \\<not> ?R (?f n) (?g n)} =\n                    finite {n. \\<not> ?R (?f' n) (?g' n)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rel_aeseq_mono: \"R \\<le> S \\<Longrightarrow> rel_aeseq R \\<le> rel_aeseq S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<le> S \\<Longrightarrow> rel_aeseq R \\<le> rel_aeseq S", "by(rule predicate2I; transfer; auto intro: finite_subset[rotated])"], ["", "lemma rel_aeseq_eq: \"rel_aeseq (=) = (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_aeseq (=) = (=)", "by(intro ext; transfer; simp add: aeseq_eq.simps)"], ["", "lemma rel_aeseq_conversep: \"rel_aeseq R\\<inverse>\\<inverse> = (rel_aeseq R)\\<inverse>\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_aeseq R\\<inverse>\\<inverse> = (rel_aeseq R)\\<inverse>\\<inverse>", "by(simp add: fun_eq_iff; transfer; simp)"], ["", "lemma map_aeseq_parametric: includes lifting_syntax shows\n  \"((A ===> B) ===> rel_aeseq A ===> rel_aeseq B) map_aeseq map_aeseq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> B) ===> rel_aeseq A ===> rel_aeseq B) map_aeseq map_aeseq", "by(intro rel_funI; transfer; auto elim: finite_subset[rotated] dest: rel_funD)"], ["", "lemma rel_aeseq_distr: \"rel_aeseq (R OO S) = rel_aeseq R OO rel_aeseq S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_aeseq (R OO S) = rel_aeseq R OO rel_aeseq S", "apply(intro ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa. rel_aeseq (R OO S) x xa = (rel_aeseq R OO rel_aeseq S) x xa", "apply(transfer fixing: R S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       finite {n. \\<not> (R OO S) (x n) (xa n)} =\n       ((\\<lambda>f g. finite {n. \\<not> R (f n) (g n)}) OO\n        (\\<lambda>f g. finite {n. \\<not> S (f n) (g n)}))\n        x xa", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       finite {n. \\<not> (R OO S) (x n) (xa n)} \\<Longrightarrow>\n       ((\\<lambda>f g. finite {n. \\<not> R (f n) (g n)}) OO\n        (\\<lambda>f g. finite {n. \\<not> S (f n) (g n)}))\n        x xa\n 2. \\<And>x xa b.\n       \\<lbrakk>finite {n. \\<not> R (x n) (b n)};\n        finite {n. \\<not> S (b n) (xa n)}\\<rbrakk>\n       \\<Longrightarrow> finite {n. \\<not> (R OO S) (x n) (xa n)}", "subgoal for f h"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {n. \\<not> (R OO S) (f n) (h n)} \\<Longrightarrow>\n    ((\\<lambda>f g. finite {n. \\<not> R (f n) (g n)}) OO\n     (\\<lambda>f g. finite {n. \\<not> S (f n) (g n)}))\n     f h", "apply(rule relcomppI[where b=\"\\<lambda>n. SOME z. R (f n) z \\<and> S z (h n)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite {n. \\<not> (R OO S) (f n) (h n)} \\<Longrightarrow>\n    finite {n. \\<not> R (f n) (SOME z. R (f n) z \\<and> S z (h n))}\n 2. finite {n. \\<not> (R OO S) (f n) (h n)} \\<Longrightarrow>\n    finite {n. \\<not> S (SOME z. R (f n) z \\<and> S z (h n)) (h n)}", "apply(auto elim!: finite_subset[rotated] intro: someI2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa b.\n       \\<lbrakk>finite {n. \\<not> R (x n) (b n)};\n        finite {n. \\<not> S (b n) (xa n)}\\<rbrakk>\n       \\<Longrightarrow> finite {n. \\<not> (R OO S) (x n) (xa n)}", "subgoal for f h g"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {n. \\<not> R (f n) (g n)};\n     finite {n. \\<not> S (g n) (h n)}\\<rbrakk>\n    \\<Longrightarrow> finite {n. \\<not> (R OO S) (f n) (h n)}", "apply(rule finite_subset[where B=\"{n. \\<not> R (f n) (g n)} \\<union> {n. \\<not> S (g n) (h n)}\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite {n. \\<not> R (f n) (g n)};\n     finite {n. \\<not> S (g n) (h n)}\\<rbrakk>\n    \\<Longrightarrow> {n. \\<not> (R OO S) (f n) (h n)}\n                      \\<subseteq> {n. \\<not> R (f n) (g n)} \\<union>\n                                  {n. \\<not> S (g n) (h n)}\n 2. \\<lbrakk>finite {n. \\<not> R (f n) (g n)};\n     finite {n. \\<not> S (g n) (h n)}\\<rbrakk>\n    \\<Longrightarrow> finite\n                       ({n. \\<not> R (f n) (g n)} \\<union>\n                        {n. \\<not> S (g n) (h n)})", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}