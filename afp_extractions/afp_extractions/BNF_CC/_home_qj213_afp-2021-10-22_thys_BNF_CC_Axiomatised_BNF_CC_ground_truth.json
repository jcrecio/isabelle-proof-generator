{"file_name": "/home/qj213/afp-2021-10-22/thys/BNF_CC/Axiomatised_BNF_CC.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BNF_CC", "problem_names": ["lemmas rel_F_mono' = rel_F_mono[THEN predicate2D, rotated -1]", "lemma rel_F_eq_refl: \"rel_F (=) (=) (=) (=) (=) (=) (=) (=) (=) x x\"", "lemma map_F_id: \"map_F id id id id id id id id id x = x\"", "lemmas map_F_rel_cong = map_F_parametric[unfolded rel_fun_def, rule_format, rotated -1]", "lemma rell_F_mono: \"\\<lbrakk> L1 \\<le> L1'; L2 \\<le> L2'; L3 \\<le> L3' \\<rbrakk> \\<Longrightarrow> rell_F L1 L2 L3 \\<le> rell_F L1' L2' L3'\"", "lemma mapl_F_id0: \"mapl_F id id id = id\"", "lemma mapl_F_id: \"mapl_F id id id x = x\"", "lemma mapl_F_comp: \"mapl_F l1 l2 l3 \\<circ> mapl_F l1' l2' l3' = mapl_F (l1 \\<circ> l1') (l2 \\<circ> l2') (l3 \\<circ> l3')\"", "lemma map_F_mapl_F: \"map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x =\n  map_F id id id co1 co2 co3 contra1 contra2 contra3 (mapl_F l1 l2 l3 x)\"", "lemma mapl_F_map_F: \"mapl_F l1 l2 l3 (map_F id id id co1 co2 co3 contra1 contra2 contra3 x) =\n  map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x\"", "lemma rel_F_Grp_weak: \"rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3)\n    (Grp UNIV co1) (Grp UNIV co2) (Grp UNIV co3)\n    (Grp UNIV contra1)\\<inverse>\\<inverse> (Grp UNIV contra2)\\<inverse>\\<inverse> (Grp UNIV contra3)\\<inverse>\\<inverse> =\n  Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3)\"", "lemmas\n  rel_F_pos_distr = rel_F_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_F_neg_distr = rel_F_neg_distr_cond_def[THEN iffD1, rule_format]", "lemma rell_F_compp:\n  \"rell_F (L1 OO L1') (L2 OO L2') (L3 OO L3') = rell_F L1 L2 L3 OO rell_F L1' L2' L3'\"", "lemma rell_F_eq_onp: \"rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) =\n  eq_onp (\\<lambda>x. (\\<forall>z\\<in>set1_F x. P1 z) \\<and> (\\<forall>z\\<in>set2_F x. P2 z) \\<and> (\\<forall>z\\<in>set3_F x. P3 z))\"\n  (is \"?rel_eq_onp = ?eq_onp_pred\")", "lemma rell_F_Grp: \"rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n  Grp {x. set1_F x \\<subseteq> A1 \\<and> set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3} (mapl_F f1 f2 f3)\"", "lemma rell_F_compp_Grp: \"rell_F L1 L2 L3 =\n  (Grp {x. set1_F x \\<subseteq> {(x, y). L1 x y} \\<and> set2_F x \\<subseteq> {(x, y). L2 x y} \\<and> set3_F x \\<subseteq> {(x, y). L3 x y}}\n    (mapl_F fst fst fst))\\<inverse>\\<inverse> OO\n  Grp {x. set1_F x \\<subseteq> {(x, y). L1 x y} \\<and> set2_F x \\<subseteq> {(x, y). L2 x y} \\<and> set3_F x \\<subseteq> {(x, y). L3 x y}}\n    (mapl_F snd snd snd)\"", "lemma F_in_rell: \"rell_F L1 L2 L3 = (\\<lambda>x y. \\<exists>z. (set1_F z \\<subseteq> {(x, y). L1 x y} \\<and>\n  set2_F z \\<subseteq> {(x, y). L2 x y} \\<and> set3_F z \\<subseteq> {(x, y). L3 x y}) \\<and>\n  mapl_F fst fst fst z = x \\<and> mapl_F snd snd snd z = y)\"", "lemmas rel_G_mono' = rel_G_mono[THEN predicate2D, rotated -1]", "lemma rel_G_eq_refl: \"rel_G (=) (=) (=) (=) (=) (=) x x\"", "lemma map_G_id: \"map_G id id id id id id x = x\"", "lemmas map_G_rel_cong = map_G_parametric[unfolded rel_fun_def, rule_format, rotated -1]", "lemma rell_G_mono: \"\\<lbrakk> L1 \\<le> L1'; L2 \\<le> L2' \\<rbrakk> \\<Longrightarrow> rell_G L1 L2 \\<le> rell_G L1' L2'\"", "lemma mapl_G_id0: \"mapl_G id id = id\"", "lemma mapl_G_id: \"mapl_G id id x = x\"", "lemma mapl_G_comp: \"mapl_G l1 l2 \\<circ> mapl_G l1' l2' = mapl_G (l1 \\<circ> l1') (l2 \\<circ> l2')\"", "lemma map_G_mapl_G:\n  \"map_G l1 l2 co1 co2 contra1 contra2 x = map_G id id co1 co2 contra1 contra2 (mapl_G l1 l2 x)\"", "lemma mapl_G_map_G:\n  \"mapl_G l1 l2 (map_G id id co1 co2 contra1 contra2 x) = map_G l1 l2 co1 co2 contra1 contra2 x\"", "lemma rel_G_Grp_weak: \"rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n  (Grp UNIV contra1)\\<inverse>\\<inverse> (Grp UNIV contra2)\\<inverse>\\<inverse> = Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2)\"", "lemmas\n  rel_G_pos_distr = rel_G_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_G_neg_distr = rel_G_neg_distr_cond_def[THEN iffD1, rule_format]", "lemma rell_G_compp:\n  \"rell_G (L1 OO L1') (L2 OO L2') = rell_G L1 L2 OO rell_G L1' L2'\"", "lemma rell_G_eq_onp:\n  \"rell_G (eq_onp P1) (eq_onp P2) = eq_onp (\\<lambda>x. (\\<forall>z\\<in>set1_G x. P1 z) \\<and> (\\<forall>z\\<in>set2_G x. P2 z))\"\n  (is \"?rel_eq_onp = ?eq_onp_pred\")", "lemma rell_G_Grp:\n  \"rell_G (Grp A1 f1) (Grp A2 f2) = Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2} (mapl_G f1 f2)\"", "lemma rell_G_compp_Grp: \"rell_G L1 L2 =\n  (Grp {x. set1_G x \\<subseteq> {(x, y). L1 x y} \\<and> set2_G x \\<subseteq> {(x, y). L2 x y}} (mapl_G fst fst))\\<inverse>\\<inverse> OO\n  Grp {x. set1_G x \\<subseteq> {(x, y). L1 x y} \\<and> set2_G x \\<subseteq> {(x, y). L2 x y}} (mapl_G snd snd)\"", "lemma G_in_rell: \"rell_G L1 L2 = (\\<lambda>x y. \\<exists>z. (set1_G z \\<subseteq> {(x, y). L1 x y} \\<and>\n  set2_G z \\<subseteq> {(x, y). L2 x y}) \\<and> mapl_G fst fst z = x \\<and> mapl_G snd snd z = y)\""], "translations": [["", "lemmas rel_F_mono' = rel_F_mono[THEN predicate2D, rotated -1]"], ["", "lemma rel_F_eq_refl: \"rel_F (=) (=) (=) (=) (=) (=) (=) (=) (=) x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_F (=) (=) (=) (=) (=) (=) (=) (=) (=) x x", "by (simp add: rel_F_eq)"], ["", "lemma map_F_id: \"map_F id id id id id id id id id x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_F id id id id id id id id id x = x", "by (simp add: map_F_id0)"], ["", "lemmas map_F_rel_cong = map_F_parametric[unfolded rel_fun_def, rule_format, rotated -1]"], ["", "lemma rell_F_mono: \"\\<lbrakk> L1 \\<le> L1'; L2 \\<le> L2'; L3 \\<le> L3' \\<rbrakk> \\<Longrightarrow> rell_F L1 L2 L3 \\<le> rell_F L1' L2' L3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>L1 \\<le> L1'; L2 \\<le> L2'; L3 \\<le> L3'\\<rbrakk>\n    \\<Longrightarrow> rell_F L1 L2 L3 \\<le> rell_F L1' L2' L3'", "unfolding rell_F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>L1 \\<le> L1'; L2 \\<le> L2'; L3 \\<le> L3'\\<rbrakk>\n    \\<Longrightarrow> rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=)\n                      \\<le> rel_F L1' L2' L3' (=) (=) (=) (=) (=) (=)", "by (rule rel_F_mono) (auto)"], ["", "lemma mapl_F_id0: \"mapl_F id id id = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapl_F id id id = id", "unfolding mapl_F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_F id id id id id id id id id = id", "using map_F_id0"], ["proof (prove)\nusing this:\n  map_F id id id id id id id id id = id\n\ngoal (1 subgoal):\n 1. map_F id id id id id id id id id = id", "."], ["", "lemma mapl_F_id: \"mapl_F id id id x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapl_F id id id x = x", "by (simp add: mapl_F_id0)"], ["", "lemma mapl_F_comp: \"mapl_F l1 l2 l3 \\<circ> mapl_F l1' l2' l3' = mapl_F (l1 \\<circ> l1') (l2 \\<circ> l2') (l3 \\<circ> l3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapl_F l1 l2 l3 \\<circ> mapl_F l1' l2' l3' =\n    mapl_F (l1 \\<circ> l1') (l2 \\<circ> l2') (l3 \\<circ> l3')", "unfolding mapl_F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_F l1 l2 l3 id id id id id id \\<circ>\n    map_F l1' l2' l3' id id id id id id =\n    map_F (l1 \\<circ> l1') (l2 \\<circ> l2') (l3 \\<circ> l3') id id id id id\n     id", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. map_F l1 l2 l3 id id id id id id \\<circ>\n    map_F l1' l2' l3' id id id id id id =\n    ?s\n 2. ?s =\n    map_F (l1 \\<circ> l1') (l2 \\<circ> l2') (l3 \\<circ> l3') id id id id id\n     id", "apply (rule map_F_comp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_F (l1 \\<circ> l1') (l2 \\<circ> l2') (l3 \\<circ> l3') (id \\<circ> id)\n     (id \\<circ> id) (id \\<circ> id) (id \\<circ> id) (id \\<circ> id)\n     (id \\<circ> id) =\n    map_F (l1 \\<circ> l1') (l2 \\<circ> l2') (l3 \\<circ> l3') id id id id id\n     id", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_F_mapl_F: \"map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x =\n  map_F id id id co1 co2 co3 contra1 contra2 contra3 (mapl_F l1 l2 l3 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x =\n    map_F id id id co1 co2 co3 contra1 contra2 contra3 (mapl_F l1 l2 l3 x)", "unfolding mapl_F_def map_F_comp[THEN fun_cong, simplified]"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x =\n    map_F (id \\<circ> l1) (id \\<circ> l2) (id \\<circ> l3) (co1 \\<circ> id)\n     (co2 \\<circ> id) (co3 \\<circ> id) (id \\<circ> contra1)\n     (id \\<circ> contra2) (id \\<circ> contra3) x", "by simp"], ["", "lemma mapl_F_map_F: \"mapl_F l1 l2 l3 (map_F id id id co1 co2 co3 contra1 contra2 contra3 x) =\n  map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapl_F l1 l2 l3 (map_F id id id co1 co2 co3 contra1 contra2 contra3 x) =\n    map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x", "unfolding mapl_F_def map_F_comp[THEN fun_cong, simplified]"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_F (l1 \\<circ> id) (l2 \\<circ> id) (l3 \\<circ> id) (id \\<circ> co1)\n     (id \\<circ> co2) (id \\<circ> co3) (contra1 \\<circ> id)\n     (contra2 \\<circ> id) (contra3 \\<circ> id) x =\n    map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x", "by simp"], ["", "text \\<open>Parametric mappers are unique:\\<close>"], ["", "lemma rel_F_Grp_weak: \"rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3)\n    (Grp UNIV co1) (Grp UNIV co2) (Grp UNIV co3)\n    (Grp UNIV contra1)\\<inverse>\\<inverse> (Grp UNIV contra2)\\<inverse>\\<inverse> (Grp UNIV contra3)\\<inverse>\\<inverse> =\n  Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n     (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n     (Grp UNIV contra2)\\<inverse>\\<inverse>\n     (Grp UNIV contra3)\\<inverse>\\<inverse> =\n    Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3)", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n     (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n     (Grp UNIV contra2)\\<inverse>\\<inverse>\n     (Grp UNIV contra3)\\<inverse>\\<inverse>\n    \\<le> Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3)\n 2. Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3)\n    \\<le> rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n           (Grp UNIV co2) (Grp UNIV co3)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>\n           (Grp UNIV contra3)\\<inverse>\\<inverse>", "apply (rule predicate2I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n        (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse>\n        (Grp UNIV contra3)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3) x y\n 2. Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3)\n    \\<le> rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n           (Grp UNIV co2) (Grp UNIV co3)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>\n           (Grp UNIV contra3)\\<inverse>\\<inverse>", "apply (rule GrpI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n        (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse>\n        (Grp UNIV contra3)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x = y\n 2. \\<And>x y.\n       rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n        (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse>\n        (Grp UNIV contra3)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       x \\<in> UNIV\n 3. Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3)\n    \\<le> rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n           (Grp UNIV co2) (Grp UNIV co3)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>\n           (Grp UNIV contra3)\\<inverse>\\<inverse>", "apply (rewrite in \"_ = \\<hole>\" map_F_id[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n        (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse>\n        (Grp UNIV contra3)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x =\n       map_F id id id id id id id id id y\n 2. \\<And>x y.\n       rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n        (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse>\n        (Grp UNIV contra3)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       x \\<in> UNIV\n 3. Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3)\n    \\<le> rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n           (Grp UNIV co2) (Grp UNIV co3)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>\n           (Grp UNIV contra3)\\<inverse>\\<inverse>", "apply (subst rel_F_eq[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n        (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse>\n        (Grp UNIV contra3)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       rel_F (=) (=) (=) (=) (=) (=) (=) (=) (=)\n        (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x)\n        (map_F id id id id id id id id id y)\n 2. \\<And>x y.\n       rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n        (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse>\n        (Grp UNIV contra3)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       x \\<in> UNIV\n 3. Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3)\n    \\<le> rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n           (Grp UNIV co2) (Grp UNIV co3)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>\n           (Grp UNIV contra3)\\<inverse>\\<inverse>", "apply (erule map_F_rel_cong; simp add: Grp_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n        (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse>\n        (Grp UNIV contra3)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       x \\<in> UNIV\n 2. Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3)\n    \\<le> rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n           (Grp UNIV co2) (Grp UNIV co3)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>\n           (Grp UNIV contra3)\\<inverse>\\<inverse>", "apply (rule UNIV_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3)\n    \\<le> rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n           (Grp UNIV co2) (Grp UNIV co3)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>\n           (Grp UNIV contra3)\\<inverse>\\<inverse>", "apply (rule predicate2I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       Grp UNIV (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3) x\n        y \\<Longrightarrow>\n       rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n        (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse>\n        (Grp UNIV contra3)\\<inverse>\\<inverse> x y", "apply (erule GrpE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x = y;\n        x \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3)\n                          (Grp UNIV co1) (Grp UNIV co2) (Grp UNIV co3)\n                          (Grp UNIV contra1)\\<inverse>\\<inverse>\n                          (Grp UNIV contra2)\\<inverse>\\<inverse>\n                          (Grp UNIV contra3)\\<inverse>\\<inverse> x y", "apply (drule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV;\n        y = map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x\\<rbrakk>\n       \\<Longrightarrow> rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3)\n                          (Grp UNIV co1) (Grp UNIV co2) (Grp UNIV co3)\n                          (Grp UNIV contra1)\\<inverse>\\<inverse>\n                          (Grp UNIV contra2)\\<inverse>\\<inverse>\n                          (Grp UNIV contra3)\\<inverse>\\<inverse> x y", "apply (hypsubst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<in> UNIV \\<Longrightarrow>\n       rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n        (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse>\n        (Grp UNIV contra3)\\<inverse>\\<inverse> x\n        (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x)", "apply (rewrite in \"rel_F _ _ _ _ _ _ _ _ _ \\<hole>\" map_F_id[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<in> UNIV \\<Longrightarrow>\n       rel_F (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV l3) (Grp UNIV co1)\n        (Grp UNIV co2) (Grp UNIV co3) (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse>\n        (Grp UNIV contra3)\\<inverse>\\<inverse>\n        (map_F id id id id id id id id id x)\n        (map_F l1 l2 l3 co1 co2 co3 contra1 contra2 contra3 x)", "apply (rule map_F_rel_cong)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x y.\n       x \\<in> UNIV \\<Longrightarrow>\n       rel_F (?L1.123 x y) (?L2.123 x y) (?L3.123 x y) (?Co1.123 x y)\n        (?Co2.123 x y) (?Co3.123 x y) (?Contra1.123 x y) (?Contra2.123 x y)\n        (?Contra3.123 x y) x x\n 2. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; ?L1.123 x y xa ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV l1 (id xa) (l1 ya)\n 3. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; ?L2.123 x y xa ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV l2 (id xa) (l2 ya)\n 4. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; ?L3.123 x y xa ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV l3 (id xa) (l3 ya)\n 5. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; ?Co1.123 x y xa ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV co1 (id xa) (co1 ya)\n 6. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; ?Co2.123 x y xa ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV co2 (id xa) (co2 ya)\n 7. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; ?Co3.123 x y xa ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV co3 (id xa) (co3 ya)\n 8. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV;\n        (Grp UNIV contra1)\\<inverse>\\<inverse> xa ya\\<rbrakk>\n       \\<Longrightarrow> ?Contra1.123 x y (id xa) (contra1 ya)\n 9. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV;\n        (Grp UNIV contra2)\\<inverse>\\<inverse> xa ya\\<rbrakk>\n       \\<Longrightarrow> ?Contra2.123 x y (id xa) (contra2 ya)\n 10. \\<And>x y xa ya.\n        \\<lbrakk>x \\<in> UNIV;\n         (Grp UNIV contra3)\\<inverse>\\<inverse> xa ya\\<rbrakk>\n        \\<Longrightarrow> ?Contra3.123 x y (id xa) (contra3 ya)", "apply (rule rel_F_eq_refl)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; xa = ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV l1 (id xa) (l1 ya)\n 2. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; xa = ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV l2 (id xa) (l2 ya)\n 3. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; xa = ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV l3 (id xa) (l3 ya)\n 4. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; xa = ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV co1 (id xa) (co1 ya)\n 5. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; xa = ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV co2 (id xa) (co2 ya)\n 6. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; xa = ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV co3 (id xa) (co3 ya)\n 7. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV;\n        (Grp UNIV contra1)\\<inverse>\\<inverse> xa ya\\<rbrakk>\n       \\<Longrightarrow> id xa = contra1 ya\n 8. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV;\n        (Grp UNIV contra2)\\<inverse>\\<inverse> xa ya\\<rbrakk>\n       \\<Longrightarrow> id xa = contra2 ya\n 9. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV;\n        (Grp UNIV contra3)\\<inverse>\\<inverse> xa ya\\<rbrakk>\n       \\<Longrightarrow> id xa = contra3 ya", "apply (simp_all add: Grp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas\n  rel_F_pos_distr = rel_F_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_F_neg_distr = rel_F_neg_distr_cond_def[THEN iffD1, rule_format]"], ["", "lemma rell_F_compp:\n  \"rell_F (L1 OO L1') (L2 OO L2') (L3 OO L3') = rell_F L1 L2 L3 OO rell_F L1' L2' L3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_F (L1 OO L1') (L2 OO L2') (L3 OO L3') =\n    rell_F L1 L2 L3 OO rell_F L1' L2' L3'", "unfolding rell_F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=) =\n    rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=) OO\n    rel_F L1' L2' L3' (=) (=) (=) (=) (=) (=)", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)\n    \\<le> rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=) OO\n          rel_F L1' L2' L3' (=) (=) (=) (=) (=) (=)\n 2. rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=) OO\n    rel_F L1' L2' L3' (=) (=) (=) (=) (=) (=)\n    \\<le> rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)", "apply (rule order_trans[rotated])"], ["proof (prove)\ngoal (3 subgoals):\n 1. ?y3\n    \\<le> rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=) OO\n          rel_F L1' L2' L3' (=) (=) (=) (=) (=) (=)\n 2. rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)\n    \\<le> ?y3\n 3. rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=) OO\n    rel_F L1' L2' L3' (=) (=) (=) (=) (=) (=)\n    \\<le> rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)", "apply (rule rel_F_neg_distr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. rel_F_neg_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) (=) (=) (=) (=)\n     ?uu6\n 2. rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)\n    \\<le> rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') ((=) OO (=))\n           ((=) OO (=)) ((=) OO (=)) ((=) OO (=)) ((=) OO (=)) ((=) OO (=))\n 3. rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=) OO\n    rel_F L1' L2' L3' (=) (=) (=) (=) (=) (=)\n    \\<le> rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)", "apply (rule rel_F_neg_distr_cond_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)\n    \\<le> rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') ((=) OO (=))\n           ((=) OO (=)) ((=) OO (=)) ((=) OO (=)) ((=) OO (=)) ((=) OO (=))\n 2. rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=) OO\n    rel_F L1' L2' L3' (=) (=) (=) (=) (=) (=)\n    \\<le> rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)", "apply (simp add: eq_OO)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=) OO\n    rel_F L1' L2' L3' (=) (=) (=) (=) (=) (=)\n    \\<le> rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)", "apply (rule order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=) OO\n    rel_F L1' L2' L3' (=) (=) (=) (=) (=) (=)\n    \\<le> ?y9\n 2. ?y9\n    \\<le> rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)", "apply (rule rel_F_pos_distr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_F_pos_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) (=) (=) (=) (=)\n     ?uu12\n 2. rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') ((=) OO (=)) ((=) OO (=))\n     ((=) OO (=)) ((=) OO (=)) ((=) OO (=)) ((=) OO (=))\n    \\<le> rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)", "apply (rule rel_F_pos_distr_cond_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') ((=) OO (=)) ((=) OO (=))\n     ((=) OO (=)) ((=) OO (=)) ((=) OO (=)) ((=) OO (=))\n    \\<le> rel_F (L1 OO L1') (L2 OO L2') (L3 OO L3') (=) (=) (=) (=) (=) (=)", "apply (simp add: eq_OO)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>F is a BNF\\<close>"], ["", "lemma rell_F_eq_onp: \"rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) =\n  eq_onp (\\<lambda>x. (\\<forall>z\\<in>set1_F x. P1 z) \\<and> (\\<forall>z\\<in>set2_F x. P2 z) \\<and> (\\<forall>z\\<in>set3_F x. P3 z))\"\n  (is \"?rel_eq_onp = ?eq_onp_pred\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) =\n    eq_onp\n     (\\<lambda>x.\n         (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n         (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n         (\\<forall>z\\<in>set3_F x. P3 z))", "proof (intro ext iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "fix x y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "assume rel: \"?rel_eq_onp x y\""], ["proof (state)\nthis:\n  rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x y\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "from rel"], ["proof (chain)\npicking this:\n  rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x y", "have \"rell_F (=) (=) (=) x y\""], ["proof (prove)\nusing this:\n  rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x y\n\ngoal (1 subgoal):\n 1. rell_F (=) (=) (=) x y", "unfolding rell_F_def"], ["proof (prove)\nusing this:\n  rel_F (eq_onp P1) (eq_onp P2) (eq_onp P3) (=) (=) (=) (=) (=) (=) x y\n\ngoal (1 subgoal):\n 1. rel_F (=) (=) (=) (=) (=) (=) (=) (=) (=) x y", "by (auto elim: rel_F_mono' simp add: eq_onp_def)"], ["proof (state)\nthis:\n  rell_F (=) (=) (=) x y\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "then"], ["proof (chain)\npicking this:\n  rell_F (=) (=) (=) x y", "have \"y = x\""], ["proof (prove)\nusing this:\n  rell_F (=) (=) (=) x y\n\ngoal (1 subgoal):\n 1. y = x", "unfolding rell_F_def rel_F_eq"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. y = x", ".."], ["proof (state)\nthis:\n  y = x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "let ?true = \"\\<lambda>_. True\" and ?label = \"\\<lambda>P x. P x\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "from rel"], ["proof (chain)\npicking this:\n  rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x y", "have \"rell_F (=) (=) (=) (mapl_F ?true ?true ?true x)\n    (mapl_F (?label P1) (?label P2) (?label P3) x)\""], ["proof (prove)\nusing this:\n  rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x y\n\ngoal (1 subgoal):\n 1. rell_F (=) (=) (=)\n     (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x)\n     (mapl_F P1 P2 P3 x)", "unfolding rell_F_def mapl_F_def \\<open>y = x\\<close>"], ["proof (prove)\nusing this:\n  rel_F (eq_onp P1) (eq_onp P2) (eq_onp P3) (=) (=) (=) (=) (=) (=) x x\n\ngoal (1 subgoal):\n 1. rel_F (=) (=) (=) (=) (=) (=) (=) (=) (=)\n     (map_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) id id\n       id id id id x)\n     (map_F P1 P2 P3 id id id id id id x)", "by (auto simp add: eq_onp_def elim: map_F_rel_cong)"], ["proof (state)\nthis:\n  rell_F (=) (=) (=)\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x)\n   (mapl_F P1 P2 P3 x)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "then"], ["proof (chain)\npicking this:\n  rell_F (=) (=) (=)\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x)\n   (mapl_F P1 P2 P3 x)", "have *: \"mapl_F ?true ?true ?true x = mapl_F (?label P1) (?label P2) (?label P3) x\""], ["proof (prove)\nusing this:\n  rell_F (=) (=) (=)\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x)\n   (mapl_F P1 P2 P3 x)\n\ngoal (1 subgoal):\n 1. mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x =\n    mapl_F P1 P2 P3 x", "unfolding rell_F_def rel_F_eq"], ["proof (prove)\nusing this:\n  mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x =\n  mapl_F P1 P2 P3 x\n\ngoal (1 subgoal):\n 1. mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x =\n    mapl_F P1 P2 P3 x", "."], ["proof (state)\nthis:\n  mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x =\n  mapl_F P1 P2 P3 x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "note \\<open>y = x\\<close>"], ["proof (state)\nthis:\n  y = x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "moreover"], ["proof (state)\nthis:\n  y = x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "{"], ["proof (state)\nthis:\n  y = x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "from *"], ["proof (chain)\npicking this:\n  mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x =\n  mapl_F P1 P2 P3 x", "have \"set1_F (mapl_F ?true ?true ?true x) = set1_F (mapl_F (?label P1) (?label P2) (?label P3) x)\""], ["proof (prove)\nusing this:\n  mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x =\n  mapl_F P1 P2 P3 x\n\ngoal (1 subgoal):\n 1. set1_F\n     (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n    set1_F (mapl_F P1 P2 P3 x)", "by simp"], ["proof (state)\nthis:\n  set1_F\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set1_F (mapl_F P1 P2 P3 x)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "then"], ["proof (chain)\npicking this:\n  set1_F\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set1_F (mapl_F P1 P2 P3 x)", "have \"?true ` set1_F x = ?label P1 ` set1_F x\""], ["proof (prove)\nusing this:\n  set1_F\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set1_F (mapl_F P1 P2 P3 x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>_. True) ` set1_F x = P1 ` set1_F x", "unfolding set1_F_map[THEN fun_cong, simplified]"], ["proof (prove)\nusing this:\n  (\\<lambda>_. True) ` set1_F x = P1 ` set1_F x\n\ngoal (1 subgoal):\n 1. (\\<lambda>_. True) ` set1_F x = P1 ` set1_F x", "."], ["proof (state)\nthis:\n  (\\<lambda>_. True) ` set1_F x = P1 ` set1_F x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>_. True) ` set1_F x = P1 ` set1_F x", "have \"\\<forall>z\\<in>set1_F x. P1 z\""], ["proof (prove)\nusing this:\n  (\\<lambda>_. True) ` set1_F x = P1 ` set1_F x\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>set1_F x. P1 z", "by auto"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set1_F x. P1 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "}"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set1_F x. P1 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "moreover"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set1_F x. P1 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "{"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set1_F x. P1 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "from *"], ["proof (chain)\npicking this:\n  mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x =\n  mapl_F P1 P2 P3 x", "have \"set2_F (mapl_F ?true ?true ?true x) = set2_F (mapl_F (?label P1) (?label P2) (?label P3) x)\""], ["proof (prove)\nusing this:\n  mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x =\n  mapl_F P1 P2 P3 x\n\ngoal (1 subgoal):\n 1. set2_F\n     (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n    set2_F (mapl_F P1 P2 P3 x)", "by simp"], ["proof (state)\nthis:\n  set2_F\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set2_F (mapl_F P1 P2 P3 x)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "then"], ["proof (chain)\npicking this:\n  set2_F\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set2_F (mapl_F P1 P2 P3 x)", "have \"?true ` set2_F x = ?label P2 ` set2_F x\""], ["proof (prove)\nusing this:\n  set2_F\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set2_F (mapl_F P1 P2 P3 x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>_. True) ` set2_F x = P2 ` set2_F x", "unfolding set2_F_map[THEN fun_cong, simplified]"], ["proof (prove)\nusing this:\n  (\\<lambda>_. True) ` set2_F x = P2 ` set2_F x\n\ngoal (1 subgoal):\n 1. (\\<lambda>_. True) ` set2_F x = P2 ` set2_F x", "."], ["proof (state)\nthis:\n  (\\<lambda>_. True) ` set2_F x = P2 ` set2_F x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>_. True) ` set2_F x = P2 ` set2_F x", "have \"\\<forall>z\\<in>set2_F x. P2 z\""], ["proof (prove)\nusing this:\n  (\\<lambda>_. True) ` set2_F x = P2 ` set2_F x\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>set2_F x. P2 z", "by auto"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set2_F x. P2 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "}"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set2_F x. P2 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "moreover"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set2_F x. P2 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "{"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set2_F x. P2 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "from *"], ["proof (chain)\npicking this:\n  mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x =\n  mapl_F P1 P2 P3 x", "have \"set3_F (mapl_F ?true ?true ?true x) = set3_F (mapl_F (?label P1) (?label P2) (?label P3) x)\""], ["proof (prove)\nusing this:\n  mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x =\n  mapl_F P1 P2 P3 x\n\ngoal (1 subgoal):\n 1. set3_F\n     (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n    set3_F (mapl_F P1 P2 P3 x)", "by simp"], ["proof (state)\nthis:\n  set3_F\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set3_F (mapl_F P1 P2 P3 x)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "then"], ["proof (chain)\npicking this:\n  set3_F\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set3_F (mapl_F P1 P2 P3 x)", "have \"?true ` set3_F x = ?label P3 ` set3_F x\""], ["proof (prove)\nusing this:\n  set3_F\n   (mapl_F (\\<lambda>_. True) (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set3_F (mapl_F P1 P2 P3 x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>_. True) ` set3_F x = P3 ` set3_F x", "unfolding set3_F_map[THEN fun_cong, simplified]"], ["proof (prove)\nusing this:\n  (\\<lambda>_. True) ` set3_F x = P3 ` set3_F x\n\ngoal (1 subgoal):\n 1. (\\<lambda>_. True) ` set3_F x = P3 ` set3_F x", "."], ["proof (state)\nthis:\n  (\\<lambda>_. True) ` set3_F x = P3 ` set3_F x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>_. True) ` set3_F x = P3 ` set3_F x", "have \"\\<forall>z\\<in>set3_F x. P3 z\""], ["proof (prove)\nusing this:\n  (\\<lambda>_. True) ` set3_F x = P3 ` set3_F x\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>set3_F x. P3 z", "by auto"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set3_F x. P3 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "}"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set3_F x. P3 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "ultimately"], ["proof (chain)\npicking this:\n  y = x\n  \\<forall>z\\<in>set1_F x. P1 z\n  \\<forall>z\\<in>set2_F x. P2 z\n  \\<forall>z\\<in>set3_F x. P3 z", "show \"?eq_onp_pred x y\""], ["proof (prove)\nusing this:\n  y = x\n  \\<forall>z\\<in>set1_F x. P1 z\n  \\<forall>z\\<in>set2_F x. P2 z\n  \\<forall>z\\<in>set3_F x. P3 z\n\ngoal (1 subgoal):\n 1. eq_onp\n     (\\<lambda>x.\n         (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n         (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n         (\\<forall>z\\<in>set3_F x. P3 z))\n     x y", "by (simp add: eq_onp_def)"], ["proof (state)\nthis:\n  eq_onp\n   (\\<lambda>x.\n       (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n       (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n       (\\<forall>z\\<in>set3_F x. P3 z))\n   x y\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "assume eq_onp: \"?eq_onp_pred x y\""], ["proof (state)\nthis:\n  eq_onp\n   (\\<lambda>x.\n       (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n       (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n       (\\<forall>z\\<in>set3_F x. P3 z))\n   x y\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "then"], ["proof (chain)\npicking this:\n  eq_onp\n   (\\<lambda>x.\n       (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n       (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n       (\\<forall>z\\<in>set3_F x. P3 z))\n   x y", "have \"rell_F (=) (=) (=) x y\""], ["proof (prove)\nusing this:\n  eq_onp\n   (\\<lambda>x.\n       (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n       (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n       (\\<forall>z\\<in>set3_F x. P3 z))\n   x y\n\ngoal (1 subgoal):\n 1. rell_F (=) (=) (=) x y", "by (auto simp add: rell_F_def rel_F_eq eq_onp_def)"], ["proof (state)\nthis:\n  rell_F (=) (=) (=) x y\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n            (\\<forall>z\\<in>set3_F x. P3 z))\n        x xa \\<Longrightarrow>\n       rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x xa", "then"], ["proof (chain)\npicking this:\n  rell_F (=) (=) (=) x y", "show \"?rel_eq_onp x y\""], ["proof (prove)\nusing this:\n  rell_F (=) (=) (=) x y\n\ngoal (1 subgoal):\n 1. rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x y", "using eq_onp"], ["proof (prove)\nusing this:\n  rell_F (=) (=) (=) x y\n  eq_onp\n   (\\<lambda>x.\n       (\\<forall>z\\<in>set1_F x. P1 z) \\<and>\n       (\\<forall>z\\<in>set2_F x. P2 z) \\<and>\n       (\\<forall>z\\<in>set3_F x. P3 z))\n   x y\n\ngoal (1 subgoal):\n 1. rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x y", "by (auto elim!: rell_F_mono_strong simp add: eq_onp_def)"], ["proof (state)\nthis:\n  rell_F (eq_onp P1) (eq_onp P2) (eq_onp P3) x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rell_F_Grp: \"rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n  Grp {x. set1_F x \\<subseteq> A1 \\<and> set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3} (mapl_F f1 f2 f3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "have \"rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) = rell_F (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n    (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2) (eq_onp (\\<lambda>x. x \\<in> A3) OO Grp UNIV f3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    rell_F (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n     (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2)\n     (eq_onp (\\<lambda>x. x \\<in> A3) OO Grp UNIV f3)", "by (simp add: eq_onp_compp_Grp)"], ["proof (state)\nthis:\n  rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n  rell_F (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n   (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2)\n   (eq_onp (\\<lambda>x. x \\<in> A3) OO Grp UNIV f3)\n\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "also"], ["proof (state)\nthis:\n  rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n  rell_F (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n   (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2)\n   (eq_onp (\\<lambda>x. x \\<in> A3) OO Grp UNIV f3)\n\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "have \"... = rell_F (eq_onp (\\<lambda>x. x \\<in> A1)) (eq_onp (\\<lambda>x. x \\<in> A2)) (eq_onp (\\<lambda>x. x \\<in> A3)) OO\n    rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_F (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n     (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2)\n     (eq_onp (\\<lambda>x. x \\<in> A3) OO Grp UNIV f3) =\n    rell_F (eq_onp (\\<lambda>x. x \\<in> A1))\n     (eq_onp (\\<lambda>x. x \\<in> A2)) (eq_onp (\\<lambda>x. x \\<in> A3)) OO\n    rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3)", "using rell_F_compp"], ["proof (prove)\nusing this:\n  rell_F (?L1.0 OO ?L1') (?L2.0 OO ?L2') (?L3.0 OO ?L3') =\n  rell_F ?L1.0 ?L2.0 ?L3.0 OO rell_F ?L1' ?L2' ?L3'\n\ngoal (1 subgoal):\n 1. rell_F (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n     (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2)\n     (eq_onp (\\<lambda>x. x \\<in> A3) OO Grp UNIV f3) =\n    rell_F (eq_onp (\\<lambda>x. x \\<in> A1))\n     (eq_onp (\\<lambda>x. x \\<in> A2)) (eq_onp (\\<lambda>x. x \\<in> A3)) OO\n    rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3)", "."], ["proof (state)\nthis:\n  rell_F (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n   (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2)\n   (eq_onp (\\<lambda>x. x \\<in> A3) OO Grp UNIV f3) =\n  rell_F (eq_onp (\\<lambda>x. x \\<in> A1)) (eq_onp (\\<lambda>x. x \\<in> A2))\n   (eq_onp (\\<lambda>x. x \\<in> A3)) OO\n  rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3)\n\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "also"], ["proof (state)\nthis:\n  rell_F (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n   (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2)\n   (eq_onp (\\<lambda>x. x \\<in> A3) OO Grp UNIV f3) =\n  rell_F (eq_onp (\\<lambda>x. x \\<in> A1)) (eq_onp (\\<lambda>x. x \\<in> A2))\n   (eq_onp (\\<lambda>x. x \\<in> A3)) OO\n  rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3)\n\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "have \"... = eq_onp (\\<lambda>x. set1_F x \\<subseteq> A1 \\<and> set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n    rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_F (eq_onp (\\<lambda>x. x \\<in> A1))\n     (eq_onp (\\<lambda>x. x \\<in> A2)) (eq_onp (\\<lambda>x. x \\<in> A3)) OO\n    rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3) =\n    eq_onp\n     (\\<lambda>x.\n         set1_F x \\<subseteq> A1 \\<and>\n         set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n    rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3)", "by (simp add: rell_F_eq_onp subset_eq)"], ["proof (state)\nthis:\n  rell_F (eq_onp (\\<lambda>x. x \\<in> A1)) (eq_onp (\\<lambda>x. x \\<in> A2))\n   (eq_onp (\\<lambda>x. x \\<in> A3)) OO\n  rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3) =\n  eq_onp\n   (\\<lambda>x.\n       set1_F x \\<subseteq> A1 \\<and>\n       set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n  rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3)\n\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "also"], ["proof (state)\nthis:\n  rell_F (eq_onp (\\<lambda>x. x \\<in> A1)) (eq_onp (\\<lambda>x. x \\<in> A2))\n   (eq_onp (\\<lambda>x. x \\<in> A3)) OO\n  rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3) =\n  eq_onp\n   (\\<lambda>x.\n       set1_F x \\<subseteq> A1 \\<and>\n       set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n  rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3)\n\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "have \"... = eq_onp (\\<lambda>x. set1_F x \\<subseteq> A1 \\<and> set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n    Grp UNIV (mapl_F f1 f2 f3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_onp\n     (\\<lambda>x.\n         set1_F x \\<subseteq> A1 \\<and>\n         set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n    rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3) =\n    eq_onp\n     (\\<lambda>x.\n         set1_F x \\<subseteq> A1 \\<and>\n         set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n    Grp UNIV (mapl_F f1 f2 f3)", "unfolding rell_F_def mapl_F_def\n      rel_F_Grp_weak[of _ _ _ id id id id id id, folded eq_alt, simplified]"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_onp\n     (\\<lambda>x.\n         set1_F x \\<subseteq> A1 \\<and>\n         set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n    Grp UNIV (map_F f1 f2 f3 id id id id id id) =\n    eq_onp\n     (\\<lambda>x.\n         set1_F x \\<subseteq> A1 \\<and>\n         set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n    Grp UNIV (map_F f1 f2 f3 id id id id id id)", ".."], ["proof (state)\nthis:\n  eq_onp\n   (\\<lambda>x.\n       set1_F x \\<subseteq> A1 \\<and>\n       set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n  rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3) =\n  eq_onp\n   (\\<lambda>x.\n       set1_F x \\<subseteq> A1 \\<and>\n       set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n  Grp UNIV (mapl_F f1 f2 f3)\n\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "also"], ["proof (state)\nthis:\n  eq_onp\n   (\\<lambda>x.\n       set1_F x \\<subseteq> A1 \\<and>\n       set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n  rell_F (Grp UNIV f1) (Grp UNIV f2) (Grp UNIV f3) =\n  eq_onp\n   (\\<lambda>x.\n       set1_F x \\<subseteq> A1 \\<and>\n       set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n  Grp UNIV (mapl_F f1 f2 f3)\n\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "have \"... = Grp {x. set1_F x \\<subseteq> A1 \\<and> set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3} (mapl_F f1 f2 f3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_onp\n     (\\<lambda>x.\n         set1_F x \\<subseteq> A1 \\<and>\n         set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n    Grp UNIV (mapl_F f1 f2 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "by (simp add: eq_onp_compp_Grp)"], ["proof (state)\nthis:\n  eq_onp\n   (\\<lambda>x.\n       set1_F x \\<subseteq> A1 \\<and>\n       set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3) OO\n  Grp UNIV (mapl_F f1 f2 f3) =\n  Grp {x. set1_F x \\<subseteq> A1 \\<and>\n          set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n   (mapl_F f1 f2 f3)\n\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "finally"], ["proof (chain)\npicking this:\n  rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n  Grp {x. set1_F x \\<subseteq> A1 \\<and>\n          set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n   (mapl_F f1 f2 f3)", "show ?thesis"], ["proof (prove)\nusing this:\n  rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n  Grp {x. set1_F x \\<subseteq> A1 \\<and>\n          set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n   (mapl_F f1 f2 f3)\n\ngoal (1 subgoal):\n 1. rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n    Grp {x. set1_F x \\<subseteq> A1 \\<and>\n            set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n     (mapl_F f1 f2 f3)", "."], ["proof (state)\nthis:\n  rell_F (Grp A1 f1) (Grp A2 f2) (Grp A3 f3) =\n  Grp {x. set1_F x \\<subseteq> A1 \\<and>\n          set2_F x \\<subseteq> A2 \\<and> set3_F x \\<subseteq> A3}\n   (mapl_F f1 f2 f3)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rell_F_compp_Grp: \"rell_F L1 L2 L3 =\n  (Grp {x. set1_F x \\<subseteq> {(x, y). L1 x y} \\<and> set2_F x \\<subseteq> {(x, y). L2 x y} \\<and> set3_F x \\<subseteq> {(x, y). L3 x y}}\n    (mapl_F fst fst fst))\\<inverse>\\<inverse> OO\n  Grp {x. set1_F x \\<subseteq> {(x, y). L1 x y} \\<and> set2_F x \\<subseteq> {(x, y). L2 x y} \\<and> set3_F x \\<subseteq> {(x, y). L3 x y}}\n    (mapl_F snd snd snd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_F L1 L2 L3 =\n    (Grp {x. set1_F x \\<subseteq> {(x, y). L1 x y} \\<and>\n             set2_F x \\<subseteq> {(x, y). L2 x y} \\<and>\n             set3_F x \\<subseteq> {(x, y). L3 x y}}\n      (mapl_F fst fst fst))\\<inverse>\\<inverse> OO\n    Grp {x. set1_F x \\<subseteq> {(x, y). L1 x y} \\<and>\n            set2_F x \\<subseteq> {(x, y). L2 x y} \\<and>\n            set3_F x \\<subseteq> {(x, y). L3 x y}}\n     (mapl_F snd snd snd)", "apply (unfold rell_F_Grp[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_F L1 L2 L3 =\n    (rell_F (Grp {(x, y). L1 x y} fst) (Grp {(x, y). L2 x y} fst)\n      (Grp {(x, y). L3 x y} fst))\\<inverse>\\<inverse> OO\n    rell_F (Grp {(x, y). L1 x y} snd) (Grp {(x, y). L2 x y} snd)\n     (Grp {(x, y). L3 x y} snd)", "apply (unfold rell_F_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=) =\n    (rel_F (Grp {(x, y). L1 x y} fst) (Grp {(x, y). L2 x y} fst)\n      (Grp {(x, y). L3 x y} fst) (=) (=) (=) (=) (=)\n      (=))\\<inverse>\\<inverse> OO\n    rel_F (Grp {(x, y). L1 x y} snd) (Grp {(x, y). L2 x y} snd)\n     (Grp {(x, y). L3 x y} snd) (=) (=) (=) (=) (=) (=)", "apply (simp add: rel_F_conversep[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_F L1 L2 L3 (=) (=) (=) (=) (=) (=) =\n    rel_F (Grp {(x, y). L1 x y} fst)\\<inverse>\\<inverse>\n     (Grp {(x, y). L2 x y} fst)\\<inverse>\\<inverse>\n     (Grp {(x, y). L3 x y} fst)\\<inverse>\\<inverse> (=) (=) (=) (=) (=)\n     (=) OO\n    rel_F (Grp {(x, y). L1 x y} snd) (Grp {(x, y). L2 x y} snd)\n     (Grp {(x, y). L3 x y} snd) (=) (=) (=) (=) (=) (=)", "apply (fold rell_F_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_F L1 L2 L3 =\n    rell_F (Grp {(x, y). L1 x y} fst)\\<inverse>\\<inverse>\n     (Grp {(x, y). L2 x y} fst)\\<inverse>\\<inverse>\n     (Grp {(x, y). L3 x y} fst)\\<inverse>\\<inverse> OO\n    rell_F (Grp {(x, y). L1 x y} snd) (Grp {(x, y). L2 x y} snd)\n     (Grp {(x, y). L3 x y} snd)", "apply (simp add: rell_F_compp[symmetric] Grp_fst_snd)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma F_in_rell: \"rell_F L1 L2 L3 = (\\<lambda>x y. \\<exists>z. (set1_F z \\<subseteq> {(x, y). L1 x y} \\<and>\n  set2_F z \\<subseteq> {(x, y). L2 x y} \\<and> set3_F z \\<subseteq> {(x, y). L3 x y}) \\<and>\n  mapl_F fst fst fst z = x \\<and> mapl_F snd snd snd z = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_F L1 L2 L3 =\n    (\\<lambda>x y.\n        \\<exists>z.\n           (set1_F z \\<subseteq> {(x, y). L1 x y} \\<and>\n            set2_F z \\<subseteq> {(x, y). L2 x y} \\<and>\n            set3_F z \\<subseteq> {(x, y). L3 x y}) \\<and>\n           mapl_F fst fst fst z = x \\<and> mapl_F snd snd snd z = y)", "using rell_F_compp_Grp"], ["proof (prove)\nusing this:\n  rell_F ?L1.0 ?L2.0 ?L3.0 =\n  (Grp {x. set1_F x \\<subseteq> {(x, y). ?L1.0 x y} \\<and>\n           set2_F x \\<subseteq> {(x, y). ?L2.0 x y} \\<and>\n           set3_F x \\<subseteq> {(x, y). ?L3.0 x y}}\n    (mapl_F fst fst fst))\\<inverse>\\<inverse> OO\n  Grp {x. set1_F x \\<subseteq> {(x, y). ?L1.0 x y} \\<and>\n          set2_F x \\<subseteq> {(x, y). ?L2.0 x y} \\<and>\n          set3_F x \\<subseteq> {(x, y). ?L3.0 x y}}\n   (mapl_F snd snd snd)\n\ngoal (1 subgoal):\n 1. rell_F L1 L2 L3 =\n    (\\<lambda>x y.\n        \\<exists>z.\n           (set1_F z \\<subseteq> {(x, y). L1 x y} \\<and>\n            set2_F z \\<subseteq> {(x, y). L2 x y} \\<and>\n            set3_F z \\<subseteq> {(x, y). L3 x y}) \\<and>\n           mapl_F fst fst fst z = x \\<and> mapl_F snd snd snd z = y)", "by (simp add: OO_Grp_alt)"], ["", "bnf \"('l1, 'l2, 'l3, 'co1, 'co2, 'co3, 'contra1, 'contra2, 'contra3, 'f) F\"\n  map: mapl_F\n  sets: set1_F set2_F set3_F\n  bd: \"bd_F :: ('co1, 'co2, 'co3, 'contra1, 'contra2, 'contra3, 'f) Fbd rel\"\n  rel: rell_F"], ["proof (prove)\ngoal (13 subgoals):\n 1. mapl_F id id id = id\n 2. \\<And>f1 f2 f3 g1 g2 g3.\n       mapl_F (g1 \\<circ> f1) (g2 \\<circ> f2) (g3 \\<circ> f3) =\n       mapl_F g1 g2 g3 \\<circ> mapl_F f1 f2 f3\n 3. \\<And>x f1 f2 f3 g1 g2 g3.\n       \\<lbrakk>\\<And>z1. z1 \\<in> set1_F x \\<Longrightarrow> f1 z1 = g1 z1;\n        \\<And>z2. z2 \\<in> set2_F x \\<Longrightarrow> f2 z2 = g2 z2;\n        \\<And>z3. z3 \\<in> set3_F x \\<Longrightarrow> f3 z3 = g3 z3\\<rbrakk>\n       \\<Longrightarrow> mapl_F f1 f2 f3 x = mapl_F g1 g2 g3 x\n 4. \\<And>f1 f2 f3. set1_F \\<circ> mapl_F f1 f2 f3 = (`) f1 \\<circ> set1_F\n 5. \\<And>f1 f2 f3. set2_F \\<circ> mapl_F f1 f2 f3 = (`) f2 \\<circ> set2_F\n 6. \\<And>f1 f2 f3. set3_F \\<circ> mapl_F f1 f2 f3 = (`) f3 \\<circ> set3_F\n 7. card_order bd_F\n 8. cinfinite bd_F\n 9. \\<And>x. |set1_F x| \\<le>o bd_F\n 10. \\<And>x. |set2_F x| \\<le>o bd_F\nA total of 13 subgoals...", "by (fact mapl_F_id0 mapl_F_comp[symmetric] mapl_F_cong set1_F_map set2_F_map set3_F_map\n    bd_F_card_order bd_F_cinfinite set1_F_bound set2_F_bound set3_F_bound\n    rell_F_compp[symmetric, THEN eq_refl] F_in_rell)+"], ["", "subsubsection \\<open>Composition witness\\<close>"], ["", "consts\n  rel_F_witness :: \"('l1 \\<Rightarrow> 'l1'' \\<Rightarrow> bool) \\<Rightarrow> ('l2 \\<Rightarrow> 'l2'' \\<Rightarrow> bool) \\<Rightarrow> ('l3 \\<Rightarrow> 'l3'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool) \\<Rightarrow> ('co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool) \\<Rightarrow> ('co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co3 \\<Rightarrow> 'co3' \\<Rightarrow> bool) \\<Rightarrow> ('co3' \\<Rightarrow> 'co3'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool) \\<Rightarrow> ('contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool) \\<Rightarrow> ('contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra3 \\<Rightarrow> 'contra3' \\<Rightarrow> bool) \\<Rightarrow> ('contra3' \\<Rightarrow> 'contra3'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('l1, 'l2, 'l3, 'co1, 'co2, 'co3, 'contra1, 'contra2, 'contra3, 'f) F \\<times>\n    ('l1'', 'l2'', 'l3'', 'co1'', 'co2'', 'co3'', 'contra1'', 'contra2'', 'contra3'', 'f) F \\<Rightarrow>\n    ('l1 \\<times> 'l1'', 'l2 \\<times> 'l2'', 'l3 \\<times> 'l3'', 'co1', 'co2', 'co3', 'contra1', 'contra2', 'contra3',\n      'f) F\""], ["", "specification (rel_F_witness)\n  rel_F_witness1: \"\\<And>L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3'\n    Contra1 Contra1' Contra2 Contra2' Contra3 Contra3'\n    (tytok :: ('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times>\n      'l3 \\<times> ('l3 \\<times> 'l3'') \\<times> 'l3'' \\<times> 'f) itself)\n    (x :: ('l1, 'l2, 'l3, _, _, _, _, _, _, 'f) F)\n    (y :: ('l1'', 'l2'', 'l3'', _, _, _, _, _, _, 'f) F).\n    \\<lbrakk> rel_F_neg_distr_cond Co1 Co1' Co2 Co2' Co3 Co3'\n        Contra1 Contra1' Contra2 Contra2' Contra3 Contra3' tytok;\n      rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n          (Contra1 OO Contra1') (Contra2 OO Contra2') (Contra3 OO Contra3') x y \\<rbrakk> \\<Longrightarrow>\n    rel_F (\\<lambda>x (x', y). x' = x \\<and> L1 x y) (\\<lambda>x (x', y). x' = x \\<and> L2 x y)\n    (\\<lambda>x (x', y). x' = x \\<and> L3 x y) Co1 Co2 Co3 Contra1 Contra2 Contra3 x\n    (rel_F_witness L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3'\n      Contra1 Contra1' Contra2 Contra2' Contra3 Contra3' (x, y))\"\n  rel_F_witness2:\"\\<And>L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3'\n    Contra1 Contra1' Contra2 Contra2' Contra3 Contra3'\n    (tytok :: ('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times>\n      'l3 \\<times> ('l3 \\<times> 'l3'') \\<times> 'l3'' \\<times> 'f) itself)\n    (x :: ('l1, 'l2, 'l3, _, _, _, _, _, _, 'f) F)\n    (y :: ('l1'', 'l2'', 'l3'', _, _, _, _, _, _, 'f) F).\n    \\<lbrakk> rel_F_neg_distr_cond Co1 Co1' Co2 Co2' Co3 Co3'\n        Contra1 Contra1' Contra2 Contra2' Contra3 Contra3' tytok;\n      rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n          (Contra1 OO Contra1') (Contra2 OO Contra2') (Contra3 OO Contra3') x y \\<rbrakk> \\<Longrightarrow>\n    rel_F (\\<lambda>(x, y') y. y' = y \\<and> L1 x y) (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n    (\\<lambda>(x, y') y. y' = y \\<and> L3 x y) Co1' Co2' Co3' Contra1' Contra2' Contra3'\n    (rel_F_witness L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3'\n       Contra1 Contra1' Contra2 Contra2' Contra3 Contra3' (x, y)) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rel_F_witness.\n       (\\<forall>L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3' Contra1 Contra1'\n           Contra2 Contra2' Contra3 Contra3' tytok x y.\n           rel_F_neg_distr_cond Co1 Co1' Co2 Co2' Co3 Co3' Contra1 Contra1'\n            Contra2 Contra2' Contra3 Contra3' tytok \\<longrightarrow>\n           rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n            (Contra1 OO Contra1') (Contra2 OO Contra2')\n            (Contra3 OO Contra3') x y \\<longrightarrow>\n           rel_F (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n            (\\<lambda>x (x', y). x' = x \\<and> L2 x y)\n            (\\<lambda>x (x', y). x' = x \\<and> L3 x y) Co1 Co2 Co3 Contra1\n            Contra2 Contra3 x\n            (rel_F_witness L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3' Contra1\n              Contra1' Contra2 Contra2' Contra3 Contra3' (x, y))) \\<and>\n       (\\<forall>L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3' Contra1 Contra1'\n           Contra2 Contra2' Contra3 Contra3' tytok x y.\n           rel_F_neg_distr_cond Co1 Co1' Co2 Co2' Co3 Co3' Contra1 Contra1'\n            Contra2 Contra2' Contra3 Contra3' tytok \\<longrightarrow>\n           rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n            (Contra1 OO Contra1') (Contra2 OO Contra2')\n            (Contra3 OO Contra3') x y \\<longrightarrow>\n           rel_F (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n            (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n            (\\<lambda>(x, y') y. y' = y \\<and> L3 x y) Co1' Co2' Co3'\n            Contra1' Contra2' Contra3'\n            (rel_F_witness L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3' Contra1\n              Contra1' Contra2 Contra2' Contra3 Contra3' (x, y))\n            y)", "apply(rule exI[where x=\"\\<lambda>L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3'\n     Contra1 Contra1' Contra2 Contra2' Contra3 Contra3' (x, y). SOME z.\n     rel_F (\\<lambda>x (x', y). x' = x \\<and> L1 x y) (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (\\<lambda>x (x', y). x' = x \\<and> L3 x y)\n      Co1 Co2 Co3 Contra1 Contra2 Contra3 x z \\<and>\n     rel_F (\\<lambda>(x, y') y. y' = y \\<and> L1 x y) (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) (\\<lambda>(x, y') y. y' = y \\<and> L3 x y)\n      Co1' Co2' Co3' Contra1' Contra2' Contra3' z y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3' Contra1 Contra1' Contra2\n        Contra2' Contra3 Contra3' tytok x y.\n        rel_F_neg_distr_cond Co1 Co1' Co2 Co2' Co3 Co3' Contra1 Contra1'\n         Contra2 Contra2' Contra3 Contra3' tytok \\<longrightarrow>\n        rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n         (Contra1 OO Contra1') (Contra2 OO Contra2') (Contra3 OO Contra3') x\n         y \\<longrightarrow>\n        rel_F (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L3 x y) Co1 Co2 Co3 Contra1\n         Contra2 Contra3 x\n         (case (x, y) of\n          (rel_F_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_F\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> L1 rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> L2 rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> L3 rel_F_witness y)\n                Co1 Co2 Co3 Contra1 Contra2 Contra3 rel_F_witness z \\<and>\n               rel_F\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> L1 rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> L2 rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> L3 rel_F_witness y)\n                Co1' Co2' Co3' Contra1' Contra2' Contra3' z y)) \\<and>\n    (\\<forall>L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3' Contra1 Contra1' Contra2\n        Contra2' Contra3 Contra3' tytok x y.\n        rel_F_neg_distr_cond Co1 Co1' Co2 Co2' Co3 Co3' Contra1 Contra1'\n         Contra2 Contra2' Contra3 Contra3' tytok \\<longrightarrow>\n        rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n         (Contra1 OO Contra1') (Contra2 OO Contra2') (Contra3 OO Contra3') x\n         y \\<longrightarrow>\n        rel_F (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n         (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n         (\\<lambda>(x, y') y. y' = y \\<and> L3 x y) Co1' Co2' Co3' Contra1'\n         Contra2' Contra3'\n         (case (x, y) of\n          (rel_F_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_F\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> L1 rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> L2 rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> L3 rel_F_witness y)\n                Co1 Co2 Co3 Contra1 Contra2 Contra3 rel_F_witness z \\<and>\n               rel_F\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> L1 rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> L2 rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> L3 rel_F_witness y)\n                Co1' Co2' Co3' Contra1' Contra2' Contra3' z y)\n         y)", "apply(fold all_conj_distrib)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa xaa xaaa xaaaa xaaaaa xaaaaaa xaaaaaaa xaaaaaaaa\n       xaaaaaaaaa xaaaaaaaaaa xaaaaaaaaaaa xaaaaaaaaaaaa xaaaaaaaaaaaaa\n       xaaaaaaaaaaaaaa xaaaaaaaaaaaaaaa xaaaaaaaaaaaaaaaa\n       xaaaaaaaaaaaaaaaaa.\n       (rel_F_neg_distr_cond xaaa xaaaa xaaaaa xaaaaaa xaaaaaaa xaaaaaaaa\n         xaaaaaaaaa xaaaaaaaaaa xaaaaaaaaaaa xaaaaaaaaaaaa xaaaaaaaaaaaaa\n         xaaaaaaaaaaaaaa xaaaaaaaaaaaaaaa \\<longrightarrow>\n        rel_F x xa xaa (xaaa OO xaaaa) (xaaaaa OO xaaaaaa)\n         (xaaaaaaa OO xaaaaaaaa) (xaaaaaaaaa OO xaaaaaaaaaa)\n         (xaaaaaaaaaaa OO xaaaaaaaaaaaa) (xaaaaaaaaaaaaa OO xaaaaaaaaaaaaaa)\n         xaaaaaaaaaaaaaaaa xaaaaaaaaaaaaaaaaa \\<longrightarrow>\n        rel_F (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n         (\\<lambda>x (x', y). x' = x \\<and> xa x y)\n         (\\<lambda>x (x', y). x' = x \\<and> xaa x y) xaaa xaaaaa xaaaaaaa\n         xaaaaaaaaa xaaaaaaaaaaa xaaaaaaaaaaaaa xaaaaaaaaaaaaaaaa\n         (case (xaaaaaaaaaaaaaaaa, xaaaaaaaaaaaaaaaaa) of\n          (rel_F_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_F\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> x rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> xa rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> xaa rel_F_witness y)\n                xaaa xaaaaa xaaaaaaa xaaaaaaaaa xaaaaaaaaaaa xaaaaaaaaaaaaa\n                rel_F_witness z \\<and>\n               rel_F\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> x rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> xa rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> xaa rel_F_witness y)\n                xaaaa xaaaaaa xaaaaaaaa xaaaaaaaaaa xaaaaaaaaaaaa\n                xaaaaaaaaaaaaaa z y)) \\<and>\n       (rel_F_neg_distr_cond xaaa xaaaa xaaaaa xaaaaaa xaaaaaaa xaaaaaaaa\n         xaaaaaaaaa xaaaaaaaaaa xaaaaaaaaaaa xaaaaaaaaaaaa xaaaaaaaaaaaaa\n         xaaaaaaaaaaaaaa xaaaaaaaaaaaaaaa \\<longrightarrow>\n        rel_F x xa xaa (xaaa OO xaaaa) (xaaaaa OO xaaaaaa)\n         (xaaaaaaa OO xaaaaaaaa) (xaaaaaaaaa OO xaaaaaaaaaa)\n         (xaaaaaaaaaaa OO xaaaaaaaaaaaa) (xaaaaaaaaaaaaa OO xaaaaaaaaaaaaaa)\n         xaaaaaaaaaaaaaaaa xaaaaaaaaaaaaaaaaa \\<longrightarrow>\n        rel_F (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n         (\\<lambda>(x, y') y. y' = y \\<and> xa x y)\n         (\\<lambda>(x, y') y. y' = y \\<and> xaa x y) xaaaa xaaaaaa xaaaaaaaa\n         xaaaaaaaaaa xaaaaaaaaaaaa xaaaaaaaaaaaaaa\n         (case (xaaaaaaaaaaaaaaaa, xaaaaaaaaaaaaaaaaa) of\n          (rel_F_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_F\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> x rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> xa rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> xaa rel_F_witness y)\n                xaaa xaaaaa xaaaaaaa xaaaaaaaaa xaaaaaaaaaaa xaaaaaaaaaaaaa\n                rel_F_witness z \\<and>\n               rel_F\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> x rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> xa rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> xaa rel_F_witness y)\n                xaaaa xaaaaaa xaaaaaaaa xaaaaaaaaaa xaaaaaaaaaaaa\n                xaaaaaaaaaaaaaa z y)\n         xaaaaaaaaaaaaaaaaa)", "apply(rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp xq.\n       (rel_F_neg_distr_cond xc xd xe xf xg xh xi xj xk xl xm xn\n         xo \\<longrightarrow>\n        rel_F x xa xb (xc OO xd) (xe OO xf) (xg OO xh) (xi OO xj) (xk OO xl)\n         (xm OO xn) xp xq \\<longrightarrow>\n        rel_F (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n         (\\<lambda>x (x', y). x' = x \\<and> xa x y)\n         (\\<lambda>x (x', y). x' = x \\<and> xb x y) xc xe xg xi xk xm xp\n         (case (xp, xq) of\n          (rel_F_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_F\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> x rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> xa rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> xb rel_F_witness y)\n                xc xe xg xi xk xm rel_F_witness z \\<and>\n               rel_F\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> x rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> xa rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> xb rel_F_witness y)\n                xd xf xh xj xl xn z y)) \\<and>\n       (rel_F_neg_distr_cond xc xd xe xf xg xh xi xj xk xl xm xn\n         xo \\<longrightarrow>\n        rel_F x xa xb (xc OO xd) (xe OO xf) (xg OO xh) (xi OO xj) (xk OO xl)\n         (xm OO xn) xp xq \\<longrightarrow>\n        rel_F (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n         (\\<lambda>(x, y') y. y' = y \\<and> xa x y)\n         (\\<lambda>(x, y') y. y' = y \\<and> xb x y) xd xf xh xj xl xn\n         (case (xp, xq) of\n          (rel_F_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_F\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> x rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> xa rel_F_witness y)\n                (\\<lambda>rel_F_witness (x', y).\n                    x' = rel_F_witness \\<and> xb rel_F_witness y)\n                xc xe xg xi xk xm rel_F_witness z \\<and>\n               rel_F\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> x rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> xa rel_F_witness y)\n                (\\<lambda>(rel_F_witness, y') y.\n                    y' = y \\<and> xb rel_F_witness y)\n                xd xf xh xj xl xn z y)\n         xq)", "apply(fold imp_conjR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp xq.\n       rel_F_neg_distr_cond xc xd xe xf xg xh xi xj xk xl xm xn\n        xo \\<longrightarrow>\n       rel_F x xa xb (xc OO xd) (xe OO xf) (xg OO xh) (xi OO xj) (xk OO xl)\n        (xm OO xn) xp xq \\<longrightarrow>\n       rel_F (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n        (\\<lambda>x (x', y). x' = x \\<and> xa x y)\n        (\\<lambda>x (x', y). x' = x \\<and> xb x y) xc xe xg xi xk xm xp\n        (case (xp, xq) of\n         (rel_F_witness, y) \\<Rightarrow>\n           SOME z.\n              rel_F\n               (\\<lambda>rel_F_witness (x', y).\n                   x' = rel_F_witness \\<and> x rel_F_witness y)\n               (\\<lambda>rel_F_witness (x', y).\n                   x' = rel_F_witness \\<and> xa rel_F_witness y)\n               (\\<lambda>rel_F_witness (x', y).\n                   x' = rel_F_witness \\<and> xb rel_F_witness y)\n               xc xe xg xi xk xm rel_F_witness z \\<and>\n              rel_F\n               (\\<lambda>(rel_F_witness, y') y.\n                   y' = y \\<and> x rel_F_witness y)\n               (\\<lambda>(rel_F_witness, y') y.\n                   y' = y \\<and> xa rel_F_witness y)\n               (\\<lambda>(rel_F_witness, y') y.\n                   y' = y \\<and> xb rel_F_witness y)\n               xd xf xh xj xl xn z y) \\<and>\n       rel_F (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n        (\\<lambda>(x, y') y. y' = y \\<and> xa x y)\n        (\\<lambda>(x, y') y. y' = y \\<and> xb x y) xd xf xh xj xl xn\n        (case (xp, xq) of\n         (rel_F_witness, y) \\<Rightarrow>\n           SOME z.\n              rel_F\n               (\\<lambda>rel_F_witness (x', y).\n                   x' = rel_F_witness \\<and> x rel_F_witness y)\n               (\\<lambda>rel_F_witness (x', y).\n                   x' = rel_F_witness \\<and> xa rel_F_witness y)\n               (\\<lambda>rel_F_witness (x', y).\n                   x' = rel_F_witness \\<and> xb rel_F_witness y)\n               xc xe xg xi xk xm rel_F_witness z \\<and>\n              rel_F\n               (\\<lambda>(rel_F_witness, y') y.\n                   y' = y \\<and> x rel_F_witness y)\n               (\\<lambda>(rel_F_witness, y') y.\n                   y' = y \\<and> xa rel_F_witness y)\n               (\\<lambda>(rel_F_witness, y') y.\n                   y' = y \\<and> xb rel_F_witness y)\n               xd xf xh xj xl xn z y)\n        xq", "apply(rule impI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp xq.\n       \\<lbrakk>rel_F_neg_distr_cond xc xd xe xf xg xh xi xj xk xl xm xn xo;\n        rel_F x xa xb (xc OO xd) (xe OO xf) (xg OO xh) (xi OO xj) (xk OO xl)\n         (xm OO xn) xp xq\\<rbrakk>\n       \\<Longrightarrow> rel_F (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n                          (\\<lambda>x (x', y). x' = x \\<and> xa x y)\n                          (\\<lambda>x (x', y). x' = x \\<and> xb x y) xc xe\n                          xg xi xk xm xp\n                          (case (xp, xq) of\n                           (rel_F_witness, y) \\<Rightarrow>\n                             SOME z.\n                                rel_F\n                                 (\\<lambda>rel_F_witness (x', y).\n                                     x' = rel_F_witness \\<and>\n                                     x rel_F_witness y)\n                                 (\\<lambda>rel_F_witness (x', y).\n                                     x' = rel_F_witness \\<and>\n                                     xa rel_F_witness y)\n                                 (\\<lambda>rel_F_witness (x', y).\n                                     x' = rel_F_witness \\<and>\n                                     xb rel_F_witness y)\n                                 xc xe xg xi xk xm rel_F_witness z \\<and>\n                                rel_F\n                                 (\\<lambda>(rel_F_witness, y') y.\n                                     y' = y \\<and> x rel_F_witness y)\n                                 (\\<lambda>(rel_F_witness, y') y.\n                                     y' = y \\<and> xa rel_F_witness y)\n                                 (\\<lambda>(rel_F_witness, y') y.\n                                     y' = y \\<and> xb rel_F_witness y)\n                                 xd xf xh xj xl xn z y) \\<and>\n                         rel_F (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n                          (\\<lambda>(x, y') y. y' = y \\<and> xa x y)\n                          (\\<lambda>(x, y') y. y' = y \\<and> xb x y) xd xf\n                          xh xj xl xn\n                          (case (xp, xq) of\n                           (rel_F_witness, y) \\<Rightarrow>\n                             SOME z.\n                                rel_F\n                                 (\\<lambda>rel_F_witness (x', y).\n                                     x' = rel_F_witness \\<and>\n                                     x rel_F_witness y)\n                                 (\\<lambda>rel_F_witness (x', y).\n                                     x' = rel_F_witness \\<and>\n                                     xa rel_F_witness y)\n                                 (\\<lambda>rel_F_witness (x', y).\n                                     x' = rel_F_witness \\<and>\n                                     xb rel_F_witness y)\n                                 xc xe xg xi xk xm rel_F_witness z \\<and>\n                                rel_F\n                                 (\\<lambda>(rel_F_witness, y') y.\n                                     y' = y \\<and> x rel_F_witness y)\n                                 (\\<lambda>(rel_F_witness, y') y.\n                                     y' = y \\<and> xa rel_F_witness y)\n                                 (\\<lambda>(rel_F_witness, y') y.\n                                     y' = y \\<and> xb rel_F_witness y)\n                                 xd xf xh xj xl xn z y)\n                          xq", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp xq.\n       \\<lbrakk>rel_F_neg_distr_cond xc xd xe xf xg xh xi xj xk xl xm xn xo;\n        rel_F x xa xb (xc OO xd) (xe OO xf) (xg OO xh) (xi OO xj) (xk OO xl)\n         (xm OO xn) xp xq\\<rbrakk>\n       \\<Longrightarrow> rel_F (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n                          (\\<lambda>x (x', y). x' = x \\<and> xa x y)\n                          (\\<lambda>x (x', y). x' = x \\<and> xb x y) xc xe\n                          xg xi xk xm xp\n                          (SOME z.\n                              rel_F\n                               (\\<lambda>rel_F_witness (x', y).\n                                   x' = rel_F_witness \\<and>\n                                   x rel_F_witness y)\n                               (\\<lambda>rel_F_witness (x', y).\n                                   x' = rel_F_witness \\<and>\n                                   xa rel_F_witness y)\n                               (\\<lambda>rel_F_witness (x', y).\n                                   x' = rel_F_witness \\<and>\n                                   xb rel_F_witness y)\n                               xc xe xg xi xk xm xp z \\<and>\n                              rel_F\n                               (\\<lambda>(rel_F_witness, y') y.\n                                   y' = y \\<and> x rel_F_witness y)\n                               (\\<lambda>(rel_F_witness, y') y.\n                                   y' = y \\<and> xa rel_F_witness y)\n                               (\\<lambda>(rel_F_witness, y') y.\n                                   y' = y \\<and> xb rel_F_witness y)\n                               xd xf xh xj xl xn z xq) \\<and>\n                         rel_F (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n                          (\\<lambda>(x, y') y. y' = y \\<and> xa x y)\n                          (\\<lambda>(x, y') y. y' = y \\<and> xb x y) xd xf\n                          xh xj xl xn\n                          (SOME z.\n                              rel_F\n                               (\\<lambda>rel_F_witness (x', y).\n                                   x' = rel_F_witness \\<and>\n                                   x rel_F_witness y)\n                               (\\<lambda>rel_F_witness (x', y).\n                                   x' = rel_F_witness \\<and>\n                                   xa rel_F_witness y)\n                               (\\<lambda>rel_F_witness (x', y).\n                                   x' = rel_F_witness \\<and>\n                                   xb rel_F_witness y)\n                               xc xe xg xi xk xm xp z \\<and>\n                              rel_F\n                               (\\<lambda>(rel_F_witness, y') y.\n                                   y' = y \\<and> x rel_F_witness y)\n                               (\\<lambda>(rel_F_witness, y') y.\n                                   y' = y \\<and> xa rel_F_witness y)\n                               (\\<lambda>(rel_F_witness, y') y.\n                                   y' = y \\<and> xb rel_F_witness y)\n                               xd xf xh xj xl xn z xq)\n                          xq", "apply(rule someI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp xq.\n       \\<lbrakk>rel_F_neg_distr_cond xc xd xe xf xg xh xi xj xk xl xm xn xo;\n        rel_F x xa xb (xc OO xd) (xe OO xf) (xg OO xh) (xi OO xj) (xk OO xl)\n         (xm OO xn) xp xq\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xo.\n                            rel_F\n                             (\\<lambda>rel_F_witness (x', y).\n                                 x' = rel_F_witness \\<and>\n                                 x rel_F_witness y)\n                             (\\<lambda>rel_F_witness (x', y).\n                                 x' = rel_F_witness \\<and>\n                                 xa rel_F_witness y)\n                             (\\<lambda>rel_F_witness (x', y).\n                                 x' = rel_F_witness \\<and>\n                                 xb rel_F_witness y)\n                             xc xe xg xi xk xm xp xo \\<and>\n                            rel_F\n                             (\\<lambda>(rel_F_witness, y') y.\n                                 y' = y \\<and> x rel_F_witness y)\n                             (\\<lambda>(rel_F_witness, y') y.\n                                 y' = y \\<and> xa rel_F_witness y)\n                             (\\<lambda>(rel_F_witness, y') y.\n                                 y' = y \\<and> xb rel_F_witness y)\n                             xd xf xh xj xl xn xo xq", "subgoal for L1 L2 L3 Co1 Co1' Co2 Co2' Co3 Co3' Contra1 Contra1' Contra2 Contra2' Contra3 Contra3' x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_F_neg_distr_cond Co1 Co1' Co2 Co2' Co3 Co3' Contra1\n              Contra1' Contra2 Contra2' Contra3 Contra3' x;\n     rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n      (Contra1 OO Contra1') (Contra2 OO Contra2') (Contra3 OO Contra3') y\n      xq_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_F\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L1 rel_F_witness y)\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L2 rel_F_witness y)\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L3 rel_F_witness y)\n                          Co1 Co2 Co3 Contra1 Contra2 Contra3 y x \\<and>\n                         rel_F\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L1 rel_F_witness y)\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L2 rel_F_witness y)\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L3 rel_F_witness y)\n                          Co1' Co2' Co3' Contra1' Contra2' Contra3' x xq_", "apply(drule rel_F_neg_distr[where\n          ?L1.0 = \"\\<lambda>x (x', y). x' = x \\<and> L1 x y\" and ?L1'.0 = \"\\<lambda>(x, y) y'. y = y' \\<and> L1 x y'\" and\n          ?L2.0 = \"\\<lambda>x (x', y). x' = x \\<and> L2 x y\" and ?L2'.0 = \"\\<lambda>(x, y) y'. y = y' \\<and> L2 x y'\" and\n          ?L3.0 = \"\\<lambda>x (x', y). x' = x \\<and> L3 x y\" and ?L3'.0 = \"\\<lambda>(x, y) y'. y = y' \\<and> L3 x y'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n              (Contra1 OO Contra1') (Contra2 OO Contra2')\n              (Contra3 OO Contra3') y xq_;\n     rel_F\n      ((\\<lambda>x (x', y). x' = x \\<and> L1 x y) OO\n       (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y'))\n      ((\\<lambda>x (x', y). x' = x \\<and> L2 x y) OO\n       (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y'))\n      ((\\<lambda>x (x', y). x' = x \\<and> L3 x y) OO\n       (\\<lambda>(x, y) y'. y = y' \\<and> L3 x y'))\n      (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3') (Contra1 OO Contra1')\n      (Contra2 OO Contra2') (Contra3 OO Contra3')\n     \\<le> rel_F (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n            (\\<lambda>x (x', y). x' = x \\<and> L2 x y)\n            (\\<lambda>x (x', y). x' = x \\<and> L3 x y) Co1 Co2 Co3 Contra1\n            Contra2 Contra3 OO\n           rel_F (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n            (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y')\n            (\\<lambda>(x, y) y'. y = y' \\<and> L3 x y') Co1' Co2' Co3'\n            Contra1' Contra2' Contra3'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_F\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L1 rel_F_witness y)\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L2 rel_F_witness y)\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L3 rel_F_witness y)\n                          Co1 Co2 Co3 Contra1 Contra2 Contra3 y x \\<and>\n                         rel_F\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L1 rel_F_witness y)\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L2 rel_F_witness y)\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L3 rel_F_witness y)\n                          Co1' Co2' Co3' Contra1' Contra2' Contra3' x xq_", "apply(drule predicate2D)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n     (Contra1 OO Contra1') (Contra2 OO Contra2') (Contra3 OO Contra3') y\n     xq_ \\<Longrightarrow>\n    rel_F\n     ((\\<lambda>x (x', y). x' = x \\<and> L1 x y) OO\n      (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y'))\n     ((\\<lambda>x (x', y). x' = x \\<and> L2 x y) OO\n      (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y'))\n     ((\\<lambda>x (x', y). x' = x \\<and> L3 x y) OO\n      (\\<lambda>(x, y) y'. y = y' \\<and> L3 x y'))\n     (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3') (Contra1 OO Contra1')\n     (Contra2 OO Contra2') (Contra3 OO Contra3') ?x2 ?y2\n 2. \\<lbrakk>rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n              (Contra1 OO Contra1') (Contra2 OO Contra2')\n              (Contra3 OO Contra3') y xq_;\n     (rel_F (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n       (\\<lambda>x (x', y). x' = x \\<and> L2 x y)\n       (\\<lambda>x (x', y). x' = x \\<and> L3 x y) Co1 Co2 Co3 Contra1\n       Contra2 Contra3 OO\n      rel_F (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n       (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y')\n       (\\<lambda>(x, y) y'. y = y' \\<and> L3 x y') Co1' Co2' Co3' Contra1'\n       Contra2' Contra3')\n      ?x2 ?y2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_F\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L1 rel_F_witness y)\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L2 rel_F_witness y)\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L3 rel_F_witness y)\n                          Co1 Co2 Co3 Contra1 Contra2 Contra3 y x \\<and>\n                         rel_F\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L1 rel_F_witness y)\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L2 rel_F_witness y)\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L3 rel_F_witness y)\n                          Co1' Co2' Co3' Contra1' Contra2' Contra3' x xq_", "apply(erule rel_F_mono[THEN predicate2D, rotated -1]; fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n              (Contra1 OO Contra1') (Contra2 OO Contra2')\n              (Contra3 OO Contra3') y xq_;\n     (rel_F (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n       (\\<lambda>x (x', y). x' = x \\<and> L2 x y)\n       (\\<lambda>x (x', y). x' = x \\<and> L3 x y) Co1 Co2 Co3 Contra1\n       Contra2 Contra3 OO\n      rel_F (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n       (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y')\n       (\\<lambda>(x, y) y'. y = y' \\<and> L3 x y') Co1' Co2' Co3' Contra1'\n       Contra2' Contra3')\n      y xq_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_F\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L1 rel_F_witness y)\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L2 rel_F_witness y)\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L3 rel_F_witness y)\n                          Co1 Co2 Co3 Contra1 Contra2 Contra3 y x \\<and>\n                         rel_F\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L1 rel_F_witness y)\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L2 rel_F_witness y)\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L3 rel_F_witness y)\n                          Co1' Co2' Co3' Contra1' Contra2' Contra3' x xq_", "apply(erule relcomppE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n                 (Contra1 OO Contra1') (Contra2 OO Contra2')\n                 (Contra3 OO Contra3') y xq_;\n        rel_F (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L3 x y) Co1 Co2 Co3 Contra1\n         Contra2 Contra3 y b;\n        rel_F (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L3 x y') Co1' Co2' Co3' Contra1'\n         Contra2' Contra3' b xq_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            rel_F\n                             (\\<lambda>rel_F_witness (x', y).\n                                 x' = rel_F_witness \\<and>\n                                 L1 rel_F_witness y)\n                             (\\<lambda>rel_F_witness (x', y).\n                                 x' = rel_F_witness \\<and>\n                                 L2 rel_F_witness y)\n                             (\\<lambda>rel_F_witness (x', y).\n                                 x' = rel_F_witness \\<and>\n                                 L3 rel_F_witness y)\n                             Co1 Co2 Co3 Contra1 Contra2 Contra3 y x \\<and>\n                            rel_F\n                             (\\<lambda>(rel_F_witness, y') y.\n                                 y' = y \\<and> L1 rel_F_witness y)\n                             (\\<lambda>(rel_F_witness, y') y.\n                                 y' = y \\<and> L2 rel_F_witness y)\n                             (\\<lambda>(rel_F_witness, y') y.\n                                 y' = y \\<and> L3 rel_F_witness y)\n                             Co1' Co2' Co3' Contra1' Contra2' Contra3' x xq_", "apply(rule exI conjI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n                 (Contra1 OO Contra1') (Contra2 OO Contra2')\n                 (Contra3 OO Contra3') y xq_;\n        rel_F (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L3 x y) Co1 Co2 Co3 Contra1\n         Contra2 Contra3 y b;\n        rel_F (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L3 x y') Co1' Co2' Co3' Contra1'\n         Contra2' Contra3' b xq_\\<rbrakk>\n       \\<Longrightarrow> rel_F\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L1 rel_F_witness y)\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L2 rel_F_witness y)\n                          (\\<lambda>rel_F_witness (x', y).\n                              x' = rel_F_witness \\<and> L3 rel_F_witness y)\n                          Co1 Co2 Co3 Contra1 Contra2 Contra3 y (?x170 b)\n 2. \\<And>b.\n       \\<lbrakk>rel_F L1 L2 L3 (Co1 OO Co1') (Co2 OO Co2') (Co3 OO Co3')\n                 (Contra1 OO Contra1') (Contra2 OO Contra2')\n                 (Contra3 OO Contra3') y xq_;\n        rel_F (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L3 x y) Co1 Co2 Co3 Contra1\n         Contra2 Contra3 y b;\n        rel_F (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L3 x y') Co1' Co2' Co3' Contra1'\n         Contra2' Contra3' b xq_\\<rbrakk>\n       \\<Longrightarrow> rel_F\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L1 rel_F_witness y)\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L2 rel_F_witness y)\n                          (\\<lambda>(rel_F_witness, y') y.\n                              y' = y \\<and> L3 rel_F_witness y)\n                          Co1' Co2' Co3' Contra1' Contra2' Contra3'\n                          (?x170 b) xq_", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Second abstract \\BNFCC{}\\<close>"], ["", "subsubsection \\<open>Axioms and basic definitions\\<close>"], ["", "typedecl ('l1, 'l2, 'co1, 'co2, 'contra1, 'contra2, 'f) G"], ["", "text \\<open>@{type G} has each two live, co, and contravariant parameters, and one fixed parameter.\\<close>"], ["", "consts\n  rel_G :: \"('l1 \\<Rightarrow> 'l1' \\<Rightarrow> bool) \\<Rightarrow> ('l2 \\<Rightarrow> 'l2' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool) \\<Rightarrow> ('co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool) \\<Rightarrow> ('contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool) \\<Rightarrow>\n    ('l1, 'l2, 'co1, 'co2, 'contra1, 'contra2, 'f) G \\<Rightarrow>\n    ('l1', 'l2', 'co1', 'co2', 'contra1', 'contra2', 'f) G \\<Rightarrow> bool\"\n  map_G :: \"('l1 \\<Rightarrow> 'l1') \\<Rightarrow> ('l2 \\<Rightarrow> 'l2') \\<Rightarrow>\n    ('co1 \\<Rightarrow> 'co1') \\<Rightarrow> ('co2 \\<Rightarrow> 'co2') \\<Rightarrow>\n    ('contra1' \\<Rightarrow> 'contra1) \\<Rightarrow> ('contra2' \\<Rightarrow> 'contra2) \\<Rightarrow>\n    ('l1, 'l2, 'co1, 'co2, 'contra1, 'contra2, 'f) G \\<Rightarrow>\n    ('l1', 'l2', 'co1', 'co2', 'contra1', 'contra2', 'f) G\""], ["", "axiomatization where\n  rel_G_mono [mono]:\n  \"\\<And>L1 L1' L2 L2' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'.\n    \\<lbrakk> L1 \\<le> L1'; L2 \\<le> L2'; Co1 \\<le> Co1'; Co2 \\<le> Co2'; Contra1' \\<le> Contra1; Contra2' \\<le> Contra2 \\<rbrakk> \\<Longrightarrow>\n    rel_G L1 L2 Co1 Co2 Contra1 Contra2 \\<le> rel_G L1' L2' Co1' Co2' Contra1' Contra2'\" and\n  rel_G_eq: \"rel_G (=) (=) (=) (=) (=) (=) = (=)\" and\n  rel_G_conversep: \"\\<And>L1 L2 Co1 Co2 Contra1 Contra2.\n    rel_G L1\\<inverse>\\<inverse> L2\\<inverse>\\<inverse> Co1\\<inverse>\\<inverse> Co2\\<inverse>\\<inverse> Contra1\\<inverse>\\<inverse> Contra2\\<inverse>\\<inverse> = (rel_G L1 L2 Co1 Co2 Contra1 Contra2)\\<inverse>\\<inverse>\" and\n  map_G_id0: \"map_G id id id id id id = id\" and\n  map_G_comp: \"\\<And>l1 l1' l2 l2' co1 co1' co2 co2' contra1 contra1' contra2 contra2'.\n    map_G l1 l2 co1 co2 contra1 contra2 \\<circ> map_G l1' l2' co1' co2' contra1' contra2' =\n      map_G (l1 \\<circ> l1') (l2 \\<circ> l2') (co1 \\<circ> co1') (co2 \\<circ> co2')\n      (contra1' \\<circ> contra1) (contra2' \\<circ> contra2)\" and\n  map_G_parametric:\n  \"\\<And>L1 L1' L2 L2' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'.\n    rel_fun (rel_fun L1 L1') (rel_fun (rel_fun L2 L2')\n      (rel_fun (rel_fun Co1 Co1') (rel_fun (rel_fun Co2 Co2')\n      (rel_fun (rel_fun Contra1' Contra1) (rel_fun (rel_fun Contra2' Contra2)\n      (rel_fun (rel_G L1 L2 Co1 Co2 Contra1 Contra2)\n      (rel_G L1' L2' Co1' Co2' Contra1' Contra2')))))))\n      map_G map_G\""], ["", "definition rel_G_pos_distr_cond :: \"('co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool) \\<Rightarrow> ('co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool) \\<Rightarrow> ('co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool) \\<Rightarrow> ('contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool) \\<Rightarrow> ('contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('l1 \\<times> 'l1' \\<times> 'l1'' \\<times> 'l2 \\<times> 'l2' \\<times> 'l2'' \\<times> 'f) itself \\<Rightarrow> bool\" where\n  \"rel_G_pos_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' _ \\<longleftrightarrow>\n  (\\<forall>(L1 :: 'l1 \\<Rightarrow> 'l1' \\<Rightarrow> bool) (L1' :: 'l1' \\<Rightarrow> 'l1'' \\<Rightarrow> bool)\n    (L2 :: 'l2 \\<Rightarrow> 'l2' \\<Rightarrow> bool) (L2' :: 'l2' \\<Rightarrow> 'l2'' \\<Rightarrow> bool).\n    (rel_G L1 L2 Co1 Co2 Contra1 Contra2 :: (_, _, _, _, _, _, 'f) G \\<Rightarrow> _) OO\n      rel_G L1' L2' Co1' Co2' Contra1' Contra2' \\<le>\n    rel_G (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n      (Contra1 OO Contra1') (Contra2 OO Contra2'))\""], ["", "definition rel_G_neg_distr_cond :: \"('co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool) \\<Rightarrow> ('co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool) \\<Rightarrow> ('co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool) \\<Rightarrow> ('contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool) \\<Rightarrow> ('contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('l1 \\<times> 'l1' \\<times> 'l1'' \\<times> 'l2 \\<times> 'l2' \\<times> 'l2'' \\<times> 'f) itself \\<Rightarrow> bool\" where\n  \"rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' _ \\<longleftrightarrow>\n  (\\<forall>(L1 :: 'l1 \\<Rightarrow> 'l1' \\<Rightarrow> bool) (L1' :: 'l1' \\<Rightarrow> 'l1'' \\<Rightarrow> bool)\n    (L2 :: 'l2 \\<Rightarrow> 'l2' \\<Rightarrow> bool) (L2' :: 'l2' \\<Rightarrow> 'l2'' \\<Rightarrow> bool).\n    rel_G (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n      (Contra1 OO Contra1') (Contra2 OO Contra2') \\<le>\n    (rel_G L1 L2 Co1 Co2 Contra1 Contra2 :: (_, _, _, _, _, _, 'f) G \\<Rightarrow> _) OO\n      rel_G L1' L2' Co1' Co2' Contra1' Contra2')\""], ["", "axiomatization where\n  rel_G_pos_distr_cond_eq:\n  \"\\<And>tytok. rel_G_pos_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) tytok\" and\n  rel_G_neg_distr_cond_eq:\n  \"\\<And>tytok. rel_G_neg_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) tytok\""], ["", "text \\<open>Restrictions to live variables.\\<close>"], ["", "definition \"rell_G L1 L2 = rel_G L1 L2 (=) (=) (=) (=)\""], ["", "definition \"mapl_G l1 l2 = map_G l1 l2 id id id id\""], ["", "typedecl ('co1, 'co2, 'contra1, 'contra2, 'f) Gbd"], ["", "consts\n  set1_G :: \"('l1, 'l2, 'co1, 'co2, 'contra1, 'contra2, 'f) G \\<Rightarrow> 'l1 set\"\n  set2_G :: \"('l1, 'l2, 'co1, 'co2, 'contra1, 'contra2, 'f) G \\<Rightarrow> 'l2 set\"\n  bd_G :: \"('co1, 'co2, 'contra1, 'contra2, 'f) Gbd rel\"\n  wit_G :: \"'l2 \\<Rightarrow> ('l1, 'l2, 'co1, 'co2, 'contra1, 'contra2, 'f) G\"\n    \\<comment> \\<open>non-emptiness witness for least fixpoint\\<close>"], ["", "axiomatization where\n  set1_G_map: \"\\<And>l1 l2. set1_G \\<circ> mapl_G l1 l2 = image l1 \\<circ> set1_G\" and\n  set2_G_map: \"\\<And>l1 l2. set2_G \\<circ> mapl_G l1 l2 = image l2 \\<circ> set2_G\" and\n  bd_G_card_order: \"card_order bd_G\" and\n  bd_G_cinfinite: \"cinfinite bd_G\" and\n  set1_G_bound: \"\\<And>x :: (_, _, 'co1, 'co2, 'contra1, 'contra2, 'f) G.\n    card_of (set1_G x) \\<le>o (bd_G :: ('co1, 'co2, 'contra1, 'contra2, 'f) Gbd rel)\" and\n  set2_G_bound: \"\\<And>x :: (_, _, 'co1, 'co2, 'contra1, 'contra2, 'f) G.\n    card_of (set2_G x) \\<le>o (bd_G :: ('co1, 'co2, 'contra1, 'contra2, 'f) Gbd rel)\" and\n  mapl_G_cong: \"\\<And>l1 l1' l2 l2' l3 l3' x.\n    \\<lbrakk> \\<And>z. z \\<in> set1_G x \\<Longrightarrow> l1 z = l1' z; \\<And>z. z \\<in> set2_G x \\<Longrightarrow> l2 z = l2' z \\<rbrakk> \\<Longrightarrow>\n    mapl_G l1 l2 x = mapl_G l1' l2' x\" and\n  rell_G_mono_strong: \"\\<And>L1 L1' L2 L2' x y.\n    \\<lbrakk> rell_G L1 L2 x y;\n      \\<And>a b. a \\<in> set1_G x \\<Longrightarrow> b \\<in> set1_G y \\<Longrightarrow> L1 a b \\<Longrightarrow> L1' a b;\n      \\<And>a b. a \\<in> set2_G x \\<Longrightarrow> b \\<in> set2_G y \\<Longrightarrow> L2 a b \\<Longrightarrow> L2' a b \\<rbrakk> \\<Longrightarrow>\n    rell_G L1' L2' x y\" and\n  wit_G_set1: \"\\<And>l2 x. x \\<in> set1_G (wit_G l2) \\<Longrightarrow> False\" and\n  wit_G_set2: \"\\<And>l2 x. x \\<in> set2_G (wit_G l2) \\<Longrightarrow> x = l2\""], ["", "subsubsection \\<open>Derived rules\\<close>"], ["", "lemmas rel_G_mono' = rel_G_mono[THEN predicate2D, rotated -1]"], ["", "lemma rel_G_eq_refl: \"rel_G (=) (=) (=) (=) (=) (=) x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_G (=) (=) (=) (=) (=) (=) x x", "by (simp add: rel_G_eq)"], ["", "lemma map_G_id: \"map_G id id id id id id x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_G id id id id id id x = x", "by (simp add: map_G_id0)"], ["", "lemmas map_G_rel_cong = map_G_parametric[unfolded rel_fun_def, rule_format, rotated -1]"], ["", "lemma rell_G_mono: \"\\<lbrakk> L1 \\<le> L1'; L2 \\<le> L2' \\<rbrakk> \\<Longrightarrow> rell_G L1 L2 \\<le> rell_G L1' L2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>L1 \\<le> L1'; L2 \\<le> L2'\\<rbrakk>\n    \\<Longrightarrow> rell_G L1 L2 \\<le> rell_G L1' L2'", "unfolding rell_G_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>L1 \\<le> L1'; L2 \\<le> L2'\\<rbrakk>\n    \\<Longrightarrow> rel_G L1 L2 (=) (=) (=) (=)\n                      \\<le> rel_G L1' L2' (=) (=) (=) (=)", "by (rule rel_G_mono) (auto)"], ["", "lemma mapl_G_id0: \"mapl_G id id = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapl_G id id = id", "unfolding mapl_G_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_G id id id id id id = id", "using map_G_id0"], ["proof (prove)\nusing this:\n  map_G id id id id id id = id\n\ngoal (1 subgoal):\n 1. map_G id id id id id id = id", "."], ["", "lemma mapl_G_id: \"mapl_G id id x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapl_G id id x = x", "by (simp add: mapl_G_id0)"], ["", "lemma mapl_G_comp: \"mapl_G l1 l2 \\<circ> mapl_G l1' l2' = mapl_G (l1 \\<circ> l1') (l2 \\<circ> l2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapl_G l1 l2 \\<circ> mapl_G l1' l2' =\n    mapl_G (l1 \\<circ> l1') (l2 \\<circ> l2')", "unfolding mapl_G_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_G l1 l2 id id id id \\<circ> map_G l1' l2' id id id id =\n    map_G (l1 \\<circ> l1') (l2 \\<circ> l2') id id id id", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. map_G l1 l2 id id id id \\<circ> map_G l1' l2' id id id id = ?s\n 2. ?s = map_G (l1 \\<circ> l1') (l2 \\<circ> l2') id id id id", "apply (rule map_G_comp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_G (l1 \\<circ> l1') (l2 \\<circ> l2') (id \\<circ> id) (id \\<circ> id)\n     (id \\<circ> id) (id \\<circ> id) =\n    map_G (l1 \\<circ> l1') (l2 \\<circ> l2') id id id id", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_G_mapl_G:\n  \"map_G l1 l2 co1 co2 contra1 contra2 x = map_G id id co1 co2 contra1 contra2 (mapl_G l1 l2 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_G l1 l2 co1 co2 contra1 contra2 x =\n    map_G id id co1 co2 contra1 contra2 (mapl_G l1 l2 x)", "unfolding mapl_G_def map_G_comp[THEN fun_cong, simplified]"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_G l1 l2 co1 co2 contra1 contra2 x =\n    map_G (id \\<circ> l1) (id \\<circ> l2) (co1 \\<circ> id) (co2 \\<circ> id)\n     (id \\<circ> contra1) (id \\<circ> contra2) x", "by simp"], ["", "lemma mapl_G_map_G:\n  \"mapl_G l1 l2 (map_G id id co1 co2 contra1 contra2 x) = map_G l1 l2 co1 co2 contra1 contra2 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapl_G l1 l2 (map_G id id co1 co2 contra1 contra2 x) =\n    map_G l1 l2 co1 co2 contra1 contra2 x", "unfolding mapl_G_def map_G_comp[THEN fun_cong, simplified]"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_G (l1 \\<circ> id) (l2 \\<circ> id) (id \\<circ> co1) (id \\<circ> co2)\n     (contra1 \\<circ> id) (contra2 \\<circ> id) x =\n    map_G l1 l2 co1 co2 contra1 contra2 x", "by simp"], ["", "text \\<open>Parametric mappers are unique:\\<close>"], ["", "lemma rel_G_Grp_weak: \"rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n  (Grp UNIV contra1)\\<inverse>\\<inverse> (Grp UNIV contra2)\\<inverse>\\<inverse> = Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n     (Grp UNIV contra1)\\<inverse>\\<inverse>\n     (Grp UNIV contra2)\\<inverse>\\<inverse> =\n    Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2)", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n     (Grp UNIV contra1)\\<inverse>\\<inverse>\n     (Grp UNIV contra2)\\<inverse>\\<inverse>\n    \\<le> Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2)\n 2. Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2)\n    \\<le> rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>", "apply (rule predicate2I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n        (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2) x y\n 2. Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2)\n    \\<le> rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>", "apply (rule GrpI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n        (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       map_G l1 l2 co1 co2 contra1 contra2 x = y\n 2. \\<And>x y.\n       rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n        (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       x \\<in> UNIV\n 3. Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2)\n    \\<le> rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>", "apply (rewrite in \"_ = \\<hole>\" map_G_id[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n        (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       map_G l1 l2 co1 co2 contra1 contra2 x = map_G id id id id id id y\n 2. \\<And>x y.\n       rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n        (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       x \\<in> UNIV\n 3. Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2)\n    \\<le> rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>", "apply (subst rel_G_eq[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n        (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       rel_G (=) (=) (=) (=) (=) (=) (map_G l1 l2 co1 co2 contra1 contra2 x)\n        (map_G id id id id id id y)\n 2. \\<And>x y.\n       rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n        (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       x \\<in> UNIV\n 3. Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2)\n    \\<le> rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>", "apply (erule map_G_rel_cong; simp add: Grp_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n        (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse> x y \\<Longrightarrow>\n       x \\<in> UNIV\n 2. Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2)\n    \\<le> rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>", "apply (rule UNIV_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2)\n    \\<le> rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n           (Grp UNIV contra1)\\<inverse>\\<inverse>\n           (Grp UNIV contra2)\\<inverse>\\<inverse>", "apply (rule predicate2I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       Grp UNIV (map_G l1 l2 co1 co2 contra1 contra2) x y \\<Longrightarrow>\n       rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n        (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse> x y", "apply (erule GrpE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>map_G l1 l2 co1 co2 contra1 contra2 x = y;\n        x \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1)\n                          (Grp UNIV co2)\n                          (Grp UNIV contra1)\\<inverse>\\<inverse>\n                          (Grp UNIV contra2)\\<inverse>\\<inverse> x y", "apply (drule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV;\n        y = map_G l1 l2 co1 co2 contra1 contra2 x\\<rbrakk>\n       \\<Longrightarrow> rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1)\n                          (Grp UNIV co2)\n                          (Grp UNIV contra1)\\<inverse>\\<inverse>\n                          (Grp UNIV contra2)\\<inverse>\\<inverse> x y", "apply (hypsubst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<in> UNIV \\<Longrightarrow>\n       rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n        (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse> x\n        (map_G l1 l2 co1 co2 contra1 contra2 x)", "apply (rewrite in \"rel_G _ _ _ _ _ _ \\<hole>\" map_G_id[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<in> UNIV \\<Longrightarrow>\n       rel_G (Grp UNIV l1) (Grp UNIV l2) (Grp UNIV co1) (Grp UNIV co2)\n        (Grp UNIV contra1)\\<inverse>\\<inverse>\n        (Grp UNIV contra2)\\<inverse>\\<inverse> (map_G id id id id id id x)\n        (map_G l1 l2 co1 co2 contra1 contra2 x)", "apply (rule map_G_rel_cong)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x y.\n       x \\<in> UNIV \\<Longrightarrow>\n       rel_G (?L1.105 x y) (?L2.105 x y) (?Co1.105 x y) (?Co2.105 x y)\n        (?Contra1.105 x y) (?Contra2.105 x y) x x\n 2. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; ?L1.105 x y xa ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV l1 (id xa) (l1 ya)\n 3. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; ?L2.105 x y xa ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV l2 (id xa) (l2 ya)\n 4. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; ?Co1.105 x y xa ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV co1 (id xa) (co1 ya)\n 5. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; ?Co2.105 x y xa ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV co2 (id xa) (co2 ya)\n 6. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV;\n        (Grp UNIV contra1)\\<inverse>\\<inverse> xa ya\\<rbrakk>\n       \\<Longrightarrow> ?Contra1.105 x y (id xa) (contra1 ya)\n 7. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV;\n        (Grp UNIV contra2)\\<inverse>\\<inverse> xa ya\\<rbrakk>\n       \\<Longrightarrow> ?Contra2.105 x y (id xa) (contra2 ya)", "apply (rule rel_G_eq_refl)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; xa = ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV l1 (id xa) (l1 ya)\n 2. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; xa = ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV l2 (id xa) (l2 ya)\n 3. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; xa = ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV co1 (id xa) (co1 ya)\n 4. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV; xa = ya\\<rbrakk>\n       \\<Longrightarrow> Grp UNIV co2 (id xa) (co2 ya)\n 5. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV;\n        (Grp UNIV contra1)\\<inverse>\\<inverse> xa ya\\<rbrakk>\n       \\<Longrightarrow> id xa = contra1 ya\n 6. \\<And>x y xa ya.\n       \\<lbrakk>x \\<in> UNIV;\n        (Grp UNIV contra2)\\<inverse>\\<inverse> xa ya\\<rbrakk>\n       \\<Longrightarrow> id xa = contra2 ya", "apply (simp_all add: Grp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas\n  rel_G_pos_distr = rel_G_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_G_neg_distr = rel_G_neg_distr_cond_def[THEN iffD1, rule_format]"], ["", "lemma rell_G_compp:\n  \"rell_G (L1 OO L1') (L2 OO L2') = rell_G L1 L2 OO rell_G L1' L2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_G (L1 OO L1') (L2 OO L2') = rell_G L1 L2 OO rell_G L1' L2'", "unfolding rell_G_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=) =\n    rel_G L1 L2 (=) (=) (=) (=) OO rel_G L1' L2' (=) (=) (=) (=)", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=)\n    \\<le> rel_G L1 L2 (=) (=) (=) (=) OO rel_G L1' L2' (=) (=) (=) (=)\n 2. rel_G L1 L2 (=) (=) (=) (=) OO rel_G L1' L2' (=) (=) (=) (=)\n    \\<le> rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=)", "apply (rule order_trans[rotated])"], ["proof (prove)\ngoal (3 subgoals):\n 1. ?y3 \\<le> rel_G L1 L2 (=) (=) (=) (=) OO rel_G L1' L2' (=) (=) (=) (=)\n 2. rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=) \\<le> ?y3\n 3. rel_G L1 L2 (=) (=) (=) (=) OO rel_G L1' L2' (=) (=) (=) (=)\n    \\<le> rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=)", "apply (rule rel_G_neg_distr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. rel_G_neg_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) ?uu6\n 2. rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=)\n    \\<le> rel_G (L1 OO L1') (L2 OO L2') ((=) OO (=)) ((=) OO (=))\n           ((=) OO (=)) ((=) OO (=))\n 3. rel_G L1 L2 (=) (=) (=) (=) OO rel_G L1' L2' (=) (=) (=) (=)\n    \\<le> rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=)", "apply (rule rel_G_neg_distr_cond_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=)\n    \\<le> rel_G (L1 OO L1') (L2 OO L2') ((=) OO (=)) ((=) OO (=))\n           ((=) OO (=)) ((=) OO (=))\n 2. rel_G L1 L2 (=) (=) (=) (=) OO rel_G L1' L2' (=) (=) (=) (=)\n    \\<le> rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=)", "apply (simp add: eq_OO)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_G L1 L2 (=) (=) (=) (=) OO rel_G L1' L2' (=) (=) (=) (=)\n    \\<le> rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=)", "apply (rule order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_G L1 L2 (=) (=) (=) (=) OO rel_G L1' L2' (=) (=) (=) (=) \\<le> ?y9\n 2. ?y9 \\<le> rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=)", "apply (rule rel_G_pos_distr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_G_pos_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) ?uu12\n 2. rel_G (L1 OO L1') (L2 OO L2') ((=) OO (=)) ((=) OO (=)) ((=) OO (=))\n     ((=) OO (=))\n    \\<le> rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=)", "apply (rule rel_G_pos_distr_cond_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_G (L1 OO L1') (L2 OO L2') ((=) OO (=)) ((=) OO (=)) ((=) OO (=))\n     ((=) OO (=))\n    \\<le> rel_G (L1 OO L1') (L2 OO L2') (=) (=) (=) (=)", "apply (simp add: eq_OO)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>G is a BNF\\<close>"], ["", "lemma rell_G_eq_onp:\n  \"rell_G (eq_onp P1) (eq_onp P2) = eq_onp (\\<lambda>x. (\\<forall>z\\<in>set1_G x. P1 z) \\<and> (\\<forall>z\\<in>set2_G x. P2 z))\"\n  (is \"?rel_eq_onp = ?eq_onp_pred\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_G (eq_onp P1) (eq_onp P2) =\n    eq_onp\n     (\\<lambda>x.\n         (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n         (\\<forall>z\\<in>set2_G x. P2 z))", "proof (intro ext iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "fix x y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "assume rel: \"?rel_eq_onp x y\""], ["proof (state)\nthis:\n  rell_G (eq_onp P1) (eq_onp P2) x y\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "from rel"], ["proof (chain)\npicking this:\n  rell_G (eq_onp P1) (eq_onp P2) x y", "have \"rell_G (=) (=) x y\""], ["proof (prove)\nusing this:\n  rell_G (eq_onp P1) (eq_onp P2) x y\n\ngoal (1 subgoal):\n 1. rell_G (=) (=) x y", "unfolding rell_G_def"], ["proof (prove)\nusing this:\n  rel_G (eq_onp P1) (eq_onp P2) (=) (=) (=) (=) x y\n\ngoal (1 subgoal):\n 1. rel_G (=) (=) (=) (=) (=) (=) x y", "by (auto elim: rel_G_mono' simp add: eq_onp_def)"], ["proof (state)\nthis:\n  rell_G (=) (=) x y\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "then"], ["proof (chain)\npicking this:\n  rell_G (=) (=) x y", "have \"y = x\""], ["proof (prove)\nusing this:\n  rell_G (=) (=) x y\n\ngoal (1 subgoal):\n 1. y = x", "unfolding rell_G_def rel_G_eq"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. y = x", ".."], ["proof (state)\nthis:\n  y = x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "let ?true = \"\\<lambda>_. True\" and ?label = \"\\<lambda>P x. P x\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "from rel"], ["proof (chain)\npicking this:\n  rell_G (eq_onp P1) (eq_onp P2) x y", "have \"rell_G (=) (=) (mapl_G ?true ?true x) (mapl_G (?label P1) (?label P2) x)\""], ["proof (prove)\nusing this:\n  rell_G (eq_onp P1) (eq_onp P2) x y\n\ngoal (1 subgoal):\n 1. rell_G (=) (=) (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x)\n     (mapl_G P1 P2 x)", "unfolding rell_G_def mapl_G_def \\<open>y = x\\<close>"], ["proof (prove)\nusing this:\n  rel_G (eq_onp P1) (eq_onp P2) (=) (=) (=) (=) x x\n\ngoal (1 subgoal):\n 1. rel_G (=) (=) (=) (=) (=) (=)\n     (map_G (\\<lambda>_. True) (\\<lambda>_. True) id id id id x)\n     (map_G P1 P2 id id id id x)", "by (auto simp add: eq_onp_def elim: map_G_rel_cong)"], ["proof (state)\nthis:\n  rell_G (=) (=) (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x)\n   (mapl_G P1 P2 x)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "then"], ["proof (chain)\npicking this:\n  rell_G (=) (=) (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x)\n   (mapl_G P1 P2 x)", "have *: \"mapl_G ?true ?true x = mapl_G (?label P1) (?label P2) x\""], ["proof (prove)\nusing this:\n  rell_G (=) (=) (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x)\n   (mapl_G P1 P2 x)\n\ngoal (1 subgoal):\n 1. mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x = mapl_G P1 P2 x", "unfolding rell_G_def rel_G_eq"], ["proof (prove)\nusing this:\n  mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x = mapl_G P1 P2 x\n\ngoal (1 subgoal):\n 1. mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x = mapl_G P1 P2 x", "."], ["proof (state)\nthis:\n  mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x = mapl_G P1 P2 x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "note \\<open>y = x\\<close>"], ["proof (state)\nthis:\n  y = x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "moreover"], ["proof (state)\nthis:\n  y = x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "{"], ["proof (state)\nthis:\n  y = x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "from *"], ["proof (chain)\npicking this:\n  mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x = mapl_G P1 P2 x", "have \"set1_G (mapl_G ?true ?true x) = set1_G (mapl_G (?label P1) (?label P2) x)\""], ["proof (prove)\nusing this:\n  mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x = mapl_G P1 P2 x\n\ngoal (1 subgoal):\n 1. set1_G (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x) =\n    set1_G (mapl_G P1 P2 x)", "by simp"], ["proof (state)\nthis:\n  set1_G (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set1_G (mapl_G P1 P2 x)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "then"], ["proof (chain)\npicking this:\n  set1_G (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set1_G (mapl_G P1 P2 x)", "have \"?true ` set1_G x = ?label P1 ` set1_G x\""], ["proof (prove)\nusing this:\n  set1_G (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set1_G (mapl_G P1 P2 x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>_. True) ` set1_G x = P1 ` set1_G x", "unfolding set1_G_map[THEN fun_cong, simplified]"], ["proof (prove)\nusing this:\n  (\\<lambda>_. True) ` set1_G x = P1 ` set1_G x\n\ngoal (1 subgoal):\n 1. (\\<lambda>_. True) ` set1_G x = P1 ` set1_G x", "."], ["proof (state)\nthis:\n  (\\<lambda>_. True) ` set1_G x = P1 ` set1_G x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>_. True) ` set1_G x = P1 ` set1_G x", "have \"\\<forall>z\\<in>set1_G x. P1 z\""], ["proof (prove)\nusing this:\n  (\\<lambda>_. True) ` set1_G x = P1 ` set1_G x\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>set1_G x. P1 z", "by auto"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set1_G x. P1 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "}"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set1_G x. P1 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "moreover"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set1_G x. P1 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "{"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set1_G x. P1 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "from *"], ["proof (chain)\npicking this:\n  mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x = mapl_G P1 P2 x", "have \"set2_G (mapl_G ?true ?true x) = set2_G (mapl_G (?label P1) (?label P2) x)\""], ["proof (prove)\nusing this:\n  mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x = mapl_G P1 P2 x\n\ngoal (1 subgoal):\n 1. set2_G (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x) =\n    set2_G (mapl_G P1 P2 x)", "by simp"], ["proof (state)\nthis:\n  set2_G (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set2_G (mapl_G P1 P2 x)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "then"], ["proof (chain)\npicking this:\n  set2_G (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set2_G (mapl_G P1 P2 x)", "have \"?true ` set2_G x = ?label P2 ` set2_G x\""], ["proof (prove)\nusing this:\n  set2_G (mapl_G (\\<lambda>_. True) (\\<lambda>_. True) x) =\n  set2_G (mapl_G P1 P2 x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>_. True) ` set2_G x = P2 ` set2_G x", "unfolding set2_G_map[THEN fun_cong, simplified]"], ["proof (prove)\nusing this:\n  (\\<lambda>_. True) ` set2_G x = P2 ` set2_G x\n\ngoal (1 subgoal):\n 1. (\\<lambda>_. True) ` set2_G x = P2 ` set2_G x", "."], ["proof (state)\nthis:\n  (\\<lambda>_. True) ` set2_G x = P2 ` set2_G x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>_. True) ` set2_G x = P2 ` set2_G x", "have \"\\<forall>z\\<in>set2_G x. P2 z\""], ["proof (prove)\nusing this:\n  (\\<lambda>_. True) ` set2_G x = P2 ` set2_G x\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>set2_G x. P2 z", "by auto"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set2_G x. P2 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "}"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set2_G x. P2 z\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       rell_G (eq_onp P1) (eq_onp P2) x xa \\<Longrightarrow>\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa\n 2. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "ultimately"], ["proof (chain)\npicking this:\n  y = x\n  \\<forall>z\\<in>set1_G x. P1 z\n  \\<forall>z\\<in>set2_G x. P2 z", "show \"?eq_onp_pred x y\""], ["proof (prove)\nusing this:\n  y = x\n  \\<forall>z\\<in>set1_G x. P1 z\n  \\<forall>z\\<in>set2_G x. P2 z\n\ngoal (1 subgoal):\n 1. eq_onp\n     (\\<lambda>x.\n         (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n         (\\<forall>z\\<in>set2_G x. P2 z))\n     x y", "by (simp add: eq_onp_def)"], ["proof (state)\nthis:\n  eq_onp\n   (\\<lambda>x.\n       (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n       (\\<forall>z\\<in>set2_G x. P2 z))\n   x y\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "assume eq_onp: \"?eq_onp_pred x y\""], ["proof (state)\nthis:\n  eq_onp\n   (\\<lambda>x.\n       (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n       (\\<forall>z\\<in>set2_G x. P2 z))\n   x y\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "then"], ["proof (chain)\npicking this:\n  eq_onp\n   (\\<lambda>x.\n       (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n       (\\<forall>z\\<in>set2_G x. P2 z))\n   x y", "have \"rell_G (=) (=) x y\""], ["proof (prove)\nusing this:\n  eq_onp\n   (\\<lambda>x.\n       (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n       (\\<forall>z\\<in>set2_G x. P2 z))\n   x y\n\ngoal (1 subgoal):\n 1. rell_G (=) (=) x y", "by (auto simp add: rell_G_def rel_G_eq eq_onp_def)"], ["proof (state)\nthis:\n  rell_G (=) (=) x y\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       eq_onp\n        (\\<lambda>x.\n            (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n            (\\<forall>z\\<in>set2_G x. P2 z))\n        x xa \\<Longrightarrow>\n       rell_G (eq_onp P1) (eq_onp P2) x xa", "then"], ["proof (chain)\npicking this:\n  rell_G (=) (=) x y", "show \"?rel_eq_onp x y\""], ["proof (prove)\nusing this:\n  rell_G (=) (=) x y\n\ngoal (1 subgoal):\n 1. rell_G (eq_onp P1) (eq_onp P2) x y", "using eq_onp"], ["proof (prove)\nusing this:\n  rell_G (=) (=) x y\n  eq_onp\n   (\\<lambda>x.\n       (\\<forall>z\\<in>set1_G x. P1 z) \\<and>\n       (\\<forall>z\\<in>set2_G x. P2 z))\n   x y\n\ngoal (1 subgoal):\n 1. rell_G (eq_onp P1) (eq_onp P2) x y", "by (auto elim!: rell_G_mono_strong simp add: eq_onp_def)"], ["proof (state)\nthis:\n  rell_G (eq_onp P1) (eq_onp P2) x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rell_G_Grp:\n  \"rell_G (Grp A1 f1) (Grp A2 f2) = Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2} (mapl_G f1 f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "have \"rell_G (Grp A1 f1) (Grp A2 f2) = rell_G (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n    (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    rell_G (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n     (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2)", "by (simp add: eq_onp_compp_Grp)"], ["proof (state)\nthis:\n  rell_G (Grp A1 f1) (Grp A2 f2) =\n  rell_G (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n   (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2)\n\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "also"], ["proof (state)\nthis:\n  rell_G (Grp A1 f1) (Grp A2 f2) =\n  rell_G (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n   (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2)\n\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "have \"... = rell_G (eq_onp (\\<lambda>x. x \\<in> A1)) (eq_onp (\\<lambda>x. x \\<in> A2)) OO\n    rell_G (Grp UNIV f1) (Grp UNIV f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_G (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n     (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2) =\n    rell_G (eq_onp (\\<lambda>x. x \\<in> A1))\n     (eq_onp (\\<lambda>x. x \\<in> A2)) OO\n    rell_G (Grp UNIV f1) (Grp UNIV f2)", "using rell_G_compp"], ["proof (prove)\nusing this:\n  rell_G (?L1.0 OO ?L1') (?L2.0 OO ?L2') =\n  rell_G ?L1.0 ?L2.0 OO rell_G ?L1' ?L2'\n\ngoal (1 subgoal):\n 1. rell_G (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n     (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2) =\n    rell_G (eq_onp (\\<lambda>x. x \\<in> A1))\n     (eq_onp (\\<lambda>x. x \\<in> A2)) OO\n    rell_G (Grp UNIV f1) (Grp UNIV f2)", "."], ["proof (state)\nthis:\n  rell_G (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n   (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2) =\n  rell_G (eq_onp (\\<lambda>x. x \\<in> A1))\n   (eq_onp (\\<lambda>x. x \\<in> A2)) OO\n  rell_G (Grp UNIV f1) (Grp UNIV f2)\n\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "also"], ["proof (state)\nthis:\n  rell_G (eq_onp (\\<lambda>x. x \\<in> A1) OO Grp UNIV f1)\n   (eq_onp (\\<lambda>x. x \\<in> A2) OO Grp UNIV f2) =\n  rell_G (eq_onp (\\<lambda>x. x \\<in> A1))\n   (eq_onp (\\<lambda>x. x \\<in> A2)) OO\n  rell_G (Grp UNIV f1) (Grp UNIV f2)\n\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "have \"... = eq_onp (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n    rell_G (Grp UNIV f1) (Grp UNIV f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_G (eq_onp (\\<lambda>x. x \\<in> A1))\n     (eq_onp (\\<lambda>x. x \\<in> A2)) OO\n    rell_G (Grp UNIV f1) (Grp UNIV f2) =\n    eq_onp\n     (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n    rell_G (Grp UNIV f1) (Grp UNIV f2)", "by (simp add: rell_G_eq_onp subset_eq)"], ["proof (state)\nthis:\n  rell_G (eq_onp (\\<lambda>x. x \\<in> A1))\n   (eq_onp (\\<lambda>x. x \\<in> A2)) OO\n  rell_G (Grp UNIV f1) (Grp UNIV f2) =\n  eq_onp\n   (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n  rell_G (Grp UNIV f1) (Grp UNIV f2)\n\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "also"], ["proof (state)\nthis:\n  rell_G (eq_onp (\\<lambda>x. x \\<in> A1))\n   (eq_onp (\\<lambda>x. x \\<in> A2)) OO\n  rell_G (Grp UNIV f1) (Grp UNIV f2) =\n  eq_onp\n   (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n  rell_G (Grp UNIV f1) (Grp UNIV f2)\n\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "have \"... = eq_onp (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO Grp UNIV (mapl_G f1 f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_onp\n     (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n    rell_G (Grp UNIV f1) (Grp UNIV f2) =\n    eq_onp\n     (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n    Grp UNIV (mapl_G f1 f2)", "unfolding rell_G_def mapl_G_def\n      rel_G_Grp_weak[of _ _ id id id id, folded eq_alt, simplified]"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_onp\n     (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n    Grp UNIV (map_G f1 f2 id id id id) =\n    eq_onp\n     (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n    Grp UNIV (map_G f1 f2 id id id id)", ".."], ["proof (state)\nthis:\n  eq_onp\n   (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n  rell_G (Grp UNIV f1) (Grp UNIV f2) =\n  eq_onp\n   (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n  Grp UNIV (mapl_G f1 f2)\n\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "also"], ["proof (state)\nthis:\n  eq_onp\n   (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n  rell_G (Grp UNIV f1) (Grp UNIV f2) =\n  eq_onp\n   (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n  Grp UNIV (mapl_G f1 f2)\n\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "have \"... = Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2} (mapl_G f1 f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_onp\n     (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n    Grp UNIV (mapl_G f1 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "by (simp add: eq_onp_compp_Grp)"], ["proof (state)\nthis:\n  eq_onp\n   (\\<lambda>x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2) OO\n  Grp UNIV (mapl_G f1 f2) =\n  Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n   (mapl_G f1 f2)\n\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "finally"], ["proof (chain)\npicking this:\n  rell_G (Grp A1 f1) (Grp A2 f2) =\n  Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n   (mapl_G f1 f2)", "show ?thesis"], ["proof (prove)\nusing this:\n  rell_G (Grp A1 f1) (Grp A2 f2) =\n  Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n   (mapl_G f1 f2)\n\ngoal (1 subgoal):\n 1. rell_G (Grp A1 f1) (Grp A2 f2) =\n    Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n     (mapl_G f1 f2)", "."], ["proof (state)\nthis:\n  rell_G (Grp A1 f1) (Grp A2 f2) =\n  Grp {x. set1_G x \\<subseteq> A1 \\<and> set2_G x \\<subseteq> A2}\n   (mapl_G f1 f2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rell_G_compp_Grp: \"rell_G L1 L2 =\n  (Grp {x. set1_G x \\<subseteq> {(x, y). L1 x y} \\<and> set2_G x \\<subseteq> {(x, y). L2 x y}} (mapl_G fst fst))\\<inverse>\\<inverse> OO\n  Grp {x. set1_G x \\<subseteq> {(x, y). L1 x y} \\<and> set2_G x \\<subseteq> {(x, y). L2 x y}} (mapl_G snd snd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_G L1 L2 =\n    (Grp {x. set1_G x \\<subseteq> {(x, y). L1 x y} \\<and>\n             set2_G x \\<subseteq> {(x, y). L2 x y}}\n      (mapl_G fst fst))\\<inverse>\\<inverse> OO\n    Grp {x. set1_G x \\<subseteq> {(x, y). L1 x y} \\<and>\n            set2_G x \\<subseteq> {(x, y). L2 x y}}\n     (mapl_G snd snd)", "apply (unfold rell_G_Grp[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_G L1 L2 =\n    (rell_G (Grp {(x, y). L1 x y} fst)\n      (Grp {(x, y). L2 x y} fst))\\<inverse>\\<inverse> OO\n    rell_G (Grp {(x, y). L1 x y} snd) (Grp {(x, y). L2 x y} snd)", "apply (unfold rell_G_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_G L1 L2 (=) (=) (=) (=) =\n    (rel_G (Grp {(x, y). L1 x y} fst) (Grp {(x, y). L2 x y} fst) (=) (=) (=)\n      (=))\\<inverse>\\<inverse> OO\n    rel_G (Grp {(x, y). L1 x y} snd) (Grp {(x, y). L2 x y} snd) (=) (=) (=)\n     (=)", "apply (simp add: rel_G_conversep[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_G L1 L2 (=) (=) (=) (=) =\n    rel_G (Grp {(x, y). L1 x y} fst)\\<inverse>\\<inverse>\n     (Grp {(x, y). L2 x y} fst)\\<inverse>\\<inverse> (=) (=) (=) (=) OO\n    rel_G (Grp {(x, y). L1 x y} snd) (Grp {(x, y). L2 x y} snd) (=) (=) (=)\n     (=)", "apply (fold rell_G_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_G L1 L2 =\n    rell_G (Grp {(x, y). L1 x y} fst)\\<inverse>\\<inverse>\n     (Grp {(x, y). L2 x y} fst)\\<inverse>\\<inverse> OO\n    rell_G (Grp {(x, y). L1 x y} snd) (Grp {(x, y). L2 x y} snd)", "apply (simp add: rell_G_compp[symmetric] Grp_fst_snd)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma G_in_rell: \"rell_G L1 L2 = (\\<lambda>x y. \\<exists>z. (set1_G z \\<subseteq> {(x, y). L1 x y} \\<and>\n  set2_G z \\<subseteq> {(x, y). L2 x y}) \\<and> mapl_G fst fst z = x \\<and> mapl_G snd snd z = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rell_G L1 L2 =\n    (\\<lambda>x y.\n        \\<exists>z.\n           (set1_G z \\<subseteq> {(x, y). L1 x y} \\<and>\n            set2_G z \\<subseteq> {(x, y). L2 x y}) \\<and>\n           mapl_G fst fst z = x \\<and> mapl_G snd snd z = y)", "using rell_G_compp_Grp"], ["proof (prove)\nusing this:\n  rell_G ?L1.0 ?L2.0 =\n  (Grp {x. set1_G x \\<subseteq> {(x, y). ?L1.0 x y} \\<and>\n           set2_G x \\<subseteq> {(x, y). ?L2.0 x y}}\n    (mapl_G fst fst))\\<inverse>\\<inverse> OO\n  Grp {x. set1_G x \\<subseteq> {(x, y). ?L1.0 x y} \\<and>\n          set2_G x \\<subseteq> {(x, y). ?L2.0 x y}}\n   (mapl_G snd snd)\n\ngoal (1 subgoal):\n 1. rell_G L1 L2 =\n    (\\<lambda>x y.\n        \\<exists>z.\n           (set1_G z \\<subseteq> {(x, y). L1 x y} \\<and>\n            set2_G z \\<subseteq> {(x, y). L2 x y}) \\<and>\n           mapl_G fst fst z = x \\<and> mapl_G snd snd z = y)", "by (simp add: OO_Grp_alt)"], ["", "bnf \"('l1, 'l2, 'co1, 'co2, 'contra1, 'contra2, 'f) G\"\n  map: mapl_G\n  sets: set1_G set2_G\n  bd: \"bd_G :: ('co1, 'co2, 'contra1, 'contra2, 'f) Gbd rel\"\n  wits: wit_G\n  rel: rell_G"], ["proof (prove)\ngoal (13 subgoals):\n 1. mapl_G id id = id\n 2. \\<And>f1 f2 g1 g2.\n       mapl_G (g1 \\<circ> f1) (g2 \\<circ> f2) =\n       mapl_G g1 g2 \\<circ> mapl_G f1 f2\n 3. \\<And>x f1 f2 g1 g2.\n       \\<lbrakk>\\<And>z1. z1 \\<in> set1_G x \\<Longrightarrow> f1 z1 = g1 z1;\n        \\<And>z2. z2 \\<in> set2_G x \\<Longrightarrow> f2 z2 = g2 z2\\<rbrakk>\n       \\<Longrightarrow> mapl_G f1 f2 x = mapl_G g1 g2 x\n 4. \\<And>f1 f2. set1_G \\<circ> mapl_G f1 f2 = (`) f1 \\<circ> set1_G\n 5. \\<And>f1 f2. set2_G \\<circ> mapl_G f1 f2 = (`) f2 \\<circ> set2_G\n 6. card_order bd_G\n 7. cinfinite bd_G\n 8. \\<And>x. |set1_G x| \\<le>o bd_G\n 9. \\<And>x. |set2_G x| \\<le>o bd_G\n 10. \\<And>R1 R2 S1 S2.\n        rell_G R1 R2 OO rell_G S1 S2 \\<le> rell_G (R1 OO S1) (R2 OO S2)\nA total of 13 subgoals...", "by (fact mapl_G_id0 mapl_G_comp[symmetric] mapl_G_cong set1_G_map set2_G_map\n    bd_G_card_order bd_G_cinfinite set1_G_bound set2_G_bound rell_G_compp[symmetric, THEN eq_refl]\n    G_in_rell wit_G_set1 wit_G_set2)+"], ["", "subsubsection \\<open>Composition witness\\<close>"], ["", "consts\n  rel_G_witness :: \"('l1 \\<Rightarrow> 'l1'' \\<Rightarrow> bool) \\<Rightarrow> ('l2 \\<Rightarrow> 'l2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool) \\<Rightarrow> ('co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool) \\<Rightarrow> ('co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool) \\<Rightarrow> ('contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool) \\<Rightarrow> ('contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('l1, 'l2, 'co1, 'co2, 'contra1, 'contra2, 'f) G \\<times>\n    ('l1'', 'l2'', 'co1'', 'co2'', 'contra1'', 'contra2'', 'f) G \\<Rightarrow>\n    ('l1 \\<times> 'l1'', 'l2 \\<times> 'l2'', 'co1', 'co2', 'contra1', 'contra2', 'f) G\""], ["", "specification (rel_G_witness)\n  rel_G_witness1: \"\\<And>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n    (tytok :: ('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times> 'f) itself)\n    (x :: ('l1, 'l2, _, _, _, _, 'f) G) (y :: ('l1'', 'l2'', _, _, _, _, 'f) G).\n    \\<lbrakk> rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok;\n      rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<rbrakk> \\<Longrightarrow>\n    rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y) (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 x\n    (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' (x, y))\"\n  rel_G_witness2:\"\\<And>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n    (tytok :: ('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times> 'f) itself)\n    (x :: ('l1, 'l2, _, _, _, _, 'f) G) (y :: ('l1'', 'l2'', _, _, _, _, 'f) G).\n    \\<lbrakk> rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok;\n      rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<rbrakk> \\<Longrightarrow>\n    rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y) (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1' Contra2'\n    (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' (x, y)) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rel_G_witness.\n       (\\<forall>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n           tytok x y.\n           rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n            Contra2' tytok \\<longrightarrow>\n           rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n            (Contra2 OO Contra2') x y \\<longrightarrow>\n           rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n            (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1\n            Contra2 x\n            (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n              Contra2' (x, y))) \\<and>\n       (\\<forall>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n           tytok x y.\n           rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n            Contra2' tytok \\<longrightarrow>\n           rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n            (Contra2 OO Contra2') x y \\<longrightarrow>\n           rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n            (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1'\n            Contra2'\n            (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n              Contra2' (x, y))\n            y)", "apply(rule exI[where x=\"\\<lambda>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' (x, y). SOME z.\n     rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y) (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 x z \\<and>\n     rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y) (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1' Contra2' z y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n        tytok x y.\n        rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n         Contra2' tytok \\<longrightarrow>\n        rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n         (Contra2 OO Contra2') x y \\<longrightarrow>\n        rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2\n         x (case (x, y) of\n            (rel_G_witness, y) \\<Rightarrow>\n              SOME z.\n                 rel_G\n                  (\\<lambda>rel_G_witness (x', y).\n                      x' = rel_G_witness \\<and> L1 rel_G_witness y)\n                  (\\<lambda>rel_G_witness (x', y).\n                      x' = rel_G_witness \\<and> L2 rel_G_witness y)\n                  Co1 Co2 Contra1 Contra2 rel_G_witness z \\<and>\n                 rel_G\n                  (\\<lambda>(rel_G_witness, y') y.\n                      y' = y \\<and> L1 rel_G_witness y)\n                  (\\<lambda>(rel_G_witness, y') y.\n                      y' = y \\<and> L2 rel_G_witness y)\n                  Co1' Co2' Contra1' Contra2' z y)) \\<and>\n    (\\<forall>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n        tytok x y.\n        rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n         Contra2' tytok \\<longrightarrow>\n        rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n         (Contra2 OO Contra2') x y \\<longrightarrow>\n        rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n         (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1'\n         Contra2'\n         (case (x, y) of\n          (rel_G_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_G\n                (\\<lambda>rel_G_witness (x', y).\n                    x' = rel_G_witness \\<and> L1 rel_G_witness y)\n                (\\<lambda>rel_G_witness (x', y).\n                    x' = rel_G_witness \\<and> L2 rel_G_witness y)\n                Co1 Co2 Contra1 Contra2 rel_G_witness z \\<and>\n               rel_G\n                (\\<lambda>(rel_G_witness, y') y.\n                    y' = y \\<and> L1 rel_G_witness y)\n                (\\<lambda>(rel_G_witness, y') y.\n                    y' = y \\<and> L2 rel_G_witness y)\n                Co1' Co2' Contra1' Contra2' z y)\n         y)", "apply(fold all_conj_distrib)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa xaa xaaa xaaaa xaaaaa xaaaaaa xaaaaaaa xaaaaaaaa\n       xaaaaaaaaa xaaaaaaaaaa xaaaaaaaaaaa xaaaaaaaaaaaa.\n       (rel_G_neg_distr_cond xaa xaaa xaaaa xaaaaa xaaaaaa xaaaaaaa\n         xaaaaaaaa xaaaaaaaaa xaaaaaaaaaa \\<longrightarrow>\n        rel_G x xa (xaa OO xaaa) (xaaaa OO xaaaaa) (xaaaaaa OO xaaaaaaa)\n         (xaaaaaaaa OO xaaaaaaaaa) xaaaaaaaaaaa\n         xaaaaaaaaaaaa \\<longrightarrow>\n        rel_G (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n         (\\<lambda>x (x', y). x' = x \\<and> xa x y) xaa xaaaa xaaaaaa\n         xaaaaaaaa xaaaaaaaaaaa\n         (case (xaaaaaaaaaaa, xaaaaaaaaaaaa) of\n          (rel_G_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_G\n                (\\<lambda>rel_G_witness (x', y).\n                    x' = rel_G_witness \\<and> x rel_G_witness y)\n                (\\<lambda>rel_G_witness (x', y).\n                    x' = rel_G_witness \\<and> xa rel_G_witness y)\n                xaa xaaaa xaaaaaa xaaaaaaaa rel_G_witness z \\<and>\n               rel_G\n                (\\<lambda>(rel_G_witness, y') y.\n                    y' = y \\<and> x rel_G_witness y)\n                (\\<lambda>(rel_G_witness, y') y.\n                    y' = y \\<and> xa rel_G_witness y)\n                xaaa xaaaaa xaaaaaaa xaaaaaaaaa z y)) \\<and>\n       (rel_G_neg_distr_cond xaa xaaa xaaaa xaaaaa xaaaaaa xaaaaaaa\n         xaaaaaaaa xaaaaaaaaa xaaaaaaaaaa \\<longrightarrow>\n        rel_G x xa (xaa OO xaaa) (xaaaa OO xaaaaa) (xaaaaaa OO xaaaaaaa)\n         (xaaaaaaaa OO xaaaaaaaaa) xaaaaaaaaaaa\n         xaaaaaaaaaaaa \\<longrightarrow>\n        rel_G (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n         (\\<lambda>(x, y') y. y' = y \\<and> xa x y) xaaa xaaaaa xaaaaaaa\n         xaaaaaaaaa\n         (case (xaaaaaaaaaaa, xaaaaaaaaaaaa) of\n          (rel_G_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_G\n                (\\<lambda>rel_G_witness (x', y).\n                    x' = rel_G_witness \\<and> x rel_G_witness y)\n                (\\<lambda>rel_G_witness (x', y).\n                    x' = rel_G_witness \\<and> xa rel_G_witness y)\n                xaa xaaaa xaaaaaa xaaaaaaaa rel_G_witness z \\<and>\n               rel_G\n                (\\<lambda>(rel_G_witness, y') y.\n                    y' = y \\<and> x rel_G_witness y)\n                (\\<lambda>(rel_G_witness, y') y.\n                    y' = y \\<and> xa rel_G_witness y)\n                xaaa xaaaaa xaaaaaaa xaaaaaaaaa z y)\n         xaaaaaaaaaaaa)", "apply(rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl.\n       (rel_G_neg_distr_cond xb xc xd xe xf xg xh xi xj \\<longrightarrow>\n        rel_G x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n         xl \\<longrightarrow>\n        rel_G (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n         (\\<lambda>x (x', y). x' = x \\<and> xa x y) xb xd xf xh xk\n         (case (xk, xl) of\n          (rel_G_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_G\n                (\\<lambda>rel_G_witness (x', y).\n                    x' = rel_G_witness \\<and> x rel_G_witness y)\n                (\\<lambda>rel_G_witness (x', y).\n                    x' = rel_G_witness \\<and> xa rel_G_witness y)\n                xb xd xf xh rel_G_witness z \\<and>\n               rel_G\n                (\\<lambda>(rel_G_witness, y') y.\n                    y' = y \\<and> x rel_G_witness y)\n                (\\<lambda>(rel_G_witness, y') y.\n                    y' = y \\<and> xa rel_G_witness y)\n                xc xe xg xi z y)) \\<and>\n       (rel_G_neg_distr_cond xb xc xd xe xf xg xh xi xj \\<longrightarrow>\n        rel_G x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n         xl \\<longrightarrow>\n        rel_G (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n         (\\<lambda>(x, y') y. y' = y \\<and> xa x y) xc xe xg xi\n         (case (xk, xl) of\n          (rel_G_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_G\n                (\\<lambda>rel_G_witness (x', y).\n                    x' = rel_G_witness \\<and> x rel_G_witness y)\n                (\\<lambda>rel_G_witness (x', y).\n                    x' = rel_G_witness \\<and> xa rel_G_witness y)\n                xb xd xf xh rel_G_witness z \\<and>\n               rel_G\n                (\\<lambda>(rel_G_witness, y') y.\n                    y' = y \\<and> x rel_G_witness y)\n                (\\<lambda>(rel_G_witness, y') y.\n                    y' = y \\<and> xa rel_G_witness y)\n                xc xe xg xi z y)\n         xl)", "apply(fold imp_conjR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl.\n       rel_G_neg_distr_cond xb xc xd xe xf xg xh xi xj \\<longrightarrow>\n       rel_G x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n        xl \\<longrightarrow>\n       rel_G (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n        (\\<lambda>x (x', y). x' = x \\<and> xa x y) xb xd xf xh xk\n        (case (xk, xl) of\n         (rel_G_witness, y) \\<Rightarrow>\n           SOME z.\n              rel_G\n               (\\<lambda>rel_G_witness (x', y).\n                   x' = rel_G_witness \\<and> x rel_G_witness y)\n               (\\<lambda>rel_G_witness (x', y).\n                   x' = rel_G_witness \\<and> xa rel_G_witness y)\n               xb xd xf xh rel_G_witness z \\<and>\n              rel_G\n               (\\<lambda>(rel_G_witness, y') y.\n                   y' = y \\<and> x rel_G_witness y)\n               (\\<lambda>(rel_G_witness, y') y.\n                   y' = y \\<and> xa rel_G_witness y)\n               xc xe xg xi z y) \\<and>\n       rel_G (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n        (\\<lambda>(x, y') y. y' = y \\<and> xa x y) xc xe xg xi\n        (case (xk, xl) of\n         (rel_G_witness, y) \\<Rightarrow>\n           SOME z.\n              rel_G\n               (\\<lambda>rel_G_witness (x', y).\n                   x' = rel_G_witness \\<and> x rel_G_witness y)\n               (\\<lambda>rel_G_witness (x', y).\n                   x' = rel_G_witness \\<and> xa rel_G_witness y)\n               xb xd xf xh rel_G_witness z \\<and>\n              rel_G\n               (\\<lambda>(rel_G_witness, y') y.\n                   y' = y \\<and> x rel_G_witness y)\n               (\\<lambda>(rel_G_witness, y') y.\n                   y' = y \\<and> xa rel_G_witness y)\n               xc xe xg xi z y)\n        xl", "apply(rule impI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl.\n       \\<lbrakk>rel_G_neg_distr_cond xb xc xd xe xf xg xh xi xj;\n        rel_G x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n         xl\\<rbrakk>\n       \\<Longrightarrow> rel_G (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n                          (\\<lambda>x (x', y). x' = x \\<and> xa x y) xb xd\n                          xf xh xk\n                          (case (xk, xl) of\n                           (rel_G_witness, y) \\<Rightarrow>\n                             SOME z.\n                                rel_G\n                                 (\\<lambda>rel_G_witness (x', y).\n                                     x' = rel_G_witness \\<and>\n                                     x rel_G_witness y)\n                                 (\\<lambda>rel_G_witness (x', y).\n                                     x' = rel_G_witness \\<and>\n                                     xa rel_G_witness y)\n                                 xb xd xf xh rel_G_witness z \\<and>\n                                rel_G\n                                 (\\<lambda>(rel_G_witness, y') y.\n                                     y' = y \\<and> x rel_G_witness y)\n                                 (\\<lambda>(rel_G_witness, y') y.\n                                     y' = y \\<and> xa rel_G_witness y)\n                                 xc xe xg xi z y) \\<and>\n                         rel_G (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n                          (\\<lambda>(x, y') y. y' = y \\<and> xa x y) xc xe\n                          xg xi\n                          (case (xk, xl) of\n                           (rel_G_witness, y) \\<Rightarrow>\n                             SOME z.\n                                rel_G\n                                 (\\<lambda>rel_G_witness (x', y).\n                                     x' = rel_G_witness \\<and>\n                                     x rel_G_witness y)\n                                 (\\<lambda>rel_G_witness (x', y).\n                                     x' = rel_G_witness \\<and>\n                                     xa rel_G_witness y)\n                                 xb xd xf xh rel_G_witness z \\<and>\n                                rel_G\n                                 (\\<lambda>(rel_G_witness, y') y.\n                                     y' = y \\<and> x rel_G_witness y)\n                                 (\\<lambda>(rel_G_witness, y') y.\n                                     y' = y \\<and> xa rel_G_witness y)\n                                 xc xe xg xi z y)\n                          xl", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl.\n       \\<lbrakk>rel_G_neg_distr_cond xb xc xd xe xf xg xh xi xj;\n        rel_G x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n         xl\\<rbrakk>\n       \\<Longrightarrow> rel_G (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n                          (\\<lambda>x (x', y). x' = x \\<and> xa x y) xb xd\n                          xf xh xk\n                          (SOME z.\n                              rel_G\n                               (\\<lambda>rel_G_witness (x', y).\n                                   x' = rel_G_witness \\<and>\n                                   x rel_G_witness y)\n                               (\\<lambda>rel_G_witness (x', y).\n                                   x' = rel_G_witness \\<and>\n                                   xa rel_G_witness y)\n                               xb xd xf xh xk z \\<and>\n                              rel_G\n                               (\\<lambda>(rel_G_witness, y') y.\n                                   y' = y \\<and> x rel_G_witness y)\n                               (\\<lambda>(rel_G_witness, y') y.\n                                   y' = y \\<and> xa rel_G_witness y)\n                               xc xe xg xi z xl) \\<and>\n                         rel_G (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n                          (\\<lambda>(x, y') y. y' = y \\<and> xa x y) xc xe\n                          xg xi\n                          (SOME z.\n                              rel_G\n                               (\\<lambda>rel_G_witness (x', y).\n                                   x' = rel_G_witness \\<and>\n                                   x rel_G_witness y)\n                               (\\<lambda>rel_G_witness (x', y).\n                                   x' = rel_G_witness \\<and>\n                                   xa rel_G_witness y)\n                               xb xd xf xh xk z \\<and>\n                              rel_G\n                               (\\<lambda>(rel_G_witness, y') y.\n                                   y' = y \\<and> x rel_G_witness y)\n                               (\\<lambda>(rel_G_witness, y') y.\n                                   y' = y \\<and> xa rel_G_witness y)\n                               xc xe xg xi z xl)\n                          xl", "apply(rule someI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl.\n       \\<lbrakk>rel_G_neg_distr_cond xb xc xd xe xf xg xh xi xj;\n        rel_G x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n         xl\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xj.\n                            rel_G\n                             (\\<lambda>rel_G_witness (x', y).\n                                 x' = rel_G_witness \\<and>\n                                 x rel_G_witness y)\n                             (\\<lambda>rel_G_witness (x', y).\n                                 x' = rel_G_witness \\<and>\n                                 xa rel_G_witness y)\n                             xb xd xf xh xk xj \\<and>\n                            rel_G\n                             (\\<lambda>(rel_G_witness, y') y.\n                                 y' = y \\<and> x rel_G_witness y)\n                             (\\<lambda>(rel_G_witness, y') y.\n                                 y' = y \\<and> xa rel_G_witness y)\n                             xc xe xg xi xj xl", "subgoal for L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n              Contra2' x;\n     rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n      (Contra2 OO Contra2') y xl_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_G\n                          (\\<lambda>rel_G_witness (x', y).\n                              x' = rel_G_witness \\<and> L1 rel_G_witness y)\n                          (\\<lambda>rel_G_witness (x', y).\n                              x' = rel_G_witness \\<and> L2 rel_G_witness y)\n                          Co1 Co2 Contra1 Contra2 y x \\<and>\n                         rel_G\n                          (\\<lambda>(rel_G_witness, y') y.\n                              y' = y \\<and> L1 rel_G_witness y)\n                          (\\<lambda>(rel_G_witness, y') y.\n                              y' = y \\<and> L2 rel_G_witness y)\n                          Co1' Co2' Contra1' Contra2' x xl_", "apply(drule rel_G_neg_distr[where\n          ?L1.0 = \"\\<lambda>x (x', y). x' = x \\<and> L1 x y\" and ?L1'.0 = \"\\<lambda>(x, y) y'. y = y' \\<and> L1 x y'\" and\n          ?L2.0 = \"\\<lambda>x (x', y). x' = x \\<and> L2 x y\" and ?L2'.0 = \"\\<lambda>(x, y) y'. y = y' \\<and> L2 x y'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') y xl_;\n     rel_G\n      ((\\<lambda>x (x', y). x' = x \\<and> L1 x y) OO\n       (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y'))\n      ((\\<lambda>x (x', y). x' = x \\<and> L2 x y) OO\n       (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y'))\n      (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n      (Contra2 OO Contra2')\n     \\<le> rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n            (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1\n            Contra2 OO\n           rel_G (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n            (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n            Contra2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_G\n                          (\\<lambda>rel_G_witness (x', y).\n                              x' = rel_G_witness \\<and> L1 rel_G_witness y)\n                          (\\<lambda>rel_G_witness (x', y).\n                              x' = rel_G_witness \\<and> L2 rel_G_witness y)\n                          Co1 Co2 Contra1 Contra2 y x \\<and>\n                         rel_G\n                          (\\<lambda>(rel_G_witness, y') y.\n                              y' = y \\<and> L1 rel_G_witness y)\n                          (\\<lambda>(rel_G_witness, y') y.\n                              y' = y \\<and> L2 rel_G_witness y)\n                          Co1' Co2' Contra1' Contra2' x xl_", "apply(drule predicate2D)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n     (Contra2 OO Contra2') y xl_ \\<Longrightarrow>\n    rel_G\n     ((\\<lambda>x (x', y). x' = x \\<and> L1 x y) OO\n      (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y'))\n     ((\\<lambda>x (x', y). x' = x \\<and> L2 x y) OO\n      (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y'))\n     (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1') (Contra2 OO Contra2')\n     ?x2 ?y2\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') y xl_;\n     (rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 OO\n      rel_G (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n       (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n       Contra2')\n      ?x2 ?y2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_G\n                          (\\<lambda>rel_G_witness (x', y).\n                              x' = rel_G_witness \\<and> L1 rel_G_witness y)\n                          (\\<lambda>rel_G_witness (x', y).\n                              x' = rel_G_witness \\<and> L2 rel_G_witness y)\n                          Co1 Co2 Contra1 Contra2 y x \\<and>\n                         rel_G\n                          (\\<lambda>(rel_G_witness, y') y.\n                              y' = y \\<and> L1 rel_G_witness y)\n                          (\\<lambda>(rel_G_witness, y') y.\n                              y' = y \\<and> L2 rel_G_witness y)\n                          Co1' Co2' Contra1' Contra2' x xl_", "apply(erule rel_G_mono[THEN predicate2D, rotated -1]; fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') y xl_;\n     (rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 OO\n      rel_G (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n       (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n       Contra2')\n      y xl_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_G\n                          (\\<lambda>rel_G_witness (x', y).\n                              x' = rel_G_witness \\<and> L1 rel_G_witness y)\n                          (\\<lambda>rel_G_witness (x', y).\n                              x' = rel_G_witness \\<and> L2 rel_G_witness y)\n                          Co1 Co2 Contra1 Contra2 y x \\<and>\n                         rel_G\n                          (\\<lambda>(rel_G_witness, y') y.\n                              y' = y \\<and> L1 rel_G_witness y)\n                          (\\<lambda>(rel_G_witness, y') y.\n                              y' = y \\<and> L2 rel_G_witness y)\n                          Co1' Co2' Contra1' Contra2' x xl_", "apply(erule relcomppE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                 (Contra1 OO Contra1') (Contra2 OO Contra2') y xl_;\n        rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2\n         y b;\n        rel_G (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n         Contra2' b xl_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            rel_G\n                             (\\<lambda>rel_G_witness (x', y).\n                                 x' = rel_G_witness \\<and>\n                                 L1 rel_G_witness y)\n                             (\\<lambda>rel_G_witness (x', y).\n                                 x' = rel_G_witness \\<and>\n                                 L2 rel_G_witness y)\n                             Co1 Co2 Contra1 Contra2 y x \\<and>\n                            rel_G\n                             (\\<lambda>(rel_G_witness, y') y.\n                                 y' = y \\<and> L1 rel_G_witness y)\n                             (\\<lambda>(rel_G_witness, y') y.\n                                 y' = y \\<and> L2 rel_G_witness y)\n                             Co1' Co2' Contra1' Contra2' x xl_", "apply(rule exI conjI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                 (Contra1 OO Contra1') (Contra2 OO Contra2') y xl_;\n        rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2\n         y b;\n        rel_G (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n         Contra2' b xl_\\<rbrakk>\n       \\<Longrightarrow> rel_G\n                          (\\<lambda>rel_G_witness (x', y).\n                              x' = rel_G_witness \\<and> L1 rel_G_witness y)\n                          (\\<lambda>rel_G_witness (x', y).\n                              x' = rel_G_witness \\<and> L2 rel_G_witness y)\n                          Co1 Co2 Contra1 Contra2 y (?x117 b)\n 2. \\<And>b.\n       \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                 (Contra1 OO Contra1') (Contra2 OO Contra2') y xl_;\n        rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2\n         y b;\n        rel_G (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n         Contra2' b xl_\\<rbrakk>\n       \\<Longrightarrow> rel_G\n                          (\\<lambda>(rel_G_witness, y') y.\n                              y' = y \\<and> L1 rel_G_witness y)\n                          (\\<lambda>(rel_G_witness, y') y.\n                              y' = y \\<and> L2 rel_G_witness y)\n                          Co1' Co2' Contra1' Contra2' (?x117 b) xl_", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}