{"file_name": "/home/qj213/afp-2021-10-22/thys/BNF_CC/Subtypes.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BNF_CC", "problem_names": ["lemma rel_S_mono:\n  \"\\<lbrakk> L1 \\<le> L1'; L2 \\<le> L2'; Co1 \\<le> Co1'; Co2 \\<le> Co2'; Contra1' \\<le> Contra1; Contra2' \\<le> Contra2 \\<rbrakk>\n  \\<Longrightarrow> rel_S L1 L2 Co1 Co2 Contra1 Contra2 \\<le> rel_S L1' L2' Co1' Co2' Contra1' Contra2'\"", "lemma rel_S_eq: \"rel_S (=) (=) (=) (=) (=) (=) = (=)\"", "lemma rel_S_conversep:\n  \"rel_S L1\\<inverse>\\<inverse> L2\\<inverse>\\<inverse> Co1\\<inverse>\\<inverse> Co2\\<inverse>\\<inverse> Contra1\\<inverse>\\<inverse> Contra2\\<inverse>\\<inverse> = (rel_S L1 L2 Co1 Co2 Contra1 Contra2)\\<inverse>\\<inverse>\"", "lemma map_S_id0: \"map_S id id id id id id = id\"", "lemma map_S_id: \"map_S id id id id id id x = x\"", "lemma map_S_comp:\n  \"map_S l1 l2 co1 co2 contra1 contra2 \\<circ> map_S l1' l2' co1' co2' contra1' contra2' =\n  map_S (l1 \\<circ> l1') (l2 \\<circ> l2') (co1 \\<circ> co1') (co2 \\<circ> co2') (contra1' \\<circ> contra1) (contra2' \\<circ> contra2)\"", "lemma map_S_parametric:\n  \"((L1 ===> L1') ===> (L2 ===> L2') ===> (Co1 ===> Co1') ===> (Co2 ===> Co2') ===>\n    (Contra1' ===> Contra1) ===> (Contra2' ===> Contra2) ===>\n  rel_S L1 L2 Co1 Co2 Contra1 Contra2 ===> rel_S L1' L2' Co1' Co2' Contra1' Contra2')\n  map_S map_S\"", "lemmas map_S_rel_cong = map_S_parametric[unfolded rel_fun_def, rule_format, rotated -1]", "lemma rel_S_pos_distr_imp:\n  fixes Co1 :: \"'co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool\" and Co1' :: \"'co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool\"\n    and Co2 :: \"'co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool\" and Co2' :: \"'co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool\"\n    and Contra1 :: \"'contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool\" and Contra1' :: \"'contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool\"\n    and Contra2 :: \"'contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool\" and Contra2' :: \"'contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool\"\n    and tytok_G :: \"('l1 \\<times> 'l1' \\<times> 'l1'' \\<times> 'l2 \\<times> 'l2' \\<times> 'l2'' \\<times> 'f) itself\"\n    and tytok_S :: \"('l1 \\<times> 'l1' \\<times> 'l1'' \\<times> 'l2 \\<times> 'l2' \\<times> 'l2'' \\<times> 'f) itself\"\n  assumes \"rel_G_pos_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok_G\"\n  shows \"rel_S_pos_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok_S\"", "lemma rel_S_pos_distr_cond_eq:\n  \"\\<And>tytok. rel_S_pos_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) tytok\"", "lemmas\n  rel_S_pos_distr = rel_S_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_S_neg_distr = rel_S_neg_distr_cond_def[THEN iffD1, rule_format]", "lemma rel_S_alt:\n  \"rel_S L1 L2 (=) (=) (=) (=) x y \\<longleftrightarrow> (\\<exists>z. (set1_S z \\<subseteq> {(x, y). L1 x y} \\<and>\n  set2_S z \\<subseteq> {(x, y). L2 x y}) \\<and> map_S fst fst id id id id z = x \\<and> map_S snd snd id id id id z = y)\"", "lemma P_zip_closed: \\<comment> \\<open>This is @{command lift_bnf}'s property that is too strong.\\<close>\n  assumes \"P (mapl_G fst fst z)\" \"P (mapl_G snd snd z)\"\n  shows \"P z\"", "lemma rel_S_witness'1:\n  fixes L1 :: \"'l1 \\<Rightarrow> 'l1'' \\<Rightarrow> bool\" and L2 :: \"'l2 \\<Rightarrow> 'l2'' \\<Rightarrow> bool\"\n    and Co1 :: \"'co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool\" and Co1' :: \"'co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool\"\n    and Co2 :: \"'co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool\" and Co2' :: \"'co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool\"\n    and Contra1 :: \"'contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool\" and Contra1' :: \"'contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool\"\n    and Contra2 :: \"'contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool\" and Contra2' :: \"'contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool\"\n    and tytok :: \"('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times> 'f) itself\"\n    and x :: \"(_, _, _, _, _, _, 'f) S\"\n  assumes \"rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1') (Contra2 OO Contra2') x y\"\n    and \"rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok\"\n  shows \"rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y) (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 x\n    (rel_S_witness' L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' (x, y))\"", "lemma rel_S_witness'2:\n  fixes L1 :: \"'l1 \\<Rightarrow> 'l1'' \\<Rightarrow> bool\" and L2 :: \"'l2 \\<Rightarrow> 'l2'' \\<Rightarrow> bool\"\n    and Co1 :: \"'co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool\" and Co1' :: \"'co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool\"\n    and Co2 :: \"'co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool\" and Co2' :: \"'co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool\"\n    and Contra1 :: \"'contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool\" and Contra1' :: \"'contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool\"\n    and Contra2 :: \"'contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool\" and Contra2' :: \"'contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool\"\n    and tytok :: \"('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times> 'f) itself\"\n    and x :: \"(_, _, _, _, _, _, 'f) S\"\n  assumes \"rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1') (Contra2 OO Contra2') x y\"\n    and \"rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok\"\n  shows \"rel_S (\\<lambda>(x, y') y. y' = y \\<and> L1 x y) (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1' Contra2'\n    (rel_S_witness' L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' (x, y)) y\"", "lemma rel_S_neg_distr_imp:\n  fixes Co1 :: \"'co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool\" and Co1' :: \"'co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool\"\n    and Co2 :: \"'co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool\" and Co2' :: \"'co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool\"\n    and Contra1 :: \"'contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool\" and Contra1' :: \"'contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool\"\n    and Contra2 :: \"'contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool\" and Contra2' :: \"'contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool\"\n    and tytok_S' :: \"('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times> 'f) itself\"\n    and tytok_S :: \"('l1 \\<times> 'l1' \\<times> 'l1'' \\<times> 'l2 \\<times> 'l2' \\<times> 'l2'' \\<times> 'f) itself\"\n  assumes \"rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok_S'\"\n  shows \"rel_S_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok_S\"", "lemma Q_rel_H_zipping:\n  fixes x :: \"'a H\" and y :: \"'c H\" and z :: \"('a \\<times> 'c) H\"\n  assumes Q_zip: \"\\<And>z :: ('a \\<times> 'c) H. \\<lbrakk> Q (map_H fst z); Q (map_H snd z) \\<rbrakk> \\<Longrightarrow> Q z\"\n    and \"Q x\" and \"Q y\" and \"rel_H L x y\"\n    and related: \"rel_H (\\<lambda>x (x', y). x' = x \\<and> L x y) x z\" \"rel_H (\\<lambda>(x, y') y. y' = y \\<and> L x y) z y\"\n  shows \"Q z\"", "lemma Q_zip:\n  fixes z :: \"('a \\<times> 'c) H\"\n  assumes Q_rel_H_zipping: \"\\<And>(L :: 'a \\<Rightarrow> 'c \\<Rightarrow> _) x y z.\n      \\<lbrakk> Q x; Q y; rel_H L x y; rel_H (\\<lambda>x (x', y). x' = x \\<and> L x y) x z;\n        rel_H (\\<lambda>(x, y') y. y' = y \\<and> L x y) z y \\<rbrakk> \\<Longrightarrow> Q z\"\n    and \"Q (map_H fst z)\" and \"Q (map_H snd z)\"\n  shows \"Q z\"", "lemma Q_neg_distr:\n  fixes x :: \"'a H\" and y :: \"'c H\"\n  assumes Q_zip_weak: \"\\<And>z :: ('a \\<times> 'c) H. \\<lbrakk> Q (map_H fst z); Q (map_H snd z) \\<rbrakk> \\<Longrightarrow>\n      \\<exists>z'. Q z' \\<and> set_H z' \\<subseteq> set_H z \\<and> map_H fst z' = map_H fst z \\<and> map_H snd z' = map_H snd z\"\n    and \"Q x\" and \"Q y\" and related: \"rel_H (L OO L') x y\"\n  shows \"(rel_H L OO eq_onp Q OO rel_H L') x y\"", "lemma Q_zip_weak:\n  fixes z :: \"('a \\<times> 'c) H\"\n  assumes Q_neg_distr: \"\\<And>(L :: 'a \\<Rightarrow> ('a \\<times> 'c) \\<Rightarrow> _) (L' :: ('a \\<times> 'c) \\<Rightarrow> 'c \\<Rightarrow> bool) x y.\n      \\<lbrakk> Q x; Q y; rel_H (L OO L') x y \\<rbrakk> \\<Longrightarrow> (rel_H L OO eq_onp Q OO rel_H L') x y\"\n    and \"Q (map_H fst z)\" and \"Q (map_H snd z)\"\n  obtains z' where \"Q z'\" and \"set_H z' \\<subseteq> set_H z\"\n    and \"map_H fst z' = map_H fst z\" and \"map_H snd z' = map_H snd z\""], "translations": [["", "lemma rel_S_mono:\n  \"\\<lbrakk> L1 \\<le> L1'; L2 \\<le> L2'; Co1 \\<le> Co1'; Co2 \\<le> Co2'; Contra1' \\<le> Contra1; Contra2' \\<le> Contra2 \\<rbrakk>\n  \\<Longrightarrow> rel_S L1 L2 Co1 Co2 Contra1 Contra2 \\<le> rel_S L1' L2' Co1' Co2' Contra1' Contra2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>L1 \\<le> L1'; L2 \\<le> L2'; Co1 \\<le> Co1'; Co2 \\<le> Co2';\n     Contra1' \\<le> Contra1; Contra2' \\<le> Contra2\\<rbrakk>\n    \\<Longrightarrow> rel_S L1 L2 Co1 Co2 Contra1 Contra2\n                      \\<le> rel_S L1' L2' Co1' Co2' Contra1' Contra2'", "unfolding rel_S_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>L1 \\<le> L1'; L2 \\<le> L2'; Co1 \\<le> Co1'; Co2 \\<le> Co2';\n     Contra1' \\<le> Contra1; Contra2' \\<le> Contra2\\<rbrakk>\n    \\<Longrightarrow> vimage2p Rep_S Rep_S\n                       (rel_G L1 L2 Co1 Co2 Contra1 Contra2)\n                      \\<le> vimage2p Rep_S Rep_S\n                             (rel_G L1' L2' Co1' Co2' Contra1' Contra2')", "apply(rule predicate2I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>L1 \\<le> L1'; L2 \\<le> L2'; Co1 \\<le> Co1'; Co2 \\<le> Co2';\n        Contra1' \\<le> Contra1; Contra2' \\<le> Contra2;\n        vimage2p Rep_S Rep_S (rel_G L1 L2 Co1 Co2 Contra1 Contra2) x\n         y\\<rbrakk>\n       \\<Longrightarrow> vimage2p Rep_S Rep_S\n                          (rel_G L1' L2' Co1' Co2' Contra1' Contra2') x y", "apply(simp add: vimage2p_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>L1 \\<le> L1'; L2 \\<le> L2'; Co1 \\<le> Co1'; Co2 \\<le> Co2';\n        Contra1' \\<le> Contra1; Contra2' \\<le> Contra2;\n        rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S y)\\<rbrakk>\n       \\<Longrightarrow> rel_G L1' L2' Co1' Co2' Contra1' Contra2' (Rep_S x)\n                          (Rep_S y)", "by(erule rel_G_mono')"], ["", "lemma rel_S_eq: \"rel_S (=) (=) (=) (=) (=) (=) = (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S (=) (=) (=) (=) (=) (=) = (=)", "unfolding rel_S_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vimage2p Rep_S Rep_S (rel_G (=) (=) (=) (=) (=) (=)) = (=)", "by(clarsimp simp add: vimage2p_def fun_eq_iff rel_G_eq Rep_S_inject)"], ["", "lemma rel_S_conversep:\n  \"rel_S L1\\<inverse>\\<inverse> L2\\<inverse>\\<inverse> Co1\\<inverse>\\<inverse> Co2\\<inverse>\\<inverse> Contra1\\<inverse>\\<inverse> Contra2\\<inverse>\\<inverse> = (rel_S L1 L2 Co1 Co2 Contra1 Contra2)\\<inverse>\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S L1\\<inverse>\\<inverse> L2\\<inverse>\\<inverse>\n     Co1\\<inverse>\\<inverse> Co2\\<inverse>\\<inverse>\n     Contra1\\<inverse>\\<inverse> Contra2\\<inverse>\\<inverse> =\n    (rel_S L1 L2 Co1 Co2 Contra1 Contra2)\\<inverse>\\<inverse>", "unfolding rel_S_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vimage2p Rep_S Rep_S\n     (rel_G L1\\<inverse>\\<inverse> L2\\<inverse>\\<inverse>\n       Co1\\<inverse>\\<inverse> Co2\\<inverse>\\<inverse>\n       Contra1\\<inverse>\\<inverse> Contra2\\<inverse>\\<inverse>) =\n    (vimage2p Rep_S Rep_S\n      (rel_G L1 L2 Co1 Co2 Contra1 Contra2))\\<inverse>\\<inverse>", "apply(simp add: vimage2p_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y.\n        rel_G L1\\<inverse>\\<inverse> L2\\<inverse>\\<inverse>\n         Co1\\<inverse>\\<inverse> Co2\\<inverse>\\<inverse>\n         Contra1\\<inverse>\\<inverse> Contra2\\<inverse>\\<inverse> (Rep_S x)\n         (Rep_S y)) =\n    (\\<lambda>x y.\n        rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x)\n         (Rep_S y))\\<inverse>\\<inverse>", "apply(subst rel_G_conversep)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y.\n        (rel_G L1 L2 Co1 Co2 Contra1 Contra2)\\<inverse>\\<inverse> (Rep_S x)\n         (Rep_S y)) =\n    (\\<lambda>x y.\n        rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x)\n         (Rep_S y))\\<inverse>\\<inverse>", "apply(simp add: map_fun_def fun_eq_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_S_id0: \"map_S id id id id id id = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_S id id id id id id = id", "by(simp add: map_S_def fun_eq_iff map_G_id Rep_S_inverse)"], ["", "lemma map_S_id: \"map_S id id id id id id x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_S id id id id id id x = x", "by (simp add: map_S_id0)"], ["", "lemma map_S_comp:\n  \"map_S l1 l2 co1 co2 contra1 contra2 \\<circ> map_S l1' l2' co1' co2' contra1' contra2' =\n  map_S (l1 \\<circ> l1') (l2 \\<circ> l2') (co1 \\<circ> co1') (co2 \\<circ> co2') (contra1' \\<circ> contra1) (contra2' \\<circ> contra2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_S l1 l2 co1 co2 contra1 contra2 \\<circ>\n    map_S l1' l2' co1' co2' contra1' contra2' =\n    map_S (l1 \\<circ> l1') (l2 \\<circ> l2') (co1 \\<circ> co1')\n     (co2 \\<circ> co2') (contra1' \\<circ> contra1)\n     (contra2' \\<circ> contra2)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (map_S l1 l2 co1 co2 contra1 contra2 \\<circ>\n        map_S l1' l2' co1' co2' contra1' contra2')\n        x =\n       map_S (l1 \\<circ> l1') (l2 \\<circ> l2') (co1 \\<circ> co1')\n        (co2 \\<circ> co2') (contra1' \\<circ> contra1)\n        (contra2' \\<circ> contra2) x", "apply (simp add: map_S_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Abs_S\n        (map_G l1 l2 co1 co2 contra1 contra2\n          (Rep_S\n            (Abs_S\n              (map_G l1' l2' co1' co2' contra1' contra2' (Rep_S x))))) =\n       Abs_S\n        (map_G (l1 \\<circ> l1') (l2 \\<circ> l2') (co1 \\<circ> co1')\n          (co2 \\<circ> co2') (contra1' \\<circ> contra1)\n          (contra2' \\<circ> contra2) (Rep_S x))", "apply (subst Abs_S_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       map_G l1' l2' co1' co2' contra1' contra2' (Rep_S x) \\<in> Collect P\n 2. \\<And>x.\n       Abs_S\n        (map_G l1 l2 co1 co2 contra1 contra2\n          (map_G l1' l2' co1' co2' contra1' contra2' (Rep_S x))) =\n       Abs_S\n        (map_G (l1 \\<circ> l1') (l2 \\<circ> l2') (co1 \\<circ> co1')\n          (co2 \\<circ> co2') (contra1' \\<circ> contra1)\n          (contra2' \\<circ> contra2) (Rep_S x))", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_G l1' l2' co1' co2' contra1' contra2' (Rep_S x) \\<in> Collect P", "using Rep_S[of x]"], ["proof (prove)\nusing this:\n  Rep_S x \\<in> {x. P x}\n\ngoal (1 subgoal):\n 1. map_G l1' l2' co1' co2' contra1' contra2' (Rep_S x) \\<in> Collect P", "by(simp add: P_map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Abs_S\n        (map_G l1 l2 co1 co2 contra1 contra2\n          (map_G l1' l2' co1' co2' contra1' contra2' (Rep_S x))) =\n       Abs_S\n        (map_G (l1 \\<circ> l1') (l2 \\<circ> l2') (co1 \\<circ> co1')\n          (co2 \\<circ> co2') (contra1' \\<circ> contra1)\n          (contra2' \\<circ> contra2) (Rep_S x))", "apply (subst map_G_comp[THEN fun_cong, simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Abs_S\n        (map_G (l1 \\<circ> l1') (l2 \\<circ> l2') (co1 \\<circ> co1')\n          (co2 \\<circ> co2') (contra1' \\<circ> contra1)\n          (contra2' \\<circ> contra2) (Rep_S x)) =\n       Abs_S\n        (map_G (l1 \\<circ> l1') (l2 \\<circ> l2') (co1 \\<circ> co1')\n          (co2 \\<circ> co2') (contra1' \\<circ> contra1)\n          (contra2' \\<circ> contra2) (Rep_S x))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_S_parametric:\n  \"((L1 ===> L1') ===> (L2 ===> L2') ===> (Co1 ===> Co1') ===> (Co2 ===> Co2') ===>\n    (Contra1' ===> Contra1) ===> (Contra2' ===> Contra2) ===>\n  rel_S L1 L2 Co1 Co2 Contra1 Contra2 ===> rel_S L1' L2' Co1' Co2' Contra1' Contra2')\n  map_S map_S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((L1 ===> L1') ===>\n     (L2 ===> L2') ===>\n     (Co1 ===> Co1') ===>\n     (Co2 ===> Co2') ===>\n     (Contra1' ===> Contra1) ===>\n     (Contra2' ===> Contra2) ===>\n     rel_S L1 L2 Co1 Co2 Contra1 Contra2 ===>\n     rel_S L1' L2' Co1' Co2' Contra1' Contra2')\n     map_S map_S", "apply(rule rel_funI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc xd yd xe ye xf yf.\n       \\<lbrakk>(L1 ===> L1') x y; (L2 ===> L2') xa ya;\n        (Co1 ===> Co1') xb yb; (Co2 ===> Co2') xc yc;\n        (Contra1' ===> Contra1) xd yd; (Contra2' ===> Contra2) xe ye;\n        rel_S L1 L2 Co1 Co2 Contra1 Contra2 xf yf\\<rbrakk>\n       \\<Longrightarrow> rel_S L1' L2' Co1' Co2' Contra1' Contra2'\n                          (map_S x xa xb xc xd xe xf)\n                          (map_S y ya yb yc yd ye yf)", "unfolding rel_S_def map_S_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc xd yd xe ye xf yf.\n       \\<lbrakk>(L1 ===> L1') x y; (L2 ===> L2') xa ya;\n        (Co1 ===> Co1') xb yb; (Co2 ===> Co2') xc yc;\n        (Contra1' ===> Contra1) xd yd; (Contra2' ===> Contra2) xe ye;\n        vimage2p Rep_S Rep_S (rel_G L1 L2 Co1 Co2 Contra1 Contra2) xf\n         yf\\<rbrakk>\n       \\<Longrightarrow> vimage2p Rep_S Rep_S\n                          (rel_G L1' L2' Co1' Co2' Contra1' Contra2')\n                          ((id --->\n                            id --->\n                            id --->\n                            id ---> id ---> id ---> Rep_S ---> Abs_S)\n                            map_G x xa xb xc xd xe xf)\n                          ((id --->\n                            id --->\n                            id --->\n                            id ---> id ---> id ---> Rep_S ---> Abs_S)\n                            map_G y ya yb yc yd ye yf)", "apply(simp add: vimage2p_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc xd yd xe ye xf yf.\n       \\<lbrakk>(L1 ===> L1') x y; (L2 ===> L2') xa ya;\n        (Co1 ===> Co1') xb yb; (Co2 ===> Co2') xc yc;\n        (Contra1' ===> Contra1) xd yd; (Contra2' ===> Contra2) xe ye;\n        rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S xf) (Rep_S yf)\\<rbrakk>\n       \\<Longrightarrow> rel_G L1' L2' Co1' Co2' Contra1' Contra2'\n                          (Rep_S\n                            (Abs_S (map_G x xa xb xc xd xe (Rep_S xf))))\n                          (Rep_S\n                            (Abs_S (map_G y ya yb yc yd ye (Rep_S yf))))", "apply(subst Abs_S_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y xa ya xb yb xc yc xd yd xe ye xf yf.\n       \\<lbrakk>(L1 ===> L1') x y; (L2 ===> L2') xa ya;\n        (Co1 ===> Co1') xb yb; (Co2 ===> Co2') xc yc;\n        (Contra1' ===> Contra1) xd yd; (Contra2' ===> Contra2) xe ye;\n        rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S xf) (Rep_S yf)\\<rbrakk>\n       \\<Longrightarrow> map_G x xa xb xc xd xe (Rep_S xf) \\<in> Collect P\n 2. \\<And>x y xa ya xb yb xc yc xd yd xe ye xf yf.\n       \\<lbrakk>(L1 ===> L1') x y; (L2 ===> L2') xa ya;\n        (Co1 ===> Co1') xb yb; (Co2 ===> Co2') xc yc;\n        (Contra1' ===> Contra1) xd yd; (Contra2' ===> Contra2) xe ye;\n        rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S xf) (Rep_S yf)\\<rbrakk>\n       \\<Longrightarrow> rel_G L1' L2' Co1' Co2' Contra1' Contra2'\n                          (map_G x xa xb xc xd xe (Rep_S xf))\n                          (Rep_S\n                            (Abs_S (map_G y ya yb yc yd ye (Rep_S yf))))", "subgoal for \\<dots> x _"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(L1 ===> L1') x_ y_; (L2 ===> L2') xa_ ya_;\n     (Co1 ===> Co1') xb_ yb_; (Co2 ===> Co2') xc_ yc_;\n     (Contra1' ===> Contra1) xd_ yd_; (Contra2' ===> Contra2) xe_ ye_;\n     rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S yf_)\\<rbrakk>\n    \\<Longrightarrow> map_G x_ xa_ xb_ xc_ xd_ xe_ (Rep_S x) \\<in> Collect P", "using Rep_S[of x]"], ["proof (prove)\nusing this:\n  Rep_S x \\<in> {x. P x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(L1 ===> L1') x_ y_; (L2 ===> L2') xa_ ya_;\n     (Co1 ===> Co1') xb_ yb_; (Co2 ===> Co2') xc_ yc_;\n     (Contra1' ===> Contra1) xd_ yd_; (Contra2' ===> Contra2) xe_ ye_;\n     rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S yf_)\\<rbrakk>\n    \\<Longrightarrow> map_G x_ xa_ xb_ xc_ xd_ xe_ (Rep_S x) \\<in> Collect P", "by(simp add: P_map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc xd yd xe ye xf yf.\n       \\<lbrakk>(L1 ===> L1') x y; (L2 ===> L2') xa ya;\n        (Co1 ===> Co1') xb yb; (Co2 ===> Co2') xc yc;\n        (Contra1' ===> Contra1) xd yd; (Contra2' ===> Contra2) xe ye;\n        rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S xf) (Rep_S yf)\\<rbrakk>\n       \\<Longrightarrow> rel_G L1' L2' Co1' Co2' Contra1' Contra2'\n                          (map_G x xa xb xc xd xe (Rep_S xf))\n                          (Rep_S\n                            (Abs_S (map_G y ya yb yc yd ye (Rep_S yf))))", "apply(subst Abs_S_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y xa ya xb yb xc yc xd yd xe ye xf yf.\n       \\<lbrakk>(L1 ===> L1') x y; (L2 ===> L2') xa ya;\n        (Co1 ===> Co1') xb yb; (Co2 ===> Co2') xc yc;\n        (Contra1' ===> Contra1) xd yd; (Contra2' ===> Contra2) xe ye;\n        rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S xf) (Rep_S yf)\\<rbrakk>\n       \\<Longrightarrow> map_G y ya yb yc yd ye (Rep_S yf) \\<in> Collect P\n 2. \\<And>x y xa ya xb yb xc yc xd yd xe ye xf yf.\n       \\<lbrakk>(L1 ===> L1') x y; (L2 ===> L2') xa ya;\n        (Co1 ===> Co1') xb yb; (Co2 ===> Co2') xc yc;\n        (Contra1' ===> Contra1) xd yd; (Contra2' ===> Contra2) xe ye;\n        rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S xf) (Rep_S yf)\\<rbrakk>\n       \\<Longrightarrow> rel_G L1' L2' Co1' Co2' Contra1' Contra2'\n                          (map_G x xa xb xc xd xe (Rep_S xf))\n                          (map_G y ya yb yc yd ye (Rep_S yf))", "subgoal for \\<dots> y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(L1 ===> L1') x_ y_; (L2 ===> L2') xa_ ya_;\n     (Co1 ===> Co1') xb_ yb_; (Co2 ===> Co2') xc_ yc_;\n     (Contra1' ===> Contra1) xd_ yd_; (Contra2' ===> Contra2) xe_ ye_;\n     rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S xf_) (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_G y_ ya_ yb_ yc_ yd_ ye_ (Rep_S y) \\<in> Collect P", "using Rep_S[of y]"], ["proof (prove)\nusing this:\n  Rep_S y \\<in> {x. P x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(L1 ===> L1') x_ y_; (L2 ===> L2') xa_ ya_;\n     (Co1 ===> Co1') xb_ yb_; (Co2 ===> Co2') xc_ yc_;\n     (Contra1' ===> Contra1) xd_ yd_; (Contra2' ===> Contra2) xe_ ye_;\n     rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S xf_) (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_G y_ ya_ yb_ yc_ yd_ ye_ (Rep_S y) \\<in> Collect P", "by(simp add: P_map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc xd yd xe ye xf yf.\n       \\<lbrakk>(L1 ===> L1') x y; (L2 ===> L2') xa ya;\n        (Co1 ===> Co1') xb yb; (Co2 ===> Co2') xc yc;\n        (Contra1' ===> Contra1) xd yd; (Contra2' ===> Contra2) xe ye;\n        rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S xf) (Rep_S yf)\\<rbrakk>\n       \\<Longrightarrow> rel_G L1' L2' Co1' Co2' Contra1' Contra2'\n                          (map_G x xa xb xc xd xe (Rep_S xf))\n                          (map_G y ya yb yc yd ye (Rep_S yf))", "by(erule map_G_parametric[THEN rel_funD, THEN rel_funD, THEN rel_funD, THEN rel_funD,\n        THEN rel_funD, THEN rel_funD, THEN rel_funD, rotated -1])"], ["", "lemmas map_S_rel_cong = map_S_parametric[unfolded rel_fun_def, rule_format, rotated -1]"], ["", "end"], ["", "(* context includes lifting_syntax *)"], ["", "definition rel_S_pos_distr_cond :: \"('co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool) \\<Rightarrow> ('co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool) \\<Rightarrow> ('co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool) \\<Rightarrow> ('contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool) \\<Rightarrow> ('contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('l1 \\<times> 'l1' \\<times> 'l1'' \\<times> 'l2 \\<times> 'l2' \\<times> 'l2'' \\<times> 'f) itself \\<Rightarrow> bool\" where\n  \"rel_S_pos_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' _ \\<longleftrightarrow>\n  (\\<forall>(L1 :: 'l1 \\<Rightarrow> 'l1' \\<Rightarrow> bool) (L1' :: 'l1' \\<Rightarrow> 'l1'' \\<Rightarrow> bool)\n    (L2 :: 'l2 \\<Rightarrow> 'l2' \\<Rightarrow> bool) (L2' :: 'l2' \\<Rightarrow> 'l2'' \\<Rightarrow> bool).\n    (rel_S L1 L2 Co1 Co2 Contra1 Contra2 :: (_, _, _, _, _, _, 'f) S \\<Rightarrow> _) OO\n      rel_S L1' L2' Co1' Co2' Contra1' Contra2' \\<le>\n    rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n      (Contra1 OO Contra1') (Contra2 OO Contra2'))\""], ["", "definition rel_S_neg_distr_cond :: \"('co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool) \\<Rightarrow> ('co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool) \\<Rightarrow> ('co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool) \\<Rightarrow> ('contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool) \\<Rightarrow> ('contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('l1 \\<times> 'l1' \\<times> 'l1'' \\<times> 'l2 \\<times> 'l2' \\<times> 'l2'' \\<times> 'f) itself \\<Rightarrow> bool\" where\n  \"rel_S_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' _ \\<longleftrightarrow>\n  (\\<forall>(L1 :: 'l1 \\<Rightarrow> 'l1' \\<Rightarrow> bool) (L1' :: 'l1' \\<Rightarrow> 'l1'' \\<Rightarrow> bool)\n    (L2 :: 'l2 \\<Rightarrow> 'l2' \\<Rightarrow> bool) (L2' :: 'l2' \\<Rightarrow> 'l2'' \\<Rightarrow> bool).\n    rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n      (Contra1 OO Contra1') (Contra2 OO Contra2') \\<le>\n    (rel_S L1 L2 Co1 Co2 Contra1 Contra2 :: (_, _, _, _, _, _, 'f) S \\<Rightarrow> _) OO\n      rel_S L1' L2' Co1' Co2' Contra1' Contra2')\""], ["", "axiomatization where\n  rel_S_neg_distr_cond_eq:\n  \"\\<And>tytok. rel_S_neg_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) tytok\""], ["", "text \\<open>The subtype inherits the conditions for positive subdistributivity.\\<close>"], ["", "lemma rel_S_pos_distr_imp:\n  fixes Co1 :: \"'co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool\" and Co1' :: \"'co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool\"\n    and Co2 :: \"'co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool\" and Co2' :: \"'co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool\"\n    and Contra1 :: \"'contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool\" and Contra1' :: \"'contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool\"\n    and Contra2 :: \"'contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool\" and Contra2' :: \"'contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool\"\n    and tytok_G :: \"('l1 \\<times> 'l1' \\<times> 'l1'' \\<times> 'l2 \\<times> 'l2' \\<times> 'l2'' \\<times> 'f) itself\"\n    and tytok_S :: \"('l1 \\<times> 'l1' \\<times> 'l1'' \\<times> 'l2 \\<times> 'l2' \\<times> 'l2'' \\<times> 'f) itself\"\n  assumes \"rel_G_pos_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok_G\"\n  shows \"rel_S_pos_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok_S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S_pos_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n     tytok_S", "unfolding rel_S_pos_distr_cond_def rel_S_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>L1 L1' L2 L2'.\n       vimage2p Rep_S Rep_S (rel_G L1 L2 Co1 Co2 Contra1 Contra2) OO\n       vimage2p Rep_S Rep_S (rel_G L1' L2' Co1' Co2' Contra1' Contra2')\n       \\<le> vimage2p Rep_S Rep_S\n              (rel_G (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n                (Contra1 OO Contra1') (Contra2 OO Contra2'))", "apply(simp add: vimage2p_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>L1 L1' L2 L2'.\n       (\\<lambda>x y.\n           rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S y)) OO\n       (\\<lambda>x y.\n           rel_G L1' L2' Co1' Co2' Contra1' Contra2' (Rep_S x) (Rep_S y))\n       \\<le> (\\<lambda>x y.\n                 rel_G (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n                  (Contra1 OO Contra1') (Contra2 OO Contra2') (Rep_S x)\n                  (Rep_S y))", "apply(intro allI predicate2I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L1 L1' L2 L2' x y.\n       ((\\<lambda>x y.\n            rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S y)) OO\n        (\\<lambda>x y.\n            rel_G L1' L2' Co1' Co2' Contra1' Contra2' (Rep_S x) (Rep_S y)))\n        x y \\<Longrightarrow>\n       rel_G (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n        (Contra1 OO Contra1') (Contra2 OO Contra2') (Rep_S x) (Rep_S y)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L1 L1' L2 L2' x y b.\n       \\<lbrakk>rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S b);\n        rel_G L1' L2' Co1' Co2' Contra1' Contra2' (Rep_S b)\n         (Rep_S y)\\<rbrakk>\n       \\<Longrightarrow> rel_G (L1 OO L1') (L2 OO L2') (Co1 OO Co1')\n                          (Co2 OO Co2') (Contra1 OO Contra1')\n                          (Contra2 OO Contra2') (Rep_S x) (Rep_S y)", "apply(rule rel_G_pos_distr[THEN predicate2D])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>L1 L1' L2 L2' x y b.\n       \\<lbrakk>rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S b);\n        rel_G L1' L2' Co1' Co2' Contra1' Contra2' (Rep_S b)\n         (Rep_S y)\\<rbrakk>\n       \\<Longrightarrow> rel_G_pos_distr_cond Co1 Co1' Co2 Co2' Contra1\n                          Contra1' Contra2 Contra2'\n                          (?uu7 L1 L1' L2 L2' x y b)\n 2. \\<And>L1 L1' L2 L2' x y b.\n       \\<lbrakk>rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S b);\n        rel_G L1' L2' Co1' Co2' Contra1' Contra2' (Rep_S b)\n         (Rep_S y)\\<rbrakk>\n       \\<Longrightarrow> (rel_G L1 L2 Co1 Co2 Contra1 Contra2 OO\n                          rel_G L1' L2' Co1' Co2' Contra1' Contra2')\n                          (Rep_S x) (Rep_S y)", "apply(rule assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L1 L1' L2 L2' x y b.\n       \\<lbrakk>rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S b);\n        rel_G L1' L2' Co1' Co2' Contra1' Contra2' (Rep_S b)\n         (Rep_S y)\\<rbrakk>\n       \\<Longrightarrow> (rel_G L1 L2 Co1 Co2 Contra1 Contra2 OO\n                          rel_G L1' L2' Co1' Co2' Contra1' Contra2')\n                          (Rep_S x) (Rep_S y)", "apply(rule relcomppI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>L1 L1' L2 L2' x y b.\n       \\<lbrakk>rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S b);\n        rel_G L1' L2' Co1' Co2' Contra1' Contra2' (Rep_S b)\n         (Rep_S y)\\<rbrakk>\n       \\<Longrightarrow> rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x)\n                          (?b10 L1 L1' L2 L2' x y b)\n 2. \\<And>L1 L1' L2 L2' x y b.\n       \\<lbrakk>rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S b);\n        rel_G L1' L2' Co1' Co2' Contra1' Contra2' (Rep_S b)\n         (Rep_S y)\\<rbrakk>\n       \\<Longrightarrow> rel_G L1' L2' Co1' Co2' Contra1' Contra2'\n                          (?b10 L1 L1' L2 L2' x y b) (Rep_S y)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L1 L1' L2 L2' x y b.\n       \\<lbrakk>rel_G L1 L2 Co1 Co2 Contra1 Contra2 (Rep_S x) (Rep_S b);\n        rel_G L1' L2' Co1' Co2' Contra1' Contra2' (Rep_S b)\n         (Rep_S y)\\<rbrakk>\n       \\<Longrightarrow> rel_G L1' L2' Co1' Co2' Contra1' Contra2' (Rep_S b)\n                          (Rep_S y)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rel_S_pos_distr_cond_eq:\n  \"\\<And>tytok. rel_S_pos_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) tytok\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>tytok. rel_S_pos_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) tytok", "by (intro rel_S_pos_distr_imp rel_G_pos_distr_cond_eq)"], ["", "lemmas\n  rel_S_pos_distr = rel_S_pos_distr_cond_def[THEN iffD1, rule_format] and\n  rel_S_neg_distr = rel_S_neg_distr_cond_def[THEN iffD1, rule_format]"], ["", "text \\<open>\n  The following composition witness depends only on the abstract condition\n  @{const rel_S_neg_distr_cond}, without additional assumptions.\n\\<close>"], ["", "consts\n  rel_S_witness :: \"('l1 \\<Rightarrow> 'l1'' \\<Rightarrow> bool) \\<Rightarrow> ('l2 \\<Rightarrow> 'l2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool) \\<Rightarrow> ('co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool) \\<Rightarrow> ('co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool) \\<Rightarrow> ('contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool) \\<Rightarrow> ('contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('l1, 'l2, 'co1, 'co2, 'contra1, 'contra2, 'f) S \\<times>\n    ('l1'', 'l2'', 'co1'', 'co2'', 'contra1'', 'contra2'', 'f) S \\<Rightarrow>\n    ('l1 \\<times> 'l1'', 'l2 \\<times> 'l2'', 'co1', 'co2', 'contra1', 'contra2', 'f) S\""], ["", "specification (rel_S_witness)\n  rel_S_witness1: \"\\<And>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n    (tytok :: ('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times> 'f) itself)\n    (x :: ('l1, 'l2, _, _, _, _, 'f) S) (y :: ('l1'', 'l2'', _, _, _, _, 'f) S).\n    \\<lbrakk> rel_S_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok;\n      rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<rbrakk> \\<Longrightarrow>\n    rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y) (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 x\n    (rel_S_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' (x, y))\"\n  rel_S_witness2:\"\\<And>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n    (tytok :: ('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times> 'f) itself)\n    (x :: ('l1, 'l2, _, _, _, _, 'f) S) (y :: ('l1'', 'l2'', _, _, _, _, 'f) S).\n    \\<lbrakk> rel_S_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok;\n      rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<rbrakk> \\<Longrightarrow>\n    rel_S (\\<lambda>(x, y') y. y' = y \\<and> L1 x y) (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1' Contra2'\n    (rel_S_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' (x, y)) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rel_S_witness.\n       (\\<forall>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n           tytok x y.\n           rel_S_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n            Contra2' tytok \\<longrightarrow>\n           rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n            (Contra2 OO Contra2') x y \\<longrightarrow>\n           rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n            (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1\n            Contra2 x\n            (rel_S_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n              Contra2' (x, y))) \\<and>\n       (\\<forall>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n           tytok x y.\n           rel_S_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n            Contra2' tytok \\<longrightarrow>\n           rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n            (Contra2 OO Contra2') x y \\<longrightarrow>\n           rel_S (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n            (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1'\n            Contra2'\n            (rel_S_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n              Contra2' (x, y))\n            y)", "apply(rule exI[where x=\"\\<lambda>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' (x, y). SOME z.\n     rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y) (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 x z \\<and>\n     rel_S (\\<lambda>(x, y') y. y' = y \\<and> L1 x y) (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1' Contra2' z y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n        tytok x y.\n        rel_S_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n         Contra2' tytok \\<longrightarrow>\n        rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n         (Contra2 OO Contra2') x y \\<longrightarrow>\n        rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2\n         x (case (x, y) of\n            (rel_S_witness, y) \\<Rightarrow>\n              SOME z.\n                 rel_S\n                  (\\<lambda>rel_S_witness (x', y).\n                      x' = rel_S_witness \\<and> L1 rel_S_witness y)\n                  (\\<lambda>rel_S_witness (x', y).\n                      x' = rel_S_witness \\<and> L2 rel_S_witness y)\n                  Co1 Co2 Contra1 Contra2 rel_S_witness z \\<and>\n                 rel_S\n                  (\\<lambda>(rel_S_witness, y') y.\n                      y' = y \\<and> L1 rel_S_witness y)\n                  (\\<lambda>(rel_S_witness, y') y.\n                      y' = y \\<and> L2 rel_S_witness y)\n                  Co1' Co2' Contra1' Contra2' z y)) \\<and>\n    (\\<forall>L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n        tytok x y.\n        rel_S_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n         Contra2' tytok \\<longrightarrow>\n        rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n         (Contra2 OO Contra2') x y \\<longrightarrow>\n        rel_S (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n         (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1'\n         Contra2'\n         (case (x, y) of\n          (rel_S_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_S\n                (\\<lambda>rel_S_witness (x', y).\n                    x' = rel_S_witness \\<and> L1 rel_S_witness y)\n                (\\<lambda>rel_S_witness (x', y).\n                    x' = rel_S_witness \\<and> L2 rel_S_witness y)\n                Co1 Co2 Contra1 Contra2 rel_S_witness z \\<and>\n               rel_S\n                (\\<lambda>(rel_S_witness, y') y.\n                    y' = y \\<and> L1 rel_S_witness y)\n                (\\<lambda>(rel_S_witness, y') y.\n                    y' = y \\<and> L2 rel_S_witness y)\n                Co1' Co2' Contra1' Contra2' z y)\n         y)", "apply(fold all_conj_distrib)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa xaa xaaa xaaaa xaaaaa xaaaaaa xaaaaaaa xaaaaaaaa\n       xaaaaaaaaa xaaaaaaaaaa xaaaaaaaaaaa xaaaaaaaaaaaa.\n       (rel_S_neg_distr_cond xaa xaaa xaaaa xaaaaa xaaaaaa xaaaaaaa\n         xaaaaaaaa xaaaaaaaaa xaaaaaaaaaa \\<longrightarrow>\n        rel_S x xa (xaa OO xaaa) (xaaaa OO xaaaaa) (xaaaaaa OO xaaaaaaa)\n         (xaaaaaaaa OO xaaaaaaaaa) xaaaaaaaaaaa\n         xaaaaaaaaaaaa \\<longrightarrow>\n        rel_S (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n         (\\<lambda>x (x', y). x' = x \\<and> xa x y) xaa xaaaa xaaaaaa\n         xaaaaaaaa xaaaaaaaaaaa\n         (case (xaaaaaaaaaaa, xaaaaaaaaaaaa) of\n          (rel_S_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_S\n                (\\<lambda>rel_S_witness (x', y).\n                    x' = rel_S_witness \\<and> x rel_S_witness y)\n                (\\<lambda>rel_S_witness (x', y).\n                    x' = rel_S_witness \\<and> xa rel_S_witness y)\n                xaa xaaaa xaaaaaa xaaaaaaaa rel_S_witness z \\<and>\n               rel_S\n                (\\<lambda>(rel_S_witness, y') y.\n                    y' = y \\<and> x rel_S_witness y)\n                (\\<lambda>(rel_S_witness, y') y.\n                    y' = y \\<and> xa rel_S_witness y)\n                xaaa xaaaaa xaaaaaaa xaaaaaaaaa z y)) \\<and>\n       (rel_S_neg_distr_cond xaa xaaa xaaaa xaaaaa xaaaaaa xaaaaaaa\n         xaaaaaaaa xaaaaaaaaa xaaaaaaaaaa \\<longrightarrow>\n        rel_S x xa (xaa OO xaaa) (xaaaa OO xaaaaa) (xaaaaaa OO xaaaaaaa)\n         (xaaaaaaaa OO xaaaaaaaaa) xaaaaaaaaaaa\n         xaaaaaaaaaaaa \\<longrightarrow>\n        rel_S (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n         (\\<lambda>(x, y') y. y' = y \\<and> xa x y) xaaa xaaaaa xaaaaaaa\n         xaaaaaaaaa\n         (case (xaaaaaaaaaaa, xaaaaaaaaaaaa) of\n          (rel_S_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_S\n                (\\<lambda>rel_S_witness (x', y).\n                    x' = rel_S_witness \\<and> x rel_S_witness y)\n                (\\<lambda>rel_S_witness (x', y).\n                    x' = rel_S_witness \\<and> xa rel_S_witness y)\n                xaa xaaaa xaaaaaa xaaaaaaaa rel_S_witness z \\<and>\n               rel_S\n                (\\<lambda>(rel_S_witness, y') y.\n                    y' = y \\<and> x rel_S_witness y)\n                (\\<lambda>(rel_S_witness, y') y.\n                    y' = y \\<and> xa rel_S_witness y)\n                xaaa xaaaaa xaaaaaaa xaaaaaaaaa z y)\n         xaaaaaaaaaaaa)", "apply(rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl.\n       (rel_S_neg_distr_cond xb xc xd xe xf xg xh xi xj \\<longrightarrow>\n        rel_S x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n         xl \\<longrightarrow>\n        rel_S (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n         (\\<lambda>x (x', y). x' = x \\<and> xa x y) xb xd xf xh xk\n         (case (xk, xl) of\n          (rel_S_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_S\n                (\\<lambda>rel_S_witness (x', y).\n                    x' = rel_S_witness \\<and> x rel_S_witness y)\n                (\\<lambda>rel_S_witness (x', y).\n                    x' = rel_S_witness \\<and> xa rel_S_witness y)\n                xb xd xf xh rel_S_witness z \\<and>\n               rel_S\n                (\\<lambda>(rel_S_witness, y') y.\n                    y' = y \\<and> x rel_S_witness y)\n                (\\<lambda>(rel_S_witness, y') y.\n                    y' = y \\<and> xa rel_S_witness y)\n                xc xe xg xi z y)) \\<and>\n       (rel_S_neg_distr_cond xb xc xd xe xf xg xh xi xj \\<longrightarrow>\n        rel_S x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n         xl \\<longrightarrow>\n        rel_S (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n         (\\<lambda>(x, y') y. y' = y \\<and> xa x y) xc xe xg xi\n         (case (xk, xl) of\n          (rel_S_witness, y) \\<Rightarrow>\n            SOME z.\n               rel_S\n                (\\<lambda>rel_S_witness (x', y).\n                    x' = rel_S_witness \\<and> x rel_S_witness y)\n                (\\<lambda>rel_S_witness (x', y).\n                    x' = rel_S_witness \\<and> xa rel_S_witness y)\n                xb xd xf xh rel_S_witness z \\<and>\n               rel_S\n                (\\<lambda>(rel_S_witness, y') y.\n                    y' = y \\<and> x rel_S_witness y)\n                (\\<lambda>(rel_S_witness, y') y.\n                    y' = y \\<and> xa rel_S_witness y)\n                xc xe xg xi z y)\n         xl)", "apply(fold imp_conjR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl.\n       rel_S_neg_distr_cond xb xc xd xe xf xg xh xi xj \\<longrightarrow>\n       rel_S x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n        xl \\<longrightarrow>\n       rel_S (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n        (\\<lambda>x (x', y). x' = x \\<and> xa x y) xb xd xf xh xk\n        (case (xk, xl) of\n         (rel_S_witness, y) \\<Rightarrow>\n           SOME z.\n              rel_S\n               (\\<lambda>rel_S_witness (x', y).\n                   x' = rel_S_witness \\<and> x rel_S_witness y)\n               (\\<lambda>rel_S_witness (x', y).\n                   x' = rel_S_witness \\<and> xa rel_S_witness y)\n               xb xd xf xh rel_S_witness z \\<and>\n              rel_S\n               (\\<lambda>(rel_S_witness, y') y.\n                   y' = y \\<and> x rel_S_witness y)\n               (\\<lambda>(rel_S_witness, y') y.\n                   y' = y \\<and> xa rel_S_witness y)\n               xc xe xg xi z y) \\<and>\n       rel_S (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n        (\\<lambda>(x, y') y. y' = y \\<and> xa x y) xc xe xg xi\n        (case (xk, xl) of\n         (rel_S_witness, y) \\<Rightarrow>\n           SOME z.\n              rel_S\n               (\\<lambda>rel_S_witness (x', y).\n                   x' = rel_S_witness \\<and> x rel_S_witness y)\n               (\\<lambda>rel_S_witness (x', y).\n                   x' = rel_S_witness \\<and> xa rel_S_witness y)\n               xb xd xf xh rel_S_witness z \\<and>\n              rel_S\n               (\\<lambda>(rel_S_witness, y') y.\n                   y' = y \\<and> x rel_S_witness y)\n               (\\<lambda>(rel_S_witness, y') y.\n                   y' = y \\<and> xa rel_S_witness y)\n               xc xe xg xi z y)\n        xl", "apply(rule impI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl.\n       \\<lbrakk>rel_S_neg_distr_cond xb xc xd xe xf xg xh xi xj;\n        rel_S x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n         xl\\<rbrakk>\n       \\<Longrightarrow> rel_S (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n                          (\\<lambda>x (x', y). x' = x \\<and> xa x y) xb xd\n                          xf xh xk\n                          (case (xk, xl) of\n                           (rel_S_witness, y) \\<Rightarrow>\n                             SOME z.\n                                rel_S\n                                 (\\<lambda>rel_S_witness (x', y).\n                                     x' = rel_S_witness \\<and>\n                                     x rel_S_witness y)\n                                 (\\<lambda>rel_S_witness (x', y).\n                                     x' = rel_S_witness \\<and>\n                                     xa rel_S_witness y)\n                                 xb xd xf xh rel_S_witness z \\<and>\n                                rel_S\n                                 (\\<lambda>(rel_S_witness, y') y.\n                                     y' = y \\<and> x rel_S_witness y)\n                                 (\\<lambda>(rel_S_witness, y') y.\n                                     y' = y \\<and> xa rel_S_witness y)\n                                 xc xe xg xi z y) \\<and>\n                         rel_S (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n                          (\\<lambda>(x, y') y. y' = y \\<and> xa x y) xc xe\n                          xg xi\n                          (case (xk, xl) of\n                           (rel_S_witness, y) \\<Rightarrow>\n                             SOME z.\n                                rel_S\n                                 (\\<lambda>rel_S_witness (x', y).\n                                     x' = rel_S_witness \\<and>\n                                     x rel_S_witness y)\n                                 (\\<lambda>rel_S_witness (x', y).\n                                     x' = rel_S_witness \\<and>\n                                     xa rel_S_witness y)\n                                 xb xd xf xh rel_S_witness z \\<and>\n                                rel_S\n                                 (\\<lambda>(rel_S_witness, y') y.\n                                     y' = y \\<and> x rel_S_witness y)\n                                 (\\<lambda>(rel_S_witness, y') y.\n                                     y' = y \\<and> xa rel_S_witness y)\n                                 xc xe xg xi z y)\n                          xl", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl.\n       \\<lbrakk>rel_S_neg_distr_cond xb xc xd xe xf xg xh xi xj;\n        rel_S x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n         xl\\<rbrakk>\n       \\<Longrightarrow> rel_S (\\<lambda>xa (x', y). x' = xa \\<and> x xa y)\n                          (\\<lambda>x (x', y). x' = x \\<and> xa x y) xb xd\n                          xf xh xk\n                          (SOME z.\n                              rel_S\n                               (\\<lambda>rel_S_witness (x', y).\n                                   x' = rel_S_witness \\<and>\n                                   x rel_S_witness y)\n                               (\\<lambda>rel_S_witness (x', y).\n                                   x' = rel_S_witness \\<and>\n                                   xa rel_S_witness y)\n                               xb xd xf xh xk z \\<and>\n                              rel_S\n                               (\\<lambda>(rel_S_witness, y') y.\n                                   y' = y \\<and> x rel_S_witness y)\n                               (\\<lambda>(rel_S_witness, y') y.\n                                   y' = y \\<and> xa rel_S_witness y)\n                               xc xe xg xi z xl) \\<and>\n                         rel_S (\\<lambda>(xa, y') y. y' = y \\<and> x xa y)\n                          (\\<lambda>(x, y') y. y' = y \\<and> xa x y) xc xe\n                          xg xi\n                          (SOME z.\n                              rel_S\n                               (\\<lambda>rel_S_witness (x', y).\n                                   x' = rel_S_witness \\<and>\n                                   x rel_S_witness y)\n                               (\\<lambda>rel_S_witness (x', y).\n                                   x' = rel_S_witness \\<and>\n                                   xa rel_S_witness y)\n                               xb xd xf xh xk z \\<and>\n                              rel_S\n                               (\\<lambda>(rel_S_witness, y') y.\n                                   y' = y \\<and> x rel_S_witness y)\n                               (\\<lambda>(rel_S_witness, y') y.\n                                   y' = y \\<and> xa rel_S_witness y)\n                               xc xe xg xi z xl)\n                          xl", "apply(rule someI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf xg xh xi xj xk xl.\n       \\<lbrakk>rel_S_neg_distr_cond xb xc xd xe xf xg xh xi xj;\n        rel_S x xa (xb OO xc) (xd OO xe) (xf OO xg) (xh OO xi) xk\n         xl\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xj.\n                            rel_S\n                             (\\<lambda>rel_S_witness (x', y).\n                                 x' = rel_S_witness \\<and>\n                                 x rel_S_witness y)\n                             (\\<lambda>rel_S_witness (x', y).\n                                 x' = rel_S_witness \\<and>\n                                 xa rel_S_witness y)\n                             xb xd xf xh xk xj \\<and>\n                            rel_S\n                             (\\<lambda>(rel_S_witness, y') y.\n                                 y' = y \\<and> x rel_S_witness y)\n                             (\\<lambda>(rel_S_witness, y') y.\n                                 y' = y \\<and> xa rel_S_witness y)\n                             xc xe xg xi xj xl", "subgoal for L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_S_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n              Contra2' x;\n     rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n      (Contra2 OO Contra2') y xl_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_S\n                          (\\<lambda>rel_S_witness (x', y).\n                              x' = rel_S_witness \\<and> L1 rel_S_witness y)\n                          (\\<lambda>rel_S_witness (x', y).\n                              x' = rel_S_witness \\<and> L2 rel_S_witness y)\n                          Co1 Co2 Contra1 Contra2 y x \\<and>\n                         rel_S\n                          (\\<lambda>(rel_S_witness, y') y.\n                              y' = y \\<and> L1 rel_S_witness y)\n                          (\\<lambda>(rel_S_witness, y') y.\n                              y' = y \\<and> L2 rel_S_witness y)\n                          Co1' Co2' Contra1' Contra2' x xl_", "apply(drule rel_S_neg_distr[where\n          ?L1.0 = \"\\<lambda>x (x', y). x' = x \\<and> L1 x y\" and ?L1'.0 = \"\\<lambda>(x, y) y'. y = y' \\<and> L1 x y'\" and\n          ?L2.0 = \"\\<lambda>x (x', y). x' = x \\<and> L2 x y\" and ?L2'.0 = \"\\<lambda>(x, y) y'. y = y' \\<and> L2 x y'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') y xl_;\n     rel_S\n      ((\\<lambda>x (x', y). x' = x \\<and> L1 x y) OO\n       (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y'))\n      ((\\<lambda>x (x', y). x' = x \\<and> L2 x y) OO\n       (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y'))\n      (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n      (Contra2 OO Contra2')\n     \\<le> rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n            (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1\n            Contra2 OO\n           rel_S (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n            (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n            Contra2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_S\n                          (\\<lambda>rel_S_witness (x', y).\n                              x' = rel_S_witness \\<and> L1 rel_S_witness y)\n                          (\\<lambda>rel_S_witness (x', y).\n                              x' = rel_S_witness \\<and> L2 rel_S_witness y)\n                          Co1 Co2 Contra1 Contra2 y x \\<and>\n                         rel_S\n                          (\\<lambda>(rel_S_witness, y') y.\n                              y' = y \\<and> L1 rel_S_witness y)\n                          (\\<lambda>(rel_S_witness, y') y.\n                              y' = y \\<and> L2 rel_S_witness y)\n                          Co1' Co2' Contra1' Contra2' x xl_", "apply(drule predicate2D)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n     (Contra2 OO Contra2') y xl_ \\<Longrightarrow>\n    rel_S\n     ((\\<lambda>x (x', y). x' = x \\<and> L1 x y) OO\n      (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y'))\n     ((\\<lambda>x (x', y). x' = x \\<and> L2 x y) OO\n      (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y'))\n     (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1') (Contra2 OO Contra2')\n     ?x2 ?y2\n 2. \\<lbrakk>rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') y xl_;\n     (rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 OO\n      rel_S (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n       (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n       Contra2')\n      ?x2 ?y2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_S\n                          (\\<lambda>rel_S_witness (x', y).\n                              x' = rel_S_witness \\<and> L1 rel_S_witness y)\n                          (\\<lambda>rel_S_witness (x', y).\n                              x' = rel_S_witness \\<and> L2 rel_S_witness y)\n                          Co1 Co2 Contra1 Contra2 y x \\<and>\n                         rel_S\n                          (\\<lambda>(rel_S_witness, y') y.\n                              y' = y \\<and> L1 rel_S_witness y)\n                          (\\<lambda>(rel_S_witness, y') y.\n                              y' = y \\<and> L2 rel_S_witness y)\n                          Co1' Co2' Contra1' Contra2' x xl_", "apply(erule rel_S_mono[THEN predicate2D, rotated -1]; fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') y xl_;\n     (rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 OO\n      rel_S (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n       (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n       Contra2')\n      y xl_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         rel_S\n                          (\\<lambda>rel_S_witness (x', y).\n                              x' = rel_S_witness \\<and> L1 rel_S_witness y)\n                          (\\<lambda>rel_S_witness (x', y).\n                              x' = rel_S_witness \\<and> L2 rel_S_witness y)\n                          Co1 Co2 Contra1 Contra2 y x \\<and>\n                         rel_S\n                          (\\<lambda>(rel_S_witness, y') y.\n                              y' = y \\<and> L1 rel_S_witness y)\n                          (\\<lambda>(rel_S_witness, y') y.\n                              y' = y \\<and> L2 rel_S_witness y)\n                          Co1' Co2' Contra1' Contra2' x xl_", "apply(erule relcomppE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                 (Contra1 OO Contra1') (Contra2 OO Contra2') y xl_;\n        rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2\n         y b;\n        rel_S (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n         Contra2' b xl_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            rel_S\n                             (\\<lambda>rel_S_witness (x', y).\n                                 x' = rel_S_witness \\<and>\n                                 L1 rel_S_witness y)\n                             (\\<lambda>rel_S_witness (x', y).\n                                 x' = rel_S_witness \\<and>\n                                 L2 rel_S_witness y)\n                             Co1 Co2 Contra1 Contra2 y x \\<and>\n                            rel_S\n                             (\\<lambda>(rel_S_witness, y') y.\n                                 y' = y \\<and> L1 rel_S_witness y)\n                             (\\<lambda>(rel_S_witness, y') y.\n                                 y' = y \\<and> L2 rel_S_witness y)\n                             Co1' Co2' Contra1' Contra2' x xl_", "apply(rule exI conjI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                 (Contra1 OO Contra1') (Contra2 OO Contra2') y xl_;\n        rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2\n         y b;\n        rel_S (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n         Contra2' b xl_\\<rbrakk>\n       \\<Longrightarrow> rel_S\n                          (\\<lambda>rel_S_witness (x', y).\n                              x' = rel_S_witness \\<and> L1 rel_S_witness y)\n                          (\\<lambda>rel_S_witness (x', y).\n                              x' = rel_S_witness \\<and> L2 rel_S_witness y)\n                          Co1 Co2 Contra1 Contra2 y (?x117 b)\n 2. \\<And>b.\n       \\<lbrakk>rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                 (Contra1 OO Contra1') (Contra2 OO Contra2') y xl_;\n        rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n         (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2\n         y b;\n        rel_S (\\<lambda>(x, y) y'. y = y' \\<and> L1 x y')\n         (\\<lambda>(x, y) y'. y = y' \\<and> L2 x y') Co1' Co2' Contra1'\n         Contra2' b xl_\\<rbrakk>\n       \\<Longrightarrow> rel_S\n                          (\\<lambda>(rel_S_witness, y') y.\n                              y' = y \\<and> L1 rel_S_witness y)\n                          (\\<lambda>(rel_S_witness, y') y.\n                              y' = y \\<and> L2 rel_S_witness y)\n                          Co1' Co2' Contra1' Contra2' (?x117 b) xl_", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition set1_S :: \"('live1, 'live2, 'co1, 'co2, 'contra1, 'contra2, 'fixed) S \\<Rightarrow> 'live1 set\"\n  where \"set1_S = set1_G \\<circ> Rep_S\""], ["", "definition set2_S :: \"('live1, 'live2, 'co1, 'co2, 'contra1, 'contra2, 'fixed) S \\<Rightarrow> 'live2 set\"\n  where \"set2_S = set2_G \\<circ> Rep_S\""], ["", "lemma rel_S_alt:\n  \"rel_S L1 L2 (=) (=) (=) (=) x y \\<longleftrightarrow> (\\<exists>z. (set1_S z \\<subseteq> {(x, y). L1 x y} \\<and>\n  set2_S z \\<subseteq> {(x, y). L2 x y}) \\<and> map_S fst fst id id id id z = x \\<and> map_S snd snd id id id id z = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S L1 L2 (=) (=) (=) (=) x y =\n    (\\<exists>z.\n        (set1_S z \\<subseteq> {(x, y). L1 x y} \\<and>\n         set2_S z \\<subseteq> {(x, y). L2 x y}) \\<and>\n        map_S fst fst id id id id z = x \\<and>\n        map_S snd snd id id id id z = y)", "unfolding set1_S_def set2_S_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S L1 L2 (=) (=) (=) (=) x y =\n    (\\<exists>z.\n        (set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y} \\<and>\n         set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y}) \\<and>\n        map_S fst fst id id id id z = x \\<and>\n        map_S snd snd id id id id z = y)", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_S L1 L2 (=) (=) (=) (=) x y \\<Longrightarrow>\n    \\<exists>z.\n       (set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y} \\<and>\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y}) \\<and>\n       map_S fst fst id id id id z = x \\<and>\n       map_S snd snd id id id id z = y\n 2. \\<exists>z.\n       (set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y} \\<and>\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y}) \\<and>\n       map_S fst fst id id id id z = x \\<and>\n       map_S snd snd id id id id z = y \\<Longrightarrow>\n    rel_S L1 L2 (=) (=) (=) (=) x y", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S L1 L2 (=) (=) (=) (=) x y \\<Longrightarrow>\n    \\<exists>z.\n       (set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y} \\<and>\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y}) \\<and>\n       map_S fst fst id id id id z = x \\<and>\n       map_S snd snd id id id id z = y", "apply(subst (asm) (3 4 5 7) OO_eq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S L1 L2 ((=) OO (=)) ((=) OO (=)) ((=) OO (=)) ((=) OO (=)) x\n     y \\<Longrightarrow>\n    \\<exists>z.\n       (set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y} \\<and>\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y}) \\<and>\n       map_S fst fst id id id id z = x \\<and>\n       map_S snd snd id id id id z = y", "apply(rule exI[where x=\"rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S L1 L2 ((=) OO (=)) ((=) OO (=)) ((=) OO (=)) ((=) OO (=)) x\n     y \\<Longrightarrow>\n    (set1_G\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n     \\<subseteq> {(x, y). L1 x y} \\<and>\n     set2_G\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n     \\<subseteq> {(x, y). L2 x y}) \\<and>\n    map_S fst fst id id id id\n     (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)) =\n    x \\<and>\n    map_S snd snd id id id id\n     (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)) =\n    y", "apply(frule rel_S_witness1[OF rel_S_neg_distr_cond_eq])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_S L1 L2 ((=) OO (=)) ((=) OO (=)) ((=) OO (=)) ((=) OO (=))\n              x y;\n     rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n      (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (=) (=) (=) (=) x\n      (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y))\\<rbrakk>\n    \\<Longrightarrow> (set1_G\n                        (Rep_S\n                          (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=)\n                            (=) (x, y)))\n                       \\<subseteq> {(x, y). L1 x y} \\<and>\n                       set2_G\n                        (Rep_S\n                          (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=)\n                            (=) (x, y)))\n                       \\<subseteq> {(x, y). L2 x y}) \\<and>\n                      map_S fst fst id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      x \\<and>\n                      map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(drule rel_S_witness2[OF rel_S_neg_distr_cond_eq])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (=) (=) (=) (=) x\n              (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y));\n     rel_S (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) (=) (=) (=) (=)\n      (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y))\n      y\\<rbrakk>\n    \\<Longrightarrow> (set1_G\n                        (Rep_S\n                          (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=)\n                            (=) (x, y)))\n                       \\<subseteq> {(x, y). L1 x y} \\<and>\n                       set2_G\n                        (Rep_S\n                          (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=)\n                            (=) (x, y)))\n                       \\<subseteq> {(x, y). L2 x y}) \\<and>\n                      map_S fst fst id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      x \\<and>\n                      map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(auto simp add: rel_S_def vimage2p_def rell_G_def[symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                 (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n                 (Rep_S\n                   (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                     (x, y)));\n        rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n         (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n         (Rep_S\n           (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n         (Rep_S y);\n        (a, b)\n        \\<in> set1_G\n               (Rep_S\n                 (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                   (x, y)))\\<rbrakk>\n       \\<Longrightarrow> L1 a b\n 2. \\<And>a b.\n       \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                 (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n                 (Rep_S\n                   (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                     (x, y)));\n        rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n         (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n         (Rep_S\n           (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n         (Rep_S y);\n        (a, b)\n        \\<in> set2_G\n               (Rep_S\n                 (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                   (x, y)))\\<rbrakk>\n       \\<Longrightarrow> L2 a b\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S fst fst id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      x\n 4. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(drule (1) G.Domainp_rel[THEN eq_refl, THEN predicate1D,\n          OF DomainPI, unfolded pred_G_def, THEN conjunct1, THEN bspec,\n          of \"conversep _\" \"conversep _\",\n          unfolded G.rel_conversep Domainp_conversep, unfolded conversep_iff])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                 (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n                 (Rep_S\n                   (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                     (x, y)))\n                 (Rep_S y);\n        (a, b)\n        \\<in> set1_G\n               (Rep_S\n                 (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                   (x, y)));\n        Rangep (\\<lambda>x (x', y). x' = x \\<and> L1 x y) (a, b)\\<rbrakk>\n       \\<Longrightarrow> L1 a b\n 2. \\<And>a b.\n       \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                 (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n                 (Rep_S\n                   (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                     (x, y)));\n        rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n         (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n         (Rep_S\n           (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n         (Rep_S y);\n        (a, b)\n        \\<in> set2_G\n               (Rep_S\n                 (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                   (x, y)))\\<rbrakk>\n       \\<Longrightarrow> L2 a b\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S fst fst id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      x\n 4. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(simp add: Rangep.simps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                 (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n                 (Rep_S\n                   (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                     (x, y)));\n        rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n         (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n         (Rep_S\n           (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n         (Rep_S y);\n        (a, b)\n        \\<in> set2_G\n               (Rep_S\n                 (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                   (x, y)))\\<rbrakk>\n       \\<Longrightarrow> L2 a b\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S fst fst id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      x\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(drule (1) G.Domainp_rel[THEN eq_refl, THEN predicate1D, OF DomainPI,\n          unfolded pred_G_def, THEN conjunct2, THEN bspec, of \"conversep _\" \"conversep _\",\n          unfolded G.rel_conversep Domainp_conversep, unfolded conversep_iff])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                 (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n                 (Rep_S\n                   (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                     (x, y)))\n                 (Rep_S y);\n        (a, b)\n        \\<in> set2_G\n               (Rep_S\n                 (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                   (x, y)));\n        Rangep (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (a, b)\\<rbrakk>\n       \\<Longrightarrow> L2 a b\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S fst fst id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      x\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(simp add: Rangep.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S fst fst id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      x\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(rewrite in \"_ = \\<hole>\" map_S_id[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S fst fst id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      map_S id id id id id id x\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S id id id id id id x =\n                      map_S fst fst id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y))\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(subst rel_S_eq[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_S (=) (=) (=) (=) (=) (=)\n                       (map_S id id id id id id x)\n                       (map_S fst fst id id id id\n                         (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=)\n                           (=) (x, y)))\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(rule map_S_parametric[THEN rel_funD, THEN rel_funD, THEN rel_funD, THEN rel_funD,\n          THEN rel_funD, THEN rel_funD, THEN rel_funD, rotated -1])"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_S ?L1.60 ?L2.60 ?Co1.60 ?Co2.60 ?Contra1.60\n                       ?Contra2.60 x\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y))\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L1.60 (=) id fst\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L2.60 (=) id fst\n 4. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?Co1.60 (=) id id\n 5. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?Co2.60 (=) id id\n 6. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) ?Contra1.60 id id\n 7. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) ?Contra2.60 id id\n 8. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(simp add: rel_S_def vimage2p_def)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_G ?L1.60 ?L2.60 ?Co1.60 ?Co2.60 ?Contra1.60\n                       ?Contra2.60 (Rep_S x)\n                       (Rep_S\n                         (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=)\n                           (=) (x, y)))\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L1.60 (=) id fst\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L2.60 (=) id fst\n 4. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?Co1.60 (=) id id\n 5. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?Co2.60 (=) id id\n 6. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) ?Contra1.60 id id\n 7. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) ?Contra2.60 id id\n 8. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(subst rell_G_def[symmetric])"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rell_G ?L1.60 ?L2.60 (Rep_S x)\n                       (Rep_S\n                         (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=)\n                           (=) (x, y)))\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L1.60 (=) id fst\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L2.60 (=) id fst\n 4. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 5. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 6. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 7. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 8. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply assumption"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (\\<lambda>x (x', y). x' = x \\<and> L1 x y) (=)\n                       id fst\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (=)\n                       id fst\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 4. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 5. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 6. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 7. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(simp_all add: rel_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      y", "apply(rewrite in \"_ = \\<hole>\" map_S_id[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> map_S snd snd id id id id\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y)) =\n                      map_S id id id id id id y", "apply(subst rel_S_eq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_S (=) (=) (=) (=) (=) (=)\n                       (map_S snd snd id id id id\n                         (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=)\n                           (=) (x, y)))\n                       (map_S id id id id id id y)", "apply(rule map_S_parametric[THEN rel_funD, THEN rel_funD, THEN rel_funD, THEN rel_funD,\n          THEN rel_funD, THEN rel_funD, THEN rel_funD, rotated -1])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_S ?L1.152 ?L2.152 ?Co1.152 ?Co2.152 ?Contra1.152\n                       ?Contra2.152\n                       (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                         (x, y))\n                       y\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L1.152 (=) snd id\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L2.152 (=) snd id\n 4. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?Co1.152 (=) id id\n 5. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?Co2.152 (=) id id\n 6. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) ?Contra1.152 id id\n 7. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) ?Contra2.152 id id", "apply(simp add: rel_S_def vimage2p_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_G ?L1.152 ?L2.152 ?Co1.152 ?Co2.152 ?Contra1.152\n                       ?Contra2.152\n                       (Rep_S\n                         (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=)\n                           (=) (x, y)))\n                       (Rep_S y)\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L1.152 (=) snd id\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L2.152 (=) snd id\n 4. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?Co1.152 (=) id id\n 5. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?Co2.152 (=) id id\n 6. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) ?Contra1.152 id id\n 7. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) ?Contra2.152 id id", "apply(subst rell_G_def[symmetric])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rell_G ?L1.152 ?L2.152\n                       (Rep_S\n                         (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=)\n                           (=) (x, y)))\n                       (Rep_S y)\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L1.152 (=) snd id\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun ?L2.152 (=) snd id\n 4. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 5. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 6. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 7. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id", "apply assumption"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (\\<lambda>(x, y') y. y' = y \\<and> L1 x y) (=)\n                       snd id\n 2. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) (=)\n                       snd id\n 3. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 4. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 5. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id\n 6. \\<lbrakk>rell_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n              (\\<lambda>x (x', y). x' = x \\<and> L2 x y) (Rep_S x)\n              (Rep_S\n                (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=)\n                  (x, y)));\n     rell_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n      (\\<lambda>(x, y') y. y' = y \\<and> L2 x y)\n      (Rep_S (rel_S_witness L1 L2 (=) (=) (=) (=) (=) (=) (=) (=) (x, y)))\n      (Rep_S y)\\<rbrakk>\n    \\<Longrightarrow> rel_fun (=) (=) id id", "apply(simp_all add: rel_fun_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y} \\<and>\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y}) \\<and>\n       map_S fst fst id id id id z = x \\<and>\n       map_S snd snd id id id id z = y \\<Longrightarrow>\n    rel_S L1 L2 (=) (=) (=) (=) x y", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y} \\<and>\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y}) \\<and>\n       map_S fst fst id id id id z = x \\<and>\n       map_S snd snd id id id id z = y \\<Longrightarrow>\n    rel_S L1 L2 (=) (=) (=) (=) x y", "apply(elim conjE exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        map_S fst fst id id id id z = x;\n        map_S snd snd id id id id z = y\\<rbrakk>\n       \\<Longrightarrow> rel_S L1 L2 (=) (=) (=) (=) x y", "apply hypsubst"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_S L1 L2 (=) (=) (=) (=)\n                          (map_S fst fst id id id id z)\n                          (map_S snd snd id id id id z)", "apply(rule map_S_parametric[where ?L1.0=\"eq_onp (\\<lambda>(x, y). L1 x y)\" and\n          ?L2.0=\"eq_onp (\\<lambda>(x, y). L2 x y)\", THEN rel_funD, THEN rel_funD, THEN rel_funD,\n          THEN rel_funD, THEN rel_funD, THEN rel_funD, THEN rel_funD, rotated -1])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_S (eq_onp (\\<lambda>(x, y). L1 x y))\n                          (eq_onp (\\<lambda>(x, y). L2 x y)) (?Co1.17 z)\n                          (?Co2.17 z) (?Contra1.17 z) (?Contra2.17 z) z z\n 2. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L1 x y)) L1 fst\n                          snd\n 3. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L2 x y)) L2 fst\n                          snd\n 4. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (?Co1.17 z) (=) id id\n 5. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (?Co2.17 z) (=) id id\n 6. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (?Contra1.17 z) id id\n 7. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (?Contra2.17 z) id id", "apply(simp add: rel_S_def vimage2p_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_G (eq_onp (\\<lambda>(x, y). L1 x y))\n                          (eq_onp (\\<lambda>(x, y). L2 x y)) (?Co1.17 z)\n                          (?Co2.17 z) (?Contra1.17 z) (?Contra2.17 z)\n                          (Rep_S z) (Rep_S z)\n 2. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L1 x y)) L1 fst\n                          snd\n 3. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L2 x y)) L2 fst\n                          snd\n 4. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (?Co1.17 z) (=) id id\n 5. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (?Co2.17 z) (=) id id\n 6. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (?Contra1.17 z) id id\n 7. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (?Contra2.17 z) id id", "apply(subst rell_G_def[symmetric])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rell_G (eq_onp (\\<lambda>(x, y). L1 x y))\n                          (eq_onp (\\<lambda>(x, y). L2 x y)) (Rep_S z)\n                          (Rep_S z)\n 2. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L1 x y)) L1 fst\n                          snd\n 3. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L2 x y)) L2 fst\n                          snd\n 4. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 5. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 6. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 7. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id", "apply(rule G.rel_refl_strong)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>z z1.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z; y = map_S snd snd id id id id z;\n        z1 \\<in> set1_G (Rep_S z)\\<rbrakk>\n       \\<Longrightarrow> eq_onp (\\<lambda>(x, y). L1 x y) z1 z1\n 2. \\<And>z z2.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z; y = map_S snd snd id id id id z;\n        z2 \\<in> set2_G (Rep_S z)\\<rbrakk>\n       \\<Longrightarrow> eq_onp (\\<lambda>(x, y). L2 x y) z2 z2\n 3. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L1 x y)) L1 fst\n                          snd\n 4. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L2 x y)) L2 fst\n                          snd\n 5. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 6. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 7. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 8. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id", "apply(drule (1) subsetD)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>z z1.\n       \\<lbrakk>set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z; y = map_S snd snd id id id id z;\n        z1 \\<in> set1_G (Rep_S z); z1 \\<in> {(x, y). L1 x y}\\<rbrakk>\n       \\<Longrightarrow> eq_onp (\\<lambda>(x, y). L1 x y) z1 z1\n 2. \\<And>z z2.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z; y = map_S snd snd id id id id z;\n        z2 \\<in> set2_G (Rep_S z)\\<rbrakk>\n       \\<Longrightarrow> eq_onp (\\<lambda>(x, y). L2 x y) z2 z2\n 3. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L1 x y)) L1 fst\n                          snd\n 4. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L2 x y)) L2 fst\n                          snd\n 5. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 6. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 7. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 8. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id", "apply(simp add: eq_onp_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>z z2.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z; y = map_S snd snd id id id id z;\n        z2 \\<in> set2_G (Rep_S z)\\<rbrakk>\n       \\<Longrightarrow> eq_onp (\\<lambda>(x, y). L2 x y) z2 z2\n 2. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L1 x y)) L1 fst\n                          snd\n 3. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L2 x y)) L2 fst\n                          snd\n 4. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 5. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 6. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 7. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id", "apply(drule (1) subsetD)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>z z2.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        x = map_S fst fst id id id id z; y = map_S snd snd id id id id z;\n        z2 \\<in> set2_G (Rep_S z); z2 \\<in> {(x, y). L2 x y}\\<rbrakk>\n       \\<Longrightarrow> eq_onp (\\<lambda>(x, y). L2 x y) z2 z2\n 2. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L1 x y)) L1 fst\n                          snd\n 3. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L2 x y)) L2 fst\n                          snd\n 4. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 5. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 6. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 7. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id", "apply(simp add: eq_onp_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L1 x y)) L1 fst\n                          snd\n 2. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (eq_onp (\\<lambda>(x, y). L2 x y)) L2 fst\n                          snd\n 3. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 4. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 5. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id\n 6. \\<And>z.\n       \\<lbrakk>set1_G (Rep_S z) \\<subseteq> {(x, y). L1 x y};\n        set2_G (Rep_S z) \\<subseteq> {(x, y). L2 x y};\n        x = map_S fst fst id id id id z;\n        y = map_S snd snd id id id id z\\<rbrakk>\n       \\<Longrightarrow> rel_fun (=) (=) id id", "apply(simp_all add: rel_fun_def eq_onp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "bnf \"('live1, 'live2, 'co1, 'co2, 'contra1, 'contra2, 'fixed) S\"\n  map: \"\\<lambda>l1 l2. map_S l1 l2 id id id id\"\n  sets: \"set1_S\" \"set2_S\"\n  bd: \"bd_G :: ('co1, 'co2, 'contra1, 'contra2, 'fixed) Gbd rel\"\n  rel: \"\\<lambda>L1 L2. rel_S L1 L2 (=) (=) (=) (=)\""], ["proof (prove)\ngoal (11 subgoals):\n 1. map_S id id id id id id = id\n 2. \\<And>f1 f2 g1 g2.\n       map_S (g1 \\<circ> f1) (g2 \\<circ> f2) id id id id =\n       map_S g1 g2 id id id id \\<circ> map_S f1 f2 id id id id\n 3. \\<And>x f1 f2 g1 g2.\n       \\<lbrakk>\\<And>z1. z1 \\<in> set1_S x \\<Longrightarrow> f1 z1 = g1 z1;\n        \\<And>z2. z2 \\<in> set2_S x \\<Longrightarrow> f2 z2 = g2 z2\\<rbrakk>\n       \\<Longrightarrow> map_S f1 f2 id id id id x =\n                         map_S g1 g2 id id id id x\n 4. \\<And>f1 f2.\n       set1_S \\<circ> map_S f1 f2 id id id id = (`) f1 \\<circ> set1_S\n 5. \\<And>f1 f2.\n       set2_S \\<circ> map_S f1 f2 id id id id = (`) f2 \\<circ> set2_S\n 6. card_order bd_G\n 7. cinfinite bd_G\n 8. \\<And>x. |set1_S x| \\<le>o bd_G\n 9. \\<And>x. |set2_S x| \\<le>o bd_G\n 10. \\<And>R1 R2 S1 S2.\n        rel_S R1 R2 (=) (=) (=) (=) OO rel_S S1 S2 (=) (=) (=) (=)\n        \\<le> rel_S (R1 OO S1) (R2 OO S2) (=) (=) (=) (=)\nA total of 11 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_S id id id id id id = id", "by (rule map_S_id0)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>f1 f2 g1 g2.\n       map_S (g1 \\<circ> f1) (g2 \\<circ> f2) id id id id =\n       map_S g1 g2 id id id id \\<circ> map_S f1 f2 id id id id\n 2. \\<And>x f1 f2 g1 g2.\n       \\<lbrakk>\\<And>z1. z1 \\<in> set1_S x \\<Longrightarrow> f1 z1 = g1 z1;\n        \\<And>z2. z2 \\<in> set2_S x \\<Longrightarrow> f2 z2 = g2 z2\\<rbrakk>\n       \\<Longrightarrow> map_S f1 f2 id id id id x =\n                         map_S g1 g2 id id id id x\n 3. \\<And>f1 f2.\n       set1_S \\<circ> map_S f1 f2 id id id id = (`) f1 \\<circ> set1_S\n 4. \\<And>f1 f2.\n       set2_S \\<circ> map_S f1 f2 id id id id = (`) f2 \\<circ> set2_S\n 5. card_order bd_G\n 6. cinfinite bd_G\n 7. \\<And>x. |set1_S x| \\<le>o bd_G\n 8. \\<And>x. |set2_S x| \\<le>o bd_G\n 9. \\<And>R1 R2 S1 S2.\n       rel_S R1 R2 (=) (=) (=) (=) OO rel_S S1 S2 (=) (=) (=) (=)\n       \\<le> rel_S (R1 OO S1) (R2 OO S2) (=) (=) (=) (=)\n 10. \\<And>R1 R2.\n        rel_S R1 R2 (=) (=) (=) (=) =\n        (\\<lambda>x y.\n            \\<exists>z.\n               (set1_S z \\<subseteq> {(x, y). R1 x y} \\<and>\n                set2_S z \\<subseteq> {(x, y). R2 x y}) \\<and>\n               map_S fst fst id id id id z = x \\<and>\n               map_S snd snd id id id id z = y)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_S (g1_ \\<circ> f1_) (g2_ \\<circ> f2_) id id id id =\n    map_S g1_ g2_ id id id id \\<circ> map_S f1_ f2_ id id id id", "by (simp add: map_S_comp)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x f1 f2 g1 g2.\n       \\<lbrakk>\\<And>z1. z1 \\<in> set1_S x \\<Longrightarrow> f1 z1 = g1 z1;\n        \\<And>z2. z2 \\<in> set2_S x \\<Longrightarrow> f2 z2 = g2 z2\\<rbrakk>\n       \\<Longrightarrow> map_S f1 f2 id id id id x =\n                         map_S g1 g2 id id id id x\n 2. \\<And>f1 f2.\n       set1_S \\<circ> map_S f1 f2 id id id id = (`) f1 \\<circ> set1_S\n 3. \\<And>f1 f2.\n       set2_S \\<circ> map_S f1 f2 id id id id = (`) f2 \\<circ> set2_S\n 4. card_order bd_G\n 5. cinfinite bd_G\n 6. \\<And>x. |set1_S x| \\<le>o bd_G\n 7. \\<And>x. |set2_S x| \\<le>o bd_G\n 8. \\<And>R1 R2 S1 S2.\n       rel_S R1 R2 (=) (=) (=) (=) OO rel_S S1 S2 (=) (=) (=) (=)\n       \\<le> rel_S (R1 OO S1) (R2 OO S2) (=) (=) (=) (=)\n 9. \\<And>R1 R2.\n       rel_S R1 R2 (=) (=) (=) (=) =\n       (\\<lambda>x y.\n           \\<exists>z.\n              (set1_S z \\<subseteq> {(x, y). R1 x y} \\<and>\n               set2_S z \\<subseteq> {(x, y). R2 x y}) \\<and>\n              map_S fst fst id id id id z = x \\<and>\n              map_S snd snd id id id id z = y)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>z1. z1 \\<in> set1_S x_ \\<Longrightarrow> f1_ z1 = g1_ z1;\n     \\<And>z2. z2 \\<in> set2_S x_ \\<Longrightarrow> f2_ z2 = g2_ z2\\<rbrakk>\n    \\<Longrightarrow> map_S f1_ f2_ id id id id x_ =\n                      map_S g1_ g2_ id id id id x_", "apply(simp add: map_S_def set1_S_def set2_S_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>z1.\n                z1 \\<in> set1_G (Rep_S x_) \\<Longrightarrow>\n                f1_ z1 = g1_ z1;\n     \\<And>z2.\n        z2 \\<in> set2_G (Rep_S x_) \\<Longrightarrow>\n        f2_ z2 = g2_ z2\\<rbrakk>\n    \\<Longrightarrow> Abs_S (map_G f1_ f2_ id id id id (Rep_S x_)) =\n                      Abs_S (map_G g1_ g2_ id id id id (Rep_S x_))", "apply(rule arg_cong[where f=\"Abs_S\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>z1.\n                z1 \\<in> set1_G (Rep_S x_) \\<Longrightarrow>\n                f1_ z1 = g1_ z1;\n     \\<And>z2.\n        z2 \\<in> set2_G (Rep_S x_) \\<Longrightarrow>\n        f2_ z2 = g2_ z2\\<rbrakk>\n    \\<Longrightarrow> map_G f1_ f2_ id id id id (Rep_S x_) =\n                      map_G g1_ g2_ id id id id (Rep_S x_)", "apply(fold mapl_G_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>z1.\n                z1 \\<in> set1_G (Rep_S x_) \\<Longrightarrow>\n                f1_ z1 = g1_ z1;\n     \\<And>z2.\n        z2 \\<in> set2_G (Rep_S x_) \\<Longrightarrow>\n        f2_ z2 = g2_ z2\\<rbrakk>\n    \\<Longrightarrow> mapl_G f1_ f2_ (Rep_S x_) = mapl_G g1_ g2_ (Rep_S x_)", "apply(rule G.map_cong[OF refl])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z1.\n       \\<lbrakk>\\<And>z1.\n                   z1 \\<in> set1_G (Rep_S x_) \\<Longrightarrow>\n                   f1_ z1 = g1_ z1;\n        \\<And>z2.\n           z2 \\<in> set2_G (Rep_S x_) \\<Longrightarrow> f2_ z2 = g2_ z2;\n        z1 \\<in> set1_G (Rep_S x_)\\<rbrakk>\n       \\<Longrightarrow> f1_ z1 = g1_ z1\n 2. \\<And>z2.\n       \\<lbrakk>\\<And>z1.\n                   z1 \\<in> set1_G (Rep_S x_) \\<Longrightarrow>\n                   f1_ z1 = g1_ z1;\n        \\<And>z2.\n           z2 \\<in> set2_G (Rep_S x_) \\<Longrightarrow> f2_ z2 = g2_ z2;\n        z2 \\<in> set2_G (Rep_S x_)\\<rbrakk>\n       \\<Longrightarrow> f2_ z2 = g2_ z2", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>f1 f2.\n       set1_S \\<circ> map_S f1 f2 id id id id = (`) f1 \\<circ> set1_S\n 2. \\<And>f1 f2.\n       set2_S \\<circ> map_S f1 f2 id id id id = (`) f2 \\<circ> set2_S\n 3. card_order bd_G\n 4. cinfinite bd_G\n 5. \\<And>x. |set1_S x| \\<le>o bd_G\n 6. \\<And>x. |set2_S x| \\<le>o bd_G\n 7. \\<And>R1 R2 S1 S2.\n       rel_S R1 R2 (=) (=) (=) (=) OO rel_S S1 S2 (=) (=) (=) (=)\n       \\<le> rel_S (R1 OO S1) (R2 OO S2) (=) (=) (=) (=)\n 8. \\<And>R1 R2.\n       rel_S R1 R2 (=) (=) (=) (=) =\n       (\\<lambda>x y.\n           \\<exists>z.\n              (set1_S z \\<subseteq> {(x, y). R1 x y} \\<and>\n               set2_S z \\<subseteq> {(x, y). R2 x y}) \\<and>\n              map_S fst fst id id id id z = x \\<and>\n              map_S snd snd id id id id z = y)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. set1_S \\<circ> map_S f1_ f2_ id id id id = (`) f1_ \\<circ> set1_S", "apply(simp add: set1_S_def map_S_def fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       set1_G (Rep_S (Abs_S (map_G f1_ f2_ id id id id (Rep_S x)))) =\n       f1_ ` set1_G (Rep_S x)", "apply(subst Abs_S_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. map_G f1_ f2_ id id id id (Rep_S x) \\<in> Collect P\n 2. \\<forall>x.\n       set1_G (map_G f1_ f2_ id id id id (Rep_S x)) = f1_ ` set1_G (Rep_S x)", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_G f1_ f2_ id id id id (Rep_S x) \\<in> Collect P", "using Rep_S[of x]"], ["proof (prove)\nusing this:\n  Rep_S x \\<in> {x. P x}\n\ngoal (1 subgoal):\n 1. map_G f1_ f2_ id id id id (Rep_S x) \\<in> Collect P", "by(simp add: P_map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       set1_G (map_G f1_ f2_ id id id id (Rep_S x)) = f1_ ` set1_G (Rep_S x)", "apply(simp add: G.set_map mapl_G_def[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>f1 f2.\n       set2_S \\<circ> map_S f1 f2 id id id id = (`) f2 \\<circ> set2_S\n 2. card_order bd_G\n 3. cinfinite bd_G\n 4. \\<And>x. |set1_S x| \\<le>o bd_G\n 5. \\<And>x. |set2_S x| \\<le>o bd_G\n 6. \\<And>R1 R2 S1 S2.\n       rel_S R1 R2 (=) (=) (=) (=) OO rel_S S1 S2 (=) (=) (=) (=)\n       \\<le> rel_S (R1 OO S1) (R2 OO S2) (=) (=) (=) (=)\n 7. \\<And>R1 R2.\n       rel_S R1 R2 (=) (=) (=) (=) =\n       (\\<lambda>x y.\n           \\<exists>z.\n              (set1_S z \\<subseteq> {(x, y). R1 x y} \\<and>\n               set2_S z \\<subseteq> {(x, y). R2 x y}) \\<and>\n              map_S fst fst id id id id z = x \\<and>\n              map_S snd snd id id id id z = y)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. set2_S \\<circ> map_S f1_ f2_ id id id id = (`) f2_ \\<circ> set2_S", "apply(simp add: set2_S_def map_S_def fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       set2_G (Rep_S (Abs_S (map_G f1_ f2_ id id id id (Rep_S x)))) =\n       f2_ ` set2_G (Rep_S x)", "apply(subst Abs_S_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. map_G f1_ f2_ id id id id (Rep_S x) \\<in> Collect P\n 2. \\<forall>x.\n       set2_G (map_G f1_ f2_ id id id id (Rep_S x)) = f2_ ` set2_G (Rep_S x)", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_G f1_ f2_ id id id id (Rep_S x) \\<in> Collect P", "using Rep_S[of x]"], ["proof (prove)\nusing this:\n  Rep_S x \\<in> {x. P x}\n\ngoal (1 subgoal):\n 1. map_G f1_ f2_ id id id id (Rep_S x) \\<in> Collect P", "by(simp add: P_map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       set2_G (map_G f1_ f2_ id id id id (Rep_S x)) = f2_ ` set2_G (Rep_S x)", "apply(simp add: G.set_map mapl_G_def[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (6 subgoals):\n 1. card_order bd_G\n 2. cinfinite bd_G\n 3. \\<And>x. |set1_S x| \\<le>o bd_G\n 4. \\<And>x. |set2_S x| \\<le>o bd_G\n 5. \\<And>R1 R2 S1 S2.\n       rel_S R1 R2 (=) (=) (=) (=) OO rel_S S1 S2 (=) (=) (=) (=)\n       \\<le> rel_S (R1 OO S1) (R2 OO S2) (=) (=) (=) (=)\n 6. \\<And>R1 R2.\n       rel_S R1 R2 (=) (=) (=) (=) =\n       (\\<lambda>x y.\n           \\<exists>z.\n              (set1_S z \\<subseteq> {(x, y). R1 x y} \\<and>\n               set2_S z \\<subseteq> {(x, y). R2 x y}) \\<and>\n              map_S fst fst id id id id z = x \\<and>\n              map_S snd snd id id id id z = y)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. card_order bd_G", "by(rule bd_G_card_order)"], ["proof (prove)\ngoal (5 subgoals):\n 1. cinfinite bd_G\n 2. \\<And>x. |set1_S x| \\<le>o bd_G\n 3. \\<And>x. |set2_S x| \\<le>o bd_G\n 4. \\<And>R1 R2 S1 S2.\n       rel_S R1 R2 (=) (=) (=) (=) OO rel_S S1 S2 (=) (=) (=) (=)\n       \\<le> rel_S (R1 OO S1) (R2 OO S2) (=) (=) (=) (=)\n 5. \\<And>R1 R2.\n       rel_S R1 R2 (=) (=) (=) (=) =\n       (\\<lambda>x y.\n           \\<exists>z.\n              (set1_S z \\<subseteq> {(x, y). R1 x y} \\<and>\n               set2_S z \\<subseteq> {(x, y). R2 x y}) \\<and>\n              map_S fst fst id id id id z = x \\<and>\n              map_S snd snd id id id id z = y)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. cinfinite bd_G", "by(rule bd_G_cinfinite)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x. |set1_S x| \\<le>o bd_G\n 2. \\<And>x. |set2_S x| \\<le>o bd_G\n 3. \\<And>R1 R2 S1 S2.\n       rel_S R1 R2 (=) (=) (=) (=) OO rel_S S1 S2 (=) (=) (=) (=)\n       \\<le> rel_S (R1 OO S1) (R2 OO S2) (=) (=) (=) (=)\n 4. \\<And>R1 R2.\n       rel_S R1 R2 (=) (=) (=) (=) =\n       (\\<lambda>x y.\n           \\<exists>z.\n              (set1_S z \\<subseteq> {(x, y). R1 x y} \\<and>\n               set2_S z \\<subseteq> {(x, y). R2 x y}) \\<and>\n              map_S fst fst id id id id z = x \\<and>\n              map_S snd snd id id id id z = y)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. |set1_S x_| \\<le>o bd_G", "apply (simp add: set1_S_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. |set1_G (Rep_S x_)| \\<le>o bd_G", "apply (rule set1_G_bound)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. |set2_S x| \\<le>o bd_G\n 2. \\<And>R1 R2 S1 S2.\n       rel_S R1 R2 (=) (=) (=) (=) OO rel_S S1 S2 (=) (=) (=) (=)\n       \\<le> rel_S (R1 OO S1) (R2 OO S2) (=) (=) (=) (=)\n 3. \\<And>R1 R2.\n       rel_S R1 R2 (=) (=) (=) (=) =\n       (\\<lambda>x y.\n           \\<exists>z.\n              (set1_S z \\<subseteq> {(x, y). R1 x y} \\<and>\n               set2_S z \\<subseteq> {(x, y). R2 x y}) \\<and>\n              map_S fst fst id id id id z = x \\<and>\n              map_S snd snd id id id id z = y)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. |set2_S x_| \\<le>o bd_G", "apply (simp add: set2_S_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. |set2_G (Rep_S x_)| \\<le>o bd_G", "apply (rule set2_G_bound)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>R1 R2 S1 S2.\n       rel_S R1 R2 (=) (=) (=) (=) OO rel_S S1 S2 (=) (=) (=) (=)\n       \\<le> rel_S (R1 OO S1) (R2 OO S2) (=) (=) (=) (=)\n 2. \\<And>R1 R2.\n       rel_S R1 R2 (=) (=) (=) (=) =\n       (\\<lambda>x y.\n           \\<exists>z.\n              (set1_S z \\<subseteq> {(x, y). R1 x y} \\<and>\n               set2_S z \\<subseteq> {(x, y). R2 x y}) \\<and>\n              map_S fst fst id id id id z = x \\<and>\n              map_S snd snd id id id id z = y)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S R1_ R2_ (=) (=) (=) (=) OO rel_S S1_ S2_ (=) (=) (=) (=)\n    \\<le> rel_S (R1_ OO S1_) (R2_ OO S2_) (=) (=) (=) (=)", "apply(subst (23 24 25 27) eq_OO[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S R1_ R2_ (=) (=) (=) (=) OO rel_S S1_ S2_ (=) (=) (=) (=)\n    \\<le> rel_S (R1_ OO S1_) (R2_ OO S2_) ((=) OO (=)) ((=) OO (=))\n           ((=) OO (=)) ((=) OO (=))", "apply(rule rel_S_pos_distr_cond_def[THEN iffD1, rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S_pos_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) ?uu", "apply(rule rel_S_pos_distr_imp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_G_pos_distr_cond (=) (=) (=) (=) (=) (=) (=) (=) ?tytok_G2", "apply(rule rel_G_pos_distr_cond_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>R1 R2.\n       rel_S R1 R2 (=) (=) (=) (=) =\n       (\\<lambda>x y.\n           \\<exists>z.\n              (set1_S z \\<subseteq> {(x, y). R1 x y} \\<and>\n               set2_S z \\<subseteq> {(x, y). R2 x y}) \\<and>\n              map_S fst fst id id id id z = x \\<and>\n              map_S snd snd id id id id z = y)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S R1_ R2_ (=) (=) (=) (=) =\n    (\\<lambda>x y.\n        \\<exists>z.\n           (set1_S z \\<subseteq> {(x, y). R1_ x y} \\<and>\n            set2_S z \\<subseteq> {(x, y). R2_ x y}) \\<and>\n           map_S fst fst id id id id z = x \\<and>\n           map_S snd snd id id id id z = y)", "apply(rule ext)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       rel_S R1_ R2_ (=) (=) (=) (=) x y =\n       (\\<exists>z.\n           (set1_S z \\<subseteq> {(x, y). R1_ x y} \\<and>\n            set2_S z \\<subseteq> {(x, y). R2_ x y}) \\<and>\n           map_S fst fst id id id id z = x \\<and>\n           map_S snd snd id id id id z = y)", "apply(rule rel_S_alt)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Closedness under zippings\\<close>"], ["", "lemma P_zip_closed: \\<comment> \\<open>This is @{command lift_bnf}'s property that is too strong.\\<close>\n  assumes \"P (mapl_G fst fst z)\" \"P (mapl_G snd snd z)\"\n  shows \"P z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P z", "oops"], ["", "consts rel_S_neg_distr_cond' :: \"('co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool) \\<Rightarrow> ('co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool) \\<Rightarrow> ('co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool) \\<Rightarrow> ('contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool) \\<Rightarrow> ('contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('l1 \\<times> 'l1' \\<times> 'l1'' \\<times> 'l2 \\<times> 'l2' \\<times> 'l2'' \\<times> 'f) itself \\<Rightarrow> bool\""], ["", "text \\<open>\n  If the set @{term \"{x. P x}\"} is closed under zippings for @{const rel_S_neg_distr_cond'},\n  we inherit the condition for negative subdistributivity from @{type G}.\n\\<close>"], ["", "axiomatization where\n  P_rel_G_zipping: \"\\<And>(L1 :: 'l1 \\<Rightarrow> 'l1'' \\<Rightarrow> bool) (L2 :: 'l2 \\<Rightarrow> 'l2'' \\<Rightarrow> bool)\n    Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n    (tytok :: ('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times> 'f) itself) x y z.\n    \\<lbrakk> P x; P y;\n      rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1') (Contra2 OO Contra2') x y;\n      rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y) (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 x z;\n      rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y) (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1' Contra2' z y;\n      rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok \\<rbrakk>\n    \\<Longrightarrow> P z\"\n  and\n  rel_S_neg_distr_cond'_stronger: \"\\<And>Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok.\n    rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok \\<Longrightarrow>\n    rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok\"\n  and\n  rel_S_neg_distr_cond'_eq:\n  \"\\<And>tytok. rel_S_neg_distr_cond' (=) (=) (=) (=) (=) (=) (=) (=) tytok\""], ["", "context includes lifting_syntax\nbegin"], ["", "definition rel_S_witness' :: \"('live1 \\<Rightarrow> 'live1'' \\<Rightarrow> bool) \\<Rightarrow> ('live2 \\<Rightarrow> 'live2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool) \\<Rightarrow> ('co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool) \\<Rightarrow> ('co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool) \\<Rightarrow> ('contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool) \\<Rightarrow> ('contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool) \\<Rightarrow>\n    ('live1, 'live2, 'co1, 'co2, 'contra1, 'contra2, 'fixed) S \\<times>\n    ('live1'', 'live2'', 'co1'', 'co2'', 'contra1'', 'contra2'', 'fixed) S \\<Rightarrow>\n    ('live1 \\<times> 'live1'', 'live2 \\<times> 'live2'', 'co1', 'co2', 'contra1', 'contra2', 'fixed) S\"\n  where\n    \"rel_S_witness' = (id ---> id ---> id ---> id ---> id ---> id --->\n    id ---> id ---> id ---> id ---> map_prod Rep_S Rep_S ---> Abs_S) rel_G_witness\""], ["", "lemma rel_S_witness'1:\n  fixes L1 :: \"'l1 \\<Rightarrow> 'l1'' \\<Rightarrow> bool\" and L2 :: \"'l2 \\<Rightarrow> 'l2'' \\<Rightarrow> bool\"\n    and Co1 :: \"'co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool\" and Co1' :: \"'co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool\"\n    and Co2 :: \"'co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool\" and Co2' :: \"'co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool\"\n    and Contra1 :: \"'contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool\" and Contra1' :: \"'contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool\"\n    and Contra2 :: \"'contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool\" and Contra2' :: \"'contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool\"\n    and tytok :: \"('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times> 'f) itself\"\n    and x :: \"(_, _, _, _, _, _, 'f) S\"\n  assumes \"rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1') (Contra2 OO Contra2') x y\"\n    and \"rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok\"\n  shows \"rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y) (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 x\n    (rel_S_witness' L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' (x, y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n     (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 x\n     (rel_S_witness' L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n       Contra2' (x, y))", "using assms"], ["proof (prove)\nusing this:\n  rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n   (Contra2 OO Contra2') x y\n  rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n   tytok\n\ngoal (1 subgoal):\n 1. rel_S (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n     (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2 x\n     (rel_S_witness' L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n       Contra2' (x, y))", "unfolding rel_S_def rel_S_witness'_def"], ["proof (prove)\nusing this:\n  vimage2p Rep_S Rep_S\n   (rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n     (Contra2 OO Contra2'))\n   x y\n  rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n   tytok\n\ngoal (1 subgoal):\n 1. vimage2p Rep_S Rep_S\n     (rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2 Contra1 Contra2)\n     x ((id --->\n         id --->\n         id --->\n         id --->\n         id --->\n         id --->\n         id ---> id ---> id ---> id ---> map_prod Rep_S Rep_S ---> Abs_S)\n         rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n         Contra2' (x, y))", "apply(simp add: vimage2p_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2\n                       Contra1 Contra2 (Rep_S x)\n                       (Rep_S\n                         (Abs_S\n                           (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                             Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))))", "apply(subst Abs_S_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1'\n                       Contra2 Contra2' (Rep_S x, Rep_S y)\n                      \\<in> Collect P\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2\n                       Contra1 Contra2 (Rep_S x)\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> P (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                          Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2\n                       Contra1 Contra2 (Rep_S x)\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))", "apply(rule P_rel_G_zipping[OF Rep_S[of x, simplified] Rep_S[of y, simplified], rotated])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> ?L1.2 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> ?L2.2 x y) ?Co1.2\n                       ?Co2.2 ?Contra1.2 ?Contra2.2 (Rep_S x)\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> ?L1.2 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> ?L2.2 x y) ?Co1'2\n                       ?Co2'2 ?Contra1'2 ?Contra2'2\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)\n 3. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_S_neg_distr_cond' ?Co1.2 ?Co1'2 ?Co2.2 ?Co2'2\n                       ?Contra1.2 ?Contra1'2 ?Contra2.2 ?Contra2'2 ?tytok2\n 4. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G ?L1.2 ?L2.2 (?Co1.2 OO ?Co1'2)\n                       (?Co2.2 OO ?Co2'2) (?Contra1.2 OO ?Contra1'2)\n                       (?Contra2.2 OO ?Contra2'2) (Rep_S x) (Rep_S y)\n 5. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2\n                       Contra1 Contra2 (Rep_S x)\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))", "apply(erule rel_G_witness1[rotated])"], ["proof (prove)\ngoal (5 subgoals):\n 1. rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n     Contra2' tytok \\<Longrightarrow>\n    rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n     ?tytok7\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) ?Co1'2\n                       ?Co2'2 ?Contra1'2 ?Contra2'2\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)\n 3. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_S_neg_distr_cond' Co1 ?Co1'2 Co2 ?Co2'2 Contra1\n                       ?Contra1'2 Contra2 ?Contra2'2 ?tytok2\n 4. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G L1 L2 (Co1 OO ?Co1'2) (Co2 OO ?Co2'2)\n                       (Contra1 OO ?Contra1'2) (Contra2 OO ?Contra2'2)\n                       (Rep_S x) (Rep_S y)\n 5. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2\n                       Contra1 Contra2 (Rep_S x)\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))", "apply(erule rel_S_neg_distr_cond'_stronger)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) ?Co1'2\n                       ?Co2'2 ?Contra1'2 ?Contra2'2\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_S_neg_distr_cond' Co1 ?Co1'2 Co2 ?Co2'2 Contra1\n                       ?Contra1'2 Contra2 ?Contra2'2 ?tytok2\n 3. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G L1 L2 (Co1 OO ?Co1'2) (Co2 OO ?Co2'2)\n                       (Contra1 OO ?Contra1'2) (Contra2 OO ?Contra2'2)\n                       (Rep_S x) (Rep_S y)\n 4. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2\n                       Contra1 Contra2 (Rep_S x)\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))", "apply(erule rel_G_witness2[rotated])"], ["proof (prove)\ngoal (4 subgoals):\n 1. rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n     Contra2' tytok \\<Longrightarrow>\n    rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n     ?tytok10\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1\n                       Contra1' Contra2 Contra2' ?tytok2\n 3. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                       (Contra1 OO Contra1') (Contra2 OO Contra2') (Rep_S x)\n                       (Rep_S y)\n 4. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2\n                       Contra1 Contra2 (Rep_S x)\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))", "apply(erule rel_S_neg_distr_cond'_stronger)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1\n                       Contra1' Contra2 Contra2' ?tytok2\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                       (Contra1 OO Contra1') (Contra2 OO Contra2') (Rep_S x)\n                       (Rep_S y)\n 3. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2\n                       Contra1 Contra2 (Rep_S x)\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                       (Contra1 OO Contra1') (Contra2 OO Contra2') (Rep_S x)\n                       (Rep_S y)\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2\n                       Contra1 Contra2 (Rep_S x)\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> L1 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> L2 x y) Co1 Co2\n                       Contra1 Contra2 (Rep_S x)\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))", "apply(erule rel_G_witness1[rotated])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n     Contra2' tytok \\<Longrightarrow>\n    rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n     ?tytok13", "apply(erule rel_S_neg_distr_cond'_stronger)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rel_S_witness'2:\n  fixes L1 :: \"'l1 \\<Rightarrow> 'l1'' \\<Rightarrow> bool\" and L2 :: \"'l2 \\<Rightarrow> 'l2'' \\<Rightarrow> bool\"\n    and Co1 :: \"'co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool\" and Co1' :: \"'co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool\"\n    and Co2 :: \"'co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool\" and Co2' :: \"'co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool\"\n    and Contra1 :: \"'contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool\" and Contra1' :: \"'contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool\"\n    and Contra2 :: \"'contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool\" and Contra2' :: \"'contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool\"\n    and tytok :: \"('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times> 'f) itself\"\n    and x :: \"(_, _, _, _, _, _, 'f) S\"\n  assumes \"rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1') (Contra2 OO Contra2') x y\"\n    and \"rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok\"\n  shows \"rel_S (\\<lambda>(x, y') y. y' = y \\<and> L1 x y) (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1' Contra2'\n    (rel_S_witness' L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' (x, y)) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n     (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1' Contra2'\n     (rel_S_witness' L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n       Contra2' (x, y))\n     y", "using assms"], ["proof (prove)\nusing this:\n  rel_S L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n   (Contra2 OO Contra2') x y\n  rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n   tytok\n\ngoal (1 subgoal):\n 1. rel_S (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n     (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1' Contra2'\n     (rel_S_witness' L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n       Contra2' (x, y))\n     y", "unfolding rel_S_def rel_S_witness'_def"], ["proof (prove)\nusing this:\n  vimage2p Rep_S Rep_S\n   (rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n     (Contra2 OO Contra2'))\n   x y\n  rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n   tytok\n\ngoal (1 subgoal):\n 1. vimage2p Rep_S Rep_S\n     (rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2' Contra1'\n       Contra2')\n     ((id --->\n       id --->\n       id --->\n       id --->\n       id --->\n       id --->\n       id ---> id ---> id ---> id ---> map_prod Rep_S Rep_S ---> Abs_S)\n       rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n       Contra2' (x, y))\n     y", "apply(simp add: vimage2p_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2'\n                       Contra1' Contra2'\n                       (Rep_S\n                         (Abs_S\n                           (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                             Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))))\n                       (Rep_S y)", "apply(subst Abs_S_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1 Contra1'\n                       Contra2 Contra2' (Rep_S x, Rep_S y)\n                      \\<in> Collect P\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2'\n                       Contra1' Contra2'\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> P (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                          Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2'\n                       Contra1' Contra2'\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)", "apply(rule P_rel_G_zipping[OF Rep_S[of x, simplified] Rep_S[of y, simplified], rotated])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>x (x', y). x' = x \\<and> ?L1.2 x y)\n                       (\\<lambda>x (x', y). x' = x \\<and> ?L2.2 x y) ?Co1.2\n                       ?Co2.2 ?Contra1.2 ?Contra2.2 (Rep_S x)\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> ?L1.2 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> ?L2.2 x y) ?Co1'2\n                       ?Co2'2 ?Contra1'2 ?Contra2'2\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)\n 3. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_S_neg_distr_cond' ?Co1.2 ?Co1'2 ?Co2.2 ?Co2'2\n                       ?Contra1.2 ?Contra1'2 ?Contra2.2 ?Contra2'2 ?tytok2\n 4. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G ?L1.2 ?L2.2 (?Co1.2 OO ?Co1'2)\n                       (?Co2.2 OO ?Co2'2) (?Contra1.2 OO ?Contra1'2)\n                       (?Contra2.2 OO ?Contra2'2) (Rep_S x) (Rep_S y)\n 5. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2'\n                       Contra1' Contra2'\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)", "apply(erule rel_G_witness1[rotated])"], ["proof (prove)\ngoal (5 subgoals):\n 1. rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n     Contra2' tytok \\<Longrightarrow>\n    rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n     ?tytok7\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) ?Co1'2\n                       ?Co2'2 ?Contra1'2 ?Contra2'2\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)\n 3. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_S_neg_distr_cond' Co1 ?Co1'2 Co2 ?Co2'2 Contra1\n                       ?Contra1'2 Contra2 ?Contra2'2 ?tytok2\n 4. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G L1 L2 (Co1 OO ?Co1'2) (Co2 OO ?Co2'2)\n                       (Contra1 OO ?Contra1'2) (Contra2 OO ?Contra2'2)\n                       (Rep_S x) (Rep_S y)\n 5. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2'\n                       Contra1' Contra2'\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)", "apply(erule rel_S_neg_distr_cond'_stronger)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) ?Co1'2\n                       ?Co2'2 ?Contra1'2 ?Contra2'2\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_S_neg_distr_cond' Co1 ?Co1'2 Co2 ?Co2'2 Contra1\n                       ?Contra1'2 Contra2 ?Contra2'2 ?tytok2\n 3. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G L1 L2 (Co1 OO ?Co1'2) (Co2 OO ?Co2'2)\n                       (Contra1 OO ?Contra1'2) (Contra2 OO ?Contra2'2)\n                       (Rep_S x) (Rep_S y)\n 4. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2'\n                       Contra1' Contra2'\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)", "apply(erule rel_G_witness2[rotated])"], ["proof (prove)\ngoal (4 subgoals):\n 1. rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n     Contra2' tytok \\<Longrightarrow>\n    rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n     ?tytok10\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1\n                       Contra1' Contra2 Contra2' ?tytok2\n 3. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                       (Contra1 OO Contra1') (Contra2 OO Contra2') (Rep_S x)\n                       (Rep_S y)\n 4. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2'\n                       Contra1' Contra2'\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)", "apply(erule rel_S_neg_distr_cond'_stronger)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1\n                       Contra1' Contra2 Contra2' ?tytok2\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                       (Contra1 OO Contra1') (Contra2 OO Contra2') (Rep_S x)\n                       (Rep_S y)\n 3. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2'\n                       Contra1' Contra2'\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2')\n                       (Contra1 OO Contra1') (Contra2 OO Contra2') (Rep_S x)\n                       (Rep_S y)\n 2. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2'\n                       Contra1' Contra2'\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_G L1 L2 (Co1 OO Co1') (Co2 OO Co2') (Contra1 OO Contra1')\n              (Contra2 OO Contra2') (Rep_S x) (Rep_S y);\n     rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n      Contra2' tytok\\<rbrakk>\n    \\<Longrightarrow> rel_G (\\<lambda>(x, y') y. y' = y \\<and> L1 x y)\n                       (\\<lambda>(x, y') y. y' = y \\<and> L2 x y) Co1' Co2'\n                       Contra1' Contra2'\n                       (rel_G_witness L1 L2 Co1 Co1' Co2 Co2' Contra1\n                         Contra1' Contra2 Contra2' (Rep_S x, Rep_S y))\n                       (Rep_S y)", "apply(erule rel_G_witness2[rotated])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2\n     Contra2' tytok \\<Longrightarrow>\n    rel_G_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n     ?tytok13", "apply(erule rel_S_neg_distr_cond'_stronger)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rel_S_neg_distr_imp:\n  fixes Co1 :: \"'co1 \\<Rightarrow> 'co1' \\<Rightarrow> bool\" and Co1' :: \"'co1' \\<Rightarrow> 'co1'' \\<Rightarrow> bool\"\n    and Co2 :: \"'co2 \\<Rightarrow> 'co2' \\<Rightarrow> bool\" and Co2' :: \"'co2' \\<Rightarrow> 'co2'' \\<Rightarrow> bool\"\n    and Contra1 :: \"'contra1 \\<Rightarrow> 'contra1' \\<Rightarrow> bool\" and Contra1' :: \"'contra1' \\<Rightarrow> 'contra1'' \\<Rightarrow> bool\"\n    and Contra2 :: \"'contra2 \\<Rightarrow> 'contra2' \\<Rightarrow> bool\" and Contra2' :: \"'contra2' \\<Rightarrow> 'contra2'' \\<Rightarrow> bool\"\n    and tytok_S' :: \"('l1 \\<times> ('l1 \\<times> 'l1'') \\<times> 'l1'' \\<times> 'l2 \\<times> ('l2 \\<times> 'l2'') \\<times> 'l2'' \\<times> 'f) itself\"\n    and tytok_S :: \"('l1 \\<times> 'l1' \\<times> 'l1'' \\<times> 'l2 \\<times> 'l2' \\<times> 'l2'' \\<times> 'f) itself\"\n  assumes \"rel_S_neg_distr_cond' Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok_S'\"\n  shows \"rel_S_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2' tytok_S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S_neg_distr_cond Co1 Co1' Co2 Co2' Contra1 Contra1' Contra2 Contra2'\n     tytok_S", "unfolding rel_S_neg_distr_cond_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>L1 L1' L2 L2'.\n       rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n        (Contra1 OO Contra1') (Contra2 OO Contra2')\n       \\<le> rel_S L1 L2 Co1 Co2 Contra1 Contra2 OO\n             rel_S L1' L2' Co1' Co2' Contra1' Contra2'", "proof (intro allI predicate2I relcomppI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>L1 L1' L2 L2' x y.\n       rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n        (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<Longrightarrow>\n       rel_S L1 L2 Co1 Co2 Contra1 Contra2 x (?b5 L1 L1' L2 L2' x y)\n 2. \\<And>L1 L1' L2 L2' x y.\n       rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n        (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<Longrightarrow>\n       rel_S L1' L2' Co1' Co2' Contra1' Contra2' (?b5 L1 L1' L2 L2' x y) y", "fix L1 :: \"'l1 \\<Rightarrow> 'l1' \\<Rightarrow> bool\" and L1' :: \"'l1' \\<Rightarrow> 'l1'' \\<Rightarrow> bool\"\n    and L2 :: \"'l2 \\<Rightarrow> 'l2' \\<Rightarrow> bool\" and L2' :: \"'l2' \\<Rightarrow> 'l2'' \\<Rightarrow> bool\"\n    and x :: \"(_, _, _, _, _, _, 'f) S\" and y :: \"(_, _, _, _, _, _, 'f) S\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>L1 L1' L2 L2' x y.\n       rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n        (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<Longrightarrow>\n       rel_S L1 L2 Co1 Co2 Contra1 Contra2 x (?b5 L1 L1' L2 L2' x y)\n 2. \\<And>L1 L1' L2 L2' x y.\n       rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n        (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<Longrightarrow>\n       rel_S L1' L2' Co1' Co2' Contra1' Contra2' (?b5 L1 L1' L2 L2' x y) y", "assume *: \"rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n    (Contra1 OO Contra1') (Contra2 OO Contra2') x y\""], ["proof (state)\nthis:\n  rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n   (Contra1 OO Contra1') (Contra2 OO Contra2') x y\n\ngoal (2 subgoals):\n 1. \\<And>L1 L1' L2 L2' x y.\n       rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n        (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<Longrightarrow>\n       rel_S L1 L2 Co1 Co2 Contra1 Contra2 x (?b5 L1 L1' L2 L2' x y)\n 2. \\<And>L1 L1' L2 L2' x y.\n       rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n        (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<Longrightarrow>\n       rel_S L1' L2' Co1' Co2' Contra1' Contra2' (?b5 L1 L1' L2 L2' x y) y", "let ?z = \"map_S (relcompp_witness L1 L1') (relcompp_witness L2 L2') id id id id\n    (rel_S_witness' (L1 OO L1') (L2 OO L2') Co1 Co1' Co2 Co2'\n    Contra1 Contra1' Contra2 Contra2' (x, y))\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>L1 L1' L2 L2' x y.\n       rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n        (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<Longrightarrow>\n       rel_S L1 L2 Co1 Co2 Contra1 Contra2 x (?b5 L1 L1' L2 L2' x y)\n 2. \\<And>L1 L1' L2 L2' x y.\n       rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n        (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<Longrightarrow>\n       rel_S L1' L2' Co1' Co2' Contra1' Contra2' (?b5 L1 L1' L2 L2' x y) y", "show \"rel_S L1 L2 Co1 Co2 Contra1 Contra2 x ?z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S L1 L2 Co1 Co2 Contra1 Contra2 x\n     (map_S (relcompp_witness L1 L1') (relcompp_witness L2 L2') id id id id\n       (rel_S_witness' (L1 OO L1') (L2 OO L2') Co1 Co1' Co2 Co2' Contra1\n         Contra1' Contra2 Contra2' (x, y)))", "apply(subst map_S_id[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S L1 L2 Co1 Co2 Contra1 Contra2 (map_S id id id id id id x)\n     (map_S (relcompp_witness L1 L1') (relcompp_witness L2 L2') id id id id\n       (rel_S_witness' (L1 OO L1') (L2 OO L2') Co1 Co1' Co2 Co2' Contra1\n         Contra1' Contra2 Contra2' (x, y)))", "apply(rule map_S_rel_cong)"], ["proof (prove)\ngoal (7 subgoals):\n 1. rel_S ?L1.0 ?L2.0 ?Co1.0 ?Co2.0 ?Contra1.0 ?Contra2.0 x\n     (rel_S_witness' (L1 OO L1') (L2 OO L2') Co1 Co1' Co2 Co2' Contra1\n       Contra1' Contra2 Contra2' (x, y))\n 2. \\<And>x y.\n       ?L1.0 x y \\<Longrightarrow> L1 (id x) (relcompp_witness L1 L1' y)\n 3. \\<And>x y.\n       ?L2.0 x y \\<Longrightarrow> L2 (id x) (relcompp_witness L2 L2' y)\n 4. \\<And>x y. ?Co1.0 x y \\<Longrightarrow> Co1 (id x) (id y)\n 5. \\<And>x y. ?Co2.0 x y \\<Longrightarrow> Co2 (id x) (id y)\n 6. \\<And>x y. Contra1 x y \\<Longrightarrow> ?Contra1.0 (id x) (id y)\n 7. \\<And>x y. Contra2 x y \\<Longrightarrow> ?Contra2.0 (id x) (id y)", "apply(rule rel_S_witness'1[OF * assms])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       case y of\n       (x', y) \\<Rightarrow> x' = x \\<and> (L1 OO L1') x y \\<Longrightarrow>\n       L1 (id x) (relcompp_witness L1 L1' y)\n 2. \\<And>x y.\n       case y of\n       (x', y) \\<Rightarrow> x' = x \\<and> (L2 OO L2') x y \\<Longrightarrow>\n       L2 (id x) (relcompp_witness L2 L2' y)\n 3. \\<And>x y. Co1 x y \\<Longrightarrow> Co1 (id x) (id y)\n 4. \\<And>x y. Co2 x y \\<Longrightarrow> Co2 (id x) (id y)\n 5. \\<And>x y. Contra1 x y \\<Longrightarrow> Contra1 (id x) (id y)\n 6. \\<And>x y. Contra2 x y \\<Longrightarrow> Contra2 (id x) (id y)", "apply(auto simp add: vimage2p_def del: relcomppE elim!: relcompp_witness)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rel_S L1 L2 Co1 Co2 Contra1 Contra2 x\n   (map_S (relcompp_witness L1 L1') (relcompp_witness L2 L2') id id id id\n     (rel_S_witness' (L1 OO L1') (L2 OO L2') Co1 Co1' Co2 Co2' Contra1\n       Contra1' Contra2 Contra2' (x, y)))\n\ngoal (1 subgoal):\n 1. \\<And>L1 L1' L2 L2' x y.\n       rel_S (L1 OO L1') (L2 OO L2') (Co1 OO Co1') (Co2 OO Co2')\n        (Contra1 OO Contra1') (Contra2 OO Contra2') x y \\<Longrightarrow>\n       rel_S L1' L2' Co1' Co2' Contra1' Contra2'\n        (map_S (relcompp_witness L1 L1') (relcompp_witness L2 L2') id id id\n          id (rel_S_witness' (L1 OO L1') (L2 OO L2') Co1 Co1' Co2 Co2'\n               Contra1 Contra1' Contra2 Contra2' (x, y)))\n        y", "show \"rel_S L1' L2' Co1' Co2' Contra1' Contra2' ?z y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S L1' L2' Co1' Co2' Contra1' Contra2'\n     (map_S (relcompp_witness L1 L1') (relcompp_witness L2 L2') id id id id\n       (rel_S_witness' (L1 OO L1') (L2 OO L2') Co1 Co1' Co2 Co2' Contra1\n         Contra1' Contra2 Contra2' (x, y)))\n     y", "apply(rewrite in \"rel_S _ _ _ _ _ _ _ \\<hole>\" map_S_id[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_S L1' L2' Co1' Co2' Contra1' Contra2'\n     (map_S (relcompp_witness L1 L1') (relcompp_witness L2 L2') id id id id\n       (rel_S_witness' (L1 OO L1') (L2 OO L2') Co1 Co1' Co2 Co2' Contra1\n         Contra1' Contra2 Contra2' (x, y)))\n     (map_S id id id id id id y)", "apply(rule map_S_rel_cong)"], ["proof (prove)\ngoal (7 subgoals):\n 1. rel_S ?L1.3 ?L2.3 ?Co1.3 ?Co2.3 ?Contra1.3 ?Contra2.3\n     (rel_S_witness' (L1 OO L1') (L2 OO L2') Co1 Co1' Co2 Co2' Contra1\n       Contra1' Contra2 Contra2' (x, y))\n     y\n 2. \\<And>x y.\n       ?L1.3 x y \\<Longrightarrow> L1' (relcompp_witness L1 L1' x) (id y)\n 3. \\<And>x y.\n       ?L2.3 x y \\<Longrightarrow> L2' (relcompp_witness L2 L2' x) (id y)\n 4. \\<And>x y. ?Co1.3 x y \\<Longrightarrow> Co1' (id x) (id y)\n 5. \\<And>x y. ?Co2.3 x y \\<Longrightarrow> Co2' (id x) (id y)\n 6. \\<And>x y. Contra1' x y \\<Longrightarrow> ?Contra1.3 (id x) (id y)\n 7. \\<And>x y. Contra2' x y \\<Longrightarrow> ?Contra2.3 (id x) (id y)", "apply(rule rel_S_witness'2[OF * assms])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       (case x of\n        (x, y') \\<Rightarrow> \\<lambda>y. y' = y \\<and> (L1 OO L1') x y)\n        y \\<Longrightarrow>\n       L1' (relcompp_witness L1 L1' x) (id y)\n 2. \\<And>x y.\n       (case x of\n        (x, y') \\<Rightarrow> \\<lambda>y. y' = y \\<and> (L2 OO L2') x y)\n        y \\<Longrightarrow>\n       L2' (relcompp_witness L2 L2' x) (id y)\n 3. \\<And>x y. Co1' x y \\<Longrightarrow> Co1' (id x) (id y)\n 4. \\<And>x y. Co2' x y \\<Longrightarrow> Co2' (id x) (id y)\n 5. \\<And>x y. Contra1' x y \\<Longrightarrow> Contra1' (id x) (id y)\n 6. \\<And>x y. Contra2' x y \\<Longrightarrow> Contra2' (id x) (id y)", "apply(auto simp add: vimage2p_def del: relcomppE elim!: relcompp_witness)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rel_S L1' L2' Co1' Co2' Contra1' Contra2'\n   (map_S (relcompp_witness L1 L1') (relcompp_witness L2 L2') id id id id\n     (rel_S_witness' (L1 OO L1') (L2 OO L2') Co1 Co1' Co2 Co2' Contra1\n       Contra1' Contra2 Contra2' (x, y)))\n   y\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* context includes lifting_syntax *)"], ["", "subsection \\<open>Subtypes of BNFs without co- and contravariance\\<close>"], ["", "text \\<open>\n  If all variables are live, @{command lift_bnf}'s requirement \\<open>P_zip_closed\\<close> is equivalent\n  to our closedness under zippings, and Popescu's weaker condition is equivalent to negative\n  subdistributivity restricted to the subset.\n\\<close>"], ["", "bnf_axiomatization 'a H"], ["", "consts Q :: \"'a H \\<Rightarrow> bool\""], ["", "axiomatization where\n  Q_map: \"\\<And>x l. Q x \\<Longrightarrow> Q (map_H l x)\""], ["", "lemma Q_rel_H_zipping:\n  fixes x :: \"'a H\" and y :: \"'c H\" and z :: \"('a \\<times> 'c) H\"\n  assumes Q_zip: \"\\<And>z :: ('a \\<times> 'c) H. \\<lbrakk> Q (map_H fst z); Q (map_H snd z) \\<rbrakk> \\<Longrightarrow> Q z\"\n    and \"Q x\" and \"Q y\" and \"rel_H L x y\"\n    and related: \"rel_H (\\<lambda>x (x', y). x' = x \\<and> L x y) x z\" \"rel_H (\\<lambda>(x, y') y. y' = y \\<and> L x y) z y\"\n  shows \"Q z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Q z", "have \"map_H fst z = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_H fst z = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map_H fst z = x", "from related(1)"], ["proof (chain)\npicking this:\n  rel_H (\\<lambda>x (x', y). x' = x \\<and> L x y) x z", "have \"rel_H (=) x (map_H fst z)\""], ["proof (prove)\nusing this:\n  rel_H (\\<lambda>x (x', y). x' = x \\<and> L x y) x z\n\ngoal (1 subgoal):\n 1. rel_H (=) x (map_H fst z)", "by (auto simp add: H.rel_map elim: H.rel_mono_strong)"], ["proof (state)\nthis:\n  rel_H (=) x (map_H fst z)\n\ngoal (1 subgoal):\n 1. map_H fst z = x", "then"], ["proof (chain)\npicking this:\n  rel_H (=) x (map_H fst z)", "show ?thesis"], ["proof (prove)\nusing this:\n  rel_H (=) x (map_H fst z)\n\ngoal (1 subgoal):\n 1. map_H fst z = x", "by (simp add: H.rel_eq)"], ["proof (state)\nthis:\n  map_H fst z = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map_H fst z = x\n\ngoal (1 subgoal):\n 1. Q z", "moreover"], ["proof (state)\nthis:\n  map_H fst z = x\n\ngoal (1 subgoal):\n 1. Q z", "have \"map_H snd z = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_H snd z = y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map_H snd z = y", "from related(2)"], ["proof (chain)\npicking this:\n  rel_H (\\<lambda>(x, y') y. y' = y \\<and> L x y) z y", "have \"rel_H (=) (map_H snd z) y\""], ["proof (prove)\nusing this:\n  rel_H (\\<lambda>(x, y') y. y' = y \\<and> L x y) z y\n\ngoal (1 subgoal):\n 1. rel_H (=) (map_H snd z) y", "by (auto simp add: H.rel_map elim: H.rel_mono_strong)"], ["proof (state)\nthis:\n  rel_H (=) (map_H snd z) y\n\ngoal (1 subgoal):\n 1. map_H snd z = y", "then"], ["proof (chain)\npicking this:\n  rel_H (=) (map_H snd z) y", "show ?thesis"], ["proof (prove)\nusing this:\n  rel_H (=) (map_H snd z) y\n\ngoal (1 subgoal):\n 1. map_H snd z = y", "by (simp add: H.rel_eq)"], ["proof (state)\nthis:\n  map_H snd z = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map_H snd z = y\n\ngoal (1 subgoal):\n 1. Q z", "moreover"], ["proof (state)\nthis:\n  map_H snd z = y\n\ngoal (1 subgoal):\n 1. Q z", "note \\<open>Q x\\<close> \\<open>Q y\\<close>"], ["proof (state)\nthis:\n  Q x\n  Q y\n\ngoal (1 subgoal):\n 1. Q z", "ultimately"], ["proof (chain)\npicking this:\n  map_H fst z = x\n  map_H snd z = y\n  Q x\n  Q y", "show ?thesis"], ["proof (prove)\nusing this:\n  map_H fst z = x\n  map_H snd z = y\n  Q x\n  Q y\n\ngoal (1 subgoal):\n 1. Q z", "using Q_zip"], ["proof (prove)\nusing this:\n  map_H fst z = x\n  map_H snd z = y\n  Q x\n  Q y\n  \\<lbrakk>Q (map_H fst ?z); Q (map_H snd ?z)\\<rbrakk>\n  \\<Longrightarrow> Q ?z\n\ngoal (1 subgoal):\n 1. Q z", "by blast"], ["proof (state)\nthis:\n  Q z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Q_zip:\n  fixes z :: \"('a \\<times> 'c) H\"\n  assumes Q_rel_H_zipping: \"\\<And>(L :: 'a \\<Rightarrow> 'c \\<Rightarrow> _) x y z.\n      \\<lbrakk> Q x; Q y; rel_H L x y; rel_H (\\<lambda>x (x', y). x' = x \\<and> L x y) x z;\n        rel_H (\\<lambda>(x, y') y. y' = y \\<and> L x y) z y \\<rbrakk> \\<Longrightarrow> Q z\"\n    and \"Q (map_H fst z)\" and \"Q (map_H snd z)\"\n  shows \"Q z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Q z", "let ?L = \"\\<lambda>a (a', b). a' = a \\<and> top a b\" and ?L' = \"\\<lambda>(b, c') c. c' = c \\<and> top b c\""], ["proof (state)\ngoal (1 subgoal):\n 1. Q z", "have *: \"rel_H ?L (map_H fst z) z\" \"rel_H ?L' z (map_H snd z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_H (\\<lambda>a (a', b). a' = a \\<and> top a b) (map_H fst z) z &&&\n    rel_H (\\<lambda>(b, c') c. c' = c \\<and> top b c) z (map_H snd z)", "by (auto simp add: H.rel_map Grp_apply intro!: H.rel_refl_strong)"], ["proof (state)\nthis:\n  rel_H (\\<lambda>a (a', b). a' = a \\<and> top a b) (map_H fst z) z\n  rel_H (\\<lambda>(b, c') c. c' = c \\<and> top b c) z (map_H snd z)\n\ngoal (1 subgoal):\n 1. Q z", "then"], ["proof (chain)\npicking this:\n  rel_H (\\<lambda>a (a', b). a' = a \\<and> top a b) (map_H fst z) z\n  rel_H (\\<lambda>(b, c') c. c' = c \\<and> top b c) z (map_H snd z)", "have \"rel_H (?L OO ?L') (map_H fst z) (map_H snd z)\""], ["proof (prove)\nusing this:\n  rel_H (\\<lambda>a (a', b). a' = a \\<and> top a b) (map_H fst z) z\n  rel_H (\\<lambda>(b, c') c. c' = c \\<and> top b c) z (map_H snd z)\n\ngoal (1 subgoal):\n 1. rel_H\n     ((\\<lambda>a (a', b). a' = a \\<and> top a b) OO\n      (\\<lambda>(b, c') c. c' = c \\<and> top b c))\n     (map_H fst z) (map_H snd z)", "by (auto simp add: H.rel_compp)"], ["proof (state)\nthis:\n  rel_H\n   ((\\<lambda>a (a', b). a' = a \\<and> top a b) OO\n    (\\<lambda>(b, c') c. c' = c \\<and> top b c))\n   (map_H fst z) (map_H snd z)\n\ngoal (1 subgoal):\n 1. Q z", "then"], ["proof (chain)\npicking this:\n  rel_H\n   ((\\<lambda>a (a', b). a' = a \\<and> top a b) OO\n    (\\<lambda>(b, c') c. c' = c \\<and> top b c))\n   (map_H fst z) (map_H snd z)", "have \"rel_H top (map_H fst z) (map_H snd z)\""], ["proof (prove)\nusing this:\n  rel_H\n   ((\\<lambda>a (a', b). a' = a \\<and> top a b) OO\n    (\\<lambda>(b, c') c. c' = c \\<and> top b c))\n   (map_H fst z) (map_H snd z)\n\ngoal (1 subgoal):\n 1. rel_H top (map_H fst z) (map_H snd z)", "by (simp add: relcompp_apply[abs_def] top_fun_def)"], ["proof (state)\nthis:\n  rel_H top (map_H fst z) (map_H snd z)\n\ngoal (1 subgoal):\n 1. Q z", "with \\<open>Q (map_H fst z)\\<close> \\<open>Q (map_H snd z)\\<close> *"], ["proof (chain)\npicking this:\n  Q (map_H fst z)\n  Q (map_H snd z)\n  rel_H (\\<lambda>a (a', b). a' = a \\<and> top a b) (map_H fst z) z\n  rel_H (\\<lambda>(b, c') c. c' = c \\<and> top b c) z (map_H snd z)\n  rel_H top (map_H fst z) (map_H snd z)", "show \"Q z\""], ["proof (prove)\nusing this:\n  Q (map_H fst z)\n  Q (map_H snd z)\n  rel_H (\\<lambda>a (a', b). a' = a \\<and> top a b) (map_H fst z) z\n  rel_H (\\<lambda>(b, c') c. c' = c \\<and> top b c) z (map_H snd z)\n  rel_H top (map_H fst z) (map_H snd z)\n\ngoal (1 subgoal):\n 1. Q z", "using Q_rel_H_zipping"], ["proof (prove)\nusing this:\n  Q (map_H fst z)\n  Q (map_H snd z)\n  rel_H (\\<lambda>a (a', b). a' = a \\<and> top a b) (map_H fst z) z\n  rel_H (\\<lambda>(b, c') c. c' = c \\<and> top b c) z (map_H snd z)\n  rel_H top (map_H fst z) (map_H snd z)\n  \\<lbrakk>Q ?x; Q ?y; rel_H ?L ?x ?y;\n   rel_H (\\<lambda>x (x', y). x' = x \\<and> ?L x y) ?x ?z;\n   rel_H (\\<lambda>(x, y') y. y' = y \\<and> ?L x y) ?z ?y\\<rbrakk>\n  \\<Longrightarrow> Q ?z\n\ngoal (1 subgoal):\n 1. Q z", "by blast"], ["proof (state)\nthis:\n  Q z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Q_neg_distr:\n  fixes x :: \"'a H\" and y :: \"'c H\"\n  assumes Q_zip_weak: \"\\<And>z :: ('a \\<times> 'c) H. \\<lbrakk> Q (map_H fst z); Q (map_H snd z) \\<rbrakk> \\<Longrightarrow>\n      \\<exists>z'. Q z' \\<and> set_H z' \\<subseteq> set_H z \\<and> map_H fst z' = map_H fst z \\<and> map_H snd z' = map_H snd z\"\n    and \"Q x\" and \"Q y\" and related: \"rel_H (L OO L') x y\"\n  shows \"(rel_H L OO eq_onp Q OO rel_H L') x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_H L OO eq_onp Q OO rel_H L') x y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (rel_H L OO eq_onp Q OO rel_H L') x y", "from related"], ["proof (chain)\npicking this:\n  rel_H (L OO L') x y", "obtain z where\n    *: \"set_H z \\<subseteq> {(x, y). (L OO L') x y}\" \"map_H fst z = x\" \"map_H snd z = y\""], ["proof (prove)\nusing this:\n  rel_H (L OO L') x y\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>set_H z \\<subseteq> {(x, y). (L OO L') x y};\n         map_H fst z = x; map_H snd z = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding H.rel_compp_Grp"], ["proof (prove)\nusing this:\n  ((Grp {x. set_H x \\<subseteq> {(x, y). (L OO L') x y}}\n     (map_H fst))\\<inverse>\\<inverse> OO\n   Grp {x. set_H x \\<subseteq> {(x, y). (L OO L') x y}} (map_H snd))\n   x y\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>set_H z \\<subseteq> {(x, y). (L OO L') x y};\n         map_H fst z = x; map_H snd z = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (blast elim: GrpE)"], ["proof (state)\nthis:\n  set_H z \\<subseteq> {(x, y). (L OO L') x y}\n  map_H fst z = x\n  map_H snd z = y\n\ngoal (1 subgoal):\n 1. (rel_H L OO eq_onp Q OO rel_H L') x y", "with \\<open>Q x\\<close> \\<open>Q y\\<close>"], ["proof (chain)\npicking this:\n  Q x\n  Q y\n  set_H z \\<subseteq> {(x, y). (L OO L') x y}\n  map_H fst z = x\n  map_H snd z = y", "have \"Q (map_H fst z)\" and \"Q (map_H snd z)\""], ["proof (prove)\nusing this:\n  Q x\n  Q y\n  set_H z \\<subseteq> {(x, y). (L OO L') x y}\n  map_H fst z = x\n  map_H snd z = y\n\ngoal (1 subgoal):\n 1. Q (map_H fst z) &&& Q (map_H snd z)", "by simp_all"], ["proof (state)\nthis:\n  Q (map_H fst z)\n  Q (map_H snd z)\n\ngoal (1 subgoal):\n 1. (rel_H L OO eq_onp Q OO rel_H L') x y", "then"], ["proof (chain)\npicking this:\n  Q (map_H fst z)\n  Q (map_H snd z)", "obtain z' where \"Q z'\" \"set_H z' \\<subseteq> set_H z\"\n    \"map_H fst z' = map_H fst z\" \"map_H snd z' = map_H snd z\""], ["proof (prove)\nusing this:\n  Q (map_H fst z)\n  Q (map_H snd z)\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Q_zip_weak"], ["proof (prove)\nusing this:\n  Q (map_H fst z)\n  Q (map_H snd z)\n  \\<lbrakk>Q (map_H fst ?z); Q (map_H snd ?z)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z'.\n                       Q z' \\<and>\n                       set_H z' \\<subseteq> set_H ?z \\<and>\n                       map_H fst z' = map_H fst ?z \\<and>\n                       map_H snd z' = map_H snd ?z\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Q z'\n  set_H z' \\<subseteq> set_H z\n  map_H fst z' = map_H fst z\n  map_H snd z' = map_H snd z\n\ngoal (1 subgoal):\n 1. (rel_H L OO eq_onp Q OO rel_H L') x y", "with *"], ["proof (chain)\npicking this:\n  set_H z \\<subseteq> {(x, y). (L OO L') x y}\n  map_H fst z = x\n  map_H snd z = y\n  Q z'\n  set_H z' \\<subseteq> set_H z\n  map_H fst z' = map_H fst z\n  map_H snd z' = map_H snd z", "have **: \"set_H z' \\<subseteq> {(x, y). (L OO L') x y}\" \"x = map_H fst z'\" \"y = map_H snd z'\""], ["proof (prove)\nusing this:\n  set_H z \\<subseteq> {(x, y). (L OO L') x y}\n  map_H fst z = x\n  map_H snd z = y\n  Q z'\n  set_H z' \\<subseteq> set_H z\n  map_H fst z' = map_H fst z\n  map_H snd z' = map_H snd z\n\ngoal (1 subgoal):\n 1. set_H z' \\<subseteq> {(x, y). (L OO L') x y} &&&\n    x = map_H fst z' &&& y = map_H snd z'", "by simp_all"], ["proof (state)\nthis:\n  set_H z' \\<subseteq> {(x, y). (L OO L') x y}\n  x = map_H fst z'\n  y = map_H snd z'\n\ngoal (1 subgoal):\n 1. (rel_H L OO eq_onp Q OO rel_H L') x y", "let ?z = \"map_H (relcompp_witness L L') z'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (rel_H L OO eq_onp Q OO rel_H L') x y", "from \\<open>Q z'\\<close>"], ["proof (chain)\npicking this:\n  Q z'", "have \"Q ?z\""], ["proof (prove)\nusing this:\n  Q z'\n\ngoal (1 subgoal):\n 1. Q (map_H (relcompp_witness L L') z')", "by (rule Q_map)"], ["proof (state)\nthis:\n  Q (map_H (relcompp_witness L L') z')\n\ngoal (1 subgoal):\n 1. (rel_H L OO eq_onp Q OO rel_H L') x y", "moreover"], ["proof (state)\nthis:\n  Q (map_H (relcompp_witness L L') z')\n\ngoal (1 subgoal):\n 1. (rel_H L OO eq_onp Q OO rel_H L') x y", "have \"rel_H L x ?z\" \"rel_H L' ?z y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_H L x (map_H (relcompp_witness L L') z') &&&\n    rel_H L' (map_H (relcompp_witness L L') z') y", "using **"], ["proof (prove)\nusing this:\n  set_H z' \\<subseteq> {(x, y). (L OO L') x y}\n  x = map_H fst z'\n  y = map_H snd z'\n\ngoal (1 subgoal):\n 1. rel_H L x (map_H (relcompp_witness L L') z') &&&\n    rel_H L' (map_H (relcompp_witness L L') z') y", "by (auto simp add: H.rel_map intro!: H.rel_refl_strong\n        relcompp_witness[of L L' \"fst p\" \"snd p\" for p, simplified])"], ["proof (state)\nthis:\n  rel_H L x (map_H (relcompp_witness L L') z')\n  rel_H L' (map_H (relcompp_witness L L') z') y\n\ngoal (1 subgoal):\n 1. (rel_H L OO eq_onp Q OO rel_H L') x y", "ultimately"], ["proof (chain)\npicking this:\n  Q (map_H (relcompp_witness L L') z')\n  rel_H L x (map_H (relcompp_witness L L') z')\n  rel_H L' (map_H (relcompp_witness L L') z') y", "show ?thesis"], ["proof (prove)\nusing this:\n  Q (map_H (relcompp_witness L L') z')\n  rel_H L x (map_H (relcompp_witness L L') z')\n  rel_H L' (map_H (relcompp_witness L L') z') y\n\ngoal (1 subgoal):\n 1. (rel_H L OO eq_onp Q OO rel_H L') x y", "unfolding eq_onp_def"], ["proof (prove)\nusing this:\n  Q (map_H (relcompp_witness L L') z')\n  rel_H L x (map_H (relcompp_witness L L') z')\n  rel_H L' (map_H (relcompp_witness L L') z') y\n\ngoal (1 subgoal):\n 1. (rel_H L OO (\\<lambda>x y. Q x \\<and> x = y) OO rel_H L') x y", "by blast"], ["proof (state)\nthis:\n  (rel_H L OO eq_onp Q OO rel_H L') x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Q_zip_weak:\n  fixes z :: \"('a \\<times> 'c) H\"\n  assumes Q_neg_distr: \"\\<And>(L :: 'a \\<Rightarrow> ('a \\<times> 'c) \\<Rightarrow> _) (L' :: ('a \\<times> 'c) \\<Rightarrow> 'c \\<Rightarrow> bool) x y.\n      \\<lbrakk> Q x; Q y; rel_H (L OO L') x y \\<rbrakk> \\<Longrightarrow> (rel_H L OO eq_onp Q OO rel_H L') x y\"\n    and \"Q (map_H fst z)\" and \"Q (map_H snd z)\"\n  obtains z' where \"Q z'\" and \"set_H z' \\<subseteq> set_H z\"\n    and \"map_H fst z' = map_H fst z\" and \"map_H snd z' = map_H snd z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?L = \"(Grp (set_H z) fst)\\<inverse>\\<inverse>\" and ?L' = \"Grp (set_H z) snd\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"rel_H ?L (map_H fst z) z\" \"rel_H ?L' z (map_H snd z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> (map_H fst z) z &&&\n    rel_H (Grp (set_H z) snd) z (map_H snd z)", "by (auto simp add: H.rel_map Grp_apply intro!: H.rel_refl_strong)"], ["proof (state)\nthis:\n  rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> (map_H fst z) z\n  rel_H (Grp (set_H z) snd) z (map_H snd z)\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> (map_H fst z) z\n  rel_H (Grp (set_H z) snd) z (map_H snd z)", "have \"rel_H (?L OO ?L') (map_H fst z) (map_H snd z)\""], ["proof (prove)\nusing this:\n  rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> (map_H fst z) z\n  rel_H (Grp (set_H z) snd) z (map_H snd z)\n\ngoal (1 subgoal):\n 1. rel_H ((Grp (set_H z) fst)\\<inverse>\\<inverse> OO Grp (set_H z) snd)\n     (map_H fst z) (map_H snd z)", "by (auto simp add: H.rel_compp)"], ["proof (state)\nthis:\n  rel_H ((Grp (set_H z) fst)\\<inverse>\\<inverse> OO Grp (set_H z) snd)\n   (map_H fst z) (map_H snd z)\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with \\<open>Q (map_H fst z)\\<close> \\<open>Q (map_H snd z)\\<close>"], ["proof (chain)\npicking this:\n  Q (map_H fst z)\n  Q (map_H snd z)\n  rel_H ((Grp (set_H z) fst)\\<inverse>\\<inverse> OO Grp (set_H z) snd)\n   (map_H fst z) (map_H snd z)", "have \"(rel_H ?L OO eq_onp Q OO rel_H ?L') (map_H fst z) (map_H snd z)\""], ["proof (prove)\nusing this:\n  Q (map_H fst z)\n  Q (map_H snd z)\n  rel_H ((Grp (set_H z) fst)\\<inverse>\\<inverse> OO Grp (set_H z) snd)\n   (map_H fst z) (map_H snd z)\n\ngoal (1 subgoal):\n 1. (rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> OO\n     eq_onp Q OO rel_H (Grp (set_H z) snd))\n     (map_H fst z) (map_H snd z)", "by (rule Q_neg_distr)"], ["proof (state)\nthis:\n  (rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> OO\n   eq_onp Q OO rel_H (Grp (set_H z) snd))\n   (map_H fst z) (map_H snd z)\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  (rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> OO\n   eq_onp Q OO rel_H (Grp (set_H z) snd))\n   (map_H fst z) (map_H snd z)", "obtain z' where \"Q z'\" \"rel_H ?L (map_H fst z) z'\" \"rel_H ?L' z' (map_H snd z)\""], ["proof (prove)\nusing this:\n  (rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> OO\n   eq_onp Q OO rel_H (Grp (set_H z) snd))\n   (map_H fst z) (map_H snd z)\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z';\n         rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> (map_H fst z) z';\n         rel_H (Grp (set_H z) snd) z' (map_H snd z)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding eq_onp_def"], ["proof (prove)\nusing this:\n  (rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> OO\n   (\\<lambda>x y. Q x \\<and> x = y) OO rel_H (Grp (set_H z) snd))\n   (map_H fst z) (map_H snd z)\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z';\n         rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> (map_H fst z) z';\n         rel_H (Grp (set_H z) snd) z' (map_H snd z)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Q z'\n  rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> (map_H fst z) z'\n  rel_H (Grp (set_H z) snd) z' (map_H snd z)\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  Q z'\n  rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> (map_H fst z) z'\n  rel_H (Grp (set_H z) snd) z' (map_H snd z)", "have \"rel_H (\\<lambda>a b. snd b = snd a \\<and> a \\<in> set_H z) z' z\""], ["proof (prove)\nusing this:\n  Q z'\n  rel_H (Grp (set_H z) fst)\\<inverse>\\<inverse> (map_H fst z) z'\n  rel_H (Grp (set_H z) snd) z' (map_H snd z)\n\ngoal (1 subgoal):\n 1. rel_H (\\<lambda>a b. snd b = snd a \\<and> a \\<in> set_H z) z' z", "by (simp add: H.rel_map Grp_apply)"], ["proof (state)\nthis:\n  rel_H (\\<lambda>a b. snd b = snd a \\<and> a \\<in> set_H z) z' z\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  rel_H (\\<lambda>a b. snd b = snd a \\<and> a \\<in> set_H z) z' z", "have \"rel_H (\\<lambda>a b. a \\<in> set_H z) z' z\""], ["proof (prove)\nusing this:\n  rel_H (\\<lambda>a b. snd b = snd a \\<and> a \\<in> set_H z) z' z\n\ngoal (1 subgoal):\n 1. rel_H (\\<lambda>a b. a \\<in> set_H z) z' z", "by (auto elim: H.rel_mono_strong)"], ["proof (state)\nthis:\n  rel_H (\\<lambda>a b. a \\<in> set_H z) z' z\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  rel_H (\\<lambda>a b. a \\<in> set_H z) z' z", "have \"pred_H (Domainp (\\<lambda>a (b :: ('a \\<times> 'c)). a \\<in> set_H z)) z'\""], ["proof (prove)\nusing this:\n  rel_H (\\<lambda>a b. a \\<in> set_H z) z' z\n\ngoal (1 subgoal):\n 1. pred_H (Domainp (\\<lambda>a b. a \\<in> set_H z)) z'", "by (auto simp add: H.Domainp_rel[symmetric] Domainp_iff)"], ["proof (state)\nthis:\n  pred_H (Domainp (\\<lambda>a b. a \\<in> set_H z)) z'\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  pred_H (Domainp (\\<lambda>a b. a \\<in> set_H z)) z'", "have \"set_H z' \\<subseteq> set_H z\""], ["proof (prove)\nusing this:\n  pred_H (Domainp (\\<lambda>a b. a \\<in> set_H z)) z'\n\ngoal (1 subgoal):\n 1. set_H z' \\<subseteq> set_H z", "unfolding H.axiom10_H"], ["proof (prove)\nusing this:\n  Ball (set_H z') (Domainp (\\<lambda>a b. a \\<in> set_H z))\n\ngoal (1 subgoal):\n 1. set_H z' \\<subseteq> set_H z", "by auto"], ["proof (state)\nthis:\n  set_H z' \\<subseteq> set_H z\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  set_H z' \\<subseteq> set_H z\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"map_H fst z' = map_H fst z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_H fst z' = map_H fst z", "apply (rule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_H fst z = map_H fst z'", "apply (subst H.rel_eq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_H (=) (map_H fst z) (map_H fst z')", "apply (subst H.rel_map(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_H (\\<lambda>x y. x = fst y) (map_H fst z) z'", "apply (rule H.rel_mono_strong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_H ?R2 (map_H fst z) z'\n 2. \\<And>za yb.\n       \\<lbrakk>za \\<in> set_H (map_H fst z); yb \\<in> set_H z';\n        ?R2 za yb\\<rbrakk>\n       \\<Longrightarrow> za = fst yb", "apply (fact \\<open>rel_H ?L (map_H fst z) z'\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>za yb.\n       \\<lbrakk>za \\<in> set_H (map_H fst z); yb \\<in> set_H z';\n        (Grp (set_H z) fst)\\<inverse>\\<inverse> za yb\\<rbrakk>\n       \\<Longrightarrow> za = fst yb", "apply (simp add: Grp_apply)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  map_H fst z' = map_H fst z\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  map_H fst z' = map_H fst z\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"map_H snd z' = map_H snd z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_H snd z' = map_H snd z", "apply (subst H.rel_eq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_H (=) (map_H snd z') (map_H snd z)", "apply (subst H.rel_map(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_H (\\<lambda>x. (=) (snd x)) z' (map_H snd z)", "apply (rule H.rel_mono_strong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_H ?R z' (map_H snd z)\n 2. \\<And>za yb.\n       \\<lbrakk>za \\<in> set_H z'; yb \\<in> set_H (map_H snd z);\n        ?R za yb\\<rbrakk>\n       \\<Longrightarrow> snd za = yb", "apply (fact \\<open>rel_H ?L' z' (map_H snd z)\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>za yb.\n       \\<lbrakk>za \\<in> set_H z'; yb \\<in> set_H (map_H snd z);\n        Grp (set_H z) snd za yb\\<rbrakk>\n       \\<Longrightarrow> snd za = yb", "apply (simp add: Grp_apply)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  map_H snd z' = map_H snd z\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  map_H snd z' = map_H snd z\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note \\<open>Q z'\\<close>"], ["proof (state)\nthis:\n  Q z'\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>Q z'; set_H z' \\<subseteq> set_H z;\n         map_H fst z' = map_H fst z; map_H snd z' = map_H snd z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  set_H z' \\<subseteq> set_H z\n  map_H fst z' = map_H fst z\n  map_H snd z' = map_H snd z\n  Q z'", "show thesis"], ["proof (prove)\nusing this:\n  set_H z' \\<subseteq> set_H z\n  map_H fst z' = map_H fst z\n  map_H snd z' = map_H snd z\n  Q z'\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  set_H z' \\<subseteq> set_H z\n  map_H fst z' = map_H fst z\n  map_H snd z' = map_H snd z\n  Q z'\n  \\<lbrakk>Q ?z'; set_H ?z' \\<subseteq> set_H z;\n   map_H fst ?z' = map_H fst z; map_H snd ?z' = map_H snd z\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}