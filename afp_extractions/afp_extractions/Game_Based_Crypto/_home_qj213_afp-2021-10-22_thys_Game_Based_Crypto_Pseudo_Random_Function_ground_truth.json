{"file_name": "/home/qj213/afp-2021-10-22/thys/Game_Based_Crypto/Pseudo_Random_Function.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Game_Based_Crypto", "problem_names": ["lemma weight_random_oracle [simp]:\n  \"weight_spmf p = 1 \\<Longrightarrow> weight_spmf (random_oracle \\<sigma> x) = 1\"", "lemma lossless_random_oracle [simp]:\n  \"lossless_spmf p \\<Longrightarrow> lossless_spmf (random_oracle \\<sigma> x)\"", "lemma card_dom_random_oracle:\n  assumes \"interaction_any_bounded_by \\<A> q\"\n  and \"(y, \\<sigma>') \\<in> set_spmf (exec_gpv random_oracle \\<A> \\<sigma>)\"\n  and fin: \"finite (dom \\<sigma>)\"\n  shows \"card (dom \\<sigma>') \\<le> q + card (dom \\<sigma>)\"", "lemma advantage_nonneg: \"advantage \\<A> \\<ge> 0\""], "translations": [["", "lemma weight_random_oracle [simp]:\n  \"weight_spmf p = 1 \\<Longrightarrow> weight_spmf (random_oracle \\<sigma> x) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight_spmf p = 1 \\<Longrightarrow>\n    weight_spmf (random_oracle \\<sigma> x) = 1", "by(simp add: random_oracle_def weight_bind_spmf o_def split: option.split)"], ["", "lemma lossless_random_oracle [simp]:\n  \"lossless_spmf p \\<Longrightarrow> lossless_spmf (random_oracle \\<sigma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf p \\<Longrightarrow>\n    lossless_spmf (random_oracle \\<sigma> x)", "by(simp add: lossless_spmf_def)"], ["", "sublocale finite: callee_invariant_on random_oracle \"\\<lambda>\\<sigma>. finite (dom \\<sigma>)\" \\<I>_full"], ["proof (prove)\ngoal (1 subgoal):\n 1. callee_invariant random_oracle\n     (\\<lambda>\\<sigma>. finite (dom \\<sigma>))", "by(unfold_locales)(auto simp add: random_oracle_def split: option.splits)"], ["", "lemma card_dom_random_oracle:\n  assumes \"interaction_any_bounded_by \\<A> q\"\n  and \"(y, \\<sigma>') \\<in> set_spmf (exec_gpv random_oracle \\<A> \\<sigma>)\"\n  and fin: \"finite (dom \\<sigma>)\"\n  shows \"card (dom \\<sigma>') \\<le> q + card (dom \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (dom \\<sigma>') \\<le> q + card (dom \\<sigma>)", "by(rule finite.interaction_bounded_by'_exec_gpv_count[OF assms(1-2)])\n  (auto simp add: random_oracle_def fin card_insert_if simp del: fun_upd_apply split: option.split_asm)"], ["", "end"], ["", "subsection \\<open>Pseudo-random function\\<close>"], ["", "locale \"prf\" =\n  fixes key_gen :: \"'key spmf\"\n  and \"prf\" :: \"'key \\<Rightarrow> 'domain \\<Rightarrow> 'range\"\n  and rand :: \"'range spmf\"\nbegin"], ["", "sublocale random_function \"rand\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "definition prf_oracle :: \"'key \\<Rightarrow> unit \\<Rightarrow> 'domain \\<Rightarrow> ('range \\<times> unit) spmf\"\nwhere \"prf_oracle key \\<sigma> x = return_spmf (prf key x, ())\""], ["", "type_synonym ('domain', 'range') adversary = \"(bool, 'domain', 'range') gpv\""], ["", "definition game_0 :: \"('domain, 'range) adversary \\<Rightarrow> bool spmf\"\nwhere\n  \"game_0 \\<A> = do {\n     key \\<leftarrow> key_gen;\n     (b, _) \\<leftarrow> exec_gpv (prf_oracle key) \\<A> ();\n     return_spmf b\n   }\""], ["", "definition game_1 :: \"('domain, 'range) adversary \\<Rightarrow> bool spmf\"\nwhere\n  \"game_1 \\<A> = do {\n     (b, _) \\<leftarrow> exec_gpv random_oracle \\<A> Map.empty;\n     return_spmf b\n   }\""], ["", "definition advantage :: \"('domain, 'range) adversary \\<Rightarrow> real\"\nwhere \"advantage \\<A> = \\<bar>spmf (game_0 \\<A>) True - spmf (game_1 \\<A>) True\\<bar>\""], ["", "lemma advantage_nonneg: \"advantage \\<A> \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> advantage \\<A>", "by(simp add: advantage_def)"], ["", "abbreviation lossless :: \"('domain, 'range) adversary \\<Rightarrow> bool\"\nwhere \"lossless \\<equiv> lossless_gpv \\<I>_full\""], ["", "abbreviation (input) ibounded_by :: \"('domain, 'range) adversary \\<Rightarrow> enat \\<Rightarrow> bool\"\nwhere \"ibounded_by \\<equiv> interaction_any_bounded_by\""], ["", "end"], ["", "end"]]}