{"file_name": "/home/qj213/afp-2021-10-22/thys/Game_Based_Crypto/SUF_CMA.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Game_Based_Crypto", "problem_names": ["lemma lossless_vkey_oracle [simp]:\n  \"lossless_spmf (vkey_oracle \\<eta> \\<sigma> x) \\<longleftrightarrow> (\\<sigma> = None \\<longrightarrow> lossless_spmf (key_gen \\<eta>))\"", "lemma lossless_sign_oracle [simp]:\n  \"\\<lbrakk> \\<sigma> = None \\<Longrightarrow> lossless_spmf (key_gen \\<eta>);\n    \\<And>skey m. valid_message \\<eta> m \\<Longrightarrow> lossless_spmf (sign \\<eta> skey m) \\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (sign_oracle \\<eta> \\<sigma> m) \\<longleftrightarrow> valid_message \\<eta> m\"", "lemma lossless_sign_oracle_Some: fixes log shows\n  \"lossless_spmf (sign_oracle \\<eta> (Some (vkey, skey, log)) m) \\<longleftrightarrow> lossless_spmf (sign \\<eta> skey m) \\<and> valid_message \\<eta> m\"", "lemma oracle\\<^sub>1_simps [simp]:\n  \"oracle\\<^sub>1 \\<eta> s (Inl x) = map_spmf (apfst Inl) (vkey_oracle \\<eta> s x)\"\n  \"oracle\\<^sub>1 \\<eta> s (Inr y) = map_spmf (apfst Inr) (sign_oracle \\<eta> s y)\"", "lemma advantage\\<^sub>1_nonneg: \"advantage\\<^sub>1 \\<A> \\<eta> \\<ge> 0\"", "lemma oracle\\<^sub>n_apply [simp]:\n  \"oracle\\<^sub>n \\<eta> s (i, x) = map_spmf (apsnd (fun_upd s i)) (oracle\\<^sub>1 \\<eta> (s i) x)\"", "lemma advantage\\<^sub>n_nonneg: \"advantage\\<^sub>n \\<A> \\<eta> \\<ge> 0\""], "translations": [["", "lemma lossless_vkey_oracle [simp]:\n  \"lossless_spmf (vkey_oracle \\<eta> \\<sigma> x) \\<longleftrightarrow> (\\<sigma> = None \\<longrightarrow> lossless_spmf (key_gen \\<eta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (vkey_oracle \\<eta> \\<sigma> x) =\n    (\\<sigma> = None \\<longrightarrow> lossless_spmf (key_gen \\<eta>))", "by(cases \"(\\<eta>, \\<sigma>, x)\" rule: vkey_oracle.cases) auto"], ["", "lemma lossless_sign_oracle [simp]:\n  \"\\<lbrakk> \\<sigma> = None \\<Longrightarrow> lossless_spmf (key_gen \\<eta>);\n    \\<And>skey m. valid_message \\<eta> m \\<Longrightarrow> lossless_spmf (sign \\<eta> skey m) \\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (sign_oracle \\<eta> \\<sigma> m) \\<longleftrightarrow> valid_message \\<eta> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> = None \\<Longrightarrow>\n             lossless_spmf (key_gen \\<eta>);\n     \\<And>skey m.\n        valid_message \\<eta> m \\<Longrightarrow>\n        lossless_spmf (sign \\<eta> skey m)\\<rbrakk>\n    \\<Longrightarrow> lossless_spmf (sign_oracle \\<eta> \\<sigma> m) =\n                      valid_message \\<eta> m", "apply(cases \"(\\<eta>, \\<sigma>, m)\" rule: sign_oracle.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<eta>' ma.\n       \\<lbrakk>\\<sigma> = None \\<Longrightarrow>\n                lossless_spmf (key_gen \\<eta>);\n        \\<And>skey m.\n           valid_message \\<eta> m \\<Longrightarrow>\n           lossless_spmf (sign \\<eta> skey m);\n        (\\<eta>, \\<sigma>, m) = (\\<eta>', None, ma)\\<rbrakk>\n       \\<Longrightarrow> lossless_spmf (sign_oracle \\<eta> \\<sigma> m) =\n                         valid_message \\<eta> m\n 2. \\<And>\\<eta>' vkey skey ma log.\n       \\<lbrakk>\\<sigma> = None \\<Longrightarrow>\n                lossless_spmf (key_gen \\<eta>);\n        \\<And>skey m.\n           valid_message \\<eta> m \\<Longrightarrow>\n           lossless_spmf (sign \\<eta> skey m);\n        (\\<eta>, \\<sigma>, m) =\n        (\\<eta>', Some (vkey, skey, log), ma)\\<rbrakk>\n       \\<Longrightarrow> lossless_spmf (sign_oracle \\<eta> \\<sigma> m) =\n                         valid_message \\<eta> m", "apply(auto simp add: split_beta dest: lossless_spmfD_set_spmf_nonempty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lossless_sign_oracle_Some: fixes log shows\n  \"lossless_spmf (sign_oracle \\<eta> (Some (vkey, skey, log)) m) \\<longleftrightarrow> lossless_spmf (sign \\<eta> skey m) \\<and> valid_message \\<eta> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (sign_oracle \\<eta> (Some (vkey, skey, log)) m) =\n    (lossless_spmf (sign \\<eta> skey m) \\<and> valid_message \\<eta> m)", "by(simp)"], ["", "subsubsection \\<open>Single-user setting\\<close>"], ["", "type_synonym 'message' call\\<^sub>1 = \"unit + 'message'\""], ["", "type_synonym ('vkey', 'signature') ret\\<^sub>1 = \"'vkey' + 'signature'\""], ["", "definition oracle\\<^sub>1 :: \"security\n  \\<Rightarrow> (('vkey, 'sigkey, 'message, 'signature) state_oracle, 'message call\\<^sub>1, ('vkey, 'signature) ret\\<^sub>1) oracle'\"\nwhere \"oracle\\<^sub>1 \\<eta> = vkey_oracle \\<eta> \\<oplus>\\<^sub>O sign_oracle \\<eta>\""], ["", "lemma oracle\\<^sub>1_simps [simp]:\n  \"oracle\\<^sub>1 \\<eta> s (Inl x) = map_spmf (apfst Inl) (vkey_oracle \\<eta> s x)\"\n  \"oracle\\<^sub>1 \\<eta> s (Inr y) = map_spmf (apfst Inr) (sign_oracle \\<eta> s y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oracle\\<^sub>1 \\<eta> s (Inl x) =\n    map_spmf (apfst Inl) (vkey_oracle \\<eta> s x) &&&\n    oracle\\<^sub>1 \\<eta> s (Inr y) =\n    map_spmf (apfst Inr) (sign_oracle \\<eta> s y)", "by(simp_all add: oracle\\<^sub>1_def)"], ["", "type_synonym ('vkey', 'message', 'signature') adversary\\<^sub>1' = \n  \"(('message' \\<times> 'signature'), 'message' call\\<^sub>1, ('vkey', 'signature') ret\\<^sub>1) gpv\""], ["", "type_synonym ('vkey', 'message', 'signature') adversary\\<^sub>1 =\n  \"security \\<Rightarrow> ('vkey', 'message', 'signature') adversary\\<^sub>1'\""], ["", "definition suf_cma\\<^sub>1 :: \"('vkey, 'message, 'signature) adversary\\<^sub>1 \\<Rightarrow> security \\<Rightarrow> bool spmf\"\nwhere\n  \"\\<And>log. suf_cma\\<^sub>1 \\<A> \\<eta> = do {\n    ((m, sig), \\<sigma>) \\<leftarrow> exec_gpv (oracle\\<^sub>1 \\<eta>) (\\<A> \\<eta>) None;\n    return_spmf (\n      case \\<sigma> of None \\<Rightarrow> False\n      | Some (vkey, skey, log) \\<Rightarrow> verify \\<eta> vkey m sig \\<and> (m, sig) \\<notin> set log)\n  }\""], ["", "definition advantage\\<^sub>1 :: \"('vkey, 'message, 'signature) adversary\\<^sub>1 \\<Rightarrow> advantage\"\nwhere \"advantage\\<^sub>1 \\<A> \\<eta> = spmf (suf_cma\\<^sub>1 \\<A> \\<eta>) True\""], ["", "lemma advantage\\<^sub>1_nonneg: \"advantage\\<^sub>1 \\<A> \\<eta> \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> advantage\\<^sub>1 \\<A> \\<eta>", "by(simp add: advantage\\<^sub>1_def pmf_nonneg)"], ["", "abbreviation secure_for\\<^sub>1 :: \"('vkey, 'message, 'signature) adversary\\<^sub>1 \\<Rightarrow> bool\"\nwhere \"secure_for\\<^sub>1 \\<A> \\<equiv> negligible (advantage\\<^sub>1 \\<A>)\""], ["", "definition ibounded_by\\<^sub>1' :: \"('vkey, 'message, 'signature) adversary\\<^sub>1' \\<Rightarrow> nat \\<Rightarrow> bool\"\nwhere \"ibounded_by\\<^sub>1' \\<A> q = (interaction_any_bounded_by \\<A> q)\""], ["", "abbreviation ibounded_by\\<^sub>1 :: \"('vkey, 'message, 'signature) adversary\\<^sub>1 \\<Rightarrow> (security \\<Rightarrow> nat) \\<Rightarrow> bool\"\nwhere \"ibounded_by\\<^sub>1 \\<equiv> rel_envir ibounded_by\\<^sub>1'\""], ["", "definition lossless\\<^sub>1' :: \"('vkey, 'message, 'signature) adversary\\<^sub>1' \\<Rightarrow> bool\"\nwhere \"lossless\\<^sub>1' \\<A> = (lossless_gpv \\<I>_full \\<A>)\""], ["", "abbreviation lossless\\<^sub>1 :: \"('vkey, 'message, 'signature) adversary\\<^sub>1 \\<Rightarrow> bool\"\nwhere \"lossless\\<^sub>1 \\<equiv> pred_envir lossless\\<^sub>1'\""], ["", "subsubsection \\<open>Multi-user setting\\<close>"], ["", "definition oracle\\<^sub>n :: \"security\n  \\<Rightarrow> ('i \\<Rightarrow> ('vkey, 'sigkey, 'message, 'signature) state_oracle, 'i \\<times> 'message call\\<^sub>1, ('vkey, 'signature) ret\\<^sub>1) oracle'\"\nwhere \"oracle\\<^sub>n \\<eta> = family_oracle (\\<lambda>_. oracle\\<^sub>1 \\<eta>)\""], ["", "lemma oracle\\<^sub>n_apply [simp]:\n  \"oracle\\<^sub>n \\<eta> s (i, x) = map_spmf (apsnd (fun_upd s i)) (oracle\\<^sub>1 \\<eta> (s i) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oracle\\<^sub>n \\<eta> s (i, x) =\n    map_spmf (apsnd (fun_upd s i)) (oracle\\<^sub>1 \\<eta> (s i) x)", "by(simp add: oracle\\<^sub>n_def)"], ["", "type_synonym ('i, 'vkey', 'message', 'signature') adversary\\<^sub>n' = \n  \"(('i \\<times> 'message' \\<times> 'signature'), 'i \\<times> 'message' call\\<^sub>1, ('vkey', 'signature') ret\\<^sub>1) gpv\""], ["", "type_synonym ('i, 'vkey', 'message', 'signature') adversary\\<^sub>n =\n  \"security \\<Rightarrow> ('i, 'vkey', 'message', 'signature') adversary\\<^sub>n'\""], ["", "definition suf_cma\\<^sub>n :: \"('i, 'vkey, 'message, 'signature) adversary\\<^sub>n \\<Rightarrow> security \\<Rightarrow> bool spmf\"\nwhere\n  \"\\<And>log. suf_cma\\<^sub>n \\<A> \\<eta> = do {\n    ((i, m, sig), \\<sigma>) \\<leftarrow> exec_gpv (oracle\\<^sub>n \\<eta>) (\\<A> \\<eta>) (\\<lambda>_. None);\n    return_spmf (\n      case \\<sigma> i of None \\<Rightarrow> False\n      | Some (vkey, skey, log) \\<Rightarrow> verify \\<eta> vkey m sig \\<and> (m, sig) \\<notin> set log)\n  }\""], ["", "definition advantage\\<^sub>n :: \"('i, 'vkey, 'message, 'signature) adversary\\<^sub>n \\<Rightarrow> advantage\"\nwhere \"advantage\\<^sub>n \\<A> \\<eta> = spmf (suf_cma\\<^sub>n \\<A> \\<eta>) True\""], ["", "lemma advantage\\<^sub>n_nonneg: \"advantage\\<^sub>n \\<A> \\<eta> \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> advantage\\<^sub>n \\<A> \\<eta>", "by(simp add: advantage\\<^sub>n_def pmf_nonneg)"], ["", "abbreviation secure_for\\<^sub>n :: \"('i, 'vkey, 'message, 'signature) adversary\\<^sub>n \\<Rightarrow> bool\"\nwhere \"secure_for\\<^sub>n \\<A> \\<equiv> negligible (advantage\\<^sub>n \\<A>)\""], ["", "definition ibounded_by\\<^sub>n' :: \"('i, 'vkey, 'message, 'signature) adversary\\<^sub>n' \\<Rightarrow> nat \\<Rightarrow> bool\"\nwhere \"ibounded_by\\<^sub>n' \\<A> q = (interaction_any_bounded_by \\<A> q)\""], ["", "abbreviation ibounded_by\\<^sub>n :: \"('i, 'vkey, 'message, 'signature) adversary\\<^sub>n \\<Rightarrow> (security \\<Rightarrow> nat) \\<Rightarrow> bool\"\nwhere \"ibounded_by\\<^sub>n \\<equiv> rel_envir ibounded_by\\<^sub>n'\""], ["", "definition lossless\\<^sub>n' :: \"('i, 'vkey, 'message, 'signature) adversary\\<^sub>n' \\<Rightarrow> bool\"\nwhere \"lossless\\<^sub>n' \\<A> = (lossless_gpv \\<I>_full \\<A>)\""], ["", "abbreviation lossless\\<^sub>n :: \"('i, 'vkey, 'message, 'signature) adversary\\<^sub>n \\<Rightarrow> bool\"\nwhere \"lossless\\<^sub>n \\<equiv> pred_envir lossless\\<^sub>n'\""], ["", "end"], ["", "end"]]}