{"file_name": "/home/qj213/afp-2021-10-22/thys/Jinja/BV/BVExample.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jinja", "problem_names": ["lemma distinct_classes':\n  \"list_name \\<noteq> test_name\"\n  \"list_name \\<noteq> Object\"\n  \"list_name \\<noteq> ClassCast\"\n  \"list_name \\<noteq> OutOfMemory\"\n  \"list_name \\<noteq> NullPointer\"\n  \"test_name \\<noteq> Object\"\n  \"test_name \\<noteq> OutOfMemory\"\n  \"test_name \\<noteq> ClassCast\"\n  \"test_name \\<noteq> NullPointer\"\n  \"ClassCast \\<noteq> NullPointer\"\n  \"ClassCast \\<noteq> Object\"\n  \"NullPointer \\<noteq> Object\"\n  \"OutOfMemory \\<noteq> ClassCast\"\n  \"OutOfMemory \\<noteq> NullPointer\"\n  \"OutOfMemory \\<noteq> Object\"", "lemmas distinct_classes = distinct_classes' distinct_classes' [symmetric]", "lemma distinct_fields:\n  \"val_name \\<noteq> next_name\"\n  \"next_name \\<noteq> val_name\"", "lemmas system_defs = SystemClasses_def ObjectC_def NullPointerC_def \n                     OutOfMemoryC_def ClassCastC_def", "lemmas class_defs  = list_class_def test_class_def", "lemma class_Object [simp]:\n  \"class E Object = Some (undefined, [],[])\"", "lemma class_NullPointer [simp]:\n  \"class E NullPointer = Some (Object, [], [])\"", "lemma class_OutOfMemory [simp]:\n  \"class E OutOfMemory = Some (Object, [], [])\"", "lemma class_ClassCast [simp]:\n  \"class E ClassCast = Some (Object, [], [])\"", "lemma class_list [simp]:\n  \"class E list_name = Some list_class\"", "lemma class_test [simp]:\n  \"class E test_name = Some test_class\"", "lemma E_classes [simp]:\n  \"{C. is_class E C} = {list_name, test_name, NullPointer, \n                        ClassCast, OutOfMemory, Object}\"", "lemma subcls1:\n  \"subcls1 E = {(list_name,Object), (test_name,Object), (NullPointer, Object),\n                (ClassCast, Object), (OutOfMemory, Object)}\"", "lemma notin_rtrancl:\n  \"(a,b) \\<in> r\\<^sup>* \\<Longrightarrow> a \\<noteq> b \\<Longrightarrow> (\\<And>y. (a,y) \\<notin> r) \\<Longrightarrow> False\"", "lemma acyclic_subcls1_E: \"acyclic (subcls1 E)\"", "lemma wf_subcls1_E: \"wf ((subcls1 E)\\<inverse>)\"", "lemma method_append [simp]:\n  \"method E list_name append_name =\n  (list_name, [Class list_name], Void, 3, 0, append_ins, [(1, 2, NullPointer, 7, 0)])\"", "lemma method_makelist [simp]:\n  \"method E test_name makelist_name = \n  (test_name, [], Void, 3, 2, make_list_ins, [])\"", "lemma field_val [simp]:\n  \"field E list_name val_name = (list_name, Integer)\"", "lemma field_next [simp]:\n  \"field E list_name next_name = (list_name, Class list_name)\"", "lemma [simp]: \"fields E Object = []\"", "lemma [simp]: \"fields E NullPointer = []\"", "lemma [simp]: \"fields E ClassCast = []\"", "lemma [simp]: \"fields E OutOfMemory = []\"", "lemma [simp]: \"fields E test_name = []\"", "lemmas [simp] = is_class_def", "lemma wf_struct:\n  \"wf_prog (\\<lambda>G C mb. True) E\" (is \"wf_prog ?mb E\")", "lemmas eff_simps [simp] = eff_def norm_eff_def xcpt_eff_def", "lemma pc_0: \"x < n \\<Longrightarrow> (x \\<in> [0, n) \\<Longrightarrow> P x) \\<Longrightarrow> P x\"", "lemma pc_next: \"x \\<in> [n0, n) \\<Longrightarrow> P n0 \\<Longrightarrow> (x \\<in> [Suc n0, n) \\<Longrightarrow> P x) \\<Longrightarrow> P x\"", "lemma pc_end: \"x \\<in> [n,n) \\<Longrightarrow> P x\"", "lemma types_append [simp]: \"check_types E 3 (Suc (Suc 0)) (map OK \\<phi>\\<^sub>a)\"", "lemma wt_append [simp]:\n  \"wt_method E list_name [Class list_name] Void 3 0 append_ins\n             [(Suc 0, 2, NullPointer, 7, 0)] \\<phi>\\<^sub>a\"", "lemma types_makelist [simp]: \"check_types E 3 (Suc (Suc (Suc 0))) (map OK \\<phi>\\<^sub>m)\"", "lemma wt_makelist [simp]:\n  \"wt_method E test_name [] Void 3 2 make_list_ins [] \\<phi>\\<^sub>m\"", "lemma wf_md'E:\n  \"\\<lbrakk> wf_prog wf_md P; \n     \\<And>C S fs ms m.\\<lbrakk>(C,S,fs,ms) \\<in> set P; m \\<in> set ms\\<rbrakk> \\<Longrightarrow> wf_md' P C m \\<rbrakk>\n  \\<Longrightarrow> wf_prog wf_md' P\"", "lemma wf_prog:\n  \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> E\"", "lemma \"E,\\<Phi> \\<turnstile> start_state E test_name makelist_name \\<surd>\"", "lemma [code]:\n  \"unstables r step ss = \n   fold (\\<lambda>p A. if \\<not>stable r step ss p then insert p A else A) [0..<size ss] {}\"", "lemma [code]:\n  \"iter f step ss w = while (\\<lambda>(ss, w). \\<not> Set.is_empty w)\n    (\\<lambda>(ss, w).\n        let p = some_elem w in propa f (step p (ss ! p)) ss (w - {p}))\n    (ss, w)\"", "lemma JVM_sup_unfold [code]:\n \"JVM_SemiType.sup S m n = lift2 (Opt.sup\n       (Product.sup (Listn.sup (SemiType.sup S))\n         (\\<lambda>x y. OK (map2 (lift2 (SemiType.sup S)) x y))))\"", "lemmas [code] = SemiType.sup_def [unfolded exec_lub_def] JVM_le_unfold", "lemmas [code] = lesub_def plussub_def", "lemma [code]:\n  \"is_refT T = (case T of NT \\<Rightarrow> True | Class C \\<Rightarrow> True | _ \\<Rightarrow> False)\"", "lemma [code]:\n  \"app\\<^sub>i (Getfield F C, P, pc, mxs, T\\<^sub>r, (T#ST, LT)) = \n    Predicate.holds (Predicate.bind (sees_field_i_i_i_o_i P C F C) (\\<lambda>T\\<^sub>f. if P \\<turnstile> T \\<le> Class C then Predicate.single () else bot))\"", "lemma [code]:\n  \"app\\<^sub>i (Putfield F C, P, pc, mxs, T\\<^sub>r, (T\\<^sub>1#T\\<^sub>2#ST, LT)) = \n     Predicate.holds (Predicate.bind (sees_field_i_i_i_o_i P C F C) (\\<lambda>T\\<^sub>f. if P \\<turnstile> T\\<^sub>2 \\<le> (Class C) \\<and> P \\<turnstile> T\\<^sub>1 \\<le> T\\<^sub>f then Predicate.single () else bot))\"", "lemma [code]:\n  \"app\\<^sub>i (Invoke M n, P, pc, mxs, T\\<^sub>r, (ST,LT)) =\n    (n < length ST \\<and> \n    (ST!n \\<noteq> NT \\<longrightarrow>\n      (case ST!n of\n         Class C \\<Rightarrow> Predicate.holds (Predicate.bind (Method_i_i_i_o_o_o_o P C M) (\\<lambda>(Ts, T, m, D). if P \\<turnstile> rev (take n ST) [\\<le>] Ts then Predicate.single () else bot))\n       | _ \\<Rightarrow> False)))\"", "lemmas [code] =\n  SemiType.sup_def [unfolded exec_lub_def]\n  widen.equation\n  is_relevant_class.simps"], "translations": [["", "lemma distinct_classes':\n  \"list_name \\<noteq> test_name\"\n  \"list_name \\<noteq> Object\"\n  \"list_name \\<noteq> ClassCast\"\n  \"list_name \\<noteq> OutOfMemory\"\n  \"list_name \\<noteq> NullPointer\"\n  \"test_name \\<noteq> Object\"\n  \"test_name \\<noteq> OutOfMemory\"\n  \"test_name \\<noteq> ClassCast\"\n  \"test_name \\<noteq> NullPointer\"\n  \"ClassCast \\<noteq> NullPointer\"\n  \"ClassCast \\<noteq> Object\"\n  \"NullPointer \\<noteq> Object\"\n  \"OutOfMemory \\<noteq> ClassCast\"\n  \"OutOfMemory \\<noteq> NullPointer\"\n  \"OutOfMemory \\<noteq> Object\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((list_name \\<noteq> test_name &&&\n      list_name \\<noteq> Object &&& list_name \\<noteq> ClassCast) &&&\n     (list_name \\<noteq> OutOfMemory &&& list_name \\<noteq> NullPointer) &&&\n     test_name \\<noteq> Object &&& test_name \\<noteq> OutOfMemory) &&&\n    ((test_name \\<noteq> ClassCast &&& test_name \\<noteq> NullPointer) &&&\n     ClassCast \\<noteq> NullPointer &&& ClassCast \\<noteq> Object) &&&\n    (NullPointer \\<noteq> Object &&& OutOfMemory \\<noteq> ClassCast) &&&\n    OutOfMemory \\<noteq> NullPointer &&& OutOfMemory \\<noteq> Object", "by (simp_all add: list_name_def test_name_def Object_def NullPointer_def\n    OutOfMemory_def ClassCast_def)"], ["", "lemmas distinct_classes = distinct_classes' distinct_classes' [symmetric]"], ["", "lemma distinct_fields:\n  \"val_name \\<noteq> next_name\"\n  \"next_name \\<noteq> val_name\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_name \\<noteq> next_name &&& next_name \\<noteq> val_name", "by (simp_all add: val_name_def next_name_def)"], ["", "text \\<open>Abbreviations for definitions we will have to use often in the\nproofs below:\\<close>"], ["", "lemmas system_defs = SystemClasses_def ObjectC_def NullPointerC_def \n                     OutOfMemoryC_def ClassCastC_def"], ["", "lemmas class_defs  = list_class_def test_class_def"], ["", "text \\<open>These auxiliary proofs are for efficiency: class lookup,\nsubclass relation, method and field lookup are computed only once:\n\\<close>"], ["", "lemma class_Object [simp]:\n  \"class E Object = Some (undefined, [],[])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class E Object = \\<lfloor>(undefined, [], [])\\<rfloor>", "by (simp add: class_def system_defs E_def)"], ["", "lemma class_NullPointer [simp]:\n  \"class E NullPointer = Some (Object, [], [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class E NullPointer = \\<lfloor>(Object, [], [])\\<rfloor>", "by (simp add: class_def system_defs E_def distinct_classes)"], ["", "lemma class_OutOfMemory [simp]:\n  \"class E OutOfMemory = Some (Object, [], [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class E OutOfMemory = \\<lfloor>(Object, [], [])\\<rfloor>", "by (simp add: class_def system_defs E_def distinct_classes)"], ["", "lemma class_ClassCast [simp]:\n  \"class E ClassCast = Some (Object, [], [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class E ClassCast = \\<lfloor>(Object, [], [])\\<rfloor>", "by (simp add: class_def system_defs E_def distinct_classes)"], ["", "lemma class_list [simp]:\n  \"class E list_name = Some list_class\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class E list_name = \\<lfloor>list_class\\<rfloor>", "by (simp add: class_def system_defs E_def distinct_classes)"], ["", "lemma class_test [simp]:\n  \"class E test_name = Some test_class\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class E test_name = \\<lfloor>test_class\\<rfloor>", "by (simp add: class_def system_defs E_def distinct_classes)"], ["", "lemma E_classes [simp]:\n  \"{C. is_class E C} = {list_name, test_name, NullPointer, \n                        ClassCast, OutOfMemory, Object}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {C. is_class E C} =\n    {list_name, test_name, NullPointer, ClassCast, OutOfMemory, Object}", "by (auto simp add: is_class_def class_def system_defs E_def class_defs)"], ["", "text \\<open>The subclass releation spelled out:\\<close>"], ["", "lemma subcls1:\n  \"subcls1 E = {(list_name,Object), (test_name,Object), (NullPointer, Object),\n                (ClassCast, Object), (OutOfMemory, Object)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subcls1 E =\n    {(list_name, Object), (test_name, Object), (NullPointer, Object),\n     (ClassCast, Object), (OutOfMemory, Object)}", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. subcls1 E =\n    {(list_name, Object), (test_name, Object), (NullPointer, Object),\n     (ClassCast, Object), (OutOfMemory, Object)}", "apply (simp add: subcls1_def2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SIGMA C:{list_name, test_name, NullPointer, ClassCast, OutOfMemory,\n              Object}.\n        {D. fst (the (class E C)) = D \\<and> C \\<noteq> Object}) =\n    {(list_name, Object), (test_name, Object), (NullPointer, Object),\n     (ClassCast, Object), (OutOfMemory, Object)}", "apply (simp add: class_defs system_defs E_def class_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SIGMA C:{list_name, test_name, NullPointer, ClassCast, OutOfMemory,\n              Object}.\n        {D. fst (the (if C = Object\n                      then \\<lfloor>(undefined, [], [])\\<rfloor>\n                      else [test_name \\<mapsto>\n                            (Object, [],\n                             [(makelist_name, [], Void, 3, 2, make_list_ins,\n                               [])]),\n                            list_name \\<mapsto>\n                            (Object,\n                             [(val_name, Integer),\n                              (next_name, Class list_name)],\n                             [(append_name, [Class list_name], Void, 3, 0,\n                               append_ins,\n                               [(Suc 0, 2, NullPointer, 7, 0)])]),\n                            OutOfMemory \\<mapsto> (Object, [], []),\n                            ClassCast \\<mapsto> (Object, [], []),\n                            NullPointer \\<mapsto> (Object, [], [])]\n                            C)) =\n            D \\<and>\n            C \\<noteq> Object}) =\n    {(list_name, Object), (test_name, Object), (NullPointer, Object),\n     (ClassCast, Object), (OutOfMemory, Object)}", "(* FIXME: cannot simply expand class names, since\n     inequality proofs on strings are too inefficient *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SIGMA C:{list_name, test_name, NullPointer, ClassCast, OutOfMemory,\n              Object}.\n        {D. fst (the (if C = Object\n                      then \\<lfloor>(undefined, [], [])\\<rfloor>\n                      else [test_name \\<mapsto>\n                            (Object, [],\n                             [(makelist_name, [], Void, 3, 2, make_list_ins,\n                               [])]),\n                            list_name \\<mapsto>\n                            (Object,\n                             [(val_name, Integer),\n                              (next_name, Class list_name)],\n                             [(append_name, [Class list_name], Void, 3, 0,\n                               append_ins,\n                               [(Suc 0, 2, NullPointer, 7, 0)])]),\n                            OutOfMemory \\<mapsto> (Object, [], []),\n                            ClassCast \\<mapsto> (Object, [], []),\n                            NullPointer \\<mapsto> (Object, [], [])]\n                            C)) =\n            D \\<and>\n            C \\<noteq> Object}) =\n    {(list_name, Object), (test_name, Object), (NullPointer, Object),\n     (ClassCast, Object), (OutOfMemory, Object)}", "apply (auto simp: distinct_classes split!: if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text \\<open>The subclass relation is acyclic; hence its converse is well founded:\\<close>"], ["", "lemma notin_rtrancl:\n  \"(a,b) \\<in> r\\<^sup>* \\<Longrightarrow> a \\<noteq> b \\<Longrightarrow> (\\<And>y. (a,y) \\<notin> r) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b) \\<in> r\\<^sup>*; a \\<noteq> b;\n     \\<And>y. (a, y) \\<notin> r\\<rbrakk>\n    \\<Longrightarrow> False", "by (auto elim: converse_rtranclE)"], ["", "lemma acyclic_subcls1_E: \"acyclic (subcls1 E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acyclic (subcls1 E)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. acyclic (subcls1 E)", "apply (rule acyclicI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (x, x) \\<notin> (subcls1 E)\\<^sup>+", "apply (simp add: subcls1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (x, x)\n       \\<notin> {(list_name, Object), (test_name, Object),\n                 (NullPointer, Object), (ClassCast, Object),\n                 (OutOfMemory, Object)}\\<^sup>+", "apply (auto dest!: tranclD)"], ["proof (prove)\ngoal (5 subgoals):\n 1. (Object, list_name)\n    \\<in> {(list_name, Object), (test_name, Object), (NullPointer, Object),\n           (ClassCast, Object),\n           (OutOfMemory, Object)}\\<^sup>* \\<Longrightarrow>\n    False\n 2. (Object, test_name)\n    \\<in> {(list_name, Object), (test_name, Object), (NullPointer, Object),\n           (ClassCast, Object),\n           (OutOfMemory, Object)}\\<^sup>* \\<Longrightarrow>\n    False\n 3. (Object, NullPointer)\n    \\<in> {(list_name, Object), (test_name, Object), (NullPointer, Object),\n           (ClassCast, Object),\n           (OutOfMemory, Object)}\\<^sup>* \\<Longrightarrow>\n    False\n 4. (Object, ClassCast)\n    \\<in> {(list_name, Object), (test_name, Object), (NullPointer, Object),\n           (ClassCast, Object),\n           (OutOfMemory, Object)}\\<^sup>* \\<Longrightarrow>\n    False\n 5. (Object, OutOfMemory)\n    \\<in> {(list_name, Object), (test_name, Object), (NullPointer, Object),\n           (ClassCast, Object),\n           (OutOfMemory, Object)}\\<^sup>* \\<Longrightarrow>\n    False", "apply (auto elim!: notin_rtrancl simp add: distinct_classes)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma wf_subcls1_E: \"wf ((subcls1 E)\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf ((subcls1 E)\\<inverse>)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf ((subcls1 E)\\<inverse>)", "apply (rule finite_acyclic_wf_converse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite (subcls1 E)\n 2. acyclic (subcls1 E)", "apply (simp add: subcls1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. acyclic (subcls1 E)", "apply (rule acyclic_subcls1_E)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text \\<open>Method and field lookup:\\<close>"], ["", "lemma method_append [simp]:\n  \"method E list_name append_name =\n  (list_name, [Class list_name], Void, 3, 0, append_ins, [(1, 2, NullPointer, 7, 0)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. method E list_name append_name =\n    (list_name, [Class list_name], Void, 3, 0, append_ins,\n     [(1, 2, NullPointer, 7, 0)])", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. method E list_name append_name =\n    (list_name, [Class list_name], Void, 3, 0, append_ins,\n     [(1, 2, NullPointer, 7, 0)])", "apply (insert class_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class E list_name = \\<lfloor>list_class\\<rfloor> \\<Longrightarrow>\n    method E list_name append_name =\n    (list_name, [Class list_name], Void, 3, 0, append_ins,\n     [(1, 2, NullPointer, 7, 0)])", "apply (unfold list_class_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class E list_name =\n    \\<lfloor>(Object, [(val_name, Integer), (next_name, Class list_name)],\n              [(append_name, [Class list_name], Void, 3, 0, append_ins,\n                [(1, 2, NullPointer, 7, 0)])])\\<rfloor> \\<Longrightarrow>\n    method E list_name append_name =\n    (list_name, [Class list_name], Void, 3, 0, append_ins,\n     [(1, 2, NullPointer, 7, 0)])", "apply (fastforce simp add: Method_def distinct_classes intro: method_def2 Methods.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma method_makelist [simp]:\n  \"method E test_name makelist_name = \n  (test_name, [], Void, 3, 2, make_list_ins, [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. method E test_name makelist_name =\n    (test_name, [], Void, 3, 2, make_list_ins, [])", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. method E test_name makelist_name =\n    (test_name, [], Void, 3, 2, make_list_ins, [])", "apply (insert class_test)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class E test_name = \\<lfloor>test_class\\<rfloor> \\<Longrightarrow>\n    method E test_name makelist_name =\n    (test_name, [], Void, 3, 2, make_list_ins, [])", "apply (unfold test_class_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class E test_name =\n    \\<lfloor>(Object, [],\n              [(makelist_name, [], Void, 3, 2, make_list_ins,\n                [])])\\<rfloor> \\<Longrightarrow>\n    method E test_name makelist_name =\n    (test_name, [], Void, 3, 2, make_list_ins, [])", "apply (fastforce simp add: Method_def distinct_classes intro: method_def2 Methods.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma field_val [simp]:\n  \"field E list_name val_name = (list_name, Integer)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. field E list_name val_name = (list_name, Integer)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. field E list_name val_name = (list_name, Integer)", "apply (insert class_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class E list_name = \\<lfloor>list_class\\<rfloor> \\<Longrightarrow>\n    field E list_name val_name = (list_name, Integer)", "apply (unfold list_class_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class E list_name =\n    \\<lfloor>(Object, [(val_name, Integer), (next_name, Class list_name)],\n              [(append_name, [Class list_name], Void, 3, 0, append_ins,\n                [(1, 2, NullPointer, 7, 0)])])\\<rfloor> \\<Longrightarrow>\n    field E list_name val_name = (list_name, Integer)", "apply (fastforce simp add: sees_field_def distinct_classes intro: field_def2 Fields.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma field_next [simp]:\n  \"field E list_name next_name = (list_name, Class list_name)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. field E list_name next_name = (list_name, Class list_name)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. field E list_name next_name = (list_name, Class list_name)", "apply (insert class_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class E list_name = \\<lfloor>list_class\\<rfloor> \\<Longrightarrow>\n    field E list_name next_name = (list_name, Class list_name)", "apply (unfold list_class_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class E list_name =\n    \\<lfloor>(Object, [(val_name, Integer), (next_name, Class list_name)],\n              [(append_name, [Class list_name], Void, 3, 0, append_ins,\n                [(1, 2, NullPointer, 7, 0)])])\\<rfloor> \\<Longrightarrow>\n    field E list_name next_name = (list_name, Class list_name)", "apply (fastforce simp add: distinct_fields sees_field_def distinct_classes intro: field_def2 Fields.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma [simp]: \"fields E Object = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fields E Object = []", "by (fastforce intro: fields_def2 Fields.intros)"], ["", "lemma [simp]: \"fields E NullPointer = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fields E NullPointer = []", "by (fastforce simp add: distinct_classes intro: fields_def2 Fields.intros)"], ["", "lemma [simp]: \"fields E ClassCast = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fields E ClassCast = []", "by (fastforce simp add: distinct_classes intro: fields_def2 Fields.intros)"], ["", "lemma [simp]: \"fields E OutOfMemory = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fields E OutOfMemory = []", "by (fastforce simp add: distinct_classes intro: fields_def2 Fields.intros)"], ["", "lemma [simp]: \"fields E test_name = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fields E test_name = []", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fields E test_name = []", "apply (insert class_test)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class E test_name = \\<lfloor>test_class\\<rfloor> \\<Longrightarrow>\n    fields E test_name = []", "apply (unfold test_class_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class E test_name =\n    \\<lfloor>(Object, [],\n              [(makelist_name, [], Void, 3, 2, make_list_ins,\n                [])])\\<rfloor> \\<Longrightarrow>\n    fields E test_name = []", "apply (fastforce simp add: distinct_classes intro: fields_def2 Fields.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemmas [simp] = is_class_def"], ["", "subsection \"Program structure\""], ["", "text \\<open>\n  The program is structurally wellformed:\n\\<close>"], ["", "lemma wf_struct:\n  \"wf_prog (\\<lambda>G C mb. True) E\" (is \"wf_prog ?mb E\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "have \"distinct_fst E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_fst E", "by (simp add: system_defs E_def class_defs distinct_classes)"], ["proof (state)\nthis:\n  distinct_fst E\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "moreover"], ["proof (state)\nthis:\n  distinct_fst E\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "have \"set SystemClasses \\<subseteq> set E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set SystemClasses \\<subseteq> set E", "by (simp add: system_defs E_def)"], ["proof (state)\nthis:\n  set SystemClasses \\<subseteq> set E\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "hence \"wf_syscls E\""], ["proof (prove)\nusing this:\n  set SystemClasses \\<subseteq> set E\n\ngoal (1 subgoal):\n 1. wf_syscls E", "by (rule wf_syscls)"], ["proof (state)\nthis:\n  wf_syscls E\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "moreover"], ["proof (state)\nthis:\n  wf_syscls E\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "have \"wf_cdecl ?mb E ObjectC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_cdecl (\\<lambda>G C mb. True) E ObjectC", "by (simp add: wf_cdecl_def ObjectC_def)"], ["proof (state)\nthis:\n  wf_cdecl (\\<lambda>G C mb. True) E ObjectC\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "moreover"], ["proof (state)\nthis:\n  wf_cdecl (\\<lambda>G C mb. True) E ObjectC\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "have \"wf_cdecl ?mb E NullPointerC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_cdecl (\\<lambda>G C mb. True) E NullPointerC", "by (auto elim: notin_rtrancl \n            simp add: wf_cdecl_def distinct_classes NullPointerC_def subcls1)"], ["proof (state)\nthis:\n  wf_cdecl (\\<lambda>G C mb. True) E NullPointerC\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "moreover"], ["proof (state)\nthis:\n  wf_cdecl (\\<lambda>G C mb. True) E NullPointerC\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "have \"wf_cdecl ?mb E ClassCastC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_cdecl (\\<lambda>G C mb. True) E ClassCastC", "by (auto elim: notin_rtrancl \n            simp add: wf_cdecl_def distinct_classes ClassCastC_def subcls1)"], ["proof (state)\nthis:\n  wf_cdecl (\\<lambda>G C mb. True) E ClassCastC\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "moreover"], ["proof (state)\nthis:\n  wf_cdecl (\\<lambda>G C mb. True) E ClassCastC\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "have \"wf_cdecl ?mb E OutOfMemoryC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_cdecl (\\<lambda>G C mb. True) E OutOfMemoryC", "by (auto elim: notin_rtrancl \n            simp add: wf_cdecl_def distinct_classes OutOfMemoryC_def subcls1)"], ["proof (state)\nthis:\n  wf_cdecl (\\<lambda>G C mb. True) E OutOfMemoryC\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "moreover"], ["proof (state)\nthis:\n  wf_cdecl (\\<lambda>G C mb. True) E OutOfMemoryC\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "have \"wf_cdecl ?mb E (list_name, list_class)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_cdecl (\\<lambda>G C mb. True) E (list_name, list_class)", "apply (auto elim!: notin_rtrancl \n            simp add: wf_cdecl_def wf_fdecl_def list_class_def \n                      wf_mdecl_def subcls1)"], ["proof (prove)\ngoal (7 subgoals):\n 1. val_name = next_name \\<Longrightarrow> False\n 2. \\<lbrakk>list_name \\<noteq> test_name; Object = test_name\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>list_name \\<noteq> NullPointer; Object = NullPointer\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>list_name \\<noteq> ClassCast; Object = ClassCast\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>list_name \\<noteq> OutOfMemory; Object = OutOfMemory\\<rbrakk>\n    \\<Longrightarrow> False\n 6. \\<And>D' Ts' T' a aa ab b.\n       \\<lbrakk>list_name \\<noteq> Object;\n        E \\<turnstile> Object sees append_name: Ts'\\<rightarrow>T' = (a, aa,\n                                ab, b) in D'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z.\n                            Ts' = [z] \\<and> subtype E z (Class list_name)\n 7. \\<And>D' Ts' T' a aa ab b.\n       \\<lbrakk>list_name \\<noteq> Object;\n        E \\<turnstile> Object sees append_name: Ts'\\<rightarrow>T' = (a, aa,\n                                ab, b) in D'\\<rbrakk>\n       \\<Longrightarrow> T' = Void", "apply (auto simp add: distinct_classes distinct_fields Method_def elim: Methods.cases)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wf_cdecl (\\<lambda>G C mb. True) E (list_name, list_class)\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "moreover"], ["proof (state)\nthis:\n  wf_cdecl (\\<lambda>G C mb. True) E (list_name, list_class)\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "have \"wf_cdecl ?mb E (test_name, test_class)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_cdecl (\\<lambda>G C mb. True) E (test_name, test_class)", "apply (auto elim!: notin_rtrancl \n            simp add: wf_cdecl_def wf_fdecl_def test_class_def \n                      wf_mdecl_def subcls1)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>test_name \\<noteq> list_name; Object = list_name\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>test_name \\<noteq> NullPointer; Object = NullPointer\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>test_name \\<noteq> ClassCast; Object = ClassCast\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>test_name \\<noteq> OutOfMemory; Object = OutOfMemory\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>D' Ts' T' a aa ab b.\n       \\<lbrakk>test_name \\<noteq> Object;\n        E \\<turnstile> Object sees makelist_name: Ts'\\<rightarrow>T' = (a,\n                                  aa, ab, b) in D'\\<rbrakk>\n       \\<Longrightarrow> Ts' = []\n 6. \\<And>D' Ts' T' a aa ab b.\n       \\<lbrakk>test_name \\<noteq> Object;\n        E \\<turnstile> Object sees makelist_name: Ts'\\<rightarrow>T' = (a,\n                                  aa, ab, b) in D'\\<rbrakk>\n       \\<Longrightarrow> T' = Void", "apply (auto simp add: distinct_classes distinct_fields Method_def elim: Methods.cases)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wf_cdecl (\\<lambda>G C mb. True) E (test_name, test_class)\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "ultimately"], ["proof (chain)\npicking this:\n  distinct_fst E\n  wf_syscls E\n  wf_cdecl (\\<lambda>G C mb. True) E ObjectC\n  wf_cdecl (\\<lambda>G C mb. True) E NullPointerC\n  wf_cdecl (\\<lambda>G C mb. True) E ClassCastC\n  wf_cdecl (\\<lambda>G C mb. True) E OutOfMemoryC\n  wf_cdecl (\\<lambda>G C mb. True) E (list_name, list_class)\n  wf_cdecl (\\<lambda>G C mb. True) E (test_name, test_class)", "show ?thesis"], ["proof (prove)\nusing this:\n  distinct_fst E\n  wf_syscls E\n  wf_cdecl (\\<lambda>G C mb. True) E ObjectC\n  wf_cdecl (\\<lambda>G C mb. True) E NullPointerC\n  wf_cdecl (\\<lambda>G C mb. True) E ClassCastC\n  wf_cdecl (\\<lambda>G C mb. True) E OutOfMemoryC\n  wf_cdecl (\\<lambda>G C mb. True) E (list_name, list_class)\n  wf_cdecl (\\<lambda>G C mb. True) E (test_name, test_class)\n\ngoal (1 subgoal):\n 1. wf_prog (\\<lambda>G C mb. True) E", "by (simp add: wf_prog_def E_def SystemClasses_def)"], ["proof (state)\nthis:\n  wf_prog (\\<lambda>G C mb. True) E\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "subsection \"Welltypings\""], ["", "text \\<open>\n  We show welltypings of the methods @{term append_name} in class @{term list_name}, \n  and @{term makelist_name} in class @{term test_name}:\n\\<close>"], ["", "lemmas eff_simps [simp] = eff_def norm_eff_def xcpt_eff_def"], ["", "(*declare app'Invoke [simp del]*)"], ["", "definition phi_append :: ty\\<^sub>m (\"\\<phi>\\<^sub>a\")\nwhere\n  \"\\<phi>\\<^sub>a \\<equiv> map (\\<lambda>(x,y). Some (x, map OK y)) [ \n   (                                    [], [Class list_name, Class list_name]),\n   (                     [Class list_name], [Class list_name, Class list_name]),\n   (                     [Class list_name], [Class list_name, Class list_name]),\n   (    [Class list_name, Class list_name], [Class list_name, Class list_name]),\n   (    [Class list_name, Class list_name], [Class list_name, Class list_name]),\n   ([NT, Class list_name, Class list_name], [Class list_name, Class list_name]),\n   (            [Boolean, Class list_name], [Class list_name, Class list_name]),\n\n   (                        [Class Object], [Class list_name, Class list_name]),\n   (                                    [], [Class list_name, Class list_name]),\n   (                     [Class list_name], [Class list_name, Class list_name]),\n   (    [Class list_name, Class list_name], [Class list_name, Class list_name]),\n   (                                    [], [Class list_name, Class list_name]),\n   (                                [Void], [Class list_name, Class list_name]),\n\n   (                     [Class list_name], [Class list_name, Class list_name]),\n   (    [Class list_name, Class list_name], [Class list_name, Class list_name]),\n   (                                [Void], [Class list_name, Class list_name])]\""], ["", "text \\<open>\n  The next definition and three proof rules implement an algorithm to\n  enumarate natural numbers. The command \\<open>apply (elim pc_end pc_next pc_0\\<close> \n  transforms a goal of the form\n  @{prop [display] \"pc < n \\<Longrightarrow> P pc\"} \n  into a series of goals\n  @{prop [display] \"P 0\"} \n  @{prop [display] \"P (Suc 0)\"} \n\n  \\<open>\\<dots>\\<close>\n\n  @{prop [display] \"P n\"} \n\\<close>"], ["", "definition intervall :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> bool\" (\"_ \\<in> [_, _')\")\nwhere\n  \"x \\<in> [a, b) \\<equiv> a \\<le> x \\<and> x < b\""], ["", "lemma pc_0: \"x < n \\<Longrightarrow> (x \\<in> [0, n) \\<Longrightarrow> P x) \\<Longrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < n; x \\<in> [0, n) \\<Longrightarrow> P x\\<rbrakk>\n    \\<Longrightarrow> P x", "by (simp add: intervall_def)"], ["", "lemma pc_next: \"x \\<in> [n0, n) \\<Longrightarrow> P n0 \\<Longrightarrow> (x \\<in> [Suc n0, n) \\<Longrightarrow> P x) \\<Longrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> [n0, n); P n0;\n     x \\<in> [Suc n0, n) \\<Longrightarrow> P x\\<rbrakk>\n    \\<Longrightarrow> P x", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> [n0, n); P n0;\n     x \\<in> [Suc n0, n) \\<Longrightarrow> P x\\<rbrakk>\n    \\<Longrightarrow> P x", "apply (cases \"x=n0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> [n0, n); P n0;\n     x \\<in> [Suc n0, n) \\<Longrightarrow> P x; x = n0\\<rbrakk>\n    \\<Longrightarrow> P x\n 2. \\<lbrakk>x \\<in> [n0, n); P n0;\n     x \\<in> [Suc n0, n) \\<Longrightarrow> P x; x \\<noteq> n0\\<rbrakk>\n    \\<Longrightarrow> P x", "apply (auto simp add: intervall_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma pc_end: \"x \\<in> [n,n) \\<Longrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> [n, n) \\<Longrightarrow> P x", "by (unfold intervall_def) arith"], ["", "lemma types_append [simp]: \"check_types E 3 (Suc (Suc 0)) (map OK \\<phi>\\<^sub>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_types E 3 (Suc (Suc 0)) (map OK \\<phi>\\<^sub>a)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_types E 3 (Suc (Suc 0)) (map OK \\<phi>\\<^sub>a)", "by (auto simp add: check_types_def phi_append_def JVM_states_unfold)"], ["", "(*>*)"], ["", "lemma wt_append [simp]:\n  \"wt_method E list_name [Class list_name] Void 3 0 append_ins\n             [(Suc 0, 2, NullPointer, 7, 0)] \\<phi>\\<^sub>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wt_method E list_name [Class list_name] Void 3 0 append_ins\n     [(Suc 0, 2, NullPointer, 7, 0)] \\<phi>\\<^sub>a", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wt_method E list_name [Class list_name] Void 3 0 append_ins\n     [(Suc 0, 2, NullPointer, 7, 0)] \\<phi>\\<^sub>a", "apply (simp add: wt_method_def wt_start_def wt_instr_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. append_ins \\<noteq> [] \\<and>\n    length \\<phi>\\<^sub>a = length append_ins \\<and>\n    (\\<exists>b.\n        \\<phi>\\<^sub>a ! 0 = \\<lfloor>([], b)\\<rfloor> \\<and>\n        (\\<exists>z zs.\n            b = z # zs \\<and>\n            E \\<turnstile> OK (Class list_name) \\<le>\\<^sub>\\<top> z \\<and>\n            (\\<exists>z.\n                zs = [z] \\<and>\n                E \\<turnstile> OK (Class\n                                    list_name) \\<le>\\<^sub>\\<top> z))) \\<and>\n    (\\<forall>pc a b.\n        \\<phi>\\<^sub>a ! pc = \\<lfloor>(a, b)\\<rfloor> \\<longrightarrow>\n        pc < length append_ins \\<longrightarrow>\n        app\\<^sub>i (append_ins ! pc, E, pc, 3, Void, a, b) \\<and>\n        (\\<forall>(f, t, C, ab)\n                  \\<in>set (relevant_entries E (append_ins ! pc) pc\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n            (\\<exists>a aa b.\n                class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n            (case ab of\n             (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n        (\\<forall>(pc', \\<tau>')\n                  \\<in>(\\<lambda>pc'.\n                           (pc',\n                            \\<lfloor>eff\\<^sub>i\n(append_ins ! pc, E, a, b)\\<rfloor>)) `\n                       set (succs (append_ins ! pc) (a, b) pc) \\<union>\n                       (\\<lambda>(f, t, C, h, d).\n                           (h, \\<lfloor>(Class C # drop (length a - d) a,\n   b)\\<rfloor>)) `\n                       set (relevant_entries E (append_ins ! pc) pc\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n            pc' < length append_ins) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>pc'.\n                       (pc',\n                        \\<lfloor>eff\\<^sub>i\n                                  (append_ins ! pc, E, a, b)\\<rfloor>)) `\n                   set (succs (append_ins ! pc) (a, b) pc) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' \\<phi>\\<^sub>a ! aa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>(f, t, C, h, d).\n                       (h, \\<lfloor>(Class C # drop (length a - d) a,\n                                     b)\\<rfloor>)) `\n                   set (relevant_entries E (append_ins ! pc) pc\n                         [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' \\<phi>\\<^sub>a ! aa)))", "apply (simp add: append_ins_def phi_append_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>pc a b.\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       pc =\n       \\<lfloor>(a, b)\\<rfloor> \\<longrightarrow>\n       pc < Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc 0))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         pc,\n         E, pc, 3, Void, a, b) \\<and>\n       (\\<forall>(f, t, C, ab)\n                 \\<in>set (relevant_entries E\n                            ([Load 0, Getfield next_name list_name, Load 0,\n                              Getfield next_name list_name, Push Null,\n                              CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                              Putfield next_name list_name, Push Unit,\n                              Return, Load (Suc 0),\n                              Invoke append_name (Suc 0), Return] !\n                             pc)\n                            pc [(Suc 0, 2, NullPointer, 7, 0)]).\n           (\\<exists>a aa b.\n               class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n           (case ab of\n            (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>(pc', \\<tau>')\n                 \\<in>(\\<lambda>x.\n                          (x, \\<lfloor>eff\\<^sub>i\n  ([Load 0, Getfield next_name list_name, Load 0,\n    Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n    Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n    Load (Suc 0), Invoke append_name (Suc 0), Return] !\n   pc,\n   E, a, b)\\<rfloor>)) `\n                      set (succs\n                            ([Load 0, Getfield next_name list_name, Load 0,\n                              Getfield next_name list_name, Push Null,\n                              CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                              Putfield next_name list_name, Push Unit,\n                              Return, Load (Suc 0),\n                              Invoke append_name (Suc 0), Return] !\n                             pc)\n                            (a, b) pc) \\<union>\n                      (\\<lambda>(f, t, C, h, d).\n                          (h, \\<lfloor>(Class C # drop (length a - d) a,\n  b)\\<rfloor>)) `\n                      set (relevant_entries E\n                            ([Load 0, Getfield next_name list_name, Load 0,\n                              Getfield next_name list_name, Push Null,\n                              CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                              Putfield next_name list_name, Push Unit,\n                              Return, Load (Suc 0),\n                              Invoke append_name (Suc 0), Return] !\n                             pc)\n                            pc [(Suc 0, 2, NullPointer, 7, 0)]).\n           pc'\n           < Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     pc,\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         pc)\n                        (a, b) pc) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>(f, t, C, h, d).\n                      (h, \\<lfloor>(Class C # drop (length a - d) a,\n                                    b)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         pc)\n                        pc [(Suc 0, 2, NullPointer, 7,\n                             0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc a b.\n       \\<lbrakk>[\\<lfloor>([],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Class list_name],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Class list_name],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Class list_name, Class list_name],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Class list_name, Class list_name],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([NT, Class list_name, Class list_name],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Boolean, Class list_name],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Class Object],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Class list_name],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Class list_name, Class list_name],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Void],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Class list_name],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Class list_name, Class list_name],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>,\n                 \\<lfloor>([Void],\n                           [OK (Class list_name),\n                            OK (Class list_name)])\\<rfloor>] !\n                pc =\n                \\<lfloor>(a, b)\\<rfloor>;\n        pc < Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\\<rbrakk>\n       \\<Longrightarrow> app\\<^sub>i\n                          ([Load 0, Getfield next_name list_name, Load 0,\n                            Getfield next_name list_name, Push Null, CmpEq,\n                            IfFalse 7, Pop, Load 0, Load (Suc 0),\n                            Putfield next_name list_name, Push Unit, Return,\n                            Load (Suc 0), Invoke append_name (Suc 0),\n                            Return] !\n                           pc,\n                           E, pc, 3, Void, a, b) \\<and>\n                         (\\<forall>(f, t, C, ab)\n                                   \\<in>set\n   (relevant_entries E\n     ([Load 0, Getfield next_name list_name, Load 0,\n       Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n       Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n       Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n      pc)\n     pc [(Suc 0, 2, NullPointer, 7, 0)]).\n                             (\\<exists>a aa b.\n                                 class E C =\n                                 \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n                             (case ab of\n                              (h, d) \\<Rightarrow>\n                                d \\<le> length a \\<and> d < 3)) \\<and>\n                         (\\<forall>(pc', \\<tau>')\n                                   \\<in>(\\<lambda>x.\n      (x, \\<lfloor>eff\\<^sub>i\n                    ([Load 0, Getfield next_name list_name, Load 0,\n                      Getfield next_name list_name, Push Null, CmpEq,\n                      IfFalse 7, Pop, Load 0, Load (Suc 0),\n                      Putfield next_name list_name, Push Unit, Return,\n                      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n                     pc,\n                     E, a, b)\\<rfloor>)) `\n  set (succs\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         pc)\n        (a, b) pc) \\<union>\n  (\\<lambda>(f, t, C, h, d).\n      (h, \\<lfloor>(Class C # drop (length a - d) a, b)\\<rfloor>)) `\n  set (relevant_entries E\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         pc)\n        pc [(Suc 0, 2, NullPointer, 7, 0)]).\n                             pc'\n                             < Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<and>\n                         (\\<forall>aa ba.\n                             ((aa, ba)\n                              \\<in> (\\<lambda>x.\n  (x, \\<lfloor>eff\\<^sub>i\n                ([Load 0, Getfield next_name list_name, Load 0,\n                  Getfield next_name list_name, Push Null, CmpEq, IfFalse 7,\n                  Pop, Load 0, Load (Suc 0), Putfield next_name list_name,\n                  Push Unit, Return, Load (Suc 0),\n                  Invoke append_name (Suc 0), Return] !\n                 pc,\n                 E, a, b)\\<rfloor>)) `\n                                    set (succs\n    ([Load 0, Getfield next_name list_name, Load 0,\n      Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n      Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n     pc)\n    (a, b) pc) \\<longrightarrow>\n                              E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([NT, Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Boolean, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class Object],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>] !\n                 aa) \\<and>\n                             ((aa, ba)\n                              \\<in> (\\<lambda>(f, t, C, h, d).\n  (h, \\<lfloor>(Class C # drop (length a - d) a, b)\\<rfloor>)) `\n                                    set (relevant_entries E\n    ([Load 0, Getfield next_name list_name, Load 0,\n      Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n      Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n     pc)\n    pc [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n                              E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([NT, Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Boolean, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class Object],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>] !\n                 aa))", "apply (drule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc a b.\n       \\<lbrakk>pc < Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))));\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([NT, Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Boolean, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class Object],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n        pc\\<rbrakk>\n       \\<Longrightarrow> app\\<^sub>i\n                          ([Load 0, Getfield next_name list_name, Load 0,\n                            Getfield next_name list_name, Push Null, CmpEq,\n                            IfFalse 7, Pop, Load 0, Load (Suc 0),\n                            Putfield next_name list_name, Push Unit, Return,\n                            Load (Suc 0), Invoke append_name (Suc 0),\n                            Return] !\n                           pc,\n                           E, pc, 3, Void, a, b) \\<and>\n                         (\\<forall>(f, t, C, ab)\n                                   \\<in>set\n   (relevant_entries E\n     ([Load 0, Getfield next_name list_name, Load 0,\n       Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n       Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n       Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n      pc)\n     pc [(Suc 0, 2, NullPointer, 7, 0)]).\n                             (\\<exists>a aa b.\n                                 class E C =\n                                 \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n                             (case ab of\n                              (h, d) \\<Rightarrow>\n                                d \\<le> length a \\<and> d < 3)) \\<and>\n                         (\\<forall>(pc', \\<tau>')\n                                   \\<in>(\\<lambda>x.\n      (x, \\<lfloor>eff\\<^sub>i\n                    ([Load 0, Getfield next_name list_name, Load 0,\n                      Getfield next_name list_name, Push Null, CmpEq,\n                      IfFalse 7, Pop, Load 0, Load (Suc 0),\n                      Putfield next_name list_name, Push Unit, Return,\n                      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n                     pc,\n                     E, a, b)\\<rfloor>)) `\n  set (succs\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         pc)\n        (a, b) pc) \\<union>\n  (\\<lambda>(f, t, C, h, d).\n      (h, \\<lfloor>(Class C # drop (length a - d) a, b)\\<rfloor>)) `\n  set (relevant_entries E\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         pc)\n        pc [(Suc 0, 2, NullPointer, 7, 0)]).\n                             pc'\n                             < Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<and>\n                         (\\<forall>aa ba.\n                             ((aa, ba)\n                              \\<in> (\\<lambda>x.\n  (x, \\<lfloor>eff\\<^sub>i\n                ([Load 0, Getfield next_name list_name, Load 0,\n                  Getfield next_name list_name, Push Null, CmpEq, IfFalse 7,\n                  Pop, Load 0, Load (Suc 0), Putfield next_name list_name,\n                  Push Unit, Return, Load (Suc 0),\n                  Invoke append_name (Suc 0), Return] !\n                 pc,\n                 E, a, b)\\<rfloor>)) `\n                                    set (succs\n    ([Load 0, Getfield next_name list_name, Load 0,\n      Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n      Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n     pc)\n    (a, b) pc) \\<longrightarrow>\n                              E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([NT, Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Boolean, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class Object],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>] !\n                 aa) \\<and>\n                             ((aa, ba)\n                              \\<in> (\\<lambda>(f, t, C, h, d).\n  (h, \\<lfloor>(Class C # drop (length a - d) a, b)\\<rfloor>)) `\n                                    set (relevant_entries E\n    ([Load 0, Getfield next_name list_name, Load 0,\n      Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n      Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n     pc)\n    pc [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n                              E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([NT, Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Boolean, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class Object],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Class list_name, Class list_name],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK (Class list_name),\n                             OK (Class list_name)])\\<rfloor>] !\n                 aa))", "apply (erule_tac P=\"x = y\" for x y in rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc a b.\n       pc < Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc 0))))))))))))))) \\<Longrightarrow>\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       pc \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         pc,\n         E, pc, 3, Void, a, b) \\<and>\n       (\\<forall>(f, t, C, ab)\n                 \\<in>set (relevant_entries E\n                            ([Load 0, Getfield next_name list_name, Load 0,\n                              Getfield next_name list_name, Push Null,\n                              CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                              Putfield next_name list_name, Push Unit,\n                              Return, Load (Suc 0),\n                              Invoke append_name (Suc 0), Return] !\n                             pc)\n                            pc [(Suc 0, 2, NullPointer, 7, 0)]).\n           (\\<exists>a aa b.\n               class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n           (case ab of\n            (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>(pc', \\<tau>')\n                 \\<in>(\\<lambda>x.\n                          (x, \\<lfloor>eff\\<^sub>i\n  ([Load 0, Getfield next_name list_name, Load 0,\n    Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n    Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n    Load (Suc 0), Invoke append_name (Suc 0), Return] !\n   pc,\n   E, a, b)\\<rfloor>)) `\n                      set (succs\n                            ([Load 0, Getfield next_name list_name, Load 0,\n                              Getfield next_name list_name, Push Null,\n                              CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                              Putfield next_name list_name, Push Unit,\n                              Return, Load (Suc 0),\n                              Invoke append_name (Suc 0), Return] !\n                             pc)\n                            (a, b) pc) \\<union>\n                      (\\<lambda>(f, t, C, h, d).\n                          (h, \\<lfloor>(Class C # drop (length a - d) a,\n  b)\\<rfloor>)) `\n                      set (relevant_entries E\n                            ([Load 0, Getfield next_name list_name, Load 0,\n                              Getfield next_name list_name, Push Null,\n                              CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                              Putfield next_name list_name, Push Unit,\n                              Return, Load (Suc 0),\n                              Invoke append_name (Suc 0), Return] !\n                             pc)\n                            pc [(Suc 0, 2, NullPointer, 7, 0)]).\n           pc'\n           < Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     pc,\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         pc)\n                        (a, b) pc) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>(f, t, C, h, d).\n                      (h, \\<lfloor>(Class C # drop (length a - d) a,\n                                    b)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         pc)\n                        pc [(Suc 0, 2, NullPointer, 7,\n                             0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))", "apply (elim pc_end pc_next pc_0)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       0 \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         0,\n         E, 0, 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              0)\n                             0 [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    0,\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              0)\n                             (a, b) 0) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              0)\n                             0 [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     0,\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         0)\n                        (a, b) 0) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         0)\n                        0 [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc 0 \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc 0,\n         E, Suc 0, 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (Suc 0) [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc 0,\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (a, b) (Suc 0)) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (Suc 0) [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc 0,\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc 0)\n                        (a, b) (Suc 0)) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc 0)\n                        (Suc 0)\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc 0) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc 0),\n         E, Suc (Suc 0), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc 0),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (a, b) (Suc (Suc 0))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc 0),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc 0))\n                        (a, b) (Suc (Suc 0))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc 0))\n                        (Suc (Suc 0))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc 0)) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc 0)),\n         E, Suc (Suc (Suc 0)), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0)))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc 0)),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (a, b) (Suc (Suc (Suc 0)))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0)))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc 0)),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc 0)))\n                        (a, b) (Suc (Suc (Suc 0)))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc 0)))\n                        (Suc (Suc (Suc 0)))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc 0))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc 0))),\n         E, Suc (Suc (Suc (Suc 0))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc 0))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (a, b) (Suc (Suc (Suc (Suc 0))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc 0))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (a, b) (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (Suc (Suc (Suc (Suc 0))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))), 3, Void, a,\n         b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([NT, Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Boolean, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class Object],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0)))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([Load 0, Getfield next_name list_name, Load 0,\n           Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n           Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n           Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))), 3, Void,\n          a, b) \\<and>\n        (\\<forall>b\\<in>set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case b of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n        (\\<forall>a\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([Load 0, Getfield next_name list_name, Load 0,\n      Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n      Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                        (\\<lambda>c.\n                            case c of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case a of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc 0)))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([Load 0, Getfield next_name list_name,\n Load 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n Load (Suc 0), Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>c.\n                       case c of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                         [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa))\nA total of 16 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc 0 \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc 0,\n         E, Suc 0, 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (Suc 0) [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc 0,\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (a, b) (Suc 0)) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (Suc 0) [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc 0,\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc 0)\n                        (a, b) (Suc 0)) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc 0)\n                        (Suc 0)\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc 0) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc 0),\n         E, Suc (Suc 0), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc 0),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (a, b) (Suc (Suc 0))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc 0),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc 0))\n                        (a, b) (Suc (Suc 0))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc 0))\n                        (Suc (Suc 0))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc 0)) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc 0)),\n         E, Suc (Suc (Suc 0)), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0)))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc 0)),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (a, b) (Suc (Suc (Suc 0)))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0)))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc 0)),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc 0)))\n                        (a, b) (Suc (Suc (Suc 0)))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc 0)))\n                        (Suc (Suc (Suc 0)))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc 0))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc 0))),\n         E, Suc (Suc (Suc (Suc 0))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc 0))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (a, b) (Suc (Suc (Suc (Suc 0))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc 0))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (a, b) (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (Suc (Suc (Suc (Suc 0))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))), 3, Void, a,\n         b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))), 3, Void,\n         a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([NT, Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Boolean, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class Object],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([Load 0, Getfield next_name list_name, Load 0,\n           Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n           Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n           Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))), 3,\n          Void, a, b) \\<and>\n        (\\<forall>b\\<in>set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case b of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n        (\\<forall>a\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([Load 0, Getfield next_name list_name, Load 0,\n      Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n      Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                        (\\<lambda>c.\n                            case c of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case a of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc 0)))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([Load 0, Getfield next_name list_name,\n Load 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n Load (Suc 0), Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>c.\n                       case c of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                         [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa))\nA total of 15 subgoals...", "apply (fastforce simp add: matches_ex_entry_def subcls1\n    relevant_entries_def is_relevant_entry_def sees_field_def list_class_def\n    distinct_classes distinct_fields intro: Fields.intros)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc 0) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc 0),\n         E, Suc (Suc 0), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc 0),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (a, b) (Suc (Suc 0))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc 0),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc 0))\n                        (a, b) (Suc (Suc 0))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc 0))\n                        (Suc (Suc 0))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc 0)) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc 0)),\n         E, Suc (Suc (Suc 0)), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0)))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc 0)),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (a, b) (Suc (Suc (Suc 0)))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0)))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc 0)),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc 0)))\n                        (a, b) (Suc (Suc (Suc 0)))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc 0)))\n                        (Suc (Suc (Suc 0)))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc 0))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc 0))),\n         E, Suc (Suc (Suc (Suc 0))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc 0))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (a, b) (Suc (Suc (Suc (Suc 0))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc 0))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (a, b) (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (Suc (Suc (Suc (Suc 0))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))), 3, Void, a,\n         b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))), 3, Void,\n         a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))), 3,\n         Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([NT, Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Boolean, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class Object],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([Load 0, Getfield next_name list_name, Load 0,\n           Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n           Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n           Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n          3, Void, a, b) \\<and>\n        (\\<forall>b\\<in>set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case b of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n        (\\<forall>a\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([Load 0, Getfield next_name list_name, Load 0,\n      Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n      Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                        (\\<lambda>c.\n                            case c of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case a of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc 0)))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([Load 0, Getfield next_name list_name,\n Load 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n Load (Suc 0), Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>c.\n                       case c of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                         [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa))\nA total of 14 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc 0)) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc 0)),\n         E, Suc (Suc (Suc 0)), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0)))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc 0)),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (a, b) (Suc (Suc (Suc 0)))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0)))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc 0)),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc 0)))\n                        (a, b) (Suc (Suc (Suc 0)))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc 0)))\n                        (Suc (Suc (Suc 0)))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc 0))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc 0))),\n         E, Suc (Suc (Suc (Suc 0))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc 0))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (a, b) (Suc (Suc (Suc (Suc 0))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc 0))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (a, b) (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (Suc (Suc (Suc (Suc 0))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))), 3, Void, a,\n         b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))), 3, Void,\n         a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))), 3,\n         Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([NT, Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Boolean, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class Object],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([Load 0, Getfield next_name list_name, Load 0,\n           Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n           Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n           Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n          3, Void, a, b) \\<and>\n        (\\<forall>b\\<in>set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case b of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n        (\\<forall>a\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([Load 0, Getfield next_name list_name, Load 0,\n      Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n      Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                        (\\<lambda>c.\n                            case c of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case a of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc 0)))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([Load 0, Getfield next_name list_name,\n Load 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n Load (Suc 0), Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>c.\n                       case c of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                         [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa))\nA total of 13 subgoals...", "apply (fastforce simp add:\n    relevant_entries_def is_relevant_entry_def sees_field_def list_class_def\n    distinct_classes distinct_fields intro: Fields.intros)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc 0))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc 0))),\n         E, Suc (Suc (Suc (Suc 0))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc 0))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (a, b) (Suc (Suc (Suc (Suc 0))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc 0))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (a, b) (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (Suc (Suc (Suc (Suc 0))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))), 3, Void, a,\n         b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))), 3, Void,\n         a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))), 3,\n         Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([NT, Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Boolean, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class Object],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([Load 0, Getfield next_name list_name, Load 0,\n           Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n           Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n           Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n          3, Void, a, b) \\<and>\n        (\\<forall>b\\<in>set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case b of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n        (\\<forall>a\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([Load 0, Getfield next_name list_name, Load 0,\n      Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n      Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc 0)))))))))))))) \\<union>\n                        (\\<lambda>c.\n                            case c of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case a of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc 0)))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([Load 0, Getfield next_name list_name,\n Load 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n Load (Suc 0), Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc 0)))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>c.\n                       case c of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                         [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa))\nA total of 12 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0)))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))), 3, Void, a,\n         b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))), 3, Void,\n         a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))), 3,\n         Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([NT, Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Boolean, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class Object],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([Load 0, Getfield next_name list_name, Load 0,\n           Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n           Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n           Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n          3, Void, a, b) \\<and>\n        (\\<forall>b\\<in>set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case b of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n        (\\<forall>a\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([Load 0, Getfield next_name list_name, Load 0,\n      Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n      Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                        (\\<lambda>c.\n                            case c of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case a of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc 0)))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([Load 0, Getfield next_name list_name,\n Load 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n Load (Suc 0), Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>c.\n                       case c of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                         [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa))\nA total of 11 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))), 3, Void, a,\n         b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))), 3, Void,\n         a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))), 3,\n         Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([NT, Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Boolean, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class Object],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Class list_name, Class list_name],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n         \\<lfloor>([Void],\n                   [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([Load 0, Getfield next_name list_name, Load 0,\n           Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n           Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n           Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n          3, Void, a, b) \\<and>\n        (\\<forall>b\\<in>set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case b of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n        (\\<forall>a\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([Load 0, Getfield next_name list_name, Load 0,\n      Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n      Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n      Load (Suc 0), Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                        (\\<lambda>c.\n                            case c of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([Load 0, Getfield next_name list_name,\n                                Load 0, Getfield next_name list_name,\n                                Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n                                Load (Suc 0), Putfield next_name list_name,\n                                Push Unit, Return, Load (Suc 0),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))\n                              [(Suc 0, 2, NullPointer, 7, 0)]).\n            case a of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc 0)))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([Load 0, Getfield next_name list_name,\n Load 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n Load (Suc 0), Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>c.\n                       case c of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([Load 0, Getfield next_name list_name, Load 0,\n                           Getfield next_name list_name, Push Null, CmpEq,\n                           IfFalse 7, Pop, Load 0, Load (Suc 0),\n                           Putfield next_name list_name, Push Unit, Return,\n                           Load (Suc 0), Invoke append_name (Suc 0),\n                           Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                         [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([NT, Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Boolean, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class Object],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Class list_name, Class list_name],\n           [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n \\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\naa))", "apply (fastforce simp add: relevant_entries_def is_relevant_entry_def subcls1)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), 3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))), 3, Void, a,\n         b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))), 3, Void,\n         a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))), 3,\n         Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))), 3, Void, a,\n         b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))), 3, Void,\n         a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))), 3,\n         Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))), 3, Void,\n         a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))), 3,\n         Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))), 3,\n         Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))", "apply (fastforce simp add:\n    relevant_entries_def is_relevant_entry_def sees_field_def list_class_def\n    distinct_classes distinct_fields intro: Fields.intros)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))", "apply (fastforce simp add:\n    relevant_entries_def is_relevant_entry_def list_class_def\n    distinct_classes Method_def intro: Methods.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([NT, Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Boolean, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class Object],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Class list_name, Class list_name],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n        \\<lfloor>([Void],\n                  [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([Load 0, Getfield next_name list_name, Load 0,\n          Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\n          Load 0, Load (Suc 0), Putfield next_name list_name, Push Unit,\n          Return, Load (Suc 0), Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         3, Void, a, b) \\<and>\n       (\\<forall>b\\<in>set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case b of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n       (\\<forall>a\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([Load 0, Getfield next_name list_name, Load 0,\n     Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop, Load 0,\n     Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\n     Load (Suc 0), Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>c.\n                           case c of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([Load 0, Getfield next_name list_name, Load 0,\n                               Getfield next_name list_name, Push Null,\n                               CmpEq, IfFalse 7, Pop, Load 0, Load (Suc 0),\n                               Putfield next_name list_name, Push Unit,\n                               Return, Load (Suc 0),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             [(Suc 0, 2, NullPointer, 7, 0)]).\n           case a of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([Load 0, Getfield next_name list_name,\nLoad 0, Getfield next_name list_name, Push Null, CmpEq, IfFalse 7, Pop,\nLoad 0, Load (Suc 0), Putfield next_name list_name, Push Unit, Return,\nLoad (Suc 0), Invoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>c.\n                      case c of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([Load 0, Getfield next_name list_name, Load 0,\n                          Getfield next_name list_name, Push Null, CmpEq,\n                          IfFalse 7, Pop, Load 0, Load (Suc 0),\n                          Putfield next_name list_name, Push Unit, Return,\n                          Load (Suc 0), Invoke append_name (Suc 0),\n                          Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        [(Suc 0, 2, NullPointer, 7, 0)]) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([NT, Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Boolean, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class Object],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Class list_name, Class list_name],\n          [OK (Class list_name), OK (Class list_name)])\\<rfloor>,\n\\<lfloor>([Void], [OK (Class list_name), OK (Class list_name)])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text \\<open>Some abbreviations for readability\\<close>"], ["", "abbreviation \"Clist == Class list_name\""], ["", "abbreviation \"Ctest == Class test_name\""], ["", "definition phi_makelist :: ty\\<^sub>m (\"\\<phi>\\<^sub>m\")\nwhere\n  \"\\<phi>\\<^sub>m \\<equiv> map (\\<lambda>(x,y). Some (x, y)) [ \n    (                                   [], [OK Ctest, Err     , Err     ]),\n    (                              [Clist], [OK Ctest, Err     , Err     ]),\n    (                                   [], [OK Clist, Err     , Err     ]),\n    (                              [Clist], [OK Clist, Err     , Err     ]),\n    (                     [Integer, Clist], [OK Clist, Err     , Err     ]),\n\n    (                                   [], [OK Clist, Err     , Err     ]),\n    (                              [Clist], [OK Clist, Err     , Err     ]),\n    (                                   [], [OK Clist, OK Clist, Err     ]),\n    (                              [Clist], [OK Clist, OK Clist, Err     ]),\n    (                     [Integer, Clist], [OK Clist, OK Clist, Err     ]),\n\n    (                                   [], [OK Clist, OK Clist, Err     ]),\n    (                              [Clist], [OK Clist, OK Clist, Err     ]),\n    (                                   [], [OK Clist, OK Clist, OK Clist]),\n    (                              [Clist], [OK Clist, OK Clist, OK Clist]),\n    (                     [Integer, Clist], [OK Clist, OK Clist, OK Clist]),\n\n    (                                   [], [OK Clist, OK Clist, OK Clist]),\n    (                              [Clist], [OK Clist, OK Clist, OK Clist]),\n    (                       [Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n    (                               [Void], [OK Clist, OK Clist, OK Clist]),\n    (                                   [], [OK Clist, OK Clist, OK Clist]),\n    (                              [Clist], [OK Clist, OK Clist, OK Clist]),\n    (                       [Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n    (                               [Void], [OK Clist, OK Clist, OK Clist])]\""], ["", "lemma types_makelist [simp]: \"check_types E 3 (Suc (Suc (Suc 0))) (map OK \\<phi>\\<^sub>m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_types E 3 (Suc (Suc (Suc 0))) (map OK \\<phi>\\<^sub>m)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_types E 3 (Suc (Suc (Suc 0))) (map OK \\<phi>\\<^sub>m)", "by (auto simp add: check_types_def phi_makelist_def JVM_states_unfold)"], ["", "(*>*)"], ["", "lemma wt_makelist [simp]:\n  \"wt_method E test_name [] Void 3 2 make_list_ins [] \\<phi>\\<^sub>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wt_method E test_name [] Void 3 2 make_list_ins [] \\<phi>\\<^sub>m", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wt_method E test_name [] Void 3 2 make_list_ins [] \\<phi>\\<^sub>m", "apply (simp add: wt_method_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. make_list_ins \\<noteq> [] \\<and>\n    length \\<phi>\\<^sub>m = length make_list_ins \\<and>\n    wt_start E test_name [] 2 \\<phi>\\<^sub>m \\<and>\n    (\\<forall>pc a b.\n        \\<phi>\\<^sub>m ! pc = \\<lfloor>(a, b)\\<rfloor> \\<longrightarrow>\n        pc < length make_list_ins \\<longrightarrow>\n        app\\<^sub>i (make_list_ins ! pc, E, pc, 3, Void, a, b) \\<and>\n        (\\<forall>(f, t, C, ab)\n                  \\<in>set (relevant_entries E (make_list_ins ! pc) pc []).\n            (\\<exists>a aa b.\n                class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n            (case ab of\n             (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n        (\\<forall>(pc', \\<tau>')\n                  \\<in>(\\<lambda>pc'.\n                           (pc',\n                            \\<lfloor>eff\\<^sub>i\n(make_list_ins ! pc, E, a, b)\\<rfloor>)) `\n                       set (succs (make_list_ins ! pc) (a, b) pc) \\<union>\n                       (\\<lambda>(f, t, C, h, d).\n                           (h, \\<lfloor>(Class C # drop (length a - d) a,\n   b)\\<rfloor>)) `\n                       set (relevant_entries E (make_list_ins ! pc) pc []).\n            pc' < length make_list_ins) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>pc'.\n                       (pc',\n                        \\<lfloor>eff\\<^sub>i\n                                  (make_list_ins ! pc, E, a, b)\\<rfloor>)) `\n                   set (succs (make_list_ins ! pc) (a, b)\n                         pc) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' \\<phi>\\<^sub>m ! aa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>(f, t, C, h, d).\n                       (h, \\<lfloor>(Class C # drop (length a - d) a,\n                                     b)\\<rfloor>)) `\n                   set (relevant_entries E (make_list_ins ! pc) pc\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' \\<phi>\\<^sub>m ! aa)))", "apply (unfold make_list_ins_def phi_makelist_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. [New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store 1, Load 1,\n     Push (Intg 2), Putfield val_name list_name, New list_name, Store 2,\n     Load 2, Push (Intg 3), Putfield val_name list_name, Load 0, Load 1,\n     Invoke append_name 1, Pop, Load 0, Load 2, Invoke append_name 1,\n     Return] \\<noteq>\n    [] \\<and>\n    length\n     (map (\\<lambda>(x, y). \\<lfloor>(x, y)\\<rfloor>)\n       [([], [OK Ctest, Err, Err]), ([Clist], [OK Ctest, Err, Err]),\n        ([], [OK Clist, Err, Err]), ([Clist], [OK Clist, Err, Err]),\n        ([Integer, Clist], [OK Clist, Err, Err]),\n        ([], [OK Clist, Err, Err]), ([Clist], [OK Clist, Err, Err]),\n        ([], [OK Clist, OK Clist, Err]),\n        ([Clist], [OK Clist, OK Clist, Err]),\n        ([Integer, Clist], [OK Clist, OK Clist, Err]),\n        ([], [OK Clist, OK Clist, Err]),\n        ([Clist], [OK Clist, OK Clist, Err]),\n        ([], [OK Clist, OK Clist, OK Clist]),\n        ([Clist], [OK Clist, OK Clist, OK Clist]),\n        ([Integer, Clist], [OK Clist, OK Clist, OK Clist]),\n        ([], [OK Clist, OK Clist, OK Clist]),\n        ([Clist], [OK Clist, OK Clist, OK Clist]),\n        ([Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n        ([Void], [OK Clist, OK Clist, OK Clist]),\n        ([], [OK Clist, OK Clist, OK Clist]),\n        ([Clist], [OK Clist, OK Clist, OK Clist]),\n        ([Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n        ([Void], [OK Clist, OK Clist, OK Clist])]) =\n    length\n     [New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store 1, Load 1,\n      Push (Intg 2), Putfield val_name list_name, New list_name, Store 2,\n      Load 2, Push (Intg 3), Putfield val_name list_name, Load 0, Load 1,\n      Invoke append_name 1, Pop, Load 0, Load 2, Invoke append_name 1,\n      Return] \\<and>\n    wt_start E test_name [] 2\n     (map (\\<lambda>(x, y). \\<lfloor>(x, y)\\<rfloor>)\n       [([], [OK Ctest, Err, Err]), ([Clist], [OK Ctest, Err, Err]),\n        ([], [OK Clist, Err, Err]), ([Clist], [OK Clist, Err, Err]),\n        ([Integer, Clist], [OK Clist, Err, Err]),\n        ([], [OK Clist, Err, Err]), ([Clist], [OK Clist, Err, Err]),\n        ([], [OK Clist, OK Clist, Err]),\n        ([Clist], [OK Clist, OK Clist, Err]),\n        ([Integer, Clist], [OK Clist, OK Clist, Err]),\n        ([], [OK Clist, OK Clist, Err]),\n        ([Clist], [OK Clist, OK Clist, Err]),\n        ([], [OK Clist, OK Clist, OK Clist]),\n        ([Clist], [OK Clist, OK Clist, OK Clist]),\n        ([Integer, Clist], [OK Clist, OK Clist, OK Clist]),\n        ([], [OK Clist, OK Clist, OK Clist]),\n        ([Clist], [OK Clist, OK Clist, OK Clist]),\n        ([Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n        ([Void], [OK Clist, OK Clist, OK Clist]),\n        ([], [OK Clist, OK Clist, OK Clist]),\n        ([Clist], [OK Clist, OK Clist, OK Clist]),\n        ([Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n        ([Void], [OK Clist, OK Clist, OK Clist])]) \\<and>\n    (\\<forall>pc a b.\n        map (\\<lambda>(x, y). \\<lfloor>(x, y)\\<rfloor>)\n         [([], [OK Ctest, Err, Err]), ([Clist], [OK Ctest, Err, Err]),\n          ([], [OK Clist, Err, Err]), ([Clist], [OK Clist, Err, Err]),\n          ([Integer, Clist], [OK Clist, Err, Err]),\n          ([], [OK Clist, Err, Err]), ([Clist], [OK Clist, Err, Err]),\n          ([], [OK Clist, OK Clist, Err]),\n          ([Clist], [OK Clist, OK Clist, Err]),\n          ([Integer, Clist], [OK Clist, OK Clist, Err]),\n          ([], [OK Clist, OK Clist, Err]),\n          ([Clist], [OK Clist, OK Clist, Err]),\n          ([], [OK Clist, OK Clist, OK Clist]),\n          ([Clist], [OK Clist, OK Clist, OK Clist]),\n          ([Integer, Clist], [OK Clist, OK Clist, OK Clist]),\n          ([], [OK Clist, OK Clist, OK Clist]),\n          ([Clist], [OK Clist, OK Clist, OK Clist]),\n          ([Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n          ([Void], [OK Clist, OK Clist, OK Clist]),\n          ([], [OK Clist, OK Clist, OK Clist]),\n          ([Clist], [OK Clist, OK Clist, OK Clist]),\n          ([Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n          ([Void], [OK Clist, OK Clist, OK Clist])] !\n        pc =\n        \\<lfloor>(a, b)\\<rfloor> \\<longrightarrow>\n        pc < length\n              [New list_name, Store 0, Load 0, Push (Intg 1),\n               Putfield val_name list_name, New list_name, Store 1, Load 1,\n               Push (Intg 2), Putfield val_name list_name, New list_name,\n               Store 2, Load 2, Push (Intg 3), Putfield val_name list_name,\n               Load 0, Load 1, Invoke append_name 1, Pop, Load 0, Load 2,\n               Invoke append_name 1, Return] \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store 1, Load 1,\n           Push (Intg 2), Putfield val_name list_name, New list_name,\n           Store 2, Load 2, Push (Intg 3), Putfield val_name list_name,\n           Load 0, Load 1, Invoke append_name 1, Pop, Load 0, Load 2,\n           Invoke append_name 1, Return] !\n          pc,\n          E, pc, 3, Void, a, b) \\<and>\n        (\\<forall>(f, t, C, ab)\n                  \\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store 1, Load 1,\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store 2, Load 2,\n                               Push (Intg 3), Putfield val_name list_name,\n                               Load 0, Load 1, Invoke append_name 1, Pop,\n                               Load 0, Load 2, Invoke append_name 1,\n                               Return] !\n                              pc)\n                             pc []).\n            (\\<exists>a aa b.\n                class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n            (case ab of\n             (h, d) \\<Rightarrow> d \\<le> length a \\<and> d < 3)) \\<and>\n        (\\<forall>(pc', \\<tau>')\n                  \\<in>(\\<lambda>pc'.\n                           (pc',\n                            \\<lfloor>eff\\<^sub>i\n([New list_name, Store 0, Load 0, Push (Intg 1),\n  Putfield val_name list_name, New list_name, Store 1, Load 1,\n  Push (Intg 2), Putfield val_name list_name, New list_name, Store 2,\n  Load 2, Push (Intg 3), Putfield val_name list_name, Load 0, Load 1,\n  Invoke append_name 1, Pop, Load 0, Load 2, Invoke append_name 1, Return] !\n pc,\n E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store 1, Load 1,\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store 2, Load 2,\n                               Push (Intg 3), Putfield val_name list_name,\n                               Load 0, Load 1, Invoke append_name 1, Pop,\n                               Load 0, Load 2, Invoke append_name 1,\n                               Return] !\n                              pc)\n                             (a, b) pc) \\<union>\n                       (\\<lambda>(f, t, C, h, d).\n                           (h, \\<lfloor>(Class C # drop (length a - d) a,\n   b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store 1, Load 1,\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store 2, Load 2,\n                               Push (Intg 3), Putfield val_name list_name,\n                               Load 0, Load 1, Invoke append_name 1, Pop,\n                               Load 0, Load 2, Invoke append_name 1,\n                               Return] !\n                              pc)\n                             pc []).\n            pc'\n            < length\n               [New list_name, Store 0, Load 0, Push (Intg 1),\n                Putfield val_name list_name, New list_name, Store 1, Load 1,\n                Push (Intg 2), Putfield val_name list_name, New list_name,\n                Store 2, Load 2, Push (Intg 3), Putfield val_name list_name,\n                Load 0, Load 1, Invoke append_name 1, Pop, Load 0, Load 2,\n                Invoke append_name 1, Return]) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>pc'.\n                       (pc',\n                        \\<lfloor>eff\\<^sub>i\n                                  ([New list_name, Store 0, Load 0,\n                                    Push (Intg 1),\n                                    Putfield val_name list_name,\n                                    New list_name, Store 1, Load 1,\n                                    Push (Intg 2),\n                                    Putfield val_name list_name,\n                                    New list_name, Store 2, Load 2,\n                                    Push (Intg 3),\n                                    Putfield val_name list_name, Load 0,\n                                    Load 1, Invoke append_name 1, Pop,\n                                    Load 0, Load 2, Invoke append_name 1,\n                                    Return] !\n                                   pc,\n                                   E, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store 1, Load 1, Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store 2, Load 2, Push (Intg 3),\n                           Putfield val_name list_name, Load 0, Load 1,\n                           Invoke append_name 1, Pop, Load 0, Load 2,\n                           Invoke append_name 1, Return] !\n                          pc)\n                         (a, b) pc) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' map\n (\\<lambda>(x, y). \\<lfloor>(x, y)\\<rfloor>)\n [([], [OK Ctest, Err, Err]), ([Clist], [OK Ctest, Err, Err]),\n  ([], [OK Clist, Err, Err]), ([Clist], [OK Clist, Err, Err]),\n  ([Integer, Clist], [OK Clist, Err, Err]), ([], [OK Clist, Err, Err]),\n  ([Clist], [OK Clist, Err, Err]), ([], [OK Clist, OK Clist, Err]),\n  ([Clist], [OK Clist, OK Clist, Err]),\n  ([Integer, Clist], [OK Clist, OK Clist, Err]),\n  ([], [OK Clist, OK Clist, Err]), ([Clist], [OK Clist, OK Clist, Err]),\n  ([], [OK Clist, OK Clist, OK Clist]),\n  ([Clist], [OK Clist, OK Clist, OK Clist]),\n  ([Integer, Clist], [OK Clist, OK Clist, OK Clist]),\n  ([], [OK Clist, OK Clist, OK Clist]),\n  ([Clist], [OK Clist, OK Clist, OK Clist]),\n  ([Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n  ([Void], [OK Clist, OK Clist, OK Clist]),\n  ([], [OK Clist, OK Clist, OK Clist]),\n  ([Clist], [OK Clist, OK Clist, OK Clist]),\n  ([Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n  ([Void], [OK Clist, OK Clist, OK Clist])] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>(f, t, C, h, d).\n                       (h, \\<lfloor>(Class C # drop (length a - d) a,\n                                     b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store 1, Load 1, Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store 2, Load 2, Push (Intg 3),\n                           Putfield val_name list_name, Load 0, Load 1,\n                           Invoke append_name 1, Pop, Load 0, Load 2,\n                           Invoke append_name 1, Return] !\n                          pc)\n                         pc []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' map\n (\\<lambda>(x, y). \\<lfloor>(x, y)\\<rfloor>)\n [([], [OK Ctest, Err, Err]), ([Clist], [OK Ctest, Err, Err]),\n  ([], [OK Clist, Err, Err]), ([Clist], [OK Clist, Err, Err]),\n  ([Integer, Clist], [OK Clist, Err, Err]), ([], [OK Clist, Err, Err]),\n  ([Clist], [OK Clist, Err, Err]), ([], [OK Clist, OK Clist, Err]),\n  ([Clist], [OK Clist, OK Clist, Err]),\n  ([Integer, Clist], [OK Clist, OK Clist, Err]),\n  ([], [OK Clist, OK Clist, Err]), ([Clist], [OK Clist, OK Clist, Err]),\n  ([], [OK Clist, OK Clist, OK Clist]),\n  ([Clist], [OK Clist, OK Clist, OK Clist]),\n  ([Integer, Clist], [OK Clist, OK Clist, OK Clist]),\n  ([], [OK Clist, OK Clist, OK Clist]),\n  ([Clist], [OK Clist, OK Clist, OK Clist]),\n  ([Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n  ([Void], [OK Clist, OK Clist, OK Clist]),\n  ([], [OK Clist, OK Clist, OK Clist]),\n  ([Clist], [OK Clist, OK Clist, OK Clist]),\n  ([Clist, Clist], [OK Clist, OK Clist, OK Clist]),\n  ([Void], [OK Clist, OK Clist, OK Clist])] !\naa)))", "apply (simp add: wt_start_def eval_nat_numeral)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>pc a b.\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       pc =\n       \\<lfloor>(a, b)\\<rfloor> \\<longrightarrow>\n       pc < Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   0)))))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         pc,\n         E, pc, Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>(f, t, C, ab)\n                 \\<in>set (relevant_entries E\n                            ([New list_name, Store 0, Load 0, Push (Intg 1),\n                              Putfield val_name list_name, New list_name,\n                              Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                              Putfield val_name list_name, New list_name,\n                              Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                              Push (Intg 3), Putfield val_name list_name,\n                              Load 0, Load (Suc 0),\n                              Invoke append_name (Suc 0), Pop, Load 0,\n                              Load (Suc (Suc 0)),\n                              Invoke append_name (Suc 0), Return] !\n                             pc)\n                            pc []).\n           (\\<exists>a aa b.\n               class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n           (case ab of\n            (h, d) \\<Rightarrow>\n              d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>(pc', \\<tau>')\n                 \\<in>(\\<lambda>x.\n                          (x, \\<lfloor>eff\\<^sub>i\n  ([New list_name, Store 0, Load 0, Push (Intg 1),\n    Putfield val_name list_name, New list_name, Store (Suc 0), Load (Suc 0),\n    Push (Intg 2), Putfield val_name list_name, New list_name,\n    Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n    Putfield val_name list_name, Load 0, Load (Suc 0),\n    Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n    Invoke append_name (Suc 0), Return] !\n   pc,\n   E, a, b)\\<rfloor>)) `\n                      set (succs\n                            ([New list_name, Store 0, Load 0, Push (Intg 1),\n                              Putfield val_name list_name, New list_name,\n                              Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                              Putfield val_name list_name, New list_name,\n                              Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                              Push (Intg 3), Putfield val_name list_name,\n                              Load 0, Load (Suc 0),\n                              Invoke append_name (Suc 0), Pop, Load 0,\n                              Load (Suc (Suc 0)),\n                              Invoke append_name (Suc 0), Return] !\n                             pc)\n                            (a, b) pc) \\<union>\n                      (\\<lambda>(f, t, C, h, d).\n                          (h, \\<lfloor>(Class C # drop (length a - d) a,\n  b)\\<rfloor>)) `\n                      set (relevant_entries E\n                            ([New list_name, Store 0, Load 0, Push (Intg 1),\n                              Putfield val_name list_name, New list_name,\n                              Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                              Putfield val_name list_name, New list_name,\n                              Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                              Push (Intg 3), Putfield val_name list_name,\n                              Load 0, Load (Suc 0),\n                              Invoke append_name (Suc 0), Pop, Load 0,\n                              Load (Suc (Suc 0)),\n                              Invoke append_name (Suc 0), Return] !\n                             pc)\n                            pc []).\n           pc'\n           < Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     pc,\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         pc)\n                        (a, b) pc) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>(f, t, C, h, d).\n                      (h, \\<lfloor>(Class C # drop (length a - d) a,\n                                    b)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         pc)\n                        pc []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply (simp add: wt_instr_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>pc a b.\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       pc =\n       \\<lfloor>(a, b)\\<rfloor> \\<longrightarrow>\n       pc < Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   0)))))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         pc,\n         E, pc, Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              pc)\n                             pc []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    pc,\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              pc)\n                             (a, b) pc) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              pc)\n                             pc []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     pc,\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         pc)\n                        (a, b) pc) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         pc)\n                        pc []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc a b.\n       \\<lbrakk>[\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n                 \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n                 \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n                 \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n                 \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n                 \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n                 \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n                 \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n                 \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n                 \\<lfloor>([Integer, Clist],\n                           [OK Clist, OK Clist, Err])\\<rfloor>,\n                 \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n                 \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n                 \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                 \\<lfloor>([Clist],\n                           [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                 \\<lfloor>([Integer, Clist],\n                           [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                 \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                 \\<lfloor>([Clist],\n                           [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                 \\<lfloor>([Clist, Clist],\n                           [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                 \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                 \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                 \\<lfloor>([Clist],\n                           [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                 \\<lfloor>([Clist, Clist],\n                           [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                 \\<lfloor>([Void],\n                           [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                pc =\n                \\<lfloor>(a, b)\\<rfloor>;\n        pc < Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    0))))))))))))))))))))))\\<rbrakk>\n       \\<Longrightarrow> app\\<^sub>i\n                          ([New list_name, Store 0, Load 0, Push (Intg 1),\n                            Putfield val_name list_name, New list_name,\n                            Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                            Putfield val_name list_name, New list_name,\n                            Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                            Push (Intg 3), Putfield val_name list_name,\n                            Load 0, Load (Suc 0),\n                            Invoke append_name (Suc 0), Pop, Load 0,\n                            Load (Suc (Suc 0)), Invoke append_name (Suc 0),\n                            Return] !\n                           pc,\n                           E, pc, Suc (Suc (Suc 0)), Void, a, b) \\<and>\n                         (\\<forall>x\\<in>set\n    (relevant_entries E\n      ([New list_name, Store 0, Load 0, Push (Intg 1),\n        Putfield val_name list_name, New list_name, Store (Suc 0),\n        Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n        New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n        Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n        Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n        Invoke append_name (Suc 0), Return] !\n       pc)\n      pc []).\n                             case x of\n                             (f, t, C, ab) \\<Rightarrow>\n                               (\\<exists>a aa b.\n                                   class E C =\n                                   \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n                               (case ab of\n                                (h, d) \\<Rightarrow>\n                                  d \\<le> length a \\<and>\n                                  d < Suc (Suc (Suc 0)))) \\<and>\n                         (\\<forall>x\\<in>(\\<lambda>x.\n       (x, \\<lfloor>eff\\<^sub>i\n                     ([New list_name, Store 0, Load 0, Push (Intg 1),\n                       Putfield val_name list_name, New list_name,\n                       Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                       Putfield val_name list_name, New list_name,\n                       Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                       Push (Intg 3), Putfield val_name list_name, Load 0,\n                       Load (Suc 0), Invoke append_name (Suc 0), Pop,\n                       Load 0, Load (Suc (Suc 0)),\n                       Invoke append_name (Suc 0), Return] !\n                      pc,\n                      E, a, b)\\<rfloor>)) `\n   set (succs\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          pc)\n         (a, b) pc) \\<union>\n   (\\<lambda>x.\n       case x of\n       (f, t, C, h, d) \\<Rightarrow>\n         (h, \\<lfloor>(Class C # drop (length a - d) a, b)\\<rfloor>)) `\n   set (relevant_entries E\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          pc)\n         pc []).\n                             case x of\n                             (pc', \\<tau>') \\<Rightarrow>\n                               pc'\n                               < Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))))))))))))) \\<and>\n                         (\\<forall>aa ba.\n                             ((aa, ba)\n                              \\<in> (\\<lambda>x.\n  (x, \\<lfloor>eff\\<^sub>i\n                ([New list_name, Store 0, Load 0, Push (Intg 1),\n                  Putfield val_name list_name, New list_name, Store (Suc 0),\n                  Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n                  New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                  Push (Intg 3), Putfield val_name list_name, Load 0,\n                  Load (Suc 0), Invoke append_name (Suc 0), Pop, Load 0,\n                  Load (Suc (Suc 0)), Invoke append_name (Suc 0), Return] !\n                 pc,\n                 E, a, b)\\<rfloor>)) `\n                                    set (succs\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     pc)\n    (a, b) pc) \\<longrightarrow>\n                              E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n                            [OK Ctest, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                 aa) \\<and>\n                             ((aa, ba)\n                              \\<in> (\\<lambda>x.\n  case x of\n  (f, t, C, h, d) \\<Rightarrow>\n    (h, \\<lfloor>(Class C # drop (length a - d) a, b)\\<rfloor>)) `\n                                    set (relevant_entries E\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     pc)\n    pc []) \\<longrightarrow>\n                              E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n                            [OK Ctest, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                 aa))", "apply (drule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc a b.\n       \\<lbrakk>pc < Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))))))))));\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        pc\\<rbrakk>\n       \\<Longrightarrow> app\\<^sub>i\n                          ([New list_name, Store 0, Load 0, Push (Intg 1),\n                            Putfield val_name list_name, New list_name,\n                            Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                            Putfield val_name list_name, New list_name,\n                            Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                            Push (Intg 3), Putfield val_name list_name,\n                            Load 0, Load (Suc 0),\n                            Invoke append_name (Suc 0), Pop, Load 0,\n                            Load (Suc (Suc 0)), Invoke append_name (Suc 0),\n                            Return] !\n                           pc,\n                           E, pc, Suc (Suc (Suc 0)), Void, a, b) \\<and>\n                         (\\<forall>x\\<in>set\n    (relevant_entries E\n      ([New list_name, Store 0, Load 0, Push (Intg 1),\n        Putfield val_name list_name, New list_name, Store (Suc 0),\n        Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n        New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n        Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n        Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n        Invoke append_name (Suc 0), Return] !\n       pc)\n      pc []).\n                             case x of\n                             (f, t, C, ab) \\<Rightarrow>\n                               (\\<exists>a aa b.\n                                   class E C =\n                                   \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n                               (case ab of\n                                (h, d) \\<Rightarrow>\n                                  d \\<le> length a \\<and>\n                                  d < Suc (Suc (Suc 0)))) \\<and>\n                         (\\<forall>x\\<in>(\\<lambda>x.\n       (x, \\<lfloor>eff\\<^sub>i\n                     ([New list_name, Store 0, Load 0, Push (Intg 1),\n                       Putfield val_name list_name, New list_name,\n                       Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                       Putfield val_name list_name, New list_name,\n                       Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                       Push (Intg 3), Putfield val_name list_name, Load 0,\n                       Load (Suc 0), Invoke append_name (Suc 0), Pop,\n                       Load 0, Load (Suc (Suc 0)),\n                       Invoke append_name (Suc 0), Return] !\n                      pc,\n                      E, a, b)\\<rfloor>)) `\n   set (succs\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          pc)\n         (a, b) pc) \\<union>\n   (\\<lambda>x.\n       case x of\n       (f, t, C, h, d) \\<Rightarrow>\n         (h, \\<lfloor>(Class C # drop (length a - d) a, b)\\<rfloor>)) `\n   set (relevant_entries E\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          pc)\n         pc []).\n                             case x of\n                             (pc', \\<tau>') \\<Rightarrow>\n                               pc'\n                               < Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))))))))))))) \\<and>\n                         (\\<forall>aa ba.\n                             ((aa, ba)\n                              \\<in> (\\<lambda>x.\n  (x, \\<lfloor>eff\\<^sub>i\n                ([New list_name, Store 0, Load 0, Push (Intg 1),\n                  Putfield val_name list_name, New list_name, Store (Suc 0),\n                  Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n                  New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                  Push (Intg 3), Putfield val_name list_name, Load 0,\n                  Load (Suc 0), Invoke append_name (Suc 0), Pop, Load 0,\n                  Load (Suc (Suc 0)), Invoke append_name (Suc 0), Return] !\n                 pc,\n                 E, a, b)\\<rfloor>)) `\n                                    set (succs\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     pc)\n    (a, b) pc) \\<longrightarrow>\n                              E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n                            [OK Ctest, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                 aa) \\<and>\n                             ((aa, ba)\n                              \\<in> (\\<lambda>x.\n  case x of\n  (f, t, C, h, d) \\<Rightarrow>\n    (h, \\<lfloor>(Class C # drop (length a - d) a, b)\\<rfloor>)) `\n                                    set (relevant_entries E\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     pc)\n    pc []) \\<longrightarrow>\n                              E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n                            [OK Ctest, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Integer, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Clist, Clist],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n                  \\<lfloor>([Void],\n                            [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                 aa))", "apply (erule_tac P=\"x = y\" for x y in rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc a b.\n       pc < Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   0)))))))))))))))))))))) \\<Longrightarrow>\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       pc \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         pc,\n         E, pc, Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              pc)\n                             pc []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    pc,\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              pc)\n                             (a, b) pc) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              pc)\n                             pc []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     pc,\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         pc)\n                        (a, b) pc) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         pc)\n                        pc []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply (elim pc_end pc_next pc_0)"], ["proof (prove)\ngoal (23 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       0 \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         0,\n         E, 0, Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              0)\n                             0 []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    0,\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              0)\n                             (a, b) 0) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              0)\n                             0 []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     0,\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         0)\n                        (a, b) 0) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         0)\n                        0 []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc 0 \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc 0,\n         E, Suc 0, Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (Suc 0) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc 0,\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (a, b) (Suc 0)) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (Suc 0) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc 0,\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc 0)\n                        (a, b) (Suc 0)) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc 0)\n                        (Suc 0) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc 0) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc 0),\n         E, Suc (Suc 0), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc 0),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (a, b) (Suc (Suc 0))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc 0),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc 0))\n                        (a, b) (Suc (Suc 0))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc 0))\n                        (Suc (Suc 0)) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc 0)) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc 0)),\n         E, Suc (Suc (Suc 0)), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc 0)),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (a, b) (Suc (Suc (Suc 0)))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc 0)),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc 0)))\n                        (a, b) (Suc (Suc (Suc 0)))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc 0)))\n                        (Suc (Suc (Suc 0))) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc 0))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc 0))),\n         E, Suc (Suc (Suc (Suc 0))), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0)))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc 0))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (a, b) (Suc (Suc (Suc (Suc 0))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0)))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc 0))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (a, b) (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (Suc (Suc (Suc (Suc 0)))) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), Suc (Suc (Suc 0)),\n         Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0)))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 23 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (22 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc 0 \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc 0,\n         E, Suc 0, Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (Suc 0) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc 0,\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (a, b) (Suc 0)) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc 0)\n                             (Suc 0) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc 0,\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc 0)\n                        (a, b) (Suc 0)) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc 0)\n                        (Suc 0) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc 0) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc 0),\n         E, Suc (Suc 0), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc 0),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (a, b) (Suc (Suc 0))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc 0),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc 0))\n                        (a, b) (Suc (Suc 0))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc 0))\n                        (Suc (Suc 0)) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc 0)) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc 0)),\n         E, Suc (Suc (Suc 0)), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc 0)),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (a, b) (Suc (Suc (Suc 0)))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc 0)),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc 0)))\n                        (a, b) (Suc (Suc (Suc 0)))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc 0)))\n                        (Suc (Suc (Suc 0))) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc 0))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc 0))),\n         E, Suc (Suc (Suc (Suc 0))), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0)))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc 0))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (a, b) (Suc (Suc (Suc (Suc 0))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0)))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc 0))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (a, b) (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (Suc (Suc (Suc (Suc 0)))) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), Suc (Suc (Suc 0)),\n         Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 22 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc 0) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc 0),\n         E, Suc (Suc 0), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc 0),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (a, b) (Suc (Suc 0))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc 0))\n                             (Suc (Suc 0)) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc 0),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc 0))\n                        (a, b) (Suc (Suc 0))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc 0))\n                        (Suc (Suc 0)) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc 0)) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc 0)),\n         E, Suc (Suc (Suc 0)), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc 0)),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (a, b) (Suc (Suc (Suc 0)))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc 0)),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc 0)))\n                        (a, b) (Suc (Suc (Suc 0)))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc 0)))\n                        (Suc (Suc (Suc 0))) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc 0))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc 0))),\n         E, Suc (Suc (Suc (Suc 0))), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0)))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc 0))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (a, b) (Suc (Suc (Suc (Suc 0))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0)))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc 0))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (a, b) (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (Suc (Suc (Suc (Suc 0)))) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), Suc (Suc (Suc 0)),\n         Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 21 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (20 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc 0)) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc 0)),\n         E, Suc (Suc (Suc 0)), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc 0)),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (a, b) (Suc (Suc (Suc 0)))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc 0)))\n                             (Suc (Suc (Suc 0))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc 0)),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc 0)))\n                        (a, b) (Suc (Suc (Suc 0)))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc 0)))\n                        (Suc (Suc (Suc 0))) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc 0))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc 0))),\n         E, Suc (Suc (Suc (Suc 0))), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0)))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc 0))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (a, b) (Suc (Suc (Suc (Suc 0))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0)))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc 0))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (a, b) (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (Suc (Suc (Suc (Suc 0)))) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), Suc (Suc (Suc 0)),\n         Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 20 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc 0))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc 0))),\n         E, Suc (Suc (Suc (Suc 0))), Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0)))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc 0))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (a, b) (Suc (Suc (Suc (Suc 0))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc 0))))\n                             (Suc (Suc (Suc (Suc 0)))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc 0))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (a, b) (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc 0))))\n                        (Suc (Suc (Suc (Suc 0)))) []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), Suc (Suc (Suc 0)),\n         Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc 0)))))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc 0)))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 19 subgoals...", "apply (fastforce simp add:\n    relevant_entries_def is_relevant_entry_def sees_field_def list_class_def\n    distinct_classes intro: Fields.intros)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc 0)))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc 0)))),\n         E, Suc (Suc (Suc (Suc (Suc 0)))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc 0)))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc 0)))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc 0)))))\n                             (Suc (Suc (Suc (Suc (Suc 0))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc 0)))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc 0)))))\n                        (Suc (Suc (Suc (Suc (Suc 0)))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), Suc (Suc (Suc 0)),\n         Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 18 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc 0))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc 0))))), Suc (Suc (Suc 0)), Void, a,\n         b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (a, b)\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc (Suc (Suc (Suc (Suc (Suc 0))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc 0))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc 0))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), Suc (Suc (Suc 0)),\n         Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 17 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))), Suc (Suc (Suc 0)),\n         Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0)))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc 0))))))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 16 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    0))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 15 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc 0)))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc 0)))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    0))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc 0)))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0))))))))))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 14 subgoals...", "apply (fastforce simp add:\n    relevant_entries_def is_relevant_entry_def sees_field_def list_class_def\n    distinct_classes intro: Fields.intros)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc 0))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    0))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc 0)))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 13 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc 0)))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0)))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    0))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc 0)))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0)))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  0))))))))))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 12 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc 0))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    0))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc 0)))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0)))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n 0))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))\nA total of 11 subgoals...", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0)))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0)))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    0))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc 0)))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0)))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n 0))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0)))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0)))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 10. \\<And>pc a b.\n        \\<lfloor>(a, b)\\<rfloor> =\n        [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Integer, Clist],\n                   [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n         \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n        Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))) \\<longrightarrow>\n        app\\<^sub>i\n         ([New list_name, Store 0, Load 0, Push (Intg 1),\n           Putfield val_name list_name, New list_name, Store (Suc 0),\n           Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n           New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n           Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n           Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n           Invoke append_name (Suc 0), Return] !\n          Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n          E, Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n          Suc (Suc (Suc 0)), Void, a, b) \\<and>\n        (\\<forall>x\\<in>set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))))))))))\n                              []).\n            case x of\n            (f, t, C, ab) \\<Rightarrow>\n              (\\<exists>a aa b.\n                  class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (case ab of\n               (h, d) \\<Rightarrow>\n                 d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>x.\n                            (x, \\<lfloor>eff\\<^sub>i\n    ([New list_name, Store 0, Load 0, Push (Intg 1),\n      Putfield val_name list_name, New list_name, Store (Suc 0),\n      Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n      New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n      Putfield val_name list_name, Load 0, Load (Suc 0),\n      Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n      Invoke append_name (Suc 0), Return] !\n     Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n     E, a, b)\\<rfloor>)) `\n                        set (succs\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))))))))))\n                              (a, b)\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))))))))))) \\<union>\n                        (\\<lambda>x.\n                            case x of\n                            (f, t, C, h, d) \\<Rightarrow>\n                              (h, \\<lfloor>(Class C # drop (length a - d) a,\n      b)\\<rfloor>)) `\n                        set (relevant_entries E\n                              ([New list_name, Store 0, Load 0,\n                                Push (Intg 1), Putfield val_name list_name,\n                                New list_name, Store (Suc 0), Load (Suc 0),\n                                Push (Intg 2), Putfield val_name list_name,\n                                New list_name, Store (Suc (Suc 0)),\n                                Load (Suc (Suc 0)), Push (Intg 3),\n                                Putfield val_name list_name, Load 0,\n                                Load (Suc 0), Invoke append_name (Suc 0),\n                                Pop, Load 0, Load (Suc (Suc 0)),\n                                Invoke append_name (Suc 0), Return] !\n                               Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))))))))))\n                              (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))))))))))\n                              []).\n            case x of\n            (pc', \\<tau>') \\<Rightarrow>\n              pc'\n              < Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc 0))))))))))))))))))))))) \\<and>\n        (\\<forall>aa ba.\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       (x, \\<lfloor>eff\\<^sub>i\n                                     ([New list_name, Store 0, Load 0,\n Push (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\n Load (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\n Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n Putfield val_name list_name, Load 0, Load (Suc 0),\n Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n Invoke append_name (Suc 0), Return] !\nSuc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\nE, a, b)\\<rfloor>)) `\n                   set (succs\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                         (a, b)\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))))))))))) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa) \\<and>\n            ((aa, ba)\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C # drop (length a - d) a,\n b)\\<rfloor>)) `\n                   set (relevant_entries E\n                         ([New list_name, Store 0, Load 0, Push (Intg 1),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                           Putfield val_name list_name, New list_name,\n                           Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                           Push (Intg 3), Putfield val_name list_name,\n                           Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                           Pop, Load 0, Load (Suc (Suc 0)),\n                           Invoke append_name (Suc 0), Return] !\n                          Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                         (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                         []) \\<longrightarrow>\n             E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n           [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\naa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc 0))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    0))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc 0)))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0)))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n 0))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0)))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0)))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 9. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0))))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply (fastforce simp add:\n    relevant_entries_def is_relevant_entry_def sees_field_def list_class_def\n    distinct_classes intro: Fields.intros)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0)))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc 0)))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    0))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc 0)))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0)))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n 0))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0)))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0)))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 8. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0))))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    0))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc 0))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc 0)))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0)))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n 0))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0)))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0)))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 7. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0))))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc 0)))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0)))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n 0))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0)))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0)))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 6. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0))))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply (fastforce simp add:\n    relevant_entries_def is_relevant_entry_def list_class_def\n    distinct_classes Method_def intro: Methods.intros)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc 0))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0)))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n 0))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0)))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0)))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 5. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0))))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc 0)))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0)))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n 0))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0)))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0)))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 4. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0))))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc 0))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n 0))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0)))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0)))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 3. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0))))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0)))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc 0)))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0)))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0)))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))\n 2. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0))))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply (fastforce simp add:\n    relevant_entries_def is_relevant_entry_def list_class_def\n    distinct_classes Method_def intro: Methods.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc a b.\n       \\<lfloor>(a, b)\\<rfloor> =\n       [\\<lfloor>([], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Integer, Clist],\n                  [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n        \\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n       Suc (Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))) \\<longrightarrow>\n       app\\<^sub>i\n        ([New list_name, Store 0, Load 0, Push (Intg 1),\n          Putfield val_name list_name, New list_name, Store (Suc 0),\n          Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n          New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n          Push (Intg 3), Putfield val_name list_name, Load 0, Load (Suc 0),\n          Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n          Invoke append_name (Suc 0), Return] !\n         Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         E, Suc (Suc (Suc (Suc (Suc (Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n         Suc (Suc (Suc 0)), Void, a, b) \\<and>\n       (\\<forall>x\\<in>set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (f, t, C, ab) \\<Rightarrow>\n             (\\<exists>a aa b.\n                 class E C = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n             (case ab of\n              (h, d) \\<Rightarrow>\n                d \\<le> length a \\<and> d < Suc (Suc (Suc 0)))) \\<and>\n       (\\<forall>x\\<in>(\\<lambda>x.\n                           (x, \\<lfloor>eff\\<^sub>i\n   ([New list_name, Store 0, Load 0, Push (Intg 1),\n     Putfield val_name list_name, New list_name, Store (Suc 0),\n     Load (Suc 0), Push (Intg 2), Putfield val_name list_name,\n     New list_name, Store (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\n     Putfield val_name list_name, Load 0, Load (Suc 0),\n     Invoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\n     Invoke append_name (Suc 0), Return] !\n    Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n    E, a, b)\\<rfloor>)) `\n                       set (succs\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (a, b)\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))) \\<union>\n                       (\\<lambda>x.\n                           case x of\n                           (f, t, C, h, d) \\<Rightarrow>\n                             (h, \\<lfloor>(Class C # drop (length a - d) a,\n     b)\\<rfloor>)) `\n                       set (relevant_entries E\n                             ([New list_name, Store 0, Load 0,\n                               Push (Intg 1), Putfield val_name list_name,\n                               New list_name, Store (Suc 0), Load (Suc 0),\n                               Push (Intg 2), Putfield val_name list_name,\n                               New list_name, Store (Suc (Suc 0)),\n                               Load (Suc (Suc 0)), Push (Intg 3),\n                               Putfield val_name list_name, Load 0,\n                               Load (Suc 0), Invoke append_name (Suc 0),\n                               Pop, Load 0, Load (Suc (Suc 0)),\n                               Invoke append_name (Suc 0), Return] !\n                              Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc (Suc 0))))))))))))))))))))))\n                             []).\n           case x of\n           (pc', \\<tau>') \\<Rightarrow>\n             pc'\n             < Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc 0))))))))))))))))))))))) \\<and>\n       (\\<forall>aa ba.\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      (x, \\<lfloor>eff\\<^sub>i\n                                    ([New list_name, Store 0, Load 0,\nPush (Intg 1), Putfield val_name list_name, New list_name, Store (Suc 0),\nLoad (Suc 0), Push (Intg 2), Putfield val_name list_name, New list_name,\nStore (Suc (Suc 0)), Load (Suc (Suc 0)), Push (Intg 3),\nPutfield val_name list_name, Load 0, Load (Suc 0),\nInvoke append_name (Suc 0), Pop, Load 0, Load (Suc (Suc 0)),\nInvoke append_name (Suc 0), Return] !\n                                     Suc\n(Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n    (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc 0))))))))))))))))))))),\n                                     E, a, b)\\<rfloor>)) `\n                  set (succs\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (a, b)\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n (Suc (Suc 0))))))))))))))))))))))) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa) \\<and>\n           ((aa, ba)\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length a - d) a,\nb)\\<rfloor>)) `\n                  set (relevant_entries E\n                        ([New list_name, Store 0, Load 0, Push (Intg 1),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc 0), Load (Suc 0), Push (Intg 2),\n                          Putfield val_name list_name, New list_name,\n                          Store (Suc (Suc 0)), Load (Suc (Suc 0)),\n                          Push (Intg 3), Putfield val_name list_name,\n                          Load 0, Load (Suc 0), Invoke append_name (Suc 0),\n                          Pop, Load 0, Load (Suc (Suc 0)),\n                          Invoke append_name (Suc 0), Return] !\n                         Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        (Suc (Suc (Suc (Suc\n   (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc\n  (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc (Suc 0))))))))))))))))))))))\n                        []) \\<longrightarrow>\n            E \\<turnstile> ba \\<le>' [\\<lfloor>([],\n          [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Ctest, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, Err, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, Err])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Integer, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Clist, Clist], [OK Clist, OK Clist, OK Clist])\\<rfloor>,\n\\<lfloor>([Void], [OK Clist, OK Clist, OK Clist])\\<rfloor>] !\n                                     aa))", "apply (simp add: relevant_entries_def is_relevant_entry_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma wf_md'E:\n  \"\\<lbrakk> wf_prog wf_md P; \n     \\<And>C S fs ms m.\\<lbrakk>(C,S,fs,ms) \\<in> set P; m \\<in> set ms\\<rbrakk> \\<Longrightarrow> wf_md' P C m \\<rbrakk>\n  \\<Longrightarrow> wf_prog wf_md' P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C S fs ms m.\n        \\<lbrakk>(C, S, fs, ms) \\<in> set P; m \\<in> set ms\\<rbrakk>\n        \\<Longrightarrow> wf_md' P C m\\<rbrakk>\n    \\<Longrightarrow> wf_prog wf_md' P", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C S fs ms m.\n        \\<lbrakk>(C, S, fs, ms) \\<in> set P; m \\<in> set ms\\<rbrakk>\n        \\<Longrightarrow> wf_md' P C m\\<rbrakk>\n    \\<Longrightarrow> wf_prog wf_md' P", "apply (simp add: wf_prog_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_syscls P \\<and>\n             (\\<forall>c\\<in>set P. wf_cdecl wf_md P c) \\<and>\n             distinct_fst P;\n     \\<And>C S fs ms m.\n        \\<lbrakk>(C, S, fs, ms) \\<in> set P; m \\<in> set ms\\<rbrakk>\n        \\<Longrightarrow> wf_md' P C m\\<rbrakk>\n    \\<Longrightarrow> Ball (set P) (wf_cdecl wf_md' P)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab b.\n       \\<lbrakk>\\<And>C S fs ms a aa ab b.\n                   \\<lbrakk>(C, S, fs, ms) \\<in> set P;\n                    (a, aa, ab, b) \\<in> set ms\\<rbrakk>\n                   \\<Longrightarrow> wf_md' P C (a, aa, ab, b);\n        (a, aa, ab, b) \\<in> set P; wf_syscls P;\n        \\<forall>x\\<in>set P. wf_cdecl wf_md P x; distinct_fst P\\<rbrakk>\n       \\<Longrightarrow> wf_cdecl wf_md' P (a, aa, ab, b)", "apply (simp add: wf_cdecl_def wf_mdecl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab b.\n       \\<lbrakk>\\<And>C S fs ms a aa aaa b.\n                   \\<lbrakk>(C, S, fs, ms) \\<in> set P;\n                    (a, aa, aaa, b) \\<in> set ms\\<rbrakk>\n                   \\<Longrightarrow> wf_md' P C (a, aa, aaa, b);\n        (a, aa, ab, b) \\<in> set P; wf_syscls P;\n        \\<forall>x\\<in>set P.\n           case x of\n           (C, D, fs, ms) \\<Rightarrow>\n             (\\<forall>f\\<in>set fs. wf_fdecl P f) \\<and>\n             distinct_fst fs \\<and>\n             (\\<forall>m\\<in>set ms.\n                 case m of\n                 (M, Ts, ab) \\<Rightarrow>\n                   Ball (set Ts) (is_type P) \\<and>\n                   (case ab of\n                    (T, mb) \\<Rightarrow>\n                      is_type P T \\<and> wf_md P C (M, Ts, T, mb))) \\<and>\n             distinct_fst ms \\<and>\n             (C \\<noteq> Object \\<longrightarrow>\n              (\\<exists>a aa b.\n                  class P D = \\<lfloor>(a, aa, b)\\<rfloor>) \\<and>\n              (D, C) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n              (\\<forall>x\\<in>set ms.\n                  case x of\n                  (M, Ts, T, m) \\<Rightarrow>\n                    \\<forall>D' Ts' T'.\n                       (\\<exists>m'.\n                           P \\<turnstile> D sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                       P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                       subtype P T T'));\n        distinct_fst P\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>set ab. wf_fdecl P x) \\<and>\n                         distinct_fst ab \\<and>\n                         (\\<forall>x\\<in>set b.\n                             case x of\n                             (M, Ts, ab) \\<Rightarrow>\n                               (\\<forall>x\\<in>set Ts. is_type P x) \\<and>\n                               (case ab of\n                                (T, mb) \\<Rightarrow>\n                                  is_type P T \\<and>\n                                  wf_md' P a (M, Ts, T, mb))) \\<and>\n                         distinct_fst b \\<and>\n                         (a \\<noteq> Object \\<longrightarrow>\n                          (\\<exists>a aaa b.\n                              class P aa =\n                              \\<lfloor>(a, aaa, b)\\<rfloor>) \\<and>\n                          (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n                          (\\<forall>x\\<in>set b.\n                              case x of\n                              (M, Ts, T, m) \\<Rightarrow>\n                                \\<forall>D' Ts' T'.\n                                   (\\<exists>m'.\n P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                                   P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                                   subtype P T T'))", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text \\<open>The whole program is welltyped:\\<close>"], ["", "definition Phi :: ty\\<^sub>P (\"\\<Phi>\")\nwhere\n  \"\\<Phi> C mn \\<equiv> if C = test_name \\<and> mn = makelist_name then \\<phi>\\<^sub>m else \n             if C = list_name \\<and> mn = append_name then \\<phi>\\<^sub>a else []\""], ["", "lemma wf_prog:\n  \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> E", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> E", "apply (unfold wf_jvm_prog_phi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog\n     (\\<lambda>P C (M, Ts, T\\<^sub>r, mxs, mxl\\<^sub>0, is, xt).\n         wt_method P C Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt (\\<Phi> C M))\n     E", "apply (rule wf_md'E [OF wf_struct])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C S fs ms m.\n       \\<lbrakk>(C, S, fs, ms) \\<in> set E; m \\<in> set ms\\<rbrakk>\n       \\<Longrightarrow> case m of\n                         (M, Ts, T\\<^sub>r, mxs, mxl\\<^sub>0, is,\n                          xt) \\<Rightarrow>\n                           wt_method E C Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt\n                            (\\<Phi> C M)", "apply (simp add: E_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C S fs ms m.\n       \\<lbrakk>C = list_name \\<and> (S, fs, ms) = list_class \\<or>\n                C = test_name \\<and> (S, fs, ms) = test_class \\<or>\n                (C, S, fs, ms) \\<in> set SystemClasses;\n        m \\<in> set ms\\<rbrakk>\n       \\<Longrightarrow> case m of\n                         (M, Ts, T\\<^sub>r, mxs, mxl\\<^sub>0, is,\n                          xt) \\<Rightarrow>\n                           wt_method\n                            (SystemClasses @\n                             [(list_name, list_class),\n                              (test_name, test_class)])\n                            C Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt\n                            (\\<Phi> C M)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C S fs ms a aa ab ac ad ae b.\n       \\<lbrakk>C = list_name \\<and> (S, fs, ms) = list_class \\<or>\n                C = test_name \\<and> (S, fs, ms) = test_class \\<or>\n                (C, S, fs, ms) \\<in> set SystemClasses;\n        (a, aa, ab, ac, ad, ae, b) \\<in> set ms\\<rbrakk>\n       \\<Longrightarrow> wt_method\n                          (SystemClasses @\n                           [(list_name, list_class),\n                            (test_name, test_class)])\n                          C aa ab ac ad ae b (\\<Phi> C a)", "apply (fold E_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C S fs ms a aa ab ac ad ae b.\n       \\<lbrakk>C = list_name \\<and> (S, fs, ms) = list_class \\<or>\n                C = test_name \\<and> (S, fs, ms) = test_class \\<or>\n                (C, S, fs, ms) \\<in> set SystemClasses;\n        (a, aa, ab, ac, ad, ae, b) \\<in> set ms\\<rbrakk>\n       \\<Longrightarrow> wt_method E C aa ab ac ad ae b (\\<Phi> C a)", "apply (simp add: system_defs class_defs Phi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C S fs ms a aa ab ac ad ae b.\n       \\<lbrakk>C = list_name \\<and>\n                S = Object \\<and>\n                fs = [(val_name, Integer), (next_name, Clist)] \\<and>\n                ms =\n                [(append_name, [Clist], Void, 3, 0, append_ins,\n                  [(Suc 0, 2, NullPointer, 7, 0)])] \\<or>\n                C = test_name \\<and>\n                S = Object \\<and>\n                fs = [] \\<and>\n                ms =\n                [(makelist_name, [], Void, 3, 2, make_list_ins, [])] \\<or>\n                C = Object \\<and>\n                S = undefined \\<and> fs = [] \\<and> ms = [] \\<or>\n                C = NullPointer \\<and>\n                S = Object \\<and> fs = [] \\<and> ms = [] \\<or>\n                C = ClassCast \\<and>\n                S = Object \\<and> fs = [] \\<and> ms = [] \\<or>\n                C = OutOfMemory \\<and>\n                S = Object \\<and> fs = [] \\<and> ms = [];\n        (a, aa, ab, ac, ad, ae, b) \\<in> set ms\\<rbrakk>\n       \\<Longrightarrow> (C = list_name \\<and>\n                          a = append_name \\<longrightarrow>\n                          (list_name = test_name \\<and>\n                           append_name = makelist_name \\<longrightarrow>\n                           wt_method E test_name aa ab ac ad ae b\n                            \\<phi>\\<^sub>m) \\<and>\n                          ((list_name = test_name \\<longrightarrow>\n                            append_name \\<noteq>\n                            makelist_name) \\<longrightarrow>\n                           wt_method E list_name aa ab ac ad ae b\n                            \\<phi>\\<^sub>a)) \\<and>\n                         ((C = list_name \\<longrightarrow>\n                           a \\<noteq> append_name) \\<longrightarrow>\n                          (C = test_name \\<and>\n                           a = makelist_name \\<longrightarrow>\n                           wt_method E test_name aa ab ac ad ae b\n                            \\<phi>\\<^sub>m) \\<and>\n                          ((C = test_name \\<longrightarrow>\n                            a \\<noteq> makelist_name) \\<longrightarrow>\n                           wt_method E C aa ab ac ad ae b []))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_name = test_name; append_name = makelist_name\\<rbrakk>\n    \\<Longrightarrow> wt_method E test_name [Ctest] Void 3 0 append_ins\n                       [(Suc 0, 2, NullPointer, 7, 0)] \\<phi>\\<^sub>m", "apply (simp add: distinct_classes)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "subsection \"Conformance\""], ["", "text \\<open>Execution of the program will be typesafe, because its\n  start state conforms to the welltyping:\\<close>"], ["", "lemma \"E,\\<Phi> \\<turnstile> start_state E test_name makelist_name \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E,\\<Phi> |- start_state E test_name makelist_name [ok]", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. E,\\<Phi> |- start_state E test_name makelist_name [ok]", "apply (rule BV_correct_initial)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> E\n 2. E \\<turnstile> test_name sees makelist_name: []\\<rightarrow>?T = ?m in test_name", "apply (rule wf_prog)"], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<turnstile> test_name sees makelist_name: []\\<rightarrow>?T = ?m in test_name", "apply (fastforce simp add: test_class_def distinct_classes Method_def intro: Methods.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "subsection \"Example for code generation: inferring method types\""], ["", "definition test_kil :: \"jvm_prog \\<Rightarrow> cname \\<Rightarrow> ty list \\<Rightarrow> ty \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> \n             ex_table \\<Rightarrow> instr list \\<Rightarrow> ty\\<^sub>i' err list\"\nwhere\n  \"test_kil G C pTs rT mxs mxl et instr \\<equiv>\n   (let first  = Some ([],(OK (Class C))#(map OK pTs)@(replicate mxl Err));\n        start  = OK first#(replicate (size instr - 1) (OK None))\n    in  kiljvm G mxs (1+size pTs+mxl) rT instr et start)\""], ["", "lemma [code]:\n  \"unstables r step ss = \n   fold (\\<lambda>p A. if \\<not>stable r step ss p then insert p A else A) [0..<size ss] {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "have \"unstables r step ss = (UN p:{..<size ss}. if \\<not>stable r step ss p then {p} else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unstables r step ss =\n    (\\<Union>p<length ss. if \\<not> stable r step ss p then {p} else {})", "apply (unfold unstables_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. p < length ss \\<and> \\<not> stable r step ss p} =\n    (\\<Union>p<length ss. if \\<not> stable r step ss p then {p} else {})", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {p. p < length ss \\<and> \\<not> stable r step ss p}\n    \\<subseteq> (\\<Union>p<length ss.\n                    if \\<not> stable r step ss p then {p} else {})\n 2. (\\<Union>p<length ss. if \\<not> stable r step ss p then {p} else {})\n    \\<subseteq> {p. p < length ss \\<and> \\<not> stable r step ss p}", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p < length ss \\<and>\n                   \\<not> stable r step ss p} \\<Longrightarrow>\n       x \\<in> (\\<Union>p<length ss.\n                   if \\<not> stable r step ss p then {p} else {})\n 2. (\\<Union>p<length ss. if \\<not> stable r step ss p then {p} else {})\n    \\<subseteq> {p. p < length ss \\<and> \\<not> stable r step ss p}", "apply (erule CollectE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x < length ss \\<and> \\<not> stable r step ss x \\<Longrightarrow>\n       x \\<in> (\\<Union>p<length ss.\n                   if \\<not> stable r step ss p then {p} else {})\n 2. (\\<Union>p<length ss. if \\<not> stable r step ss p then {p} else {})\n    \\<subseteq> {p. p < length ss \\<and> \\<not> stable r step ss p}", "apply (erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x < length ss; \\<not> stable r step ss x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (\\<Union>p<length ss.\n                                     if \\<not> stable r step ss p then {p}\n                                     else {})\n 2. (\\<Union>p<length ss. if \\<not> stable r step ss p then {p} else {})\n    \\<subseteq> {p. p < length ss \\<and> \\<not> stable r step ss p}", "apply (rule UN_I)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x < length ss; \\<not> stable r step ss x\\<rbrakk>\n       \\<Longrightarrow> ?a9 x \\<in> {..<length ss}\n 2. \\<And>x.\n       \\<lbrakk>x < length ss; \\<not> stable r step ss x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (if \\<not> stable r step ss (?a9 x)\n                                  then {?a9 x} else {})\n 3. (\\<Union>p<length ss. if \\<not> stable r step ss p then {p} else {})\n    \\<subseteq> {p. p < length ss \\<and> \\<not> stable r step ss p}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x < length ss; \\<not> stable r step ss x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (if \\<not> stable r step ss x then {x}\n                                  else {})\n 2. (\\<Union>p<length ss. if \\<not> stable r step ss p then {p} else {})\n    \\<subseteq> {p. p < length ss \\<and> \\<not> stable r step ss p}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>p<length ss. if \\<not> stable r step ss p then {p} else {})\n    \\<subseteq> {p. p < length ss \\<and> \\<not> stable r step ss p}", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<Union>p<length ss.\n                   if \\<not> stable r step ss p then {p}\n                   else {}) \\<Longrightarrow>\n       x \\<in> {p. p < length ss \\<and> \\<not> stable r step ss p}", "apply (erule UN_E)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p.\n       \\<lbrakk>p \\<in> {..<length ss};\n        x \\<in> (if \\<not> stable r step ss p then {p} else {})\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {p. p < length ss \\<and>\n                                     \\<not> stable r step ss p}", "apply (case_tac \"\\<not> stable r step ss p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x p.\n       \\<lbrakk>p \\<in> {..<length ss};\n        x \\<in> (if \\<not> stable r step ss p then {p} else {});\n        \\<not> stable r step ss p\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {p. p < length ss \\<and>\n                                     \\<not> stable r step ss p}\n 2. \\<And>x p.\n       \\<lbrakk>p \\<in> {..<length ss};\n        x \\<in> (if \\<not> stable r step ss p then {p} else {});\n        \\<not> \\<not> stable r step ss p\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {p. p < length ss \\<and>\n                                     \\<not> stable r step ss p}", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  unstables r step ss =\n  (\\<Union>p<length ss. if \\<not> stable r step ss p then {p} else {})\n\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "also"], ["proof (state)\nthis:\n  unstables r step ss =\n  (\\<Union>p<length ss. if \\<not> stable r step ss p then {p} else {})\n\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "have \"\\<And>f. (UN p:{..<size ss}. f p) = Union (set (map f [0..<size ss]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<Union> (f ` {..<length ss}) =\n       \\<Union> (set (map f [0..<length ss]))", "by auto"], ["proof (state)\nthis:\n  \\<Union> (?f ` {..<length ss}) = \\<Union> (set (map ?f [0..<length ss]))\n\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "also"], ["proof (state)\nthis:\n  \\<Union> (?f ` {..<length ss}) = \\<Union> (set (map ?f [0..<length ss]))\n\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "note Sup_set_fold"], ["proof (state)\nthis:\n  Sup (set ?xs) = fold sup_class.sup ?xs bot\n\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "also"], ["proof (state)\nthis:\n  Sup (set ?xs) = fold sup_class.sup ?xs bot\n\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "note fold_map"], ["proof (state)\nthis:\n  fold ?g (map ?f ?xs) = fold (?g \\<circ> ?f) ?xs\n\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "also"], ["proof (state)\nthis:\n  fold ?g (map ?f ?xs) = fold (?g \\<circ> ?f) ?xs\n\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "have \"(\\<union>) \\<circ> (\\<lambda>p. if \\<not> stable r step ss p then {p} else {}) = \n            (\\<lambda>p A. if \\<not>stable r step ss p then insert p A else A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<union>) \\<circ>\n    (\\<lambda>p. if \\<not> stable r step ss p then {p} else {}) =\n    (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)", "by(auto simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  (\\<union>) \\<circ>\n  (\\<lambda>p. if \\<not> stable r step ss p then {p} else {}) =\n  (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "finally"], ["proof (chain)\npicking this:\n  unstables r step ss =\n  fold (\\<lambda>a b. if \\<not> stable r step ss a then insert a b else b)\n   [0..<length ss] {}", "show ?thesis"], ["proof (prove)\nusing this:\n  unstables r step ss =\n  fold (\\<lambda>a b. if \\<not> stable r step ss a then insert a b else b)\n   [0..<length ss] {}\n\ngoal (1 subgoal):\n 1. unstables r step ss =\n    fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n     [0..<length ss] {}", "."], ["proof (state)\nthis:\n  unstables r step ss =\n  fold (\\<lambda>p A. if \\<not> stable r step ss p then insert p A else A)\n   [0..<length ss] {}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition some_elem :: \"'a set \\<Rightarrow> 'a\" where [code del]:\n  \"some_elem = (%S. SOME x. x : S)\""], ["", "code_printing\n  constant some_elem \\<rightharpoonup> (SML) \"(case/ _ of/ Set/ xs/ =>/ hd/ xs)\""], ["", "text \\<open>This code setup is just a demonstration and \\emph{not} sound!\\<close>"], ["", "notepad begin"], ["proof (state)", "have \"some_elem (set [False, True]) = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. some_elem (set [False, True]) = False", "by eval"], ["proof (state)\nthis:\n  some_elem (set [False, True]) = False", "moreover"], ["proof (state)\nthis:\n  some_elem (set [False, True]) = False", "have \"some_elem (set [True, False]) = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. some_elem (set [True, False]) = True", "by eval"], ["proof (state)\nthis:\n  some_elem (set [True, False]) = True", "ultimately"], ["proof (chain)\npicking this:\n  some_elem (set [False, True]) = False\n  some_elem (set [True, False]) = True", "have False"], ["proof (prove)\nusing this:\n  some_elem (set [False, True]) = False\n  some_elem (set [True, False]) = True\n\ngoal (1 subgoal):\n 1. False", "by (simp add: some_elem_def)"], ["proof (state)\nthis:\n  False", "end"], ["", "lemma [code]:\n  \"iter f step ss w = while (\\<lambda>(ss, w). \\<not> Set.is_empty w)\n    (\\<lambda>(ss, w).\n        let p = some_elem w in propa f (step p (ss ! p)) ss (w - {p}))\n    (ss, w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iter f step ss w =\n    while (\\<lambda>(ss, w). \\<not> Set.is_empty w)\n     (\\<lambda>(ss, w).\n         let p = some_elem w in propa f (step p (ss ! p)) ss (w - {p}))\n     (ss, w)", "unfolding iter_def Set.is_empty_def some_elem_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. while (\\<lambda>(\\<tau>s, w). w \\<noteq> {})\n     (\\<lambda>(\\<tau>s, w).\n         let p = SOME p. p \\<in> w\n         in propa f (step p (\\<tau>s ! p)) \\<tau>s (w - {p}))\n     (ss, w) =\n    while (\\<lambda>(ss, w). w \\<noteq> {})\n     (\\<lambda>(ss, w).\n         let p = SOME x. x \\<in> w\n         in propa f (step p (ss ! p)) ss (w - {p}))\n     (ss, w)", ".."], ["", "lemma JVM_sup_unfold [code]:\n \"JVM_SemiType.sup S m n = lift2 (Opt.sup\n       (Product.sup (Listn.sup (SemiType.sup S))\n         (\\<lambda>x y. OK (map2 (lift2 (SemiType.sup S)) x y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. JVM_SemiType.sup S m n =\n    lift2\n     (Opt.sup\n       (Product.sup (Listn.sup (SemiType.sup S))\n         (\\<lambda>x y. OK (map2 (lift2 (SemiType.sup S)) x y))))", "apply (unfold JVM_SemiType.sup_def JVM_SemiType.sl_def Opt.esl_def Err.sl_def\n         stk_esl_def loc_sl_def Product.esl_def  \n         Listn.sl_def upto_esl_def SemiType.esl_def Err.esl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (case case (case case (types S, subtype S, SemiType.sup S) of\n                              (A, r, f) \\<Rightarrow>\n                                (\\<Union> {list n A |n. n \\<le> m},\n                                 Listn.le r, Listn.sup f) of\n                         (A, r\\<^sub>A, f\\<^sub>A) \\<Rightarrow>\n                           \\<lambda>(B, r\\<^sub>B, f\\<^sub>B).\n                              (A \\<times> B, Product.le r\\<^sub>A r\\<^sub>B,\n                               Product.sup f\\<^sub>A f\\<^sub>B))\n                         (case case case (types S, subtype S,\n    SemiType.sup S) of\n                                    (A, r, f) \\<Rightarrow>\n(err A, Err.le r, lift2 f) of\n                               (A, r, f) \\<Rightarrow>\n                                 (list n A, Listn.le r, map2 f) of\n                          (A, r, f) \\<Rightarrow>\n                            (A, r, \\<lambda>x y. OK (f x y))) of\n                   (A, r, f) \\<Rightarrow> (opt A, Opt.le r, Opt.sup f) of\n              (A, r, f) \\<Rightarrow> (err A, Err.le r, lift2 f))) =\n    lift2\n     (Opt.sup\n       (Product.sup (Listn.sup (SemiType.sup S))\n         (\\<lambda>x y. OK (map2 (lift2 (SemiType.sup S)) x y))))", "by simp"], ["", "lemmas [code] = SemiType.sup_def [unfolded exec_lub_def] JVM_le_unfold"], ["", "lemmas [code] = lesub_def plussub_def"], ["", "lemma [code]:\n  \"is_refT T = (case T of NT \\<Rightarrow> True | Class C \\<Rightarrow> True | _ \\<Rightarrow> False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_refT T =\n    (case T of NT \\<Rightarrow> True | Class C \\<Rightarrow> True\n     | _ \\<Rightarrow> False)", "by (simp add: is_refT_def split: ty.split)"], ["", "declare app\\<^sub>i.simps [code]"], ["", "lemma [code]:\n  \"app\\<^sub>i (Getfield F C, P, pc, mxs, T\\<^sub>r, (T#ST, LT)) = \n    Predicate.holds (Predicate.bind (sees_field_i_i_i_o_i P C F C) (\\<lambda>T\\<^sub>f. if P \\<turnstile> T \\<le> Class C then Predicate.single () else bot))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. app\\<^sub>i (Getfield F C, P, pc, mxs, T\\<^sub>r, T # ST, LT) =\n    Predicate.holds\n     (Predicate.bind (sees_field_i_i_i_o_i P C F C)\n       (\\<lambda>T\\<^sub>f.\n           if subtype P T (Class C) then Predicate.single () else bot))", "by(auto simp add: Predicate.holds_eq intro: sees_field_i_i_i_o_iI elim: sees_field_i_i_i_o_iE)"], ["", "lemma [code]:\n  \"app\\<^sub>i (Putfield F C, P, pc, mxs, T\\<^sub>r, (T\\<^sub>1#T\\<^sub>2#ST, LT)) = \n     Predicate.holds (Predicate.bind (sees_field_i_i_i_o_i P C F C) (\\<lambda>T\\<^sub>f. if P \\<turnstile> T\\<^sub>2 \\<le> (Class C) \\<and> P \\<turnstile> T\\<^sub>1 \\<le> T\\<^sub>f then Predicate.single () else bot))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. app\\<^sub>i\n     (Putfield F C, P, pc, mxs, T\\<^sub>r, T\\<^sub>1 # T\\<^sub>2 # ST, LT) =\n    Predicate.holds\n     (Predicate.bind (sees_field_i_i_i_o_i P C F C)\n       (\\<lambda>T\\<^sub>f.\n           if subtype P T\\<^sub>2 (Class C) \\<and>\n              subtype P T\\<^sub>1 T\\<^sub>f\n           then Predicate.single () else bot))", "by(auto simp add: Predicate.holds_eq simp del: eval_bind split: if_split_asm elim!: sees_field_i_i_i_o_iE Predicate.bindE intro: Predicate.bindI sees_field_i_i_i_o_iI)"], ["", "lemma [code]:\n  \"app\\<^sub>i (Invoke M n, P, pc, mxs, T\\<^sub>r, (ST,LT)) =\n    (n < length ST \\<and> \n    (ST!n \\<noteq> NT \\<longrightarrow>\n      (case ST!n of\n         Class C \\<Rightarrow> Predicate.holds (Predicate.bind (Method_i_i_i_o_o_o_o P C M) (\\<lambda>(Ts, T, m, D). if P \\<turnstile> rev (take n ST) [\\<le>] Ts then Predicate.single () else bot))\n       | _ \\<Rightarrow> False)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. app\\<^sub>i (Invoke M n, P, pc, mxs, T\\<^sub>r, ST, LT) =\n    (n < length ST \\<and>\n     (ST ! n \\<noteq> NT \\<longrightarrow>\n      (case ST ! n of\n       Class C \\<Rightarrow>\n         Predicate.holds\n          (Predicate.bind (Method_i_i_i_o_o_o_o P C M)\n            (\\<lambda>(Ts, T, m, D).\n                if P \\<turnstile> rev (take n ST) [\\<le>] Ts\n                then Predicate.single () else bot))\n       | _ \\<Rightarrow> False)))", "by (fastforce simp add: Predicate.holds_eq simp del: eval_bind split: ty.split_asm if_split_asm intro: bindI Method_i_i_i_o_o_o_oI elim!: bindE Method_i_i_i_o_o_o_oE)"], ["", "lemmas [code] =\n  SemiType.sup_def [unfolded exec_lub_def]\n  widen.equation\n  is_relevant_class.simps"], ["", "definition test1 where\n  \"test1 = test_kil E list_name [Class list_name] Void 3 0\n    [(Suc 0, 2, NullPointer, 7, 0)] append_ins\""], ["", "definition test2 where\n  \"test2 = test_kil E test_name [] Void 3 2 [] make_list_ins\""], ["", "definition test3 where \"test3 = \\<phi>\\<^sub>a\""], ["", "definition test4 where \"test4 = \\<phi>\\<^sub>m\""], ["", "ML_val \\<open>\n  if @{code test1} = @{code map} @{code OK} @{code test3} then () else error \"wrong result\";\n  if @{code test2} = @{code map} @{code OK} @{code test4} then () else error \"wrong result\" \n\\<close>"], ["", "end"]]}