{"file_name": "/home/qj213/afp-2021-10-22/thys/Jinja/Common/Objects.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jinja", "problem_names": ["lemma [simp]: \"obj_ty (C,fs) = Class C\"", "lemma new_Addr_SomeD:\n  \"new_Addr h = Some a \\<Longrightarrow> h a = None\"", "lemma [simp]: \"(typeof\\<^bsub>h\\<^esub> v = Some Boolean) = (\\<exists>b. v = Bool b)\"", "lemma [simp]: \"(typeof\\<^bsub>h\\<^esub> v = Some Integer) = (\\<exists>i. v = Intg i)\"", "lemma [simp]: \"(typeof\\<^bsub>h\\<^esub> v = Some NT) = (v = Null)\"", "lemma [simp]: \"(typeof\\<^bsub>h\\<^esub> v = Some(Class C)) = (\\<exists>a fs. v = Addr a \\<and> h a = Some(C,fs))\"", "lemma [simp]: \"h a = Some(C,fs) \\<Longrightarrow> typeof\\<^bsub>(h(a\\<mapsto>(C,fs')))\\<^esub> v = typeof\\<^bsub>h\\<^esub> v\"", "lemma typeof_lit_typeof:\n  \"typeof v = Some T \\<Longrightarrow> typeof\\<^bsub>h\\<^esub> v = Some T\"", "lemma typeof_lit_is_type: \n  \"typeof v = Some T \\<Longrightarrow> is_type P T\"", "lemma hextI: \"\\<forall>a C fs. h a = Some(C,fs) \\<longrightarrow> (\\<exists>fs'. h' a = Some(C,fs')) \\<Longrightarrow> h \\<unlhd> h'\"", "lemma hext_objD: \"\\<lbrakk> h \\<unlhd> h'; h a = Some(C,fs) \\<rbrakk> \\<Longrightarrow> \\<exists>fs'. h' a = Some(C,fs')\"", "lemma hext_refl [iff]: \"h \\<unlhd> h\"", "lemma hext_new [simp]: \"h a = None \\<Longrightarrow> h \\<unlhd> h(a\\<mapsto>x)\"", "lemma hext_trans: \"\\<lbrakk> h \\<unlhd> h'; h' \\<unlhd> h'' \\<rbrakk> \\<Longrightarrow> h \\<unlhd> h''\"", "lemma hext_upd_obj: \"h a = Some (C,fs) \\<Longrightarrow> h \\<unlhd> h(a\\<mapsto>(C,fs'))\"", "lemma hext_typeof_mono: \"\\<lbrakk> h \\<unlhd> h'; typeof\\<^bsub>h\\<^esub> v = Some T \\<rbrakk> \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = Some T\"", "lemma new_Addr_code_code [code]:\n  \"new_Addr h = gen_new_Addr h 0\"", "lemma gen_new_Addr_code [code]:\n  \"gen_new_Addr h n = (if h n = None then Some n else gen_new_Addr h (Suc n))\""], "translations": [["", "lemma [simp]: \"obj_ty (C,fs) = Class C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obj_ty (C, fs) = Class C", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. obj_ty (C, fs) = Class C", "by (simp add: obj_ty_def)"], ["", "(*>*)"], ["", "subsection\\<open>Heap\\<close>"], ["", "type_synonym heap  = \"addr \\<rightharpoonup> obj\""], ["", "abbreviation\n  cname_of :: \"heap \\<Rightarrow> addr \\<Rightarrow> cname\" where\n  \"cname_of hp a == fst (the (hp a))\""], ["", "definition new_Addr  :: \"heap \\<Rightarrow> addr option\"\nwhere\n  \"new_Addr h  \\<equiv>  if \\<exists>a. h a = None then Some(LEAST a. h a = None) else None\""], ["", "definition cast_ok :: \"'m prog \\<Rightarrow> cname \\<Rightarrow> heap \\<Rightarrow> val \\<Rightarrow> bool\"\nwhere\n  \"cast_ok P C h v  \\<equiv>  v = Null \\<or> P \\<turnstile> cname_of h (the_Addr v) \\<preceq>\\<^sup>* C\""], ["", "definition hext :: \"heap \\<Rightarrow> heap \\<Rightarrow> bool\" (\"_ \\<unlhd> _\" [51,51] 50)\nwhere\n  \"h \\<unlhd> h'  \\<equiv>  \\<forall>a C fs. h a = Some(C,fs) \\<longrightarrow> (\\<exists>fs'. h' a = Some(C,fs'))\""], ["", "primrec typeof_h :: \"heap \\<Rightarrow> val \\<Rightarrow> ty option\"  (\"typeof\\<^bsub>_\\<^esub>\")\nwhere\n  \"typeof\\<^bsub>h\\<^esub>  Unit    = Some Void\"\n| \"typeof\\<^bsub>h\\<^esub>  Null    = Some NT\"\n| \"typeof\\<^bsub>h\\<^esub> (Bool b) = Some Boolean\"\n| \"typeof\\<^bsub>h\\<^esub> (Intg i) = Some Integer\"\n| \"typeof\\<^bsub>h\\<^esub> (Addr a) = (case h a of None \\<Rightarrow> None | Some(C,fs) \\<Rightarrow> Some(Class C))\""], ["", "lemma new_Addr_SomeD:\n  \"new_Addr h = Some a \\<Longrightarrow> h a = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_Addr h = \\<lfloor>a\\<rfloor> \\<Longrightarrow> h a = None", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. new_Addr h = \\<lfloor>a\\<rfloor> \\<Longrightarrow> h a = None", "by(fastforce simp add:new_Addr_def split:if_splits intro:LeastI)"], ["", "(*>*)"], ["", "lemma [simp]: \"(typeof\\<^bsub>h\\<^esub> v = Some Boolean) = (\\<exists>b. v = Bool b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (typeof\\<^bsub>h\\<^esub> v = \\<lfloor>Boolean\\<rfloor>) =\n    (\\<exists>b. v = Bool b)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (typeof\\<^bsub>h\\<^esub> v = \\<lfloor>Boolean\\<rfloor>) =\n    (\\<exists>b. v = Bool b)", "by(induct v) auto"], ["", "(*>*)"], ["", "lemma [simp]: \"(typeof\\<^bsub>h\\<^esub> v = Some Integer) = (\\<exists>i. v = Intg i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (typeof\\<^bsub>h\\<^esub> v = \\<lfloor>Integer\\<rfloor>) =\n    (\\<exists>i. v = Intg i)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (typeof\\<^bsub>h\\<^esub> v = \\<lfloor>Integer\\<rfloor>) =\n    (\\<exists>i. v = Intg i)", "by(cases v) auto"], ["", "(*>*)"], ["", "lemma [simp]: \"(typeof\\<^bsub>h\\<^esub> v = Some NT) = (v = Null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (typeof\\<^bsub>h\\<^esub> v = \\<lfloor>NT\\<rfloor>) = (v = Null)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (typeof\\<^bsub>h\\<^esub> v = \\<lfloor>NT\\<rfloor>) = (v = Null)", "by(cases v) auto"], ["", "(*>*)"], ["", "lemma [simp]: \"(typeof\\<^bsub>h\\<^esub> v = Some(Class C)) = (\\<exists>a fs. v = Addr a \\<and> h a = Some(C,fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (typeof\\<^bsub>h\\<^esub> v = \\<lfloor>Class C\\<rfloor>) =\n    (\\<exists>a fs. v = Addr a \\<and> h a = \\<lfloor>(C, fs)\\<rfloor>)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (typeof\\<^bsub>h\\<^esub> v = \\<lfloor>Class C\\<rfloor>) =\n    (\\<exists>a fs. v = Addr a \\<and> h a = \\<lfloor>(C, fs)\\<rfloor>)", "by(cases v) auto"], ["", "(*>*)"], ["", "lemma [simp]: \"h a = Some(C,fs) \\<Longrightarrow> typeof\\<^bsub>(h(a\\<mapsto>(C,fs')))\\<^esub> v = typeof\\<^bsub>h\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h a = \\<lfloor>(C, fs)\\<rfloor> \\<Longrightarrow>\n    typeof\\<^bsub>h(a \\<mapsto> (C, fs'))\\<^esub> v =\n    typeof\\<^bsub>h\\<^esub> v", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. h a = \\<lfloor>(C, fs)\\<rfloor> \\<Longrightarrow>\n    typeof\\<^bsub>h(a \\<mapsto> (C, fs'))\\<^esub> v =\n    typeof\\<^bsub>h\\<^esub> v", "by(induct v) (auto simp:fun_upd_apply)"], ["", "(*>*)"], ["", "text\\<open>For literal values the first parameter of @{term typeof} can be\nset to @{term Map.empty} because they do not contain addresses:\\<close>"], ["", "abbreviation\n  typeof :: \"val \\<Rightarrow> ty option\" where\n  \"typeof v == typeof_h Map.empty v\""], ["", "lemma typeof_lit_typeof:\n  \"typeof v = Some T \\<Longrightarrow> typeof\\<^bsub>h\\<^esub> v = Some T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof v = \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n    typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof v = \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n    typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>", "by(cases v) auto"], ["", "(*>*)"], ["", "lemma typeof_lit_is_type: \n  \"typeof v = Some T \\<Longrightarrow> is_type P T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof v = \\<lfloor>T\\<rfloor> \\<Longrightarrow> is_type P T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof v = \\<lfloor>T\\<rfloor> \\<Longrightarrow> is_type P T", "by (induct v) (auto simp:is_type_def)"], ["", "(*>*)"], ["", "subsection \\<open>Heap extension \\<open>\\<unlhd>\\<close>\\<close>"], ["", "lemma hextI: \"\\<forall>a C fs. h a = Some(C,fs) \\<longrightarrow> (\\<exists>fs'. h' a = Some(C,fs')) \\<Longrightarrow> h \\<unlhd> h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a C fs.\n       h a = \\<lfloor>(C, fs)\\<rfloor> \\<longrightarrow>\n       (\\<exists>fs'. h' a = \\<lfloor>(C, fs')\\<rfloor>) \\<Longrightarrow>\n    h \\<unlhd> h'", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a C fs.\n       h a = \\<lfloor>(C, fs)\\<rfloor> \\<longrightarrow>\n       (\\<exists>fs'. h' a = \\<lfloor>(C, fs')\\<rfloor>) \\<Longrightarrow>\n    h \\<unlhd> h'", "apply (unfold hext_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a C fs.\n       h a = \\<lfloor>(C, fs)\\<rfloor> \\<longrightarrow>\n       (\\<exists>fs'. h' a = \\<lfloor>(C, fs')\\<rfloor>) \\<Longrightarrow>\n    \\<forall>a C fs.\n       h a = \\<lfloor>(C, fs)\\<rfloor> \\<longrightarrow>\n       (\\<exists>fs'. h' a = \\<lfloor>(C, fs')\\<rfloor>)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma hext_objD: \"\\<lbrakk> h \\<unlhd> h'; h a = Some(C,fs) \\<rbrakk> \\<Longrightarrow> \\<exists>fs'. h' a = Some(C,fs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<unlhd> h'; h a = \\<lfloor>(C, fs)\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fs'. h' a = \\<lfloor>(C, fs')\\<rfloor>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<unlhd> h'; h a = \\<lfloor>(C, fs)\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fs'. h' a = \\<lfloor>(C, fs')\\<rfloor>", "apply (unfold hext_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a C fs.\n                h a = \\<lfloor>(C, fs)\\<rfloor> \\<longrightarrow>\n                (\\<exists>fs'. h' a = \\<lfloor>(C, fs')\\<rfloor>);\n     h a = \\<lfloor>(C, fs)\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fs'. h' a = \\<lfloor>(C, fs')\\<rfloor>", "apply (force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma hext_refl [iff]: \"h \\<unlhd> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<unlhd> h", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<unlhd> h", "apply (rule hextI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a C fs.\n       h a = \\<lfloor>(C, fs)\\<rfloor> \\<longrightarrow>\n       (\\<exists>fs'. h a = \\<lfloor>(C, fs')\\<rfloor>)", "apply (fast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma hext_new [simp]: \"h a = None \\<Longrightarrow> h \\<unlhd> h(a\\<mapsto>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h a = None \\<Longrightarrow> h \\<unlhd> h(a \\<mapsto> x)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. h a = None \\<Longrightarrow> h \\<unlhd> h(a \\<mapsto> x)", "apply (rule hextI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. h a = None \\<Longrightarrow>\n    \\<forall>aa C fs.\n       h aa = \\<lfloor>(C, fs)\\<rfloor> \\<longrightarrow>\n       (\\<exists>fs'. (h(a \\<mapsto> x)) aa = \\<lfloor>(C, fs')\\<rfloor>)", "apply (auto simp:fun_upd_apply)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma hext_trans: \"\\<lbrakk> h \\<unlhd> h'; h' \\<unlhd> h'' \\<rbrakk> \\<Longrightarrow> h \\<unlhd> h''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<unlhd> h'; h' \\<unlhd> h''\\<rbrakk>\n    \\<Longrightarrow> h \\<unlhd> h''", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<unlhd> h'; h' \\<unlhd> h''\\<rbrakk>\n    \\<Longrightarrow> h \\<unlhd> h''", "apply (rule hextI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<unlhd> h'; h' \\<unlhd> h''\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a C fs.\n                         h a = \\<lfloor>(C, fs)\\<rfloor> \\<longrightarrow>\n                         (\\<exists>fs'. h'' a = \\<lfloor>(C, fs')\\<rfloor>)", "apply (fast dest: hext_objD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma hext_upd_obj: \"h a = Some (C,fs) \\<Longrightarrow> h \\<unlhd> h(a\\<mapsto>(C,fs'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h a = \\<lfloor>(C, fs)\\<rfloor> \\<Longrightarrow>\n    h \\<unlhd> h(a \\<mapsto> (C, fs'))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. h a = \\<lfloor>(C, fs)\\<rfloor> \\<Longrightarrow>\n    h \\<unlhd> h(a \\<mapsto> (C, fs'))", "apply (rule hextI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. h a = \\<lfloor>(C, fs)\\<rfloor> \\<Longrightarrow>\n    \\<forall>aa Ca fs.\n       h aa = \\<lfloor>(Ca, fs)\\<rfloor> \\<longrightarrow>\n       (\\<exists>fs'a.\n           (h(a \\<mapsto> (C, fs'))) aa = \\<lfloor>(Ca, fs'a)\\<rfloor>)", "apply (auto simp:fun_upd_apply)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma hext_typeof_mono: \"\\<lbrakk> h \\<unlhd> h'; typeof\\<^bsub>h\\<^esub> v = Some T \\<rbrakk> \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = Some T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<unlhd> h';\n     typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<unlhd> h';\n     typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>", "apply(cases v)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>h \\<unlhd> h'; typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n     v = Unit\\<rbrakk>\n    \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>\n 2. \\<lbrakk>h \\<unlhd> h'; typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n     v = Null\\<rbrakk>\n    \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>\n 3. \\<And>x3.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Bool x3\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>\n 4. \\<And>x4.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Intg x4\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>\n 5. \\<And>x5.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Addr x5\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>h \\<unlhd> h'; typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n     v = Null\\<rbrakk>\n    \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>\n 2. \\<And>x3.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Bool x3\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>\n 3. \\<And>x4.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Intg x4\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>\n 4. \\<And>x5.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Addr x5\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x3.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Bool x3\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>\n 2. \\<And>x4.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Intg x4\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>\n 3. \\<And>x5.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Addr x5\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x4.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Intg x4\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>\n 2. \\<And>x5.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Addr x5\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x5.\n       \\<lbrakk>h \\<unlhd> h';\n        typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor>;\n        v = Addr x5\\<rbrakk>\n       \\<Longrightarrow> typeof\\<^bsub>h'\\<^esub> v = \\<lfloor>T\\<rfloor>", "apply(fastforce simp:hext_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text \\<open>Code generator setup for @{term \"new_Addr\"}\\<close>"], ["", "definition gen_new_Addr :: \"heap \\<Rightarrow> addr \\<Rightarrow> addr option\"\nwhere \"gen_new_Addr h n \\<equiv> if \\<exists>a. a \\<ge> n \\<and> h a = None then Some(LEAST a. a \\<ge> n \\<and> h a = None) else None\""], ["", "lemma new_Addr_code_code [code]:\n  \"new_Addr h = gen_new_Addr h 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_Addr h = gen_new_Addr h 0", "by(simp add: new_Addr_def gen_new_Addr_def split del: if_split cong: if_cong)"], ["", "lemma gen_new_Addr_code [code]:\n  \"gen_new_Addr h n = (if h n = None then Some n else gen_new_Addr h (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_new_Addr h n =\n    (if h n = None then \\<lfloor>n\\<rfloor> else gen_new_Addr h (Suc n))", "apply(simp add: gen_new_Addr_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a\\<ge>n. h a = None) \\<longrightarrow>\n    ((\\<exists>a\\<ge>Suc n. h a = None) \\<longrightarrow>\n     (h n = None \\<longrightarrow>\n      (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n     ((\\<exists>a b. h n = \\<lfloor>(a, b)\\<rfloor>) \\<longrightarrow>\n      (LEAST a. n \\<le> a \\<and> h a = None) =\n      (LEAST a. Suc n \\<le> a \\<and> h a = None))) \\<and>\n    ((\\<forall>a\\<ge>Suc n.\n         \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>) \\<longrightarrow>\n     (h n = None \\<longrightarrow>\n      (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n     (\\<forall>a b. h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>))", "apply(rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a\\<ge>n. h a = None \\<Longrightarrow>\n    ((\\<exists>a\\<ge>Suc n. h a = None) \\<longrightarrow>\n     (h n = None \\<longrightarrow>\n      (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n     ((\\<exists>a b. h n = \\<lfloor>(a, b)\\<rfloor>) \\<longrightarrow>\n      (LEAST a. n \\<le> a \\<and> h a = None) =\n      (LEAST a. Suc n \\<le> a \\<and> h a = None))) \\<and>\n    ((\\<forall>a\\<ge>Suc n.\n         \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>) \\<longrightarrow>\n     (h n = None \\<longrightarrow>\n      (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n     (\\<forall>a b. h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>a\\<ge>n. h a = None \\<Longrightarrow>\n    (\\<exists>a\\<ge>Suc n. h a = None) \\<longrightarrow>\n    (h n = None \\<longrightarrow>\n     (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n    ((\\<exists>a b. h n = \\<lfloor>(a, b)\\<rfloor>) \\<longrightarrow>\n     (LEAST a. n \\<le> a \\<and> h a = None) =\n     (LEAST a. Suc n \\<le> a \\<and> h a = None))\n 2. \\<exists>a\\<ge>n. h a = None \\<Longrightarrow>\n    (\\<forall>a\\<ge>Suc n.\n        \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>) \\<longrightarrow>\n    (h n = None \\<longrightarrow>\n     (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n    (\\<forall>a b. h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>)", "apply safe[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a aa.\n       \\<lbrakk>n \\<le> a; h a = None; Suc n \\<le> aa; h aa = None;\n        h n = None\\<rbrakk>\n       \\<Longrightarrow> (LEAST a. n \\<le> a \\<and> h a = None) = n\n 2. \\<And>a aa ab b.\n       \\<lbrakk>n \\<le> a; h a = None; Suc n \\<le> aa; h aa = None;\n        h n = \\<lfloor>(ab, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (LEAST a. n \\<le> a \\<and> h a = None) =\n                         (LEAST a. Suc n \\<le> a \\<and> h a = None)\n 3. \\<exists>a\\<ge>n. h a = None \\<Longrightarrow>\n    (\\<forall>a\\<ge>Suc n.\n        \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>) \\<longrightarrow>\n    (h n = None \\<longrightarrow>\n     (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n    (\\<forall>a b. h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>)", "apply(fastforce intro: Least_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa ab b.\n       \\<lbrakk>n \\<le> a; h a = None; Suc n \\<le> aa; h aa = None;\n        h n = \\<lfloor>(ab, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (LEAST a. n \\<le> a \\<and> h a = None) =\n                         (LEAST a. Suc n \\<le> a \\<and> h a = None)\n 2. \\<exists>a\\<ge>n. h a = None \\<Longrightarrow>\n    (\\<forall>a\\<ge>Suc n.\n        \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>) \\<longrightarrow>\n    (h n = None \\<longrightarrow>\n     (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n    (\\<forall>a b. h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>)", "apply(rule arg_cong[where f=Least])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa ab b.\n       \\<lbrakk>n \\<le> a; h a = None; Suc n \\<le> aa; h aa = None;\n        h n = \\<lfloor>(ab, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a. n \\<le> a \\<and> h a = None) =\n                         (\\<lambda>a. Suc n \\<le> a \\<and> h a = None)\n 2. \\<exists>a\\<ge>n. h a = None \\<Longrightarrow>\n    (\\<forall>a\\<ge>Suc n.\n        \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>) \\<longrightarrow>\n    (h n = None \\<longrightarrow>\n     (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n    (\\<forall>a b. h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>)", "apply(rule ext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa ab b ac.\n       \\<lbrakk>n \\<le> a; h a = None; Suc n \\<le> aa; h aa = None;\n        h n = \\<lfloor>(ab, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (n \\<le> ac \\<and> h ac = None) =\n                         (Suc n \\<le> ac \\<and> h ac = None)\n 2. \\<exists>a\\<ge>n. h a = None \\<Longrightarrow>\n    (\\<forall>a\\<ge>Suc n.\n        \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>) \\<longrightarrow>\n    (h n = None \\<longrightarrow>\n     (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n    (\\<forall>a b. h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>)", "apply(case_tac \"n = ac\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a aa ab b ac.\n       \\<lbrakk>n \\<le> a; h a = None; Suc n \\<le> aa; h aa = None;\n        h n = \\<lfloor>(ab, b)\\<rfloor>; n = ac\\<rbrakk>\n       \\<Longrightarrow> (n \\<le> ac \\<and> h ac = None) =\n                         (Suc n \\<le> ac \\<and> h ac = None)\n 2. \\<And>a aa ab b ac.\n       \\<lbrakk>n \\<le> a; h a = None; Suc n \\<le> aa; h aa = None;\n        h n = \\<lfloor>(ab, b)\\<rfloor>; n \\<noteq> ac\\<rbrakk>\n       \\<Longrightarrow> (n \\<le> ac \\<and> h ac = None) =\n                         (Suc n \\<le> ac \\<and> h ac = None)\n 3. \\<exists>a\\<ge>n. h a = None \\<Longrightarrow>\n    (\\<forall>a\\<ge>Suc n.\n        \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>) \\<longrightarrow>\n    (h n = None \\<longrightarrow>\n     (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n    (\\<forall>a b. h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa ab b ac.\n       \\<lbrakk>n \\<le> a; h a = None; Suc n \\<le> aa; h aa = None;\n        h n = \\<lfloor>(ab, b)\\<rfloor>; n \\<noteq> ac\\<rbrakk>\n       \\<Longrightarrow> (n \\<le> ac \\<and> h ac = None) =\n                         (Suc n \\<le> ac \\<and> h ac = None)\n 2. \\<exists>a\\<ge>n. h a = None \\<Longrightarrow>\n    (\\<forall>a\\<ge>Suc n.\n        \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>) \\<longrightarrow>\n    (h n = None \\<longrightarrow>\n     (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n    (\\<forall>a b. h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>)", "apply(auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a\\<ge>n. h a = None \\<Longrightarrow>\n    (\\<forall>a\\<ge>Suc n.\n        \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>) \\<longrightarrow>\n    (h n = None \\<longrightarrow>\n     (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n    (\\<forall>a b. h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>n \\<le> a; h a = None;\n        \\<forall>a\\<ge>Suc n.\n           \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (h n = None \\<longrightarrow>\n                          (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n                         (\\<forall>a b.\n                             h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>)", "apply(subgoal_tac \"a = n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>n \\<le> a; h a = None;\n        \\<forall>a\\<ge>Suc n.\n           \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>;\n        a = n\\<rbrakk>\n       \\<Longrightarrow> (h n = None \\<longrightarrow>\n                          (LEAST a. n \\<le> a \\<and> h a = None) = n) \\<and>\n                         (\\<forall>a b.\n                             h n \\<noteq> \\<lfloor>(a, b)\\<rfloor>)\n 2. \\<And>a.\n       \\<lbrakk>n \\<le> a; h a = None;\n        \\<forall>a\\<ge>Suc n.\n           \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a = n", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>h n = None;\n        \\<forall>a\\<ge>Suc n.\n           \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>;\n        a = n\\<rbrakk>\n       \\<Longrightarrow> (LEAST a. n \\<le> a \\<and> h a = None) = n\n 2. \\<And>a.\n       \\<lbrakk>n \\<le> a; h a = None;\n        \\<forall>a\\<ge>Suc n.\n           \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a = n", "apply(rule Least_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>h n = None;\n        \\<forall>a\\<ge>Suc n.\n           \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>;\n        a = n\\<rbrakk>\n       \\<Longrightarrow> n \\<le> n \\<and> h n = None\n 2. \\<And>a y.\n       \\<lbrakk>h n = None;\n        \\<forall>a\\<ge>Suc n.\n           \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>;\n        a = n; n \\<le> y \\<and> h y = None\\<rbrakk>\n       \\<Longrightarrow> n \\<le> y\n 3. \\<And>a.\n       \\<lbrakk>n \\<le> a; h a = None;\n        \\<forall>a\\<ge>Suc n.\n           \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a = n", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>n \\<le> a; h a = None;\n        \\<forall>a\\<ge>Suc n.\n           \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a = n", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>n \\<le> a; h a = None;\n        \\<forall>a\\<ge>Suc n.\n           \\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>;\n        a \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac x=\"a\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>n \\<le> a; h a = None; a \\<noteq> n;\n        Suc n \\<le> a \\<longrightarrow>\n        (\\<exists>aa b. h a = \\<lfloor>(aa, b)\\<rfloor>)\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}