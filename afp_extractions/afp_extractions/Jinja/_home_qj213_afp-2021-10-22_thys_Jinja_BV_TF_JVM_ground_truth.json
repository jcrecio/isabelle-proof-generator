{"file_name": "/home/qj213/afp-2021-10-22/thys/Jinja/BV/TF_JVM.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jinja", "problem_names": ["lemma (in JVM_sl) step_def_exec: \"step \\<equiv> exec P mxs T\\<^sub>r xt is\"", "lemma special_ex_swap_lemma [iff]: \n  \"(? X. (? n. X = A n & P n) & Q X) = (? n. Q(A n) & P n)\"", "lemma ex_in_list [iff]:\n  \"(\\<exists>n. ST \\<in> list n A \\<and> n \\<le> mxs) = (set ST \\<subseteq> A \\<and> size ST \\<le> mxs)\"", "lemma singleton_list: \n  \"(\\<exists>n. [Class C] \\<in> list n (types P) \\<and> n \\<le> mxs) = (is_class P C \\<and> 0 < mxs)\"", "lemma set_drop_subset:\n  \"set xs \\<subseteq> A \\<Longrightarrow> set (drop n xs) \\<subseteq> A\"", "lemma Suc_minus_minus_le:\n  \"n < mxs \\<Longrightarrow> Suc (n - (n - b)) \\<le> mxs\"", "lemma in_listE:\n  \"\\<lbrakk> xs \\<in> list n A; \\<lbrakk>size xs = n; set xs \\<subseteq> A\\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "theorem (in start_context) exec_pres_type:\n  \"pres_type step (size is) A\"", "lemma lesubstep_type_simple:\n  \"xs [\\<sqsubseteq>\\<^bsub>Product.le (=) r\\<^esub>] ys \\<Longrightarrow> set xs {\\<sqsubseteq>\\<^bsub>r\\<^esub>} set ys\"", "lemma conjI2: \"\\<lbrakk> A; A \\<Longrightarrow> B \\<rbrakk> \\<Longrightarrow> A \\<and> B\"", "lemma (in JVM_sl) eff_mono:\n  \"\\<lbrakk>wf_prog p P; pc < length is; s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t; app pc t\\<rbrakk>\n  \\<Longrightarrow> set (eff pc s) {\\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub>} set (eff pc t)\"", "lemma (in JVM_sl) bounded_step: \"bounded step (size is)\"", "theorem (in JVM_sl) step_mono:\n  \"wf_prog wf_mb P \\<Longrightarrow> mono r step (size is) A\"", "lemma (in start_context) first_in_A [iff]: \"OK first \\<in> A\"", "lemma (in JVM_sl) wt_method_def2:\n  \"wt_method P C' Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt \\<tau>s =\n  (is \\<noteq> [] \\<and> \n   size \\<tau>s = size is \\<and>\n   OK ` set \\<tau>s \\<subseteq> states P mxs mxl \\<and>\n   wt_start P C' Ts mxl\\<^sub>0 \\<tau>s \\<and> \n   wt_app_eff (sup_state_opt P) app eff \\<tau>s)\""], "translations": [["", "lemma (in JVM_sl) step_def_exec: \"step \\<equiv> exec P mxs T\\<^sub>r xt is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step \\<equiv> exec P mxs T\\<^sub>r xt is", "by (simp add: exec_def)"], ["", "lemma special_ex_swap_lemma [iff]: \n  \"(? X. (? n. X = A n & P n) & Q X) = (? n. Q(A n) & P n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>X. (\\<exists>n. X = A n \\<and> P n) \\<and> Q X) =\n    (\\<exists>n. Q (A n) \\<and> P n)", "by blast"], ["", "lemma ex_in_list [iff]:\n  \"(\\<exists>n. ST \\<in> list n A \\<and> n \\<le> mxs) = (set ST \\<subseteq> A \\<and> size ST \\<le> mxs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>n. ST \\<in> list n A \\<and> n \\<le> mxs) =\n    (set ST \\<subseteq> A \\<and> length ST \\<le> mxs)", "by (unfold list_def) auto"], ["", "lemma singleton_list: \n  \"(\\<exists>n. [Class C] \\<in> list n (types P) \\<and> n \\<le> mxs) = (is_class P C \\<and> 0 < mxs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>n. [Class C] \\<in> list n (types P) \\<and> n \\<le> mxs) =\n    (is_class P C \\<and> 0 < mxs)", "by auto"], ["", "lemma set_drop_subset:\n  \"set xs \\<subseteq> A \\<Longrightarrow> set (drop n xs) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> A \\<Longrightarrow> set (drop n xs) \\<subseteq> A", "by (auto dest: in_set_dropD)"], ["", "lemma Suc_minus_minus_le:\n  \"n < mxs \\<Longrightarrow> Suc (n - (n - b)) \\<le> mxs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < mxs \\<Longrightarrow> Suc (n - (n - b)) \\<le> mxs", "by arith"], ["", "lemma in_listE:\n  \"\\<lbrakk> xs \\<in> list n A; \\<lbrakk>size xs = n; set xs \\<subseteq> A\\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> list n A;\n     \\<lbrakk>length xs = n; set xs \\<subseteq> A\\<rbrakk>\n     \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (unfold list_def) blast"], ["", "declare is_relevant_entry_def [simp]"], ["", "declare set_drop_subset [simp]"], ["", "theorem (in start_context) exec_pres_type:\n  \"pres_type step (size is) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pres_type step (length is) A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. pres_type step (length is) A", "apply (insert wf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog p P \\<Longrightarrow> pres_type step (length is) A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog p P \\<Longrightarrow>\n    pres_type\n     (err_step (length is)\n       (\\<lambda>pc. app (is ! pc) P mxs T\\<^sub>r pc (length is) xt)\n       (\\<lambda>pc. eff (is ! pc) P pc xt))\n     (length is) (states P mxs (Suc (length Ts + mxl\\<^sub>0)))", "apply (unfold JVM_states_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog p P \\<Longrightarrow>\n    pres_type\n     (err_step (length is)\n       (\\<lambda>pc. app (is ! pc) P mxs T\\<^sub>r pc (length is) xt)\n       (\\<lambda>pc. eff (is ! pc) P pc xt))\n     (length is)\n     (err (opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))))", "apply (rule pres_type_lift)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog p P \\<Longrightarrow>\n    \\<forall>s\\<in>opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                        list (Suc (length Ts + mxl\\<^sub>0))\n                         (err (types P))).\n       \\<forall>p<length is.\n          app (is ! p) P mxs T\\<^sub>r p (length is) xt s \\<longrightarrow>\n          (\\<forall>(q, s')\\<in>set (eff (is ! p) P p xt s).\n              s' \\<in> opt (\\<Union>\n                             {list n (types P) |n. n \\<le> mxs} \\<times>\n                            list (Suc (length Ts + mxl\\<^sub>0))\n                             (err (types P))))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s pa a b.\n       \\<lbrakk>wf_prog p P;\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        pa < length is; app (is ! pa) P mxs T\\<^sub>r pa (length is) xt s;\n        (a, b) \\<in> set (eff (is ! pa) P pa xt s)\\<rbrakk>\n       \\<Longrightarrow> b \\<in> opt (\\<Union>\n {list n (types P) |n. n \\<le> mxs} \\<times>\nlist (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply (rename_tac s pc pc' s')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s pc pc' s'.\n       \\<lbrakk>wf_prog p P;\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        pc < length is; app (is ! pc) P mxs T\\<^sub>r pc (length is) xt s;\n        (pc', s') \\<in> set (eff (is ! pc) P pc xt s)\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply (case_tac s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s pc pc' s'.\n       \\<lbrakk>wf_prog p P;\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        pc < length is; app (is ! pc) P mxs T\\<^sub>r pc (length is) xt s;\n        (pc', s') \\<in> set (eff (is ! pc) P pc xt s); s = None\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        pc < length is; app (is ! pc) P mxs T\\<^sub>r pc (length is) xt s;\n        (pc', s') \\<in> set (eff (is ! pc) P pc xt s);\n        s = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s pc pc' s'.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        (pc', s') \\<in> set (eff (is ! pc) P pc xt None); s = None\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        pc < length is; app (is ! pc) P mxs T\\<^sub>r pc (length is) xt s;\n        (pc', s') \\<in> set (eff (is ! pc) P pc xt s);\n        s = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply (drule effNone)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s pc pc' s'.\n       \\<lbrakk>wf_prog p P; pc < length is; s = None; s' = None\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        pc < length is; app (is ! pc) P mxs T\\<^sub>r pc (length is) xt s;\n        (pc', s') \\<in> set (eff (is ! pc) P pc xt s);\n        s = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        pc < length is; app (is ! pc) P mxs T\\<^sub>r pc (length is) xt s;\n        (pc', s') \\<in> set (eff (is ! pc) P pc xt s);\n        s = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply (simp add: Effect.app_def xcpt_app_def Effect.eff_def  \n                   xcpt_eff_def norm_eff_def relevant_entries_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply (case_tac \"is!pc\")\n\n  \\<comment> \\<open>Load\\<close>"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>s pc pc' s' a x1.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a x2.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a x3.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a x4.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a x51 x52.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a x61 x62.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Putfield x61 x62\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a x7.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Checkcast x7\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 8. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 9. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Return\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 10. \\<And>s pc pc' s' a.\n        \\<lbrakk>wf_prog p P;\n         a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                 list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n         pc < length is;\n         app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n         (\\<forall>aa aaa aaaa aaaaa b.\n             (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n             is_relevant_class (is ! pc) P aaaa \\<and>\n             aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n             is_class P aaaa \\<and>\n             b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n         (\\<forall>x\\<in>(\\<lambda>pc'.\n                             (pc',\n                              \\<lfloor>eff\\<^sub>i\n  (is ! pc, P, a)\\<rfloor>)) `\n                         set (succs (is ! pc) a pc) \\<union>\n                         {x. \\<exists>uu_ uua_.\n                                (uua_, uu_) = a \\<and>\n                                x \\<in> (\\<lambda>x.\n      case x of\n      (f, t, C, h, d) \\<Rightarrow>\n        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                      uu_)\\<rfloor>)) `\n  {x \\<in> set xt.\n   case x of\n   (f, t, C, ab) \\<Rightarrow>\n     is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n             case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n         (pc', s')\n         \\<in> (\\<lambda>pc'.\n                   (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n               set (succs (is ! pc) a pc) \\<or>\n         (\\<exists>uu_ uua_.\n             (uua_, uu_) = a \\<and>\n             (pc', s')\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C #\n drop (length uua_ - d) uua_,\n uu_)\\<rfloor>)) `\n                   {x \\<in> set xt.\n                    case x of\n                    (f, t, C, ab) \\<Rightarrow>\n                      is_relevant_class (is ! pc) P C \\<and>\n                      f \\<le> pc \\<and> pc < t});\n         s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n        \\<Longrightarrow> s' \\<in> opt (\\<Union>\n   {list n (types P) |n. n \\<le> mxs} \\<times>\n  list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\nA total of 15 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>pc x1 ST LT n aa.\n       \\<lbrakk>wf_prog p P; is ! pc = Load x1; Suc pc < length is;\n        LT \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        ST \\<in> list n (types P); x1 < Suc (length Ts + mxl\\<^sub>0);\n        n < mxs; LT ! x1 = OK aa\\<rbrakk>\n       \\<Longrightarrow> is_type P aa\n 2. \\<And>s pc pc' s' a x2.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a x3.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a x4.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a x51 x52.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a x61 x62.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Putfield x61 x62\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a x7.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Checkcast x7\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 8. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 9. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Return\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 10. \\<And>s pc pc' s' a.\n        \\<lbrakk>wf_prog p P;\n         a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                 list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n         pc < length is;\n         app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n         (\\<forall>aa aaa aaaa aaaaa b.\n             (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n             is_relevant_class (is ! pc) P aaaa \\<and>\n             aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n             is_class P aaaa \\<and>\n             b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n         (\\<forall>x\\<in>(\\<lambda>pc'.\n                             (pc',\n                              \\<lfloor>eff\\<^sub>i\n  (is ! pc, P, a)\\<rfloor>)) `\n                         set (succs (is ! pc) a pc) \\<union>\n                         {x. \\<exists>uu_ uua_.\n                                (uua_, uu_) = a \\<and>\n                                x \\<in> (\\<lambda>x.\n      case x of\n      (f, t, C, h, d) \\<Rightarrow>\n        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                      uu_)\\<rfloor>)) `\n  {x \\<in> set xt.\n   case x of\n   (f, t, C, ab) \\<Rightarrow>\n     is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n             case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n         (pc', s')\n         \\<in> (\\<lambda>pc'.\n                   (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n               set (succs (is ! pc) a pc) \\<or>\n         (\\<exists>uu_ uua_.\n             (uua_, uu_) = a \\<and>\n             (pc', s')\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C #\n drop (length uua_ - d) uua_,\n uu_)\\<rfloor>)) `\n                   {x \\<in> set xt.\n                    case x of\n                    (f, t, C, ab) \\<Rightarrow>\n                      is_relevant_class (is ! pc) P C \\<and>\n                      f \\<le> pc \\<and> pc < t});\n         s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n        \\<Longrightarrow> s' \\<in> opt (\\<Union>\n   {list n (types P) |n. n \\<le> mxs} \\<times>\n  list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\nA total of 15 subgoals...", "apply (frule listE_nth_in, assumption)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>pc x1 ST LT n aa.\n       \\<lbrakk>wf_prog p P; is ! pc = Load x1; Suc pc < length is;\n        LT \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        ST \\<in> list n (types P); x1 < Suc (length Ts + mxl\\<^sub>0);\n        n < mxs; LT ! x1 = OK aa; LT ! x1 \\<in> err (types P)\\<rbrakk>\n       \\<Longrightarrow> is_type P aa\n 2. \\<And>s pc pc' s' a x2.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a x3.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a x4.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a x51 x52.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a x61 x62.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Putfield x61 x62\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a x7.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Checkcast x7\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 8. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 9. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Return\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 10. \\<And>s pc pc' s' a.\n        \\<lbrakk>wf_prog p P;\n         a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                 list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n         pc < length is;\n         app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n         (\\<forall>aa aaa aaaa aaaaa b.\n             (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n             is_relevant_class (is ! pc) P aaaa \\<and>\n             aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n             is_class P aaaa \\<and>\n             b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n         (\\<forall>x\\<in>(\\<lambda>pc'.\n                             (pc',\n                              \\<lfloor>eff\\<^sub>i\n  (is ! pc, P, a)\\<rfloor>)) `\n                         set (succs (is ! pc) a pc) \\<union>\n                         {x. \\<exists>uu_ uua_.\n                                (uua_, uu_) = a \\<and>\n                                x \\<in> (\\<lambda>x.\n      case x of\n      (f, t, C, h, d) \\<Rightarrow>\n        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                      uu_)\\<rfloor>)) `\n  {x \\<in> set xt.\n   case x of\n   (f, t, C, ab) \\<Rightarrow>\n     is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n             case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n         (pc', s')\n         \\<in> (\\<lambda>pc'.\n                   (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n               set (succs (is ! pc) a pc) \\<or>\n         (\\<exists>uu_ uua_.\n             (uua_, uu_) = a \\<and>\n             (pc', s')\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C #\n drop (length uua_ - d) uua_,\n uu_)\\<rfloor>)) `\n                   {x \\<in> set xt.\n                    case x of\n                    (f, t, C, ab) \\<Rightarrow>\n                      is_relevant_class (is ! pc) P C \\<and>\n                      f \\<le> pc \\<and> pc < t});\n         s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n        \\<Longrightarrow> s' \\<in> opt (\\<Union>\n   {list n (types P) |n. n \\<le> mxs} \\<times>\n  list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\nA total of 15 subgoals...", "apply fastforce\n\n  \\<comment> \\<open>Store\\<close>"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>s pc pc' s' a x2.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a x3.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a x4.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a x51 x52.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a x61 x62.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Putfield x61 x62\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a x7.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Checkcast x7\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 8. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Return\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 9. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 10. \\<And>s pc pc' s' a.\n        \\<lbrakk>wf_prog p P;\n         a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                 list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n         pc < length is;\n         app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n         (\\<forall>aa aaa aaaa aaaaa b.\n             (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n             is_relevant_class (is ! pc) P aaaa \\<and>\n             aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n             is_class P aaaa \\<and>\n             b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n         (\\<forall>x\\<in>(\\<lambda>pc'.\n                             (pc',\n                              \\<lfloor>eff\\<^sub>i\n  (is ! pc, P, a)\\<rfloor>)) `\n                         set (succs (is ! pc) a pc) \\<union>\n                         {x. \\<exists>uu_ uua_.\n                                (uua_, uu_) = a \\<and>\n                                x \\<in> (\\<lambda>x.\n      case x of\n      (f, t, C, h, d) \\<Rightarrow>\n        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                      uu_)\\<rfloor>)) `\n  {x \\<in> set xt.\n   case x of\n   (f, t, C, ab) \\<Rightarrow>\n     is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n             case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n         (pc', s')\n         \\<in> (\\<lambda>pc'.\n                   (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n               set (succs (is ! pc) a pc) \\<or>\n         (\\<exists>uu_ uua_.\n             (uua_, uu_) = a \\<and>\n             (pc', s')\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C #\n drop (length uua_ - d) uua_,\n uu_)\\<rfloor>)) `\n                   {x \\<in> set xt.\n                    case x of\n                    (f, t, C, ab) \\<Rightarrow>\n                      is_relevant_class (is ! pc) P C \\<and>\n                      f \\<le> pc \\<and> pc < t});\n         s = \\<lfloor>a\\<rfloor>; is ! pc = IAdd\\<rbrakk>\n        \\<Longrightarrow> s' \\<in> opt (\\<Union>\n   {list n (types P) |n. n \\<le> mxs} \\<times>\n  list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\nA total of 14 subgoals...", "apply fastforce\n\n  \\<comment> \\<open>Push\\<close>"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>s pc pc' s' a x3.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a x4.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a x51 x52.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a x61 x62.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Putfield x61 x62\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a x7.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Checkcast x7\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Return\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 8. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 9. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IAdd\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 10. \\<And>s pc pc' s' a x12.\n        \\<lbrakk>wf_prog p P;\n         a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                 list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n         pc < length is;\n         app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n         (\\<forall>aa aaa aaaa aaaaa b.\n             (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n             is_relevant_class (is ! pc) P aaaa \\<and>\n             aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n             is_class P aaaa \\<and>\n             b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n         (\\<forall>x\\<in>(\\<lambda>pc'.\n                             (pc',\n                              \\<lfloor>eff\\<^sub>i\n  (is ! pc, P, a)\\<rfloor>)) `\n                         set (succs (is ! pc) a pc) \\<union>\n                         {x. \\<exists>uu_ uua_.\n                                (uua_, uu_) = a \\<and>\n                                x \\<in> (\\<lambda>x.\n      case x of\n      (f, t, C, h, d) \\<Rightarrow>\n        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                      uu_)\\<rfloor>)) `\n  {x \\<in> set xt.\n   case x of\n   (f, t, C, ab) \\<Rightarrow>\n     is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n             case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n         (pc', s')\n         \\<in> (\\<lambda>pc'.\n                   (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n               set (succs (is ! pc) a pc) \\<or>\n         (\\<exists>uu_ uua_.\n             (uua_, uu_) = a \\<and>\n             (pc', s')\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C #\n drop (length uua_ - d) uua_,\n uu_)\\<rfloor>)) `\n                   {x \\<in> set xt.\n                    case x of\n                    (f, t, C, ab) \\<Rightarrow>\n                      is_relevant_class (is ! pc) P C \\<and>\n                      f \\<le> pc \\<and> pc < t});\n         s = \\<lfloor>a\\<rfloor>; is ! pc = Goto x12\\<rbrakk>\n        \\<Longrightarrow> s' \\<in> opt (\\<Union>\n   {list n (types P) |n. n \\<le> mxs} \\<times>\n  list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\nA total of 13 subgoals...", "apply (fastforce simp add: typeof_lit_is_type)\n\n  \\<comment> \\<open>New\\<close>"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>s pc pc' s' a x4.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a x51 x52.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a x61 x62.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Putfield x61 x62\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a x7.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Checkcast x7\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Return\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 8. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IAdd\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 9. \\<And>s pc pc' s' a x12.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Goto x12\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 10. \\<And>s pc pc' s' a.\n        \\<lbrakk>wf_prog p P;\n         a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                 list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n         pc < length is;\n         app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n         (\\<forall>aa aaa aaaa aaaaa b.\n             (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n             is_relevant_class (is ! pc) P aaaa \\<and>\n             aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n             is_class P aaaa \\<and>\n             b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n         (\\<forall>x\\<in>(\\<lambda>pc'.\n                             (pc',\n                              \\<lfloor>eff\\<^sub>i\n  (is ! pc, P, a)\\<rfloor>)) `\n                         set (succs (is ! pc) a pc) \\<union>\n                         {x. \\<exists>uu_ uua_.\n                                (uua_, uu_) = a \\<and>\n                                x \\<in> (\\<lambda>x.\n      case x of\n      (f, t, C, h, d) \\<Rightarrow>\n        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                      uu_)\\<rfloor>)) `\n  {x \\<in> set xt.\n   case x of\n   (f, t, C, ab) \\<Rightarrow>\n     is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n             case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n         (pc', s')\n         \\<in> (\\<lambda>pc'.\n                   (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n               set (succs (is ! pc) a pc) \\<or>\n         (\\<exists>uu_ uua_.\n             (uua_, uu_) = a \\<and>\n             (pc', s')\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C #\n drop (length uua_ - d) uua_,\n uu_)\\<rfloor>)) `\n                   {x \\<in> set xt.\n                    case x of\n                    (f, t, C, ab) \\<Rightarrow>\n                      is_relevant_class (is ! pc) P C \\<and>\n                      f \\<le> pc \\<and> pc < t});\n         s = \\<lfloor>a\\<rfloor>; is ! pc = CmpEq\\<rbrakk>\n        \\<Longrightarrow> s' \\<in> opt (\\<Union>\n   {list n (types P) |n. n \\<le> mxs} \\<times>\n  list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\nA total of 12 subgoals...", "apply fastforce\n\n  \\<comment> \\<open>Getfield\\<close>"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>s pc pc' s' a x51 x52.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a x61 x62.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Putfield x61 x62\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a x7.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Checkcast x7\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Return\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IAdd\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 8. \\<And>s pc pc' s' a x12.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Goto x12\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 9. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = CmpEq\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 10. \\<And>s pc pc' s' a x14.\n        \\<lbrakk>wf_prog p P;\n         a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                 list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n         pc < length is;\n         app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n         (\\<forall>aa aaa aaaa aaaaa b.\n             (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n             is_relevant_class (is ! pc) P aaaa \\<and>\n             aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n             is_class P aaaa \\<and>\n             b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n         (\\<forall>x\\<in>(\\<lambda>pc'.\n                             (pc',\n                              \\<lfloor>eff\\<^sub>i\n  (is ! pc, P, a)\\<rfloor>)) `\n                         set (succs (is ! pc) a pc) \\<union>\n                         {x. \\<exists>uu_ uua_.\n                                (uua_, uu_) = a \\<and>\n                                x \\<in> (\\<lambda>x.\n      case x of\n      (f, t, C, h, d) \\<Rightarrow>\n        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                      uu_)\\<rfloor>)) `\n  {x \\<in> set xt.\n   case x of\n   (f, t, C, ab) \\<Rightarrow>\n     is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n             case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n         (pc', s')\n         \\<in> (\\<lambda>pc'.\n                   (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n               set (succs (is ! pc) a pc) \\<or>\n         (\\<exists>uu_ uua_.\n             (uua_, uu_) = a \\<and>\n             (pc', s')\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C #\n drop (length uua_ - d) uua_,\n uu_)\\<rfloor>)) `\n                   {x \\<in> set xt.\n                    case x of\n                    (f, t, C, ab) \\<Rightarrow>\n                      is_relevant_class (is ! pc) P C \\<and>\n                      f \\<le> pc \\<and> pc < t});\n         s = \\<lfloor>a\\<rfloor>; is ! pc = IfFalse x14\\<rbrakk>\n        \\<Longrightarrow> s' \\<in> opt (\\<Union>\n   {list n (types P) |n. n \\<le> mxs} \\<times>\n  list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\nA total of 11 subgoals...", "apply (fastforce dest: sees_field_is_type)\n\n  \\<comment> \\<open>Putfield\\<close>"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>s pc pc' s' a x61 x62.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Putfield x61 x62\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a x7.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Checkcast x7\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Return\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IAdd\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a x12.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Goto x12\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 8. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = CmpEq\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 9. \\<And>s pc pc' s' a x14.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IfFalse x14\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 10. \\<And>s pc pc' s' a.\n        \\<lbrakk>wf_prog p P;\n         a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                 list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n         pc < length is;\n         app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n         (\\<forall>aa aaa aaaa aaaaa b.\n             (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n             is_relevant_class (is ! pc) P aaaa \\<and>\n             aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n             is_class P aaaa \\<and>\n             b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n         (\\<forall>x\\<in>(\\<lambda>pc'.\n                             (pc',\n                              \\<lfloor>eff\\<^sub>i\n  (is ! pc, P, a)\\<rfloor>)) `\n                         set (succs (is ! pc) a pc) \\<union>\n                         {x. \\<exists>uu_ uua_.\n                                (uua_, uu_) = a \\<and>\n                                x \\<in> (\\<lambda>x.\n      case x of\n      (f, t, C, h, d) \\<Rightarrow>\n        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                      uu_)\\<rfloor>)) `\n  {x \\<in> set xt.\n   case x of\n   (f, t, C, ab) \\<Rightarrow>\n     is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n             case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n         (pc', s')\n         \\<in> (\\<lambda>pc'.\n                   (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n               set (succs (is ! pc) a pc) \\<or>\n         (\\<exists>uu_ uua_.\n             (uua_, uu_) = a \\<and>\n             (pc', s')\n             \\<in> (\\<lambda>x.\n                       case x of\n                       (f, t, C, h, d) \\<Rightarrow>\n                         (h, \\<lfloor>(Class C #\n drop (length uua_ - d) uua_,\n uu_)\\<rfloor>)) `\n                   {x \\<in> set xt.\n                    case x of\n                    (f, t, C, ab) \\<Rightarrow>\n                      is_relevant_class (is ! pc) P C \\<and>\n                      f \\<le> pc \\<and> pc < t});\n         s = \\<lfloor>a\\<rfloor>; is ! pc = Throw\\<rbrakk>\n        \\<Longrightarrow> s' \\<in> opt (\\<Union>\n   {list n (types P) |n. n \\<le> mxs} \\<times>\n  list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply fastforce\n\n  \\<comment> \\<open>Checkcast\\<close>"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>s pc pc' s' a x7.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Checkcast x7\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Return\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IAdd\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a x12.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Goto x12\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = CmpEq\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 8. \\<And>s pc pc' s' a x14.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IfFalse x14\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 9. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Throw\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply fastforce"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Return\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IAdd\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a x12.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Goto x12\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = CmpEq\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a x14.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IfFalse x14\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 8. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Throw\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "defer \n  \n  \\<comment> \\<open>Return\\<close>"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Return\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IAdd\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a x12.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Goto x12\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = CmpEq\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a x14.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IfFalse x14\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Throw\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 8. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply fastforce\n\n  \\<comment> \\<open>Pop\\<close>"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Pop\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IAdd\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a x12.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Goto x12\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = CmpEq\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a x14.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IfFalse x14\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Throw\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 7. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply fastforce\n\n  \\<comment> \\<open>IAdd\\<close>"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IAdd\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a x12.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Goto x12\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = CmpEq\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a x14.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IfFalse x14\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Throw\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 6. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply fastforce\n  \n  \\<comment> \\<open>Goto\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s pc pc' s' a x12.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Goto x12\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = CmpEq\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a x14.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IfFalse x14\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Throw\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 5. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply fastforce\n\n  \\<comment> \\<open>CmpEq\\<close>"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = CmpEq\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a x14.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IfFalse x14\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Throw\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 4. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply fastforce\n\n  \\<comment> \\<open>IfFalse\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s pc pc' s' a x14.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = IfFalse x14\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Throw\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 3. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply fastforce\n\n  \\<comment> \\<open>Throw\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s pc pc' s' a.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Throw\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply fastforce\n\n  \\<comment> \\<open>Invoke\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s pc pc' s' a x81 x82.\n       \\<lbrakk>wf_prog p P;\n        a \\<in> \\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        pc < length is;\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a) \\<and>\n        (\\<forall>aa aaa aaaa aaaaa b.\n            (aa, aaa, aaaa, aaaaa, b) \\<in> set xt \\<and>\n            is_relevant_class (is ! pc) P aaaa \\<and>\n            aa \\<le> pc \\<and> pc < aaa \\<longrightarrow>\n            is_class P aaaa \\<and>\n            b \\<le> length (fst a) \\<and> b < mxs) \\<and>\n        (\\<forall>x\\<in>(\\<lambda>pc'.\n                            (pc',\n                             \\<lfloor>eff\\<^sub>i\n (is ! pc, P, a)\\<rfloor>)) `\n                        set (succs (is ! pc) a pc) \\<union>\n                        {x. \\<exists>uu_ uua_.\n                               (uua_, uu_) = a \\<and>\n                               x \\<in> (\\<lambda>x.\n     case x of\n     (f, t, C, h, d) \\<Rightarrow>\n       (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\n                     uu_)\\<rfloor>)) `\n {x \\<in> set xt.\n  case x of\n  (f, t, C, ab) \\<Rightarrow>\n    is_relevant_class (is ! pc) P C \\<and> f \\<le> pc \\<and> pc < t}}.\n            case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is);\n        (pc', s')\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a)\\<rfloor>)) `\n              set (succs (is ! pc) a pc) \\<or>\n        (\\<exists>uu_ uua_.\n            (uua_, uu_) = a \\<and>\n            (pc', s')\n            \\<in> (\\<lambda>x.\n                      case x of\n                      (f, t, C, h, d) \\<Rightarrow>\n                        (h, \\<lfloor>(Class C # drop (length uua_ - d) uua_,\nuu_)\\<rfloor>)) `\n                  {x \\<in> set xt.\n                   case x of\n                   (f, t, C, ab) \\<Rightarrow>\n                     is_relevant_class (is ! pc) P C \\<and>\n                     f \\<le> pc \\<and> pc < t});\n        s = \\<lfloor>a\\<rfloor>; is ! pc = Invoke x81 x82\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply (clarsimp split!: if_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pc a b x81 x82 n aa ab ac ad ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82; wf_prog p P; pc < length is;\n        a ! x82 = NT; x82 < n;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        n \\<le> mxs; (aa, ab, ac, ad, ba) \\<in> set xt; aa \\<le> pc;\n        pc < ab\\<rbrakk>\n       \\<Longrightarrow> Suc ba \\<le> mxs\n 2. \\<And>pc pc' s' a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>pc' = Suc pc \\<and>\n                s' = \\<lfloor>(T # drop (Suc x82) a, b)\\<rfloor> \\<or>\n                (pc', s')\n                \\<in> (\\<lambda>x.\n                          case x of\n                          (f, t, C, h, d) \\<Rightarrow>\n                            (h, \\<lfloor>(Class C # drop (n - d) a,\n    b)\\<rfloor>)) `\n                      {x \\<in> set xt.\n                       case x of\n                       (f, ab) \\<Rightarrow>\n                         f \\<le> pc \\<and>\n                         (case ab of (t, ab) \\<Rightarrow> pc < t)};\n        is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc pc' s' a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>pc' = Suc pc \\<and>\n                s' = \\<lfloor>(T # drop (Suc x82) a, b)\\<rfloor> \\<or>\n                (pc', s')\n                \\<in> (\\<lambda>x.\n                          case x of\n                          (f, t, C, h, d) \\<Rightarrow>\n                            (h, \\<lfloor>(Class C # drop (n - d) a,\n    b)\\<rfloor>)) `\n                      {x \\<in> set xt.\n                       case x of\n                       (f, ab) \\<Rightarrow>\n                         f \\<le> pc \\<and>\n                         (case ab of (t, ab) \\<Rightarrow> pc < t)};\n        is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pc pc' s' a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D;\n        pc' = Suc pc \\<and>\n        s' = \\<lfloor>(T # drop (Suc x82) a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>pc pc' s' a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D;\n        (pc', s')\n        \\<in> (\\<lambda>x.\n                  case x of\n                  (f, t, C, h, d) \\<Rightarrow>\n                    (h, \\<lfloor>(Class C # drop (n - d) a, b)\\<rfloor>)) `\n              {x \\<in> set xt.\n               case x of\n               (f, ab) \\<Rightarrow>\n                 f \\<le> pc \\<and>\n                 (case ab of (t, ab) \\<Rightarrow> pc < t)}\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pc pc' s' a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D;\n        (pc', s')\n        \\<in> (\\<lambda>x.\n                  case x of\n                  (f, t, C, h, d) \\<Rightarrow>\n                    (h, \\<lfloor>(Class C # drop (n - d) a, b)\\<rfloor>)) `\n              {x \\<in> set xt.\n               case x of\n               (f, ab) \\<Rightarrow>\n                 f \\<le> pc \\<and>\n                 (case ab of (t, ab) \\<Rightarrow> pc < t)}\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))\n 2. \\<And>pc pc' s' a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D;\n        pc' = Suc pc \\<and>\n        s' = \\<lfloor>(T # drop (Suc x82) a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc pc' s' a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D;\n        pc' = Suc pc \\<and>\n        s' = \\<lfloor>(T # drop (Suc x82) a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> opt (\\<Union>\n  {list n (types P) |n. n \\<le> mxs} \\<times>\n list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D\\<rbrakk>\n       \\<Longrightarrow> is_type P T \\<and> Suc (n - Suc x82) \\<le> mxs", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pc a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>pc a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D\\<rbrakk>\n       \\<Longrightarrow> Suc (n - Suc x82) \\<le> mxs", "apply (drule (1) sees_wf_mdecl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pc a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D;\n        wf_mdecl p P D (x81, Tsa, T, aa, ab, ac, ba)\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>pc a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D\\<rbrakk>\n       \\<Longrightarrow> Suc (n - Suc x82) \\<le> mxs", "apply (clarsimp simp add: wf_mdecl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pc a b x81 x82 n C D Tsa T aa ab ac ba.\n       \\<lbrakk>is ! pc = Invoke x81 x82; wf_prog p P;\n        b \\<in> list (Suc (length Ts + mxl\\<^sub>0)) (err (types P));\n        a \\<in> list n (types P);\n        \\<forall>a aa aaa aaaa b.\n           (a, aa, aaa, aaaa, b) \\<in> set xt \\<and>\n           a \\<le> pc \\<and> pc < aa \\<longrightarrow>\n           is_class P aaa \\<and> b \\<le> n \\<and> b < mxs;\n        n \\<le> mxs; Suc pc < length is;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba)\n               \\<in> (\\<lambda>x.\n                         case x of\n                         (f, t, C, h, d) \\<Rightarrow>\n                           (h, \\<lfloor>(Class C # drop (n - d) a,\n   b)\\<rfloor>)) `\n                     {x \\<in> set xt.\n                      case x of\n                      (f, ab) \\<Rightarrow>\n                        f \\<le> pc \\<and>\n                        (case ab of\n                         (t, ab) \\<Rightarrow> pc < t)}) \\<longrightarrow>\n           aa < length is;\n        x82 < n; a ! x82 = Class C;\n        P \\<turnstile> rev (take x82 a) [\\<le>] Tsa;\n        P \\<turnstile> C sees x81: Tsa\\<rightarrow>T = (aa, ab, ac,\n                  ba) in D\\<rbrakk>\n       \\<Longrightarrow> Suc (n - Suc x82) \\<le> mxs", "apply arith"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "declare is_relevant_entry_def [simp del]"], ["", "declare set_drop_subset [simp del]"], ["", "lemma lesubstep_type_simple:\n  \"xs [\\<sqsubseteq>\\<^bsub>Product.le (=) r\\<^esub>] ys \\<Longrightarrow> set xs {\\<sqsubseteq>\\<^bsub>r\\<^esub>} set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubseteq>\\<^bsub>Product.le (=) r\\<^esub>] ys \\<Longrightarrow>\n    set xs {\\<sqsubseteq>\\<^bsub>r\\<^esub>} set ys", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubseteq>\\<^bsub>Product.le (=) r\\<^esub>] ys \\<Longrightarrow>\n    set xs {\\<sqsubseteq>\\<^bsub>r\\<^esub>} set ys", "apply (unfold lesubstep_type_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubseteq>\\<^bsub>Product.le (=) r\\<^esub>] ys \\<Longrightarrow>\n    \\<forall>(p, \\<tau>)\\<in>set xs.\n       \\<exists>\\<tau>'.\n          (p, \\<tau>') \\<in> set ys \\<and>\n          \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>'", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>xs [\\<sqsubseteq>\\<^bsub>Product.le (=) r\\<^esub>] ys;\n        (a, b) \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<tau>'.\n                            (a, \\<tau>') \\<in> set ys \\<and>\n                            b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>'", "apply (simp add: set_conv_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>xs [\\<sqsubseteq>\\<^bsub>Product.le (=) r\\<^esub>] ys;\n        \\<exists>i. (a, b) = xs ! i \\<and> i < length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<tau>'.\n                            (\\<exists>i.\n                                (a, \\<tau>') = ys ! i \\<and>\n                                i < length xs) \\<and>\n                            b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>'", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b i.\n       \\<lbrakk>xs [\\<sqsubseteq>\\<^bsub>Product.le (=) r\\<^esub>] ys;\n        (a, b) = xs ! i; i < length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<tau>'.\n                            (\\<exists>i.\n                                (a, \\<tau>') = ys ! i \\<and>\n                                i < length xs) \\<and>\n                            b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>'", "apply (drule le_listD, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b i.\n       \\<lbrakk>(a, b) = xs ! i; i < length xs;\n        xs ! i <=((=),r) ys ! i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<tau>'.\n                            (\\<exists>i.\n                                (a, \\<tau>') = ys ! i \\<and>\n                                i < length xs) \\<and>\n                            b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>'", "apply (clarsimp simp add: lesub_def Product.le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<tau>'.\n                            (\\<exists>i.\n                                (a, \\<tau>') = ys ! i \\<and>\n                                i < length xs) \\<and>\n                            r y \\<tau>'", "apply (rule exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ia.\n                             (a, ?\\<tau>'12 a i y ya) = ys ! ia \\<and>\n                             ia < length xs) \\<and>\n                         r y (?\\<tau>'12 a i y ya)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia.\n                            (a, ?\\<tau>'12 a i y ya) = ys ! ia \\<and>\n                            ia < length xs\n 2. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> r y (?\\<tau>'12 a i y ya)", "apply (rule exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> (a, ?\\<tau>'12 a i y ya) =\n                         ys ! ?i17 a i y ya \\<and>\n                         ?i17 a i y ya < length xs\n 2. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> r y (?\\<tau>'12 a i y ya)", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> (a, ?\\<tau>'12 a i y ya) = ys ! ?i17 a i y ya\n 2. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> ?i17 a i y ya < length xs\n 3. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> r y (?\\<tau>'12 a i y ya)", "apply (rule sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> ys ! ?i17 a i y ya = (a, ?\\<tau>'12 a i y ya)\n 2. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> ?i17 a i y ya < length xs\n 3. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> r y (?\\<tau>'12 a i y ya)", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> i < length xs\n 2. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> r y ya", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a i y ya.\n       \\<lbrakk>i < length xs; xs ! i = (a, y); ys ! i = (a, ya);\n        r y ya\\<rbrakk>\n       \\<Longrightarrow> r y ya", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "declare is_relevant_entry_def [simp del]"], ["", "lemma conjI2: \"\\<lbrakk> A; A \\<Longrightarrow> B \\<rbrakk> \\<Longrightarrow> A \\<and> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A; A \\<Longrightarrow> B\\<rbrakk> \\<Longrightarrow> A \\<and> B", "by blast"], ["", "lemma (in JVM_sl) eff_mono:\n  \"\\<lbrakk>wf_prog p P; pc < length is; s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t; app pc t\\<rbrakk>\n  \\<Longrightarrow> set (eff pc s) {\\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub>} set (eff pc t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog p P; pc < length is;\n     s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t; app pc t\\<rbrakk>\n    \\<Longrightarrow> set (eff pc s) \n                      {\\<sqsubseteq>\\<^bsub>sup_state_opt\n       P\\<^esub>} set (eff pc t)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog p P; pc < length is;\n     s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t; app pc t\\<rbrakk>\n    \\<Longrightarrow> set (eff pc s) \n                      {\\<sqsubseteq>\\<^bsub>sup_state_opt\n       P\\<^esub>} set (eff pc t)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog p P; pc < length is;\n     s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t;\n     app (is ! pc) P mxs T\\<^sub>r pc (length is) xt t\\<rbrakk>\n    \\<Longrightarrow> set (eff (is ! pc) P pc xt s) \n                      {\\<sqsubseteq>\\<^bsub>sup_state_opt\n       P\\<^esub>} set (eff (is ! pc) P pc xt t)", "apply (unfold Effect.eff_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog p P; pc < length is;\n     s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t;\n     app (is ! pc) P mxs T\\<^sub>r pc (length is) xt t\\<rbrakk>\n    \\<Longrightarrow> set (case s of None \\<Rightarrow> []\n                           | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                               norm_eff (is ! pc) P pc \\<tau> @\n                               xcpt_eff (is ! pc) P pc \\<tau> xt) \n                      {\\<sqsubseteq>\\<^bsub>sup_state_opt\n       P\\<^esub>} set (case t of None \\<Rightarrow> []\n                       | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                           norm_eff (is ! pc) P pc \\<tau> @\n                           xcpt_eff (is ! pc) P pc \\<tau> xt)", "apply (cases t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_prog p P; pc < length is;\n     s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t;\n     app (is ! pc) P mxs T\\<^sub>r pc (length is) xt t; t = None\\<rbrakk>\n    \\<Longrightarrow> set (case s of None \\<Rightarrow> []\n                           | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                               norm_eff (is ! pc) P pc \\<tau> @\n                               xcpt_eff (is ! pc) P pc \\<tau> xt) \n                      {\\<sqsubseteq>\\<^bsub>sup_state_opt\n       P\\<^esub>} set (case t of None \\<Rightarrow> []\n                       | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                           norm_eff (is ! pc) P pc \\<tau> @\n                           xcpt_eff (is ! pc) P pc \\<tau> xt)\n 2. \\<And>a.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt t;\n        t = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (case s of None \\<Rightarrow> []\n                              | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                                  norm_eff (is ! pc) P pc \\<tau> @\n                                  xcpt_eff (is ! pc) P pc \\<tau> xt) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (case t of None \\<Rightarrow> []\n                          | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                              norm_eff (is ! pc) P pc \\<tau> @\n                              xcpt_eff (is ! pc) P pc \\<tau> xt)", "apply (simp add: lesub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt t;\n        t = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (case s of None \\<Rightarrow> []\n                              | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                                  norm_eff (is ! pc) P pc \\<tau> @\n                                  xcpt_eff (is ! pc) P pc \\<tau> xt) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (case t of None \\<Rightarrow> []\n                          | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                              norm_eff (is ! pc) P pc \\<tau> @\n                              xcpt_eff (is ! pc) P pc \\<tau> xt)", "apply (rename_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt t;\n        t = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (case s of None \\<Rightarrow> []\n                              | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                                  norm_eff (is ! pc) P pc \\<tau> @\n                                  xcpt_eff (is ! pc) P pc \\<tau> xt) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (case t of None \\<Rightarrow> []\n                          | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                              norm_eff (is ! pc) P pc \\<tau> @\n                              xcpt_eff (is ! pc) P pc \\<tau> xt)", "apply (cases s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt t;\n        t = \\<lfloor>a\\<rfloor>; s = None\\<rbrakk>\n       \\<Longrightarrow> set (case s of None \\<Rightarrow> []\n                              | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                                  norm_eff (is ! pc) P pc \\<tau> @\n                                  xcpt_eff (is ! pc) P pc \\<tau> xt) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (case t of None \\<Rightarrow> []\n                          | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                              norm_eff (is ! pc) P pc \\<tau> @\n                              xcpt_eff (is ! pc) P pc \\<tau> xt)\n 2. \\<And>a aa.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt t;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (case s of None \\<Rightarrow> []\n                              | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                                  norm_eff (is ! pc) P pc \\<tau> @\n                                  xcpt_eff (is ! pc) P pc \\<tau> xt) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (case t of None \\<Rightarrow> []\n                          | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                              norm_eff (is ! pc) P pc \\<tau> @\n                              xcpt_eff (is ! pc) P pc \\<tau> xt)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt t;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (case s of None \\<Rightarrow> []\n                              | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                                  norm_eff (is ! pc) P pc \\<tau> @\n                                  xcpt_eff (is ! pc) P pc \\<tau> xt) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (case t of None \\<Rightarrow> []\n                          | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                              norm_eff (is ! pc) P pc \\<tau> @\n                              xcpt_eff (is ! pc) P pc \\<tau> xt)", "apply (rename_tac b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        s \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> t;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt t;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (case s of None \\<Rightarrow> []\n                              | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                                  norm_eff (is ! pc) P pc \\<tau> @\n                                  xcpt_eff (is ! pc) P pc \\<tau> xt) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (case t of None \\<Rightarrow> []\n                          | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                              norm_eff (is ! pc) P pc \\<tau> @\n                              xcpt_eff (is ! pc) P pc \\<tau> xt)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \\<union>\n                         set (xcpt_eff (is ! pc) P pc b xt) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a) \\<union>\n                     set (xcpt_eff (is ! pc) P pc a xt)", "apply (rule lesubstep_union)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)\n 2. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (xcpt_eff (is ! pc) P pc b xt) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (xcpt_eff (is ! pc) P pc a xt)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (xcpt_eff (is ! pc) P pc b xt) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (xcpt_eff (is ! pc) P pc a xt)\n 2. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply (rule lesubstep_type_simple)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> xcpt_eff (is ! pc) P pc b xt \n                         [\\<sqsubseteq>\\<^bsub>Product.le (=)\n          (sup_state_opt P)\\<^esub>] xcpt_eff (is ! pc) P pc a xt\n 2. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply (simp add: xcpt_eff_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (case b of\n                          (ST, LT) \\<Rightarrow>\n                            map (\\<lambda>(f, t, C, h, d).\n                                    (h, \\<lfloor>(Class C #\n            drop (length ST - d) ST,\n            LT)\\<rfloor>))\n                             (relevant_entries P (is ! pc) pc xt)) \n                         [\\<sqsubseteq>\\<^bsub>Product.le (=)\n          (sup_state_opt\n            P)\\<^esub>] (case a of\n                         (ST, LT) \\<Rightarrow>\n                           map (\\<lambda>(f, t, C, h, d).\n                                   (h, \\<lfloor>(Class C #\n           drop (length ST - d) ST,\n           LT)\\<rfloor>))\n                            (relevant_entries P (is ! pc) pc xt))\n 2. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply (rule le_listI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> length\n                          (case b of\n                           (ST, LT) \\<Rightarrow>\n                             map (\\<lambda>(f, t, C, h, d).\n                                     (h,\n\\<lfloor>(Class C # drop (length ST - d) ST, LT)\\<rfloor>))\n                              (relevant_entries P (is ! pc) pc xt)) =\n                         length\n                          (case a of\n                           (ST, LT) \\<Rightarrow>\n                             map (\\<lambda>(f, t, C, h, d).\n                                     (h,\n\\<lfloor>(Class C # drop (length ST - d) ST, LT)\\<rfloor>))\n                              (relevant_entries P (is ! pc) pc xt))\n 2. \\<And>a b n.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>;\n        n < length\n             (case b of\n              (ST, LT) \\<Rightarrow>\n                map (\\<lambda>(f, t, C, h, d).\n                        (h, \\<lfloor>(Class C # drop (length ST - d) ST,\nLT)\\<rfloor>))\n                 (relevant_entries P (is ! pc) pc xt))\\<rbrakk>\n       \\<Longrightarrow> (case b of\n                          (ST, LT) \\<Rightarrow>\n                            map (\\<lambda>(f, t, C, h, d).\n                                    (h, \\<lfloor>(Class C #\n            drop (length ST - d) ST,\n            LT)\\<rfloor>))\n                             (relevant_entries P (is ! pc) pc xt)) !\n                         n \n                         <=((=),sup_state_opt\n                                 P) (case a of\n                                     (ST, LT) \\<Rightarrow>\n map (\\<lambda>(f, t, C, h, d).\n         (h, \\<lfloor>(Class C # drop (length ST - d) ST, LT)\\<rfloor>))\n  (relevant_entries P (is ! pc) pc xt)) !\n                                    n\n 3. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply (simp add: split_beta)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>;\n        n < length\n             (case b of\n              (ST, LT) \\<Rightarrow>\n                map (\\<lambda>(f, t, C, h, d).\n                        (h, \\<lfloor>(Class C # drop (length ST - d) ST,\nLT)\\<rfloor>))\n                 (relevant_entries P (is ! pc) pc xt))\\<rbrakk>\n       \\<Longrightarrow> (case b of\n                          (ST, LT) \\<Rightarrow>\n                            map (\\<lambda>(f, t, C, h, d).\n                                    (h, \\<lfloor>(Class C #\n            drop (length ST - d) ST,\n            LT)\\<rfloor>))\n                             (relevant_entries P (is ! pc) pc xt)) !\n                         n \n                         <=((=),sup_state_opt\n                                 P) (case a of\n                                     (ST, LT) \\<Rightarrow>\n map (\\<lambda>(f, t, C, h, d).\n         (h, \\<lfloor>(Class C # drop (length ST - d) ST, LT)\\<rfloor>))\n  (relevant_entries P (is ! pc) pc xt)) !\n                                    n\n 2. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply (simp add: split_beta)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>;\n        n < length (relevant_entries P (is ! pc) pc xt)\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (snd\n   (relevant_entries P (is ! pc) pc xt ! n)))) \n                         \\<sqsubseteq>\\<^bsub>(=)\\<^esub> fst\n                     (snd (snd (snd (relevant_entries P (is ! pc) pc xt !\n                                     n)))) \\<and>\n                         \\<lfloor>(Class\n                                    (fst\n(snd (snd (relevant_entries P (is ! pc) pc xt ! n)))) #\n                                   drop\n                                    (length (fst b) -\n                                     snd\n(snd (snd (snd (relevant_entries P (is ! pc) pc xt ! n)))))\n                                    (fst b),\n                                   snd b)\\<rfloor> \n                         \\<sqsubseteq>\\<^bsub>sup_state_opt\n         P\\<^esub> \\<lfloor>(Class\n                              (fst (snd (snd\n    (relevant_entries P (is ! pc) pc xt ! n)))) #\n                             drop\n                              (length (fst a) -\n                               snd (snd (snd\n    (snd (relevant_entries P (is ! pc) pc xt ! n)))))\n                              (fst a),\n                             snd a)\\<rfloor>\n 2. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply (simp add: lesub_def fun_of_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> b \\<le>\\<^sub>i a;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>;\n        n < length (relevant_entries P (is ! pc) pc xt)\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> drop\n   (length (fst b) -\n    snd (snd (snd (snd (relevant_entries P (is ! pc) pc xt ! n)))))\n   (fst b) [\\<le>] drop\n                    (length (fst a) -\n                     snd (snd (snd (snd (relevant_entries P (is ! pc) pc\n    xt !\n   n)))))\n                    (fst a) \\<and>\n                         P \\<turnstile> snd b [\\<le>\\<^sub>\\<top>] snd a\n 2. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n aa ba.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> b \\<le>\\<^sub>i a;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>;\n        n < length (relevant_entries P (is ! pc) pc xt);\n        a = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> drop\n   (length (fst b) -\n    snd (snd (snd (snd (relevant_entries P (is ! pc) pc xt ! n)))))\n   (fst b) [\\<le>] drop\n                    (length (fst a) -\n                     snd (snd (snd (snd (relevant_entries P (is ! pc) pc\n    xt !\n   n)))))\n                    (fst a) \\<and>\n                         P \\<turnstile> snd b [\\<le>\\<^sub>\\<top>] snd a\n 2. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply (case_tac b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n aa ba ab bb.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> b \\<le>\\<^sub>i a;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>;\n        n < length (relevant_entries P (is ! pc) pc xt); a = (aa, ba);\n        b = (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> drop\n   (length (fst b) -\n    snd (snd (snd (snd (relevant_entries P (is ! pc) pc xt ! n)))))\n   (fst b) [\\<le>] drop\n                    (length (fst a) -\n                     snd (snd (snd (snd (relevant_entries P (is ! pc) pc\n    xt !\n   n)))))\n                    (fst a) \\<and>\n                         P \\<turnstile> snd b [\\<le>\\<^sub>\\<top>] snd a\n 2. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n aa ba ab bb.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> ab [\\<le>] aa \\<and>\n        P \\<turnstile> bb [\\<le>\\<^sub>\\<top>] ba;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(aa, ba)\\<rfloor>;\n        t = \\<lfloor>(aa, ba)\\<rfloor>; s = \\<lfloor>(ab, bb)\\<rfloor>;\n        n < length (relevant_entries P (is ! pc) pc xt); a = (aa, ba);\n        b = (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> drop\n   (length ab -\n    snd (snd (snd (snd (relevant_entries P (is ! pc) pc xt ! n)))))\n   ab [\\<le>] drop\n               (length aa -\n                snd (snd (snd (snd (relevant_entries P (is ! pc) pc xt !\n                                    n)))))\n               aa\n 2. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply (subgoal_tac \"size ab = size aa\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b n aa ba ab bb.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> ab [\\<le>] aa \\<and>\n        P \\<turnstile> bb [\\<le>\\<^sub>\\<top>] ba;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(aa, ba)\\<rfloor>;\n        t = \\<lfloor>(aa, ba)\\<rfloor>; s = \\<lfloor>(ab, bb)\\<rfloor>;\n        n < length (relevant_entries P (is ! pc) pc xt); a = (aa, ba);\n        b = (ab, bb); length ab = length aa\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> drop\n   (length ab -\n    snd (snd (snd (snd (relevant_entries P (is ! pc) pc xt ! n)))))\n   ab [\\<le>] drop\n               (length aa -\n                snd (snd (snd (snd (relevant_entries P (is ! pc) pc xt !\n                                    n)))))\n               aa\n 2. \\<And>a b n aa ba ab bb.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> ab [\\<le>] aa \\<and>\n        P \\<turnstile> bb [\\<le>\\<^sub>\\<top>] ba;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(aa, ba)\\<rfloor>;\n        t = \\<lfloor>(aa, ba)\\<rfloor>; s = \\<lfloor>(ab, bb)\\<rfloor>;\n        n < length (relevant_entries P (is ! pc) pc xt); a = (aa, ba);\n        b = (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> length ab = length aa\n 3. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b n aa ba ab bb.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> ab [\\<le>] aa \\<and>\n        P \\<turnstile> bb [\\<le>\\<^sub>\\<top>] ba;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(aa, ba)\\<rfloor>;\n        t = \\<lfloor>(aa, ba)\\<rfloor>; s = \\<lfloor>(ab, bb)\\<rfloor>;\n        n < length (relevant_entries P (is ! pc) pc xt); a = (aa, ba);\n        b = (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> length ab = length aa\n 2. \\<And>a b n aa ba ab bb.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> ab [\\<le>] aa \\<and>\n        P \\<turnstile> bb [\\<le>\\<^sub>\\<top>] ba;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(aa, ba)\\<rfloor>;\n        t = \\<lfloor>(aa, ba)\\<rfloor>; s = \\<lfloor>(ab, bb)\\<rfloor>;\n        n < length (relevant_entries P (is ! pc) pc xt); a = (aa, ba);\n        b = (ab, bb); length ab = length aa\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> drop\n   (length ab -\n    snd (snd (snd (snd (relevant_entries P (is ! pc) pc xt ! n)))))\n   ab [\\<le>] drop\n               (length aa -\n                snd (snd (snd (snd (relevant_entries P (is ! pc) pc xt !\n                                    n)))))\n               aa\n 3. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply (clarsimp simp add: list_all2_lengthD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n aa ba ab bb.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> ab [\\<le>] aa \\<and>\n        P \\<turnstile> bb [\\<le>\\<^sub>\\<top>] ba;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(aa, ba)\\<rfloor>;\n        t = \\<lfloor>(aa, ba)\\<rfloor>; s = \\<lfloor>(ab, bb)\\<rfloor>;\n        n < length (relevant_entries P (is ! pc) pc xt); a = (aa, ba);\n        b = (ab, bb); length ab = length aa\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> drop\n   (length ab -\n    snd (snd (snd (snd (relevant_entries P (is ! pc) pc xt ! n)))))\n   ab [\\<le>] drop\n               (length aa -\n                snd (snd (snd (snd (relevant_entries P (is ! pc) pc xt !\n                                    n)))))\n               aa\n 2. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        \\<lfloor>b\\<rfloor> \n        \\<sqsubseteq>\\<^bsub>sup_state_opt P\\<^esub> \\<lfloor>a\\<rfloor>;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt \\<lfloor>a\\<rfloor>;\n        t = \\<lfloor>a\\<rfloor>; s = \\<lfloor>b\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> set (norm_eff (is ! pc) P pc b) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (norm_eff (is ! pc) P pc a)", "apply (clarsimp simp add: norm_eff_def lesubstep_type_def lesub_def iff del: sup_state_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b);\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<tau>'.\n                            (x, \\<tau>')\n                            \\<in> (\\<lambda>pc'.\n(pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n                                  set (succs (is ! pc) (a, b) pc) \\<and>\n                            P \\<turnstile> \\<lfloor>eff\\<^sub>i\n               (is ! pc, P, aa, ba)\\<rfloor> \\<le>' \\<tau>'", "apply (rule exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b);\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc)\\<rbrakk>\n       \\<Longrightarrow> (x, ?\\<tau>'26 a b aa ba x)\n                         \\<in> (\\<lambda>pc'.\n                                   (pc',\n                                    \\<lfloor>eff\\<^sub>i\n        (is ! pc, P, a, b)\\<rfloor>)) `\n                               set (succs (is ! pc) (a, b) pc) \\<and>\n                         P \\<turnstile> \\<lfloor>eff\\<^sub>i\n            (is ! pc, P, aa, ba)\\<rfloor> \\<le>' ?\\<tau>'26 a b aa ba x", "apply (rule conjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b);\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc)\\<rbrakk>\n       \\<Longrightarrow> (x, ?\\<tau>'26 a b aa ba x)\n                         \\<in> (\\<lambda>pc'.\n                                   (pc',\n                                    \\<lfloor>eff\\<^sub>i\n        (is ! pc, P, a, b)\\<rfloor>)) `\n                               set (succs (is ! pc) (a, b) pc)\n 2. \\<And>a b aa ba x.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b);\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, ?\\<tau>'26 a b aa ba x)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> \\<lfloor>eff\\<^sub>i\n            (is ! pc, P, aa, ba)\\<rfloor> \\<le>' ?\\<tau>'26 a b aa ba x", "apply (rule imageI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b);\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (succs (is ! pc) (a, b) pc)\n 2. \\<And>a b aa ba x.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b);\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> \\<lfloor>eff\\<^sub>i\n            (is ! pc, P, aa,\n             ba)\\<rfloor> \\<le>' \\<lfloor>eff\\<^sub>i\n     (is ! pc, P, a, b)\\<rfloor>", "apply (clarsimp simp add: Effect.app_def iff del: sup_state_conv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b);\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a, b);\n        xcpt_app (is ! pc) P pc mxs xt (a, b);\n        \\<forall>x\\<in>set (eff (is ! pc) P pc xt \\<lfloor>(a, b)\\<rfloor>).\n           case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (succs (is ! pc) (a, b) pc)\n 2. \\<And>a b aa ba x.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b);\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> \\<lfloor>eff\\<^sub>i\n            (is ! pc, P, aa,\n             ba)\\<rfloor> \\<le>' \\<lfloor>eff\\<^sub>i\n     (is ! pc, P, a, b)\\<rfloor>", "apply (drule (2) succs_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>pc < length is;\n        P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b);\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        app\\<^sub>i (is ! pc, P, pc, mxs, T\\<^sub>r, a, b);\n        xcpt_app (is ! pc) P pc mxs xt (a, b);\n        \\<forall>x\\<in>set (eff (is ! pc) P pc xt \\<lfloor>(a, b)\\<rfloor>).\n           case x of (pc', \\<tau>') \\<Rightarrow> pc' < length is;\n        set (succs (is ! pc) (aa, ba) (?pc37 a b aa ba x))\n        \\<subseteq> set (succs (is ! pc) (a, b)\n                          (?pc37 a b aa ba x))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (succs (is ! pc) (a, b) pc)\n 2. \\<And>a b aa ba x.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b);\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> \\<lfloor>eff\\<^sub>i\n            (is ! pc, P, aa,\n             ba)\\<rfloor> \\<le>' \\<lfloor>eff\\<^sub>i\n     (is ! pc, P, a, b)\\<rfloor>", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b);\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> \\<lfloor>eff\\<^sub>i\n            (is ! pc, P, aa,\n             ba)\\<rfloor> \\<le>' \\<lfloor>eff\\<^sub>i\n     (is ! pc, P, a, b)\\<rfloor>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>wf_prog p P; pc < length is;\n        P \\<turnstile> aa [\\<le>] a \\<and>\n        P \\<turnstile> ba [\\<le>\\<^sub>\\<top>] b;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> eff\\<^sub>i\n   (is ! pc, P, aa, ba) \\<le>\\<^sub>i eff\\<^sub>i (is ! pc, P, a, b)", "apply (erule eff\\<^sub>i_mono)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>pc < length is;\n        P \\<turnstile> aa [\\<le>] a \\<and>\n        P \\<turnstile> ba [\\<le>\\<^sub>\\<top>] b;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> (aa, ba) \\<le>\\<^sub>i (a, b)\n 2. \\<And>a b aa ba x.\n       \\<lbrakk>pc < length is;\n        P \\<turnstile> aa [\\<le>] a \\<and>\n        P \\<turnstile> ba [\\<le>\\<^sub>\\<top>] b;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> app (is ! pc) P (?m88 a b aa ba x)\n                          (?rT88 a b aa ba x) (?pc88 a b aa ba x)\n                          (?mpc88 a b aa ba x) (?xt88 a b aa ba x)\n                          \\<lfloor>(a, b)\\<rfloor>\n 3. \\<And>a b aa ba x.\n       \\<lbrakk>pc < length is;\n        P \\<turnstile> aa [\\<le>] a \\<and>\n        P \\<turnstile> ba [\\<le>\\<^sub>\\<top>] b;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> succs (is ! pc) (aa, ba)\n                          (?pc88 a b aa ba x) \\<noteq>\n                         []\n 4. \\<And>a b aa ba x.\n       \\<lbrakk>pc < length is;\n        P \\<turnstile> aa [\\<le>] a \\<and>\n        P \\<turnstile> ba [\\<le>\\<^sub>\\<top>] b;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> succs (is ! pc) (a, b) (?pc88 a b aa ba x) \\<noteq>\n                         []", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>pc < length is;\n        P \\<turnstile> aa [\\<le>] a \\<and>\n        P \\<turnstile> ba [\\<le>\\<^sub>\\<top>] b;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> app (is ! pc) P (?m88 a b aa ba x)\n                          (?rT88 a b aa ba x) (?pc88 a b aa ba x)\n                          (?mpc88 a b aa ba x) (?xt88 a b aa ba x)\n                          \\<lfloor>(a, b)\\<rfloor>\n 2. \\<And>a b aa ba x.\n       \\<lbrakk>pc < length is;\n        P \\<turnstile> aa [\\<le>] a \\<and>\n        P \\<turnstile> ba [\\<le>\\<^sub>\\<top>] b;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> succs (is ! pc) (aa, ba)\n                          (?pc88 a b aa ba x) \\<noteq>\n                         []\n 3. \\<And>a b aa ba x.\n       \\<lbrakk>pc < length is;\n        P \\<turnstile> aa [\\<le>] a \\<and>\n        P \\<turnstile> ba [\\<le>\\<^sub>\\<top>] b;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> succs (is ! pc) (a, b) (?pc88 a b aa ba x) \\<noteq>\n                         []", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>pc < length is;\n        P \\<turnstile> aa [\\<le>] a \\<and>\n        P \\<turnstile> ba [\\<le>\\<^sub>\\<top>] b;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> succs (is ! pc) (aa, ba) pc \\<noteq> []\n 2. \\<And>a b aa ba x.\n       \\<lbrakk>pc < length is;\n        P \\<turnstile> aa [\\<le>] a \\<and>\n        P \\<turnstile> ba [\\<le>\\<^sub>\\<top>] b;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> succs (is ! pc) (a, b) pc \\<noteq> []", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba x.\n       \\<lbrakk>pc < length is;\n        P \\<turnstile> aa [\\<le>] a \\<and>\n        P \\<turnstile> ba [\\<le>\\<^sub>\\<top>] b;\n        app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n         \\<lfloor>(a, b)\\<rfloor>;\n        t = \\<lfloor>(a, b)\\<rfloor>; s = \\<lfloor>(aa, ba)\\<rfloor>;\n        x \\<in> set (succs (is ! pc) (aa, ba) pc);\n        (x, \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)\n        \\<in> (\\<lambda>pc'.\n                  (pc', \\<lfloor>eff\\<^sub>i (is ! pc, P, a, b)\\<rfloor>)) `\n              set (succs (is ! pc) (a, b) pc)\\<rbrakk>\n       \\<Longrightarrow> succs (is ! pc) (a, b) pc \\<noteq> []", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma (in JVM_sl) bounded_step: \"bounded step (size is)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded step (length is)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded step (length is)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded\n     (err_step (length is)\n       (\\<lambda>pc. app (is ! pc) P mxs T\\<^sub>r pc (length is) xt)\n       (\\<lambda>pc. eff (is ! pc) P pc xt))\n     (length is)", "apply (unfold bounded_def err_step_def Effect.app_def Effect.eff_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p<length is.\n       \\<forall>\\<tau>.\n          \\<forall>(q, \\<tau>')\n                   \\<in>set (case \\<tau> of\n                             Err \\<Rightarrow> error (length is)\n                             | OK \\<tau> \\<Rightarrow>\n                                 if case \\<tau> of None \\<Rightarrow> True\n                                    | \\<lfloor>\\<tau>'\\<rfloor> \\<Rightarrow>\n  app\\<^sub>i (is ! p, P, p, mxs, T\\<^sub>r, \\<tau>') \\<and>\n  xcpt_app (is ! p) P p mxs xt \\<tau>' \\<and>\n  (\\<forall>(pc', \\<tau>')\n            \\<in>set (case \\<tau> of None \\<Rightarrow> []\n                      | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n                          norm_eff (is ! p) P p \\<tau> @\n                          xcpt_eff (is ! p) P p \\<tau> xt).\n      pc' < length is)\n                                 then map_snd OK\n (case \\<tau> of None \\<Rightarrow> []\n  | \\<lfloor>\\<tau>\\<rfloor> \\<Rightarrow>\n      norm_eff (is ! p) P p \\<tau> @ xcpt_eff (is ! p) P p \\<tau> xt)\n                                 else error (length is)).\n             q < length is", "apply (auto simp add: error_def map_snd_def split: err.splits option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "theorem (in JVM_sl) step_mono:\n  \"wf_prog wf_mb P \\<Longrightarrow> mono r step (size is) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_mb P \\<Longrightarrow> SemilatAlg.mono r step (length is) A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_mb P \\<Longrightarrow> SemilatAlg.mono r step (length is) A", "apply (simp add: JVM_le_Err_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_mb P \\<Longrightarrow>\n    SemilatAlg.mono (Err.le (sup_state_opt P))\n     (err_step (length is)\n       (\\<lambda>pc. app (is ! pc) P mxs T\\<^sub>r pc (length is) xt)\n       (\\<lambda>pc. eff (is ! pc) P pc xt))\n     (length is) (states P mxs (Suc (length Ts + mxl\\<^sub>0)))", "apply (insert bounded_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> SemilatAlg.mono (Err.le (sup_state_opt P))\n                       (err_step (length is)\n                         (\\<lambda>pc.\n                             app (is ! pc) P mxs T\\<^sub>r pc (length is)\n                              xt)\n                         (\\<lambda>pc. eff (is ! pc) P pc xt))\n                       (length is)\n                       (states P mxs (Suc (length Ts + mxl\\<^sub>0)))", "apply (unfold JVM_states_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> SemilatAlg.mono (Err.le (sup_state_opt P))\n                       (err_step (length is)\n                         (\\<lambda>pc.\n                             app (is ! pc) P mxs T\\<^sub>r pc (length is)\n                              xt)\n                         (\\<lambda>pc. eff (is ! pc) P pc xt))\n                       (length is)\n                       (err (opt (\\<Union>\n                                   {list n (types P) |n.\n                                    n \\<le> mxs} \\<times>\n                                  list (Suc (length Ts + mxl\\<^sub>0))\n                                   (err (types P)))))", "apply (rule mono_lift)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> order (sup_state_opt P)\n 2. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> app_mono (sup_state_opt P)\n                       (\\<lambda>pc.\n                           app (is ! pc) P mxs T\\<^sub>r pc (length is) xt)\n                       (length is)\n                       (opt (\\<Union>\n                              {list n (types P) |n. n \\<le> mxs} \\<times>\n                             list (Suc (length Ts + mxl\\<^sub>0))\n                              (err (types P))))\n 3. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> bounded\n                       (err_step (length is)\n                         (\\<lambda>pc.\n                             app (is ! pc) P mxs T\\<^sub>r pc (length is)\n                              xt)\n                         (\\<lambda>pc. eff (is ! pc) P pc xt))\n                       (length is)\n 4. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s p t.\n                         s \\<in> opt (\\<Union>\n {list n (types P) |n. n \\<le> mxs} \\<times>\nlist (Suc (length Ts + mxl\\<^sub>0)) (err (types P))) \\<and>\n                         p < length is \\<and>\n                         s \\<sqsubseteq>\\<^bsub>sup_state_opt\n           P\\<^esub> t \\<longrightarrow>\n                         app (is ! p) P mxs T\\<^sub>r p (length is) xt\n                          t \\<longrightarrow>\n                         set (eff (is ! p) P p xt s) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (eff (is ! p) P p xt t)", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> app_mono (sup_state_opt P)\n                       (\\<lambda>pc.\n                           app (is ! pc) P mxs T\\<^sub>r pc (length is) xt)\n                       (length is)\n                       (opt (\\<Union>\n                              {list n (types P) |n. n \\<le> mxs} \\<times>\n                             list (Suc (length Ts + mxl\\<^sub>0))\n                              (err (types P))))\n 2. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> bounded\n                       (err_step (length is)\n                         (\\<lambda>pc.\n                             app (is ! pc) P mxs T\\<^sub>r pc (length is)\n                              xt)\n                         (\\<lambda>pc. eff (is ! pc) P pc xt))\n                       (length is)\n 3. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s p t.\n                         s \\<in> opt (\\<Union>\n {list n (types P) |n. n \\<le> mxs} \\<times>\nlist (Suc (length Ts + mxl\\<^sub>0)) (err (types P))) \\<and>\n                         p < length is \\<and>\n                         s \\<sqsubseteq>\\<^bsub>sup_state_opt\n           P\\<^esub> t \\<longrightarrow>\n                         app (is ! p) P mxs T\\<^sub>r p (length is) xt\n                          t \\<longrightarrow>\n                         set (eff (is ! p) P p xt s) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (eff (is ! p) P p xt t)", "apply (unfold app_mono_def lesub_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s p t.\n                         s \\<in> opt (\\<Union>\n {list n (types P) |n. n \\<le> mxs} \\<times>\nlist (Suc (length Ts + mxl\\<^sub>0)) (err (types P))) \\<and>\n                         p < length is \\<and>\n                         P \\<turnstile> s \\<le>' t \\<longrightarrow>\n                         app (is ! p) P mxs T\\<^sub>r p (length is) xt\n                          t \\<longrightarrow>\n                         app (is ! p) P mxs T\\<^sub>r p (length is) xt s\n 2. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> bounded\n                       (err_step (length is)\n                         (\\<lambda>pc.\n                             app (is ! pc) P mxs T\\<^sub>r pc (length is)\n                              xt)\n                         (\\<lambda>pc. eff (is ! pc) P pc xt))\n                       (length is)\n 3. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s p t.\n                         s \\<in> opt (\\<Union>\n {list n (types P) |n. n \\<le> mxs} \\<times>\nlist (Suc (length Ts + mxl\\<^sub>0)) (err (types P))) \\<and>\n                         p < length is \\<and>\n                         P \\<turnstile> s \\<le>' t \\<longrightarrow>\n                         app (is ! p) P mxs T\\<^sub>r p (length is) xt\n                          t \\<longrightarrow>\n                         set (eff (is ! p) P p xt s) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (eff (is ! p) P p xt t)", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s p t.\n       \\<lbrakk>wf_prog wf_mb P;\n        bounded\n         (err_step (length is)\n           (\\<lambda>pc. app (is ! pc) P mxs T\\<^sub>r pc (length is) xt)\n           (\\<lambda>pc. eff (is ! pc) P pc xt))\n         (length is);\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        p < length is; P \\<turnstile> s \\<le>' t;\n        app (is ! p) P mxs T\\<^sub>r p (length is) xt t\\<rbrakk>\n       \\<Longrightarrow> app (is ! p) P mxs T\\<^sub>r p (length is) xt s\n 2. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> bounded\n                       (err_step (length is)\n                         (\\<lambda>pc.\n                             app (is ! pc) P mxs T\\<^sub>r pc (length is)\n                              xt)\n                         (\\<lambda>pc. eff (is ! pc) P pc xt))\n                       (length is)\n 3. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s p t.\n                         s \\<in> opt (\\<Union>\n {list n (types P) |n. n \\<le> mxs} \\<times>\nlist (Suc (length Ts + mxl\\<^sub>0)) (err (types P))) \\<and>\n                         p < length is \\<and>\n                         P \\<turnstile> s \\<le>' t \\<longrightarrow>\n                         app (is ! p) P mxs T\\<^sub>r p (length is) xt\n                          t \\<longrightarrow>\n                         set (eff (is ! p) P p xt s) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (eff (is ! p) P p xt t)", "apply (erule (2) app_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> bounded\n                       (err_step (length is)\n                         (\\<lambda>pc.\n                             app (is ! pc) P mxs T\\<^sub>r pc (length is)\n                              xt)\n                         (\\<lambda>pc. eff (is ! pc) P pc xt))\n                       (length is)\n 2. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s p t.\n                         s \\<in> opt (\\<Union>\n {list n (types P) |n. n \\<le> mxs} \\<times>\nlist (Suc (length Ts + mxl\\<^sub>0)) (err (types P))) \\<and>\n                         p < length is \\<and>\n                         P \\<turnstile> s \\<le>' t \\<longrightarrow>\n                         app (is ! p) P mxs T\\<^sub>r p (length is) xt\n                          t \\<longrightarrow>\n                         set (eff (is ! p) P p xt s) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (eff (is ! p) P p xt t)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_mb P; bounded step (length is)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s p t.\n                         s \\<in> opt (\\<Union>\n {list n (types P) |n. n \\<le> mxs} \\<times>\nlist (Suc (length Ts + mxl\\<^sub>0)) (err (types P))) \\<and>\n                         p < length is \\<and>\n                         P \\<turnstile> s \\<le>' t \\<longrightarrow>\n                         app (is ! p) P mxs T\\<^sub>r p (length is) xt\n                          t \\<longrightarrow>\n                         set (eff (is ! p) P p xt s) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (eff (is ! p) P p xt t)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s p t.\n       \\<lbrakk>wf_prog wf_mb P; bounded step (length is);\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        p < length is; P \\<turnstile> s \\<le>' t;\n        app (is ! p) P mxs T\\<^sub>r p (length is) xt t\\<rbrakk>\n       \\<Longrightarrow> set (eff (is ! p) P p xt s) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (eff (is ! p) P p xt t)", "apply (drule eff_mono)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s p t.\n       \\<lbrakk>bounded step (length is);\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        p < length is; P \\<turnstile> s \\<le>' t;\n        app (is ! p) P mxs T\\<^sub>r p (length is) xt t\\<rbrakk>\n       \\<Longrightarrow> ?pc32 s p t < length is\n 2. \\<And>s p t.\n       \\<lbrakk>bounded step (length is);\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        p < length is; P \\<turnstile> s \\<le>' t;\n        app (is ! p) P mxs T\\<^sub>r p (length is) xt t\\<rbrakk>\n       \\<Longrightarrow> ?s32 s p t \n                         \\<sqsubseteq>\\<^bsub>sup_state_opt\n         P\\<^esub> ?t32 s p t\n 3. \\<And>s p t.\n       \\<lbrakk>bounded step (length is);\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        p < length is; P \\<turnstile> s \\<le>' t;\n        app (is ! p) P mxs T\\<^sub>r p (length is) xt t\\<rbrakk>\n       \\<Longrightarrow> app (?pc32 s p t) (?t32 s p t)\n 4. \\<And>s p t.\n       \\<lbrakk>bounded step (length is);\n        s \\<in> opt (\\<Union> {list n (types P) |n. n \\<le> mxs} \\<times>\n                     list (Suc (length Ts + mxl\\<^sub>0)) (err (types P)));\n        p < length is; P \\<turnstile> s \\<le>' t;\n        app (is ! p) P mxs T\\<^sub>r p (length is) xt t;\n        set (eff (?pc32 s p t) (?s32 s p t)) \n        {\\<sqsubseteq>\\<^bsub>sup_state_opt\n                               P\\<^esub>} set\n     (eff (?pc32 s p t) (?t32 s p t))\\<rbrakk>\n       \\<Longrightarrow> set (eff (is ! p) P p xt s) \n                         {\\<sqsubseteq>\\<^bsub>sup_state_opt\n          P\\<^esub>} set (eff (is ! p) P p xt t)", "apply (auto simp add: lesub_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma (in start_context) first_in_A [iff]: \"OK first \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OK first \\<in> A", "using Ts C"], ["proof (prove)\nusing this:\n  set Ts \\<subseteq> types P\n  is_class P C\n\ngoal (1 subgoal):\n 1. OK first \\<in> A", "by (force intro!: list_appendI simp add: JVM_states_unfold)"], ["", "lemma (in JVM_sl) wt_method_def2:\n  \"wt_method P C' Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt \\<tau>s =\n  (is \\<noteq> [] \\<and> \n   size \\<tau>s = size is \\<and>\n   OK ` set \\<tau>s \\<subseteq> states P mxs mxl \\<and>\n   wt_start P C' Ts mxl\\<^sub>0 \\<tau>s \\<and> \n   wt_app_eff (sup_state_opt P) app eff \\<tau>s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wt_method P C' Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt \\<tau>s =\n    (is \\<noteq> [] \\<and>\n     length \\<tau>s = length is \\<and>\n     OK ` set \\<tau>s \\<subseteq> states P mxs mxl \\<and>\n     wt_start P C' Ts mxl\\<^sub>0 \\<tau>s \\<and>\n     wt_app_eff (sup_state_opt P) app eff \\<tau>s)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wt_method P C' Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt \\<tau>s =\n    (is \\<noteq> [] \\<and>\n     length \\<tau>s = length is \\<and>\n     OK ` set \\<tau>s \\<subseteq> states P mxs mxl \\<and>\n     wt_start P C' Ts mxl\\<^sub>0 \\<tau>s \\<and>\n     wt_app_eff (sup_state_opt P) app eff \\<tau>s)", "apply (unfold wt_method_def wt_app_eff_def wt_instr_def lesub_def check_types_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < length is \\<and>\n     length \\<tau>s = length is \\<and>\n     set (map OK \\<tau>s)\n     \\<subseteq> states P mxs (1 + length Ts + mxl\\<^sub>0) \\<and>\n     wt_start P C' Ts mxl\\<^sub>0 \\<tau>s \\<and>\n     (\\<forall>pc<length is.\n         app (is ! pc) P mxs T\\<^sub>r pc (length is) xt\n          (\\<tau>s ! pc) \\<and>\n         (\\<forall>(pc', \\<tau>')\n                   \\<in>set (eff (is ! pc) P pc xt (\\<tau>s ! pc)).\n             P \\<turnstile> \\<tau>' \\<le>' \\<tau>s ! pc'))) =\n    (is \\<noteq> [] \\<and>\n     length \\<tau>s = length is \\<and>\n     OK ` set \\<tau>s \\<subseteq> states P mxs mxl \\<and>\n     wt_start P C' Ts mxl\\<^sub>0 \\<tau>s \\<and>\n     (\\<forall>p<length \\<tau>s.\n         app p (\\<tau>s ! p) \\<and>\n         (\\<forall>(q, \\<tau>)\\<in>set (eff p (\\<tau>s ! p)).\n             P \\<turnstile> \\<tau> \\<le>' \\<tau>s ! q)))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "end"]]}