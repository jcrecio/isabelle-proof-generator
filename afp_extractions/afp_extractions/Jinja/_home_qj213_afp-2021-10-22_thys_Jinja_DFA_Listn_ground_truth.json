{"file_name": "/home/qj213/afp-2021-10-22/thys/Jinja/DFA/Listn.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jinja", "problem_names": ["lemmas [simp] = set_update_subsetI", "lemma unfold_lesub_list: \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys = Listn.le r xs ys\"", "lemma Nil_le_conv [iff]: \"([] [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys) = (ys = [])\"", "lemma Cons_notle_Nil [iff]: \"\\<not> x#xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] []\"", "lemma Cons_le_Cons [iff]: \"x#xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y#ys = (x \\<sqsubseteq>\\<^sub>r y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys)\"", "lemma Cons_less_Conss [simp]:\n  \"order r \\<Longrightarrow>  x#xs [\\<sqsubset>\\<^sub>r] y#ys = (x \\<sqsubset>\\<^sub>r y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or> x = y \\<and> xs [\\<sqsubset>\\<^sub>r] ys)\"", "lemma list_update_le_cong:\n  \"\\<lbrakk> i<size xs; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; x \\<sqsubseteq>\\<^sub>r y \\<rbrakk> \\<Longrightarrow> xs[i:=x] [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys[i:=y]\"", "lemma le_listD: \"\\<lbrakk> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; p < size xs \\<rbrakk> \\<Longrightarrow> xs!p \\<sqsubseteq>\\<^sub>r ys!p\"", "lemma le_list_refl: \"\\<forall>x. x \\<sqsubseteq>\\<^sub>r x \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\"", "lemma le_list_trans: \"\\<lbrakk> order r; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<rbrakk> \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs\"", "lemma le_list_antisym: \"\\<lbrakk> order r; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs \\<rbrakk> \\<Longrightarrow> xs = ys\"", "lemma order_listI [simp, intro!]: \"order r \\<Longrightarrow> order(Listn.le r)\"", "lemma lesub_list_impl_same_size [simp]: \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow> size ys = size xs\"", "lemma lesssub_lengthD: \"xs [\\<sqsubset>\\<^sub>r] ys \\<Longrightarrow> size ys = size xs\"", "lemma le_list_appendI: \"a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b \\<Longrightarrow> c [\\<sqsubseteq>\\<^bsub>r\\<^esub>] d \\<Longrightarrow> a@c [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b@d\"", "lemma le_listI:\n  assumes \"length a = length b\"\n  assumes \"\\<And>n. n < length a \\<Longrightarrow> a!n \\<sqsubseteq>\\<^sub>r b!n\"\n  shows \"a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b\"", "lemma listI: \"\\<lbrakk> size xs = n; set xs \\<subseteq> A \\<rbrakk> \\<Longrightarrow> xs \\<in> list n A\"", "lemma listE_length [simp]: \"xs \\<in> list n A \\<Longrightarrow> size xs = n\"", "lemma less_lengthI: \"\\<lbrakk> xs \\<in> list n A; p < n \\<rbrakk> \\<Longrightarrow> p < size xs\"", "lemma listE_set [simp]: \"xs \\<in> list n A \\<Longrightarrow> set xs \\<subseteq> A\"", "lemma list_0 [simp]: \"list 0 A = {[]}\"", "lemma in_list_Suc_iff:\n  \"(xs \\<in> list (Suc n) A) = (\\<exists>y\\<in>A. \\<exists>ys \\<in> list n A. xs = y#ys)\"", "lemma Cons_in_list_Suc [iff]:\n  \"(x#xs \\<in> list (Suc n) A) = (x\\<in>A \\<and> xs \\<in> list n A)\"", "lemma list_not_empty:\n  \"\\<exists>a. a\\<in>A \\<Longrightarrow> \\<exists>xs. xs \\<in> list n A\"", "lemma nth_in [rule_format, simp]:\n  \"\\<forall>i n. size xs = n \\<longrightarrow> set xs \\<subseteq> A \\<longrightarrow> i < n \\<longrightarrow> (xs!i) \\<in> A\"", "lemma listE_nth_in: \"\\<lbrakk> xs \\<in> list n A; i < n \\<rbrakk> \\<Longrightarrow> xs!i \\<in> A\"", "lemma listn_Cons_Suc [elim!]:\n  \"l#xs \\<in> list n A \\<Longrightarrow> (\\<And>n'. n = Suc n' \\<Longrightarrow> l \\<in> A \\<Longrightarrow> xs \\<in> list n' A \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma listn_appendE [elim!]:\n  \"a@b \\<in> list n A \\<Longrightarrow> (\\<And>n1 n2. n=n1+n2 \\<Longrightarrow> a \\<in> list n1 A \\<Longrightarrow> b \\<in> list n2 A \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma listt_update_in_list [simp, intro!]:\n  \"\\<lbrakk> xs \\<in> list n A; x\\<in>A \\<rbrakk> \\<Longrightarrow> xs[i := x] \\<in> list n A\"", "lemma list_appendI [intro?]:\n  \"\\<lbrakk> a \\<in> list n A; b \\<in> list m A \\<rbrakk> \\<Longrightarrow> a @ b \\<in> list (n+m) A\"", "lemma list_map [simp]: \"(map f xs \\<in> list (size xs) A) = (f ` set xs \\<subseteq> A)\"", "lemma list_replicateI [intro]: \"x \\<in> A \\<Longrightarrow> replicate n x \\<in> list n A\"", "lemma plus_list_Nil [simp]: \"[] [\\<squnion>\\<^bsub>f\\<^esub>] xs = []\"", "lemma plus_list_Cons [simp]:\n  \"(x#xs) [\\<squnion>\\<^bsub>f\\<^esub>] ys = (case ys of [] \\<Rightarrow> [] | y#ys \\<Rightarrow> (x \\<squnion>\\<^sub>f y)#(xs [\\<squnion>\\<^bsub>f\\<^esub>] ys))\"", "lemma length_plus_list [rule_format, simp]:\n  \"\\<forall>ys. size(xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = min(size xs) (size ys)\"", "lemma nth_plus_list [rule_format, simp]:\n  \"\\<forall>xs ys i. size xs = n \\<longrightarrow> size ys = n \\<longrightarrow> i<n \\<longrightarrow> (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys)!i = (xs!i) \\<squnion>\\<^sub>f (ys!i)\"", "lemma (in Semilat) plus_list_ub1 [rule_format]:\n \"\\<lbrakk> set xs \\<subseteq> A; set ys \\<subseteq> A; size xs = size ys \\<rbrakk>\n  \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs [\\<squnion>\\<^bsub>f\\<^esub>] ys\"", "lemma (in Semilat) plus_list_ub2:\n \"\\<lbrakk>set xs \\<subseteq> A; set ys \\<subseteq> A; size xs = size ys \\<rbrakk> \\<Longrightarrow> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs [\\<squnion>\\<^bsub>f\\<^esub>] ys\"", "lemma (in Semilat) plus_list_lub [rule_format]:\nshows \"\\<forall>xs ys zs. set xs \\<subseteq> A \\<longrightarrow> set ys \\<subseteq> A \\<longrightarrow> set zs \\<subseteq> A\n  \\<longrightarrow> size xs = n \\<and> size ys = n \\<longrightarrow>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<longrightarrow> xs [\\<squnion>\\<^bsub>f\\<^esub>] ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs\"", "lemma (in Semilat) list_update_incr [rule_format]:\n \"x\\<in>A \\<Longrightarrow> set xs \\<subseteq> A \\<longrightarrow>\n  (\\<forall>i. i<size xs \\<longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs[i := x \\<squnion>\\<^sub>f xs!i])\"", "lemma acc_le_listI [intro!]:\n  \"\\<lbrakk> order r; acc r \\<rbrakk> \\<Longrightarrow> acc(Listn.le r)\"", "lemma closed_listI:\n  \"closed S f \\<Longrightarrow> closed (list n S) (map2 f)\"", "lemma Listn_sl_aux:\nassumes \"Semilat A r f\" shows \"semilat (Listn.sl n (A,r,f))\"", "lemma Listn_sl: \"semilat L \\<Longrightarrow> semilat (Listn.sl n L)\"", "lemma coalesce_in_err_list [rule_format]:\n  \"\\<forall>xes. xes \\<in> list n (err A) \\<longrightarrow> coalesce xes \\<in> err(list n A)\"", "lemma lem: \"\\<And>x xs. x \\<squnion>\\<^bsub>(#)\\<^esub> xs = x#xs\"", "lemma coalesce_eq_OK1_D [rule_format]:\n  \"semilat(err A, Err.le r, lift2 f) \\<Longrightarrow>\n  \\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>ys. ys \\<in> list n A \\<longrightarrow>\n  (\\<forall>zs. coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs \\<longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))\"", "lemma coalesce_eq_OK2_D [rule_format]:\n  \"semilat(err A, Err.le r, lift2 f) \\<Longrightarrow>\n  \\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>ys. ys \\<in> list n A \\<longrightarrow>\n  (\\<forall>zs. coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs \\<longrightarrow> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))\"", "lemma lift2_le_ub:\n  \"\\<lbrakk> semilat(err A, Err.le r, lift2 f); x\\<in>A; y\\<in>A; x \\<squnion>\\<^sub>f y = OK z;\n      u\\<in>A; x \\<sqsubseteq>\\<^sub>r u; y \\<sqsubseteq>\\<^sub>r u \\<rbrakk> \\<Longrightarrow> z \\<sqsubseteq>\\<^sub>r u\"", "lemma coalesce_eq_OK_ub_D [rule_format]:\n  \"semilat(err A, Err.le r, lift2 f) \\<Longrightarrow>\n  \\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>ys. ys \\<in> list n A \\<longrightarrow>\n  (\\<forall>zs us. coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us\n           \\<and> us \\<in> list n A \\<longrightarrow> zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us))\"", "lemma lift2_eq_ErrD:\n  \"\\<lbrakk> x \\<squnion>\\<^sub>f y = Err; semilat(err A, Err.le r, lift2 f); x\\<in>A; y\\<in>A \\<rbrakk>\n  \\<Longrightarrow> \\<not>(\\<exists>u\\<in>A. x \\<sqsubseteq>\\<^sub>r u \\<and> y \\<sqsubseteq>\\<^sub>r u)\"", "lemma coalesce_eq_Err_D [rule_format]:\n  \"\\<lbrakk> semilat(err A, Err.le r, lift2 f) \\<rbrakk>\n  \\<Longrightarrow> \\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>ys. ys \\<in> list n A \\<longrightarrow>\n      coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = Err \\<longrightarrow>\n      \\<not>(\\<exists>zs \\<in> list n A. xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))\"", "lemma closed_err_lift2_conv:\n  \"closed (err A) (lift2 f) = (\\<forall>x\\<in>A. \\<forall>y\\<in>A. x \\<squnion>\\<^sub>f y \\<in> err A)\"", "lemma closed_map2_list [rule_format]:\n  \"closed (err A) (lift2 f) \\<Longrightarrow>\n  \\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>ys. ys \\<in> list n A \\<longrightarrow>\n  map2 f xs ys \\<in> list n (err A))\"", "lemma closed_lift2_sup:\n  \"closed (err A) (lift2 f) \\<Longrightarrow>\n  closed (err (list n A)) (lift2 (sup f))\"", "lemma err_semilat_sup:\n  \"err_semilat (A,r,f) \\<Longrightarrow>\n  err_semilat (list n A, Listn.le r, sup f)\"", "lemma err_semilat_upto_esl:\n  \"\\<And>L. err_semilat L \\<Longrightarrow> err_semilat(upto_esl m L)\""], "translations": [["", "lemmas [simp] = set_update_subsetI"], ["", "lemma unfold_lesub_list: \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys = Listn.le r xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys) = Listn.le r xs ys", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys) = Listn.le r xs ys", "by (simp add: lesub_def)"], ["", "(*>*)"], ["", "lemma Nil_le_conv [iff]: \"([] [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys) = (ys = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys) = (ys = [])", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys) = (ys = [])", "apply (unfold lesub_def Listn.le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 r [] ys = (ys = [])", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Cons_notle_Nil [iff]: \"\\<not> x#xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] []", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] []", "apply (unfold lesub_def Listn.le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> list_all2 r (x # xs) []", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Cons_le_Cons [iff]: \"x#xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y#ys = (x \\<sqsubseteq>\\<^sub>r y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys) =\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and>\n     xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys) =\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and>\n     xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys)", "by (simp add: lesub_def Listn.le_def)"], ["", "(*>*)"], ["", "lemma Cons_less_Conss [simp]:\n  \"order r \\<Longrightarrow>  x#xs [\\<sqsubset>\\<^sub>r] y#ys = (x \\<sqsubset>\\<^sub>r y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or> x = y \\<and> xs [\\<sqsubset>\\<^sub>r] ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow>\n    (x # xs [\\<sqsubset>\\<^bsub>r\\<^esub>] y # ys) =\n    (x \\<sqsubset>\\<^bsub>r\\<^esub> y \\<and>\n     xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n     x = y \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow>\n    (x # xs [\\<sqsubset>\\<^bsub>r\\<^esub>] y # ys) =\n    (x \\<sqsubset>\\<^bsub>r\\<^esub> y \\<and>\n     xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n     x = y \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys)", "apply (unfold lesssub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow>\n    (x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n     x # xs \\<noteq> y # ys) =\n    ((x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n     xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n     x = y \\<and>\n     xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma list_update_le_cong:\n  \"\\<lbrakk> i<size xs; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; x \\<sqsubseteq>\\<^sub>r y \\<rbrakk> \\<Longrightarrow> xs[i:=x] [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys[i:=y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\\<rbrakk>\n    \\<Longrightarrow> xs[i := x] [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys[i := y]", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\\<rbrakk>\n    \\<Longrightarrow> xs[i := x] [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys[i := y]", "apply (unfold unfold_lesub_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; Listn.le r xs ys;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\\<rbrakk>\n    \\<Longrightarrow> Listn.le r (xs[i := x]) (ys[i := y])", "apply (unfold Listn.le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; list_all2 (\\<lambda>x. lesub x r) xs ys;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\\<rbrakk>\n    \\<Longrightarrow> list_all2 (\\<lambda>x. lesub x r) (xs[i := x])\n                       (ys[i := y])", "apply (simp add: list_all2_update_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma le_listD: \"\\<lbrakk> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; p < size xs \\<rbrakk> \\<Longrightarrow> xs!p \\<sqsubseteq>\\<^sub>r ys!p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; p < length xs\\<rbrakk>\n    \\<Longrightarrow> xs ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ys ! p", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; p < length xs\\<rbrakk>\n    \\<Longrightarrow> xs ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ys ! p", "by (simp add: Listn.le_def lesub_def list_all2_nthD)"], ["", "(*>*)"], ["", "lemma le_list_refl: \"\\<forall>x. x \\<sqsubseteq>\\<^sub>r x \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<sqsubseteq>\\<^bsub>r\\<^esub> x \\<Longrightarrow>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<sqsubseteq>\\<^bsub>r\\<^esub> x \\<Longrightarrow>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs", "apply (simp add: unfold_lesub_list lesub_def Listn.le_def list_all2_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma le_list_trans: \"\\<lbrakk> order r; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<rbrakk> \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys;\n     ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs\\<rbrakk>\n    \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys;\n     ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs\\<rbrakk>\n    \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "apply (unfold unfold_lesub_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; Listn.le r xs ys; Listn.le r ys zs\\<rbrakk>\n    \\<Longrightarrow> Listn.le r xs zs", "apply (unfold Listn.le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n     list_all2 (\\<lambda>x. lesub x r) ys zs\\<rbrakk>\n    \\<Longrightarrow> list_all2 (\\<lambda>x. lesub x r) xs zs", "apply (rule list_all2_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n        list_all2 (\\<lambda>x. lesub x r) ys zs; ?P1.0 a b;\n        ?P2.0 b c\\<rbrakk>\n       \\<Longrightarrow> a \\<sqsubseteq>\\<^bsub>r\\<^esub> c\n 2. \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n     list_all2 (\\<lambda>x. lesub x r) ys zs\\<rbrakk>\n    \\<Longrightarrow> list_all2 ?P1.0 xs ?bs\n 3. \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n     list_all2 (\\<lambda>x. lesub x r) ys zs\\<rbrakk>\n    \\<Longrightarrow> list_all2 ?P2.0 ?bs zs", "apply (erule order_trans)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>list_all2 (\\<lambda>x. lesub x r) xs ys;\n        list_all2 (\\<lambda>x. lesub x r) ys zs; ?P1.0 a b;\n        ?P2.0 b c\\<rbrakk>\n       \\<Longrightarrow> a \\<sqsubseteq>\\<^bsub>r\\<^esub> ?y4 a b c\n 2. \\<And>a b c.\n       \\<lbrakk>list_all2 (\\<lambda>x. lesub x r) xs ys;\n        list_all2 (\\<lambda>x. lesub x r) ys zs; ?P1.0 a b;\n        ?P2.0 b c\\<rbrakk>\n       \\<Longrightarrow> ?y4 a b c \\<sqsubseteq>\\<^bsub>r\\<^esub> c\n 3. \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n     list_all2 (\\<lambda>x. lesub x r) ys zs\\<rbrakk>\n    \\<Longrightarrow> list_all2 ?P1.0 xs ?bs\n 4. \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n     list_all2 (\\<lambda>x. lesub x r) ys zs\\<rbrakk>\n    \\<Longrightarrow> list_all2 ?P2.0 ?bs zs", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma le_list_antisym: \"\\<lbrakk> order r; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs \\<rbrakk> \\<Longrightarrow> xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys;\n     ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys;\n     ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "apply (unfold unfold_lesub_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; Listn.le r xs ys; Listn.le r ys xs\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "apply (unfold Listn.le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n     list_all2 (\\<lambda>x. lesub x r) ys xs\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "apply (rule list_all2_antisym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n        list_all2 (\\<lambda>x. lesub x r) ys xs; ?P x y; ?Q y x\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n     list_all2 (\\<lambda>x. lesub x r) ys xs\\<rbrakk>\n    \\<Longrightarrow> list_all2 ?P xs ys\n 3. \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n     list_all2 (\\<lambda>x. lesub x r) ys xs\\<rbrakk>\n    \\<Longrightarrow> list_all2 ?Q ys xs", "apply (rule order_antisym)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n        list_all2 (\\<lambda>x. lesub x r) ys xs; ?P x y; ?Q y x\\<rbrakk>\n       \\<Longrightarrow> order (?r4 x y)\n 2. \\<And>x y.\n       \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n        list_all2 (\\<lambda>x. lesub x r) ys xs; ?P x y; ?Q y x\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>?r4 x y\\<^esub> y\n 3. \\<And>x y.\n       \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n        list_all2 (\\<lambda>x. lesub x r) ys xs; ?P x y; ?Q y x\\<rbrakk>\n       \\<Longrightarrow> y \\<sqsubseteq>\\<^bsub>?r4 x y\\<^esub> x\n 4. \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n     list_all2 (\\<lambda>x. lesub x r) ys xs\\<rbrakk>\n    \\<Longrightarrow> list_all2 ?P xs ys\n 5. \\<lbrakk>order r; list_all2 (\\<lambda>x. lesub x r) xs ys;\n     list_all2 (\\<lambda>x. lesub x r) ys xs\\<rbrakk>\n    \\<Longrightarrow> list_all2 ?Q ys xs", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma order_listI [simp, intro!]: \"order r \\<Longrightarrow> order(Listn.le r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow> order (Listn.le r)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow> order (Listn.le r)", "apply (subst order_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow>\n    (\\<forall>x. x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x) \\<and>\n    (\\<forall>x y.\n        x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y \\<and>\n        y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \\<longrightarrow>\n        x = y) \\<and>\n    (\\<forall>x y z.\n        x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y \\<and>\n        y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<longrightarrow>\n        x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z)", "apply (blast intro: le_list_refl le_list_trans le_list_antisym\n             dest: order_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma lesub_list_impl_same_size [simp]: \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow> size ys = size xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    length ys = length xs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    length ys = length xs", "apply (unfold Listn.le_def lesub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 r xs ys \\<Longrightarrow> length ys = length xs", "apply (simp add: list_all2_lengthD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma lesssub_lengthD: \"xs [\\<sqsubset>\\<^sub>r] ys \\<Longrightarrow> size ys = size xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    length ys = length xs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    length ys = length xs", "apply (unfold lesssub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    length ys = length xs", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma le_list_appendI: \"a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b \\<Longrightarrow> c [\\<sqsubseteq>\\<^bsub>r\\<^esub>] d \\<Longrightarrow> a@c [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b@d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b;\n     c [\\<sqsubseteq>\\<^bsub>r\\<^esub>] d\\<rbrakk>\n    \\<Longrightarrow> a @ c [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b @ d", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b;\n     c [\\<sqsubseteq>\\<^bsub>r\\<^esub>] d\\<rbrakk>\n    \\<Longrightarrow> a @ c [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b @ d", "apply (unfold Listn.le_def lesub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all2 r a b; list_all2 r c d\\<rbrakk>\n    \\<Longrightarrow> list_all2 r (a @ c) (b @ d)", "apply (rule list_all2_appendI, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma le_listI:\n  assumes \"length a = length b\"\n  assumes \"\\<And>n. n < length a \\<Longrightarrow> a!n \\<sqsubseteq>\\<^sub>r b!n\"\n  shows \"a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b", "from assms"], ["proof (chain)\npicking this:\n  length a = length b\n  ?n < length a \\<Longrightarrow>\n  a ! ?n \\<sqsubseteq>\\<^bsub>r\\<^esub> b ! ?n", "have \"list_all2 r a b\""], ["proof (prove)\nusing this:\n  length a = length b\n  ?n < length a \\<Longrightarrow>\n  a ! ?n \\<sqsubseteq>\\<^bsub>r\\<^esub> b ! ?n\n\ngoal (1 subgoal):\n 1. list_all2 r a b", "by (simp add: list_all2_all_nthI lesub_def)"], ["proof (state)\nthis:\n  list_all2 r a b\n\ngoal (1 subgoal):\n 1. a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b", "then"], ["proof (chain)\npicking this:\n  list_all2 r a b", "show ?thesis"], ["proof (prove)\nusing this:\n  list_all2 r a b\n\ngoal (1 subgoal):\n 1. a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b", "by (simp add: Listn.le_def lesub_def)"], ["proof (state)\nthis:\n  a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] b\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma listI: \"\\<lbrakk> size xs = n; set xs \\<subseteq> A \\<rbrakk> \\<Longrightarrow> xs \\<in> list n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = n; set xs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> xs \\<in> list n A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = n; set xs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> xs \\<in> list n A", "apply (unfold list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = n; set xs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> xs \\<in> {xs.\n                                length xs = n \\<and> set xs \\<subseteq> A}", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)\n\n(* FIXME: remove simp *)"], ["", "lemma listE_length [simp]: \"xs \\<in> list n A \\<Longrightarrow> size xs = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow> length xs = n", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow> length xs = n", "apply (unfold list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> {xs.\n              length xs = n \\<and> set xs \\<subseteq> A} \\<Longrightarrow>\n    length xs = n", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma less_lengthI: \"\\<lbrakk> xs \\<in> list n A; p < n \\<rbrakk> \\<Longrightarrow> p < size xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> list n A; p < n\\<rbrakk>\n    \\<Longrightarrow> p < length xs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> list n A; p < n\\<rbrakk>\n    \\<Longrightarrow> p < length xs", "by simp"], ["", "(*>*)"], ["", "lemma listE_set [simp]: \"xs \\<in> list n A \\<Longrightarrow> set xs \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow> set xs \\<subseteq> A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow> set xs \\<subseteq> A", "apply (unfold list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> {xs.\n              length xs = n \\<and> set xs \\<subseteq> A} \\<Longrightarrow>\n    set xs \\<subseteq> A", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma list_0 [simp]: \"list 0 A = {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list 0 A = {[]}", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list 0 A = {[]}", "apply (unfold list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs. length xs = 0 \\<and> set xs \\<subseteq> A} = {[]}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma in_list_Suc_iff:\n  \"(xs \\<in> list (Suc n) A) = (\\<exists>y\\<in>A. \\<exists>ys \\<in> list n A. xs = y#ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> list (Suc n) A) =\n    (\\<exists>y\\<in>A. \\<exists>ys\\<in>list n A. xs = y # ys)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> list (Suc n) A) =\n    (\\<exists>y\\<in>A. \\<exists>ys\\<in>list n A. xs = y # ys)", "apply (unfold list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> {xs. length xs = Suc n \\<and> set xs \\<subseteq> A}) =\n    (\\<exists>y\\<in>A.\n        \\<exists>ys\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n           xs = y # ys)", "apply (case_tac \"xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    (xs \\<in> {xs. length xs = Suc n \\<and> set xs \\<subseteq> A}) =\n    (\\<exists>y\\<in>A.\n        \\<exists>ys\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n           xs = y # ys)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       (xs \\<in> {xs. length xs = Suc n \\<and> set xs \\<subseteq> A}) =\n       (\\<exists>y\\<in>A.\n           \\<exists>ys\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n              xs = y # ys)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Cons_in_list_Suc [iff]:\n  \"(x#xs \\<in> list (Suc n) A) = (x\\<in>A \\<and> xs \\<in> list n A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> list (Suc n) A) = (x \\<in> A \\<and> xs \\<in> list n A)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> list (Suc n) A) = (x \\<in> A \\<and> xs \\<in> list n A)", "apply (simp add: in_list_Suc_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma list_not_empty:\n  \"\\<exists>a. a\\<in>A \\<Longrightarrow> \\<exists>xs. xs \\<in> list n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. a \\<in> A \\<Longrightarrow> \\<exists>xs. xs \\<in> list n A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. a \\<in> A \\<Longrightarrow> \\<exists>xs. xs \\<in> list n A", "apply (induct \"n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>a. a \\<in> A \\<Longrightarrow> \\<exists>xs. xs \\<in> list 0 A\n 2. \\<And>n.\n       \\<lbrakk>\\<exists>a. a \\<in> A \\<Longrightarrow>\n                \\<exists>xs. xs \\<in> list n A;\n        \\<exists>a. a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs. xs \\<in> list (Suc n) A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<exists>a. a \\<in> A \\<Longrightarrow>\n                \\<exists>xs. xs \\<in> list n A;\n        \\<exists>a. a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs. xs \\<in> list (Suc n) A", "apply (simp add: in_list_Suc_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<exists>xs. xs \\<in> list n A;\n        \\<exists>a. a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs.\n                            \\<exists>y\\<in>A.\n                               \\<exists>ys\\<in>list n A. xs = y # ys", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma nth_in [rule_format, simp]:\n  \"\\<forall>i n. size xs = n \\<longrightarrow> set xs \\<subseteq> A \\<longrightarrow> i < n \\<longrightarrow> (xs!i) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i n.\n       length xs = n \\<longrightarrow>\n       set xs \\<subseteq> A \\<longrightarrow>\n       i < n \\<longrightarrow> xs ! i \\<in> A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i n.\n       length xs = n \\<longrightarrow>\n       set xs \\<subseteq> A \\<longrightarrow>\n       i < n \\<longrightarrow> xs ! i \\<in> A", "apply (induct \"xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>i n.\n       length [] = n \\<longrightarrow>\n       set [] \\<subseteq> A \\<longrightarrow>\n       i < n \\<longrightarrow> [] ! i \\<in> A\n 2. \\<And>a xs.\n       \\<forall>i n.\n          length xs = n \\<longrightarrow>\n          set xs \\<subseteq> A \\<longrightarrow>\n          i < n \\<longrightarrow> xs ! i \\<in> A \\<Longrightarrow>\n       \\<forall>i n.\n          length (a # xs) = n \\<longrightarrow>\n          set (a # xs) \\<subseteq> A \\<longrightarrow>\n          i < n \\<longrightarrow> (a # xs) ! i \\<in> A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<forall>i n.\n          length xs = n \\<longrightarrow>\n          set xs \\<subseteq> A \\<longrightarrow>\n          i < n \\<longrightarrow> xs ! i \\<in> A \\<Longrightarrow>\n       \\<forall>i n.\n          length (a # xs) = n \\<longrightarrow>\n          set (a # xs) \\<subseteq> A \\<longrightarrow>\n          i < n \\<longrightarrow> (a # xs) ! i \\<in> A", "apply (simp add: nth_Cons split: nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma listE_nth_in: \"\\<lbrakk> xs \\<in> list n A; i < n \\<rbrakk> \\<Longrightarrow> xs!i \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> list n A; i < n\\<rbrakk>\n    \\<Longrightarrow> xs ! i \\<in> A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> list n A; i < n\\<rbrakk>\n    \\<Longrightarrow> xs ! i \\<in> A", "by auto"], ["", "(*>*)"], ["", "lemma listn_Cons_Suc [elim!]:\n  \"l#xs \\<in> list n A \\<Longrightarrow> (\\<And>n'. n = Suc n' \\<Longrightarrow> l \\<in> A \\<Longrightarrow> xs \\<in> list n' A \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l # xs \\<in> list n A;\n     \\<And>n'.\n        \\<lbrakk>n = Suc n'; l \\<in> A; xs \\<in> list n' A\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l # xs \\<in> list n A;\n     \\<And>n'.\n        \\<lbrakk>n = Suc n'; l \\<in> A; xs \\<in> list n' A\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (cases n) auto"], ["", "(*>*)"], ["", "lemma listn_appendE [elim!]:\n  \"a@b \\<in> list n A \\<Longrightarrow> (\\<And>n1 n2. n=n1+n2 \\<Longrightarrow> a \\<in> list n1 A \\<Longrightarrow> b \\<in> list n2 A \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a @ b \\<in> list n A;\n     \\<And>n1 n2.\n        \\<lbrakk>n = n1 + n2; a \\<in> list n1 A; b \\<in> list n2 A\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a @ b \\<in> list n A;\n     \\<And>n1 n2.\n        \\<lbrakk>n = n1 + n2; a \\<in> list n1 A; b \\<in> list n2 A\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a @ b \\<in> list n A;\n     \\<And>n1 n2.\n        \\<lbrakk>n = n1 + n2; a \\<in> list n1 A; b \\<in> list n2 A\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "have \"\\<And>n. a@b \\<in> list n A \\<Longrightarrow> \\<exists>n1 n2. n=n1+n2 \\<and> a \\<in> list n1 A \\<and> b \\<in> list n2 A\"\n    (is \"\\<And>n. ?list a n \\<Longrightarrow> \\<exists>n1 n2. ?P a n n1 n2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       a @ b \\<in> list n A \\<Longrightarrow>\n       \\<exists>n1 n2.\n          n = n1 + n2 \\<and> a \\<in> list n1 A \\<and> b \\<in> list n2 A", "proof (induct a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       [] @ b \\<in> list n A \\<Longrightarrow>\n       \\<exists>n1 n2.\n          n = n1 + n2 \\<and> [] \\<in> list n1 A \\<and> b \\<in> list n2 A\n 2. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       [] @ b \\<in> list n A \\<Longrightarrow>\n       \\<exists>n1 n2.\n          n = n1 + n2 \\<and> [] \\<in> list n1 A \\<and> b \\<in> list n2 A\n 2. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "assume \"?list [] n\""], ["proof (state)\nthis:\n  [] @ b \\<in> list n A\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       [] @ b \\<in> list n A \\<Longrightarrow>\n       \\<exists>n1 n2.\n          n = n1 + n2 \\<and> [] \\<in> list n1 A \\<and> b \\<in> list n2 A\n 2. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "hence \"?P [] n 0 n\""], ["proof (prove)\nusing this:\n  [] @ b \\<in> list n A\n\ngoal (1 subgoal):\n 1. n = 0 + n \\<and> [] \\<in> list 0 A \\<and> b \\<in> list n A", "by simp"], ["proof (state)\nthis:\n  n = 0 + n \\<and> [] \\<in> list 0 A \\<and> b \\<in> list n A\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       [] @ b \\<in> list n A \\<Longrightarrow>\n       \\<exists>n1 n2.\n          n = n1 + n2 \\<and> [] \\<in> list n1 A \\<and> b \\<in> list n2 A\n 2. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "thus \"\\<exists>n1 n2. ?P [] n n1 n2\""], ["proof (prove)\nusing this:\n  n = 0 + n \\<and> [] \\<in> list 0 A \\<and> b \\<in> list n A\n\ngoal (1 subgoal):\n 1. \\<exists>n1 n2.\n       n = n1 + n2 \\<and> [] \\<in> list n1 A \\<and> b \\<in> list n2 A", "by fast"], ["proof (state)\nthis:\n  \\<exists>n1 n2.\n     n = n1 + n2 \\<and> [] \\<in> list n1 A \\<and> b \\<in> list n2 A\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "fix n l ls"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "assume \"?list (l#ls) n\""], ["proof (state)\nthis:\n  (l # ls) @ b \\<in> list n A\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "then"], ["proof (chain)\npicking this:\n  (l # ls) @ b \\<in> list n A", "obtain n' where n: \"n = Suc n'\" \"l \\<in> A\" and n': \"ls@b \\<in> list n' A\""], ["proof (prove)\nusing this:\n  (l # ls) @ b \\<in> list n A\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n = Suc n'; l \\<in> A; ls @ b \\<in> list n' A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  n = Suc n'\n  l \\<in> A\n  ls @ b \\<in> list n' A\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "assume \"\\<And>n. ls @ b \\<in> list n A \\<Longrightarrow> \\<exists>n1 n2. n = n1 + n2 \\<and> ls \\<in> list n1 A \\<and> b \\<in> list n2 A\""], ["proof (state)\nthis:\n  ls @ b \\<in> list ?n A \\<Longrightarrow>\n  \\<exists>n1 n2.\n     ?n = n1 + n2 \\<and> ls \\<in> list n1 A \\<and> b \\<in> list n2 A\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "from this and n'"], ["proof (chain)\npicking this:\n  ls @ b \\<in> list ?n A \\<Longrightarrow>\n  \\<exists>n1 n2.\n     ?n = n1 + n2 \\<and> ls \\<in> list n1 A \\<and> b \\<in> list n2 A\n  ls @ b \\<in> list n' A", "have \"\\<exists>n1 n2. n' = n1 + n2 \\<and> ls \\<in> list n1 A \\<and> b \\<in> list n2 A\""], ["proof (prove)\nusing this:\n  ls @ b \\<in> list ?n A \\<Longrightarrow>\n  \\<exists>n1 n2.\n     ?n = n1 + n2 \\<and> ls \\<in> list n1 A \\<and> b \\<in> list n2 A\n  ls @ b \\<in> list n' A\n\ngoal (1 subgoal):\n 1. \\<exists>n1 n2.\n       n' = n1 + n2 \\<and> ls \\<in> list n1 A \\<and> b \\<in> list n2 A", "."], ["proof (state)\nthis:\n  \\<exists>n1 n2.\n     n' = n1 + n2 \\<and> ls \\<in> list n1 A \\<and> b \\<in> list n2 A\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "then"], ["proof (chain)\npicking this:\n  \\<exists>n1 n2.\n     n' = n1 + n2 \\<and> ls \\<in> list n1 A \\<and> b \\<in> list n2 A", "obtain n1 n2 where \"n' = n1 + n2\" \"ls \\<in> list n1 A\" \"b \\<in> list n2 A\""], ["proof (prove)\nusing this:\n  \\<exists>n1 n2.\n     n' = n1 + n2 \\<and> ls \\<in> list n1 A \\<and> b \\<in> list n2 A\n\ngoal (1 subgoal):\n 1. (\\<And>n1 n2.\n        \\<lbrakk>n' = n1 + n2; ls \\<in> list n1 A;\n         b \\<in> list n2 A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  n' = n1 + n2\n  ls \\<in> list n1 A\n  b \\<in> list n2 A\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "with n"], ["proof (chain)\npicking this:\n  n = Suc n'\n  l \\<in> A\n  n' = n1 + n2\n  ls \\<in> list n1 A\n  b \\<in> list n2 A", "have \"?P (l#ls) n (n1+1) n2\""], ["proof (prove)\nusing this:\n  n = Suc n'\n  l \\<in> A\n  n' = n1 + n2\n  ls \\<in> list n1 A\n  b \\<in> list n2 A\n\ngoal (1 subgoal):\n 1. n = n1 + 1 + n2 \\<and>\n    l # ls \\<in> list (n1 + 1) A \\<and> b \\<in> list n2 A", "by simp"], ["proof (state)\nthis:\n  n = n1 + 1 + n2 \\<and>\n  l # ls \\<in> list (n1 + 1) A \\<and> b \\<in> list n2 A\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 n.\n       \\<lbrakk>\\<And>n.\n                   a2 @ b \\<in> list n A \\<Longrightarrow>\n                   \\<exists>n1 n2.\n                      n = n1 + n2 \\<and>\n                      a2 \\<in> list n1 A \\<and> b \\<in> list n2 A;\n        (a1 # a2) @ b \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n1 n2.\n                            n = n1 + n2 \\<and>\n                            a1 # a2 \\<in> list n1 A \\<and> b \\<in> list n2 A", "thus \"\\<exists>n1 n2. ?P (l#ls) n n1 n2\""], ["proof (prove)\nusing this:\n  n = n1 + 1 + n2 \\<and>\n  l # ls \\<in> list (n1 + 1) A \\<and> b \\<in> list n2 A\n\ngoal (1 subgoal):\n 1. \\<exists>n1 n2.\n       n = n1 + n2 \\<and> l # ls \\<in> list n1 A \\<and> b \\<in> list n2 A", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>n1 n2.\n     n = n1 + n2 \\<and> l # ls \\<in> list n1 A \\<and> b \\<in> list n2 A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a @ b \\<in> list ?n A \\<Longrightarrow>\n  \\<exists>n1 n2.\n     ?n = n1 + n2 \\<and> a \\<in> list n1 A \\<and> b \\<in> list n2 A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a @ b \\<in> list n A;\n     \\<And>n1 n2.\n        \\<lbrakk>n = n1 + n2; a \\<in> list n1 A; b \\<in> list n2 A\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "moreover"], ["proof (state)\nthis:\n  a @ b \\<in> list ?n A \\<Longrightarrow>\n  \\<exists>n1 n2.\n     ?n = n1 + n2 \\<and> a \\<in> list n1 A \\<and> b \\<in> list n2 A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a @ b \\<in> list n A;\n     \\<And>n1 n2.\n        \\<lbrakk>n = n1 + n2; a \\<in> list n1 A; b \\<in> list n2 A\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "assume \"a@b \\<in> list n A\" \"\\<And>n1 n2. n=n1+n2 \\<Longrightarrow> a \\<in> list n1 A \\<Longrightarrow> b \\<in> list n2 A \\<Longrightarrow> P\""], ["proof (state)\nthis:\n  a @ b \\<in> list n A\n  \\<lbrakk>n = ?n1.0 + ?n2.0; a \\<in> list ?n1.0 A;\n   b \\<in> list ?n2.0 A\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a @ b \\<in> list n A;\n     \\<And>n1 n2.\n        \\<lbrakk>n = n1 + n2; a \\<in> list n1 A; b \\<in> list n2 A\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "ultimately"], ["proof (chain)\npicking this:\n  a @ b \\<in> list ?n A \\<Longrightarrow>\n  \\<exists>n1 n2.\n     ?n = n1 + n2 \\<and> a \\<in> list n1 A \\<and> b \\<in> list n2 A\n  a @ b \\<in> list n A\n  \\<lbrakk>n = ?n1.0 + ?n2.0; a \\<in> list ?n1.0 A;\n   b \\<in> list ?n2.0 A\\<rbrakk>\n  \\<Longrightarrow> P", "show ?thesis"], ["proof (prove)\nusing this:\n  a @ b \\<in> list ?n A \\<Longrightarrow>\n  \\<exists>n1 n2.\n     ?n = n1 + n2 \\<and> a \\<in> list n1 A \\<and> b \\<in> list n2 A\n  a @ b \\<in> list n A\n  \\<lbrakk>n = ?n1.0 + ?n2.0; a \\<in> list ?n1.0 A;\n   b \\<in> list ?n2.0 A\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by blast"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma listt_update_in_list [simp, intro!]:\n  \"\\<lbrakk> xs \\<in> list n A; x\\<in>A \\<rbrakk> \\<Longrightarrow> xs[i := x] \\<in> list n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> list n A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> xs[i := x] \\<in> list n A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> list n A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> xs[i := x] \\<in> list n A", "apply (unfold list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> {xs. length xs = n \\<and> set xs \\<subseteq> A};\n     x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> xs[i := x]\n                      \\<in> {xs. length xs = n \\<and> set xs \\<subseteq> A}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma list_appendI [intro?]:\n  \"\\<lbrakk> a \\<in> list n A; b \\<in> list m A \\<rbrakk> \\<Longrightarrow> a @ b \\<in> list (n+m) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> list n A; b \\<in> list m A\\<rbrakk>\n    \\<Longrightarrow> a @ b \\<in> list (n + m) A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> list n A; b \\<in> list m A\\<rbrakk>\n    \\<Longrightarrow> a @ b \\<in> list (n + m) A", "by (unfold list_def) auto"], ["", "(*>*)"], ["", "lemma list_map [simp]: \"(map f xs \\<in> list (size xs) A) = (f ` set xs \\<subseteq> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map f xs \\<in> list (length xs) A) = (f ` set xs \\<subseteq> A)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (map f xs \\<in> list (length xs) A) = (f ` set xs \\<subseteq> A)", "by (unfold list_def) simp"], ["", "(*>*)"], ["", "lemma list_replicateI [intro]: \"x \\<in> A \\<Longrightarrow> replicate n x \\<in> list n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> replicate n x \\<in> list n A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> replicate n x \\<in> list n A", "by (induct n) auto"], ["", "(*>*)"], ["", "lemma plus_list_Nil [simp]: \"[] [\\<squnion>\\<^bsub>f\\<^esub>] xs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] [\\<squnion>\\<^bsub>f\\<^esub>] xs = []", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] [\\<squnion>\\<^bsub>f\\<^esub>] xs = []", "apply (unfold plussub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map2 f [] xs = []", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma plus_list_Cons [simp]:\n  \"(x#xs) [\\<squnion>\\<^bsub>f\\<^esub>] ys = (case ys of [] \\<Rightarrow> [] | y#ys \\<Rightarrow> (x \\<squnion>\\<^sub>f y)#(xs [\\<squnion>\\<^bsub>f\\<^esub>] ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x # xs [\\<squnion>\\<^bsub>f\\<^esub>] ys =\n    (case ys of [] \\<Rightarrow> []\n     | y # ys \\<Rightarrow>\n         (x \\<squnion>\\<^bsub>f\\<^esub> y) #\n         xs [\\<squnion>\\<^bsub>f\\<^esub>] ys)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x # xs [\\<squnion>\\<^bsub>f\\<^esub>] ys =\n    (case ys of [] \\<Rightarrow> []\n     | y # ys \\<Rightarrow>\n         (x \\<squnion>\\<^bsub>f\\<^esub> y) #\n         xs [\\<squnion>\\<^bsub>f\\<^esub>] ys)", "by (simp add: plussub_def split: list.split)"], ["", "(*>*)"], ["", "lemma length_plus_list [rule_format, simp]:\n  \"\\<forall>ys. size(xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = min(size xs) (size ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys.\n       length (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n       min (length xs) (length ys)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys.\n       length (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n       min (length xs) (length ys)", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>ys.\n       length ([] [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n       min (length []) (length ys)\n 2. \\<And>a xs.\n       \\<forall>ys.\n          length (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n          min (length xs) (length ys) \\<Longrightarrow>\n       \\<forall>ys.\n          length (a # xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n          min (length (a # xs)) (length ys)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<forall>ys.\n          length (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n          min (length xs) (length ys) \\<Longrightarrow>\n       \\<forall>ys.\n          length (a # xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n          min (length (a # xs)) (length ys)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<forall>ys.\n          length (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n          min (length xs) (length ys) \\<Longrightarrow>\n       length (a # xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n       min (length (a # xs)) (length ys)", "apply (simp (no_asm_simp) split: list.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma nth_plus_list [rule_format, simp]:\n  \"\\<forall>xs ys i. size xs = n \\<longrightarrow> size ys = n \\<longrightarrow> i<n \\<longrightarrow> (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys)!i = (xs!i) \\<squnion>\\<^sub>f (ys!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs ys i.\n       length xs = n \\<longrightarrow>\n       length ys = n \\<longrightarrow>\n       i < n \\<longrightarrow>\n       (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n       xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs ys i.\n       length xs = n \\<longrightarrow>\n       length ys = n \\<longrightarrow>\n       i < n \\<longrightarrow>\n       (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n       xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>xs ys i.\n       length xs = 0 \\<longrightarrow>\n       length ys = 0 \\<longrightarrow>\n       i < 0 \\<longrightarrow>\n       (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n       xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i\n 2. \\<And>n.\n       \\<forall>xs ys i.\n          length xs = n \\<longrightarrow>\n          length ys = n \\<longrightarrow>\n          i < n \\<longrightarrow>\n          (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n          xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i \\<Longrightarrow>\n       \\<forall>xs ys i.\n          length xs = Suc n \\<longrightarrow>\n          length ys = Suc n \\<longrightarrow>\n          i < Suc n \\<longrightarrow>\n          (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n          xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>xs ys i.\n          length xs = n \\<longrightarrow>\n          length ys = n \\<longrightarrow>\n          i < n \\<longrightarrow>\n          (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n          xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i \\<Longrightarrow>\n       \\<forall>xs ys i.\n          length xs = Suc n \\<longrightarrow>\n          length ys = Suc n \\<longrightarrow>\n          i < Suc n \\<longrightarrow>\n          (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n          xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys i.\n       \\<lbrakk>\\<forall>xs ys i.\n                   length xs = n \\<longrightarrow>\n                   length ys = n \\<longrightarrow>\n                   i < n \\<longrightarrow>\n                   (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n                   xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i;\n        length xs = Suc n; length ys = Suc n; i < Suc n\\<rbrakk>\n       \\<Longrightarrow> (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n                         xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i", "apply (case_tac xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n xs ys i.\n       \\<lbrakk>\\<forall>xs ys i.\n                   length xs = n \\<longrightarrow>\n                   length ys = n \\<longrightarrow>\n                   i < n \\<longrightarrow>\n                   (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n                   xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i;\n        length xs = Suc n; length ys = Suc n; i < Suc n; xs = []\\<rbrakk>\n       \\<Longrightarrow> (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n                         xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i\n 2. \\<And>n xs ys i a list.\n       \\<lbrakk>\\<forall>xs ys i.\n                   length xs = n \\<longrightarrow>\n                   length ys = n \\<longrightarrow>\n                   i < n \\<longrightarrow>\n                   (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n                   xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i;\n        length xs = Suc n; length ys = Suc n; i < Suc n;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n                         xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys i a list.\n       \\<lbrakk>\\<forall>xs ys i.\n                   length xs = n \\<longrightarrow>\n                   length ys = n \\<longrightarrow>\n                   i < n \\<longrightarrow>\n                   (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n                   xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i;\n        length xs = Suc n; length ys = Suc n; i < Suc n;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) ! i =\n                         xs ! i \\<squnion>\\<^bsub>f\\<^esub> ys ! i", "apply (force simp add: nth_Cons split: list.split nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma (in Semilat) plus_list_ub1 [rule_format]:\n \"\\<lbrakk> set xs \\<subseteq> A; set ys \\<subseteq> A; size xs = size ys \\<rbrakk>\n  \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs [\\<squnion>\\<^bsub>f\\<^esub>] ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set xs \\<subseteq> A; set ys \\<subseteq> A;\n     length xs = length ys\\<rbrakk>\n    \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs \n                    [\\<squnion>\\<^bsub>f\\<^esub>] ys", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set xs \\<subseteq> A; set ys \\<subseteq> A;\n     length xs = length ys\\<rbrakk>\n    \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs \n                    [\\<squnion>\\<^bsub>f\\<^esub>] ys", "apply (unfold unfold_lesub_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set xs \\<subseteq> A; set ys \\<subseteq> A;\n     length xs = length ys\\<rbrakk>\n    \\<Longrightarrow> Listn.le r xs (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys)", "apply (simp add: Listn.le_def list_all2_conv_all_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma (in Semilat) plus_list_ub2:\n \"\\<lbrakk>set xs \\<subseteq> A; set ys \\<subseteq> A; size xs = size ys \\<rbrakk> \\<Longrightarrow> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs [\\<squnion>\\<^bsub>f\\<^esub>] ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set xs \\<subseteq> A; set ys \\<subseteq> A;\n     length xs = length ys\\<rbrakk>\n    \\<Longrightarrow> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs \n                    [\\<squnion>\\<^bsub>f\\<^esub>] ys", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set xs \\<subseteq> A; set ys \\<subseteq> A;\n     length xs = length ys\\<rbrakk>\n    \\<Longrightarrow> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs \n                    [\\<squnion>\\<^bsub>f\\<^esub>] ys", "apply (unfold unfold_lesub_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set xs \\<subseteq> A; set ys \\<subseteq> A;\n     length xs = length ys\\<rbrakk>\n    \\<Longrightarrow> Listn.le r ys (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys)", "apply (simp add: Listn.le_def list_all2_conv_all_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma (in Semilat) plus_list_lub [rule_format]:\nshows \"\\<forall>xs ys zs. set xs \\<subseteq> A \\<longrightarrow> set ys \\<subseteq> A \\<longrightarrow> set zs \\<subseteq> A\n  \\<longrightarrow> size xs = n \\<and> size ys = n \\<longrightarrow>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<longrightarrow> xs [\\<squnion>\\<^bsub>f\\<^esub>] ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs ys zs.\n       set xs \\<subseteq> A \\<longrightarrow>\n       set ys \\<subseteq> A \\<longrightarrow>\n       set zs \\<subseteq> A \\<longrightarrow>\n       length xs = n \\<and> length ys = n \\<longrightarrow>\n       xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and>\n       ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<longrightarrow>\n       xs [\\<squnion>\\<^bsub>f\\<^esub>] ys \n       [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs ys zs.\n       set xs \\<subseteq> A \\<longrightarrow>\n       set ys \\<subseteq> A \\<longrightarrow>\n       set zs \\<subseteq> A \\<longrightarrow>\n       length xs = n \\<and> length ys = n \\<longrightarrow>\n       xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and>\n       ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<longrightarrow>\n       xs [\\<squnion>\\<^bsub>f\\<^esub>] ys \n       [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "apply (unfold unfold_lesub_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs ys zs.\n       set xs \\<subseteq> A \\<longrightarrow>\n       set ys \\<subseteq> A \\<longrightarrow>\n       set zs \\<subseteq> A \\<longrightarrow>\n       length xs = n \\<and> length ys = n \\<longrightarrow>\n       Listn.le r xs zs \\<and> Listn.le r ys zs \\<longrightarrow>\n       Listn.le r (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) zs", "apply (simp add: Listn.le_def list_all2_conv_all_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma (in Semilat) list_update_incr [rule_format]:\n \"x\\<in>A \\<Longrightarrow> set xs \\<subseteq> A \\<longrightarrow>\n  (\\<forall>i. i<size xs \\<longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs[i := x \\<squnion>\\<^sub>f xs!i])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow>\n    set xs \\<subseteq> A \\<longrightarrow>\n    (\\<forall>i<length xs.\n        xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\n        [i := x \\<squnion>\\<^bsub>f\\<^esub> xs ! i])", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow>\n    set xs \\<subseteq> A \\<longrightarrow>\n    (\\<forall>i<length xs.\n        xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\n        [i := x \\<squnion>\\<^bsub>f\\<^esub> xs ! i])", "apply (unfold unfold_lesub_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow>\n    set xs \\<subseteq> A \\<longrightarrow>\n    (\\<forall>i<length xs.\n        Listn.le r xs (xs[i := x \\<squnion>\\<^bsub>f\\<^esub> xs ! i]))", "apply (simp add: Listn.le_def list_all2_conv_all_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow>\n    set xs \\<subseteq> A \\<longrightarrow>\n    (\\<forall>i<length xs.\n        \\<forall>ia<length xs.\n           xs ! ia \n           \\<sqsubseteq>\\<^bsub>r\\<^esub> xs\n    [i := x \\<squnion>\\<^bsub>f\\<^esub> xs ! i] ! ia)", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow>\n    set [] \\<subseteq> A \\<longrightarrow>\n    (\\<forall>i<length [].\n        \\<forall>ia<length [].\n           [] ! ia \n           \\<sqsubseteq>\\<^bsub>r\\<^esub> []\n    [i := x \\<squnion>\\<^bsub>f\\<^esub> [] ! i] ! ia)\n 2. \\<And>a xs.\n       \\<lbrakk>x \\<in> A \\<Longrightarrow>\n                set xs \\<subseteq> A \\<longrightarrow>\n                (\\<forall>i<length xs.\n                    \\<forall>ia<length xs.\n                       xs ! ia \n                       \\<sqsubseteq>\\<^bsub>r\\<^esub> xs\n                [i := x \\<squnion>\\<^bsub>f\\<^esub> xs ! i] ! ia);\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> set (a # xs) \\<subseteq> A \\<longrightarrow>\n                         (\\<forall>i<length (a # xs).\n                             \\<forall>ia<length (a # xs).\n                                (a # xs) ! ia \n                                \\<sqsubseteq>\\<^bsub>r\\<^esub> (a # xs)\n                         [i := x \\<squnion>\\<^bsub>f\\<^esub> (a # xs) ! i] !\n                         ia)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<in> A \\<Longrightarrow>\n                set xs \\<subseteq> A \\<longrightarrow>\n                (\\<forall>i<length xs.\n                    \\<forall>ia<length xs.\n                       xs ! ia \n                       \\<sqsubseteq>\\<^bsub>r\\<^esub> xs\n                [i := x \\<squnion>\\<^bsub>f\\<^esub> xs ! i] ! ia);\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> set (a # xs) \\<subseteq> A \\<longrightarrow>\n                         (\\<forall>i<length (a # xs).\n                             \\<forall>ia<length (a # xs).\n                                (a # xs) ! ia \n                                \\<sqsubseteq>\\<^bsub>r\\<^esub> (a # xs)\n                         [i := x \\<squnion>\\<^bsub>f\\<^esub> (a # xs) ! i] !\n                         ia)", "apply (simp add: in_list_Suc_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>set xs \\<subseteq> A \\<longrightarrow>\n                (\\<forall>i<length xs.\n                    \\<forall>ia<length xs.\n                       xs ! ia \n                       \\<sqsubseteq>\\<^bsub>r\\<^esub> xs\n                [i := x \\<squnion>\\<^bsub>f\\<^esub> xs ! i] ! ia);\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> a \\<in> A \\<and>\n                         set xs \\<subseteq> A \\<longrightarrow>\n                         (\\<forall>i<Suc (length xs).\n                             \\<forall>ia<Suc (length xs).\n                                (a # xs) ! ia \n                                \\<sqsubseteq>\\<^bsub>r\\<^esub> (case i of\n                          0 \\<Rightarrow>\n                            (x \\<squnion>\\<^bsub>f\\<^esub> (a # xs) ! i) #\n                            xs\n                          | Suc j \\<Rightarrow>\n                              a # xs\n                              [j := x \\<squnion>\\<^bsub>f\\<^esub> (a # xs) !\n                            i]) !\n                         ia)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i ia.\n       \\<lbrakk>x \\<in> A; a \\<in> A; set xs \\<subseteq> A;\n        i < Suc (length xs); ia < Suc (length xs);\n        \\<forall>i<length xs.\n           \\<forall>ia<length xs.\n              xs ! ia \n              \\<sqsubseteq>\\<^bsub>r\\<^esub> xs\n       [i := x \\<squnion>\\<^bsub>f\\<^esub> xs ! i] ! ia\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! ia \n                         \\<sqsubseteq>\\<^bsub>r\\<^esub> (case i of\n                   0 \\<Rightarrow>\n                     (x \\<squnion>\\<^bsub>f\\<^esub> (a # xs) ! i) # xs\n                   | Suc j \\<Rightarrow>\n                       a # xs\n                       [j := x \\<squnion>\\<^bsub>f\\<^esub> (a # xs) ! i]) !\n                  ia", "apply (simp add: nth_Cons split: nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma acc_le_listI [intro!]:\n  \"\\<lbrakk> order r; acc r \\<rbrakk> \\<Longrightarrow> acc(Listn.le r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; acc r\\<rbrakk> \\<Longrightarrow> acc (Listn.le r)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; acc r\\<rbrakk> \\<Longrightarrow> acc (Listn.le r)", "apply (unfold acc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}\\<rbrakk>\n    \\<Longrightarrow> wf {(y, x). x [\\<sqsubset>\\<^bsub>r\\<^esub>] y}", "apply (subgoal_tac\n \"wf(UN n. {(ys,xs). size xs = n \\<and> size ys = n \\<and> xs <_(Listn.le r) ys})\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n     wf (\\<Union>n.\n            {(ys, xs).\n             length xs = n \\<and>\n             length ys = n \\<and>\n             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys})\\<rbrakk>\n    \\<Longrightarrow> wf {(y, x). x [\\<sqsubset>\\<^bsub>r\\<^esub>] y}\n 2. \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}\\<rbrakk>\n    \\<Longrightarrow> wf (\\<Union>n.\n                             {(ys, xs).\n                              length xs = n \\<and>\n                              length ys = n \\<and>\n                              xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys})", "apply (erule wf_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}\\<rbrakk>\n    \\<Longrightarrow> {(y, x). x [\\<sqsubset>\\<^bsub>r\\<^esub>] y}\n                      \\<subseteq> (\\<Union>n.\n{(ys, xs).\n length xs = n \\<and>\n length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys})\n 2. \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}\\<rbrakk>\n    \\<Longrightarrow> wf (\\<Union>n.\n                             {(ys, xs).\n                              length xs = n \\<and>\n                              length ys = n \\<and>\n                              xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys})", "apply (blast intro: lesssub_lengthD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}\\<rbrakk>\n    \\<Longrightarrow> wf (\\<Union>n.\n                             {(ys, xs).\n                              length xs = n \\<and>\n                              length ys = n \\<and>\n                              xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys})", "apply (rule wf_UN)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\n 2. \\<And>n j.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV; j \\<in> UNIV;\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = j \\<and>\n         length ys = j \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = j \\<and>\n                           length ys = j \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n j.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV; j \\<in> UNIV;\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = j \\<and>\n         length ys = j \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = j \\<and>\n                           length ys = j \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}\n 2. \\<And>n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (rename_tac m n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        m \\<in> UNIV; n \\<in> UNIV;\n        {(ys, xs).\n         length xs = m \\<and>\n         length ys = m \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = m \\<and>\n                           length ys = m \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}\n 2. \\<And>n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (case_tac \"m=n\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        m \\<in> UNIV; n \\<in> UNIV;\n        {(ys, xs).\n         length xs = m \\<and>\n         length ys = m \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys};\n        m = n\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = m \\<and>\n                           length ys = m \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}\n 2. \\<And>m n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        m \\<in> UNIV; n \\<in> UNIV;\n        {(ys, xs).\n         length xs = m \\<and>\n         length ys = m \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys};\n        m \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = m \\<and>\n                           length ys = m \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}\n 3. \\<And>n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        m \\<in> UNIV; n \\<in> UNIV;\n        {(ys, xs).\n         length xs = m \\<and>\n         length ys = m \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys};\n        m \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = m \\<and>\n                           length ys = m \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}\n 2. \\<And>n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (fast intro!: equals0I dest: not_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (rename_tac n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {a. case a of\n                                (ys, xs) \\<Rightarrow>\n                                  length xs = 0 \\<and>\n                                  length ys = 0 \\<and>\n                                  xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\n 2. \\<And>n na.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV;\n        wf {a. case a of\n               (ys, xs) \\<Rightarrow>\n                 length xs = na \\<and>\n                 length ys = na \\<and>\n                 xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> wf {a. case a of\n                                (ys, xs) \\<Rightarrow>\n                                  length xs = Suc na \\<and>\n                                  length ys = Suc na \\<and>\n                                  xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (simp add: lesssub_def cong: conj_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV;\n        wf {a. case a of\n               (ys, xs) \\<Rightarrow>\n                 length xs = na \\<and>\n                 length ys = na \\<and>\n                 xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> wf {a. case a of\n                                (ys, xs) \\<Rightarrow>\n                                  length xs = Suc na \\<and>\n                                  length ys = Suc na \\<and>\n                                  xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (rename_tac k)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>order r; wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV;\n        wf {a. case a of\n               (ys, xs) \\<Rightarrow>\n                 length xs = k \\<and>\n                 length ys = k \\<and>\n                 xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> wf {a. case a of\n                                (ys, xs) \\<Rightarrow>\n                                  length xs = Suc k \\<and>\n                                  length ys = Suc k \\<and>\n                                  xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (simp add: wf_eq_minimal)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                  y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Q.\n                            (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                            (\\<exists>z\\<in>Q.\n                                \\<forall>y.\n                                   length z = Suc k \\<and>\n                                   length y = Suc k \\<and>\n                                   z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                                   y \\<notin> Q)", "apply (simp (no_asm) add: length_Suc_conv cong: conj_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                  y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Q.\n                            (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                            (\\<exists>z\\<in>Q.\n                                \\<forall>y.\n                                   (\\<exists>y ys.\n z = y # ys \\<and> length ys = k) \\<and>\n                                   (\\<exists>ya ys.\n y = ya # ys \\<and> length ys = k) \\<and>\n                                   z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                                   y \\<notin> Q)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k Q x.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                  y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        x \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> Q", "apply (rename_tac M m)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                  y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (case_tac \"\\<exists>x xs. size xs = k \\<and> x#xs \\<in> M\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                  y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M\n 2. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                  y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<nexists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                  y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<nexists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M\n 2. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                  y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule thin_rl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<nexists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M\n 2. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                  y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule thin_rl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          length z = k \\<and>\n                          length y = k \\<and>\n                          z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                          y \\<notin> Q);\n        m \\<in> M;\n        \\<nexists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M\n 2. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                  y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                  y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule_tac x = \"{a. \\<exists>xs. size xs = k \\<and> a#xs:M}\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M; \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M;\n        (\\<exists>x.\n            x \\<in> {a. \\<exists>xs.\n                           length xs = k \\<and>\n                           a # xs \\<in> M}) \\<longrightarrow>\n        (\\<exists>z\\<in>{a. \\<exists>xs.\n                               length xs = k \\<and> a # xs \\<in> M}.\n            \\<forall>y.\n               z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n               y \\<notin> {a. \\<exists>xs.\n                                 length xs = k \\<and>\n                                 a # xs \\<in> M})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> {a. \\<exists>xs.\n     length xs = k \\<and> a # xs \\<in> M}\n 2. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M; \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M;\n        \\<exists>z\\<in>{a. \\<exists>xs.\n                              length xs = k \\<and> a # xs \\<in> M}.\n           \\<forall>y.\n              z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n              y \\<notin> {a. \\<exists>xs.\n                                length xs = k \\<and>\n                                a # xs \\<in> M}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M; \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M;\n        \\<exists>z\\<in>{a. \\<exists>xs.\n                              length xs = k \\<and> a # xs \\<in> M}.\n           \\<forall>y.\n              z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n              y \\<notin> {a. \\<exists>xs.\n                                length xs = k \\<and>\n                                a # xs \\<in> M}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (thin_tac \"\\<exists>x xs. P x xs\" for P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>z\\<in>{a. \\<exists>xs.\n                              length xs = k \\<and> a # xs \\<in> M}.\n           \\<forall>y.\n              z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n              y \\<notin> {a. \\<exists>xs.\n                                length xs = k \\<and>\n                                a # xs \\<in> M}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m z xs.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = length xs \\<and>\n                  length y = length xs \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<forall>y.\n           z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        z # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (rename_tac maxA xs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs.\n       \\<lbrakk>order r;\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = length xs \\<and>\n                  length y = length xs \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule_tac x = \"{ys. size ys = size xs \\<and> maxA#ys \\<in> M}\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs.\n       \\<lbrakk>order r; m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M;\n        (\\<exists>x.\n            x \\<in> {ys.\n                     length ys = length xs \\<and>\n                     maxA # ys \\<in> M}) \\<longrightarrow>\n        (\\<exists>z\\<in>{ys.\n                         length ys = length xs \\<and> maxA # ys \\<in> M}.\n            \\<forall>y.\n               length z = length xs \\<and>\n               length y = length xs \\<and>\n               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n               y \\<notin> {ys.\n                           length ys = length xs \\<and>\n                           maxA # ys \\<in> M})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m maxA xs.\n       \\<lbrakk>order r; m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> {ys.\n                                     length ys = length xs \\<and>\n                                     maxA # ys \\<in> M}\n 2. \\<And>k M m maxA xs.\n       \\<lbrakk>order r; m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M;\n        \\<exists>z\\<in>{ys. length ys = length xs \\<and> maxA # ys \\<in> M}.\n           \\<forall>y.\n              length z = length xs \\<and>\n              length y = length xs \\<and>\n              z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n              y \\<notin> {ys.\n                          length ys = length xs \\<and>\n                          maxA # ys \\<in> M}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs.\n       \\<lbrakk>order r; m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M;\n        \\<exists>z\\<in>{ys. length ys = length xs \\<and> maxA # ys \\<in> M}.\n           \\<forall>y.\n              length z = length xs \\<and>\n              length y = length xs \\<and>\n              z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n              y \\<notin> {ys.\n                          length ys = length xs \\<and>\n                          maxA # ys \\<in> M}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>order r; m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M;\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (thin_tac \"m \\<in> M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>order r;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M;\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (thin_tac \"maxA#xs \\<in> M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>order r;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (rule bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>order r;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y.\n                            (\\<exists>y ys.\n                                ?z242 k M m maxA xs z = y # ys \\<and>\n                                length ys = length xs) \\<and>\n                            (\\<exists>ya ys.\n                                y = ya # ys \\<and>\n                                length ys = length xs) \\<and>\n                            ?z242 k M m maxA xs z \n                            [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                            y \\<notin> M\n 2. \\<And>k M m maxA xs z.\n       \\<lbrakk>order r;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> ?z242 k M m maxA xs z \\<in> M", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>order r;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> ?z242 k M m maxA xs z \\<in> M\n 2. \\<And>k M m maxA xs z.\n       \\<lbrakk>order r;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y.\n                            (\\<exists>y ys.\n                                ?z242 k M m maxA xs z = y # ys \\<and>\n                                length ys = length xs) \\<and>\n                            (\\<exists>ya ys.\n                                y = ya # ys \\<and>\n                                length ys = length xs) \\<and>\n                            ?z242 k M m maxA xs z \n                            [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                            y \\<notin> M", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>order r;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y.\n                            (\\<exists>y ys.\n                                maxA # z = y # ys \\<and>\n                                length ys = length xs) \\<and>\n                            (\\<exists>ya ys.\n                                y = ya # ys \\<and>\n                                length ys = length xs) \\<and>\n                            maxA # z \n                            [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                            y \\<notin> M", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs z y ya ys yb ysa.\n       \\<lbrakk>order r;\n        \\<forall>y.\n           ya \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        \\<forall>y.\n           length ys = length xs \\<and>\n           length y = length xs \\<and>\n           ys [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> ya # ys \\<in> M};\n        length ys = length xs; ya # ys \\<in> M;\n        ya # ys [\\<sqsubset>\\<^bsub>r\\<^esub>] yb # ysa;\n        length ys = length xs; length ysa = length xs;\n        yb # ysa \\<in> M\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M xs ya ys yb ysa.\n       \\<lbrakk>order r;\n        \\<forall>y.\n           ya \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           (\\<forall>xsa.\n               length xsa = length xs \\<longrightarrow> y # xsa \\<notin> M);\n        \\<forall>y.\n           length y = length xs \\<and>\n           ys [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           ya # y \\<notin> M;\n        ya # ys \\<in> M;\n        ya \\<sqsubset>\\<^bsub>r\\<^esub> yb \\<and>\n        ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysa \\<or>\n        ya = yb \\<and> ys [\\<sqsubset>\\<^bsub>r\\<^esub>] ysa;\n        length ys = length xs; length ysa = length xs;\n        yb # ysa \\<in> M\\<rbrakk>\n       \\<Longrightarrow> False", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma closed_listI:\n  \"closed S f \\<Longrightarrow> closed (list n S) (map2 f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed S f \\<Longrightarrow> closed (list n S) (map2 f)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed S f \\<Longrightarrow> closed (list n S) (map2 f)", "apply (unfold closed_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>S.\n       \\<forall>y\\<in>S.\n          x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> S \\<Longrightarrow>\n    \\<forall>x\\<in>list n S.\n       \\<forall>y\\<in>list n S.\n          x [\\<squnion>\\<^bsub>f\\<^esub>] y \\<in> list n S", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>S.\n       \\<forall>y\\<in>S.\n          x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> S \\<Longrightarrow>\n    \\<forall>x\\<in>list 0 S.\n       \\<forall>y\\<in>list 0 S.\n          x [\\<squnion>\\<^bsub>f\\<^esub>] y \\<in> list 0 S\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>x\\<in>S.\n                   \\<forall>y\\<in>S.\n                      x \\<squnion>\\<^bsub>f\\<^esub> y\n                      \\<in> S \\<Longrightarrow>\n                \\<forall>x\\<in>list n S.\n                   \\<forall>y\\<in>list n S.\n                      x [\\<squnion>\\<^bsub>f\\<^esub>] y \\<in> list n S;\n        \\<forall>x\\<in>S.\n           \\<forall>y\\<in>S.\n              x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>list (Suc n) S.\n                            \\<forall>y\\<in>list (Suc n) S.\n                               x [\\<squnion>\\<^bsub>f\\<^esub>] y\n                               \\<in> list (Suc n) S", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>x\\<in>S.\n                   \\<forall>y\\<in>S.\n                      x \\<squnion>\\<^bsub>f\\<^esub> y\n                      \\<in> S \\<Longrightarrow>\n                \\<forall>x\\<in>list n S.\n                   \\<forall>y\\<in>list n S.\n                      x [\\<squnion>\\<^bsub>f\\<^esub>] y \\<in> list n S;\n        \\<forall>x\\<in>S.\n           \\<forall>y\\<in>S.\n              x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>list (Suc n) S.\n                            \\<forall>y\\<in>list (Suc n) S.\n                               x [\\<squnion>\\<^bsub>f\\<^esub>] y\n                               \\<in> list (Suc n) S", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       \\<lbrakk>\\<forall>x\\<in>S.\n                   \\<forall>y\\<in>S.\n                      x \\<squnion>\\<^bsub>f\\<^esub> y\n                      \\<in> S \\<Longrightarrow>\n                \\<forall>x\\<in>list n S.\n                   \\<forall>y\\<in>list n S.\n                      x [\\<squnion>\\<^bsub>f\\<^esub>] y \\<in> list n S;\n        \\<forall>x\\<in>S.\n           \\<forall>y\\<in>S. x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> S;\n        x \\<in> list (Suc n) S; y \\<in> list (Suc n) S\\<rbrakk>\n       \\<Longrightarrow> x [\\<squnion>\\<^bsub>f\\<^esub>] y\n                         \\<in> list (Suc n) S", "apply (simp add: in_list_Suc_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       \\<lbrakk>\\<forall>x\\<in>list n S.\n                   \\<forall>y\\<in>list n S.\n                      x [\\<squnion>\\<^bsub>f\\<^esub>] y \\<in> list n S;\n        \\<forall>x\\<in>S.\n           \\<forall>y\\<in>S. x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> S;\n        \\<exists>y\\<in>S. \\<exists>ys\\<in>list n S. x = y # ys;\n        \\<exists>ya\\<in>S. \\<exists>ys\\<in>list n S. y = ya # ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya\\<in>S.\n                            \\<exists>ys\\<in>list n S.\n                               x [\\<squnion>\\<^bsub>f\\<^esub>] y = ya # ys", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x y ya yb ys ysa.\n       \\<lbrakk>\\<forall>x\\<in>list n S.\n                   \\<forall>y\\<in>list n S.\n                      x [\\<squnion>\\<^bsub>f\\<^esub>] y \\<in> list n S;\n        \\<forall>x\\<in>S.\n           \\<forall>y\\<in>S. x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> S;\n        ya \\<in> S; yb \\<in> S; ys \\<in> list n S;\n        ysa \\<in> list n S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>S.\n                            \\<exists>ysb\\<in>list n S.\n                               ya # ys \n                               [\\<squnion>\\<^bsub>f\\<^esub>] (yb # ysa) =\n                               y # ysb", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Listn_sl_aux:\nassumes \"Semilat A r f\" shows \"semilat (Listn.sl n (A,r,f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (Listn.sl n (A, r, f))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (Listn.sl n (A, r, f))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. semilat (Listn.sl n (A, r, f))", "interpret Semilat A r f"], ["proof (prove)\ngoal (1 subgoal):\n 1. Semilat A r f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. semilat (Listn.sl n (A, r, f))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (Listn.sl n (A, r, f))", "apply (unfold Listn.sl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat\n     (case (A, r, f) of\n      (A, r, f) \\<Rightarrow> (list n A, Listn.le r, map2 f))", "apply (simp (no_asm) only: semilat_Def split_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order (Listn.le r) \\<and>\n    closed (list n A) (map2 f) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           \\<forall>z\\<in>list n A.\n              x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<and>\n              y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<longrightarrow>\n              x [\\<squnion>\\<^bsub>f\\<^esub>] y \n              [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. order (Listn.le r)\n 2. closed (list n A) (map2 f) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           \\<forall>z\\<in>list n A.\n              x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<and>\n              y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<longrightarrow>\n              x [\\<squnion>\\<^bsub>f\\<^esub>] y \n              [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed (list n A) (map2 f) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           \\<forall>z\\<in>list n A.\n              x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<and>\n              y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<longrightarrow>\n              x [\\<squnion>\\<^bsub>f\\<^esub>] y \n              [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. closed (list n A) (map2 f)\n 2. (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           \\<forall>z\\<in>list n A.\n              x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<and>\n              y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<longrightarrow>\n              x [\\<squnion>\\<^bsub>f\\<^esub>] y \n              [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z)", "apply (simp only: closedI closed_listI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>list n A.\n        \\<forall>y\\<in>list n A.\n           \\<forall>z\\<in>list n A.\n              x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<and>\n              y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<longrightarrow>\n              x [\\<squnion>\\<^bsub>f\\<^esub>] y \n              [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z)", "apply (simp (no_asm) only: list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n        \\<forall>y\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n           x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n        \\<forall>y\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n           y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] x \n        [\\<squnion>\\<^bsub>f\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n        \\<forall>y\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n           \\<forall>z\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n              x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<and>\n              y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z \\<longrightarrow>\n              x [\\<squnion>\\<^bsub>f\\<^esub>] y \n              [\\<sqsubseteq>\\<^bsub>r\\<^esub>] z)", "apply (simp (no_asm_simp) add: plus_list_ub1 plus_list_ub2 plus_list_lub)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  semilat (Listn.sl n (A, r, f))\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma Listn_sl: \"semilat L \\<Longrightarrow> semilat (Listn.sl n L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat L \\<Longrightarrow> semilat (Listn.sl n L)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat L \\<Longrightarrow> semilat (Listn.sl n L)", "apply (cases L)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>semilat L; L = (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> semilat (Listn.sl n L)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>semilat (a, b, c); L = (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> semilat (Listn.sl n (a, b, c))", "apply (drule Semilat.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>L = (a, b, c); Semilat a b c\\<rbrakk>\n       \\<Longrightarrow> semilat (Listn.sl n (a, b, c))", "by (simp add: Listn_sl_aux split_tupled_all)"], ["", "(*>*)"], ["", "lemma coalesce_in_err_list [rule_format]:\n  \"\\<forall>xes. xes \\<in> list n (err A) \\<longrightarrow> coalesce xes \\<in> err(list n A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xes.\n       xes \\<in> list n (err A) \\<longrightarrow>\n       coalesce xes \\<in> err (list n A)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xes.\n       xes \\<in> list n (err A) \\<longrightarrow>\n       coalesce xes \\<in> err (list n A)", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>xes.\n       xes \\<in> list 0 (err A) \\<longrightarrow>\n       coalesce xes \\<in> err (list 0 A)\n 2. \\<And>n.\n       \\<forall>xes.\n          xes \\<in> list n (err A) \\<longrightarrow>\n          coalesce xes \\<in> err (list n A) \\<Longrightarrow>\n       \\<forall>xes.\n          xes \\<in> list (Suc n) (err A) \\<longrightarrow>\n          coalesce xes \\<in> err (list (Suc n) A)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>xes.\n          xes \\<in> list n (err A) \\<longrightarrow>\n          coalesce xes \\<in> err (list n A) \\<Longrightarrow>\n       \\<forall>xes.\n          xes \\<in> list (Suc n) (err A) \\<longrightarrow>\n          coalesce xes \\<in> err (list (Suc n) A)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xes.\n       \\<lbrakk>\\<forall>xes.\n                   xes \\<in> list n (err A) \\<longrightarrow>\n                   coalesce xes \\<in> err (list n A);\n        xes \\<in> list (Suc n) (err A)\\<rbrakk>\n       \\<Longrightarrow> coalesce xes \\<in> err (list (Suc n) A)", "apply (simp add: in_list_Suc_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xes.\n       \\<lbrakk>\\<forall>xes.\n                   xes \\<in> list n (err A) \\<longrightarrow>\n                   coalesce xes \\<in> err (list n A);\n        \\<exists>y\\<in>err A.\n           \\<exists>ys\\<in>list n (err A). xes = y # ys\\<rbrakk>\n       \\<Longrightarrow> coalesce xes \\<in> err (list (Suc n) A)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xes y ys.\n       \\<lbrakk>\\<forall>xes.\n                   xes \\<in> list n (err A) \\<longrightarrow>\n                   coalesce xes \\<in> err (list n A);\n        y \\<in> err A; ys \\<in> list n (err A)\\<rbrakk>\n       \\<Longrightarrow> coalesce (y # ys) \\<in> err (list (Suc n) A)", "apply (simp (no_asm) add: plussub_def Err.sup_def lift2_def split: err.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n y ys.\n       \\<lbrakk>\\<forall>xes.\n                   xes \\<in> list n (err A) \\<longrightarrow>\n                   coalesce xes \\<in> err (list n A);\n        y \\<in> err A; ys \\<in> list n (err A)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2 x2a.\n                            coalesce ys = OK x2a \\<longrightarrow>\n                            y = OK x2 \\<longrightarrow>\n                            x2 \\<in> A \\<and> x2a \\<in> list n A", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma lem: \"\\<And>x xs. x \\<squnion>\\<^bsub>(#)\\<^esub> xs = x#xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs. x \\<squnion>\\<^bsub>(#)\\<^esub> xs = x # xs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs. x \\<squnion>\\<^bsub>(#)\\<^esub> xs = x # xs", "by (simp add: plussub_def)"], ["", "(*>*)"], ["", "lemma coalesce_eq_OK1_D [rule_format]:\n  \"semilat(err A, Err.le r, lift2 f) \\<Longrightarrow>\n  \\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>ys. ys \\<in> list n A \\<longrightarrow>\n  (\\<forall>zs. coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs \\<longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list n A \\<longrightarrow>\n           (\\<forall>zs.\n               coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n               OK zs \\<longrightarrow>\n               xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list n A \\<longrightarrow>\n           (\\<forall>zs.\n               coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n               OK zs \\<longrightarrow>\n               xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list 0 A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list 0 A \\<longrightarrow>\n           (\\<forall>zs.\n               coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n               OK zs \\<longrightarrow>\n               xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))\n 2. \\<And>n.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<longrightarrow>\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list (Suc n) A \\<longrightarrow>\n                            (\\<forall>ys.\n                                ys \\<in> list (Suc n) A \\<longrightarrow>\n                                (\\<forall>zs.\n                                    coalesce\n                                     (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                                    OK zs \\<longrightarrow>\n                                    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<longrightarrow>\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list (Suc n) A \\<longrightarrow>\n                            (\\<forall>ys.\n                                ys \\<in> list (Suc n) A \\<longrightarrow>\n                                (\\<forall>zs.\n                                    coalesce\n                                     (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                                    OK zs \\<longrightarrow>\n                                    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<longrightarrow>\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f); xs \\<in> list (Suc n) A;\n        ys \\<in> list (Suc n) A;\n        coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "apply (simp add: in_list_Suc_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<longrightarrow>\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f);\n        \\<exists>y\\<in>A. \\<exists>ys\\<in>list n A. xs = y # ys;\n        \\<exists>y\\<in>A. \\<exists>ysa\\<in>list n A. ys = y # ysa;\n        coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs y ya ysa ysb.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<longrightarrow>\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f);\n        coalesce (y # ysa [\\<squnion>\\<^bsub>f\\<^esub>] (ya # ysb)) = OK zs;\n        y \\<in> A; ya \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> y # ysa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "apply (simp split: err.split_asm add: lem Err.sup_def lift2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n zs y ya ysa ysb x2 x2a.\n       \\<lbrakk>y \\<in> A; ya \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A;\n        \\<forall>xs.\n           xs \\<in> list n A \\<longrightarrow>\n           (\\<forall>ys.\n               ys \\<in> list n A \\<longrightarrow>\n               (\\<forall>zs.\n                   coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                   OK zs \\<longrightarrow>\n                   xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f);\n        y \\<squnion>\\<^bsub>f\\<^esub> ya = OK x2;\n        coalesce (ysa [\\<squnion>\\<^bsub>f\\<^esub>] ysb) = OK x2a;\n        x2 # x2a = zs\\<rbrakk>\n       \\<Longrightarrow> y # ysa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "apply (force simp add: semilat_le_err_OK1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma coalesce_eq_OK2_D [rule_format]:\n  \"semilat(err A, Err.le r, lift2 f) \\<Longrightarrow>\n  \\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>ys. ys \\<in> list n A \\<longrightarrow>\n  (\\<forall>zs. coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs \\<longrightarrow> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list n A \\<longrightarrow>\n           (\\<forall>zs.\n               coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n               OK zs \\<longrightarrow>\n               ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list n A \\<longrightarrow>\n           (\\<forall>zs.\n               coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n               OK zs \\<longrightarrow>\n               ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list 0 A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list 0 A \\<longrightarrow>\n           (\\<forall>zs.\n               coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n               OK zs \\<longrightarrow>\n               ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))\n 2. \\<And>n.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<longrightarrow>\n                           ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list (Suc n) A \\<longrightarrow>\n                            (\\<forall>ys.\n                                ys \\<in> list (Suc n) A \\<longrightarrow>\n                                (\\<forall>zs.\n                                    coalesce\n                                     (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                                    OK zs \\<longrightarrow>\n                                    ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<longrightarrow>\n                           ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list (Suc n) A \\<longrightarrow>\n                            (\\<forall>ys.\n                                ys \\<in> list (Suc n) A \\<longrightarrow>\n                                (\\<forall>zs.\n                                    coalesce\n                                     (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                                    OK zs \\<longrightarrow>\n                                    ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<longrightarrow>\n                           ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f); xs \\<in> list (Suc n) A;\n        ys \\<in> list (Suc n) A;\n        coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs\\<rbrakk>\n       \\<Longrightarrow> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "apply (simp add: in_list_Suc_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<longrightarrow>\n                           ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f);\n        \\<exists>y\\<in>A. \\<exists>ys\\<in>list n A. xs = y # ys;\n        \\<exists>y\\<in>A. \\<exists>ysa\\<in>list n A. ys = y # ysa;\n        coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs\\<rbrakk>\n       \\<Longrightarrow> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs y ya ysa ysb.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<longrightarrow>\n                           ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f);\n        coalesce (y # ysa [\\<squnion>\\<^bsub>f\\<^esub>] (ya # ysb)) = OK zs;\n        y \\<in> A; ya \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> ya # ysb [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "apply (simp split: err.split_asm add: lem Err.sup_def lift2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n zs y ya ysa ysb x2 x2a.\n       \\<lbrakk>y \\<in> A; ya \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A;\n        \\<forall>xs.\n           xs \\<in> list n A \\<longrightarrow>\n           (\\<forall>ys.\n               ys \\<in> list n A \\<longrightarrow>\n               (\\<forall>zs.\n                   coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                   OK zs \\<longrightarrow>\n                   ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f);\n        y \\<squnion>\\<^bsub>f\\<^esub> ya = OK x2;\n        coalesce (ysa [\\<squnion>\\<^bsub>f\\<^esub>] ysb) = OK x2a;\n        x2 # x2a = zs\\<rbrakk>\n       \\<Longrightarrow> ya # ysb [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs", "apply (force simp add: semilat_le_err_OK2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma lift2_le_ub:\n  \"\\<lbrakk> semilat(err A, Err.le r, lift2 f); x\\<in>A; y\\<in>A; x \\<squnion>\\<^sub>f y = OK z;\n      u\\<in>A; x \\<sqsubseteq>\\<^sub>r u; y \\<sqsubseteq>\\<^sub>r u \\<rbrakk> \\<Longrightarrow> z \\<sqsubseteq>\\<^sub>r u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>semilat (err A, Err.le r, lift2 f); x \\<in> A; y \\<in> A;\n     x \\<squnion>\\<^bsub>f\\<^esub> y = OK z; u \\<in> A;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> u;\n     y \\<sqsubseteq>\\<^bsub>r\\<^esub> u\\<rbrakk>\n    \\<Longrightarrow> z \\<sqsubseteq>\\<^bsub>r\\<^esub> u", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>semilat (err A, Err.le r, lift2 f); x \\<in> A; y \\<in> A;\n     x \\<squnion>\\<^bsub>f\\<^esub> y = OK z; u \\<in> A;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> u;\n     y \\<sqsubseteq>\\<^bsub>r\\<^esub> u\\<rbrakk>\n    \\<Longrightarrow> z \\<sqsubseteq>\\<^bsub>r\\<^esub> u", "apply (unfold semilat_Def plussub_def err_def')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order (Err.le r) \\<and>\n             closed (insert Err {x. \\<exists>y\\<in>A. x = OK y})\n              (lift2 f) \\<and>\n             (\\<forall>x\\<in>insert Err {x. \\<exists>y\\<in>A. x = OK y}.\n                 \\<forall>y\\<in>insert Err {x. \\<exists>y\\<in>A. x = OK y}.\n                    x \\<sqsubseteq>\\<^bsub>Err.le\n      r\\<^esub> lift2 f x y) \\<and>\n             (\\<forall>x\\<in>insert Err {x. \\<exists>y\\<in>A. x = OK y}.\n                 \\<forall>y\\<in>insert Err {x. \\<exists>y\\<in>A. x = OK y}.\n                    y \\<sqsubseteq>\\<^bsub>Err.le\n      r\\<^esub> lift2 f x y) \\<and>\n             (\\<forall>x\\<in>insert Err {x. \\<exists>y\\<in>A. x = OK y}.\n                 \\<forall>y\\<in>insert Err {x. \\<exists>y\\<in>A. x = OK y}.\n                    \\<forall>z\\<in>insert Err\n                                    {x. \\<exists>y\\<in>A. x = OK y}.\n                       x \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z \\<and>\n                       y \\<sqsubseteq>\\<^bsub>Err.le\n         r\\<^esub> z \\<longrightarrow>\n                       lift2 f x y \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z);\n     x \\<in> A; y \\<in> A; f x y = OK z; u \\<in> A;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> u;\n     y \\<sqsubseteq>\\<^bsub>r\\<^esub> u\\<rbrakk>\n    \\<Longrightarrow> z \\<sqsubseteq>\\<^bsub>r\\<^esub> u", "apply (simp add: lift2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r \\<and>\n             closed (insert Err {x. \\<exists>y\\<in>A. x = OK y})\n              (lift2 f) \\<and>\n             (\\<forall>y\\<in>A.\n                 \\<forall>ya\\<in>A.\n                    OK y \n                    \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> f y ya) \\<and>\n             (\\<forall>y\\<in>A.\n                 \\<forall>ya\\<in>A.\n                    OK ya \n                    \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> f y ya) \\<and>\n             (\\<forall>y\\<in>A.\n                 \\<forall>ya\\<in>A.\n                    \\<forall>yb\\<in>A.\n                       y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb \\<and>\n                       ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb \\<longrightarrow>\n                       (\\<exists>yc.\n                           f y ya = OK yc \\<and>\n                           yc \\<sqsubseteq>\\<^bsub>r\\<^esub> yb));\n     x \\<in> A; y \\<in> A; f x y = OK z; u \\<in> A;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> u;\n     y \\<sqsubseteq>\\<^bsub>r\\<^esub> u\\<rbrakk>\n    \\<Longrightarrow> z \\<sqsubseteq>\\<^bsub>r\\<^esub> u", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A; f x y = OK z; u \\<in> A;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> u; y \\<sqsubseteq>\\<^bsub>r\\<^esub> u;\n     order r; closed (insert Err {x. \\<exists>y\\<in>A. x = OK y}) (lift2 f);\n     \\<forall>y\\<in>A.\n        \\<forall>ya\\<in>A.\n           OK y \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> f y ya;\n     \\<forall>y\\<in>A.\n        \\<forall>ya\\<in>A.\n           OK ya \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> f y ya;\n     \\<forall>y\\<in>A.\n        \\<forall>ya\\<in>A.\n           \\<forall>yb\\<in>A.\n              y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb \\<and>\n              ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb \\<longrightarrow>\n              (\\<exists>yc.\n                  f y ya = OK yc \\<and>\n                  yc \\<sqsubseteq>\\<^bsub>r\\<^esub> yb)\\<rbrakk>\n    \\<Longrightarrow> z \\<sqsubseteq>\\<^bsub>r\\<^esub> u", "apply (rotate_tac -3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>A.\n                \\<forall>ya\\<in>A.\n                   OK y \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> f y ya;\n     \\<forall>y\\<in>A.\n        \\<forall>ya\\<in>A.\n           OK ya \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> f y ya;\n     \\<forall>y\\<in>A.\n        \\<forall>ya\\<in>A.\n           \\<forall>yb\\<in>A.\n              y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb \\<and>\n              ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb \\<longrightarrow>\n              (\\<exists>yc.\n                  f y ya = OK yc \\<and>\n                  yc \\<sqsubseteq>\\<^bsub>r\\<^esub> yb);\n     x \\<in> A; y \\<in> A; f x y = OK z; u \\<in> A;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> u; y \\<sqsubseteq>\\<^bsub>r\\<^esub> u;\n     order r;\n     closed (insert Err {x. \\<exists>y\\<in>A. x = OK y}) (lift2 f)\\<rbrakk>\n    \\<Longrightarrow> z \\<sqsubseteq>\\<^bsub>r\\<^esub> u", "apply (erule thin_rl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>A.\n                \\<forall>ya\\<in>A.\n                   OK ya \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> f y ya;\n     \\<forall>y\\<in>A.\n        \\<forall>ya\\<in>A.\n           \\<forall>yb\\<in>A.\n              y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb \\<and>\n              ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb \\<longrightarrow>\n              (\\<exists>yc.\n                  f y ya = OK yc \\<and>\n                  yc \\<sqsubseteq>\\<^bsub>r\\<^esub> yb);\n     x \\<in> A; y \\<in> A; f x y = OK z; u \\<in> A;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> u; y \\<sqsubseteq>\\<^bsub>r\\<^esub> u;\n     order r;\n     closed (insert Err {x. \\<exists>y\\<in>A. x = OK y}) (lift2 f)\\<rbrakk>\n    \\<Longrightarrow> z \\<sqsubseteq>\\<^bsub>r\\<^esub> u", "apply (erule thin_rl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>A.\n                \\<forall>ya\\<in>A.\n                   \\<forall>yb\\<in>A.\n                      y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb \\<and>\n                      ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb \\<longrightarrow>\n                      (\\<exists>yc.\n                          f y ya = OK yc \\<and>\n                          yc \\<sqsubseteq>\\<^bsub>r\\<^esub> yb);\n     x \\<in> A; y \\<in> A; f x y = OK z; u \\<in> A;\n     x \\<sqsubseteq>\\<^bsub>r\\<^esub> u; y \\<sqsubseteq>\\<^bsub>r\\<^esub> u;\n     order r;\n     closed (insert Err {x. \\<exists>y\\<in>A. x = OK y}) (lift2 f)\\<rbrakk>\n    \\<Longrightarrow> z \\<sqsubseteq>\\<^bsub>r\\<^esub> u", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma coalesce_eq_OK_ub_D [rule_format]:\n  \"semilat(err A, Err.le r, lift2 f) \\<Longrightarrow>\n  \\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>ys. ys \\<in> list n A \\<longrightarrow>\n  (\\<forall>zs us. coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us\n           \\<and> us \\<in> list n A \\<longrightarrow> zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list n A \\<longrightarrow>\n           (\\<forall>zs us.\n               coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs \\<and>\n               xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n               ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n               us \\<in> list n A \\<longrightarrow>\n               zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list n A \\<longrightarrow>\n           (\\<forall>zs us.\n               coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs \\<and>\n               xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n               ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n               us \\<in> list n A \\<longrightarrow>\n               zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us))", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list 0 A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list 0 A \\<longrightarrow>\n           (\\<forall>zs us.\n               coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs \\<and>\n               xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n               ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n               us \\<in> list 0 A \\<longrightarrow>\n               zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us))\n 2. \\<And>n.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs us.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<and>\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                           ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                           us \\<in> list n A \\<longrightarrow>\n                           zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us));\n        semilat (err A, Err.le r, lift2 f)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list (Suc n) A \\<longrightarrow>\n                            (\\<forall>ys.\n                                ys \\<in> list (Suc n) A \\<longrightarrow>\n                                (\\<forall>zs us.\n                                    coalesce\n                                     (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                                    OK zs \\<and>\n                                    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                                    ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                                    us \\<in> list (Suc n)\n        A \\<longrightarrow>\n                                    zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs us.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<and>\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                           ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                           us \\<in> list n A \\<longrightarrow>\n                           zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us));\n        semilat (err A, Err.le r, lift2 f)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list (Suc n) A \\<longrightarrow>\n                            (\\<forall>ys.\n                                ys \\<in> list (Suc n) A \\<longrightarrow>\n                                (\\<forall>zs us.\n                                    coalesce\n                                     (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                                    OK zs \\<and>\n                                    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                                    ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                                    us \\<in> list (Suc n)\n        A \\<longrightarrow>\n                                    zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs us.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs us.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<and>\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                           ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                           us \\<in> list n A \\<longrightarrow>\n                           zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us));\n        semilat (err A, Err.le r, lift2 f); xs \\<in> list (Suc n) A;\n        ys \\<in> list (Suc n) A;\n        coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs;\n        xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us;\n        ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us;\n        us \\<in> list (Suc n) A\\<rbrakk>\n       \\<Longrightarrow> zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us", "apply (simp add: in_list_Suc_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs us.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs us.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<and>\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                           ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                           us \\<in> list n A \\<longrightarrow>\n                           zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us));\n        semilat (err A, Err.le r, lift2 f);\n        \\<exists>y\\<in>A. \\<exists>ys\\<in>list n A. xs = y # ys;\n        \\<exists>y\\<in>A. \\<exists>ysa\\<in>list n A. ys = y # ysa;\n        coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = OK zs;\n        xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us;\n        ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us;\n        \\<exists>y\\<in>A. \\<exists>ys\\<in>list n A. us = y # ys\\<rbrakk>\n       \\<Longrightarrow> zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs us y ya yb ysa ysb ysc.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       (\\<forall>zs us.\n                           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                           OK zs \\<and>\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                           ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                           us \\<in> list n A \\<longrightarrow>\n                           zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us));\n        semilat (err A, Err.le r, lift2 f);\n        coalesce (y # ysa [\\<squnion>\\<^bsub>f\\<^esub>] (ya # ysb)) = OK zs;\n        y \\<in> A; ya \\<in> A; yb \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A; ysc \\<in> list n A;\n        y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysb [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc\\<rbrakk>\n       \\<Longrightarrow> zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] yb # ysc", "apply (simp (no_asm_use) split: err.split_asm add: lem Err.sup_def lift2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n zs y ya yb ysa ysb ysc x2 x2a.\n       \\<lbrakk>y \\<in> A; ya \\<in> A; yb \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A; ysc \\<in> list n A;\n        y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysb [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        \\<forall>xs.\n           xs \\<in> list n A \\<longrightarrow>\n           (\\<forall>ys.\n               ys \\<in> list n A \\<longrightarrow>\n               (\\<forall>zs us.\n                   coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                   OK zs \\<and>\n                   xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                   ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                   us \\<in> list n A \\<longrightarrow>\n                   zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us));\n        semilat (err A, Err.le r, lift2 f);\n        y \\<squnion>\\<^bsub>f\\<^esub> ya = OK x2;\n        coalesce (ysa [\\<squnion>\\<^bsub>f\\<^esub>] ysb) = OK x2a;\n        x2 # x2a = zs\\<rbrakk>\n       \\<Longrightarrow> zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] yb # ysc", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n zs y ya yb ysa ysb ysc x2 x2a.\n       \\<lbrakk>y \\<in> A; ya \\<in> A; yb \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A; ysc \\<in> list n A;\n        y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysb [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        \\<forall>xs.\n           xs \\<in> list n A \\<longrightarrow>\n           (\\<forall>ys.\n               ys \\<in> list n A \\<longrightarrow>\n               (\\<forall>zs us.\n                   coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                   OK zs \\<and>\n                   xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                   ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                   us \\<in> list n A \\<longrightarrow>\n                   zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us));\n        semilat (err A, Err.le r, lift2 f);\n        y \\<squnion>\\<^bsub>f\\<^esub> ya = OK x2;\n        coalesce (ysa [\\<squnion>\\<^bsub>f\\<^esub>] ysb) = OK x2a\\<rbrakk>\n       \\<Longrightarrow> x2 \\<sqsubseteq>\\<^bsub>r\\<^esub> yb \\<and>\n                         x2a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n zs y ya yb ysa ysb ysc x2 x2a.\n       \\<lbrakk>y \\<in> A; ya \\<in> A; yb \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A; ysc \\<in> list n A;\n        y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysb [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        \\<forall>xs.\n           xs \\<in> list n A \\<longrightarrow>\n           (\\<forall>ys.\n               ys \\<in> list n A \\<longrightarrow>\n               (\\<forall>zs us.\n                   coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                   OK zs \\<and>\n                   xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                   ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                   us \\<in> list n A \\<longrightarrow>\n                   zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us));\n        semilat (err A, Err.le r, lift2 f);\n        y \\<squnion>\\<^bsub>f\\<^esub> ya = OK x2;\n        coalesce (ysa [\\<squnion>\\<^bsub>f\\<^esub>] ysb) = OK x2a\\<rbrakk>\n       \\<Longrightarrow> x2 \\<sqsubseteq>\\<^bsub>r\\<^esub> yb\n 2. \\<And>n zs y ya yb ysa ysb ysc x2 x2a.\n       \\<lbrakk>y \\<in> A; ya \\<in> A; yb \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A; ysc \\<in> list n A;\n        y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysb [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        \\<forall>xs.\n           xs \\<in> list n A \\<longrightarrow>\n           (\\<forall>ys.\n               ys \\<in> list n A \\<longrightarrow>\n               (\\<forall>zs us.\n                   coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                   OK zs \\<and>\n                   xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                   ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                   us \\<in> list n A \\<longrightarrow>\n                   zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us));\n        semilat (err A, Err.le r, lift2 f);\n        y \\<squnion>\\<^bsub>f\\<^esub> ya = OK x2;\n        coalesce (ysa [\\<squnion>\\<^bsub>f\\<^esub>] ysb) = OK x2a\\<rbrakk>\n       \\<Longrightarrow> x2a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc", "apply (blast intro: lift2_le_ub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n zs y ya yb ysa ysb ysc x2 x2a.\n       \\<lbrakk>y \\<in> A; ya \\<in> A; yb \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A; ysc \\<in> list n A;\n        y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysb [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        \\<forall>xs.\n           xs \\<in> list n A \\<longrightarrow>\n           (\\<forall>ys.\n               ys \\<in> list n A \\<longrightarrow>\n               (\\<forall>zs us.\n                   coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                   OK zs \\<and>\n                   xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                   ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us \\<and>\n                   us \\<in> list n A \\<longrightarrow>\n                   zs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] us));\n        semilat (err A, Err.le r, lift2 f);\n        y \\<squnion>\\<^bsub>f\\<^esub> ya = OK x2;\n        coalesce (ysa [\\<squnion>\\<^bsub>f\\<^esub>] ysb) = OK x2a\\<rbrakk>\n       \\<Longrightarrow> x2a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma lift2_eq_ErrD:\n  \"\\<lbrakk> x \\<squnion>\\<^sub>f y = Err; semilat(err A, Err.le r, lift2 f); x\\<in>A; y\\<in>A \\<rbrakk>\n  \\<Longrightarrow> \\<not>(\\<exists>u\\<in>A. x \\<sqsubseteq>\\<^sub>r u \\<and> y \\<sqsubseteq>\\<^sub>r u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<squnion>\\<^bsub>f\\<^esub> y = Err;\n     semilat (err A, Err.le r, lift2 f); x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<exists>u\\<in>A.\n                                 x \\<sqsubseteq>\\<^bsub>r\\<^esub> u \\<and>\n                                 y \\<sqsubseteq>\\<^bsub>r\\<^esub> u)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<squnion>\\<^bsub>f\\<^esub> y = Err;\n     semilat (err A, Err.le r, lift2 f); x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<exists>u\\<in>A.\n                                 x \\<sqsubseteq>\\<^bsub>r\\<^esub> u \\<and>\n                                 y \\<sqsubseteq>\\<^bsub>r\\<^esub> u)", "by (simp add: OK_plus_OK_eq_Err_conv [THEN iffD1])"], ["", "(*>*)"], ["", "lemma coalesce_eq_Err_D [rule_format]:\n  \"\\<lbrakk> semilat(err A, Err.le r, lift2 f) \\<rbrakk>\n  \\<Longrightarrow> \\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>ys. ys \\<in> list n A \\<longrightarrow>\n      coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = Err \\<longrightarrow>\n      \\<not>(\\<exists>zs \\<in> list n A. xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list n A \\<longrightarrow>\n           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n           Err \\<longrightarrow>\n           \\<not> (\\<exists>zs\\<in>list n A.\n                      xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and>\n                      ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list n A \\<longrightarrow>\n           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n           Err \\<longrightarrow>\n           \\<not> (\\<exists>zs\\<in>list n A.\n                      xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and>\n                      ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list 0 A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list 0 A \\<longrightarrow>\n           coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n           Err \\<longrightarrow>\n           \\<not> (\\<exists>zs\\<in>list 0 A.\n                      xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and>\n                      ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))\n 2. \\<And>n.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                       Err \\<longrightarrow>\n                       \\<not> (\\<exists>zs\\<in>list n A.\n                                  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and>\n                                  ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list (Suc n) A \\<longrightarrow>\n                            (\\<forall>ys.\n                                ys \\<in> list (Suc n) A \\<longrightarrow>\n                                coalesce\n                                 (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                                Err \\<longrightarrow>\n                                \\<not> (\\<exists>zs\\<in>list (Suc n) A.\n     xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and>\n     ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                       Err \\<longrightarrow>\n                       \\<not> (\\<exists>zs\\<in>list n A.\n                                  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and>\n                                  ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list (Suc n) A \\<longrightarrow>\n                            (\\<forall>ys.\n                                ys \\<in> list (Suc n) A \\<longrightarrow>\n                                coalesce\n                                 (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                                Err \\<longrightarrow>\n                                \\<not> (\\<exists>zs\\<in>list (Suc n) A.\n     xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and>\n     ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs.\n       \\<lbrakk>semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                       Err \\<longrightarrow>\n                       \\<not> (\\<exists>zs\\<in>list n A.\n                                  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<and>\n                                  ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f); xs \\<in> list (Suc n) A;\n        ys \\<in> list (Suc n) A;\n        coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = Err;\n        zs \\<in> list (Suc n) A; xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs;\n        ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: in_list_Suc_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                       Err \\<longrightarrow>\n                       (\\<forall>zs\\<in>list n A.\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<longrightarrow>\n                           \\<not> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f);\n        \\<exists>y\\<in>A. \\<exists>ys\\<in>list n A. xs = y # ys;\n        \\<exists>y\\<in>A. \\<exists>ysa\\<in>list n A. ys = y # ysa;\n        coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) = Err;\n        \\<exists>y\\<in>A. \\<exists>ys\\<in>list n A. zs = y # ys;\n        xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs;\n        ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs\\<rbrakk>\n       \\<Longrightarrow> False", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs y ya yb ysa ysb ysc.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n                       Err \\<longrightarrow>\n                       (\\<forall>zs\\<in>list n A.\n                           xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<longrightarrow>\n                           \\<not> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f);\n        coalesce (y # ysa [\\<squnion>\\<^bsub>f\\<^esub>] (ya # ysb)) = Err;\n        y \\<in> A; ya \\<in> A; yb \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A; ysc \\<in> list n A;\n        y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysb [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp split: err.split_asm add: lem Err.sup_def lift2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n y ya yb ysa ysb ysc.\n       \\<lbrakk>y \\<in> A; ya \\<in> A; yb \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A; ysc \\<in> list n A;\n        y \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        ya \\<sqsubseteq>\\<^bsub>r\\<^esub> yb;\n        ysb [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysc;\n        \\<forall>xs.\n           xs \\<in> list n A \\<longrightarrow>\n           (\\<forall>ys.\n               ys \\<in> list n A \\<longrightarrow>\n               coalesce (xs [\\<squnion>\\<^bsub>f\\<^esub>] ys) =\n               Err \\<longrightarrow>\n               (\\<forall>zs\\<in>list n A.\n                   xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs \\<longrightarrow>\n                   \\<not> ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] zs));\n        semilat (err A, Err.le r, lift2 f);\n        y \\<squnion>\\<^bsub>f\\<^esub> ya = Err\\<rbrakk>\n       \\<Longrightarrow> False", "apply (blast dest: lift2_eq_ErrD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma closed_err_lift2_conv:\n  \"closed (err A) (lift2 f) = (\\<forall>x\\<in>A. \\<forall>y\\<in>A. x \\<squnion>\\<^sub>f y \\<in> err A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed (err A) (lift2 f) =\n    (\\<forall>x\\<in>A.\n        \\<forall>y\\<in>A. x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> err A)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed (err A) (lift2 f) =\n    (\\<forall>x\\<in>A.\n        \\<forall>y\\<in>A. x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> err A)", "apply (unfold closed_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>err A.\n        \\<forall>y\\<in>err A.\n           x \\<squnion>\\<^bsub>lift2 f\\<^esub> y \\<in> err A) =\n    (\\<forall>x\\<in>A.\n        \\<forall>y\\<in>A. x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> err A)", "apply (simp add: err_def')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma closed_map2_list [rule_format]:\n  \"closed (err A) (lift2 f) \\<Longrightarrow>\n  \\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>ys. ys \\<in> list n A \\<longrightarrow>\n  map2 f xs ys \\<in> list n (err A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed (err A) (lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list n A \\<longrightarrow>\n           map2 f xs ys \\<in> list n (err A))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed (err A) (lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list n A \\<longrightarrow>\n           map2 f xs ys \\<in> list n (err A))", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. closed (err A) (lift2 f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list 0 A \\<longrightarrow>\n       (\\<forall>ys.\n           ys \\<in> list 0 A \\<longrightarrow>\n           map2 f xs ys \\<in> list 0 (err A))\n 2. \\<And>n.\n       \\<lbrakk>closed (err A) (lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       map2 f xs ys \\<in> list n (err A));\n        closed (err A) (lift2 f)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list (Suc n) A \\<longrightarrow>\n                            (\\<forall>ys.\n                                ys \\<in> list (Suc n) A \\<longrightarrow>\n                                map2 f xs ys \\<in> list (Suc n) (err A))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>closed (err A) (lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       map2 f xs ys \\<in> list n (err A));\n        closed (err A) (lift2 f)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list (Suc n) A \\<longrightarrow>\n                            (\\<forall>ys.\n                                ys \\<in> list (Suc n) A \\<longrightarrow>\n                                map2 f xs ys \\<in> list (Suc n) (err A))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys.\n       \\<lbrakk>closed (err A) (lift2 f) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       map2 f xs ys \\<in> list n (err A));\n        closed (err A) (lift2 f); xs \\<in> list (Suc n) A;\n        ys \\<in> list (Suc n) A\\<rbrakk>\n       \\<Longrightarrow> map2 f xs ys \\<in> list (Suc n) (err A)", "apply (simp add: in_list_Suc_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       map2 f xs ys \\<in> list n (err A));\n        closed (err A) (lift2 f);\n        \\<exists>y\\<in>A. \\<exists>ys\\<in>list n A. xs = y # ys;\n        \\<exists>y\\<in>A. \\<exists>ysa\\<in>list n A. ys = y # ysa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>err A.\n                            \\<exists>ysa\\<in>list n (err A).\n                               map2 f xs ys = y # ysa", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs ys y ya ysa ysb.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>ys.\n                       ys \\<in> list n A \\<longrightarrow>\n                       map2 f xs ys \\<in> list n (err A));\n        closed (err A) (lift2 f); y \\<in> A; ya \\<in> A; ysa \\<in> list n A;\n        ysb \\<in> list n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>yb\\<in>err A.\n                            \\<exists>ys\\<in>list n (err A).\n                               map2 f (y # ysa) (ya # ysb) = yb # ys", "apply (simp add: plussub_def closed_err_lift2_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma closed_lift2_sup:\n  \"closed (err A) (lift2 f) \\<Longrightarrow>\n  closed (err (list n A)) (lift2 (sup f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed (err A) (lift2 f) \\<Longrightarrow>\n    closed (err (list n A)) (lift2 (Listn.sup f))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed (err A) (lift2 f) \\<Longrightarrow>\n    closed (err (list n A)) (lift2 (Listn.sup f))", "by (fastforce  simp add: closed_def plussub_def sup_def lift2_def\n                          coalesce_in_err_list closed_map2_list\n                split: err.split)"], ["", "(*>*)"], ["", "lemma err_semilat_sup:\n  \"err_semilat (A,r,f) \\<Longrightarrow>\n  err_semilat (list n A, Listn.le r, sup f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. err_semilat (A, r, f) \\<Longrightarrow>\n    err_semilat (list n A, Listn.le r, Listn.sup f)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. err_semilat (A, r, f) \\<Longrightarrow>\n    err_semilat (list n A, Listn.le r, Listn.sup f)", "apply (unfold Err.sl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat\n     (case (A, r, f) of\n      (A, r, f) \\<Rightarrow> (err A, Err.le r, lift2 f)) \\<Longrightarrow>\n    semilat\n     (case (list n A, Listn.le r, Listn.sup f) of\n      (A, r, f) \\<Rightarrow> (err A, Err.le r, lift2 f))", "apply (simp only: split_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    semilat (err (list n A), Err.le (Listn.le r), lift2 (Listn.sup f))", "apply (simp (no_asm) only: semilat_Def plussub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    order (Err.le (Listn.le r)) \\<and>\n    closed (err (list n A)) (lift2 (Listn.sup f)) \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           x \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Listn.le\n                                     r)\\<^esub> lift2 (Listn.sup f) x\n           y) \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           y \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Listn.le\n                                     r)\\<^esub> lift2 (Listn.sup f) x\n           y) \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           \\<forall>z\\<in>err (list n A).\n              x \\<sqsubseteq>\\<^bsub>Err.le (Listn.le r)\\<^esub> z \\<and>\n              y \\<sqsubseteq>\\<^bsub>Err.le\n(Listn.le r)\\<^esub> z \\<longrightarrow>\n              lift2 (Listn.sup f) x y \n              \\<sqsubseteq>\\<^bsub>Err.le (Listn.le r)\\<^esub> z)", "apply (simp (no_asm_simp) only: Semilat.closedI [OF Semilat.intro] closed_lift2_sup)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    order (Err.le (Listn.le r)) \\<and>\n    True \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           x \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Listn.le\n                                     r)\\<^esub> lift2 (Listn.sup f) x\n           y) \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           y \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Listn.le\n                                     r)\\<^esub> lift2 (Listn.sup f) x\n           y) \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           \\<forall>z\\<in>err (list n A).\n              x \\<sqsubseteq>\\<^bsub>Err.le (Listn.le r)\\<^esub> z \\<and>\n              y \\<sqsubseteq>\\<^bsub>Err.le\n(Listn.le r)\\<^esub> z \\<longrightarrow>\n              lift2 (Listn.sup f) x y \n              \\<sqsubseteq>\\<^bsub>Err.le (Listn.le r)\\<^esub> z)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    order (Err.le (Listn.le r))\n 2. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    True \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           x \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Listn.le\n                                     r)\\<^esub> lift2 (Listn.sup f) x\n           y) \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           y \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Listn.le\n                                     r)\\<^esub> lift2 (Listn.sup f) x\n           y) \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           \\<forall>z\\<in>err (list n A).\n              x \\<sqsubseteq>\\<^bsub>Err.le (Listn.le r)\\<^esub> z \\<and>\n              y \\<sqsubseteq>\\<^bsub>Err.le\n(Listn.le r)\\<^esub> z \\<longrightarrow>\n              lift2 (Listn.sup f) x y \n              \\<sqsubseteq>\\<^bsub>Err.le (Listn.le r)\\<^esub> z)", "apply (drule Semilat.orderI [OF Semilat.intro])"], ["proof (prove)\ngoal (2 subgoals):\n 1. order (Err.le r) \\<Longrightarrow> order (Err.le (Listn.le r))\n 2. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    True \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           x \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Listn.le\n                                     r)\\<^esub> lift2 (Listn.sup f) x\n           y) \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           y \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Listn.le\n                                     r)\\<^esub> lift2 (Listn.sup f) x\n           y) \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           \\<forall>z\\<in>err (list n A).\n              x \\<sqsubseteq>\\<^bsub>Err.le (Listn.le r)\\<^esub> z \\<and>\n              y \\<sqsubseteq>\\<^bsub>Err.le\n(Listn.le r)\\<^esub> z \\<longrightarrow>\n              lift2 (Listn.sup f) x y \n              \\<sqsubseteq>\\<^bsub>Err.le (Listn.le r)\\<^esub> z)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    True \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           x \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Listn.le\n                                     r)\\<^esub> lift2 (Listn.sup f) x\n           y) \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           y \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Listn.le\n                                     r)\\<^esub> lift2 (Listn.sup f) x\n           y) \\<and>\n    (\\<forall>x\\<in>err (list n A).\n        \\<forall>y\\<in>err (list n A).\n           \\<forall>z\\<in>err (list n A).\n              x \\<sqsubseteq>\\<^bsub>Err.le (Listn.le r)\\<^esub> z \\<and>\n              y \\<sqsubseteq>\\<^bsub>Err.le\n(Listn.le r)\\<^esub> z \\<longrightarrow>\n              lift2 (Listn.sup f) x y \n              \\<sqsubseteq>\\<^bsub>Err.le (Listn.le r)\\<^esub> z)", "apply (simp (no_asm) only: unfold_lesub_err Err.le_def err_def' sup_def lift2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    True \\<and>\n    (\\<forall>x\\<in>insert Err {x. \\<exists>y\\<in>list n A. x = OK y}.\n        \\<forall>y\\<in>insert Err {x. \\<exists>y\\<in>list n A. x = OK y}.\n           case case x of Err \\<Rightarrow> Err\n                | OK x \\<Rightarrow>\n                    case y of Err \\<Rightarrow> Err\n                    | OK y \\<Rightarrow>\n                        if length x = length y\n                        then coalesce (x [\\<squnion>\\<^bsub>f\\<^esub>] y)\n                        else Err of\n           Err \\<Rightarrow> True\n           | OK y \\<Rightarrow>\n               case x of Err \\<Rightarrow> False\n               | OK x \\<Rightarrow>\n                   x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y) \\<and>\n    (\\<forall>x\\<in>insert Err {x. \\<exists>y\\<in>list n A. x = OK y}.\n        \\<forall>y\\<in>insert Err {x. \\<exists>y\\<in>list n A. x = OK y}.\n           case case x of Err \\<Rightarrow> Err\n                | OK x \\<Rightarrow>\n                    case y of Err \\<Rightarrow> Err\n                    | OK y \\<Rightarrow>\n                        if length x = length y\n                        then coalesce (x [\\<squnion>\\<^bsub>f\\<^esub>] y)\n                        else Err of\n           Err \\<Rightarrow> True\n           | OK ya \\<Rightarrow>\n               case y of Err \\<Rightarrow> False\n               | OK x \\<Rightarrow>\n                   x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ya) \\<and>\n    (\\<forall>x\\<in>insert Err {x. \\<exists>y\\<in>list n A. x = OK y}.\n        \\<forall>y\\<in>insert Err {x. \\<exists>y\\<in>list n A. x = OK y}.\n           \\<forall>z\\<in>insert Err {x. \\<exists>y\\<in>list n A. x = OK y}.\n              (case z of Err \\<Rightarrow> True\n               | OK y \\<Rightarrow>\n                   case x of Err \\<Rightarrow> False\n                   | OK x \\<Rightarrow>\n                       x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y) \\<and>\n              (case z of Err \\<Rightarrow> True\n               | OK ya \\<Rightarrow>\n                   case y of Err \\<Rightarrow> False\n                   | OK x \\<Rightarrow>\n                       x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ya) \\<longrightarrow>\n              (case z of Err \\<Rightarrow> True\n               | OK ya \\<Rightarrow>\n                   case case x of Err \\<Rightarrow> Err\n                        | OK x \\<Rightarrow>\n                            case y of Err \\<Rightarrow> Err\n                            | OK y \\<Rightarrow>\n                                if length x = length y\n                                then coalesce\n(x [\\<squnion>\\<^bsub>f\\<^esub>] y)\n                                else Err of\n                   Err \\<Rightarrow> False\n                   | OK x \\<Rightarrow>\n                       x [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ya))", "apply (simp (no_asm_simp) add: coalesce_eq_OK1_D coalesce_eq_OK2_D split: err.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (err A, Err.le r, lift2 f) \\<Longrightarrow>\n    \\<forall>y\\<in>list n A.\n       \\<forall>ya\\<in>list n A.\n          \\<forall>yb\\<in>list n A.\n             (coalesce (y [\\<squnion>\\<^bsub>f\\<^esub>] ya) =\n              Err \\<longrightarrow>\n              y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] yb \\<longrightarrow>\n              \\<not> ya [\\<sqsubseteq>\\<^bsub>r\\<^esub>] yb) \\<and>\n             (\\<forall>x2.\n                 coalesce (y [\\<squnion>\\<^bsub>f\\<^esub>] ya) =\n                 OK x2 \\<longrightarrow>\n                 y [\\<sqsubseteq>\\<^bsub>r\\<^esub>] yb \\<and>\n                 ya [\\<sqsubseteq>\\<^bsub>r\\<^esub>] yb \\<longrightarrow>\n                 x2 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] yb)", "apply (blast intro: coalesce_eq_OK_ub_D dest: coalesce_eq_Err_D)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma err_semilat_upto_esl:\n  \"\\<And>L. err_semilat L \\<Longrightarrow> err_semilat(upto_esl m L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L. err_semilat L \\<Longrightarrow> err_semilat (upto_esl m L)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L. err_semilat L \\<Longrightarrow> err_semilat (upto_esl m L)", "apply (unfold Listn.upto_esl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L.\n       err_semilat L \\<Longrightarrow>\n       err_semilat\n        (case L of\n         (A, r, f) \\<Rightarrow>\n           (\\<Union> {list n A |n. n \\<le> m}, Listn.le r, Listn.sup f))", "apply (simp (no_asm_simp) only: split_tupled_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       err_semilat (a, aa, b) \\<Longrightarrow>\n       err_semilat\n        (case (a, aa, b) of\n         (A, r, f) \\<Rightarrow>\n           (\\<Union> {list n A |n. n \\<le> m}, Listn.le r, Listn.sup f))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       err_semilat (a, aa, b) \\<Longrightarrow>\n       err_semilat\n        (\\<Union> {list n a |n. n \\<le> m}, Listn.le aa, Listn.sup b)", "apply (fastforce intro!: err_semilat_UnionI err_semilat_sup\n                dest: lesub_list_impl_same_size\n                simp add: plussub_def Listn.sup_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "end"]]}