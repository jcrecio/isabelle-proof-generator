{"file_name": "/home/qj213/afp-2021-10-22/thys/Jinja/J/execute_WellType.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jinja", "problem_names": ["lemma WTCond1:\n  \"\\<lbrakk>P,E \\<turnstile> e :: Boolean;  P,E \\<turnstile> e\\<^sub>1::T\\<^sub>1;  P,E \\<turnstile> e\\<^sub>2::T\\<^sub>2; P \\<turnstile> T\\<^sub>1 \\<le> T\\<^sub>2;\n    P \\<turnstile> T\\<^sub>2 \\<le> T\\<^sub>1 \\<longrightarrow> T\\<^sub>2 = T\\<^sub>1 \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> if (e) e\\<^sub>1 else e\\<^sub>2 :: T\\<^sub>2\"", "lemma WTCond2:\n  \"\\<lbrakk>P,E \\<turnstile> e :: Boolean;  P,E \\<turnstile> e\\<^sub>1::T\\<^sub>1;  P,E \\<turnstile> e\\<^sub>2::T\\<^sub>2; P \\<turnstile> T\\<^sub>2 \\<le> T\\<^sub>1;\n    P \\<turnstile> T\\<^sub>1 \\<le> T\\<^sub>2 \\<longrightarrow> T\\<^sub>1 = T\\<^sub>2 \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> if (e) e\\<^sub>1 else e\\<^sub>2 :: T\\<^sub>1\"", "lemmas [code_pred_intro] =\n  WT_WTs.WTNew\n  WT_WTs.WTCast\n  WT_WTs.WTVal\n  WT_WTs.WTVar\n  WT_WTs.WTBinOpEq\n  WT_WTs.WTBinOpAdd\n  WT_WTs.WTLAss\n  WT_WTs.WTFAcc\n  WT_WTs.WTFAss\n  WT_WTs.WTCall\n  WT_WTs.WTBlock\n  WT_WTs.WTSeq", "lemmas [code_pred_intro] =\n  WT_WTs.WTWhile\n  WT_WTs.WTThrow\n  WT_WTs.WTTry\n  WT_WTs.WTNil\n  WT_WTs.WTCons"], "translations": [["", "lemma WTCond1:\n  \"\\<lbrakk>P,E \\<turnstile> e :: Boolean;  P,E \\<turnstile> e\\<^sub>1::T\\<^sub>1;  P,E \\<turnstile> e\\<^sub>2::T\\<^sub>2; P \\<turnstile> T\\<^sub>1 \\<le> T\\<^sub>2;\n    P \\<turnstile> T\\<^sub>2 \\<le> T\\<^sub>1 \\<longrightarrow> T\\<^sub>2 = T\\<^sub>1 \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> if (e) e\\<^sub>1 else e\\<^sub>2 :: T\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> e :: Boolean;\n     P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n     P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n     P \\<turnstile> T\\<^sub>1 \\<le> T\\<^sub>2;\n     P \\<turnstile> T\\<^sub>2 \\<le> T\\<^sub>1 \\<longrightarrow>\n     T\\<^sub>2 = T\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> if (e) e\\<^sub>1\n                      else e\\<^sub>2 :: T\\<^sub>2", "by (fastforce)"], ["", "lemma WTCond2:\n  \"\\<lbrakk>P,E \\<turnstile> e :: Boolean;  P,E \\<turnstile> e\\<^sub>1::T\\<^sub>1;  P,E \\<turnstile> e\\<^sub>2::T\\<^sub>2; P \\<turnstile> T\\<^sub>2 \\<le> T\\<^sub>1;\n    P \\<turnstile> T\\<^sub>1 \\<le> T\\<^sub>2 \\<longrightarrow> T\\<^sub>1 = T\\<^sub>2 \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> if (e) e\\<^sub>1 else e\\<^sub>2 :: T\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> e :: Boolean;\n     P,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n     P,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n     P \\<turnstile> T\\<^sub>2 \\<le> T\\<^sub>1;\n     P \\<turnstile> T\\<^sub>1 \\<le> T\\<^sub>2 \\<longrightarrow>\n     T\\<^sub>1 = T\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> if (e) e\\<^sub>1\n                      else e\\<^sub>2 :: T\\<^sub>1", "by (fastforce)"], ["", "lemmas [code_pred_intro] =\n  WT_WTs.WTNew\n  WT_WTs.WTCast\n  WT_WTs.WTVal\n  WT_WTs.WTVar\n  WT_WTs.WTBinOpEq\n  WT_WTs.WTBinOpAdd\n  WT_WTs.WTLAss\n  WT_WTs.WTFAcc\n  WT_WTs.WTFAss\n  WT_WTs.WTCall\n  WT_WTs.WTBlock\n  WT_WTs.WTSeq"], ["", "declare\n  WTCond1 [code_pred_intro WTCond1]\n  WTCond2 [code_pred_intro WTCond2]"], ["", "lemmas [code_pred_intro] =\n  WT_WTs.WTWhile\n  WT_WTs.WTThrow\n  WT_WTs.WTTry\n  WT_WTs.WTNil\n  WT_WTs.WTCons"], ["", "code_pred\n  (modes: i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> bool as type_check, i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool as infer_type)\n  WT"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>x,xa \\<turnstile> xb :: xc;\n      \\<And>P E C.\n         \\<lbrakk>x = P; xa = E; xb = new C; xc = Class C;\n          is_class P C\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ Ca_ e_ D_.\n         \\<lbrakk>x = Pa_; xa = Ea_; xb = Cast Ca_ e_; xc = Class Ca_;\n          Pa_,Ea_ \\<turnstile> e_ :: Class D_; is_class Pa_ Ca_;\n          Pa_ \\<turnstile> Ca_ \\<preceq>\\<^sup>* D_ \\<or>\n          Pa_ \\<turnstile> D_ \\<preceq>\\<^sup>* Ca_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ v_ T_.\n         \\<lbrakk>x = Pa_; xa = Ea_; xb = Val v_; xc = T_;\n          typeof v_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ V_ T_.\n         \\<lbrakk>x = Pa_; xa = Ea_; xb = Var V_; xc = T_;\n          Ea_ V_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>1_ T\\<^sub>2_.\n         \\<lbrakk>x = Pa_; xa = Ea_;\n          xb = e\\<^sub>1_ \\<guillemotleft>Eq\\<guillemotright> e\\<^sub>2_;\n          xc = Boolean; Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n          Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n          Pa_ \\<turnstile> T\\<^sub>1_ \\<le> T\\<^sub>2_ \\<or>\n          Pa_ \\<turnstile> T\\<^sub>2_ \\<le> T\\<^sub>1_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_.\n         \\<lbrakk>x = Pa_; xa = Ea_;\n          xb = e\\<^sub>1_ \\<guillemotleft>Add\\<guillemotright> e\\<^sub>2_;\n          xc = Integer; Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: Integer;\n          Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: Integer\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ V_ e_ T_ T'_.\n         \\<lbrakk>x = Pa_; xa = Ea_; xb = V_:=e_; xc = Void;\n          Ea_ V_ = \\<lfloor>T_\\<rfloor>; Pa_,Ea_ \\<turnstile> e_ :: T'_;\n          Pa_ \\<turnstile> T'_ \\<le> T_; V_ \\<noteq> this\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e_ F_ D_ T_ Ca_.\n         \\<lbrakk>x = Pa_; xa = Ea_; xb = e_\\<bullet>F_{D_}; xc = T_;\n          Pa_,Ea_ \\<turnstile> e_ :: Class Ca_;\n          Pa_ \\<turnstile> Ca_ sees F_:T_ in D_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e\\<^sub>1_ F_ D_ e\\<^sub>2_ Ca_ T_ T'_.\n         \\<lbrakk>x = Pa_; xa = Ea_;\n          xb = e\\<^sub>1_\\<bullet>F_{D_} := e\\<^sub>2_; xc = Void;\n          Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: Class Ca_;\n          Pa_ \\<turnstile> Ca_ sees F_:T_ in D_;\n          Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T'_;\n          Pa_ \\<turnstile> T'_ \\<le> T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e_ M_ es_ T_ Ca_ Ts_ pns_ body_ D_ Ts'_.\n         \\<lbrakk>x = Pa_; xa = Ea_; xb = e_\\<bullet>M_(es_); xc = T_;\n          Pa_,Ea_ \\<turnstile> e_ :: Class Ca_;\n          Pa_ \\<turnstile> Ca_ sees M_: Ts_\\<rightarrow>T_ = (pns_,\n                        body_) in D_;\n          Pa_,Ea_ \\<turnstile> es_ [::] Ts'_;\n          Pa_ \\<turnstile> Ts'_ [\\<le>] Ts_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ V_ T_ e_ T'_.\n         \\<lbrakk>x = Pa_; xa = Ea_; xb = {V_:T_; e_}; xc = T'_;\n          is_type Pa_ T_;\n          Pa_,Ea_(V_ \\<mapsto> T_) \\<turnstile> e_ :: T'_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>2_ T\\<^sub>1_.\n         \\<lbrakk>x = Pa_; xa = Ea_; xb = e\\<^sub>1_;; e\\<^sub>2_;\n          xc = T\\<^sub>2_; Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n          Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>2_ T\\<^sub>1_.\n         \\<lbrakk>x = Pa_; xa = Ea_;\n          xb = if (e_) e\\<^sub>1_ else e\\<^sub>2_; xc = T\\<^sub>2_;\n          Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n          Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n          Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n          Pa_ \\<turnstile> T\\<^sub>1_ \\<le> T\\<^sub>2_;\n          Pa_ \\<turnstile> T\\<^sub>2_ \\<le> T\\<^sub>1_ \\<longrightarrow>\n          T\\<^sub>2_ = T\\<^sub>1_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>1_ T\\<^sub>2_.\n         \\<lbrakk>x = Pa_; xa = Ea_;\n          xb = if (e_) e\\<^sub>1_ else e\\<^sub>2_; xc = T\\<^sub>1_;\n          Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n          Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n          Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n          Pa_ \\<turnstile> T\\<^sub>2_ \\<le> T\\<^sub>1_;\n          Pa_ \\<turnstile> T\\<^sub>1_ \\<le> T\\<^sub>2_ \\<longrightarrow>\n          T\\<^sub>1_ = T\\<^sub>2_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e_ c_ T_.\n         \\<lbrakk>x = Pa_; xa = Ea_; xb = while (e_) c_; xc = Void;\n          Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n          Pa_,Ea_ \\<turnstile> c_ :: T_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e_ Ca_.\n         \\<lbrakk>x = Pa_; xa = Ea_; xb = throw e_; xc = Void;\n          Pa_,Ea_ \\<turnstile> e_ :: Class Ca_\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e\\<^sub>1_ Ca_ V_ e\\<^sub>2_ T_.\n         \\<lbrakk>x = Pa_; xa = Ea_;\n          xb = try e\\<^sub>1_ catch(Ca_ V_) e\\<^sub>2_; xc = T_;\n          Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T_;\n          Pa_,Ea_(V_ \\<mapsto> Class Ca_) \\<turnstile> e\\<^sub>2_ :: T_;\n          is_class Pa_ Ca_\\<rbrakk>\n         \\<Longrightarrow> thesis\\<rbrakk>\n     \\<Longrightarrow> thesis) &&&\n    (\\<lbrakk>x,xa \\<turnstile> xb [::] xc;\n      \\<And>P E.\n         \\<lbrakk>x = P; xa = E; xb = []; xc = []\\<rbrakk>\n         \\<Longrightarrow> thesis;\n      \\<And>Pa_ Ea_ e_ es_ T_ Ts_.\n         \\<lbrakk>x = Pa_; xa = Ea_; xb = e_ # es_; xc = T_ # Ts_;\n          Pa_,Ea_ \\<turnstile> e_ :: T_;\n          Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n         \\<Longrightarrow> thesis\\<rbrakk>\n     \\<Longrightarrow> thesis)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x,xa \\<turnstile> xb :: xc;\n     \\<And>P E C.\n        \\<lbrakk>x = P; xa = E; xb = new C; xc = Class C;\n         is_class P C\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ Ca_ e_ D_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = Cast Ca_ e_; xc = Class Ca_;\n         Pa_,Ea_ \\<turnstile> e_ :: Class D_; is_class Pa_ Ca_;\n         Pa_ \\<turnstile> Ca_ \\<preceq>\\<^sup>* D_ \\<or>\n         Pa_ \\<turnstile> D_ \\<preceq>\\<^sup>* Ca_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ v_ T_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = Val v_; xc = T_;\n         typeof v_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ V_ T_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = Var V_; xc = T_;\n         Ea_ V_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>1_ T\\<^sub>2_.\n        \\<lbrakk>x = Pa_; xa = Ea_;\n         xb = e\\<^sub>1_ \\<guillemotleft>Eq\\<guillemotright> e\\<^sub>2_;\n         xc = Boolean; Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n         Pa_ \\<turnstile> T\\<^sub>1_ \\<le> T\\<^sub>2_ \\<or>\n         Pa_ \\<turnstile> T\\<^sub>2_ \\<le> T\\<^sub>1_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_.\n        \\<lbrakk>x = Pa_; xa = Ea_;\n         xb = e\\<^sub>1_ \\<guillemotleft>Add\\<guillemotright> e\\<^sub>2_;\n         xc = Integer; Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: Integer;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: Integer\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ V_ e_ T_ T'_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = V_:=e_; xc = Void;\n         Ea_ V_ = \\<lfloor>T_\\<rfloor>; Pa_,Ea_ \\<turnstile> e_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_; V_ \\<noteq> this\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ F_ D_ T_ Ca_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = e_\\<bullet>F_{D_}; xc = T_;\n         Pa_,Ea_ \\<turnstile> e_ :: Class Ca_;\n         Pa_ \\<turnstile> Ca_ sees F_:T_ in D_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e\\<^sub>1_ F_ D_ e\\<^sub>2_ Ca_ T_ T'_.\n        \\<lbrakk>x = Pa_; xa = Ea_;\n         xb = e\\<^sub>1_\\<bullet>F_{D_} := e\\<^sub>2_; xc = Void;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: Class Ca_;\n         Pa_ \\<turnstile> Ca_ sees F_:T_ in D_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ M_ es_ T_ Ca_ Ts_ pns_ body_ D_ Ts'_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = e_\\<bullet>M_(es_); xc = T_;\n         Pa_,Ea_ \\<turnstile> e_ :: Class Ca_;\n         Pa_ \\<turnstile> Ca_ sees M_: Ts_\\<rightarrow>T_ = (pns_,\n                       body_) in D_;\n         Pa_,Ea_ \\<turnstile> es_ [::] Ts'_;\n         Pa_ \\<turnstile> Ts'_ [\\<le>] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ V_ T_ e_ T'_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = {V_:T_; e_}; xc = T'_;\n         is_type Pa_ T_;\n         Pa_,Ea_(V_ \\<mapsto> T_) \\<turnstile> e_ :: T'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>2_ T\\<^sub>1_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = e\\<^sub>1_;; e\\<^sub>2_;\n         xc = T\\<^sub>2_; Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>2_ T\\<^sub>1_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = if (e_) e\\<^sub>1_ else e\\<^sub>2_;\n         xc = T\\<^sub>2_; Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n         Pa_ \\<turnstile> T\\<^sub>1_ \\<le> T\\<^sub>2_;\n         Pa_ \\<turnstile> T\\<^sub>2_ \\<le> T\\<^sub>1_ \\<longrightarrow>\n         T\\<^sub>2_ = T\\<^sub>1_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>1_ T\\<^sub>2_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = if (e_) e\\<^sub>1_ else e\\<^sub>2_;\n         xc = T\\<^sub>1_; Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n         Pa_ \\<turnstile> T\\<^sub>2_ \\<le> T\\<^sub>1_;\n         Pa_ \\<turnstile> T\\<^sub>1_ \\<le> T\\<^sub>2_ \\<longrightarrow>\n         T\\<^sub>1_ = T\\<^sub>2_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ c_ T_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = while (e_) c_; xc = Void;\n         Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n         Pa_,Ea_ \\<turnstile> c_ :: T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ Ca_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = throw e_; xc = Void;\n         Pa_,Ea_ \\<turnstile> e_ :: Class Ca_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e\\<^sub>1_ Ca_ V_ e\\<^sub>2_ T_.\n        \\<lbrakk>x = Pa_; xa = Ea_;\n         xb = try e\\<^sub>1_ catch(Ca_ V_) e\\<^sub>2_; xc = T_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T_;\n         Pa_,Ea_(V_ \\<mapsto> Class Ca_) \\<turnstile> e\\<^sub>2_ :: T_;\n         is_class Pa_ Ca_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>x,xa \\<turnstile> xb [::] xc;\n     \\<And>P E.\n        \\<lbrakk>x = P; xa = E; xb = []; xc = []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ es_ T_ Ts_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = e_ # es_; xc = T_ # Ts_;\n         Pa_,Ea_ \\<turnstile> e_ :: T_;\n         Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "case WT"], ["proof (state)\nthis:\n  \\<lbrakk>x = ?P; xa = ?E; xb = new ?C; xc = Class ?C;\n   is_class ?P ?C\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = Cast ?Ca ?e; xc = Class ?Ca;\n   ?Pa,?Ea \\<turnstile> ?e :: Class ?D; is_class ?Pa ?Ca;\n   ?Pa \\<turnstile> ?Ca \\<preceq>\\<^sup>* ?D \\<or>\n   ?Pa \\<turnstile> ?D \\<preceq>\\<^sup>* ?Ca\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = Val ?v; xc = ?T;\n   typeof ?v = \\<lfloor>?T\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = Var ?V; xc = ?T;\n   ?Ea ?V = \\<lfloor>?T\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea;\n   xb = ?e\\<^sub>1 \\<guillemotleft>Eq\\<guillemotright> ?e\\<^sub>2;\n   xc = Boolean; ?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: ?T\\<^sub>1;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>2 :: ?T\\<^sub>2;\n   ?Pa \\<turnstile> ?T\\<^sub>1 \\<le> ?T\\<^sub>2 \\<or>\n   ?Pa \\<turnstile> ?T\\<^sub>2 \\<le> ?T\\<^sub>1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea;\n   xb = ?e\\<^sub>1 \\<guillemotleft>Add\\<guillemotright> ?e\\<^sub>2;\n   xc = Integer; ?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: Integer;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>2 :: Integer\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = ?V:=?e; xc = Void;\n   ?Ea ?V = \\<lfloor>?T\\<rfloor>; ?Pa,?Ea \\<turnstile> ?e :: ?T';\n   ?Pa \\<turnstile> ?T' \\<le> ?T; ?V \\<noteq> this\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = ?e\\<bullet>?F{?D}; xc = ?T;\n   ?Pa,?Ea \\<turnstile> ?e :: Class ?Ca;\n   ?Pa \\<turnstile> ?Ca sees ?F:?T in ?D\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = ?e\\<^sub>1\\<bullet>?F{?D} := ?e\\<^sub>2;\n   xc = Void; ?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: Class ?Ca;\n   ?Pa \\<turnstile> ?Ca sees ?F:?T in ?D;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>2 :: ?T';\n   ?Pa \\<turnstile> ?T' \\<le> ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = ?e\\<bullet>?M(?es); xc = ?T;\n   ?Pa,?Ea \\<turnstile> ?e :: Class ?Ca;\n   ?Pa \\<turnstile> ?Ca sees ?M: ?Ts\\<rightarrow>?T = (?pns, ?body) in ?D;\n   ?Pa,?Ea \\<turnstile> ?es [::] ?Ts';\n   ?Pa \\<turnstile> ?Ts' [\\<le>] ?Ts\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = {?V:?T; ?e}; xc = ?T'; is_type ?Pa ?T;\n   ?Pa,?Ea(?V \\<mapsto> ?T) \\<turnstile> ?e :: ?T'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = ?e\\<^sub>1;; ?e\\<^sub>2; xc = ?T\\<^sub>2;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: ?T\\<^sub>1;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>2 :: ?T\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = if (?e) ?e\\<^sub>1 else ?e\\<^sub>2;\n   xc = ?T\\<^sub>2; ?Pa,?Ea \\<turnstile> ?e :: Boolean;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: ?T\\<^sub>1;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>2 :: ?T\\<^sub>2;\n   ?Pa \\<turnstile> ?T\\<^sub>1 \\<le> ?T\\<^sub>2;\n   ?Pa \\<turnstile> ?T\\<^sub>2 \\<le> ?T\\<^sub>1 \\<longrightarrow>\n   ?T\\<^sub>2 = ?T\\<^sub>1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = if (?e) ?e\\<^sub>1 else ?e\\<^sub>2;\n   xc = ?T\\<^sub>1; ?Pa,?Ea \\<turnstile> ?e :: Boolean;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: ?T\\<^sub>1;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>2 :: ?T\\<^sub>2;\n   ?Pa \\<turnstile> ?T\\<^sub>2 \\<le> ?T\\<^sub>1;\n   ?Pa \\<turnstile> ?T\\<^sub>1 \\<le> ?T\\<^sub>2 \\<longrightarrow>\n   ?T\\<^sub>1 = ?T\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = while (?e) ?c; xc = Void;\n   ?Pa,?Ea \\<turnstile> ?e :: Boolean;\n   ?Pa,?Ea \\<turnstile> ?c :: ?T\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = throw ?e; xc = Void;\n   ?Pa,?Ea \\<turnstile> ?e :: Class ?Ca\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = try ?e\\<^sub>1 catch(?Ca ?V) ?e\\<^sub>2;\n   xc = ?T; ?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: ?T;\n   ?Pa,?Ea(?V \\<mapsto> Class ?Ca) \\<turnstile> ?e\\<^sub>2 :: ?T;\n   is_class ?Pa ?Ca\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x,xa \\<turnstile> xb :: xc\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = if (?e) ?e\\<^sub>1 else ?e\\<^sub>2;\n   xc = ?T\\<^sub>2; ?Pa,?Ea \\<turnstile> ?e :: Boolean;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: ?T\\<^sub>1;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>2 :: ?T\\<^sub>2;\n   ?Pa \\<turnstile> ?T\\<^sub>1 \\<le> ?T\\<^sub>2;\n   ?Pa \\<turnstile> ?T\\<^sub>2 \\<le> ?T\\<^sub>1 \\<longrightarrow>\n   ?T\\<^sub>2 = ?T\\<^sub>1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = if (?e) ?e\\<^sub>1 else ?e\\<^sub>2;\n   xc = ?T\\<^sub>1; ?Pa,?Ea \\<turnstile> ?e :: Boolean;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>1 :: ?T\\<^sub>1;\n   ?Pa,?Ea \\<turnstile> ?e\\<^sub>2 :: ?T\\<^sub>2;\n   ?Pa \\<turnstile> ?T\\<^sub>2 \\<le> ?T\\<^sub>1;\n   ?Pa \\<turnstile> ?T\\<^sub>1 \\<le> ?T\\<^sub>2 \\<longrightarrow>\n   ?T\\<^sub>1 = ?T\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x,xa \\<turnstile> xb :: xc;\n     \\<And>P E C.\n        \\<lbrakk>x = P; xa = E; xb = new C; xc = Class C;\n         is_class P C\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ Ca_ e_ D_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = Cast Ca_ e_; xc = Class Ca_;\n         Pa_,Ea_ \\<turnstile> e_ :: Class D_; is_class Pa_ Ca_;\n         Pa_ \\<turnstile> Ca_ \\<preceq>\\<^sup>* D_ \\<or>\n         Pa_ \\<turnstile> D_ \\<preceq>\\<^sup>* Ca_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ v_ T_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = Val v_; xc = T_;\n         typeof v_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ V_ T_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = Var V_; xc = T_;\n         Ea_ V_ = \\<lfloor>T_\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>1_ T\\<^sub>2_.\n        \\<lbrakk>x = Pa_; xa = Ea_;\n         xb = e\\<^sub>1_ \\<guillemotleft>Eq\\<guillemotright> e\\<^sub>2_;\n         xc = Boolean; Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n         Pa_ \\<turnstile> T\\<^sub>1_ \\<le> T\\<^sub>2_ \\<or>\n         Pa_ \\<turnstile> T\\<^sub>2_ \\<le> T\\<^sub>1_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_.\n        \\<lbrakk>x = Pa_; xa = Ea_;\n         xb = e\\<^sub>1_ \\<guillemotleft>Add\\<guillemotright> e\\<^sub>2_;\n         xc = Integer; Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: Integer;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: Integer\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ V_ e_ T_ T'_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = V_:=e_; xc = Void;\n         Ea_ V_ = \\<lfloor>T_\\<rfloor>; Pa_,Ea_ \\<turnstile> e_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_; V_ \\<noteq> this\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ F_ D_ T_ Ca_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = e_\\<bullet>F_{D_}; xc = T_;\n         Pa_,Ea_ \\<turnstile> e_ :: Class Ca_;\n         Pa_ \\<turnstile> Ca_ sees F_:T_ in D_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e\\<^sub>1_ F_ D_ e\\<^sub>2_ Ca_ T_ T'_.\n        \\<lbrakk>x = Pa_; xa = Ea_;\n         xb = e\\<^sub>1_\\<bullet>F_{D_} := e\\<^sub>2_; xc = Void;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: Class Ca_;\n         Pa_ \\<turnstile> Ca_ sees F_:T_ in D_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T'_;\n         Pa_ \\<turnstile> T'_ \\<le> T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ M_ es_ T_ Ca_ Ts_ pns_ body_ D_ Ts'_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = e_\\<bullet>M_(es_); xc = T_;\n         Pa_,Ea_ \\<turnstile> e_ :: Class Ca_;\n         Pa_ \\<turnstile> Ca_ sees M_: Ts_\\<rightarrow>T_ = (pns_,\n                       body_) in D_;\n         Pa_,Ea_ \\<turnstile> es_ [::] Ts'_;\n         Pa_ \\<turnstile> Ts'_ [\\<le>] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ V_ T_ e_ T'_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = {V_:T_; e_}; xc = T'_;\n         is_type Pa_ T_;\n         Pa_,Ea_(V_ \\<mapsto> T_) \\<turnstile> e_ :: T'_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>2_ T\\<^sub>1_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = e\\<^sub>1_;; e\\<^sub>2_;\n         xc = T\\<^sub>2_; Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>2_ T\\<^sub>1_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = if (e_) e\\<^sub>1_ else e\\<^sub>2_;\n         xc = T\\<^sub>2_; Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n         Pa_ \\<turnstile> T\\<^sub>1_ \\<le> T\\<^sub>2_;\n         Pa_ \\<turnstile> T\\<^sub>2_ \\<le> T\\<^sub>1_ \\<longrightarrow>\n         T\\<^sub>2_ = T\\<^sub>1_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ e\\<^sub>1_ e\\<^sub>2_ T\\<^sub>1_ T\\<^sub>2_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = if (e_) e\\<^sub>1_ else e\\<^sub>2_;\n         xc = T\\<^sub>1_; Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T\\<^sub>1_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>2_ :: T\\<^sub>2_;\n         Pa_ \\<turnstile> T\\<^sub>2_ \\<le> T\\<^sub>1_;\n         Pa_ \\<turnstile> T\\<^sub>1_ \\<le> T\\<^sub>2_ \\<longrightarrow>\n         T\\<^sub>1_ = T\\<^sub>2_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ c_ T_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = while (e_) c_; xc = Void;\n         Pa_,Ea_ \\<turnstile> e_ :: Boolean;\n         Pa_,Ea_ \\<turnstile> c_ :: T_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ Ca_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = throw e_; xc = Void;\n         Pa_,Ea_ \\<turnstile> e_ :: Class Ca_\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e\\<^sub>1_ Ca_ V_ e\\<^sub>2_ T_.\n        \\<lbrakk>x = Pa_; xa = Ea_;\n         xb = try e\\<^sub>1_ catch(Ca_ V_) e\\<^sub>2_; xc = T_;\n         Pa_,Ea_ \\<turnstile> e\\<^sub>1_ :: T_;\n         Pa_,Ea_(V_ \\<mapsto> Class Ca_) \\<turnstile> e\\<^sub>2_ :: T_;\n         is_class Pa_ Ca_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>x,xa \\<turnstile> xb [::] xc;\n     \\<And>P E.\n        \\<lbrakk>x = P; xa = E; xb = []; xc = []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ es_ T_ Ts_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = e_ # es_; xc = T_ # Ts_;\n         Pa_,Ea_ \\<turnstile> e_ :: T_;\n         Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "from WT.prems"], ["proof (chain)\npicking this:\n  x,xa \\<turnstile> xb :: xc", "show thesis"], ["proof (prove)\nusing this:\n  x,xa \\<turnstile> xb :: xc\n\ngoal (1 subgoal):\n 1. thesis", "proof(cases (no_simp))"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>xa = E; xb = new C; xc = Class C; is_class x C\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>E e D C.\n       \\<lbrakk>xa = E; xb = Cast C e; xc = Class C;\n        x,E \\<turnstile> e :: Class D; is_class x C;\n        x \\<turnstile> C \\<preceq>\\<^sup>* D \\<or>\n        x \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>v T E.\n       \\<lbrakk>xa = E; xb = Val v; xc = T;\n        typeof v = \\<lfloor>T\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>E V T.\n       \\<lbrakk>xa = E; xb = Var V; xc = T;\n        E V = \\<lfloor>T\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>xa = E;\n        xb = e\\<^sub>1 \\<guillemotleft>Eq\\<guillemotright> e\\<^sub>2;\n        xc = Boolean; x,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        x,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        x \\<turnstile> T\\<^sub>1 \\<le> T\\<^sub>2 \\<or>\n        x \\<turnstile> T\\<^sub>2 \\<le> T\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>E e\\<^sub>1 e\\<^sub>2.\n       \\<lbrakk>xa = E;\n        xb = e\\<^sub>1 \\<guillemotleft>Add\\<guillemotright> e\\<^sub>2;\n        xc = Integer; x,E \\<turnstile> e\\<^sub>1 :: Integer;\n        x,E \\<turnstile> e\\<^sub>2 :: Integer\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>E V T e T'.\n       \\<lbrakk>xa = E; xb = V:=e; xc = Void; E V = \\<lfloor>T\\<rfloor>;\n        x,E \\<turnstile> e :: T'; x \\<turnstile> T' \\<le> T;\n        V \\<noteq> this\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>E e C F T D.\n       \\<lbrakk>xa = E; xb = e\\<bullet>F{D}; xc = T;\n        x,E \\<turnstile> e :: Class C;\n        x \\<turnstile> C sees F:T in D\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>E e\\<^sub>1 C F T D e\\<^sub>2 T'.\n       \\<lbrakk>xa = E; xb = e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2; xc = Void;\n        x,E \\<turnstile> e\\<^sub>1 :: Class C;\n        x \\<turnstile> C sees F:T in D; x,E \\<turnstile> e\\<^sub>2 :: T';\n        x \\<turnstile> T' \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>E e C M Ts T pns body D es Ts'.\n        \\<lbrakk>xa = E; xb = e\\<bullet>M(es); xc = T;\n         x,E \\<turnstile> e :: Class C;\n         x \\<turnstile> C sees M: Ts\\<rightarrow>T = (pns, body) in D;\n         x,E \\<turnstile> es [::] Ts';\n         x \\<turnstile> Ts' [\\<le>] Ts\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 16 subgoals...", "case (WTCond E e e1 T1 e2 T2 T)"], ["proof (state)\nthis:\n  xa = E\n  xb = if (e) e1 else e2\n  xc = T\n  x,E \\<turnstile> e :: Boolean\n  x,E \\<turnstile> e1 :: T1\n  x,E \\<turnstile> e2 :: T2\n  x \\<turnstile> T1 \\<le> T2 \\<or> x \\<turnstile> T2 \\<le> T1\n  x \\<turnstile> T1 \\<le> T2 \\<longrightarrow> T = T2\n  x \\<turnstile> T2 \\<le> T1 \\<longrightarrow> T = T1\n\ngoal (16 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>xa = E; xb = new C; xc = Class C; is_class x C\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>E e D C.\n       \\<lbrakk>xa = E; xb = Cast C e; xc = Class C;\n        x,E \\<turnstile> e :: Class D; is_class x C;\n        x \\<turnstile> C \\<preceq>\\<^sup>* D \\<or>\n        x \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>v T E.\n       \\<lbrakk>xa = E; xb = Val v; xc = T;\n        typeof v = \\<lfloor>T\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>E V T.\n       \\<lbrakk>xa = E; xb = Var V; xc = T;\n        E V = \\<lfloor>T\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>xa = E;\n        xb = e\\<^sub>1 \\<guillemotleft>Eq\\<guillemotright> e\\<^sub>2;\n        xc = Boolean; x,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        x,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        x \\<turnstile> T\\<^sub>1 \\<le> T\\<^sub>2 \\<or>\n        x \\<turnstile> T\\<^sub>2 \\<le> T\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>E e\\<^sub>1 e\\<^sub>2.\n       \\<lbrakk>xa = E;\n        xb = e\\<^sub>1 \\<guillemotleft>Add\\<guillemotright> e\\<^sub>2;\n        xc = Integer; x,E \\<turnstile> e\\<^sub>1 :: Integer;\n        x,E \\<turnstile> e\\<^sub>2 :: Integer\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>E V T e T'.\n       \\<lbrakk>xa = E; xb = V:=e; xc = Void; E V = \\<lfloor>T\\<rfloor>;\n        x,E \\<turnstile> e :: T'; x \\<turnstile> T' \\<le> T;\n        V \\<noteq> this\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>E e C F T D.\n       \\<lbrakk>xa = E; xb = e\\<bullet>F{D}; xc = T;\n        x,E \\<turnstile> e :: Class C;\n        x \\<turnstile> C sees F:T in D\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>E e\\<^sub>1 C F T D e\\<^sub>2 T'.\n       \\<lbrakk>xa = E; xb = e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2; xc = Void;\n        x,E \\<turnstile> e\\<^sub>1 :: Class C;\n        x \\<turnstile> C sees F:T in D; x,E \\<turnstile> e\\<^sub>2 :: T';\n        x \\<turnstile> T' \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>E e C M Ts T pns body D es Ts'.\n        \\<lbrakk>xa = E; xb = e\\<bullet>M(es); xc = T;\n         x,E \\<turnstile> e :: Class C;\n         x \\<turnstile> C sees M: Ts\\<rightarrow>T = (pns, body) in D;\n         x,E \\<turnstile> es [::] Ts';\n         x \\<turnstile> Ts' [\\<le>] Ts\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 16 subgoals...", "from \\<open>x \\<turnstile> T1 \\<le> T2 \\<or> x \\<turnstile> T2 \\<le> T1\\<close>"], ["proof (chain)\npicking this:\n  x \\<turnstile> T1 \\<le> T2 \\<or> x \\<turnstile> T2 \\<le> T1", "show thesis"], ["proof (prove)\nusing this:\n  x \\<turnstile> T1 \\<le> T2 \\<or> x \\<turnstile> T2 \\<le> T1\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<turnstile> T1 \\<le> T2 \\<Longrightarrow> thesis\n 2. x \\<turnstile> T2 \\<le> T1 \\<Longrightarrow> thesis", "assume \"x \\<turnstile> T1 \\<le> T2\""], ["proof (state)\nthis:\n  x \\<turnstile> T1 \\<le> T2\n\ngoal (2 subgoals):\n 1. x \\<turnstile> T1 \\<le> T2 \\<Longrightarrow> thesis\n 2. x \\<turnstile> T2 \\<le> T1 \\<Longrightarrow> thesis", "with \\<open>x \\<turnstile> T1 \\<le> T2 \\<longrightarrow> T = T2\\<close>"], ["proof (chain)\npicking this:\n  x \\<turnstile> T1 \\<le> T2 \\<longrightarrow> T = T2\n  x \\<turnstile> T1 \\<le> T2", "have \"T = T2\""], ["proof (prove)\nusing this:\n  x \\<turnstile> T1 \\<le> T2 \\<longrightarrow> T = T2\n  x \\<turnstile> T1 \\<le> T2\n\ngoal (1 subgoal):\n 1. T = T2", ".."], ["proof (state)\nthis:\n  T = T2\n\ngoal (2 subgoals):\n 1. x \\<turnstile> T1 \\<le> T2 \\<Longrightarrow> thesis\n 2. x \\<turnstile> T2 \\<le> T1 \\<Longrightarrow> thesis", "from \\<open>xa = E\\<close> \\<open>xb = if (e) e1 else e2\\<close> \\<open>xc = T\\<close> \\<open>x,E \\<turnstile> e :: Boolean\\<close> \n        \\<open>x,E \\<turnstile> e1 :: T1\\<close> \\<open>x,E \\<turnstile> e2 :: T2\\<close> \\<open>x \\<turnstile> T1 \\<le> T2\\<close> \\<open>x \\<turnstile> T2 \\<le> T1 \\<longrightarrow> T = T1\\<close>"], ["proof (chain)\npicking this:\n  xa = E\n  xb = if (e) e1 else e2\n  xc = T\n  x,E \\<turnstile> e :: Boolean\n  x,E \\<turnstile> e1 :: T1\n  x,E \\<turnstile> e2 :: T2\n  x \\<turnstile> T1 \\<le> T2\n  x \\<turnstile> T2 \\<le> T1 \\<longrightarrow> T = T1", "show ?thesis"], ["proof (prove)\nusing this:\n  xa = E\n  xb = if (e) e1 else e2\n  xc = T\n  x,E \\<turnstile> e :: Boolean\n  x,E \\<turnstile> e1 :: T1\n  x,E \\<turnstile> e2 :: T2\n  x \\<turnstile> T1 \\<le> T2\n  x \\<turnstile> T2 \\<le> T1 \\<longrightarrow> T = T1\n\ngoal (1 subgoal):\n 1. thesis", "unfolding \\<open>T = T2\\<close>"], ["proof (prove)\nusing this:\n  xa = E\n  xb = if (e) e1 else e2\n  xc = T2\n  x,E \\<turnstile> e :: Boolean\n  x,E \\<turnstile> e1 :: T1\n  x,E \\<turnstile> e2 :: T2\n  x \\<turnstile> T1 \\<le> T2\n  x \\<turnstile> T2 \\<le> T1 \\<longrightarrow> T2 = T1\n\ngoal (1 subgoal):\n 1. thesis", "by(rule WT.WTCond1[OF refl])"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. x \\<turnstile> T2 \\<le> T1 \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<turnstile> T2 \\<le> T1 \\<Longrightarrow> thesis", "assume \"x \\<turnstile> T2 \\<le> T1\""], ["proof (state)\nthis:\n  x \\<turnstile> T2 \\<le> T1\n\ngoal (1 subgoal):\n 1. x \\<turnstile> T2 \\<le> T1 \\<Longrightarrow> thesis", "with \\<open>x \\<turnstile> T2 \\<le> T1 \\<longrightarrow> T = T1\\<close>"], ["proof (chain)\npicking this:\n  x \\<turnstile> T2 \\<le> T1 \\<longrightarrow> T = T1\n  x \\<turnstile> T2 \\<le> T1", "have \"T = T1\""], ["proof (prove)\nusing this:\n  x \\<turnstile> T2 \\<le> T1 \\<longrightarrow> T = T1\n  x \\<turnstile> T2 \\<le> T1\n\ngoal (1 subgoal):\n 1. T = T1", ".."], ["proof (state)\nthis:\n  T = T1\n\ngoal (1 subgoal):\n 1. x \\<turnstile> T2 \\<le> T1 \\<Longrightarrow> thesis", "from \\<open>xa = E\\<close> \\<open>xb = if (e) e1 else e2\\<close> \\<open>xc = T\\<close> \\<open>x,E \\<turnstile> e :: Boolean\\<close> \n        \\<open>x,E \\<turnstile> e1 :: T1\\<close> \\<open>x,E \\<turnstile> e2 :: T2\\<close> \\<open>x \\<turnstile> T2 \\<le> T1\\<close> \\<open>x \\<turnstile> T1 \\<le> T2 \\<longrightarrow> T = T2\\<close>"], ["proof (chain)\npicking this:\n  xa = E\n  xb = if (e) e1 else e2\n  xc = T\n  x,E \\<turnstile> e :: Boolean\n  x,E \\<turnstile> e1 :: T1\n  x,E \\<turnstile> e2 :: T2\n  x \\<turnstile> T2 \\<le> T1\n  x \\<turnstile> T1 \\<le> T2 \\<longrightarrow> T = T2", "show ?thesis"], ["proof (prove)\nusing this:\n  xa = E\n  xb = if (e) e1 else e2\n  xc = T\n  x,E \\<turnstile> e :: Boolean\n  x,E \\<turnstile> e1 :: T1\n  x,E \\<turnstile> e2 :: T2\n  x \\<turnstile> T2 \\<le> T1\n  x \\<turnstile> T1 \\<le> T2 \\<longrightarrow> T = T2\n\ngoal (1 subgoal):\n 1. thesis", "unfolding \\<open>T = T1\\<close>"], ["proof (prove)\nusing this:\n  xa = E\n  xb = if (e) e1 else e2\n  xc = T1\n  x,E \\<turnstile> e :: Boolean\n  x,E \\<turnstile> e1 :: T1\n  x,E \\<turnstile> e2 :: T2\n  x \\<turnstile> T2 \\<le> T1\n  x \\<turnstile> T1 \\<le> T2 \\<longrightarrow> T1 = T2\n\ngoal (1 subgoal):\n 1. thesis", "by(rule WT.WTCond2[OF refl])"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (15 subgoals):\n 1. \\<And>C E.\n       \\<lbrakk>xa = E; xb = new C; xc = Class C; is_class x C\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>E e D C.\n       \\<lbrakk>xa = E; xb = Cast C e; xc = Class C;\n        x,E \\<turnstile> e :: Class D; is_class x C;\n        x \\<turnstile> C \\<preceq>\\<^sup>* D \\<or>\n        x \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>v T E.\n       \\<lbrakk>xa = E; xb = Val v; xc = T;\n        typeof v = \\<lfloor>T\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>E V T.\n       \\<lbrakk>xa = E; xb = Var V; xc = T;\n        E V = \\<lfloor>T\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>E e\\<^sub>1 T\\<^sub>1 e\\<^sub>2 T\\<^sub>2.\n       \\<lbrakk>xa = E;\n        xb = e\\<^sub>1 \\<guillemotleft>Eq\\<guillemotright> e\\<^sub>2;\n        xc = Boolean; x,E \\<turnstile> e\\<^sub>1 :: T\\<^sub>1;\n        x,E \\<turnstile> e\\<^sub>2 :: T\\<^sub>2;\n        x \\<turnstile> T\\<^sub>1 \\<le> T\\<^sub>2 \\<or>\n        x \\<turnstile> T\\<^sub>2 \\<le> T\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>E e\\<^sub>1 e\\<^sub>2.\n       \\<lbrakk>xa = E;\n        xb = e\\<^sub>1 \\<guillemotleft>Add\\<guillemotright> e\\<^sub>2;\n        xc = Integer; x,E \\<turnstile> e\\<^sub>1 :: Integer;\n        x,E \\<turnstile> e\\<^sub>2 :: Integer\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>E V T e T'.\n       \\<lbrakk>xa = E; xb = V:=e; xc = Void; E V = \\<lfloor>T\\<rfloor>;\n        x,E \\<turnstile> e :: T'; x \\<turnstile> T' \\<le> T;\n        V \\<noteq> this\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>E e C F T D.\n       \\<lbrakk>xa = E; xb = e\\<bullet>F{D}; xc = T;\n        x,E \\<turnstile> e :: Class C;\n        x \\<turnstile> C sees F:T in D\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>E e\\<^sub>1 C F T D e\\<^sub>2 T'.\n       \\<lbrakk>xa = E; xb = e\\<^sub>1\\<bullet>F{D} := e\\<^sub>2; xc = Void;\n        x,E \\<turnstile> e\\<^sub>1 :: Class C;\n        x \\<turnstile> C sees F:T in D; x,E \\<turnstile> e\\<^sub>2 :: T';\n        x \\<turnstile> T' \\<le> T\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>E e C M Ts T pns body D es Ts'.\n        \\<lbrakk>xa = E; xb = e\\<bullet>M(es); xc = T;\n         x,E \\<turnstile> e :: Class C;\n         x \\<turnstile> C sees M: Ts\\<rightarrow>T = (pns, body) in D;\n         x,E \\<turnstile> es [::] Ts';\n         x \\<turnstile> Ts' [\\<le>] Ts\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 15 subgoals...", "qed(assumption|erule (2) WT.that[OF refl])+"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x,xa \\<turnstile> xb [::] xc;\n     \\<And>P E.\n        \\<lbrakk>x = P; xa = E; xb = []; xc = []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ es_ T_ Ts_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = e_ # es_; xc = T_ # Ts_;\n         Pa_,Ea_ \\<turnstile> e_ :: T_;\n         Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x,xa \\<turnstile> xb [::] xc;\n     \\<And>P E.\n        \\<lbrakk>x = P; xa = E; xb = []; xc = []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ es_ T_ Ts_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = e_ # es_; xc = T_ # Ts_;\n         Pa_,Ea_ \\<turnstile> e_ :: T_;\n         Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "case WTs"], ["proof (state)\nthis:\n  \\<lbrakk>x = ?P; xa = ?E; xb = []; xc = []\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = ?Pa; xa = ?Ea; xb = ?e # ?es; xc = ?T # ?Ts;\n   ?Pa,?Ea \\<turnstile> ?e :: ?T; ?Pa,?Ea \\<turnstile> ?es [::] ?Ts\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x,xa \\<turnstile> xb [::] xc\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x,xa \\<turnstile> xb [::] xc;\n     \\<And>P E.\n        \\<lbrakk>x = P; xa = E; xb = []; xc = []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>Pa_ Ea_ e_ es_ T_ Ts_.\n        \\<lbrakk>x = Pa_; xa = Ea_; xb = e_ # es_; xc = T_ # Ts_;\n         Pa_,Ea_ \\<turnstile> e_ :: T_;\n         Pa_,Ea_ \\<turnstile> es_ [::] Ts_\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "from WTs.prems"], ["proof (chain)\npicking this:\n  x,xa \\<turnstile> xb [::] xc", "show thesis"], ["proof (prove)\nusing this:\n  x,xa \\<turnstile> xb [::] xc\n\ngoal (1 subgoal):\n 1. thesis", "by(cases (no_simp))(assumption|erule (2) WTs.that[OF refl])+"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "notation infer_type (\"_,_ \\<turnstile> _ :: '_\" [51,51,51]100)"], ["", "definition test1 where \"test1 = [],Map.empty \\<turnstile> testExpr1 :: _\""], ["", "definition test2 where \"test2 = [], Map.empty  \\<turnstile> testExpr2 :: _\""], ["", "definition test3 where \"test3 = [], Map.empty(''V'' \\<mapsto> Integer)  \\<turnstile> testExpr3 :: _\""], ["", "definition test4 where \"test4 = [], Map.empty(''V'' \\<mapsto> Integer)  \\<turnstile> testExpr4 :: _\""], ["", "definition test5 where \"test5 = [classObject, (''C'',(''Object'',[(''F'',Integer)],[]))], Map.empty  \\<turnstile> testExpr5 :: _\""], ["", "definition test6 where \"test6 = [classObject, classI], Map.empty  \\<turnstile> testExpr6 :: _\""], ["", "ML_val \\<open>\n  val SOME(@{code Integer}, _) = Predicate.yield @{code test1};\n  val SOME(@{code Integer}, _) = Predicate.yield @{code test2};\n  val SOME(@{code Integer}, _) = Predicate.yield @{code test3};\n  val SOME(@{code Void}, _) = Predicate.yield @{code test4};\n  val SOME(@{code Void}, _) = Predicate.yield @{code test5};\n  val SOME(@{code Integer}, _) = Predicate.yield @{code test6};\n\\<close>"], ["", "definition testmb_isNull where \"testmb_isNull = [classObject, classA], Map.empty([this] [\\<mapsto>] [Class ''A'']) \\<turnstile> mb_isNull :: _\""], ["", "definition testmb_add where \"testmb_add = [classObject, classA], Map.empty([this,''i''] [\\<mapsto>] [Class ''A'',Integer]) \\<turnstile> mb_add :: _\""], ["", "definition testmb_mult_cond where \"testmb_mult_cond = [classObject, classA], Map.empty([this,''j''] [\\<mapsto>] [Class ''A'',Integer]) \\<turnstile> mb_mult_cond :: _\""], ["", "definition testmb_mult_block where \"testmb_mult_block = [classObject, classA], Map.empty([this,''i'',''j'',''temp''] [\\<mapsto>] [Class ''A'',Integer,Integer,Integer]) \\<turnstile> mb_mult_block :: _\""], ["", "definition testmb_mult where \"testmb_mult = [classObject, classA], Map.empty([this,''i'',''j''] [\\<mapsto>] [Class ''A'',Integer,Integer]) \\<turnstile> mb_mult :: _\""], ["", "ML_val \\<open>\n  val SOME(@{code Boolean}, _) = Predicate.yield @{code testmb_isNull};\n  val SOME(@{code Integer}, _) = Predicate.yield @{code testmb_add};\n  val SOME(@{code Boolean}, _) = Predicate.yield @{code testmb_mult_cond};\n  val SOME(@{code Void}, _) = Predicate.yield @{code testmb_mult_block};\n  val SOME(@{code Integer}, _) = Predicate.yield @{code testmb_mult};\n\\<close>"], ["", "definition test where \"test = [classObject, classA], Map.empty \\<turnstile> testExpr_ClassA :: _\""], ["", "ML_val \\<open>\n  val SOME(@{code Integer}, _) = Predicate.yield @{code test};\n\\<close>"], ["", "end"]]}