{"file_name": "/home/qj213/afp-2021-10-22/thys/Jinja/Common/WellForm.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jinja", "problem_names": ["lemma class_wf: \n  \"\\<lbrakk>class P C = Some c; wf_prog wf_md P\\<rbrakk> \\<Longrightarrow> wf_cdecl wf_md P (C,c)\"", "lemma class_Object [simp]: \n  \"wf_prog wf_md P \\<Longrightarrow> \\<exists>C fs ms. class P Object = Some (C,fs,ms)\"", "lemma is_class_Object [simp]:\n  \"wf_prog wf_md P \\<Longrightarrow> is_class P Object\"", "lemma is_class_xcpt:\n  \"\\<lbrakk> C \\<in> sys_xcpts; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_class P C\"", "lemma subcls1_wfD:\n  \"\\<lbrakk> P \\<turnstile> C \\<prec>\\<^sup>1 D; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> D \\<noteq> C \\<and> (D,C) \\<notin> (subcls1 P)\\<^sup>+\"", "lemma wf_cdecl_supD: \n  \"\\<lbrakk>wf_cdecl wf_md P (C,D,r); C \\<noteq> Object\\<rbrakk> \\<Longrightarrow> is_class P D\"", "lemma subcls_asym:\n  \"\\<lbrakk> wf_prog wf_md P; (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<rbrakk> \\<Longrightarrow> (D,C) \\<notin> (subcls1 P)\\<^sup>+\"", "lemma subcls_irrefl:\n  \"\\<lbrakk> wf_prog wf_md P; (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<rbrakk> \\<Longrightarrow> C \\<noteq> D\"", "lemma acyclic_subcls1:\n  \"wf_prog wf_md P \\<Longrightarrow> acyclic (subcls1 P)\"", "lemma wf_subcls1:\n  \"wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)\"", "lemma single_valued_subcls1:\n  \"wf_prog wf_md G \\<Longrightarrow> single_valued (subcls1 G)\"", "lemma subcls_induct: \n  \"\\<lbrakk> wf_prog wf_md P; \\<And>C. \\<forall>D. (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow> Q D \\<Longrightarrow> Q C \\<rbrakk> \\<Longrightarrow> Q C\"\n(*<*)\n  (is \"?A \\<Longrightarrow> PROP ?P \\<Longrightarrow> _\")", "lemma subcls1_induct_aux:\n  \"\\<lbrakk> is_class P C; wf_prog wf_md P; Q Object;\n    \\<And>C D fs ms.\n    \\<lbrakk> C \\<noteq> Object; is_class P C; class P C = Some (D,fs,ms) \\<and>\n      wf_cdecl wf_md P (C,D,fs,ms) \\<and> P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and> is_class P D \\<and> Q D\\<rbrakk> \\<Longrightarrow> Q C \\<rbrakk>\n  \\<Longrightarrow> Q C\"\n(*<*)\n  (is \"?A \\<Longrightarrow> ?B \\<Longrightarrow> ?C \\<Longrightarrow> PROP ?P \\<Longrightarrow> _\")", "lemma subcls1_induct [consumes 2, case_names Object Subcls]:\n  \"\\<lbrakk> wf_prog wf_md P; is_class P C; Q Object;\n    \\<And>C D. \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D; is_class P D; Q D\\<rbrakk> \\<Longrightarrow> Q C \\<rbrakk>\n  \\<Longrightarrow> Q C\"", "lemma subcls_C_Object:\n  \"\\<lbrakk> is_class P C; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* Object\"", "lemma is_type_pTs:\nassumes \"wf_prog wf_md P\" and \"(C,S,fs,ms) \\<in> set P\" and \"(M,Ts,T,m) \\<in> set ms\"\nshows \"set Ts \\<subseteq> types P\"", "lemma sees_wf_mdecl:\n  \"\\<lbrakk> wf_prog wf_md P; P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in D \\<rbrakk> \\<Longrightarrow> wf_mdecl wf_md P D (M,Ts,T,m)\"", "lemma sees_method_mono [rule_format (no_asm)]: \n  \"\\<lbrakk> P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow>\n  \\<forall>D Ts T m. P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'. P \\<turnstile> C' sees M:Ts'\\<rightarrow>T' = m' in D' \\<and> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\"", "lemma sees_method_mono2:\n  \"\\<lbrakk> P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P;\n     P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in D; P \\<turnstile> C' sees M:Ts'\\<rightarrow>T' = m' in D' \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\"", "lemma mdecls_visible:\nassumes wf: \"wf_prog wf_md P\" and \"class\": \"is_class P C\"\nshows \"\\<And>D fs ms. class P C = Some(D,fs,ms)\n         \\<Longrightarrow> \\<exists>Mm. P \\<turnstile> C sees_methods Mm \\<and> (\\<forall>(M,Ts,T,m) \\<in> set ms. Mm M = Some((Ts,T,m),C))\"", "lemma mdecl_visible:\nassumes wf: \"wf_prog wf_md P\" and C: \"(C,S,fs,ms) \\<in> set P\" and  m: \"(M,Ts,T,m) \\<in> set ms\"\nshows \"P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in C\"", "lemma Call_lemma:\n  \"\\<lbrakk> P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in D; P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P \\<rbrakk>\n  \\<Longrightarrow> \\<exists>D' Ts' T' m'.\n       P \\<turnstile> C' sees M:Ts'\\<rightarrow>T' = m' in D' \\<and> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T \\<and> P \\<turnstile> C' \\<preceq>\\<^sup>* D'\n       \\<and> is_type P T' \\<and> (\\<forall>T\\<in>set Ts'. is_type P T) \\<and> wf_md P D' (M,Ts',T',m')\"", "lemma wf_prog_lift:\n  assumes wf: \"wf_prog (\\<lambda>P C bd. A P C bd) P\"\n  and rule:\n  \"\\<And>wf_md C M Ts C T m bd.\n   wf_prog wf_md P \\<Longrightarrow>\n   P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in C \\<Longrightarrow>   \n   set Ts \\<subseteq>  types P \\<Longrightarrow>\n   bd = (M,Ts,T,m) \\<Longrightarrow>\n   A P C bd \\<Longrightarrow>\n   B P C bd\"\n  shows \"wf_prog (\\<lambda>P C bd. B P C bd) P\"", "lemma wf_Fields_Ex:\n  \"\\<lbrakk> wf_prog wf_md P; is_class P C \\<rbrakk> \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> C has_fields FDTs\"", "lemma has_fields_types:\n  \"\\<lbrakk> P \\<turnstile> C has_fields FDTs; (FD,T) \\<in> set FDTs; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_type P T\"", "lemma sees_field_is_type:\n  \"\\<lbrakk> P \\<turnstile> C sees F:T in D; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_type P T\"", "lemma wf_syscls:\n  \"set SystemClasses \\<subseteq> set P \\<Longrightarrow> wf_syscls P\""], "translations": [["", "lemma class_wf: \n  \"\\<lbrakk>class P C = Some c; wf_prog wf_md P\\<rbrakk> \\<Longrightarrow> wf_cdecl wf_md P (C,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C = \\<lfloor>c\\<rfloor>; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> wf_cdecl wf_md P (C, c)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C = \\<lfloor>c\\<rfloor>; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> wf_cdecl wf_md P (C, c)", "apply (unfold wf_prog_def class_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map_of P C = \\<lfloor>c\\<rfloor>;\n     wf_syscls P \\<and>\n     (\\<forall>c\\<in>set P. wf_cdecl wf_md P c) \\<and>\n     distinct_fst P\\<rbrakk>\n    \\<Longrightarrow> wf_cdecl wf_md P (C, c)", "apply (fast dest: map_of_SomeD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma class_Object [simp]: \n  \"wf_prog wf_md P \\<Longrightarrow> \\<exists>C fs ms. class P Object = Some (C,fs,ms)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow>\n    \\<exists>C fs ms. class P Object = \\<lfloor>(C, fs, ms)\\<rfloor>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow>\n    \\<exists>C fs ms. class P Object = \\<lfloor>(C, fs, ms)\\<rfloor>", "apply (unfold wf_prog_def wf_syscls_def class_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {Object} \\<union> sys_xcpts \\<subseteq> set (map fst P) \\<and>\n    (\\<forall>c\\<in>set P. wf_cdecl wf_md P c) \\<and>\n    distinct_fst P \\<Longrightarrow>\n    \\<exists>C fs ms. map_of P Object = \\<lfloor>(C, fs, ms)\\<rfloor>", "apply (auto simp: map_of_SomeI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma is_class_Object [simp]:\n  \"wf_prog wf_md P \\<Longrightarrow> is_class P Object\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> is_class P Object", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> is_class P Object", "by (simp add: is_class_def)"], ["", "(*>*)\n(* Unused\nlemma is_class_supclass:\nassumes wf: \"wf_prog wf_md P\" and sub: \"P \\<turnstile> C \\<preceq>\\<^sup>* D\"\nshows \"is_class P C \\<Longrightarrow> is_class P D\"\nusing sub apply(induct)\n apply assumption\napply(fastforce simp:wf_cdecl_def subcls1_def is_class_def\n               dest:class_wf[OF _ wf])\ndone\n\nThis is NOT true because P \\<turnstile> NT \\<le> Class C for any Class C\nlemma is_type_suptype: \"\\<lbrakk> wf_prog p P; is_type P T; P \\<turnstile> T \\<le> T' \\<rbrakk>\n \\<Longrightarrow> is_type P T'\"\n*)"], ["", "lemma is_class_xcpt:\n  \"\\<lbrakk> C \\<in> sys_xcpts; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_class P C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> sys_xcpts; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_class P C", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> sys_xcpts; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_class P C", "apply (simp add: wf_prog_def wf_syscls_def is_class_def class_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> sys_xcpts;\n     Object \\<in> fst ` set P \\<and>\n     sys_xcpts \\<subseteq> fst ` set P \\<and>\n     Ball (set P) (wf_cdecl wf_md P) \\<and> distinct_fst P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a aa b.\n                         map_of P C = \\<lfloor>(a, aa, b)\\<rfloor>", "apply (fastforce intro!: map_of_SomeI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma subcls1_wfD:\n  \"\\<lbrakk> P \\<turnstile> C \\<prec>\\<^sup>1 D; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> D \\<noteq> C \\<and> (D,C) \\<notin> (subcls1 P)\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sup>1 D; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> D \\<noteq> C \\<and>\n                      (D, C) \\<notin> (subcls1 P)\\<^sup>+", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sup>1 D; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> D \\<noteq> C \\<and>\n                      (D, C) \\<notin> (subcls1 P)\\<^sup>+", "apply( frule r_into_trancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sup>1 D; wf_prog wf_md P;\n     (C, D) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> D \\<noteq> C \\<and>\n                      (D, C) \\<notin> (subcls1 P)\\<^sup>+", "apply( drule subcls1D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+;\n     C \\<noteq> Object \\<and>\n     (\\<exists>fs ms. class P C = \\<lfloor>(D, fs, ms)\\<rfloor>)\\<rbrakk>\n    \\<Longrightarrow> D \\<noteq> C \\<and>\n                      (D, C) \\<notin> (subcls1 P)\\<^sup>+", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fs ms.\n       \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+;\n        C \\<noteq> Object;\n        class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> D \\<noteq> C \\<and>\n                         (D, C) \\<notin> (subcls1 P)\\<^sup>+", "apply( drule (1) class_wf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fs ms.\n       \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+;\n        C \\<noteq> Object; wf_cdecl wf_md P (C, D, fs, ms)\\<rbrakk>\n       \\<Longrightarrow> D \\<noteq> C \\<and>\n                         (D, C) \\<notin> (subcls1 P)\\<^sup>+", "apply( unfold wf_cdecl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fs ms.\n       \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+;\n        C \\<noteq> Object;\n        case (C, D, fs, ms) of\n        (C, D, fs, ms) \\<Rightarrow>\n          (\\<forall>f\\<in>set fs. wf_fdecl P f) \\<and>\n          distinct_fst fs \\<and>\n          (\\<forall>m\\<in>set ms. wf_mdecl wf_md P C m) \\<and>\n          distinct_fst ms \\<and>\n          (C \\<noteq> Object \\<longrightarrow>\n           is_class P D \\<and>\n           (D, C) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n           (\\<forall>(M, Ts, T, m)\\<in>set ms.\n               \\<forall>D' Ts' T' m'.\n                  P \\<turnstile> D sees M: Ts'\\<rightarrow>T' = m' in D' \\<longrightarrow>\n                  P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                  P \\<turnstile> T \\<le> T'))\\<rbrakk>\n       \\<Longrightarrow> D \\<noteq> C \\<and>\n                         (D, C) \\<notin> (subcls1 P)\\<^sup>+", "apply(force simp add: reflcl_trancl [THEN sym] simp del: reflcl_trancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma wf_cdecl_supD: \n  \"\\<lbrakk>wf_cdecl wf_md P (C,D,r); C \\<noteq> Object\\<rbrakk> \\<Longrightarrow> is_class P D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_cdecl wf_md P (C, D, r); C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> is_class P D", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_cdecl wf_md P (C, D, r); C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> is_class P D", "by (auto simp: wf_cdecl_def)"], ["", "(*>*)"], ["", "lemma subcls_asym:\n  \"\\<lbrakk> wf_prog wf_md P; (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<rbrakk> \\<Longrightarrow> (D,C) \\<notin> (subcls1 P)\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "apply(erule tranclE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_prog wf_md P; P \\<turnstile> C \\<prec>\\<^sup>1 D\\<rbrakk>\n    \\<Longrightarrow> (D, C) \\<notin> (subcls1 P)\\<^sup>+\n 2. \\<And>c.\n       \\<lbrakk>wf_prog wf_md P; (C, c) \\<in> (subcls1 P)\\<^sup>+;\n        P \\<turnstile> c \\<prec>\\<^sup>1 D\\<rbrakk>\n       \\<Longrightarrow> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "apply(fast dest!: subcls1_wfD )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>wf_prog wf_md P; (C, c) \\<in> (subcls1 P)\\<^sup>+;\n        P \\<turnstile> c \\<prec>\\<^sup>1 D\\<rbrakk>\n       \\<Longrightarrow> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "apply(fast dest!: subcls1_wfD intro: trancl_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma subcls_irrefl:\n  \"\\<lbrakk> wf_prog wf_md P; (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<rbrakk> \\<Longrightarrow> C \\<noteq> D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> C \\<noteq> D", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> C \\<noteq> D", "apply (erule trancl_trans_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>wf_prog wf_md P; P \\<turnstile> x \\<prec>\\<^sup>1 y\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> y\n 2. \\<And>x y z.\n       \\<lbrakk>wf_prog wf_md P; (x, y) \\<in> (subcls1 P)\\<^sup>+;\n        x \\<noteq> y; (y, z) \\<in> (subcls1 P)\\<^sup>+;\n        y \\<noteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> z", "apply  (auto dest: subcls1_wfD subcls_asym)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma acyclic_subcls1:\n  \"wf_prog wf_md P \\<Longrightarrow> acyclic (subcls1 P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> acyclic (subcls1 P)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> acyclic (subcls1 P)", "apply (unfold acyclic_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow>\n    \\<forall>x. (x, x) \\<notin> (subcls1 P)\\<^sup>+", "apply (fast dest: subcls_irrefl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma wf_subcls1:\n  \"wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)", "apply (rule finite_acyclic_wf)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf_prog wf_md P \\<Longrightarrow> finite ((subcls1 P)\\<inverse>)\n 2. wf_prog wf_md P \\<Longrightarrow> acyclic ((subcls1 P)\\<inverse>)", "apply ( subst finite_converse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf_prog wf_md P \\<Longrightarrow> finite (subcls1 P)\n 2. wf_prog wf_md P \\<Longrightarrow> acyclic ((subcls1 P)\\<inverse>)", "apply ( rule finite_subcls1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> acyclic ((subcls1 P)\\<inverse>)", "apply (subst acyclic_converse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> acyclic (subcls1 P)", "apply (erule acyclic_subcls1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma single_valued_subcls1:\n  \"wf_prog wf_md G \\<Longrightarrow> single_valued (subcls1 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md G \\<Longrightarrow> single_valued (subcls1 G)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md G \\<Longrightarrow> single_valued (subcls1 G)", "by(auto simp:wf_prog_def distinct_fst_def single_valued_def dest!:subcls1D)"], ["", "(*>*)"], ["", "lemma subcls_induct: \n  \"\\<lbrakk> wf_prog wf_md P; \\<And>C. \\<forall>D. (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow> Q D \\<Longrightarrow> Q C \\<rbrakk> \\<Longrightarrow> Q C\"\n(*<*)\n  (is \"?A \\<Longrightarrow> PROP ?P \\<Longrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C.\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           Q D \\<Longrightarrow>\n        Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C.\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           Q D \\<Longrightarrow>\n        Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "assume p: \"PROP ?P\""], ["proof (state)\nthis:\n  \\<forall>D.\n     (?C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n     Q D \\<Longrightarrow>\n  Q ?C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C.\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           Q D \\<Longrightarrow>\n        Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "assume ?A"], ["proof (state)\nthis:\n  wf_prog wf_md P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C.\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           Q D \\<Longrightarrow>\n        Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "thus ?thesis"], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n\ngoal (1 subgoal):\n 1. Q C", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> Q C", "apply(drule wf_subcls1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf ((subcls1 P)\\<inverse>) \\<Longrightarrow> Q C", "apply(drule wf_trancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (((subcls1 P)\\<inverse>)\\<^sup>+) \\<Longrightarrow> Q C", "apply(simp only: trancl_converse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (((subcls1 P)\\<^sup>+)\\<inverse>) \\<Longrightarrow> Q C", "apply(erule_tac a = C in wf_induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> ((subcls1 P)\\<^sup>+)\\<inverse> \\<longrightarrow>\n          Q y \\<Longrightarrow>\n       Q x", "apply(rule p)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> ((subcls1 P)\\<^sup>+)\\<inverse> \\<longrightarrow>\n          Q y \\<Longrightarrow>\n       \\<forall>D. (x, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow> Q D", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Q C\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma subcls1_induct_aux:\n  \"\\<lbrakk> is_class P C; wf_prog wf_md P; Q Object;\n    \\<And>C D fs ms.\n    \\<lbrakk> C \\<noteq> Object; is_class P C; class P C = Some (D,fs,ms) \\<and>\n      wf_cdecl wf_md P (C,D,fs,ms) \\<and> P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and> is_class P D \\<and> Q D\\<rbrakk> \\<Longrightarrow> Q C \\<rbrakk>\n  \\<Longrightarrow> Q C\"\n(*<*)\n  (is \"?A \\<Longrightarrow> ?B \\<Longrightarrow> ?C \\<Longrightarrow> PROP ?P \\<Longrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_class P C; wf_prog wf_md P; Q Object;\n     \\<And>C D fs ms.\n        \\<lbrakk>C \\<noteq> Object; is_class P C;\n         class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<and>\n         wf_cdecl wf_md P (C, D, fs, ms) \\<and>\n         P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and>\n         is_class P D \\<and> Q D\\<rbrakk>\n        \\<Longrightarrow> Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_class P C; wf_prog wf_md P; Q Object;\n     \\<And>C D fs ms.\n        \\<lbrakk>C \\<noteq> Object; is_class P C;\n         class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<and>\n         wf_cdecl wf_md P (C, D, fs, ms) \\<and>\n         P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and>\n         is_class P D \\<and> Q D\\<rbrakk>\n        \\<Longrightarrow> Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "assume p: \"PROP ?P\""], ["proof (state)\nthis:\n  \\<lbrakk>?C \\<noteq> Object; is_class P ?C;\n   class P ?C = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<and>\n   wf_cdecl wf_md P (?C, ?D, ?fs, ?ms) \\<and>\n   P \\<turnstile> ?C \\<prec>\\<^sup>1 ?D \\<and>\n   is_class P ?D \\<and> Q ?D\\<rbrakk>\n  \\<Longrightarrow> Q ?C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_class P C; wf_prog wf_md P; Q Object;\n     \\<And>C D fs ms.\n        \\<lbrakk>C \\<noteq> Object; is_class P C;\n         class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<and>\n         wf_cdecl wf_md P (C, D, fs, ms) \\<and>\n         P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and>\n         is_class P D \\<and> Q D\\<rbrakk>\n        \\<Longrightarrow> Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "assume ?A ?B ?C"], ["proof (state)\nthis:\n  is_class P C\n  wf_prog wf_md P\n  Q Object\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_class P C; wf_prog wf_md P; Q Object;\n     \\<And>C D fs ms.\n        \\<lbrakk>C \\<noteq> Object; is_class P C;\n         class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<and>\n         wf_cdecl wf_md P (C, D, fs, ms) \\<and>\n         P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and>\n         is_class P D \\<and> Q D\\<rbrakk>\n        \\<Longrightarrow> Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_class P C\n  wf_prog wf_md P\n  Q Object\n\ngoal (1 subgoal):\n 1. Q C", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_class P C; wf_prog wf_md P; Q Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "apply(unfold is_class_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "apply( rule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object\\<rbrakk>\n    \\<Longrightarrow> ?P3 \\<longrightarrow> ?Q3\n 2. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object\\<rbrakk>\n    \\<Longrightarrow> ?P3\n 3. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object;\n     ?Q3\\<rbrakk>\n    \\<Longrightarrow> Q C", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object\\<rbrakk>\n    \\<Longrightarrow> ?P3\n 2. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object\\<rbrakk>\n    \\<Longrightarrow> ?P3 \\<longrightarrow> ?Q3\n 3. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object;\n     ?Q3\\<rbrakk>\n    \\<Longrightarrow> Q C", "apply(   assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object\\<rbrakk>\n    \\<Longrightarrow> class P C \\<noteq> None \\<longrightarrow> ?Q3\n 2. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object;\n     ?Q3\\<rbrakk>\n    \\<Longrightarrow> Q C", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object;\n     ?Q3\\<rbrakk>\n    \\<Longrightarrow> Q C\n 2. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object\\<rbrakk>\n    \\<Longrightarrow> class P C \\<noteq> None \\<longrightarrow> ?Q3", "apply(  assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; wf_prog wf_md P; Q Object\\<rbrakk>\n    \\<Longrightarrow> class P C \\<noteq> None \\<longrightarrow> Q C", "apply( erule thin_rl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; Q Object\\<rbrakk>\n    \\<Longrightarrow> class P C \\<noteq> None \\<longrightarrow> Q C", "apply( rule subcls_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_prog wf_md P; Q Object\\<rbrakk>\n    \\<Longrightarrow> wf_prog ?wf_md9 ?P9\n 2. \\<And>C.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 ?P9)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D\\<rbrakk>\n       \\<Longrightarrow> class P C \\<noteq> None \\<longrightarrow> Q C", "apply(  assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D\\<rbrakk>\n       \\<Longrightarrow> class P C \\<noteq> None \\<longrightarrow> Q C", "apply( rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        class P C \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> Q C", "apply( case_tac \"C = Object\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        class P C \\<noteq> None; C = Object\\<rbrakk>\n       \\<Longrightarrow> Q C\n 2. \\<And>C.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n       \\<Longrightarrow> Q C", "apply(  fast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n       \\<Longrightarrow> Q C", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> Q C", "apply( frule (1) class_wf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>;\n        wf_cdecl wf_md P (C, a, aa, b)\\<rbrakk>\n       \\<Longrightarrow> Q C", "apply( frule (1) wf_cdecl_supD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>;\n        wf_cdecl wf_md P (C, a, aa, b); is_class P a\\<rbrakk>\n       \\<Longrightarrow> Q C", "apply( subgoal_tac \"P \\<turnstile> C \\<prec>\\<^sup>1 a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>;\n        wf_cdecl wf_md P (C, a, aa, b); is_class P a;\n        P \\<turnstile> C \\<prec>\\<^sup>1 a\\<rbrakk>\n       \\<Longrightarrow> Q C\n 2. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>;\n        wf_cdecl wf_md P (C, a, aa, b); is_class P a\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<prec>\\<^sup>1 a", "apply( erule_tac [2] subcls1I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>;\n        wf_cdecl wf_md P (C, a, aa, b); is_class P a;\n        P \\<turnstile> C \\<prec>\\<^sup>1 a\\<rbrakk>\n       \\<Longrightarrow> Q C\n 2. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; wf_cdecl wf_md P (C, a, aa, b);\n        is_class P a\\<rbrakk>\n       \\<Longrightarrow> C \\<noteq> Object", "apply(  rule p)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>;\n        wf_cdecl wf_md P (C, a, aa, b); is_class P a;\n        P \\<turnstile> C \\<prec>\\<^sup>1 a\\<rbrakk>\n       \\<Longrightarrow> C \\<noteq> Object\n 2. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>;\n        wf_cdecl wf_md P (C, a, aa, b); is_class P a;\n        P \\<turnstile> C \\<prec>\\<^sup>1 a\\<rbrakk>\n       \\<Longrightarrow> is_class P C\n 3. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>;\n        wf_cdecl wf_md P (C, a, aa, b); is_class P a;\n        P \\<turnstile> C \\<prec>\\<^sup>1 a\\<rbrakk>\n       \\<Longrightarrow> class P C =\n                         \\<lfloor>(?D28 C a aa b, ?fs28 C a aa b,\n                                   ?ms28 C a aa b)\\<rfloor> \\<and>\n                         wf_cdecl wf_md P\n                          (C, ?D28 C a aa b, ?fs28 C a aa b,\n                           ?ms28 C a aa b) \\<and>\n                         P \\<turnstile> C \\<prec>\\<^sup>1 ?D28 C a aa\n                     b \\<and>\n                         is_class P (?D28 C a aa b) \\<and> Q (?D28 C a aa b)\n 4. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; wf_cdecl wf_md P (C, a, aa, b);\n        is_class P a\\<rbrakk>\n       \\<Longrightarrow> C \\<noteq> Object", "apply (unfold is_class_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>;\n        wf_cdecl wf_md P (C, a, aa, b); class P a \\<noteq> None;\n        P \\<turnstile> C \\<prec>\\<^sup>1 a\\<rbrakk>\n       \\<Longrightarrow> C \\<noteq> Object\n 2. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>;\n        wf_cdecl wf_md P (C, a, aa, b); class P a \\<noteq> None;\n        P \\<turnstile> C \\<prec>\\<^sup>1 a\\<rbrakk>\n       \\<Longrightarrow> class P C \\<noteq> None\n 3. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; class P C = \\<lfloor>(a, aa, b)\\<rfloor>;\n        wf_cdecl wf_md P (C, a, aa, b); class P a \\<noteq> None;\n        P \\<turnstile> C \\<prec>\\<^sup>1 a\\<rbrakk>\n       \\<Longrightarrow> class P C =\n                         \\<lfloor>(?D28 C a aa b, ?fs28 C a aa b,\n                                   ?ms28 C a aa b)\\<rfloor> \\<and>\n                         wf_cdecl wf_md P\n                          (C, ?D28 C a aa b, ?fs28 C a aa b,\n                           ?ms28 C a aa b) \\<and>\n                         P \\<turnstile> C \\<prec>\\<^sup>1 ?D28 C a aa\n                     b \\<and>\n                         class P (?D28 C a aa b) \\<noteq> None \\<and>\n                         Q (?D28 C a aa b)\n 4. \\<And>C a aa b.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           class P D \\<noteq> None \\<longrightarrow> Q D;\n        C \\<noteq> Object; wf_cdecl wf_md P (C, a, aa, b);\n        class P a \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> C \\<noteq> Object", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Q C\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)\n\n(* FIXME can't we prove this one directly?? *)"], ["", "lemma subcls1_induct [consumes 2, case_names Object Subcls]:\n  \"\\<lbrakk> wf_prog wf_md P; is_class P C; Q Object;\n    \\<And>C D. \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D; is_class P D; Q D\\<rbrakk> \\<Longrightarrow> Q C \\<rbrakk>\n  \\<Longrightarrow> Q C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; is_class P C; Q Object;\n     \\<And>C D.\n        \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n         is_class P D; Q D\\<rbrakk>\n        \\<Longrightarrow> Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; is_class P C; Q Object;\n     \\<And>C D.\n        \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n         is_class P D; Q D\\<rbrakk>\n        \\<Longrightarrow> Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "apply (erule subcls1_induct_aux, assumption, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C D fs ms.\n       \\<lbrakk>wf_prog wf_md P; Q Object;\n        \\<And>C D.\n           \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n            is_class P D; Q D\\<rbrakk>\n           \\<Longrightarrow> Q C;\n        C \\<noteq> Object; is_class P C;\n        class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<and>\n        wf_cdecl wf_md P (C, D, fs, ms) \\<and>\n        P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and>\n        is_class P D \\<and> Q D\\<rbrakk>\n       \\<Longrightarrow> Q C", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma subcls_C_Object:\n  \"\\<lbrakk> is_class P C; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* Object\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_class P C; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* Object", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_class P C; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* Object", "apply(erule (1) subcls1_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_class P C \\<Longrightarrow>\n    P \\<turnstile> Object \\<preceq>\\<^sup>* Object\n 2. \\<And>Ca D.\n       \\<lbrakk>is_class P C; Ca \\<noteq> Object;\n        P \\<turnstile> Ca \\<prec>\\<^sup>1 D; is_class P D;\n        P \\<turnstile> D \\<preceq>\\<^sup>* Object\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> Ca \\<preceq>\\<^sup>* Object", "apply( fast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ca D.\n       \\<lbrakk>is_class P C; Ca \\<noteq> Object;\n        P \\<turnstile> Ca \\<prec>\\<^sup>1 D; is_class P D;\n        P \\<turnstile> D \\<preceq>\\<^sup>* Object\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> Ca \\<preceq>\\<^sup>* Object", "apply(erule (1) converse_rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma is_type_pTs:\nassumes \"wf_prog wf_md P\" and \"(C,S,fs,ms) \\<in> set P\" and \"(M,Ts,T,m) \\<in> set ms\"\nshows \"set Ts \\<subseteq> types P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Ts \\<subseteq> types P", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set Ts \\<subseteq> types P", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "from assms"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P\n  (M, Ts, T, m) \\<in> set ms", "have \"wf_mdecl wf_md P C (M,Ts,T,m)\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P\n  (M, Ts, T, m) \\<in> set ms\n\ngoal (1 subgoal):\n 1. wf_mdecl wf_md P C (M, Ts, T, m)", "by (unfold wf_prog_def wf_cdecl_def) auto"], ["proof (state)\nthis:\n  wf_mdecl wf_md P C (M, Ts, T, m)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "hence \"\\<forall>t \\<in> set Ts. is_type P t\""], ["proof (prove)\nusing this:\n  wf_mdecl wf_md P C (M, Ts, T, m)\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set Ts. is_type P t", "by (unfold wf_mdecl_def) auto"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set Ts. is_type P t\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "moreover"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set Ts. is_type P t\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "assume \"t \\<in> set Ts\""], ["proof (state)\nthis:\n  t \\<in> set Ts\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>t\\<in>set Ts. is_type P t\n  t \\<in> set Ts", "have \"is_type P t\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set Ts. is_type P t\n  t \\<in> set Ts\n\ngoal (1 subgoal):\n 1. is_type P t", "by blast"], ["proof (state)\nthis:\n  is_type P t\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "thus \"t \\<in> types P\""], ["proof (prove)\nusing this:\n  is_type P t\n\ngoal (1 subgoal):\n 1. t \\<in> types P", ".."], ["proof (state)\nthis:\n  t \\<in> types P\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "subsection\\<open>Well-formedness and method lookup\\<close>"], ["", "lemma sees_wf_mdecl:\n  \"\\<lbrakk> wf_prog wf_md P; P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in D \\<rbrakk> \\<Longrightarrow> wf_mdecl wf_md P D (M,Ts,T,m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D\\<rbrakk>\n    \\<Longrightarrow> wf_mdecl wf_md P D (M, Ts, T, m)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D\\<rbrakk>\n    \\<Longrightarrow> wf_mdecl wf_md P D (M, Ts, T, m)", "apply(drule visible_method_exists)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<exists>D' fs ms.\n        class P D = \\<lfloor>(D', fs, ms)\\<rfloor> \\<and>\n        map_of ms M = \\<lfloor>(Ts, T, m)\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> wf_mdecl wf_md P D (M, Ts, T, m)", "apply(fastforce simp:wf_cdecl_def dest!:class_wf dest:map_of_SomeD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma sees_method_mono [rule_format (no_asm)]: \n  \"\\<lbrakk> P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow>\n  \\<forall>D Ts T m. P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'. P \\<turnstile> C' sees M:Ts'\\<rightarrow>T' = m' in D' \\<and> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>D Ts T m.\n                         P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                         (\\<exists>D' Ts' T' m'.\n                             P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                             P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                             P \\<turnstile> T' \\<le> T)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>D Ts T m.\n                         P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                         (\\<exists>D' Ts' T' m'.\n                             P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                             P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                             P \\<turnstile> T' \\<le> T)", "apply( drule rtranclD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     C' = C \\<or>\n     C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> \\<forall>D Ts T m.\n                         P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                         (\\<exists>D' Ts' T' m'.\n                             P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                             P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                             P \\<turnstile> T' \\<le> T)", "apply( erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_prog wf_md P; C' = C\\<rbrakk>\n    \\<Longrightarrow> \\<forall>D Ts T m.\n                         P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                         (\\<exists>D' Ts' T' m'.\n                             P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                             P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                             P \\<turnstile> T' \\<le> T)\n 2. \\<lbrakk>wf_prog wf_md P;\n     C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> \\<forall>D Ts T m.\n                         P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                         (\\<exists>D' Ts' T' m'.\n                             P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                             P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                             P \\<turnstile> T' \\<le> T)", "apply(  fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> \\<forall>D Ts T m.\n                         P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                         (\\<exists>D' Ts' T' m'.\n                             P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                             P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                             P \\<turnstile> T' \\<le> T)", "apply( erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n     (C', C) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> \\<forall>D Ts T m.\n                         P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                         (\\<exists>D' Ts' T' m'.\n                             P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                             P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                             P \\<turnstile> T' \\<le> T)", "apply( erule trancl_trans_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        P \\<turnstile> x \\<prec>\\<^sup>1 y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D Ts T m.\n                            P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)\n 2. \\<And>x y z.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        (x, y) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D Ts T m.\n           P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T);\n        (y, z) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D Ts T m.\n           P \\<turnstile> z sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> y sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D Ts T m.\n                            P \\<turnstile> z sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        (x, y) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D Ts T m.\n           P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T);\n        (y, z) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D Ts T m.\n           P \\<turnstile> z sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> y sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D Ts T m.\n                            P \\<turnstile> z sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)\n 2. \\<And>x y.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        P \\<turnstile> x \\<prec>\\<^sup>1 y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D Ts T m.\n                            P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)", "apply(  clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z D Ts T m.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        (x, y) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D Ts T m.\n           P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T);\n        (y, z) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D Ts T m.\n           P \\<turnstile> z sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> y sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T);\n        P \\<turnstile> z sees M: Ts\\<rightarrow>T = m in D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T' m'.\n                            P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T\n 2. \\<And>x y.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        P \\<turnstile> x \\<prec>\\<^sup>1 y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D Ts T m.\n                            P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)", "apply(  drule spec, drule spec, drule spec, drule spec, erule (1) impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z D Ts T m.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        (x, y) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D Ts T m.\n           P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T);\n        (y, z) \\<in> (subcls1 P)\\<^sup>+;\n        P \\<turnstile> z sees M: Ts\\<rightarrow>T = m in D;\n        \\<exists>D' Ts' T' m'.\n           P \\<turnstile> y sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n           P \\<turnstile> T' \\<le> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T' m'.\n                            P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T\n 2. \\<And>x y.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        P \\<turnstile> x \\<prec>\\<^sup>1 y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D Ts T m.\n                            P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z D Ts T m D' Ts' T' m'.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        (x, y) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D Ts T m.\n           P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T);\n        (y, z) \\<in> (subcls1 P)\\<^sup>+;\n        P \\<turnstile> z sees M: Ts\\<rightarrow>T = m in D;\n        P \\<turnstile> y sees M: Ts'\\<rightarrow>T' = m' in D';\n        P \\<turnstile> Ts [\\<le>] Ts'; P \\<turnstile> T' \\<le> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T' m'.\n                            P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T\n 2. \\<And>x y.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        P \\<turnstile> x \\<prec>\\<^sup>1 y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D Ts T m.\n                            P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)", "apply(  fast elim: widen_trans widens_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        P \\<turnstile> x \\<prec>\\<^sup>1 y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D Ts T m.\n                            P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)", "apply( clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        P \\<turnstile> x \\<prec>\\<^sup>1 y;\n        P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T' m'.\n                            P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply( drule subcls1D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D;\n        x \\<noteq> Object \\<and>\n        (\\<exists>fs ms. class P x = \\<lfloor>(y, fs, ms)\\<rfloor>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T' m'.\n                            P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply( clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C;\n        P \\<turnstile> y sees M: Ts\\<rightarrow>T = m in D;\n        x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T' m'.\n                            P \\<turnstile> x sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(clarsimp simp:Method_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms Mm.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(frule (2) sees_methods_rec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y D Ts T m fs ms Mm.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> ?Mm'87 x y D Ts T m fs ms Mm =\n                         Mm ++\n                         (map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms)\n 2. \\<And>x y D Ts T m fs ms Mm.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods ?Mm'87 x y D Ts T m fs ms Mm\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms Mm.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(case_tac \"map_of ms M\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y D Ts T m fs ms Mm.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T\n 2. \\<And>x y D Ts T m fs ms Mm a.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(rule_tac x = D in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y D Ts T m fs ms Mm.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'), D)\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T\n 2. \\<And>x y D Ts T m fs ms Mm a.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(rule_tac x = Ts in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y D Ts T m fs ms Mm.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts, T', m'), D)\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts \\<and>\n                            P \\<turnstile> T' \\<le> T\n 2. \\<And>x y D Ts T m fs ms Mm a.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(rule_tac x = T in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y D Ts T m fs ms Mm.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m' Mm.\n                             P \\<turnstile> x sees_methods Mm \\<and>\n                             Mm M =\n                             \\<lfloor>((Ts, T, m'), D)\\<rfloor>) \\<and>\n                         P \\<turnstile> Ts [\\<le>] Ts \\<and>\n                         P \\<turnstile> T \\<le> T\n 2. \\<And>x y D Ts T m fs ms Mm a.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y D Ts T m fs ms Mm.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m' Mm.\n                            P \\<turnstile> x sees_methods Mm \\<and>\n                            Mm M = \\<lfloor>((Ts, T, m'), D)\\<rfloor>\n 2. \\<And>x y D Ts T m fs ms Mm a.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(rule_tac x = m in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y D Ts T m fs ms Mm.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> x sees_methods Mm \\<and>\n                            Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>\n 2. \\<And>x y D Ts T m fs ms Mm a.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(fastforce simp add:map_add_def split:option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms Mm a.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms Mm a aa b.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>(a, aa, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(rename_tac Ts' T' m')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms Mm Ts' T' m'.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        class P x = \\<lfloor>(y, fs, ms)\\<rfloor>;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>(Ts', T', m')\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply( drule (1) class_wf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms Mm Ts' T' m'.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>(Ts', T', m')\\<rfloor>;\n        wf_cdecl wf_md P (x, y, fs, ms)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply( unfold wf_cdecl_def Method_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms Mm Ts' T' m'.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>(Ts', T', m')\\<rfloor>;\n        case (x, y, fs, ms) of\n        (C, D, fs, ms) \\<Rightarrow>\n          (\\<forall>f\\<in>set fs. wf_fdecl P f) \\<and>\n          distinct_fst fs \\<and>\n          (\\<forall>m\\<in>set ms. wf_mdecl wf_md P C m) \\<and>\n          distinct_fst ms \\<and>\n          (C \\<noteq> Object \\<longrightarrow>\n           is_class P D \\<and>\n           (D, C) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n           (\\<forall>(M, Ts, T, m)\\<in>set ms.\n               \\<forall>D' Ts' T' m'.\n                  (\\<exists>Mm.\n                      P \\<turnstile> D sees_methods Mm \\<and>\n                      Mm M =\n                      \\<lfloor>((Ts', T', m'),\n                                D')\\<rfloor>) \\<longrightarrow>\n                  P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                  P \\<turnstile> T \\<le> T'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply( frule map_of_SomeD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms Mm Ts' T' m'.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>(Ts', T', m')\\<rfloor>;\n        case (x, y, fs, ms) of\n        (C, D, fs, ms) \\<Rightarrow>\n          (\\<forall>f\\<in>set fs. wf_fdecl P f) \\<and>\n          distinct_fst fs \\<and>\n          (\\<forall>m\\<in>set ms. wf_mdecl wf_md P C m) \\<and>\n          distinct_fst ms \\<and>\n          (C \\<noteq> Object \\<longrightarrow>\n           is_class P D \\<and>\n           (D, C) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n           (\\<forall>(M, Ts, T, m)\\<in>set ms.\n               \\<forall>D' Ts' T' m'.\n                  (\\<exists>Mm.\n                      P \\<turnstile> D sees_methods Mm \\<and>\n                      Mm M =\n                      \\<lfloor>((Ts', T', m'),\n                                D')\\<rfloor>) \\<longrightarrow>\n                  P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                  P \\<turnstile> T \\<le> T'));\n        (M, Ts', T', m') \\<in> set ms\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms Mm Ts' T' m'.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>(Ts', T', m')\\<rfloor>;\n        (M, Ts', T', m') \\<in> set ms; \\<forall>x\\<in>set fs. wf_fdecl P x;\n        distinct_fst fs; \\<forall>xa\\<in>set ms. wf_mdecl wf_md P x xa;\n        distinct_fst ms; is_class P y; (y, x) \\<notin> (subcls1 P)\\<^sup>*;\n        \\<forall>x\\<in>set ms.\n           case x of\n           (M, Ts, T, m) \\<Rightarrow>\n             \\<forall>D' Ts' T'.\n                (\\<exists>m' Mm.\n                    P \\<turnstile> y sees_methods Mm \\<and>\n                    Mm M =\n                    \\<lfloor>((Ts', T', m'), D')\\<rfloor>) \\<longrightarrow>\n                P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                P \\<turnstile> T \\<le> T'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(drule (1) bspec, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms Mm Ts' T' m'.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>(Ts', T', m')\\<rfloor>;\n        (M, Ts', T', m') \\<in> set ms; \\<forall>x\\<in>set fs. wf_fdecl P x;\n        distinct_fst fs; \\<forall>xa\\<in>set ms. wf_mdecl wf_md P x xa;\n        distinct_fst ms; is_class P y; (y, x) \\<notin> (subcls1 P)\\<^sup>*;\n        \\<forall>D' Ts'a T'a.\n           (\\<exists>m' Mm.\n               P \\<turnstile> y sees_methods Mm \\<and>\n               Mm M =\n               \\<lfloor>((Ts'a, T'a, m'), D')\\<rfloor>) \\<longrightarrow>\n           P \\<turnstile> Ts'a [\\<le>] Ts' \\<and>\n           P \\<turnstile> T' \\<le> T'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(erule_tac x=D in allE, erule_tac x=Ts in allE, erule_tac x=T in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y D Ts T m fs ms Mm Ts' T' m'.\n       \\<lbrakk>wf_prog wf_md P; C' \\<noteq> C; x \\<noteq> Object;\n        P \\<turnstile> y sees_methods Mm;\n        Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>;\n        P \\<turnstile> x sees_methods Mm ++\n(map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms);\n        map_of ms M = \\<lfloor>(Ts', T', m')\\<rfloor>;\n        (M, Ts', T', m') \\<in> set ms; \\<forall>x\\<in>set fs. wf_fdecl P x;\n        distinct_fst fs; \\<forall>xa\\<in>set ms. wf_mdecl wf_md P x xa;\n        distinct_fst ms; is_class P y; (y, x) \\<notin> (subcls1 P)\\<^sup>*;\n        (\\<exists>m' Mm.\n            P \\<turnstile> y sees_methods Mm \\<and>\n            Mm M = \\<lfloor>((Ts, T, m'), D)\\<rfloor>) \\<longrightarrow>\n        P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n        P \\<turnstile> T' \\<le> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D' Ts' T'.\n                            (\\<exists>m' Mm.\n                                P \\<turnstile> x sees_methods Mm \\<and>\n                                Mm M =\n                                \\<lfloor>((Ts', T', m'),\n    D')\\<rfloor>) \\<and>\n                            P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                            P \\<turnstile> T' \\<le> T", "apply(fastforce simp:map_add_def split:option.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma sees_method_mono2:\n  \"\\<lbrakk> P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P;\n     P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in D; P \\<turnstile> C' sees M:Ts'\\<rightarrow>T' = m' in D' \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P;\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D;\n     P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                      P \\<turnstile> T' \\<le> T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P;\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D;\n     P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                      P \\<turnstile> T' \\<le> T", "by(blast dest:sees_method_mono sees_method_fun)"], ["", "(*>*)"], ["", "lemma mdecls_visible:\nassumes wf: \"wf_prog wf_md P\" and \"class\": \"is_class P C\"\nshows \"\\<And>D fs ms. class P C = Some(D,fs,ms)\n         \\<Longrightarrow> \\<exists>Mm. P \\<turnstile> C sees_methods Mm \\<and> (\\<forall>(M,Ts,T,m) \\<in> set ms. Mm M = Some((Ts,T,m),C))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D fs ms.\n       class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> C sees_methods Mm \\<and>\n          (\\<forall>(M, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((Ts, T, m), C)\\<rfloor>)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D fs ms.\n       class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> C sees_methods Mm \\<and>\n          (\\<forall>(M, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((Ts, T, m), C)\\<rfloor>)", "using wf \"class\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  is_class P C\n\ngoal (1 subgoal):\n 1. \\<And>D fs ms.\n       class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> C sees_methods Mm \\<and>\n          (\\<forall>(M, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((Ts, T, m), C)\\<rfloor>)", "proof (induct rule:subcls1_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>D fs ms.\n       class P Object = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> Object sees_methods Mm \\<and>\n          (\\<forall>(M, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((Ts, T, m), Object)\\<rfloor>)\n 2. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((Ts, T, m), C)\\<rfloor>)", "case Object"], ["proof (state)\nthis:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (2 subgoals):\n 1. \\<And>D fs ms.\n       class P Object = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> Object sees_methods Mm \\<and>\n          (\\<forall>(M, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((Ts, T, m), Object)\\<rfloor>)\n 2. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((Ts, T, m), C)\\<rfloor>)", "with wf"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>", "have \"distinct_fst ms\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. distinct_fst ms", "by (unfold class_def wf_prog_def wf_cdecl_def) (fastforce dest:map_of_SomeD)"], ["proof (state)\nthis:\n  distinct_fst ms\n\ngoal (2 subgoals):\n 1. \\<And>D fs ms.\n       class P Object = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> Object sees_methods Mm \\<and>\n          (\\<forall>(M, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((Ts, T, m), Object)\\<rfloor>)\n 2. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((Ts, T, m), C)\\<rfloor>)", "with Object"], ["proof (chain)\npicking this:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  distinct_fst ms", "show ?case"], ["proof (prove)\nusing this:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  distinct_fst ms\n\ngoal (1 subgoal):\n 1. \\<exists>Mm.\n       P \\<turnstile> Object sees_methods Mm \\<and>\n       (\\<forall>a\\<in>set ms.\n           case a of\n           (M, Ts, T, m) \\<Rightarrow>\n             Mm M = \\<lfloor>((Ts, T, m), Object)\\<rfloor>)", "by(fastforce intro!: sees_methods_Object map_of_SomeI)"], ["proof (state)\nthis:\n  \\<exists>Mm.\n     P \\<turnstile> Object sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ms.\n         case a of\n         (M, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((Ts, T, m), Object)\\<rfloor>)\n\ngoal (1 subgoal):\n 1. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((Ts, T, m), C)\\<rfloor>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((Ts, T, m), C)\\<rfloor>)", "case Subcls"], ["proof (state)\nthis:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  class P D_ = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<Longrightarrow>\n  \\<exists>Mm.\n     P \\<turnstile> D_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ?ms.\n         case a of\n         (M, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((Ts, T, m), D_)\\<rfloor>)\n  class P C_ = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((Ts, T, m), C)\\<rfloor>)", "with wf"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  class P D_ = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<Longrightarrow>\n  \\<exists>Mm.\n     P \\<turnstile> D_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ?ms.\n         case a of\n         (M, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((Ts, T, m), D_)\\<rfloor>)\n  class P C_ = \\<lfloor>(D, fs, ms)\\<rfloor>", "have \"distinct_fst ms\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  class P D_ = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<Longrightarrow>\n  \\<exists>Mm.\n     P \\<turnstile> D_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ?ms.\n         case a of\n         (M, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((Ts, T, m), D_)\\<rfloor>)\n  class P C_ = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. distinct_fst ms", "by (unfold class_def wf_prog_def wf_cdecl_def) (fastforce dest:map_of_SomeD)"], ["proof (state)\nthis:\n  distinct_fst ms\n\ngoal (1 subgoal):\n 1. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((Ts, T, m), C)\\<rfloor>)", "with Subcls"], ["proof (chain)\npicking this:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  class P D_ = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<Longrightarrow>\n  \\<exists>Mm.\n     P \\<turnstile> D_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ?ms.\n         case a of\n         (M, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((Ts, T, m), D_)\\<rfloor>)\n  class P C_ = \\<lfloor>(D, fs, ms)\\<rfloor>\n  distinct_fst ms", "show ?case"], ["proof (prove)\nusing this:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  class P D_ = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<Longrightarrow>\n  \\<exists>Mm.\n     P \\<turnstile> D_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ?ms.\n         case a of\n         (M, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((Ts, T, m), D_)\\<rfloor>)\n  class P C_ = \\<lfloor>(D, fs, ms)\\<rfloor>\n  distinct_fst ms\n\ngoal (1 subgoal):\n 1. \\<exists>Mm.\n       P \\<turnstile> C_ sees_methods Mm \\<and>\n       (\\<forall>a\\<in>set ms.\n           case a of\n           (M, Ts, T, m) \\<Rightarrow>\n             Mm M = \\<lfloor>((Ts, T, m), C_)\\<rfloor>)", "by(fastforce elim:sees_methods_rec dest:subcls1D map_of_SomeI\n                simp:is_class_def)"], ["proof (state)\nthis:\n  \\<exists>Mm.\n     P \\<turnstile> C_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ms.\n         case a of\n         (M, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((Ts, T, m), C_)\\<rfloor>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma mdecl_visible:\nassumes wf: \"wf_prog wf_md P\" and C: \"(C,S,fs,ms) \\<in> set P\" and  m: \"(M,Ts,T,m) \\<in> set ms\"\nshows \"P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in C", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in C", "from wf C"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P", "have \"class\": \"class P C = Some (S,fs,ms)\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P\n\ngoal (1 subgoal):\n 1. class P C = \\<lfloor>(S, fs, ms)\\<rfloor>", "by (auto simp add: wf_prog_def class_def is_class_def intro: map_of_SomeI)"], ["proof (state)\nthis:\n  class P C = \\<lfloor>(S, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in C", "from \"class\""], ["proof (chain)\npicking this:\n  class P C = \\<lfloor>(S, fs, ms)\\<rfloor>", "have \"is_class P C\""], ["proof (prove)\nusing this:\n  class P C = \\<lfloor>(S, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. is_class P C", "by(auto simp:is_class_def)"], ["proof (state)\nthis:\n  is_class P C\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in C", "with assms \"class\""], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P\n  (M, Ts, T, m) \\<in> set ms\n  class P C = \\<lfloor>(S, fs, ms)\\<rfloor>\n  is_class P C", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P\n  (M, Ts, T, m) \\<in> set ms\n  class P C = \\<lfloor>(S, fs, ms)\\<rfloor>\n  is_class P C\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in C", "by(bestsimp simp:Method_def dest:mdecls_visible)"], ["proof (state)\nthis:\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in C\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma Call_lemma:\n  \"\\<lbrakk> P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in D; P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P \\<rbrakk>\n  \\<Longrightarrow> \\<exists>D' Ts' T' m'.\n       P \\<turnstile> C' sees M:Ts'\\<rightarrow>T' = m' in D' \\<and> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T \\<and> P \\<turnstile> C' \\<preceq>\\<^sup>* D'\n       \\<and> is_type P T' \\<and> (\\<forall>T\\<in>set Ts'. is_type P T) \\<and> wf_md P D' (M,Ts',T',m')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D;\n     P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>D' Ts' T' m'.\n                         P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                         P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                         P \\<turnstile> T' \\<le> T \\<and>\n                         P \\<turnstile> C' \\<preceq>\\<^sup>* D' \\<and>\n                         is_type P T' \\<and>\n                         (\\<forall>T\\<in>set Ts'. is_type P T) \\<and>\n                         wf_md P D' (M, Ts', T', m')", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D;\n     P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>D' Ts' T' m'.\n                         P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                         P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                         P \\<turnstile> T' \\<le> T \\<and>\n                         P \\<turnstile> C' \\<preceq>\\<^sup>* D' \\<and>\n                         is_type P T' \\<and>\n                         (\\<forall>T\\<in>set Ts'. is_type P T) \\<and>\n                         wf_md P D' (M, Ts', T', m')", "apply(frule (2) sees_method_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees M: Ts\\<rightarrow>T = m in D;\n     P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P;\n     \\<exists>D' Ts' T' m'.\n        P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n        P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n        P \\<turnstile> T' \\<le> T\\<rbrakk>\n    \\<Longrightarrow> \\<exists>D' Ts' T' m'.\n                         P \\<turnstile> C' sees M: Ts'\\<rightarrow>T' = m' in D' \\<and>\n                         P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                         P \\<turnstile> T' \\<le> T \\<and>\n                         P \\<turnstile> C' \\<preceq>\\<^sup>* D' \\<and>\n                         is_type P T' \\<and>\n                         (\\<forall>T\\<in>set Ts'. is_type P T) \\<and>\n                         wf_md P D' (M, Ts', T', m')", "apply(fastforce intro:sees_method_decl_above dest:sees_wf_mdecl\n               simp: wf_mdecl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma wf_prog_lift:\n  assumes wf: \"wf_prog (\\<lambda>P C bd. A P C bd) P\"\n  and rule:\n  \"\\<And>wf_md C M Ts C T m bd.\n   wf_prog wf_md P \\<Longrightarrow>\n   P \\<turnstile> C sees M:Ts\\<rightarrow>T = m in C \\<Longrightarrow>   \n   set Ts \\<subseteq>  types P \\<Longrightarrow>\n   bd = (M,Ts,T,m) \\<Longrightarrow>\n   A P C bd \\<Longrightarrow>\n   B P C bd\"\n  shows \"wf_prog (\\<lambda>P C bd. B P C bd) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog B P", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog B P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_prog B P", "from wf"], ["proof (chain)\npicking this:\n  wf_prog A P", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_prog A P\n\ngoal (1 subgoal):\n 1. wf_prog B P", "apply (unfold wf_prog_def wf_cdecl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_syscls P \\<and>\n    (\\<forall>c\\<in>set P.\n        case c of\n        (C, D, fs, ms) \\<Rightarrow>\n          (\\<forall>f\\<in>set fs. wf_fdecl P f) \\<and>\n          distinct_fst fs \\<and>\n          (\\<forall>m\\<in>set ms. wf_mdecl A P C m) \\<and>\n          distinct_fst ms \\<and>\n          (C \\<noteq> Object \\<longrightarrow>\n           is_class P D \\<and>\n           (D, C) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n           (\\<forall>(M, Ts, T, m)\\<in>set ms.\n               \\<forall>D' Ts' T' m'.\n                  P \\<turnstile> D sees M: Ts'\\<rightarrow>T' = m' in D' \\<longrightarrow>\n                  P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                  P \\<turnstile> T \\<le> T'))) \\<and>\n    distinct_fst P \\<Longrightarrow>\n    wf_syscls P \\<and>\n    (\\<forall>c\\<in>set P.\n        case c of\n        (C, D, fs, ms) \\<Rightarrow>\n          (\\<forall>f\\<in>set fs. wf_fdecl P f) \\<and>\n          distinct_fst fs \\<and>\n          (\\<forall>m\\<in>set ms. wf_mdecl B P C m) \\<and>\n          distinct_fst ms \\<and>\n          (C \\<noteq> Object \\<longrightarrow>\n           is_class P D \\<and>\n           (D, C) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n           (\\<forall>(M, Ts, T, m)\\<in>set ms.\n               \\<forall>D' Ts' T' m'.\n                  P \\<turnstile> D sees M: Ts'\\<rightarrow>T' = m' in D' \\<longrightarrow>\n                  P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                  P \\<turnstile> T \\<le> T'))) \\<and>\n    distinct_fst P", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab b.\n       \\<lbrakk>(a, aa, ab, b) \\<in> set P; wf_syscls P;\n        \\<forall>x\\<in>set P.\n           case x of\n           (C, D, fs, ms) \\<Rightarrow>\n             (\\<forall>x\\<in>set fs. wf_fdecl P x) \\<and>\n             distinct_fst fs \\<and>\n             (\\<forall>x\\<in>set ms. wf_mdecl A P C x) \\<and>\n             distinct_fst ms \\<and>\n             (C \\<noteq> Object \\<longrightarrow>\n              is_class P D \\<and>\n              (D, C) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n              (\\<forall>x\\<in>set ms.\n                  case x of\n                  (M, Ts, T, m) \\<Rightarrow>\n                    \\<forall>D' Ts' T'.\n                       (\\<exists>m'.\n                           P \\<turnstile> D sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                       P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                       P \\<turnstile> T \\<le> T'));\n        distinct_fst P\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>set ab. wf_fdecl P x) \\<and>\n                         distinct_fst ab \\<and>\n                         (\\<forall>x\\<in>set b. wf_mdecl B P a x) \\<and>\n                         distinct_fst b \\<and>\n                         (a \\<noteq> Object \\<longrightarrow>\n                          is_class P aa \\<and>\n                          (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n                          (\\<forall>x\\<in>set b.\n                              case x of\n                              (M, Ts, T, m) \\<Rightarrow>\n                                \\<forall>D' Ts' T'.\n                                   (\\<exists>m'.\n P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                                   P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                                   P \\<turnstile> T \\<le> T'))", "apply (drule bspec, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab b.\n       \\<lbrakk>(a, aa, ab, b) \\<in> set P; wf_syscls P; distinct_fst P;\n        case (a, aa, ab, b) of\n        (C, D, fs, ms) \\<Rightarrow>\n          (\\<forall>x\\<in>set fs. wf_fdecl P x) \\<and>\n          distinct_fst fs \\<and>\n          (\\<forall>x\\<in>set ms. wf_mdecl A P C x) \\<and>\n          distinct_fst ms \\<and>\n          (C \\<noteq> Object \\<longrightarrow>\n           is_class P D \\<and>\n           (D, C) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n           (\\<forall>x\\<in>set ms.\n               case x of\n               (M, Ts, T, m) \\<Rightarrow>\n                 \\<forall>D' Ts' T'.\n                    (\\<exists>m'.\n                        P \\<turnstile> D sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                    P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                    P \\<turnstile> T \\<le> T'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>set ab. wf_fdecl P x) \\<and>\n                         distinct_fst ab \\<and>\n                         (\\<forall>x\\<in>set b. wf_mdecl B P a x) \\<and>\n                         distinct_fst b \\<and>\n                         (a \\<noteq> Object \\<longrightarrow>\n                          is_class P aa \\<and>\n                          (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n                          (\\<forall>x\\<in>set b.\n                              case x of\n                              (M, Ts, T, m) \\<Rightarrow>\n                                \\<forall>D' Ts' T'.\n                                   (\\<exists>m'.\n P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                                   P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                                   P \\<turnstile> T \\<le> T'))", "apply (unfold wf_mdecl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab b.\n       \\<lbrakk>(a, aa, ab, b) \\<in> set P; wf_syscls P; distinct_fst P;\n        case (a, aa, ab, b) of\n        (C, D, fs, ms) \\<Rightarrow>\n          (\\<forall>x\\<in>set fs. wf_fdecl P x) \\<and>\n          distinct_fst fs \\<and>\n          (\\<forall>x\\<in>set ms.\n              case x of\n              (M, Ts, T, mb) \\<Rightarrow>\n                (\\<forall>T\\<in>set Ts. is_type P T) \\<and>\n                is_type P T \\<and> A P C (M, Ts, T, mb)) \\<and>\n          distinct_fst ms \\<and>\n          (C \\<noteq> Object \\<longrightarrow>\n           is_class P D \\<and>\n           (D, C) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n           (\\<forall>x\\<in>set ms.\n               case x of\n               (M, Ts, T, m) \\<Rightarrow>\n                 \\<forall>D' Ts' T'.\n                    (\\<exists>m'.\n                        P \\<turnstile> D sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                    P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                    P \\<turnstile> T \\<le> T'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>set ab. wf_fdecl P x) \\<and>\n                         distinct_fst ab \\<and>\n                         (\\<forall>x\\<in>set b.\n                             case x of\n                             (M, Ts, T, mb) \\<Rightarrow>\n                               (\\<forall>T\\<in>set Ts. is_type P T) \\<and>\n                               is_type P T \\<and>\n                               B P a (M, Ts, T, mb)) \\<and>\n                         distinct_fst b \\<and>\n                         (a \\<noteq> Object \\<longrightarrow>\n                          is_class P aa \\<and>\n                          (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n                          (\\<forall>x\\<in>set b.\n                              case x of\n                              (M, Ts, T, m) \\<Rightarrow>\n                                \\<forall>D' Ts' T'.\n                                   (\\<exists>m'.\n P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                                   P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                                   P \\<turnstile> T \\<le> T'))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab b ac ad ae ba.\n       \\<lbrakk>(a, aa, ab, b) \\<in> set P; wf_syscls P; distinct_fst P;\n        (ac, ad, ae, ba) \\<in> set b; \\<forall>x\\<in>set ab. wf_fdecl P x;\n        distinct_fst ab;\n        \\<forall>x\\<in>set b.\n           case x of\n           (M, Ts, ab) \\<Rightarrow>\n             (\\<forall>x\\<in>set Ts. is_type P x) \\<and>\n             (case ab of\n              (T, mb) \\<Rightarrow>\n                is_type P T \\<and> A P a (M, Ts, T, mb));\n        distinct_fst b;\n        a \\<noteq> Object \\<longrightarrow>\n        is_class P aa \\<and>\n        (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n        (\\<forall>x\\<in>set b.\n            case x of\n            (M, Ts, T, m) \\<Rightarrow>\n              \\<forall>D' Ts' T'.\n                 (\\<exists>m'.\n                     P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                 P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                 P \\<turnstile> T \\<le> T')\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>set ad. is_type P x) \\<and>\n                         is_type P ae \\<and> B P a (ac, ad, ae, ba)", "apply (drule bspec, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab b ac ad ae ba.\n       \\<lbrakk>(a, aa, ab, b) \\<in> set P; wf_syscls P; distinct_fst P;\n        (ac, ad, ae, ba) \\<in> set b; \\<forall>x\\<in>set ab. wf_fdecl P x;\n        distinct_fst ab; distinct_fst b;\n        a \\<noteq> Object \\<longrightarrow>\n        is_class P aa \\<and>\n        (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n        (\\<forall>x\\<in>set b.\n            case x of\n            (M, Ts, T, m) \\<Rightarrow>\n              \\<forall>D' Ts' T'.\n                 (\\<exists>m'.\n                     P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                 P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                 P \\<turnstile> T \\<le> T');\n        case (ac, ad, ae, ba) of\n        (M, Ts, ab) \\<Rightarrow>\n          (\\<forall>x\\<in>set Ts. is_type P x) \\<and>\n          (case ab of\n           (T, mb) \\<Rightarrow>\n             is_type P T \\<and> A P a (M, Ts, T, mb))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>set ad. is_type P x) \\<and>\n                         is_type P ae \\<and> B P a (ac, ad, ae, ba)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab b ac ad ae ba.\n       \\<lbrakk>(a, aa, ab, b) \\<in> set P; wf_syscls P; distinct_fst P;\n        (ac, ad, ae, ba) \\<in> set b; \\<forall>x\\<in>set ab. wf_fdecl P x;\n        distinct_fst ab; distinct_fst b;\n        a \\<noteq> Object \\<longrightarrow>\n        is_class P aa \\<and>\n        (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n        (\\<forall>x\\<in>set b.\n            case x of\n            (M, Ts, T, m) \\<Rightarrow>\n              \\<forall>D' Ts' T'.\n                 (\\<exists>m'.\n                     P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                 P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                 P \\<turnstile> T \\<le> T');\n        \\<forall>x\\<in>set ad. is_type P x; is_type P ae;\n        A P a (ac, ad, ae, ba)\\<rbrakk>\n       \\<Longrightarrow> B P a (ac, ad, ae, ba)", "apply (frule mdecl_visible [OF wf], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab b ac ad ae ba.\n       \\<lbrakk>(a, aa, ab, b) \\<in> set P; wf_syscls P; distinct_fst P;\n        (ac, ad, ae, ba) \\<in> set b; \\<forall>x\\<in>set ab. wf_fdecl P x;\n        distinct_fst ab; distinct_fst b;\n        a \\<noteq> Object \\<longrightarrow>\n        is_class P aa \\<and>\n        (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n        (\\<forall>x\\<in>set b.\n            case x of\n            (M, Ts, T, m) \\<Rightarrow>\n              \\<forall>D' Ts' T'.\n                 (\\<exists>m'.\n                     P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                 P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                 P \\<turnstile> T \\<le> T');\n        \\<forall>x\\<in>set ad. is_type P x; is_type P ae;\n        A P a (ac, ad, ae, ba);\n        P \\<turnstile> a sees ac: ad\\<rightarrow>ae = ba in a\\<rbrakk>\n       \\<Longrightarrow> B P a (ac, ad, ae, ba)", "apply (frule is_type_pTs [OF wf], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab b ac ad ae ba.\n       \\<lbrakk>(a, aa, ab, b) \\<in> set P; wf_syscls P; distinct_fst P;\n        (ac, ad, ae, ba) \\<in> set b; \\<forall>x\\<in>set ab. wf_fdecl P x;\n        distinct_fst ab; distinct_fst b;\n        a \\<noteq> Object \\<longrightarrow>\n        is_class P aa \\<and>\n        (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n        (\\<forall>x\\<in>set b.\n            case x of\n            (M, Ts, T, m) \\<Rightarrow>\n              \\<forall>D' Ts' T'.\n                 (\\<exists>m'.\n                     P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                 P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                 P \\<turnstile> T \\<le> T');\n        \\<forall>x\\<in>set ad. is_type P x; is_type P ae;\n        A P a (ac, ad, ae, ba);\n        P \\<turnstile> a sees ac: ad\\<rightarrow>ae = ba in a;\n        set ad \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> B P a (ac, ad, ae, ba)", "apply (drule rule [OF wf], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a aa ab b ac ad ae ba.\n       \\<lbrakk>(a, aa, ab, b) \\<in> set P; wf_syscls P; distinct_fst P;\n        (ac, ad, ae, ba) \\<in> set b; \\<forall>x\\<in>set ab. wf_fdecl P x;\n        distinct_fst ab; distinct_fst b;\n        a \\<noteq> Object \\<longrightarrow>\n        is_class P aa \\<and>\n        (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n        (\\<forall>x\\<in>set b.\n            case x of\n            (M, Ts, T, m) \\<Rightarrow>\n              \\<forall>D' Ts' T'.\n                 (\\<exists>m'.\n                     P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                 P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                 P \\<turnstile> T \\<le> T');\n        \\<forall>x\\<in>set ad. is_type P x; is_type P ae;\n        A P a (ac, ad, ae, ba); set ad \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> ?bd37 a aa ab b ac ad ae ba = (ac, ad, ae, ba)\n 2. \\<And>a aa ab b ac ad ae ba.\n       \\<lbrakk>(a, aa, ab, b) \\<in> set P; wf_syscls P; distinct_fst P;\n        (ac, ad, ae, ba) \\<in> set b; \\<forall>x\\<in>set ab. wf_fdecl P x;\n        distinct_fst ab; distinct_fst b;\n        a \\<noteq> Object \\<longrightarrow>\n        is_class P aa \\<and>\n        (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n        (\\<forall>x\\<in>set b.\n            case x of\n            (M, Ts, T, m) \\<Rightarrow>\n              \\<forall>D' Ts' T'.\n                 (\\<exists>m'.\n                     P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                 P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                 P \\<turnstile> T \\<le> T');\n        \\<forall>x\\<in>set ad. is_type P x; is_type P ae;\n        A P a (ac, ad, ae, ba); set ad \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> A P a (?bd37 a aa ab b ac ad ae ba)\n 3. \\<And>a aa ab b ac ad ae ba.\n       \\<lbrakk>(a, aa, ab, b) \\<in> set P; wf_syscls P; distinct_fst P;\n        (ac, ad, ae, ba) \\<in> set b; \\<forall>x\\<in>set ab. wf_fdecl P x;\n        distinct_fst ab; distinct_fst b;\n        a \\<noteq> Object \\<longrightarrow>\n        is_class P aa \\<and>\n        (aa, a) \\<notin> (subcls1 P)\\<^sup>* \\<and>\n        (\\<forall>x\\<in>set b.\n            case x of\n            (M, Ts, T, m) \\<Rightarrow>\n              \\<forall>D' Ts' T'.\n                 (\\<exists>m'.\n                     P \\<turnstile> aa sees M: Ts'\\<rightarrow>T' = m' in D') \\<longrightarrow>\n                 P \\<turnstile> Ts' [\\<le>] Ts \\<and>\n                 P \\<turnstile> T \\<le> T');\n        \\<forall>x\\<in>set ad. is_type P x; is_type P ae;\n        A P a (ac, ad, ae, ba); set ad \\<subseteq> types P;\n        B P a (?bd37 a aa ab b ac ad ae ba)\\<rbrakk>\n       \\<Longrightarrow> B P a (ac, ad, ae, ba)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wf_prog B P\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "subsection\\<open>Well-formedness and field lookup\\<close>"], ["", "lemma wf_Fields_Ex:\n  \"\\<lbrakk> wf_prog wf_md P; is_class P C \\<rbrakk> \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> C has_fields FDTs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; is_class P C\\<rbrakk>\n    \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; is_class P C\\<rbrakk>\n    \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "apply(frule class_Object)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; is_class P C;\n     \\<exists>C fs ms.\n        class P Object = \\<lfloor>(C, fs, ms)\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "apply(erule (1) subcls1_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_class P C;\n     \\<exists>C fs ms.\n        class P Object = \\<lfloor>(C, fs, ms)\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> Object has_fields FDTs\n 2. \\<And>Ca D.\n       \\<lbrakk>is_class P C;\n        \\<exists>C fs ms. class P Object = \\<lfloor>(C, fs, ms)\\<rfloor>;\n        Ca \\<noteq> Object; P \\<turnstile> Ca \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<exists>FDTs. P \\<turnstile> D has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> Ca has_fields FDTs", "apply(blast intro:has_fields_Object)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ca D.\n       \\<lbrakk>is_class P C;\n        \\<exists>C fs ms. class P Object = \\<lfloor>(C, fs, ms)\\<rfloor>;\n        Ca \\<noteq> Object; P \\<turnstile> Ca \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<exists>FDTs. P \\<turnstile> D has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> Ca has_fields FDTs", "apply(blast intro:has_fields_rec dest:subcls1D)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma has_fields_types:\n  \"\\<lbrakk> P \\<turnstile> C has_fields FDTs; (FD,T) \\<in> set FDTs; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_type P T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C has_fields FDTs; (FD, T) \\<in> set FDTs;\n     wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_type P T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C has_fields FDTs; (FD, T) \\<in> set FDTs;\n     wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_type P T", "apply(induct rule:Fields.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C D fs ms FDTs FDTs'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D has_fields FDTs;\n        \\<lbrakk>(FD, T) \\<in> set FDTs; wf_prog wf_md P\\<rbrakk>\n        \\<Longrightarrow> is_type P T;\n        FDTs' = map (\\<lambda>(F, T). ((F, C), T)) fs @ FDTs;\n        (FD, T) \\<in> set FDTs'; wf_prog wf_md P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>D fs ms FDTs.\n       \\<lbrakk>class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        FDTs = map (\\<lambda>(F, T). ((F, Object), T)) fs;\n        (FD, T) \\<in> set FDTs; wf_prog wf_md P\\<rbrakk>\n       \\<Longrightarrow> is_type P T", "apply(fastforce dest!: class_wf simp: wf_cdecl_def wf_fdecl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D fs ms FDTs.\n       \\<lbrakk>class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        FDTs = map (\\<lambda>(F, T). ((F, Object), T)) fs;\n        (FD, T) \\<in> set FDTs; wf_prog wf_md P\\<rbrakk>\n       \\<Longrightarrow> is_type P T", "apply(fastforce dest!: class_wf simp: wf_cdecl_def wf_fdecl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma sees_field_is_type:\n  \"\\<lbrakk> P \\<turnstile> C sees F:T in D; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_type P T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees F:T in D; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_type P T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees F:T in D; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_type P T", "by(fastforce simp: sees_field_def\n            elim: has_fields_types map_of_SomeD[OF map_of_remap_SomeD])"], ["", "(*>*)"], ["", "lemma wf_syscls:\n  \"set SystemClasses \\<subseteq> set P \\<Longrightarrow> wf_syscls P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set SystemClasses \\<subseteq> set P \\<Longrightarrow> wf_syscls P", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set SystemClasses \\<subseteq> set P \\<Longrightarrow> wf_syscls P", "apply (simp add: image_def SystemClasses_def wf_syscls_def sys_xcpts_def\n                 ObjectC_def NullPointerC_def ClassCastC_def OutOfMemoryC_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Object, undefined, [], []) \\<in> set P \\<and>\n    (NullPointer, Object, [], []) \\<in> set P \\<and>\n    (ClassCast, Object, [], []) \\<in> set P \\<and>\n    (OutOfMemory, Object, [], []) \\<in> set P \\<Longrightarrow>\n    (\\<exists>x\\<in>set P. NullPointer = fst x) \\<and>\n    (\\<exists>x\\<in>set P. ClassCast = fst x) \\<and>\n    (\\<exists>x\\<in>set P. OutOfMemory = fst x) \\<and>\n    (\\<exists>x\\<in>set P. Object = fst x)", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "end"]]}