{"file_name": "/home/qj213/afp-2021-10-22/thys/Jinja/JVM/JVMExecInstr.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jinja", "problem_names": ["lemma exec_instr_Store:\n  \"exec_instr (Store n) P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs = \n  (None, h, (stk, loc[n:=v], C\\<^sub>0, M\\<^sub>0, pc+1)#frs)\"", "lemma exec_instr_Getfield:\n \"exec_instr (Getfield F C) P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs = \n  (let xp'    = if v=Null then \\<lfloor>addr_of_sys_xcpt NullPointer\\<rfloor> else None;\n       (D,fs) = the(h(the_Addr v))\n   in (xp', h, (the(fs(F,C))#stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs))\"", "lemma exec_instr_Putfield:\n \"exec_instr (Putfield F C) P h (v#r#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs = \n  (let xp'  = if r=Null then \\<lfloor>addr_of_sys_xcpt NullPointer\\<rfloor> else None;\n       a    = the_Addr r;\n       (D,fs) = the (h a);\n       h'  = h(a \\<mapsto> (D, fs((F,C) \\<mapsto> v)))\n   in (xp', h', (stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs))\"", "lemma exec_instr_Checkcast:\n \"exec_instr (Checkcast C) P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n  (let xp' = if \\<not>cast_ok P C h v then \\<lfloor>addr_of_sys_xcpt ClassCast\\<rfloor> else None\n   in (xp', h, (v#stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs))\"", "lemma exec_instr_Return:\n \"exec_instr Return P h (v#stk\\<^sub>0) loc\\<^sub>0 C\\<^sub>0 M\\<^sub>0 pc frs =\n  (if frs=[] then (None, h, []) else \n   let (stk,loc,C,m,pc) = hd frs;\n       n = length (fst (snd (method P C\\<^sub>0 M\\<^sub>0)))\n   in (None, h, (v#(drop (n+1) stk),loc,C,m,pc+1)#tl frs))\"", "lemma exec_instr_IPop:\n \"exec_instr Pop P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs = \n      (None, h, (stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs)\"", "lemma exec_instr_IAdd:\n \"exec_instr IAdd P h (Intg i\\<^sub>2 # Intg i\\<^sub>1 # stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n      (None, h, (Intg (i\\<^sub>1+i\\<^sub>2)#stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs)\"", "lemma exec_instr_IfFalse:\n \"exec_instr (IfFalse i) P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n  (let pc' = if v = Bool False then nat(int pc+i) else pc+1\n   in (None, h, (stk, loc, C\\<^sub>0, M\\<^sub>0, pc')#frs))\"", "lemma exec_instr_CmpEq:\n \"exec_instr CmpEq P h (v\\<^sub>2#v\\<^sub>1#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n  (None, h, (Bool (v\\<^sub>1=v\\<^sub>2) # stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs)\"", "lemma exec_instr_Throw:\n \"exec_instr Throw P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n  (let xp' = if v = Null then \\<lfloor>addr_of_sys_xcpt NullPointer\\<rfloor> else \\<lfloor>the_Addr v\\<rfloor>\n   in (xp', h, (v#stk, loc, C\\<^sub>0, M\\<^sub>0, pc)#frs))\""], "translations": [["", "lemma exec_instr_Store:\n  \"exec_instr (Store n) P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs = \n  (None, h, (stk, loc[n:=v], C\\<^sub>0, M\\<^sub>0, pc+1)#frs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_instr (Store n) P h (v # stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n    (None, h, (stk, loc[n := v], C\\<^sub>0, M\\<^sub>0, pc + 1) # frs)", "by simp"], ["", "lemma exec_instr_Getfield:\n \"exec_instr (Getfield F C) P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs = \n  (let xp'    = if v=Null then \\<lfloor>addr_of_sys_xcpt NullPointer\\<rfloor> else None;\n       (D,fs) = the(h(the_Addr v))\n   in (xp', h, (the(fs(F,C))#stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_instr (Getfield F C) P h (v # stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n    (let xp' =\n           if v = Null then \\<lfloor>addr_of_sys_xcpt NullPointer\\<rfloor>\n           else None;\n         (D, fs) = the (h (the_Addr v))\n     in (xp', h,\n         (the (fs (F, C)) # stk, loc, C\\<^sub>0, M\\<^sub>0, pc + 1) # frs))", "by simp"], ["", "lemma exec_instr_Putfield:\n \"exec_instr (Putfield F C) P h (v#r#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs = \n  (let xp'  = if r=Null then \\<lfloor>addr_of_sys_xcpt NullPointer\\<rfloor> else None;\n       a    = the_Addr r;\n       (D,fs) = the (h a);\n       h'  = h(a \\<mapsto> (D, fs((F,C) \\<mapsto> v)))\n   in (xp', h', (stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_instr (Putfield F C) P h (v # r # stk) loc C\\<^sub>0 M\\<^sub>0 pc\n     frs =\n    (let xp' =\n           if r = Null then \\<lfloor>addr_of_sys_xcpt NullPointer\\<rfloor>\n           else None;\n         a = the_Addr r; (D, fs) = the (h a);\n         h' = h(a \\<mapsto> (D, fs((F, C) \\<mapsto> v)))\n     in (xp', h', (stk, loc, C\\<^sub>0, M\\<^sub>0, pc + 1) # frs))", "by simp"], ["", "lemma exec_instr_Checkcast:\n \"exec_instr (Checkcast C) P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n  (let xp' = if \\<not>cast_ok P C h v then \\<lfloor>addr_of_sys_xcpt ClassCast\\<rfloor> else None\n   in (xp', h, (v#stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_instr (Checkcast C) P h (v # stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n    (let xp' =\n           if \\<not> cast_ok P C h v\n           then \\<lfloor>addr_of_sys_xcpt ClassCast\\<rfloor> else None\n     in (xp', h, (v # stk, loc, C\\<^sub>0, M\\<^sub>0, pc + 1) # frs))", "by simp"], ["", "lemma exec_instr_Return:\n \"exec_instr Return P h (v#stk\\<^sub>0) loc\\<^sub>0 C\\<^sub>0 M\\<^sub>0 pc frs =\n  (if frs=[] then (None, h, []) else \n   let (stk,loc,C,m,pc) = hd frs;\n       n = length (fst (snd (method P C\\<^sub>0 M\\<^sub>0)))\n   in (None, h, (v#(drop (n+1) stk),loc,C,m,pc+1)#tl frs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_instr Return P h (v # stk\\<^sub>0) loc\\<^sub>0 C\\<^sub>0 M\\<^sub>0\n     pc frs =\n    (if frs = [] then (None, h, [])\n     else let (stk, loc, C, m, pc) = hd frs;\n              n = length (fst (snd (method P C\\<^sub>0 M\\<^sub>0)))\n          in (None, h, (v # drop (n + 1) stk, loc, C, m, pc + 1) # tl frs))", "by simp"], ["", "lemma exec_instr_IPop:\n \"exec_instr Pop P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs = \n      (None, h, (stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_instr Pop P h (v # stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n    (None, h, (stk, loc, C\\<^sub>0, M\\<^sub>0, pc + 1) # frs)", "by simp"], ["", "lemma exec_instr_IAdd:\n \"exec_instr IAdd P h (Intg i\\<^sub>2 # Intg i\\<^sub>1 # stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n      (None, h, (Intg (i\\<^sub>1+i\\<^sub>2)#stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_instr IAdd P h (Intg i\\<^sub>2 # Intg i\\<^sub>1 # stk) loc\n     C\\<^sub>0 M\\<^sub>0 pc frs =\n    (None, h,\n     (Intg (i\\<^sub>1 + i\\<^sub>2) # stk, loc, C\\<^sub>0, M\\<^sub>0,\n      pc + 1) #\n     frs)", "by simp"], ["", "lemma exec_instr_IfFalse:\n \"exec_instr (IfFalse i) P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n  (let pc' = if v = Bool False then nat(int pc+i) else pc+1\n   in (None, h, (stk, loc, C\\<^sub>0, M\\<^sub>0, pc')#frs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_instr (IfFalse i) P h (v # stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n    (let pc' = if v = Bool False then nat (int pc + i) else pc + 1\n     in (None, h, (stk, loc, C\\<^sub>0, M\\<^sub>0, pc') # frs))", "by simp"], ["", "lemma exec_instr_CmpEq:\n \"exec_instr CmpEq P h (v\\<^sub>2#v\\<^sub>1#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n  (None, h, (Bool (v\\<^sub>1=v\\<^sub>2) # stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_instr CmpEq P h (v\\<^sub>2 # v\\<^sub>1 # stk) loc C\\<^sub>0\n     M\\<^sub>0 pc frs =\n    (None, h,\n     (Bool (v\\<^sub>1 = v\\<^sub>2) # stk, loc, C\\<^sub>0, M\\<^sub>0,\n      pc + 1) #\n     frs)", "by simp"], ["", "lemma exec_instr_Throw:\n \"exec_instr Throw P h (v#stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n  (let xp' = if v = Null then \\<lfloor>addr_of_sys_xcpt NullPointer\\<rfloor> else \\<lfloor>the_Addr v\\<rfloor>\n   in (xp', h, (v#stk, loc, C\\<^sub>0, M\\<^sub>0, pc)#frs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_instr Throw P h (v # stk) loc C\\<^sub>0 M\\<^sub>0 pc frs =\n    (let xp' =\n           if v = Null then \\<lfloor>addr_of_sys_xcpt NullPointer\\<rfloor>\n           else \\<lfloor>the_Addr v\\<rfloor>\n     in (xp', h, (v # stk, loc, C\\<^sub>0, M\\<^sub>0, pc) # frs))", "by simp"], ["", "end"]]}