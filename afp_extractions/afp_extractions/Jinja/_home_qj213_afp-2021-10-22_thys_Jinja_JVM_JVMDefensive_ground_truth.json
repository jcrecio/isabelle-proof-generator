{"file_name": "/home/qj213/afp-2021-10-22/thys/Jinja/JVM/JVMDefensive.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jinja", "problem_names": ["lemma exec_1_d_eq:\n  \"exec_1_d P = {(s,t). \\<exists>\\<sigma>. s = Normal \\<sigma> \\<and> t = TypeError \\<and> exec_d P \\<sigma> = TypeError} \\<union> \n                {(s,t). \\<exists>\\<sigma> \\<sigma>'. s = Normal \\<sigma> \\<and> t = Normal \\<sigma>' \\<and> exec_d P \\<sigma> = Normal (Some \\<sigma>')}\"", "lemma if_neq [dest!]:\n  \"(if P then A else B) \\<noteq> B \\<Longrightarrow> P\"", "lemma exec_d_no_errorI [intro]:\n  \"check P \\<sigma> \\<Longrightarrow> exec_d P \\<sigma> \\<noteq> TypeError\"", "theorem no_type_error_commutes:\n  \"exec_d P \\<sigma> \\<noteq> TypeError \\<Longrightarrow> exec_d P \\<sigma> = Normal (exec (P, \\<sigma>))\"", "lemma defensive_imp_aggressive:\n  \"P \\<turnstile> (Normal \\<sigma>) -jvmd\\<rightarrow> (Normal \\<sigma>') \\<Longrightarrow> P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\""], "translations": [["", "lemma exec_1_d_eq:\n  \"exec_1_d P = {(s,t). \\<exists>\\<sigma>. s = Normal \\<sigma> \\<and> t = TypeError \\<and> exec_d P \\<sigma> = TypeError} \\<union> \n                {(s,t). \\<exists>\\<sigma> \\<sigma>'. s = Normal \\<sigma> \\<and> t = Normal \\<sigma>' \\<and> exec_d P \\<sigma> = Normal (Some \\<sigma>')}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_1_d P =\n    {(s, t).\n     \\<exists>\\<sigma>.\n        s = Normal \\<sigma> \\<and>\n        t = TypeError \\<and> exec_d P \\<sigma> = TypeError} \\<union>\n    {(s, t).\n     \\<exists>\\<sigma> \\<sigma>'.\n        s = Normal \\<sigma> \\<and>\n        t = Normal \\<sigma>' \\<and>\n        exec_d P \\<sigma> = Normal \\<lfloor>\\<sigma>'\\<rfloor>}", "by (auto elim!: exec_1_d.cases intro!: exec_1_d.intros)"], ["", "declare split_paired_All [simp del]"], ["", "declare split_paired_Ex [simp del]"], ["", "lemma if_neq [dest!]:\n  \"(if P then A else B) \\<noteq> B \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if P then A else B) \\<noteq> B \\<Longrightarrow> P", "by (cases P, auto)"], ["", "lemma exec_d_no_errorI [intro]:\n  \"check P \\<sigma> \\<Longrightarrow> exec_d P \\<sigma> \\<noteq> TypeError\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check P \\<sigma> \\<Longrightarrow> exec_d P \\<sigma> \\<noteq> TypeError", "by (unfold exec_d_def) simp"], ["", "theorem no_type_error_commutes:\n  \"exec_d P \\<sigma> \\<noteq> TypeError \\<Longrightarrow> exec_d P \\<sigma> = Normal (exec (P, \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError \\<Longrightarrow>\n    exec_d P \\<sigma> = Normal (exec (P, \\<sigma>))", "by (unfold exec_d_def, auto)"], ["", "lemma defensive_imp_aggressive:\n  \"P \\<turnstile> (Normal \\<sigma>) -jvmd\\<rightarrow> (Normal \\<sigma>') \\<Longrightarrow> P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> Normal\n                    \\<sigma> -jvmd\\<rightarrow> Normal\n           \\<sigma>' \\<Longrightarrow>\n    P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> Normal\n                    \\<sigma> -jvmd\\<rightarrow> Normal\n           \\<sigma>' \\<Longrightarrow>\n    P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<turnstile> Normal\n                    \\<sigma> -jvmd\\<rightarrow> Normal\n           \\<sigma>' \\<Longrightarrow>\n    P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "have \"\\<And>x y. P \\<turnstile> x -jvmd\\<rightarrow> y \\<Longrightarrow> \\<forall>\\<sigma> \\<sigma>'. x = Normal \\<sigma> \\<longrightarrow> y = Normal \\<sigma>' \\<longrightarrow>  P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       P \\<turnstile> x -jvmd\\<rightarrow> y \\<Longrightarrow>\n       \\<forall>\\<sigma> \\<sigma>'.\n          x = Normal \\<sigma> \\<longrightarrow>\n          y = Normal \\<sigma>' \\<longrightarrow>\n          P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "apply (unfold exec_all_d_def1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> (exec_1_d P)\\<^sup>* \\<Longrightarrow>\n       \\<forall>\\<sigma> \\<sigma>'.\n          x = Normal \\<sigma> \\<longrightarrow>\n          y = Normal \\<sigma>' \\<longrightarrow>\n          P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "apply (erule rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<forall>\\<sigma> \\<sigma>'.\n          x = Normal \\<sigma> \\<longrightarrow>\n          x = Normal \\<sigma>' \\<longrightarrow>\n          P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\n 2. \\<And>x y ya z.\n       \\<lbrakk>(x, ya) \\<in> (exec_1_d P)\\<^sup>*;\n        P \\<turnstile> ya -jvmd\\<rightarrow>\\<^sub>1 z;\n        \\<forall>\\<sigma> \\<sigma>'.\n           x = Normal \\<sigma> \\<longrightarrow>\n           ya = Normal \\<sigma>' \\<longrightarrow>\n           P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<sigma> \\<sigma>'.\n                            x = Normal \\<sigma> \\<longrightarrow>\n                            z = Normal \\<sigma>' \\<longrightarrow>\n                            P \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n                            \\<sigma>'", "apply (simp add: exec_all_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y ya z.\n       \\<lbrakk>(x, ya) \\<in> (exec_1_d P)\\<^sup>*;\n        P \\<turnstile> ya -jvmd\\<rightarrow>\\<^sub>1 z;\n        \\<forall>\\<sigma> \\<sigma>'.\n           x = Normal \\<sigma> \\<longrightarrow>\n           ya = Normal \\<sigma>' \\<longrightarrow>\n           P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<sigma> \\<sigma>'.\n                            x = Normal \\<sigma> \\<longrightarrow>\n                            z = Normal \\<sigma>' \\<longrightarrow>\n                            P \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n                            \\<sigma>'", "apply (fold exec_all_d_def1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y ya z.\n       \\<lbrakk>P \\<turnstile> x -jvmd\\<rightarrow> ya;\n        P \\<turnstile> ya -jvmd\\<rightarrow>\\<^sub>1 z;\n        \\<forall>\\<sigma> \\<sigma>'.\n           x = Normal \\<sigma> \\<longrightarrow>\n           ya = Normal \\<sigma>' \\<longrightarrow>\n           P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<sigma> \\<sigma>'.\n                            x = Normal \\<sigma> \\<longrightarrow>\n                            z = Normal \\<sigma>' \\<longrightarrow>\n                            P \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n                            \\<sigma>'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x ya z.\n       \\<lbrakk>P \\<turnstile> x -jvmd\\<rightarrow> ya;\n        P \\<turnstile> ya -jvmd\\<rightarrow>\\<^sub>1 z;\n        \\<forall>\\<sigma>.\n           x = Normal \\<sigma> \\<longrightarrow>\n           (\\<forall>\\<sigma>'.\n               ya = Normal \\<sigma>' \\<longrightarrow>\n               P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<sigma>.\n                            x = Normal \\<sigma> \\<longrightarrow>\n                            (\\<forall>\\<sigma>'.\n                                z = Normal \\<sigma>' \\<longrightarrow>\n                                P \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n                                \\<sigma>')", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x ya z \\<sigma> \\<sigma>'.\n       \\<lbrakk>P \\<turnstile> x -jvmd\\<rightarrow> ya;\n        P \\<turnstile> ya -jvmd\\<rightarrow>\\<^sub>1 z;\n        \\<forall>\\<sigma>.\n           x = Normal \\<sigma> \\<longrightarrow>\n           (\\<forall>\\<sigma>'.\n               ya = Normal \\<sigma>' \\<longrightarrow>\n               P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>');\n        x = Normal \\<sigma>; z = Normal \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "apply (erule exec_1_d.cases, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x ya z \\<sigma> \\<sigma>' \\<sigma>'' \\<sigma>'''.\n       \\<lbrakk>P \\<turnstile> x -jvmd\\<rightarrow> ya;\n        \\<forall>\\<sigma>.\n           x = Normal \\<sigma> \\<longrightarrow>\n           (\\<forall>\\<sigma>'.\n               ya = Normal \\<sigma>' \\<longrightarrow>\n               P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>');\n        x = Normal \\<sigma>; z = Normal \\<sigma>'; ya = Normal \\<sigma>'';\n        z = Normal \\<sigma>''';\n        exec_d P \\<sigma>'' = Normal \\<lfloor>\\<sigma>'''\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "apply (simp add: exec_all_def exec_d_def split: type_error.splits if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x ya z \\<sigma> \\<sigma>' \\<sigma>'' \\<sigma>'''.\n       \\<lbrakk>P \\<turnstile> Normal\n                                \\<sigma> -jvmd\\<rightarrow> Normal\n                       \\<sigma>'';\n        (\\<sigma>, \\<sigma>'')\n        \\<in> {(\\<sigma>, \\<sigma>').\n               exec (P, \\<sigma>) = \\<lfloor>\\<sigma>'\\<rfloor>}\\<^sup>*;\n        x = Normal \\<sigma>; \\<sigma>''' = \\<sigma>';\n        ya = Normal \\<sigma>''; z = Normal \\<sigma>'; check P \\<sigma>'';\n        exec (P, \\<sigma>'') = \\<lfloor>\\<sigma>'\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>, \\<sigma>')\n                         \\<in> {(\\<sigma>, \\<sigma>').\n                                exec (P, \\<sigma>) =\n                                \\<lfloor>\\<sigma>'\\<rfloor>}\\<^sup>*", "apply (rule rtrancl_trans, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x ya z \\<sigma> \\<sigma>' \\<sigma>'' \\<sigma>'''.\n       \\<lbrakk>P \\<turnstile> Normal\n                                \\<sigma> -jvmd\\<rightarrow> Normal\n                       \\<sigma>'';\n        (\\<sigma>, \\<sigma>'')\n        \\<in> {(\\<sigma>, \\<sigma>').\n               exec (P, \\<sigma>) = \\<lfloor>\\<sigma>'\\<rfloor>}\\<^sup>*;\n        x = Normal \\<sigma>; \\<sigma>''' = \\<sigma>';\n        ya = Normal \\<sigma>''; z = Normal \\<sigma>'; check P \\<sigma>'';\n        exec (P, \\<sigma>'') = \\<lfloor>\\<sigma>'\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>'', \\<sigma>')\n                         \\<in> {(\\<sigma>, \\<sigma>').\n                                exec (P, \\<sigma>) =\n                                \\<lfloor>\\<sigma>'\\<rfloor>}\\<^sup>*", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  P \\<turnstile> ?x -jvmd\\<rightarrow> ?y \\<Longrightarrow>\n  \\<forall>\\<sigma> \\<sigma>'.\n     ?x = Normal \\<sigma> \\<longrightarrow>\n     ?y = Normal \\<sigma>' \\<longrightarrow>\n     P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> Normal\n                    \\<sigma> -jvmd\\<rightarrow> Normal\n           \\<sigma>' \\<Longrightarrow>\n    P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "moreover"], ["proof (state)\nthis:\n  P \\<turnstile> ?x -jvmd\\<rightarrow> ?y \\<Longrightarrow>\n  \\<forall>\\<sigma> \\<sigma>'.\n     ?x = Normal \\<sigma> \\<longrightarrow>\n     ?y = Normal \\<sigma>' \\<longrightarrow>\n     P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> Normal\n                    \\<sigma> -jvmd\\<rightarrow> Normal\n           \\<sigma>' \\<Longrightarrow>\n    P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "assume \"P \\<turnstile> (Normal \\<sigma>) -jvmd\\<rightarrow> (Normal \\<sigma>')\""], ["proof (state)\nthis:\n  P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> Normal\n                    \\<sigma> -jvmd\\<rightarrow> Normal\n           \\<sigma>' \\<Longrightarrow>\n    P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "ultimately"], ["proof (chain)\npicking this:\n  P \\<turnstile> ?x -jvmd\\<rightarrow> ?y \\<Longrightarrow>\n  \\<forall>\\<sigma> \\<sigma>'.\n     ?x = Normal \\<sigma> \\<longrightarrow>\n     ?y = Normal \\<sigma>' \\<longrightarrow>\n     P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\n  P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>'", "show \"P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\""], ["proof (prove)\nusing this:\n  P \\<turnstile> ?x -jvmd\\<rightarrow> ?y \\<Longrightarrow>\n  \\<forall>\\<sigma> \\<sigma>'.\n     ?x = Normal \\<sigma> \\<longrightarrow>\n     ?y = Normal \\<sigma>' \\<longrightarrow>\n     P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\n  P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "by blast"], ["proof (state)\nthis:\n  P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "end"]]}