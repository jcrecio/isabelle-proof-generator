{"file_name": "/home/qj213/afp-2021-10-22/thys/Formal_SSA/Disjoin_Transform.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Formal_SSA", "problem_names": ["lemma maxVnameLen_aux_newname: \"length V > maxVnameLen_aux e \\<Longrightarrow> V \\<notin> rhs_aux e\"", "lemma maxVnameLen_newname: \"length V > maxVnameLen c \\<Longrightarrow> newname c V\"", "lemma tempname_newname[intro]: \"newname c (tempName c)\"", "lemma leftmost_lhs[simp]: \"lhs (leftmostCmd c) = lhs c\"", "lemma leftmost_rhs[simp]: \"rhs (leftmostCmd c) = rhs c\"", "lemma leftmost_subcmd[intro]: \"subcmd c (leftmostCmd c)\"", "lemma leftmost_labels: \"labels c n c' \\<Longrightarrow> subcmd c (leftmostCmd c')\"", "theorem transform_disjoint:\n  assumes \"subcmd (transform_aux temp c) (V:=e)\" \"newname c temp\"\n  shows \"V \\<notin> rhs_aux e\"", "lemma transform_disjoint': \"subcmd (transform c) (leftmostCmd c') \\<Longrightarrow> lhs c' \\<inter> rhs c' = {}\""], "translations": [["", "lemma maxVnameLen_aux_newname: \"length V > maxVnameLen_aux e \\<Longrightarrow> V \\<notin> rhs_aux e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxVnameLen_aux e < length V \\<Longrightarrow> V \\<notin> rhs_aux e", "by (induction e) auto"], ["", "lemma maxVnameLen_newname: \"length V > maxVnameLen c \\<Longrightarrow> newname c V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxVnameLen c < length V \\<Longrightarrow> newname c V", "by (induction c) (auto intro:newname.intros dest:maxVnameLen_aux_newname)"], ["", "lemma tempname_newname[intro]: \"newname c (tempName c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. newname c (tempName c)", "by (rule maxVnameLen_newname) (simp add: tempName_def)"], ["", "fun transform_aux :: \"vname \\<Rightarrow> cmd \\<Rightarrow> cmd\" where\n  \"transform_aux _ Skip = Skip\"\n| \"transform_aux V' (V:=e) =\n    (if V \\<in> rhs (V:=e) then V':=e;; V:=Var V'\n     else V:=e)\"\n| \"transform_aux V' (c\\<^sub>1;;c\\<^sub>2) = transform_aux V' c\\<^sub>1;; transform_aux V' c\\<^sub>2\"\n| \"transform_aux V' (if (b) c\\<^sub>1 else c\\<^sub>2) =\n    (if (b) transform_aux V' c\\<^sub>1 else transform_aux V' c\\<^sub>2)\"\n| \"transform_aux V' (while (b) c) = (while (b) transform_aux V' c)\""], ["", "abbreviation transform :: \"cmd \\<Rightarrow> cmd\" where\n  \"transform c \\<equiv> transform_aux (tempName c) c\""], ["", "fun leftmostCmd :: \"cmd \\<Rightarrow> cmd\" where\n  \"leftmostCmd (c1;;c2) = leftmostCmd c1\"\n| \"leftmostCmd c = c\""], ["", "lemma leftmost_lhs[simp]: \"lhs (leftmostCmd c) = lhs c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lhs (leftmostCmd c) = lhs c", "by (induction c) auto"], ["", "lemma leftmost_rhs[simp]: \"rhs (leftmostCmd c) = rhs c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rhs (leftmostCmd c) = rhs c", "by (induction c) auto"], ["", "lemma leftmost_subcmd[intro]: \"subcmd c (leftmostCmd c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subcmd c (leftmostCmd c)", "by (induction c) (auto intro:subcmd.intros)"], ["", "lemma leftmost_labels: \"labels c n c' \\<Longrightarrow> subcmd c (leftmostCmd c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels c n c' \\<Longrightarrow> subcmd c (leftmostCmd c')", "by (induction rule:labels.induct) (auto intro:subcmd.intros)"], ["", "theorem transform_disjoint:\n  assumes \"subcmd (transform_aux temp c) (V:=e)\" \"newname c temp\"\n  shows \"V \\<notin> rhs_aux e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<notin> rhs_aux e", "using assms"], ["proof (prove)\nusing this:\n  subcmd (transform_aux temp c) (V:=e)\n  newname c temp\n\ngoal (1 subgoal):\n 1. V \\<notin> rhs_aux e", "proof (induction c rule:transform_aux.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>subcmd (transform_aux temp Skip) (uu_:=e);\n        newname Skip temp\\<rbrakk>\n       \\<Longrightarrow> uu_ \\<notin> rhs_aux e\n 2. \\<And>V' V ea.\n       \\<lbrakk>subcmd (transform_aux temp (V:=ea)) (V':=e);\n        newname (V:=ea) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 3. \\<And>V' c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c\\<^sub>1) (V':=e);\n                 newname c\\<^sub>1 temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        \\<lbrakk>subcmd (transform_aux temp c\\<^sub>2) (V':=e);\n         newname c\\<^sub>2 temp\\<rbrakk>\n        \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (c\\<^sub>1;; c\\<^sub>2)) (V':=e);\n        newname (c\\<^sub>1;; c\\<^sub>2) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 4. \\<And>V' b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c\\<^sub>1) (V':=e);\n                 newname c\\<^sub>1 temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        \\<lbrakk>subcmd (transform_aux temp c\\<^sub>2) (V':=e);\n         newname c\\<^sub>2 temp\\<rbrakk>\n        \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (if (b) c\\<^sub>1 else c\\<^sub>2))\n         (V':=e);\n        newname (if (b) c\\<^sub>1 else c\\<^sub>2) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 5. \\<And>V' b c.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c) (V':=e);\n                 newname c temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (while (b) c)) (V':=e);\n        newname (while (b) c) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e", "case (3 V c1 c2)"], ["proof (state)\nthis:\n  \\<lbrakk>subcmd (transform_aux temp c1) (V:=e); newname c1 temp\\<rbrakk>\n  \\<Longrightarrow> V \\<notin> rhs_aux e\n  \\<lbrakk>subcmd (transform_aux temp c2) (V:=e); newname c2 temp\\<rbrakk>\n  \\<Longrightarrow> V \\<notin> rhs_aux e\n  subcmd (transform_aux temp (c1;; c2)) (V:=e)\n  newname (c1;; c2) temp\n\ngoal (5 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>subcmd (transform_aux temp Skip) (uu_:=e);\n        newname Skip temp\\<rbrakk>\n       \\<Longrightarrow> uu_ \\<notin> rhs_aux e\n 2. \\<And>V' V ea.\n       \\<lbrakk>subcmd (transform_aux temp (V:=ea)) (V':=e);\n        newname (V:=ea) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 3. \\<And>V' c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c\\<^sub>1) (V':=e);\n                 newname c\\<^sub>1 temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        \\<lbrakk>subcmd (transform_aux temp c\\<^sub>2) (V':=e);\n         newname c\\<^sub>2 temp\\<rbrakk>\n        \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (c\\<^sub>1;; c\\<^sub>2)) (V':=e);\n        newname (c\\<^sub>1;; c\\<^sub>2) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 4. \\<And>V' b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c\\<^sub>1) (V':=e);\n                 newname c\\<^sub>1 temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        \\<lbrakk>subcmd (transform_aux temp c\\<^sub>2) (V':=e);\n         newname c\\<^sub>2 temp\\<rbrakk>\n        \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (if (b) c\\<^sub>1 else c\\<^sub>2))\n         (V':=e);\n        newname (if (b) c\\<^sub>1 else c\\<^sub>2) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 5. \\<And>V' b c.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c) (V':=e);\n                 newname c temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (while (b) c)) (V':=e);\n        newname (while (b) c) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e", "from \"3.prems\"(1)"], ["proof (chain)\npicking this:\n  subcmd (transform_aux temp (c1;; c2)) (V:=e)", "show ?case"], ["proof (prove)\nusing this:\n  subcmd (transform_aux temp (c1;; c2)) (V:=e)\n\ngoal (1 subgoal):\n 1. V \\<notin> rhs_aux e", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. subcmd (transform_aux temp c1;; transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    V \\<notin> rhs_aux e", "proof (cases \"(transform_aux temp c1;; transform_aux temp c2)\" \"(V:=e)\" rule:subcmd.cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. subcmd (transform_aux temp c1;; transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e)\n 2. \\<lbrakk>subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e);\n     subcmd (transform_aux temp c1) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e\n 3. \\<lbrakk>subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e);\n     subcmd (transform_aux temp c2) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e", "case sub_Seq2"], ["proof (state)\nthis:\n  subcmd (transform_aux temp c1) (V:=e)\n\ngoal (3 subgoals):\n 1. subcmd (transform_aux temp c1;; transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e)\n 2. \\<lbrakk>subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e);\n     subcmd (transform_aux temp c1) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e\n 3. \\<lbrakk>subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e);\n     subcmd (transform_aux temp c2) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e", "with \"3.prems\"(2)"], ["proof (chain)\npicking this:\n  newname (c1;; c2) temp\n  subcmd (transform_aux temp c1) (V:=e)", "show ?thesis"], ["proof (prove)\nusing this:\n  newname (c1;; c2) temp\n  subcmd (transform_aux temp c1) (V:=e)\n\ngoal (1 subgoal):\n 1. V \\<notin> rhs_aux e", "by -(rule \"3.IH\"(1), auto elim:newname.cases)"], ["proof (state)\nthis:\n  V \\<notin> rhs_aux e\n\ngoal (2 subgoals):\n 1. subcmd (transform_aux temp c1;; transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e)\n 2. \\<lbrakk>subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e);\n     subcmd (transform_aux temp c2) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. subcmd (transform_aux temp c1;; transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e)\n 2. \\<lbrakk>subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e);\n     subcmd (transform_aux temp c2) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e", "case sub_If1"], ["proof (state)\nthis:\n  subcmd (transform_aux temp c2) (V:=e)\n\ngoal (2 subgoals):\n 1. subcmd (transform_aux temp c1;; transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e)\n 2. \\<lbrakk>subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e);\n     subcmd (transform_aux temp c2) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e", "with \"3.prems\"(2)"], ["proof (chain)\npicking this:\n  newname (c1;; c2) temp\n  subcmd (transform_aux temp c2) (V:=e)", "show ?thesis"], ["proof (prove)\nusing this:\n  newname (c1;; c2) temp\n  subcmd (transform_aux temp c2) (V:=e)\n\ngoal (1 subgoal):\n 1. V \\<notin> rhs_aux e", "by -(rule \"3.IH\"(2), auto elim:newname.cases)"], ["proof (state)\nthis:\n  V \\<notin> rhs_aux e\n\ngoal (1 subgoal):\n 1. subcmd (transform_aux temp c1;; transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (transform_aux temp c1;; transform_aux temp c2) (V:=e)", "qed auto"], ["proof (state)\nthis:\n  V \\<notin> rhs_aux e\n\ngoal (4 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>subcmd (transform_aux temp Skip) (uu_:=e);\n        newname Skip temp\\<rbrakk>\n       \\<Longrightarrow> uu_ \\<notin> rhs_aux e\n 2. \\<And>V' V ea.\n       \\<lbrakk>subcmd (transform_aux temp (V:=ea)) (V':=e);\n        newname (V:=ea) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 3. \\<And>V' b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c\\<^sub>1) (V':=e);\n                 newname c\\<^sub>1 temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        \\<lbrakk>subcmd (transform_aux temp c\\<^sub>2) (V':=e);\n         newname c\\<^sub>2 temp\\<rbrakk>\n        \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (if (b) c\\<^sub>1 else c\\<^sub>2))\n         (V':=e);\n        newname (if (b) c\\<^sub>1 else c\\<^sub>2) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 4. \\<And>V' b c.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c) (V':=e);\n                 newname c temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (while (b) c)) (V':=e);\n        newname (while (b) c) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>subcmd (transform_aux temp Skip) (uu_:=e);\n        newname Skip temp\\<rbrakk>\n       \\<Longrightarrow> uu_ \\<notin> rhs_aux e\n 2. \\<And>V' V ea.\n       \\<lbrakk>subcmd (transform_aux temp (V:=ea)) (V':=e);\n        newname (V:=ea) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 3. \\<And>V' b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c\\<^sub>1) (V':=e);\n                 newname c\\<^sub>1 temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        \\<lbrakk>subcmd (transform_aux temp c\\<^sub>2) (V':=e);\n         newname c\\<^sub>2 temp\\<rbrakk>\n        \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (if (b) c\\<^sub>1 else c\\<^sub>2))\n         (V':=e);\n        newname (if (b) c\\<^sub>1 else c\\<^sub>2) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 4. \\<And>V' b c.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c) (V':=e);\n                 newname c temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (while (b) c)) (V':=e);\n        newname (while (b) c) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e", "case (4 V b c1 c2)"], ["proof (state)\nthis:\n  \\<lbrakk>subcmd (transform_aux temp c1) (V:=e); newname c1 temp\\<rbrakk>\n  \\<Longrightarrow> V \\<notin> rhs_aux e\n  \\<lbrakk>subcmd (transform_aux temp c2) (V:=e); newname c2 temp\\<rbrakk>\n  \\<Longrightarrow> V \\<notin> rhs_aux e\n  subcmd (transform_aux temp (if (b) c1 else c2)) (V:=e)\n  newname (if (b) c1 else c2) temp\n\ngoal (4 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>subcmd (transform_aux temp Skip) (uu_:=e);\n        newname Skip temp\\<rbrakk>\n       \\<Longrightarrow> uu_ \\<notin> rhs_aux e\n 2. \\<And>V' V ea.\n       \\<lbrakk>subcmd (transform_aux temp (V:=ea)) (V':=e);\n        newname (V:=ea) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 3. \\<And>V' b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c\\<^sub>1) (V':=e);\n                 newname c\\<^sub>1 temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        \\<lbrakk>subcmd (transform_aux temp c\\<^sub>2) (V':=e);\n         newname c\\<^sub>2 temp\\<rbrakk>\n        \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (if (b) c\\<^sub>1 else c\\<^sub>2))\n         (V':=e);\n        newname (if (b) c\\<^sub>1 else c\\<^sub>2) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 4. \\<And>V' b c.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c) (V':=e);\n                 newname c temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (while (b) c)) (V':=e);\n        newname (while (b) c) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e", "from \"4.prems\"(1)"], ["proof (chain)\npicking this:\n  subcmd (transform_aux temp (if (b) c1 else c2)) (V:=e)", "show ?case"], ["proof (prove)\nusing this:\n  subcmd (transform_aux temp (if (b) c1 else c2)) (V:=e)\n\ngoal (1 subgoal):\n 1. V \\<notin> rhs_aux e", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. subcmd (if (b) transform_aux temp c1 else transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    V \\<notin> rhs_aux e", "proof (cases \"(if (b) transform_aux temp c1 else transform_aux temp c2)\" \"(V:=e)\" rule:subcmd.cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. subcmd (if (b) transform_aux temp c1 else transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (if (b) transform_aux temp c1 else transform_aux temp c2) (V:=e)\n 2. \\<lbrakk>subcmd\n              (if (b) transform_aux temp c1 else transform_aux temp c2)\n              (V:=e);\n     subcmd (transform_aux temp c1) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e\n 3. \\<lbrakk>subcmd\n              (if (b) transform_aux temp c1 else transform_aux temp c2)\n              (V:=e);\n     subcmd (transform_aux temp c2) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e", "case sub_If2"], ["proof (state)\nthis:\n  subcmd (transform_aux temp c1) (V:=e)\n\ngoal (3 subgoals):\n 1. subcmd (if (b) transform_aux temp c1 else transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (if (b) transform_aux temp c1 else transform_aux temp c2) (V:=e)\n 2. \\<lbrakk>subcmd\n              (if (b) transform_aux temp c1 else transform_aux temp c2)\n              (V:=e);\n     subcmd (transform_aux temp c1) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e\n 3. \\<lbrakk>subcmd\n              (if (b) transform_aux temp c1 else transform_aux temp c2)\n              (V:=e);\n     subcmd (transform_aux temp c2) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e", "with \"4.prems\"(2)"], ["proof (chain)\npicking this:\n  newname (if (b) c1 else c2) temp\n  subcmd (transform_aux temp c1) (V:=e)", "show ?thesis"], ["proof (prove)\nusing this:\n  newname (if (b) c1 else c2) temp\n  subcmd (transform_aux temp c1) (V:=e)\n\ngoal (1 subgoal):\n 1. V \\<notin> rhs_aux e", "by -(rule \"4.IH\"(1), auto elim:newname.cases)"], ["proof (state)\nthis:\n  V \\<notin> rhs_aux e\n\ngoal (2 subgoals):\n 1. subcmd (if (b) transform_aux temp c1 else transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (if (b) transform_aux temp c1 else transform_aux temp c2) (V:=e)\n 2. \\<lbrakk>subcmd\n              (if (b) transform_aux temp c1 else transform_aux temp c2)\n              (V:=e);\n     subcmd (transform_aux temp c2) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. subcmd (if (b) transform_aux temp c1 else transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (if (b) transform_aux temp c1 else transform_aux temp c2) (V:=e)\n 2. \\<lbrakk>subcmd\n              (if (b) transform_aux temp c1 else transform_aux temp c2)\n              (V:=e);\n     subcmd (transform_aux temp c2) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e", "case sub_While"], ["proof (state)\nthis:\n  subcmd (transform_aux temp c2) (V:=e)\n\ngoal (2 subgoals):\n 1. subcmd (if (b) transform_aux temp c1 else transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (if (b) transform_aux temp c1 else transform_aux temp c2) (V:=e)\n 2. \\<lbrakk>subcmd\n              (if (b) transform_aux temp c1 else transform_aux temp c2)\n              (V:=e);\n     subcmd (transform_aux temp c2) (V:=e)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> rhs_aux e", "with \"4.prems\"(2)"], ["proof (chain)\npicking this:\n  newname (if (b) c1 else c2) temp\n  subcmd (transform_aux temp c2) (V:=e)", "show ?thesis"], ["proof (prove)\nusing this:\n  newname (if (b) c1 else c2) temp\n  subcmd (transform_aux temp c2) (V:=e)\n\ngoal (1 subgoal):\n 1. V \\<notin> rhs_aux e", "by -(rule \"4.IH\"(2), auto elim:newname.cases)"], ["proof (state)\nthis:\n  V \\<notin> rhs_aux e\n\ngoal (1 subgoal):\n 1. subcmd (if (b) transform_aux temp c1 else transform_aux temp c2)\n     (V:=e) \\<Longrightarrow>\n    subcmd (if (b) transform_aux temp c1 else transform_aux temp c2) (V:=e)", "qed auto"], ["proof (state)\nthis:\n  V \\<notin> rhs_aux e\n\ngoal (3 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>subcmd (transform_aux temp Skip) (uu_:=e);\n        newname Skip temp\\<rbrakk>\n       \\<Longrightarrow> uu_ \\<notin> rhs_aux e\n 2. \\<And>V' V ea.\n       \\<lbrakk>subcmd (transform_aux temp (V:=ea)) (V':=e);\n        newname (V:=ea) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 3. \\<And>V' b c.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c) (V':=e);\n                 newname c temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (while (b) c)) (V':=e);\n        newname (while (b) c) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>subcmd (transform_aux temp Skip) (uu_:=e);\n        newname Skip temp\\<rbrakk>\n       \\<Longrightarrow> uu_ \\<notin> rhs_aux e\n 2. \\<And>V' V ea.\n       \\<lbrakk>subcmd (transform_aux temp (V:=ea)) (V':=e);\n        newname (V:=ea) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 3. \\<And>V' b c.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c) (V':=e);\n                 newname c temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (while (b) c)) (V':=e);\n        newname (while (b) c) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e", "case 5"], ["proof (state)\nthis:\n  \\<lbrakk>subcmd (transform_aux temp c_) (V'_:=e); newname c_ temp\\<rbrakk>\n  \\<Longrightarrow> V'_ \\<notin> rhs_aux e\n  subcmd (transform_aux temp (while (b_) c_)) (V'_:=e)\n  newname (while (b_) c_) temp\n\ngoal (3 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>subcmd (transform_aux temp Skip) (uu_:=e);\n        newname Skip temp\\<rbrakk>\n       \\<Longrightarrow> uu_ \\<notin> rhs_aux e\n 2. \\<And>V' V ea.\n       \\<lbrakk>subcmd (transform_aux temp (V:=ea)) (V':=e);\n        newname (V:=ea) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e\n 3. \\<And>V' b c.\n       \\<lbrakk>\\<lbrakk>subcmd (transform_aux temp c) (V':=e);\n                 newname c temp\\<rbrakk>\n                \\<Longrightarrow> V' \\<notin> rhs_aux e;\n        subcmd (transform_aux temp (while (b) c)) (V':=e);\n        newname (while (b) c) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e", "from \"5.prems\""], ["proof (chain)\npicking this:\n  subcmd (transform_aux temp (while (b_) c_)) (V'_:=e)\n  newname (while (b_) c_) temp", "show ?case"], ["proof (prove)\nusing this:\n  subcmd (transform_aux temp (while (b_) c_)) (V'_:=e)\n  newname (while (b_) c_) temp\n\ngoal (1 subgoal):\n 1. V'_ \\<notin> rhs_aux e", "by -(rule \"5.IH\", auto elim:subcmd.cases newname.cases)"], ["proof (state)\nthis:\n  V'_ \\<notin> rhs_aux e\n\ngoal (2 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>subcmd (transform_aux temp Skip) (uu_:=e);\n        newname Skip temp\\<rbrakk>\n       \\<Longrightarrow> uu_ \\<notin> rhs_aux e\n 2. \\<And>V' V ea.\n       \\<lbrakk>subcmd (transform_aux temp (V:=ea)) (V':=e);\n        newname (V:=ea) temp\\<rbrakk>\n       \\<Longrightarrow> V' \\<notin> rhs_aux e", "qed (auto elim!:subcmd.cases newname.cases split:if_split_asm)"], ["", "lemma transform_disjoint': \"subcmd (transform c) (leftmostCmd c') \\<Longrightarrow> lhs c' \\<inter> rhs c' = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subcmd (transform c) (leftmostCmd c') \\<Longrightarrow>\n    lhs c' \\<inter> rhs c' = {}", "by (induction c') (auto dest: transform_disjoint)"], ["", "corollary Defs_Uses_transform_disjoint [simp]: \"Defs (transform c) n \\<inter> Uses (transform c) n = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Defs (transform c) n \\<inter> Uses (transform c) n = {}", "by (auto dest: leftmost_labels transform_disjoint' labels_det)"], ["", "end"]]}