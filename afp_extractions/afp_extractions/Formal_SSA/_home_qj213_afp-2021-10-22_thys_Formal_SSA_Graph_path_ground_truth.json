{"file_name": "/home/qj213/afp-2021-10-22/thys/Formal_SSA/Graph_path.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Formal_SSA", "problem_names": ["lemma get_edge_simps [simp]:\n  \"getFrom (f,d,t) = f\"\n  \"getData (f,d,t) = d\"\n  \"getTo (f,d,t) = t\"", "lemma pred_finite[simp, intro]: \"finite (edges G) \\<Longrightarrow> finite (pred G v)\"", "lemma pred_empty[simp]: \"pred empty v = {}\"", "lemma (in valid_graph) pred_subset: \"pred G v \\<subseteq> V\\<times>UNIV\"", "lemma pred_it_correct:\n      \"invar g \\<Longrightarrow> set_iterator (pred_it g v) (pred (\\<alpha> g) v)\"", "lemma pi_pred_it[icf_proper_iteratorI]:\n      \"proper_it (pred_it S v) (pred_it S v)\"", "lemma pred_it_proper[proper_it]:\n      \"proper_it' (\\<lambda>S. pred_it S v) (\\<lambda>S. pred_it S v)\"", "lemma (in graph_pred_it) pred_it_is_iterator[refine_transfer]:\n    \"invar g \\<Longrightarrow> set_iterator (pred_it g v) (pred (\\<alpha> g) v)\"", "lemma \\<alpha>n_correct: \"invar g \\<Longrightarrow> set (\\<alpha>n g) \\<supseteq> getFrom ` \\<alpha>e g \\<union> getTo ` \\<alpha>e g\"", "lemma \\<alpha>n_distinct: \"invar g \\<Longrightarrow> distinct (\\<alpha>n g)\"", "lemma inEdges_correct':\n    assumes \"invar g\"\n    shows \"set (inEdges g n) = (\\<lambda>(f,d). (f,d,n)) ` (pred (\\<alpha> g) n)\"", "lemma inEdges_correct [intro!, simp]:\n    \"invar g \\<Longrightarrow> set (inEdges g n) = {(_, _, t). t = n} \\<inter> \\<alpha>e g\"", "lemma in_set_\\<alpha>nI1 [intro]: \"\\<lbrakk>invar g; x \\<in> getFrom ` \\<alpha>e g\\<rbrakk> \\<Longrightarrow> x \\<in> set (\\<alpha>n g)\"", "lemma in_set_\\<alpha>nI2 [intro]: \"\\<lbrakk>invar g; x \\<in> getTo ` \\<alpha>e g\\<rbrakk> \\<Longrightarrow> x \\<in> set (\\<alpha>n g)\"", "lemma edge_to_node:\n    assumes \"invar g\" and \"e \\<in> \\<alpha>e g\"\n    obtains \"getFrom e \\<in> set (\\<alpha>n g)\" and \"getTo e \\<in> set (\\<alpha>n g)\"", "lemma inEdge_to_edge:\n    assumes \"e \\<in> set (inEdges g n)\" and \"invar g\"\n    obtains eD n' where \"(n',eD,n) \\<in> \\<alpha>e g\"", "lemma edge_to_inEdge:\n    assumes \"(n,eD,m) \\<in> \\<alpha>e g\" \"invar g\"\n    obtains \"(n,eD,m) \\<in> set (inEdges g m)\"", "lemma edge_to_predecessors:\n    assumes \"(n,eD,m) \\<in> \\<alpha>e g\" \"invar g\"\n    obtains \"n \\<in> set (predecessors g m)\"", "lemma predecessor_is_node[elim]: \"\\<lbrakk>n \\<in> set (predecessors g n'); invar g\\<rbrakk> \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\"", "lemma successor_is_node[elim]: \"\\<lbrakk>n \\<in> set (predecessors g n'); n \\<in> set (\\<alpha>n g); invar g\\<rbrakk> \\<Longrightarrow> n' \\<in> set (\\<alpha>n g)\"", "lemma successors_predecessors[simp]: \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> n \\<in> set (successors g m) \\<longleftrightarrow> m \\<in> set (predecessors g n)\"", "lemma path_not_Nil[simp, dest]: \"path g ns \\<Longrightarrow> ns \\<noteq> []\"", "lemma path2_not_Nil[simp]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> ns \\<noteq> []\"", "lemma path2_not_Nil2[simp]: \"\\<not> g \\<turnstile> n-[]\\<rightarrow>m\"", "lemma path2_not_Nil3[simp]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> length ns \\<ge> 1\"", "lemma empty_path2[intro]: \"\\<lbrakk>n \\<in> set (\\<alpha>n g); invar g\\<rbrakk> \\<Longrightarrow> g \\<turnstile> n-[n]\\<rightarrow>n\"", "lemma Cons_path2[intro]: \"\\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; n' \\<in> set (predecessors g n)\\<rbrakk> \\<Longrightarrow> g \\<turnstile> n'-n'#ns\\<rightarrow>m\"", "lemma path2_cases:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    obtains (empty_path) \"ns = [n]\" \"m = n\"\n          | (Cons_path) \"g \\<turnstile> hd (tl ns)-tl ns\\<rightarrow>m\" \"n \\<in> set (predecessors g (hd (tl ns)))\"", "lemma path2_induct[consumes 1, case_names empty_path Cons_path]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    assumes empty: \"invar g \\<Longrightarrow> P m [m] m\"\n    assumes Cons: \"\\<And>ns n' n. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> P n ns m \\<Longrightarrow> n' \\<in> set (predecessors g n) \\<Longrightarrow> P n' (n' # ns) m\"\n    shows \"P n ns m\"", "lemma path_invar[intro]: \"path g ns \\<Longrightarrow> invar g\"", "lemma path_in_\\<alpha>n[intro]: \"\\<lbrakk>path g ns; n \\<in> set ns\\<rbrakk> \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\"", "lemma path2_in_\\<alpha>n[elim]: \"\\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; l \\<in> set ns\\<rbrakk> \\<Longrightarrow> l \\<in> set (\\<alpha>n g)\"", "lemma path2_hd_in_\\<alpha>n[elim]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\"", "lemma path2_tl_in_\\<alpha>n[elim]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> m \\<in> set (\\<alpha>n g)\"", "lemma path2_forget_hd[simp]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> g \\<turnstile> hd ns-ns\\<rightarrow>m\"", "lemma path2_forget_last[simp]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> g \\<turnstile> n-ns\\<rightarrow>last ns\"", "lemma path_hd[dest]: \"path g (n#ns) \\<Longrightarrow> path g [n]\"", "lemma path_by_tail[intro]: \"\\<lbrakk>path g (n#n'#ns); path g (n'#ns) \\<Longrightarrow> path g (n'#ms)\\<rbrakk> \\<Longrightarrow> path g (n#n'#ms)\"", "lemma \\<alpha>n_in_\\<alpha>nE [elim]:\n    assumes \"(n,e,m) \\<in> \\<alpha>e g\" and \"invar g\"\n    obtains \"n \\<in> set (\\<alpha>n g)\" and \"m \\<in> set (\\<alpha>n g)\"", "lemma path_split:\n    assumes \"path g (ns@m#ns')\"\n    shows \"path g (ns@[m])\" \"path g(m#ns')\"", "lemma path2_split:\n    assumes \"g \\<turnstile> n-ns@n'#ns'\\<rightarrow>m\"\n    shows \"g \\<turnstile> n-ns@[n']\\<rightarrow>n'\" \"g \\<turnstile> n'-n'#ns'\\<rightarrow>m\"", "lemma elem_set_implies_elem_tl_app_cons[simp]: \"x \\<in> set xs \\<Longrightarrow> x \\<in> set (tl (ys@y#xs))\"", "lemma path2_split_ex:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"x \\<in> set ns\"\n    obtains ns\\<^sub>1 ns\\<^sub>2 where \"g \\<turnstile> n-ns\\<^sub>1\\<rightarrow>x\" \"g \\<turnstile> x-ns\\<^sub>2\\<rightarrow>m\" \"ns = ns\\<^sub>1@tl ns\\<^sub>2\" \"ns = butlast ns\\<^sub>1@ns\\<^sub>2\"", "lemma path2_split_ex':\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"x \\<in> set ns\"\n    obtains ns\\<^sub>1 ns\\<^sub>2 where \"g \\<turnstile> n-ns\\<^sub>1\\<rightarrow>x\" \"g \\<turnstile> x-ns\\<^sub>2\\<rightarrow>m\" \"ns = butlast ns\\<^sub>1@ns\\<^sub>2\"", "lemma path_snoc:\n    assumes \"path g (ns@[n])\" \"n \\<in> set (predecessors g m)\"\n    shows \"path g (ns@[n,m])\"", "lemma path2_snoc[elim]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"m \\<in> set (predecessors g m')\"\n    shows \"g \\<turnstile> n-ns@[m']\\<rightarrow>m'\"", "lemma path_unsnoc:\n    assumes \"path g ns\" \"length ns \\<ge> 2\"\n    obtains \"path g (butlast ns) \\<and> last (butlast ns) \\<in> set (predecessors g (last ns))\"", "lemma path2_unsnoc:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"length ns \\<ge> 2\"\n    obtains \"g \\<turnstile> n-butlast ns\\<rightarrow>last (butlast ns)\" \"last (butlast ns) \\<in> set (predecessors g m)\"", "lemma path2_rev_induct[consumes 1, case_names empty snoc]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    assumes empty: \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> P n [n] n\"\n    assumes snoc: \"\\<And>ns m' m. g \\<turnstile> n-ns\\<rightarrow>m' \\<Longrightarrow> P n ns m' \\<Longrightarrow> m' \\<in> set (predecessors g m) \\<Longrightarrow> P n (ns@[m]) m\"\n    shows \"P n ns m\"", "lemma path2_hd[elim, dest?]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> n = hd ns\"", "lemma path2_hd_in_ns[elim]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> n \\<in> set ns\"", "lemma path2_last[elim, dest?]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> m = last ns\"", "lemma path2_last_in_ns[elim]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> m \\<in> set ns\"", "lemma path_app[elim]:\n    assumes \"path g ns\" \"path g ms\" \"last ns = hd ms\"\n    shows \"path g (ns@tl ms)\"", "lemma path2_app[elim]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"g \\<turnstile> m-ms\\<rightarrow>l\"\n    shows \"g \\<turnstile> n-ns@tl ms\\<rightarrow>l\"", "lemma butlast_tl:\n    assumes \"last xs = hd ys\" \"xs \\<noteq> []\" \"ys \\<noteq> []\"\n    shows \"butlast xs@ys = xs@tl ys\"", "lemma path2_app'[elim]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"g \\<turnstile> m-ms\\<rightarrow>l\"\n    shows \"g \\<turnstile> n-butlast ns@ms\\<rightarrow>l\"", "lemma path2_nontrivial[elim]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"n \\<noteq> m\"\n    shows \"length ns \\<ge> 2\"", "lemma simple_path2_aux:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>m\" \"distinct ns'\" \"set ns' \\<subseteq> set ns\" \"length ns' \\<le> length ns\"", "lemma simple_path2:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>m\" \"distinct ns'\" \"set ns' \\<subseteq> set ns\" \"length ns' \\<le>  length ns\" \"n \\<notin> set (tl ns')\" \"m \\<notin> set (butlast ns')\"", "lemma simple_path2_unsnoc:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"n \\<noteq> m\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>last ns'\" \"last ns' \\<in> set (predecessors g m)\" \"distinct ns'\" \"set ns' \\<subseteq> set ns\" \"m \\<notin> set ns'\"", "lemma path2_split_first_last:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"x \\<in> set ns\"\n    obtains ns\\<^sub>1 ns\\<^sub>3 ns\\<^sub>2 where \"ns = ns\\<^sub>1@ns\\<^sub>3@ns\\<^sub>2\" \"prefix (ns\\<^sub>1@[x]) ns\" \"suffix (x#ns\\<^sub>2) ns\"\n        and \"g \\<turnstile> n-ns\\<^sub>1@[x]\\<rightarrow>x\"  \"x \\<notin> set ns\\<^sub>1\"\n        and \"g \\<turnstile> x-ns\\<^sub>3\\<rightarrow>x\"\n        and \"g \\<turnstile> x-x#ns\\<^sub>2\\<rightarrow>m\" \"x \\<notin> set ns\\<^sub>2\"", "lemma path2_simple_loop:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>n\" \"n' \\<in> set ns\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>n\" \"n' \\<in> set ns'\" \"n \\<notin> set (tl (butlast ns'))\" \"set ns' \\<subseteq> set ns\"", "lemma path2_split_first_prop:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"\\<exists>x\\<in>set ns. P x\"\n    obtains m' ns' where \"g \\<turnstile> n-ns'\\<rightarrow>m'\" \"P m'\" \"\\<forall>x \\<in> set (butlast ns'). \\<not>P x\" \"prefix ns' ns\"", "lemma path2_split_last_prop:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"\\<exists>x\\<in>set ns. P x\"\n    obtains n' ns' where \"g \\<turnstile> n'-ns'\\<rightarrow>m\" \"P n'\" \"\\<forall>x \\<in> set (tl ns'). \\<not>P x\" \"suffix ns' ns\"", "lemma path2_prefix[elim]:\n    assumes 1: \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    assumes 2: \"prefix (ns'@[m']) ns\"\n    shows \"g \\<turnstile> n-ns'@[m']\\<rightarrow>m'\"", "lemma path2_prefix_ex:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"m' \\<in> set ns\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>m'\" \"prefix ns' ns\" \"m' \\<notin> set (butlast ns')\"", "lemma path2_strict_prefix_ex:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"m' \\<in> set (butlast ns)\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>m'\" \"strict_prefix ns' ns\" \"m' \\<notin> set (butlast ns')\"", "lemma path2_nontriv[elim]: \"\\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; n \\<noteq> m\\<rbrakk> \\<Longrightarrow> length ns > 1\"", "lemma Entry_dominates[simp,intro]: \"\\<lbrakk>invar g; n \\<in> set (\\<alpha>n g)\\<rbrakk> \\<Longrightarrow> dominates g (Entry g) n\"", "lemma Entry_iff_unreachable[simp]:\n    assumes \"invar g\" \"n \\<in> set (\\<alpha>n g)\"\n    shows \"predecessors g n = [] \\<longleftrightarrow> n = Entry g\"", "lemma Entry_loop:\n    assumes \"invar g\" \"g \\<turnstile> Entry g-ns\\<rightarrow>Entry g\"\n    shows \"ns=[Entry g]\"", "lemma simple_Entry_path:\n    assumes \"invar g\" \"n \\<in> set (\\<alpha>n g)\"\n    obtains ns where \"g \\<turnstile> Entry g-ns\\<rightarrow>n\" and \"n \\<notin> set (butlast ns)\"", "lemma dominatesI [intro]:\n    \"\\<lbrakk>m \\<in> set (\\<alpha>n g); \\<And>ns. \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>m\\<rbrakk> \\<Longrightarrow> n \\<in> set ns\\<rbrakk> \\<Longrightarrow> dominates g n m\"", "lemma dominatesE:\n    assumes \"dominates g n m\"\n    obtains \"m \\<in> set (\\<alpha>n g)\" and \"\\<And>ns. g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow> n \\<in> set ns\"", "lemma[simp]: \"dominates g n m \\<Longrightarrow> m \\<in> set (\\<alpha>n g)\"", "lemma[simp]:\n    assumes \"dominates g n m\" and[simp]: \"invar g\"\n    shows \"n \\<in> set (\\<alpha>n g)\"", "lemma strict_domE[elim]:\n    assumes \"strict_dom g n m\"\n    obtains \"m \\<in> set (\\<alpha>n g)\" and \"\\<And>ns. g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow> n \\<in> set (butlast ns)\"", "lemma dominates_refl[intro!]: \"\\<lbrakk>invar g; n \\<in> set (\\<alpha>n g)\\<rbrakk> \\<Longrightarrow> dominates g n n\"", "lemma dominates_trans:\n    assumes \"invar g\"\n    assumes part1: \"dominates g n n'\"\n    assumes part2: \"dominates g n' n''\"\n    shows   \"dominates g n n''\"", "lemma dominates_antisymm:\n    assumes \"invar g\"\n    assumes dom1: \"dominates g n n'\"\n    assumes dom2: \"dominates g n' n\"\n    shows \"n = n'\"", "lemma dominates_unsnoc:\n    assumes [simp]: \"invar g\" and \"dominates g n m\" \"m' \\<in> set (predecessors g m)\" \"n \\<noteq> m\"\n    shows \"dominates g n m'\"", "lemma dominates_unsnoc':\n    assumes [simp]: \"invar g\" and \"dominates g n m\" \"g \\<turnstile> m'-ms\\<rightarrow>m\" \"\\<forall>x \\<in> set (tl ms). x \\<noteq> n\"\n    shows \"dominates g n m'\"", "lemma dominates_path:\n    assumes \"dominates g n m\" and[simp]: \"invar g\"\n    obtains ns where \"g \\<turnstile> n-ns\\<rightarrow>m\"", "lemma dominates_antitrans:\n    assumes[simp]: \"invar g\" and \"dominates g n\\<^sub>1 m\" \"dominates g n\\<^sub>2 m\"\n    obtains (1) \"dominates g n\\<^sub>1 n\\<^sub>2\"\n          | (2) \"dominates g n\\<^sub>2 n\\<^sub>1\"", "lemma dominates_extend:\n    assumes \"dominates g n m\"\n    assumes \"g \\<turnstile> m'-ms\\<rightarrow>m\" \"n \\<notin> set (tl ms)\"\n    shows \"dominates g n m'\"", "lemma idom_ex:\n    assumes[simp]: \"invar g\" \"n \\<in> set (\\<alpha>n g)\" \"n \\<noteq> Entry g\"\n    shows \"\\<exists>!m. isIdom g n m\"", "lemma idom: \"\\<lbrakk>invar g; n \\<in> set (\\<alpha>n g) - {Entry g}\\<rbrakk> \\<Longrightarrow> isIdom g n (idom g n)\"", "lemma dominates_mid:\n    assumes \"dominates g n x\" \"dominates g x m\" \"g \\<turnstile> n-ns\\<rightarrow>m\" and[simp]: \"invar g\"\n    shows \"x \\<in> set ns\"", "lemma shortestPath_ex:\n    assumes \"n \\<in> set (\\<alpha>n g)\" \"invar g\"\n    obtains ns where \"g \\<turnstile> Entry g-ns\\<rightarrow>n\" \"distinct ns\" \"length ns = shortestPath g n\"", "lemma[simp]: \"\\<lbrakk>n \\<in> set (\\<alpha>n g); invar g\\<rbrakk> \\<Longrightarrow> shortestPath g n \\<noteq> 0\"", "lemma shortestPath_upper_bound:\n    assumes \"n \\<in> set (\\<alpha>n g)\" \"invar g\"\n    shows \"shortestPath g n \\<le> length (\\<alpha>n g)\"", "lemma shortestPath_predecessor:\n    assumes \"n \\<in> set (\\<alpha>n g) - {Entry g}\" and[simp]: \"invar g\"\n    obtains n' where \"Suc (shortestPath g n') = shortestPath g n\" \"n' \\<in> set (predecessors g n)\"", "lemma successor_in_\\<alpha>n[simp]:\n    assumes \"predecessors g n \\<noteq> []\" and[simp]: \"invar g\"\n    shows \"n \\<in> set (\\<alpha>n g)\"", "lemma shortestPath_single_predecessor:\n    assumes \"predecessors g n = [m]\" and[simp]: \"invar g\"\n    shows \"shortestPath g m < shortestPath g n\"", "lemma strict_dom_shortestPath_order:\n    assumes \"strict_dom g n m\" \"m \\<in> set (\\<alpha>n g)\" \"invar g\"\n    shows \"shortestPath g n < shortestPath g m\"", "lemma dominates_shortestPath_order:\n    assumes \"dominates g n m\" \"m \\<in> set (\\<alpha>n g)\" \"invar g\"\n    shows \"shortestPath g n \\<le> shortestPath g m\"", "lemma strict_dom_trans:\n    assumes[simp]: \"invar g\"\n    assumes \"strict_dom g n m\" \"strict_dom g m m'\"\n    shows \"strict_dom g n m'\"", "lemma[simp]:\n    assumes \"EntryPath g ns\" \"prefix ns' ns\" \"ns' \\<noteq> []\"\n    shows \"EntryPath g ns'\"", "lemma EntryPath_suffix:\n    assumes \"EntryPath g ns\" \"suffix ns' ns\" \"ns' \\<noteq> []\"\n    shows \"EntryPath g ns'\"", "lemma EntryPath_butlast_less_last:\n    assumes \"EntryPath g ns\" \"z \\<in> set (butlast ns)\"\n    shows \"shortestPath g z < shortestPath g (last ns)\"", "lemma EntryPath_distinct:\n    assumes \"EntryPath g ns\"\n    shows \"distinct ns\"", "lemma Entry_reachesE:\n    assumes \"n \\<in> set (\\<alpha>n g)\" and[simp]: \"invar g\"\n    obtains ns where \"g \\<turnstile> Entry g-ns\\<rightarrow>n\" \"EntryPath g ns\""], "translations": [["", "lemma get_edge_simps [simp]:\n  \"getFrom (f,d,t) = f\"\n  \"getData (f,d,t) = d\"\n  \"getTo (f,d,t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. getFrom (f, d, t) = f &&& getData (f, d, t) = d &&& getTo (f, d, t) = t", "by (simp_all add: getFrom_def getData_def getTo_def)"], ["", "text \\<open>Predecessors of a node.\\<close>"], ["", "definition pred :: \"('v,'w) graph \\<Rightarrow> 'v \\<Rightarrow> ('v\\<times>'w) set\"\n    where \"pred G v \\<equiv> {(v',w). (v',w,v)\\<in>edges G}\""], ["", "lemma pred_finite[simp, intro]: \"finite (edges G) \\<Longrightarrow> finite (pred G v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges G) \\<Longrightarrow> finite (pred G v)", "unfolding pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges G) \\<Longrightarrow>\n    finite {(v', w). (v', w, v) \\<in> edges G}", "by (rule finite_subset[where B=\"(\\<lambda>(v,w,v'). (v,w))`edges G\"]) force+"], ["", "lemma pred_empty[simp]: \"pred empty v = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred Graph.empty v = {}", "unfolding empty_def pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(v', w). (v', w, v) \\<in> edges Graph.empty} = {}", "by auto"], ["", "lemma (in valid_graph) pred_subset: \"pred G v \\<subseteq> V\\<times>UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred G v \\<subseteq> V \\<times> UNIV", "unfolding pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(v', w). (v', w, v) \\<in> E} \\<subseteq> V \\<times> UNIV", "using E_valid"], ["proof (prove)\nusing this:\n  fst ` E \\<subseteq> V\n  snd ` snd ` E \\<subseteq> V\n\ngoal (1 subgoal):\n 1. {(v', w). (v', w, v) \\<in> E} \\<subseteq> V \\<times> UNIV", "by (force)"], ["", "type_synonym ('V,'W,'\\<sigma>,'G) graph_pred_it =\n    \"'G \\<Rightarrow> 'V \\<Rightarrow> ('V\\<times>'W,'\\<sigma>) set_iterator\""], ["", "locale graph_pred_it_defs =\n    fixes pred_list_it :: \"'G \\<Rightarrow> 'V \\<Rightarrow> ('V\\<times>'W,('V\\<times>'W) list) set_iterator\"\n  begin"], ["", "definition \"pred_it g v \\<equiv> it_to_it (pred_list_it g v)\""], ["", "end"], ["", "locale graph_pred_it = graph \\<alpha> invar + graph_pred_it_defs pred_list_it\n    for \\<alpha> :: \"'G \\<Rightarrow> ('V,'W) graph\" and invar and\n    pred_list_it :: \"'G \\<Rightarrow> 'V \\<Rightarrow> ('V\\<times>'W,('V\\<times>'W) list) set_iterator\" +\n    assumes pred_list_it_correct:\n      \"invar g \\<Longrightarrow> set_iterator (pred_list_it g v) (pred (\\<alpha> g) v)\"\n  begin"], ["", "lemma pred_it_correct:\n      \"invar g \\<Longrightarrow> set_iterator (pred_it g v) (pred (\\<alpha> g) v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar g \\<Longrightarrow>\n    set_iterator (pred_it g v) (pred (\\<alpha> g) v)", "unfolding pred_it_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. invar g \\<Longrightarrow>\n    set_iterator (it_to_it (pred_list_it g v)) (pred (\\<alpha> g) v)", "apply (rule it_to_it_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. invar g \\<Longrightarrow>\n    set_iterator (pred_list_it g v) (pred (\\<alpha> g) v)", "by (rule pred_list_it_correct)"], ["", "lemma pi_pred_it[icf_proper_iteratorI]:\n      \"proper_it (pred_it S v) (pred_it S v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it (pred_it S v) (pred_it S v)", "unfolding pred_it_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it (it_to_it (pred_list_it S v)) (it_to_it (pred_list_it S v))", "by (intro icf_proper_iteratorI)"], ["", "lemma pred_it_proper[proper_it]:\n      \"proper_it' (\\<lambda>S. pred_it S v) (\\<lambda>S. pred_it S v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' (\\<lambda>S. pred_it S v) (\\<lambda>S. pred_it S v)", "apply (rule proper_it'I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. proper_it (pred_it s v) (pred_it s v)", "by (rule pi_pred_it)"], ["", "end"], ["", "record ('V,'W,'G) graph_ops = \"('V,'W,'G) GraphSpec.graph_ops\" +\n    gop_pred_list_it :: \"'G \\<Rightarrow> 'V \\<Rightarrow> ('V\\<times>'W,('V\\<times>'W) list) set_iterator\""], ["", "lemma (in graph_pred_it) pred_it_is_iterator[refine_transfer]:\n    \"invar g \\<Longrightarrow> set_iterator (pred_it g v) (pred (\\<alpha> g) v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar g \\<Longrightarrow>\n    set_iterator (pred_it g v) (pred (\\<alpha> g) v)", "by (rule pred_it_correct)"], ["", "locale StdGraphDefs = GraphSpec.StdGraphDefs ops\n  + graph_pred_it_defs \"gop_pred_list_it ops\"\n  for ops :: \"('V,'W,'G,'m) graph_ops_scheme\"\nbegin"], ["", "abbreviation pred_list_it  where \"pred_list_it \\<equiv> gop_pred_list_it ops\""], ["", "end"], ["", "locale StdGraph = StdGraphDefs + org:StdGraph +\n  graph_pred_it \\<alpha> invar pred_list_it"], ["", "locale graph_path_base =\n  graph_nodes_it_defs \"\\<lambda>g. foldri (\\<alpha>n g)\" +\n  graph_pred_it_defs \"\\<lambda>g n. foldri (inEdges' g n)\"\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges' :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD) list\"\nbegin"], ["", "(*\n  abbreviation \\<alpha>e :: \"'g \\<Rightarrow> ('node \\<times> 'edgeD \\<times> 'node) set\"\n  where \"\\<alpha>e g \\<equiv> graph.edges (\\<alpha> g)\"\n  definition \\<alpha>n :: \"'g \\<Rightarrow> 'node list\"\n  where \"\\<alpha>n g \\<equiv> nodes_it g (\\<lambda>_. True) (#) []\"\n*)"], ["", "definition inEdges :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD \\<times> 'node) list\"\n  where \"inEdges g n \\<equiv> map (\\<lambda>(f,d). (f,d,n)) (inEdges' g n)\""], ["", "definition predecessors :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'node list\" where\n    \"predecessors g n \\<equiv> map getFrom (inEdges g n)\""], ["", "definition successors :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'node list\" where\n    \"successors g m \\<equiv> [n . n \\<leftarrow> \\<alpha>n g, m \\<in> set (predecessors g n)]\""], ["", "declare predecessors_def [code]"], ["", "declare [[inductive_internals]]"], ["", "inductive path :: \"'g \\<Rightarrow> 'node list \\<Rightarrow> bool\"\n    for g :: 'g\n  where\n    empty_path[intro]: \"\\<lbrakk>n \\<in> set (\\<alpha>n g); invar g\\<rbrakk> \\<Longrightarrow> path g [n]\"\n    | Cons_path[intro]: \"\\<lbrakk>path g ns; n' \\<in> set (predecessors g (hd ns))\\<rbrakk> \\<Longrightarrow> path g (n'#ns)\""], ["", "definition path2 :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'node list \\<Rightarrow> 'node \\<Rightarrow> bool\" (\"_ \\<turnstile> _-_\\<rightarrow>_\" [51,0,0,51] 80) where\n    \"path2 g n ns m \\<equiv> path g ns \\<and> n = hd ns \\<and> m = last ns\""], ["", "abbreviation \"\\<alpha> g \\<equiv> \\<lparr>nodes = set (\\<alpha>n g), edges = \\<alpha>e g\\<rparr>\""], ["", "end"], ["", "locale graph_path =\n  graph_path_base \\<alpha>e \\<alpha>n invar inEdges' +\n  graph \\<alpha> invar +\n  ni: graph_nodes_it \\<alpha> invar \"\\<lambda>g. foldri (\\<alpha>n g)\" +\n  pi: graph_pred_it \\<alpha> invar \"\\<lambda>g n. foldri (inEdges' g n)\"\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges' :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD) list\"\nbegin"], ["", "lemma \\<alpha>n_correct: \"invar g \\<Longrightarrow> set (\\<alpha>n g) \\<supseteq> getFrom ` \\<alpha>e g \\<union> getTo ` \\<alpha>e g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar g \\<Longrightarrow>\n    getFrom ` \\<alpha>e g \\<union> getTo ` \\<alpha>e g\n    \\<subseteq> set (\\<alpha>n g)", "by (frule valid) (auto dest: valid_graph.E_validD)"], ["", "lemma \\<alpha>n_distinct: \"invar g \\<Longrightarrow> distinct (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar g \\<Longrightarrow> distinct (\\<alpha>n g)", "by (frule ni.nodes_list_it_correct)\n      (metis foldri_cons_id iterate_to_list_correct iterate_to_list_def)"], ["", "lemma inEdges_correct':\n    assumes \"invar g\"\n    shows \"set (inEdges g n) = (\\<lambda>(f,d). (f,d,n)) ` (pred (\\<alpha> g) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (inEdges g n) = (\\<lambda>(f, d). (f, d, n)) ` pred (\\<alpha> g) n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (inEdges g n) = (\\<lambda>(f, d). (f, d, n)) ` pred (\\<alpha> g) n", "from iterate_to_list_correct [OF pi.pred_list_it_correct [OF assms], of n]"], ["proof (chain)\npicking this:\n  set (iterate_to_list (foldri (inEdges' g n))) = pred (\\<alpha> g) n \\<and>\n  distinct (iterate_to_list (foldri (inEdges' g n)))", "show ?thesis"], ["proof (prove)\nusing this:\n  set (iterate_to_list (foldri (inEdges' g n))) = pred (\\<alpha> g) n \\<and>\n  distinct (iterate_to_list (foldri (inEdges' g n)))\n\ngoal (1 subgoal):\n 1. set (inEdges g n) = (\\<lambda>(f, d). (f, d, n)) ` pred (\\<alpha> g) n", "by (auto intro: rev_image_eqI simp: iterate_to_list_def pred_def inEdges_def)"], ["proof (state)\nthis:\n  set (inEdges g n) = (\\<lambda>(f, d). (f, d, n)) ` pred (\\<alpha> g) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inEdges_correct [intro!, simp]:\n    \"invar g \\<Longrightarrow> set (inEdges g n) = {(_, _, t). t = n} \\<inter> \\<alpha>e g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar g \\<Longrightarrow>\n    set (inEdges g n) = {(uu_, uu_, t). t = n} \\<inter> \\<alpha>e g", "by (auto simp: inEdges_correct' pred_def)"], ["", "lemma in_set_\\<alpha>nI1 [intro]: \"\\<lbrakk>invar g; x \\<in> getFrom ` \\<alpha>e g\\<rbrakk> \\<Longrightarrow> x \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar g; x \\<in> getFrom ` \\<alpha>e g\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set (\\<alpha>n g)", "using \\<alpha>n_correct"], ["proof (prove)\nusing this:\n  invar ?g \\<Longrightarrow>\n  getFrom ` \\<alpha>e ?g \\<union> getTo ` \\<alpha>e ?g\n  \\<subseteq> set (\\<alpha>n ?g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>invar g; x \\<in> getFrom ` \\<alpha>e g\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set (\\<alpha>n g)", "by blast"], ["", "lemma in_set_\\<alpha>nI2 [intro]: \"\\<lbrakk>invar g; x \\<in> getTo ` \\<alpha>e g\\<rbrakk> \\<Longrightarrow> x \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar g; x \\<in> getTo ` \\<alpha>e g\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set (\\<alpha>n g)", "using \\<alpha>n_correct"], ["proof (prove)\nusing this:\n  invar ?g \\<Longrightarrow>\n  getFrom ` \\<alpha>e ?g \\<union> getTo ` \\<alpha>e ?g\n  \\<subseteq> set (\\<alpha>n ?g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>invar g; x \\<in> getTo ` \\<alpha>e g\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set (\\<alpha>n g)", "by blast"], ["", "(*\n\nlocale graph_path_base = graph_inEdges_base \\<alpha>e invar inEdges + graph_nodes_base \\<alpha>e invar \\<alpha>n\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD \\<times> 'node) list\"\nbegin\n*)\n\n(*\nend\n\nlocale graph_path = graph_path_base \\<alpha>e \\<alpha>n invar inEdges + graph_inEdges \\<alpha>e invar inEdges + graph_nodes \\<alpha>e invar \\<alpha>n\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD \\<times> 'node) list\"\nbegin\n*)"], ["", "lemma edge_to_node:\n    assumes \"invar g\" and \"e \\<in> \\<alpha>e g\"\n    obtains \"getFrom e \\<in> set (\\<alpha>n g)\" and \"getTo e \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>getFrom e \\<in> set (\\<alpha>n g);\n      getTo e \\<in> set (\\<alpha>n g)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2) \\<alpha>n_correct [OF \\<open>invar g\\<close>]"], ["proof (prove)\nusing this:\n  e \\<in> \\<alpha>e g\n  getFrom ` \\<alpha>e g \\<union> getTo ` \\<alpha>e g\n  \\<subseteq> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>getFrom e \\<in> set (\\<alpha>n g);\n      getTo e \\<in> set (\\<alpha>n g)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases e) (auto 4 3 intro: rev_image_eqI)"], ["", "lemma inEdge_to_edge:\n    assumes \"e \\<in> set (inEdges g n)\" and \"invar g\"\n    obtains eD n' where \"(n',eD,n) \\<in> \\<alpha>e g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n' eD.\n        (n', eD, n) \\<in> \\<alpha>e g \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  e \\<in> set (inEdges g n)\n  invar g\n\ngoal (1 subgoal):\n 1. (\\<And>n' eD.\n        (n', eD, n) \\<in> \\<alpha>e g \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma edge_to_inEdge:\n    assumes \"(n,eD,m) \\<in> \\<alpha>e g\" \"invar g\"\n    obtains \"(n,eD,m) \\<in> set (inEdges g m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((n, eD, m) \\<in> set (inEdges g m) \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (n, eD, m) \\<in> \\<alpha>e g\n  invar g\n\ngoal (1 subgoal):\n 1. ((n, eD, m) \\<in> set (inEdges g m) \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma edge_to_predecessors:\n    assumes \"(n,eD,m) \\<in> \\<alpha>e g\" \"invar g\"\n    obtains \"n \\<in> set (predecessors g m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<in> set (predecessors g m) \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "proof atomize_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<in> set (predecessors g m)", "from assms"], ["proof (chain)\npicking this:\n  (n, eD, m) \\<in> \\<alpha>e g\n  invar g", "have \"(n,eD,m) \\<in> set (inEdges g m)\""], ["proof (prove)\nusing this:\n  (n, eD, m) \\<in> \\<alpha>e g\n  invar g\n\ngoal (1 subgoal):\n 1. (n, eD, m) \\<in> set (inEdges g m)", "by (rule edge_to_inEdge)"], ["proof (state)\nthis:\n  (n, eD, m) \\<in> set (inEdges g m)\n\ngoal (1 subgoal):\n 1. n \\<in> set (predecessors g m)", "thus \"n \\<in> set (predecessors g m)\""], ["proof (prove)\nusing this:\n  (n, eD, m) \\<in> set (inEdges g m)\n\ngoal (1 subgoal):\n 1. n \\<in> set (predecessors g m)", "unfolding predecessors_def"], ["proof (prove)\nusing this:\n  (n, eD, m) \\<in> set (inEdges g m)\n\ngoal (1 subgoal):\n 1. n \\<in> set (map getFrom (inEdges g m))", "by (metis get_edge_simps(1) image_eqI set_map)"], ["proof (state)\nthis:\n  n \\<in> set (predecessors g m)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma predecessor_is_node[elim]: \"\\<lbrakk>n \\<in> set (predecessors g n'); invar g\\<rbrakk> \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (predecessors g n'); invar g\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (\\<alpha>n g)", "unfolding predecessors_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (map getFrom (inEdges g n')); invar g\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (\\<alpha>n g)", "by (fastforce intro: rev_image_eqI simp: getTo_def getFrom_def)"], ["", "lemma successor_is_node[elim]: \"\\<lbrakk>n \\<in> set (predecessors g n'); n \\<in> set (\\<alpha>n g); invar g\\<rbrakk> \\<Longrightarrow> n' \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (predecessors g n'); n \\<in> set (\\<alpha>n g);\n     invar g\\<rbrakk>\n    \\<Longrightarrow> n' \\<in> set (\\<alpha>n g)", "unfolding predecessors_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (map getFrom (inEdges g n'));\n     n \\<in> set (\\<alpha>n g); invar g\\<rbrakk>\n    \\<Longrightarrow> n' \\<in> set (\\<alpha>n g)", "by (fastforce intro: rev_image_eqI)"], ["", "lemma successors_predecessors[simp]: \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> n \\<in> set (successors g m) \\<longleftrightarrow> m \\<in> set (predecessors g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g) \\<Longrightarrow>\n    (n \\<in> set (successors g m)) = (m \\<in> set (predecessors g n))", "by (auto simp:successors_def predecessors_def)"], ["", "lemma path_not_Nil[simp, dest]: \"path g ns \\<Longrightarrow> ns \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<Longrightarrow> ns \\<noteq> []", "by (erule path.cases) auto"], ["", "lemma path2_not_Nil[simp]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> ns \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> ns \\<noteq> []", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<and> n = hd ns \\<and> m = last ns \\<Longrightarrow>\n    ns \\<noteq> []", "by auto"], ["", "lemma path2_not_Nil2[simp]: \"\\<not> g \\<turnstile> n-[]\\<rightarrow>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> g \\<turnstile> n-[]\\<rightarrow>m", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (local.path g [] \\<and> n = hd [] \\<and> m = last [])", "by auto"], ["", "lemma path2_not_Nil3[simp]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> length ns \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> 1 \\<le> length ns", "by (cases ns, auto)"], ["", "lemma empty_path2[intro]: \"\\<lbrakk>n \\<in> set (\\<alpha>n g); invar g\\<rbrakk> \\<Longrightarrow> g \\<turnstile> n-[n]\\<rightarrow>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g); invar g\\<rbrakk>\n    \\<Longrightarrow> g \\<turnstile> n-[n]\\<rightarrow>n", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g); invar g\\<rbrakk>\n    \\<Longrightarrow> local.path g [n] \\<and> n = hd [n] \\<and> n = last [n]", "by auto"], ["", "lemma Cons_path2[intro]: \"\\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; n' \\<in> set (predecessors g n)\\<rbrakk> \\<Longrightarrow> g \\<turnstile> n'-n'#ns\\<rightarrow>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m;\n     n' \\<in> set (predecessors g n)\\<rbrakk>\n    \\<Longrightarrow> g \\<turnstile> n'-n' # ns\\<rightarrow>m", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n     n' \\<in> set (predecessors g n)\\<rbrakk>\n    \\<Longrightarrow> local.path g (n' # ns) \\<and>\n                      n' = hd (n' # ns) \\<and> m = last (n' # ns)", "by auto"], ["", "lemma path2_cases:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    obtains (empty_path) \"ns = [n]\" \"m = n\"\n          | (Cons_path) \"g \\<turnstile> hd (tl ns)-tl ns\\<rightarrow>m\" \"n \\<in> set (predecessors g (hd (tl ns)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>ns = [n]; m = n\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<lbrakk>g \\<turnstile> hd (tl ns)-tl ns\\<rightarrow>m;\n      n \\<in> set (predecessors g (hd (tl ns)))\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>ns = [n]; m = n\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<lbrakk>g \\<turnstile> hd (tl ns)-tl ns\\<rightarrow>m;\n      n \\<in> set (predecessors g (hd (tl ns)))\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "from assms"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m", "have 1: \"path g ns\" \"hd ns = n\" \"last ns = m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. local.path g ns &&& hd ns = n &&& last ns = m", "by (auto simp: path2_def)"], ["proof (state)\nthis:\n  local.path g ns\n  hd ns = n\n  last ns = m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>ns = [n]; m = n\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<lbrakk>g \\<turnstile> hd (tl ns)-tl ns\\<rightarrow>m;\n      n \\<in> set (predecessors g (hd (tl ns)))\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "from this(1)"], ["proof (chain)\npicking this:\n  local.path g ns", "show thesis"], ["proof (prove)\nusing this:\n  local.path g ns\n\ngoal (1 subgoal):\n 1. thesis", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>ns = [n]; n \\<in> set (\\<alpha>n g); invar g\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>nsa n'.\n       \\<lbrakk>ns = n' # nsa; local.path g nsa;\n        n' \\<in> set (predecessors g (hd nsa))\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (empty_path n)"], ["proof (state)\nthis:\n  ns = [n]\n  n \\<in> set (\\<alpha>n g)\n  invar g\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>ns = [n]; n \\<in> set (\\<alpha>n g); invar g\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>nsa n'.\n       \\<lbrakk>ns = n' # nsa; local.path g nsa;\n        n' \\<in> set (predecessors g (hd nsa))\\<rbrakk>\n       \\<Longrightarrow> thesis", "with 1"], ["proof (chain)\npicking this:\n  local.path g ns\n  hd ns = n\n  last ns = m\n  ns = [n]\n  n \\<in> set (\\<alpha>n g)\n  invar g", "show thesis"], ["proof (prove)\nusing this:\n  local.path g ns\n  hd ns = n\n  last ns = m\n  ns = [n]\n  n \\<in> set (\\<alpha>n g)\n  invar g\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that(1), auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>nsa n'.\n       \\<lbrakk>ns = n' # nsa; local.path g nsa;\n        n' \\<in> set (predecessors g (hd nsa))\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nsa n'.\n       \\<lbrakk>ns = n' # nsa; local.path g nsa;\n        n' \\<in> set (predecessors g (hd nsa))\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons_path ns n')"], ["proof (state)\nthis:\n  ns = n' # ns\n  local.path g ns\n  n' \\<in> set (predecessors g (hd ns))\n\ngoal (1 subgoal):\n 1. \\<And>nsa n'.\n       \\<lbrakk>ns = n' # nsa; local.path g nsa;\n        n' \\<in> set (predecessors g (hd nsa))\\<rbrakk>\n       \\<Longrightarrow> thesis", "with 1"], ["proof (chain)\npicking this:\n  local.path g ns\n  hd ns = n\n  last ns = m\n  ns = n' # ns\n  local.path g ns\n  n' \\<in> set (predecessors g (hd ns))", "show thesis"], ["proof (prove)\nusing this:\n  local.path g ns\n  hd ns = n\n  last ns = m\n  ns = n' # ns\n  local.path g ns\n  n' \\<in> set (predecessors g (hd ns))\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that(2), auto simp: path2_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_induct[consumes 1, case_names empty_path Cons_path]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    assumes empty: \"invar g \\<Longrightarrow> P m [m] m\"\n    assumes Cons: \"\\<And>ns n' n. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> P n ns m \\<Longrightarrow> n' \\<in> set (predecessors g n) \\<Longrightarrow> P n' (n' # ns) m\"\n    shows \"P n ns m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P n ns m", "using assms(1)"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. P n ns m", "unfolding path2_def"], ["proof (prove)\nusing this:\n  local.path g ns \\<and> n = hd ns \\<and> m = last ns\n\ngoal (1 subgoal):\n 1. P n ns m", "apply-"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<and> n = hd ns \\<and> m = last ns \\<Longrightarrow>\n    P n ns m", "proof (erule conjE, induction arbitrary: n rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n na.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g); invar g;\n        na = hd [n] \\<and> m = last [n]\\<rbrakk>\n       \\<Longrightarrow> P na [n] m\n 2. \\<And>ns n' n.\n       \\<lbrakk>local.path g ns;\n        \\<And>n. n = hd ns \\<and> m = last ns \\<Longrightarrow> P n ns m;\n        n' \\<in> set (predecessors g (hd ns));\n        n = hd (n' # ns) \\<and> m = last (n' # ns)\\<rbrakk>\n       \\<Longrightarrow> P n (n' # ns) m", "case empty_path"], ["proof (state)\nthis:\n  n_ \\<in> set (\\<alpha>n g)\n  invar g\n  n = hd [n_] \\<and> m = last [n_]\n\ngoal (2 subgoals):\n 1. \\<And>n na.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g); invar g;\n        na = hd [n] \\<and> m = last [n]\\<rbrakk>\n       \\<Longrightarrow> P na [n] m\n 2. \\<And>ns n' n.\n       \\<lbrakk>local.path g ns;\n        \\<And>n. n = hd ns \\<and> m = last ns \\<Longrightarrow> P n ns m;\n        n' \\<in> set (predecessors g (hd ns));\n        n = hd (n' # ns) \\<and> m = last (n' # ns)\\<rbrakk>\n       \\<Longrightarrow> P n (n' # ns) m", "with empty"], ["proof (chain)\npicking this:\n  invar g \\<Longrightarrow> P m [m] m\n  n_ \\<in> set (\\<alpha>n g)\n  invar g\n  n = hd [n_] \\<and> m = last [n_]", "show ?case"], ["proof (prove)\nusing this:\n  invar g \\<Longrightarrow> P m [m] m\n  n_ \\<in> set (\\<alpha>n g)\n  invar g\n  n = hd [n_] \\<and> m = last [n_]\n\ngoal (1 subgoal):\n 1. P n [n_] m", "by simp"], ["proof (state)\nthis:\n  P n [n_] m\n\ngoal (1 subgoal):\n 1. \\<And>ns n' n.\n       \\<lbrakk>local.path g ns;\n        \\<And>n. n = hd ns \\<and> m = last ns \\<Longrightarrow> P n ns m;\n        n' \\<in> set (predecessors g (hd ns));\n        n = hd (n' # ns) \\<and> m = last (n' # ns)\\<rbrakk>\n       \\<Longrightarrow> P n (n' # ns) m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns n' n.\n       \\<lbrakk>local.path g ns;\n        \\<And>n. n = hd ns \\<and> m = last ns \\<Longrightarrow> P n ns m;\n        n' \\<in> set (predecessors g (hd ns));\n        n = hd (n' # ns) \\<and> m = last (n' # ns)\\<rbrakk>\n       \\<Longrightarrow> P n (n' # ns) m", "case (Cons_path ns n' n'')"], ["proof (state)\nthis:\n  local.path g ns\n  n' \\<in> set (predecessors g (hd ns))\n  ?n1 = hd ns \\<and> m = last ns \\<Longrightarrow> P ?n1 ns m\n  n'' = hd (n' # ns) \\<and> m = last (n' # ns)\n\ngoal (1 subgoal):\n 1. \\<And>ns n' n.\n       \\<lbrakk>local.path g ns;\n        \\<And>n. n = hd ns \\<and> m = last ns \\<Longrightarrow> P n ns m;\n        n' \\<in> set (predecessors g (hd ns));\n        n = hd (n' # ns) \\<and> m = last (n' # ns)\\<rbrakk>\n       \\<Longrightarrow> P n (n' # ns) m", "hence[simp]: \"n'' = n'\""], ["proof (prove)\nusing this:\n  local.path g ns\n  n' \\<in> set (predecessors g (hd ns))\n  ?n1 = hd ns \\<and> m = last ns \\<Longrightarrow> P ?n1 ns m\n  n'' = hd (n' # ns) \\<and> m = last (n' # ns)\n\ngoal (1 subgoal):\n 1. n'' = n'", "by simp"], ["proof (state)\nthis:\n  n'' = n'\n\ngoal (1 subgoal):\n 1. \\<And>ns n' n.\n       \\<lbrakk>local.path g ns;\n        \\<And>n. n = hd ns \\<and> m = last ns \\<Longrightarrow> P n ns m;\n        n' \\<in> set (predecessors g (hd ns));\n        n = hd (n' # ns) \\<and> m = last (n' # ns)\\<rbrakk>\n       \\<Longrightarrow> P n (n' # ns) m", "from Cons_path Cons"], ["proof (chain)\npicking this:\n  local.path g ns\n  n' \\<in> set (predecessors g (hd ns))\n  ?n1 = hd ns \\<and> m = last ns \\<Longrightarrow> P ?n1 ns m\n  n'' = hd (n' # ns) \\<and> m = last (n' # ns)\n  \\<lbrakk>g \\<turnstile> ?n1-?ns1\\<rightarrow>m; P ?n1 ?ns1 m;\n   ?n'1 \\<in> set (predecessors g ?n1)\\<rbrakk>\n  \\<Longrightarrow> P ?n'1 (?n'1 # ?ns1) m", "show ?case"], ["proof (prove)\nusing this:\n  local.path g ns\n  n' \\<in> set (predecessors g (hd ns))\n  ?n1 = hd ns \\<and> m = last ns \\<Longrightarrow> P ?n1 ns m\n  n'' = hd (n' # ns) \\<and> m = last (n' # ns)\n  \\<lbrakk>g \\<turnstile> ?n1-?ns1\\<rightarrow>m; P ?n1 ?ns1 m;\n   ?n'1 \\<in> set (predecessors g ?n1)\\<rbrakk>\n  \\<Longrightarrow> P ?n'1 (?n'1 # ?ns1) m\n\ngoal (1 subgoal):\n 1. P n'' (n' # ns) m", "unfolding path2_def"], ["proof (prove)\nusing this:\n  local.path g ns\n  n' \\<in> set (predecessors g (hd ns))\n  ?n1 = hd ns \\<and> m = last ns \\<Longrightarrow> P ?n1 ns m\n  n'' = hd (n' # ns) \\<and> m = last (n' # ns)\n  \\<lbrakk>local.path g ?ns1 \\<and> ?n1 = hd ?ns1 \\<and> m = last ?ns1;\n   P ?n1 ?ns1 m; ?n'1 \\<in> set (predecessors g ?n1)\\<rbrakk>\n  \\<Longrightarrow> P ?n'1 (?n'1 # ?ns1) m\n\ngoal (1 subgoal):\n 1. P n'' (n' # ns) m", "by auto"], ["proof (state)\nthis:\n  P n'' (n' # ns) m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_invar[intro]: \"path g ns \\<Longrightarrow> invar g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<Longrightarrow> invar g", "by (induction rule:path.induct)"], ["", "lemma path_in_\\<alpha>n[intro]: \"\\<lbrakk>path g ns; n \\<in> set ns\\<rbrakk> \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.path g ns; n \\<in> set ns\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (\\<alpha>n g)", "by (induct ns arbitrary: n rule:path.induct) auto"], ["", "lemma path2_in_\\<alpha>n[elim]: \"\\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; l \\<in> set ns\\<rbrakk> \\<Longrightarrow> l \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; l \\<in> set ns\\<rbrakk>\n    \\<Longrightarrow> l \\<in> set (\\<alpha>n g)", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n     l \\<in> set ns\\<rbrakk>\n    \\<Longrightarrow> l \\<in> set (\\<alpha>n g)", "by auto"], ["", "lemma path2_hd_in_\\<alpha>n[elim]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow>\n    n \\<in> set (\\<alpha>n g)", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<and> n = hd ns \\<and> m = last ns \\<Longrightarrow>\n    n \\<in> set (\\<alpha>n g)", "by auto"], ["", "lemma path2_tl_in_\\<alpha>n[elim]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> m \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow>\n    m \\<in> set (\\<alpha>n g)", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<and> n = hd ns \\<and> m = last ns \\<Longrightarrow>\n    m \\<in> set (\\<alpha>n g)", "by auto"], ["", "lemma path2_forget_hd[simp]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> g \\<turnstile> hd ns-ns\\<rightarrow>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow>\n    g \\<turnstile> hd ns-ns\\<rightarrow>m", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<and> n = hd ns \\<and> m = last ns \\<Longrightarrow>\n    local.path g ns \\<and> hd ns = hd ns \\<and> m = last ns", "by simp"], ["", "lemma path2_forget_last[simp]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> g \\<turnstile> n-ns\\<rightarrow>last ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow>\n    g \\<turnstile> n-ns\\<rightarrow>last ns", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<and> n = hd ns \\<and> m = last ns \\<Longrightarrow>\n    local.path g ns \\<and> n = hd ns \\<and> last ns = last ns", "by simp"], ["", "lemma path_hd[dest]: \"path g (n#ns) \\<Longrightarrow> path g [n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g (n # ns) \\<Longrightarrow> local.path g [n]", "by (rule empty_path, auto elim:path.cases)"], ["", "lemma path_by_tail[intro]: \"\\<lbrakk>path g (n#n'#ns); path g (n'#ns) \\<Longrightarrow> path g (n'#ms)\\<rbrakk> \\<Longrightarrow> path g (n#n'#ms)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.path g (n # n' # ns);\n     local.path g (n' # ns) \\<Longrightarrow>\n     local.path g (n' # ms)\\<rbrakk>\n    \\<Longrightarrow> local.path g (n # n' # ms)", "by (rule path.cases) auto"], ["", "lemma \\<alpha>n_in_\\<alpha>nE [elim]:\n    assumes \"(n,e,m) \\<in> \\<alpha>e g\" and \"invar g\"\n    obtains \"n \\<in> set (\\<alpha>n g)\" and \"m \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (n, e, m) \\<in> \\<alpha>e g\n  invar g\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: edge_to_node)"], ["", "lemma path_split:\n    assumes \"path g (ns@m#ns')\"\n    shows \"path g (ns@[m])\" \"path g(m#ns')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g (ns @ [m]) &&& local.path g (m # ns')", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. local.path g (ns @ [m])\n 2. local.path g (m # ns')", "from assms"], ["proof (chain)\npicking this:\n  local.path g (ns @ m # ns')", "show \"path g (ns@[m])\""], ["proof (prove)\nusing this:\n  local.path g (ns @ m # ns')\n\ngoal (1 subgoal):\n 1. local.path g (ns @ [m])", "proof (induct ns)"], ["proof (state)\ngoal (2 subgoals):\n 1. local.path g ([] @ m # ns') \\<Longrightarrow> local.path g ([] @ [m])\n 2. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ m # ns') \\<Longrightarrow>\n                local.path g (ns @ [m]);\n        local.path g ((a # ns) @ m # ns')\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [m])", "case (Cons n ns)"], ["proof (state)\nthis:\n  local.path g (ns @ m # ns') \\<Longrightarrow> local.path g (ns @ [m])\n  local.path g ((n # ns) @ m # ns')\n\ngoal (2 subgoals):\n 1. local.path g ([] @ m # ns') \\<Longrightarrow> local.path g ([] @ [m])\n 2. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ m # ns') \\<Longrightarrow>\n                local.path g (ns @ [m]);\n        local.path g ((a # ns) @ m # ns')\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [m])", "thus ?case"], ["proof (prove)\nusing this:\n  local.path g (ns @ m # ns') \\<Longrightarrow> local.path g (ns @ [m])\n  local.path g ((n # ns) @ m # ns')\n\ngoal (1 subgoal):\n 1. local.path g ((n # ns) @ [m])", "by (cases ns) auto"], ["proof (state)\nthis:\n  local.path g ((n # ns) @ [m])\n\ngoal (1 subgoal):\n 1. local.path g ([] @ m # ns') \\<Longrightarrow> local.path g ([] @ [m])", "qed auto"], ["proof (state)\nthis:\n  local.path g (ns @ [m])\n\ngoal (1 subgoal):\n 1. local.path g (m # ns')", "from assms"], ["proof (chain)\npicking this:\n  local.path g (ns @ m # ns')", "show \"path g (m#ns')\""], ["proof (prove)\nusing this:\n  local.path g (ns @ m # ns')\n\ngoal (1 subgoal):\n 1. local.path g (m # ns')", "proof (induct ns)"], ["proof (state)\ngoal (2 subgoals):\n 1. local.path g ([] @ m # ns') \\<Longrightarrow> local.path g (m # ns')\n 2. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ m # ns') \\<Longrightarrow>\n                local.path g (m # ns');\n        local.path g ((a # ns) @ m # ns')\\<rbrakk>\n       \\<Longrightarrow> local.path g (m # ns')", "case (Cons n ns)"], ["proof (state)\nthis:\n  local.path g (ns @ m # ns') \\<Longrightarrow> local.path g (m # ns')\n  local.path g ((n # ns) @ m # ns')\n\ngoal (2 subgoals):\n 1. local.path g ([] @ m # ns') \\<Longrightarrow> local.path g (m # ns')\n 2. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ m # ns') \\<Longrightarrow>\n                local.path g (m # ns');\n        local.path g ((a # ns) @ m # ns')\\<rbrakk>\n       \\<Longrightarrow> local.path g (m # ns')", "thus ?case"], ["proof (prove)\nusing this:\n  local.path g (ns @ m # ns') \\<Longrightarrow> local.path g (m # ns')\n  local.path g ((n # ns) @ m # ns')\n\ngoal (1 subgoal):\n 1. local.path g (m # ns')", "by (auto elim:path.cases)"], ["proof (state)\nthis:\n  local.path g (m # ns')\n\ngoal (1 subgoal):\n 1. local.path g ([] @ m # ns') \\<Longrightarrow> local.path g (m # ns')", "qed auto"], ["proof (state)\nthis:\n  local.path g (m # ns')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_split:\n    assumes \"g \\<turnstile> n-ns@n'#ns'\\<rightarrow>m\"\n    shows \"g \\<turnstile> n-ns@[n']\\<rightarrow>n'\" \"g \\<turnstile> n'-n'#ns'\\<rightarrow>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ [n']\\<rightarrow>n' &&&\n    g \\<turnstile> n'-n' # ns'\\<rightarrow>m", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns @ n' # ns'\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ [n']\\<rightarrow>n' &&&\n    g \\<turnstile> n'-n' # ns'\\<rightarrow>m", "unfolding path2_def"], ["proof (prove)\nusing this:\n  local.path g (ns @ n' # ns') \\<and>\n  n = hd (ns @ n' # ns') \\<and> m = last (ns @ n' # ns')\n\ngoal (1 subgoal):\n 1. local.path g (ns @ [n']) \\<and>\n    n = hd (ns @ [n']) \\<and> n' = last (ns @ [n']) &&&\n    local.path g (n' # ns') \\<and>\n    n' = hd (n' # ns') \\<and> m = last (n' # ns')", "by (auto intro:path_split iff:hd_append)"], ["", "lemma elem_set_implies_elem_tl_app_cons[simp]: \"x \\<in> set xs \\<Longrightarrow> x \\<in> set (tl (ys@y#xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow> x \\<in> set (tl (ys @ y # xs))", "by (induction ys arbitrary: y; auto)"], ["", "lemma path2_split_ex:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"x \\<in> set ns\"\n    obtains ns\\<^sub>1 ns\\<^sub>2 where \"g \\<turnstile> n-ns\\<^sub>1\\<rightarrow>x\" \"g \\<turnstile> x-ns\\<^sub>2\\<rightarrow>m\" \"ns = ns\\<^sub>1@tl ns\\<^sub>2\" \"ns = butlast ns\\<^sub>1@ns\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> n-ns\\<^sub>1\\<rightarrow>x;\n         g \\<turnstile> x-ns\\<^sub>2\\<rightarrow>m;\n         ns = ns\\<^sub>1 @ tl ns\\<^sub>2;\n         ns = butlast ns\\<^sub>1 @ ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> n-ns\\<^sub>1\\<rightarrow>x;\n         g \\<turnstile> x-ns\\<^sub>2\\<rightarrow>m;\n         ns = ns\\<^sub>1 @ tl ns\\<^sub>2;\n         ns = butlast ns\\<^sub>1 @ ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(2)"], ["proof (chain)\npicking this:\n  x \\<in> set ns", "obtain ns\\<^sub>1 ns\\<^sub>2 where \"ns = ns\\<^sub>1@x#ns\\<^sub>2\""], ["proof (prove)\nusing this:\n  x \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>2.\n        ns = ns\\<^sub>1 @ x # ns\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (rule split_list)"], ["proof (state)\nthis:\n  ns = ns\\<^sub>1 @ x # ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> n-ns\\<^sub>1\\<rightarrow>x;\n         g \\<turnstile> x-ns\\<^sub>2\\<rightarrow>m;\n         ns = ns\\<^sub>1 @ tl ns\\<^sub>2;\n         ns = butlast ns\\<^sub>1 @ ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms[simplified this]"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<^sub>1 @ x # ns\\<^sub>2\\<rightarrow>m\n  x \\<in> set (ns\\<^sub>1 @ x # ns\\<^sub>2)\n  ns = ns\\<^sub>1 @ x # ns\\<^sub>2", "show thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<^sub>1 @ x # ns\\<^sub>2\\<rightarrow>m\n  x \\<in> set (ns\\<^sub>1 @ x # ns\\<^sub>2)\n  ns = ns\\<^sub>1 @ x # ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that, auto dest:path2_split(1) path2_split(2) intro: suffixI)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_split_ex':\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"x \\<in> set ns\"\n    obtains ns\\<^sub>1 ns\\<^sub>2 where \"g \\<turnstile> n-ns\\<^sub>1\\<rightarrow>x\" \"g \\<turnstile> x-ns\\<^sub>2\\<rightarrow>m\" \"ns = butlast ns\\<^sub>1@ns\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> n-ns\\<^sub>1\\<rightarrow>x;\n         g \\<turnstile> x-ns\\<^sub>2\\<rightarrow>m;\n         ns = butlast ns\\<^sub>1 @ ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  x \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> n-ns\\<^sub>1\\<rightarrow>x;\n         g \\<turnstile> x-ns\\<^sub>2\\<rightarrow>m;\n         ns = butlast ns\\<^sub>1 @ ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule path2_split_ex)"], ["", "lemma path_snoc:\n    assumes \"path g (ns@[n])\" \"n \\<in> set (predecessors g m)\"\n    shows \"path g (ns@[n,m])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g (ns @ [n, m])", "using assms(1)"], ["proof (prove)\nusing this:\n  local.path g (ns @ [n])\n\ngoal (1 subgoal):\n 1. local.path g (ns @ [n, m])", "proof (induction ns)"], ["proof (state)\ngoal (2 subgoals):\n 1. local.path g ([] @ [n]) \\<Longrightarrow> local.path g ([] @ [n, m])\n 2. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ [n]) \\<Longrightarrow>\n                local.path g (ns @ [n, m]);\n        local.path g ((a # ns) @ [n])\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [n, m])", "case Nil"], ["proof (state)\nthis:\n  local.path g ([] @ [n])\n\ngoal (2 subgoals):\n 1. local.path g ([] @ [n]) \\<Longrightarrow> local.path g ([] @ [n, m])\n 2. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ [n]) \\<Longrightarrow>\n                local.path g (ns @ [n, m]);\n        local.path g ((a # ns) @ [n])\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [n, m])", "hence 1: \"n \\<in> set (\\<alpha>n g)\" \"invar g\""], ["proof (prove)\nusing this:\n  local.path g ([] @ [n])\n\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g) &&& invar g", "by auto"], ["proof (state)\nthis:\n  n \\<in> set (\\<alpha>n g)\n  invar g\n\ngoal (2 subgoals):\n 1. local.path g ([] @ [n]) \\<Longrightarrow> local.path g ([] @ [n, m])\n 2. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ [n]) \\<Longrightarrow>\n                local.path g (ns @ [n, m]);\n        local.path g ((a # ns) @ [n])\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [n, m])", "with assms(2)"], ["proof (chain)\npicking this:\n  n \\<in> set (predecessors g m)\n  n \\<in> set (\\<alpha>n g)\n  invar g", "have \"m \\<in> set (\\<alpha>n g)\""], ["proof (prove)\nusing this:\n  n \\<in> set (predecessors g m)\n  n \\<in> set (\\<alpha>n g)\n  invar g\n\ngoal (1 subgoal):\n 1. m \\<in> set (\\<alpha>n g)", "by auto"], ["proof (state)\nthis:\n  m \\<in> set (\\<alpha>n g)\n\ngoal (2 subgoals):\n 1. local.path g ([] @ [n]) \\<Longrightarrow> local.path g ([] @ [n, m])\n 2. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ [n]) \\<Longrightarrow>\n                local.path g (ns @ [n, m]);\n        local.path g ((a # ns) @ [n])\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [n, m])", "with 1"], ["proof (chain)\npicking this:\n  n \\<in> set (\\<alpha>n g)\n  invar g\n  m \\<in> set (\\<alpha>n g)", "have \"path g [m]\""], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g)\n  invar g\n  m \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. local.path g [m]", "by auto"], ["proof (state)\nthis:\n  local.path g [m]\n\ngoal (2 subgoals):\n 1. local.path g ([] @ [n]) \\<Longrightarrow> local.path g ([] @ [n, m])\n 2. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ [n]) \\<Longrightarrow>\n                local.path g (ns @ [n, m]);\n        local.path g ((a # ns) @ [n])\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [n, m])", "with assms(2)"], ["proof (chain)\npicking this:\n  n \\<in> set (predecessors g m)\n  local.path g [m]", "show ?case"], ["proof (prove)\nusing this:\n  n \\<in> set (predecessors g m)\n  local.path g [m]\n\ngoal (1 subgoal):\n 1. local.path g ([] @ [n, m])", "by auto"], ["proof (state)\nthis:\n  local.path g ([] @ [n, m])\n\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ [n]) \\<Longrightarrow>\n                local.path g (ns @ [n, m]);\n        local.path g ((a # ns) @ [n])\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [n, m])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ [n]) \\<Longrightarrow>\n                local.path g (ns @ [n, m]);\n        local.path g ((a # ns) @ [n])\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [n, m])", "case (Cons l ns)"], ["proof (state)\nthis:\n  local.path g (ns @ [n]) \\<Longrightarrow> local.path g (ns @ [n, m])\n  local.path g ((l # ns) @ [n])\n\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ [n]) \\<Longrightarrow>\n                local.path g (ns @ [n, m]);\n        local.path g ((a # ns) @ [n])\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [n, m])", "hence 1: \"path g (ns @ [n]) \\<and> l \\<in> set (predecessors g (hd (ns@[n])))\""], ["proof (prove)\nusing this:\n  local.path g (ns @ [n]) \\<Longrightarrow> local.path g (ns @ [n, m])\n  local.path g ((l # ns) @ [n])\n\ngoal (1 subgoal):\n 1. local.path g (ns @ [n]) \\<and>\n    l \\<in> set (predecessors g (hd (ns @ [n])))", "by -(cases g \"(l # ns) @ [n]\" rule:path.cases, auto)"], ["proof (state)\nthis:\n  local.path g (ns @ [n]) \\<and>\n  l \\<in> set (predecessors g (hd (ns @ [n])))\n\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ [n]) \\<Longrightarrow>\n                local.path g (ns @ [n, m]);\n        local.path g ((a # ns) @ [n])\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [n, m])", "hence \"path g (ns @ [n,m])\""], ["proof (prove)\nusing this:\n  local.path g (ns @ [n]) \\<and>\n  l \\<in> set (predecessors g (hd (ns @ [n])))\n\ngoal (1 subgoal):\n 1. local.path g (ns @ [n, m])", "by (auto intro:Cons.IH)"], ["proof (state)\nthis:\n  local.path g (ns @ [n, m])\n\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ [n]) \\<Longrightarrow>\n                local.path g (ns @ [n, m]);\n        local.path g ((a # ns) @ [n])\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [n, m])", "with 1"], ["proof (chain)\npicking this:\n  local.path g (ns @ [n]) \\<and>\n  l \\<in> set (predecessors g (hd (ns @ [n])))\n  local.path g (ns @ [n, m])", "have \"path g (l # ns @ [n,m])\""], ["proof (prove)\nusing this:\n  local.path g (ns @ [n]) \\<and>\n  l \\<in> set (predecessors g (hd (ns @ [n])))\n  local.path g (ns @ [n, m])\n\ngoal (1 subgoal):\n 1. local.path g (l # ns @ [n, m])", "by -(rule Cons_path, assumption, cases ns, auto)"], ["proof (state)\nthis:\n  local.path g (l # ns @ [n, m])\n\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>local.path g (ns @ [n]) \\<Longrightarrow>\n                local.path g (ns @ [n, m]);\n        local.path g ((a # ns) @ [n])\\<rbrakk>\n       \\<Longrightarrow> local.path g ((a # ns) @ [n, m])", "thus ?case"], ["proof (prove)\nusing this:\n  local.path g (l # ns @ [n, m])\n\ngoal (1 subgoal):\n 1. local.path g ((l # ns) @ [n, m])", "by simp"], ["proof (state)\nthis:\n  local.path g ((l # ns) @ [n, m])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_snoc[elim]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"m \\<in> set (predecessors g m')\"\n    shows \"g \\<turnstile> n-ns@[m']\\<rightarrow>m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ [m']\\<rightarrow>m'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ [m']\\<rightarrow>m'", "from assms(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m", "have 1: \"ns \\<noteq> []\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. ns \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  ns \\<noteq> []\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ [m']\\<rightarrow>m'", "have \"path g ((butlast ns) @ [last ns, m'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g (butlast ns @ [last ns, m'])", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  m \\<in> set (predecessors g m')\n\ngoal (1 subgoal):\n 1. local.path g (butlast ns @ [last ns, m'])", "unfolding path2_def"], ["proof (prove)\nusing this:\n  local.path g ns \\<and> n = hd ns \\<and> m = last ns\n  m \\<in> set (predecessors g m')\n\ngoal (1 subgoal):\n 1. local.path g (butlast ns @ [last ns, m'])", "by -(rule path_snoc, auto)"], ["proof (state)\nthis:\n  local.path g (butlast ns @ [last ns, m'])\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ [m']\\<rightarrow>m'", "hence \"path g ((butlast ns @ [last ns]) @ [m'])\""], ["proof (prove)\nusing this:\n  local.path g (butlast ns @ [last ns, m'])\n\ngoal (1 subgoal):\n 1. local.path g ((butlast ns @ [last ns]) @ [m'])", "by simp"], ["proof (state)\nthis:\n  local.path g ((butlast ns @ [last ns]) @ [m'])\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ [m']\\<rightarrow>m'", "with 1"], ["proof (chain)\npicking this:\n  ns \\<noteq> []\n  local.path g ((butlast ns @ [last ns]) @ [m'])", "have \"path g (ns @ [m'])\""], ["proof (prove)\nusing this:\n  ns \\<noteq> []\n  local.path g ((butlast ns @ [last ns]) @ [m'])\n\ngoal (1 subgoal):\n 1. local.path g (ns @ [m'])", "by simp"], ["proof (state)\nthis:\n  local.path g (ns @ [m'])\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ [m']\\<rightarrow>m'", "thus ?thesis"], ["proof (prove)\nusing this:\n  local.path g (ns @ [m'])\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ [m']\\<rightarrow>m'", "using assms"], ["proof (prove)\nusing this:\n  local.path g (ns @ [m'])\n  g \\<turnstile> n-ns\\<rightarrow>m\n  m \\<in> set (predecessors g m')\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ [m']\\<rightarrow>m'", "unfolding path2_def"], ["proof (prove)\nusing this:\n  local.path g (ns @ [m'])\n  local.path g ns \\<and> n = hd ns \\<and> m = last ns\n  m \\<in> set (predecessors g m')\n\ngoal (1 subgoal):\n 1. local.path g (ns @ [m']) \\<and>\n    n = hd (ns @ [m']) \\<and> m' = last (ns @ [m'])", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns @ [m']\\<rightarrow>m'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_unsnoc:\n    assumes \"path g ns\" \"length ns \\<ge> 2\"\n    obtains \"path g (butlast ns) \\<and> last (butlast ns) \\<in> set (predecessors g (last ns))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (local.path g (butlast ns) \\<and>\n     last (butlast ns)\n     \\<in> set (predecessors g (last ns)) \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  local.path g ns\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. (local.path g (butlast ns) \\<and>\n     last (butlast ns)\n     \\<in> set (predecessors g (last ns)) \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "proof (atomize_elim, induction ns)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g); invar g; local.path g [n];\n        2 \\<le> length [n]; 2 \\<le> length [n]\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast [n]) \\<and>\n                         last (butlast [n])\n                         \\<in> set (predecessors g (last [n]))\n 2. \\<And>ns n'.\n       \\<lbrakk>local.path g ns;\n        \\<lbrakk>local.path g ns; 2 \\<le> length ns;\n         2 \\<le> length ns\\<rbrakk>\n        \\<Longrightarrow> local.path g (butlast ns) \\<and>\n                          last (butlast ns)\n                          \\<in> set (predecessors g (last ns));\n        n' \\<in> set (predecessors g (hd ns)); local.path g (n' # ns);\n        2 \\<le> length (n' # ns); 2 \\<le> length (n' # ns)\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast (n' # ns)) \\<and>\n                         last (butlast (n' # ns))\n                         \\<in> set (predecessors g (last (n' # ns)))", "case (Cons_path ns n)"], ["proof (state)\nthis:\n  local.path g ns\n  n \\<in> set (predecessors g (hd ns))\n  \\<lbrakk>local.path g ns; 2 \\<le> length ns; 2 \\<le> length ns\\<rbrakk>\n  \\<Longrightarrow> local.path g (butlast ns) \\<and>\n                    last (butlast ns) \\<in> set (predecessors g (last ns))\n  local.path g (n # ns)\n  2 \\<le> length (n # ns)\n  2 \\<le> length (n # ns)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g); invar g; local.path g [n];\n        2 \\<le> length [n]; 2 \\<le> length [n]\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast [n]) \\<and>\n                         last (butlast [n])\n                         \\<in> set (predecessors g (last [n]))\n 2. \\<And>ns n'.\n       \\<lbrakk>local.path g ns;\n        \\<lbrakk>local.path g ns; 2 \\<le> length ns;\n         2 \\<le> length ns\\<rbrakk>\n        \\<Longrightarrow> local.path g (butlast ns) \\<and>\n                          last (butlast ns)\n                          \\<in> set (predecessors g (last ns));\n        n' \\<in> set (predecessors g (hd ns)); local.path g (n' # ns);\n        2 \\<le> length (n' # ns); 2 \\<le> length (n' # ns)\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast (n' # ns)) \\<and>\n                         last (butlast (n' # ns))\n                         \\<in> set (predecessors g (last (n' # ns)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "proof (cases \"2 \\<le> length ns\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "case True"], ["proof (state)\nthis:\n  2 \\<le> length ns\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "hence [simp]: \"hd (butlast ns) = hd ns\""], ["proof (prove)\nusing this:\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. hd (butlast ns) = hd ns", "by (cases ns, auto)"], ["proof (state)\nthis:\n  hd (butlast ns) = hd ns\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "have 0: \"n#butlast ns = butlast (n#ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n # butlast ns = butlast (n # ns)", "using True"], ["proof (prove)\nusing this:\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. n # butlast ns = butlast (n # ns)", "by auto"], ["proof (state)\nthis:\n  n # butlast ns = butlast (n # ns)\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "have 1: \"n \\<in> set (predecessors g (hd (butlast ns)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> set (predecessors g (hd (butlast ns)))", "using Cons_path"], ["proof (prove)\nusing this:\n  local.path g ns\n  n \\<in> set (predecessors g (hd ns))\n  \\<lbrakk>local.path g ns; 2 \\<le> length ns; 2 \\<le> length ns\\<rbrakk>\n  \\<Longrightarrow> local.path g (butlast ns) \\<and>\n                    last (butlast ns) \\<in> set (predecessors g (last ns))\n  local.path g (n # ns)\n  2 \\<le> length (n # ns)\n  2 \\<le> length (n # ns)\n\ngoal (1 subgoal):\n 1. n \\<in> set (predecessors g (hd (butlast ns)))", "by simp"], ["proof (state)\nthis:\n  n \\<in> set (predecessors g (hd (butlast ns)))\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "from True"], ["proof (chain)\npicking this:\n  2 \\<le> length ns", "have \"path g (butlast ns)\""], ["proof (prove)\nusing this:\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. local.path g (butlast ns)", "using Cons_path"], ["proof (prove)\nusing this:\n  2 \\<le> length ns\n  local.path g ns\n  n \\<in> set (predecessors g (hd ns))\n  \\<lbrakk>local.path g ns; 2 \\<le> length ns; 2 \\<le> length ns\\<rbrakk>\n  \\<Longrightarrow> local.path g (butlast ns) \\<and>\n                    last (butlast ns) \\<in> set (predecessors g (last ns))\n  local.path g (n # ns)\n  2 \\<le> length (n # ns)\n  2 \\<le> length (n # ns)\n\ngoal (1 subgoal):\n 1. local.path g (butlast ns)", "by auto"], ["proof (state)\nthis:\n  local.path g (butlast ns)\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "hence \"path g (n#butlast ns)\""], ["proof (prove)\nusing this:\n  local.path g (butlast ns)\n\ngoal (1 subgoal):\n 1. local.path g (n # butlast ns)", "using 1"], ["proof (prove)\nusing this:\n  local.path g (butlast ns)\n  n \\<in> set (predecessors g (hd (butlast ns)))\n\ngoal (1 subgoal):\n 1. local.path g (n # butlast ns)", "by auto"], ["proof (state)\nthis:\n  local.path g (n # butlast ns)\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "hence \"path g (butlast (n#ns))\""], ["proof (prove)\nusing this:\n  local.path g (n # butlast ns)\n\ngoal (1 subgoal):\n 1. local.path g (butlast (n # ns))", "using 0"], ["proof (prove)\nusing this:\n  local.path g (n # butlast ns)\n  n # butlast ns = butlast (n # ns)\n\ngoal (1 subgoal):\n 1. local.path g (butlast (n # ns))", "by simp"], ["proof (state)\nthis:\n  local.path g (butlast (n # ns))\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "moreover"], ["proof (state)\nthis:\n  local.path g (butlast (n # ns))\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "from Cons_path True"], ["proof (chain)\npicking this:\n  local.path g ns\n  n \\<in> set (predecessors g (hd ns))\n  \\<lbrakk>local.path g ns; 2 \\<le> length ns; 2 \\<le> length ns\\<rbrakk>\n  \\<Longrightarrow> local.path g (butlast ns) \\<and>\n                    last (butlast ns) \\<in> set (predecessors g (last ns))\n  local.path g (n # ns)\n  2 \\<le> length (n # ns)\n  2 \\<le> length (n # ns)\n  2 \\<le> length ns", "have \"last (butlast ns) \\<in> set (predecessors g (last ns))\""], ["proof (prove)\nusing this:\n  local.path g ns\n  n \\<in> set (predecessors g (hd ns))\n  \\<lbrakk>local.path g ns; 2 \\<le> length ns; 2 \\<le> length ns\\<rbrakk>\n  \\<Longrightarrow> local.path g (butlast ns) \\<and>\n                    last (butlast ns) \\<in> set (predecessors g (last ns))\n  local.path g (n # ns)\n  2 \\<le> length (n # ns)\n  2 \\<le> length (n # ns)\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. last (butlast ns) \\<in> set (predecessors g (last ns))", "by simp"], ["proof (state)\nthis:\n  last (butlast ns) \\<in> set (predecessors g (last ns))\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "hence \"last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\""], ["proof (prove)\nusing this:\n  last (butlast ns) \\<in> set (predecessors g (last ns))\n\ngoal (1 subgoal):\n 1. last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "using True"], ["proof (prove)\nusing this:\n  last (butlast ns) \\<in> set (predecessors g (last ns))\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "by (cases ns, auto)"], ["proof (state)\nthis:\n  last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "ultimately"], ["proof (chain)\npicking this:\n  local.path g (butlast (n # ns))\n  last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "show ?thesis"], ["proof (prove)\nusing this:\n  local.path g (butlast (n # ns))\n  last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n\ngoal (1 subgoal):\n 1. local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "by auto"], ["proof (state)\nthis:\n  local.path g (butlast (n # ns)) \\<and>\n  last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n\ngoal (1 subgoal):\n 1. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "case False"], ["proof (state)\nthis:\n  \\<not> 2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. \\<not> 2 \\<le> length ns \\<Longrightarrow>\n    local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> 2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "proof (cases ns)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> 2 \\<le> length ns; ns = []\\<rbrakk>\n    \\<Longrightarrow> local.path g (butlast (n # ns)) \\<and>\n                      last (butlast (n # ns))\n                      \\<in> set (predecessors g (last (n # ns)))\n 2. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast (n # ns)) \\<and>\n                         last (butlast (n # ns))\n                         \\<in> set (predecessors g (last (n # ns)))", "case Nil"], ["proof (state)\nthis:\n  ns = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> 2 \\<le> length ns; ns = []\\<rbrakk>\n    \\<Longrightarrow> local.path g (butlast (n # ns)) \\<and>\n                      last (butlast (n # ns))\n                      \\<in> set (predecessors g (last (n # ns)))\n 2. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast (n # ns)) \\<and>\n                         last (butlast (n # ns))\n                         \\<in> set (predecessors g (last (n # ns)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ns = []\n\ngoal (1 subgoal):\n 1. local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "using Cons_path"], ["proof (prove)\nusing this:\n  ns = []\n  local.path g ns\n  n \\<in> set (predecessors g (hd ns))\n  \\<lbrakk>local.path g ns; 2 \\<le> length ns; 2 \\<le> length ns\\<rbrakk>\n  \\<Longrightarrow> local.path g (butlast ns) \\<and>\n                    last (butlast ns) \\<in> set (predecessors g (last ns))\n  local.path g (n # ns)\n  2 \\<le> length (n # ns)\n  2 \\<le> length (n # ns)\n\ngoal (1 subgoal):\n 1. local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "by -(rule ccontr, auto elim:path.cases)"], ["proof (state)\nthis:\n  local.path g (butlast (n # ns)) \\<and>\n  last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast (n # ns)) \\<and>\n                         last (butlast (n # ns))\n                         \\<in> set (predecessors g (last (n # ns)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast (n # ns)) \\<and>\n                         last (butlast (n # ns))\n                         \\<in> set (predecessors g (last (n # ns)))", "case (Cons n' ns')"], ["proof (state)\nthis:\n  ns = n' # ns'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast (n # ns)) \\<and>\n                         last (butlast (n # ns))\n                         \\<in> set (predecessors g (last (n # ns)))", "hence [simp]: \"ns = [n']\""], ["proof (prove)\nusing this:\n  ns = n' # ns'\n\ngoal (1 subgoal):\n 1. ns = [n']", "using False"], ["proof (prove)\nusing this:\n  ns = n' # ns'\n  \\<not> 2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. ns = [n']", "by (cases ns', auto)"], ["proof (state)\nthis:\n  ns = [n']\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast (n # ns)) \\<and>\n                         last (butlast (n # ns))\n                         \\<in> set (predecessors g (last (n # ns)))", "have \"path g [n,n']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g [n, n']", "using Cons_path"], ["proof (prove)\nusing this:\n  local.path g ns\n  n \\<in> set (predecessors g (hd ns))\n  \\<lbrakk>local.path g ns; 2 \\<le> length ns; 2 \\<le> length ns\\<rbrakk>\n  \\<Longrightarrow> local.path g (butlast ns) \\<and>\n                    last (butlast ns) \\<in> set (predecessors g (last ns))\n  local.path g (n # ns)\n  2 \\<le> length (n # ns)\n  2 \\<le> length (n # ns)\n\ngoal (1 subgoal):\n 1. local.path g [n, n']", "by auto"], ["proof (state)\nthis:\n  local.path g [n, n']\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast (n # ns)) \\<and>\n                         last (butlast (n # ns))\n                         \\<in> set (predecessors g (last (n # ns)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  local.path g [n, n']\n\ngoal (1 subgoal):\n 1. local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "using Cons_path"], ["proof (prove)\nusing this:\n  local.path g [n, n']\n  local.path g ns\n  n \\<in> set (predecessors g (hd ns))\n  \\<lbrakk>local.path g ns; 2 \\<le> length ns; 2 \\<le> length ns\\<rbrakk>\n  \\<Longrightarrow> local.path g (butlast ns) \\<and>\n                    last (butlast ns) \\<in> set (predecessors g (last ns))\n  local.path g (n # ns)\n  2 \\<le> length (n # ns)\n  2 \\<le> length (n # ns)\n\ngoal (1 subgoal):\n 1. local.path g (butlast (n # ns)) \\<and>\n    last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))", "by auto"], ["proof (state)\nthis:\n  local.path g (butlast (n # ns)) \\<and>\n  last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.path g (butlast (n # ns)) \\<and>\n  last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.path g (butlast (n # ns)) \\<and>\n  last (butlast (n # ns)) \\<in> set (predecessors g (last (n # ns)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g); invar g; local.path g [n];\n        2 \\<le> length [n]; 2 \\<le> length [n]\\<rbrakk>\n       \\<Longrightarrow> local.path g (butlast [n]) \\<and>\n                         last (butlast [n])\n                         \\<in> set (predecessors g (last [n]))", "qed auto"], ["", "lemma path2_unsnoc:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"length ns \\<ge> 2\"\n    obtains \"g \\<turnstile> n-butlast ns\\<rightarrow>last (butlast ns)\" \"last (butlast ns) \\<in> set (predecessors g m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>g \\<turnstile> n-butlast ns\\<rightarrow>last (butlast ns);\n      last (butlast ns) \\<in> set (predecessors g m)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>g \\<turnstile> n-butlast ns\\<rightarrow>last (butlast ns);\n      last (butlast ns) \\<in> set (predecessors g m)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding path2_def"], ["proof (prove)\nusing this:\n  local.path g ns \\<and> n = hd ns \\<and> m = last ns\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>local.path g (butlast ns) \\<and>\n              n = hd (butlast ns) \\<and>\n              last (butlast ns) = last (butlast ns);\n      last (butlast ns) \\<in> set (predecessors g m)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_butlast_last_id hd_append2 path_not_Nil path_unsnoc)"], ["", "lemma path2_rev_induct[consumes 1, case_names empty snoc]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    assumes empty: \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> P n [n] n\"\n    assumes snoc: \"\\<And>ns m' m. g \\<turnstile> n-ns\\<rightarrow>m' \\<Longrightarrow> P n ns m' \\<Longrightarrow> m' \\<in> set (predecessors g m) \\<Longrightarrow> P n (ns@[m]) m\"\n    shows \"P n ns m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P n ns m", "using assms(1)"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. P n ns m", "proof (induction arbitrary:m rule:length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs m.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x.\n                       g \\<turnstile> n-ys\\<rightarrow>x \\<longrightarrow>\n                       P n ys x);\n        g \\<turnstile> n-xs\\<rightarrow>m\\<rbrakk>\n       \\<Longrightarrow> P n xs m", "case (1 ns)"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length ns \\<longrightarrow>\n     (\\<forall>x.\n         g \\<turnstile> n-ys\\<rightarrow>x \\<longrightarrow> P n ys x)\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<And>xs m.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x.\n                       g \\<turnstile> n-ys\\<rightarrow>x \\<longrightarrow>\n                       P n ys x);\n        g \\<turnstile> n-xs\\<rightarrow>m\\<rbrakk>\n       \\<Longrightarrow> P n xs m", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P n ns m", "proof (cases \"length ns \\<ge> 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow> P n ns m\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow> P n ns m", "case False"], ["proof (state)\nthis:\n  \\<not> 2 \\<le> length ns\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow> P n ns m\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow> P n ns m", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> 2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. P n ns m", "proof (cases ns)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> 2 \\<le> length ns; ns = []\\<rbrakk>\n    \\<Longrightarrow> P n ns m\n 2. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> P n ns m", "case Nil"], ["proof (state)\nthis:\n  ns = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> 2 \\<le> length ns; ns = []\\<rbrakk>\n    \\<Longrightarrow> P n ns m\n 2. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> P n ns m", "thus ?thesis"], ["proof (prove)\nusing this:\n  ns = []\n\ngoal (1 subgoal):\n 1. P n ns m", "using 1(2)"], ["proof (prove)\nusing this:\n  ns = []\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. P n ns m", "by auto"], ["proof (state)\nthis:\n  P n ns m\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> P n ns m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> P n ns m", "case (Cons n' ns')"], ["proof (state)\nthis:\n  ns = n' # ns'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> P n ns m", "with False"], ["proof (chain)\npicking this:\n  \\<not> 2 \\<le> length ns\n  ns = n' # ns'", "have \"ns' = []\""], ["proof (prove)\nusing this:\n  \\<not> 2 \\<le> length ns\n  ns = n' # ns'\n\ngoal (1 subgoal):\n 1. ns' = []", "by (cases ns', auto)"], ["proof (state)\nthis:\n  ns' = []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> P n ns m", "with Cons 1(2)"], ["proof (chain)\npicking this:\n  ns = n' # ns'\n  g \\<turnstile> n-ns\\<rightarrow>m\n  ns' = []", "have \"n' = n\" \"m = n\""], ["proof (prove)\nusing this:\n  ns = n' # ns'\n  g \\<turnstile> n-ns\\<rightarrow>m\n  ns' = []\n\ngoal (1 subgoal):\n 1. n' = n &&& m = n", "unfolding path2_def"], ["proof (prove)\nusing this:\n  ns = n' # ns'\n  local.path g ns \\<and> n = hd ns \\<and> m = last ns\n  ns' = []\n\ngoal (1 subgoal):\n 1. n' = n &&& m = n", "by auto"], ["proof (state)\nthis:\n  n' = n\n  m = n\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<not> 2 \\<le> length ns; ns = a # list\\<rbrakk>\n       \\<Longrightarrow> P n ns m", "with Cons \\<open>ns' = []\\<close> 1(2)"], ["proof (chain)\npicking this:\n  ns = n' # ns'\n  ns' = []\n  g \\<turnstile> n-ns\\<rightarrow>m\n  n' = n\n  m = n", "show ?thesis"], ["proof (prove)\nusing this:\n  ns = n' # ns'\n  ns' = []\n  g \\<turnstile> n-ns\\<rightarrow>m\n  n' = n\n  m = n\n\ngoal (1 subgoal):\n 1. P n ns m", "by (auto intro:empty)"], ["proof (state)\nthis:\n  P n ns m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P n ns m\n\ngoal (1 subgoal):\n 1. 2 \\<le> length ns \\<Longrightarrow> P n ns m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> length ns \\<Longrightarrow> P n ns m", "case True"], ["proof (state)\nthis:\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. 2 \\<le> length ns \\<Longrightarrow> P n ns m", "let ?ns' = \"butlast ns\""], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> length ns \\<Longrightarrow> P n ns m", "let ?m' = \"last ?ns'\""], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> length ns \\<Longrightarrow> P n ns m", "from 1(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m", "have m: \"m = last ns\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. m = last ns", "unfolding path2_def"], ["proof (prove)\nusing this:\n  local.path g ns \\<and> n = hd ns \\<and> m = last ns\n\ngoal (1 subgoal):\n 1. m = last ns", "by auto"], ["proof (state)\nthis:\n  m = last ns\n\ngoal (1 subgoal):\n 1. 2 \\<le> length ns \\<Longrightarrow> P n ns m", "from True 1(2)"], ["proof (chain)\npicking this:\n  2 \\<le> length ns\n  g \\<turnstile> n-ns\\<rightarrow>m", "obtain ns': \"g \\<turnstile> n-?ns'\\<rightarrow>?m'\" \"?m' \\<in> set (predecessors g m)\""], ["proof (prove)\nusing this:\n  2 \\<le> length ns\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>g \\<turnstile> n-butlast ns\\<rightarrow>last (butlast ns);\n      last (butlast ns) \\<in> set (predecessors g m)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(rule path2_unsnoc)"], ["proof (state)\nthis:\n  g \\<turnstile> n-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g m)\n\ngoal (1 subgoal):\n 1. 2 \\<le> length ns \\<Longrightarrow> P n ns m", "with True \"1.IH\""], ["proof (chain)\npicking this:\n  2 \\<le> length ns\n  \\<forall>ys.\n     length ys < length ns \\<longrightarrow>\n     (\\<forall>x.\n         g \\<turnstile> n-ys\\<rightarrow>x \\<longrightarrow> P n ys x)\n  g \\<turnstile> n-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g m)", "have \"P n ?ns' ?m'\""], ["proof (prove)\nusing this:\n  2 \\<le> length ns\n  \\<forall>ys.\n     length ys < length ns \\<longrightarrow>\n     (\\<forall>x.\n         g \\<turnstile> n-ys\\<rightarrow>x \\<longrightarrow> P n ys x)\n  g \\<turnstile> n-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g m)\n\ngoal (1 subgoal):\n 1. P n (butlast ns) (last (butlast ns))", "by auto"], ["proof (state)\nthis:\n  P n (butlast ns) (last (butlast ns))\n\ngoal (1 subgoal):\n 1. 2 \\<le> length ns \\<Longrightarrow> P n ns m", "with ns'"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g m)\n  P n (butlast ns) (last (butlast ns))", "have \"P n (?ns'@[m]) m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g m)\n  P n (butlast ns) (last (butlast ns))\n\ngoal (1 subgoal):\n 1. P n (butlast ns @ [m]) m", "by (auto intro!: snoc)"], ["proof (state)\nthis:\n  P n (butlast ns @ [m]) m\n\ngoal (1 subgoal):\n 1. 2 \\<le> length ns \\<Longrightarrow> P n ns m", "with m 1(2)"], ["proof (chain)\npicking this:\n  m = last ns\n  g \\<turnstile> n-ns\\<rightarrow>m\n  P n (butlast ns @ [m]) m", "show ?thesis"], ["proof (prove)\nusing this:\n  m = last ns\n  g \\<turnstile> n-ns\\<rightarrow>m\n  P n (butlast ns @ [m]) m\n\ngoal (1 subgoal):\n 1. P n ns m", "by auto"], ["proof (state)\nthis:\n  P n ns m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P n ns m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_hd[elim, dest?]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> n = hd ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> n = hd ns", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<and> n = hd ns \\<and> m = last ns \\<Longrightarrow>\n    n = hd ns", "by simp"], ["", "lemma path2_hd_in_ns[elim]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> n \\<in> set ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> n \\<in> set ns", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<and> n = hd ns \\<and> m = last ns \\<Longrightarrow>\n    n \\<in> set ns", "by auto"], ["", "lemma path2_last[elim, dest?]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> m = last ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> m = last ns", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<and> n = hd ns \\<and> m = last ns \\<Longrightarrow>\n    m = last ns", "by simp"], ["", "lemma path2_last_in_ns[elim]: \"g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> m \\<in> set ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow> m \\<in> set ns", "unfolding path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g ns \\<and> n = hd ns \\<and> m = last ns \\<Longrightarrow>\n    m \\<in> set ns", "by auto"], ["", "lemma path_app[elim]:\n    assumes \"path g ns\" \"path g ms\" \"last ns = hd ms\"\n    shows \"path g (ns@tl ms)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.path g (ns @ tl ms)", "using assms"], ["proof (prove)\nusing this:\n  local.path g ns\n  local.path g ms\n  last ns = hd ms\n\ngoal (1 subgoal):\n 1. local.path g (ns @ tl ms)", "by (induction ns rule:path.induct) auto"], ["", "lemma path2_app[elim]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"g \\<turnstile> m-ms\\<rightarrow>l\"\n    shows \"g \\<turnstile> n-ns@tl ms\\<rightarrow>l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ tl ms\\<rightarrow>l", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ tl ms\\<rightarrow>l", "have \"last (ns @ tl ms) = last ms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (ns @ tl ms) = last ms", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> m-ms\\<rightarrow>l\n\ngoal (1 subgoal):\n 1. last (ns @ tl ms) = last ms", "unfolding path2_def"], ["proof (prove)\nusing this:\n  local.path g ns \\<and> n = hd ns \\<and> m = last ns\n  local.path g ms \\<and> m = hd ms \\<and> l = last ms\n\ngoal (1 subgoal):\n 1. last (ns @ tl ms) = last ms", "proof (cases \"tl ms\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n     local.path g ms \\<and> m = hd ms \\<and> l = last ms;\n     tl ms = []\\<rbrakk>\n    \\<Longrightarrow> last (ns @ tl ms) = last ms\n 2. \\<And>a list.\n       \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n        local.path g ms \\<and> m = hd ms \\<and> l = last ms;\n        tl ms = a # list\\<rbrakk>\n       \\<Longrightarrow> last (ns @ tl ms) = last ms", "case Nil"], ["proof (state)\nthis:\n  tl ms = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n     local.path g ms \\<and> m = hd ms \\<and> l = last ms;\n     tl ms = []\\<rbrakk>\n    \\<Longrightarrow> last (ns @ tl ms) = last ms\n 2. \\<And>a list.\n       \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n        local.path g ms \\<and> m = hd ms \\<and> l = last ms;\n        tl ms = a # list\\<rbrakk>\n       \\<Longrightarrow> last (ns @ tl ms) = last ms", "hence \"ms = [m]\""], ["proof (prove)\nusing this:\n  tl ms = []\n\ngoal (1 subgoal):\n 1. ms = [m]", "using assms(2)"], ["proof (prove)\nusing this:\n  tl ms = []\n  g \\<turnstile> m-ms\\<rightarrow>l\n\ngoal (1 subgoal):\n 1. ms = [m]", "unfolding path2_def"], ["proof (prove)\nusing this:\n  tl ms = []\n  local.path g ms \\<and> m = hd ms \\<and> l = last ms\n\ngoal (1 subgoal):\n 1. ms = [m]", "by (cases ms, auto)"], ["proof (state)\nthis:\n  ms = [m]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n     local.path g ms \\<and> m = hd ms \\<and> l = last ms;\n     tl ms = []\\<rbrakk>\n    \\<Longrightarrow> last (ns @ tl ms) = last ms\n 2. \\<And>a list.\n       \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n        local.path g ms \\<and> m = hd ms \\<and> l = last ms;\n        tl ms = a # list\\<rbrakk>\n       \\<Longrightarrow> last (ns @ tl ms) = last ms", "thus ?thesis"], ["proof (prove)\nusing this:\n  ms = [m]\n\ngoal (1 subgoal):\n 1. last (ns @ tl ms) = last ms", "using assms(1)"], ["proof (prove)\nusing this:\n  ms = [m]\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. last (ns @ tl ms) = last ms", "unfolding path2_def"], ["proof (prove)\nusing this:\n  ms = [m]\n  local.path g ns \\<and> n = hd ns \\<and> m = last ns\n\ngoal (1 subgoal):\n 1. last (ns @ tl ms) = last ms", "by auto"], ["proof (state)\nthis:\n  last (ns @ tl ms) = last ms\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n        local.path g ms \\<and> m = hd ms \\<and> l = last ms;\n        tl ms = a # list\\<rbrakk>\n       \\<Longrightarrow> last (ns @ tl ms) = last ms", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n        local.path g ms \\<and> m = hd ms \\<and> l = last ms;\n        tl ms = a # list\\<rbrakk>\n       \\<Longrightarrow> last (ns @ tl ms) = last ms", "case (Cons m' ms')"], ["proof (state)\nthis:\n  tl ms = m' # ms'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n        local.path g ms \\<and> m = hd ms \\<and> l = last ms;\n        tl ms = a # list\\<rbrakk>\n       \\<Longrightarrow> last (ns @ tl ms) = last ms", "from this[symmetric]"], ["proof (chain)\npicking this:\n  m' # ms' = tl ms", "have \"ms = hd ms#m'#ms'\""], ["proof (prove)\nusing this:\n  m' # ms' = tl ms\n\ngoal (1 subgoal):\n 1. ms = hd ms # m' # ms'", "using assms(2)"], ["proof (prove)\nusing this:\n  m' # ms' = tl ms\n  g \\<turnstile> m-ms\\<rightarrow>l\n\ngoal (1 subgoal):\n 1. ms = hd ms # m' # ms'", "by auto"], ["proof (state)\nthis:\n  ms = hd ms # m' # ms'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>local.path g ns \\<and> n = hd ns \\<and> m = last ns;\n        local.path g ms \\<and> m = hd ms \\<and> l = last ms;\n        tl ms = a # list\\<rbrakk>\n       \\<Longrightarrow> last (ns @ tl ms) = last ms", "thus ?thesis"], ["proof (prove)\nusing this:\n  ms = hd ms # m' # ms'\n\ngoal (1 subgoal):\n 1. last (ns @ tl ms) = last ms", "using assms"], ["proof (prove)\nusing this:\n  ms = hd ms # m' # ms'\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> m-ms\\<rightarrow>l\n\ngoal (1 subgoal):\n 1. last (ns @ tl ms) = last ms", "unfolding path2_def"], ["proof (prove)\nusing this:\n  ms = hd ms # m' # ms'\n  local.path g ns \\<and> n = hd ns \\<and> m = last ns\n  local.path g ms \\<and> m = hd ms \\<and> l = last ms\n\ngoal (1 subgoal):\n 1. last (ns @ tl ms) = last ms", "by auto"], ["proof (state)\nthis:\n  last (ns @ tl ms) = last ms\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  last (ns @ tl ms) = last ms\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ tl ms\\<rightarrow>l", "with assms"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> m-ms\\<rightarrow>l\n  last (ns @ tl ms) = last ms", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> m-ms\\<rightarrow>l\n  last (ns @ tl ms) = last ms\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ tl ms\\<rightarrow>l", "unfolding path2_def"], ["proof (prove)\nusing this:\n  local.path g ns \\<and> n = hd ns \\<and> m = last ns\n  local.path g ms \\<and> m = hd ms \\<and> l = last ms\n  last (ns @ tl ms) = last ms\n\ngoal (1 subgoal):\n 1. local.path g (ns @ tl ms) \\<and>\n    n = hd (ns @ tl ms) \\<and> l = last (ns @ tl ms)", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns @ tl ms\\<rightarrow>l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma butlast_tl:\n    assumes \"last xs = hd ys\" \"xs \\<noteq> []\" \"ys \\<noteq> []\"\n    shows \"butlast xs@ys = xs@tl ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. butlast xs @ ys = xs @ tl ys", "by (metis append.simps(1) append.simps(2) append_assoc append_butlast_last_id assms(1) assms(2) assms(3) list.collapse)"], ["", "lemma path2_app'[elim]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"g \\<turnstile> m-ms\\<rightarrow>l\"\n    shows \"g \\<turnstile> n-butlast ns@ms\\<rightarrow>l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-butlast ns @ ms\\<rightarrow>l", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-butlast ns @ ms\\<rightarrow>l", "have \"butlast ns@ms = ns@tl ms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. butlast ns @ ms = ns @ tl ms", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> m-ms\\<rightarrow>l\n\ngoal (1 subgoal):\n 1. butlast ns @ ms = ns @ tl ms", "by - (rule butlast_tl, auto dest:path2_hd path2_last)"], ["proof (state)\nthis:\n  butlast ns @ ms = ns @ tl ms\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-butlast ns @ ms\\<rightarrow>l", "moreover"], ["proof (state)\nthis:\n  butlast ns @ ms = ns @ tl ms\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-butlast ns @ ms\\<rightarrow>l", "from assms"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> m-ms\\<rightarrow>l", "have \"g \\<turnstile> n-ns@tl ms\\<rightarrow>l\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> m-ms\\<rightarrow>l\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns @ tl ms\\<rightarrow>l", "by (rule path2_app)"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns @ tl ms\\<rightarrow>l\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-butlast ns @ ms\\<rightarrow>l", "ultimately"], ["proof (chain)\npicking this:\n  butlast ns @ ms = ns @ tl ms\n  g \\<turnstile> n-ns @ tl ms\\<rightarrow>l", "show ?thesis"], ["proof (prove)\nusing this:\n  butlast ns @ ms = ns @ tl ms\n  g \\<turnstile> n-ns @ tl ms\\<rightarrow>l\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-butlast ns @ ms\\<rightarrow>l", "by simp"], ["proof (state)\nthis:\n  g \\<turnstile> n-butlast ns @ ms\\<rightarrow>l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_nontrivial[elim]:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"n \\<noteq> m\"\n    shows \"length ns \\<ge> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> length ns", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  n \\<noteq> m\n\ngoal (1 subgoal):\n 1. 2 \\<le> length ns", "by (metis Suc_1 le_antisym length_1_last_hd not_less_eq_eq path2_hd path2_last path2_not_Nil3)"], ["", "lemma simple_path2_aux:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>m\" \"distinct ns'\" \"set ns' \\<subseteq> set ns\" \"length ns' \\<le> length ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m; distinct ns';\n         set ns' \\<subseteq> set ns; length ns' \\<le> length ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply atomize_elim"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set ns \\<and> length ns' \\<le> length ns", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set ns \\<and> length ns' \\<le> length ns", "proof (induction rule:path2_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. invar g \\<Longrightarrow>\n    \\<exists>ns'.\n       g \\<turnstile> m-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set [m] \\<and> length ns' \\<le> length [m]\n 2. \\<And>ns n' n.\n       \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m;\n        \\<exists>ns'.\n           g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n           distinct ns' \\<and>\n           set ns' \\<subseteq> set ns \\<and> length ns' \\<le> length ns;\n        n' \\<in> set (predecessors g n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns'.\n                            g \\<turnstile> n'-ns'\\<rightarrow>m \\<and>\n                            distinct ns' \\<and>\n                            set ns' \\<subseteq> set (n' # ns) \\<and>\n                            length ns' \\<le> length (n' # ns)", "case empty_path"], ["proof (state)\nthis:\n  invar g\n\ngoal (2 subgoals):\n 1. invar g \\<Longrightarrow>\n    \\<exists>ns'.\n       g \\<turnstile> m-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set [m] \\<and> length ns' \\<le> length [m]\n 2. \\<And>ns n' n.\n       \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m;\n        \\<exists>ns'.\n           g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n           distinct ns' \\<and>\n           set ns' \\<subseteq> set ns \\<and> length ns' \\<le> length ns;\n        n' \\<in> set (predecessors g n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns'.\n                            g \\<turnstile> n'-ns'\\<rightarrow>m \\<and>\n                            distinct ns' \\<and>\n                            set ns' \\<subseteq> set (n' # ns) \\<and>\n                            length ns' \\<le> length (n' # ns)", "with assms"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  invar g", "show ?case"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  invar g\n\ngoal (1 subgoal):\n 1. \\<exists>ns'.\n       g \\<turnstile> m-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set [m] \\<and> length ns' \\<le> length [m]", "by - (rule exI[of _ \"[m]\"], auto)"], ["proof (state)\nthis:\n  \\<exists>ns'.\n     g \\<turnstile> m-ns'\\<rightarrow>m \\<and>\n     distinct ns' \\<and>\n     set ns' \\<subseteq> set [m] \\<and> length ns' \\<le> length [m]\n\ngoal (1 subgoal):\n 1. \\<And>ns n' n.\n       \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m;\n        \\<exists>ns'.\n           g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n           distinct ns' \\<and>\n           set ns' \\<subseteq> set ns \\<and> length ns' \\<le> length ns;\n        n' \\<in> set (predecessors g n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns'.\n                            g \\<turnstile> n'-ns'\\<rightarrow>m \\<and>\n                            distinct ns' \\<and>\n                            set ns' \\<subseteq> set (n' # ns) \\<and>\n                            length ns' \\<le> length (n' # ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns n' n.\n       \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m;\n        \\<exists>ns'.\n           g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n           distinct ns' \\<and>\n           set ns' \\<subseteq> set ns \\<and> length ns' \\<le> length ns;\n        n' \\<in> set (predecessors g n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns'.\n                            g \\<turnstile> n'-ns'\\<rightarrow>m \\<and>\n                            distinct ns' \\<and>\n                            set ns' \\<subseteq> set (n' # ns) \\<and>\n                            length ns' \\<le> length (n' # ns)", "case (Cons_path ns n n')"], ["proof (state)\nthis:\n  g \\<turnstile> n'-ns\\<rightarrow>m\n  n \\<in> set (predecessors g n')\n  \\<exists>ns'.\n     g \\<turnstile> n'-ns'\\<rightarrow>m \\<and>\n     distinct ns' \\<and>\n     set ns' \\<subseteq> set ns \\<and> length ns' \\<le> length ns\n\ngoal (1 subgoal):\n 1. \\<And>ns n' n.\n       \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m;\n        \\<exists>ns'.\n           g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n           distinct ns' \\<and>\n           set ns' \\<subseteq> set ns \\<and> length ns' \\<le> length ns;\n        n' \\<in> set (predecessors g n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns'.\n                            g \\<turnstile> n'-ns'\\<rightarrow>m \\<and>\n                            distinct ns' \\<and>\n                            set ns' \\<subseteq> set (n' # ns) \\<and>\n                            length ns' \\<le> length (n' # ns)", "then"], ["proof (chain)\npicking this:\n  g \\<turnstile> n'-ns\\<rightarrow>m\n  n \\<in> set (predecessors g n')\n  \\<exists>ns'.\n     g \\<turnstile> n'-ns'\\<rightarrow>m \\<and>\n     distinct ns' \\<and>\n     set ns' \\<subseteq> set ns \\<and> length ns' \\<le> length ns", "obtain ns' where ns': \"g \\<turnstile> n'-ns'\\<rightarrow>m\" \"distinct ns'\" \"set ns' \\<subseteq> set ns\" \"length ns' \\<le> length ns\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n'-ns\\<rightarrow>m\n  n \\<in> set (predecessors g n')\n  \\<exists>ns'.\n     g \\<turnstile> n'-ns'\\<rightarrow>m \\<and>\n     distinct ns' \\<and>\n     set ns' \\<subseteq> set ns \\<and> length ns' \\<le> length ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n'-ns'\\<rightarrow>m; distinct ns';\n         set ns' \\<subseteq> set ns; length ns' \\<le> length ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> n'-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  length ns' \\<le> length ns\n\ngoal (1 subgoal):\n 1. \\<And>ns n' n.\n       \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m;\n        \\<exists>ns'.\n           g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n           distinct ns' \\<and>\n           set ns' \\<subseteq> set ns \\<and> length ns' \\<le> length ns;\n        n' \\<in> set (predecessors g n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns'.\n                            g \\<turnstile> n'-ns'\\<rightarrow>m \\<and>\n                            distinct ns' \\<and>\n                            set ns' \\<subseteq> set (n' # ns) \\<and>\n                            length ns' \\<le> length (n' # ns)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)", "proof (cases \"n \\<in> set ns'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<in> set ns' \\<Longrightarrow>\n    \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)\n 2. n \\<notin> set ns' \\<Longrightarrow>\n    \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)", "case False"], ["proof (state)\nthis:\n  n \\<notin> set ns'\n\ngoal (2 subgoals):\n 1. n \\<in> set ns' \\<Longrightarrow>\n    \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)\n 2. n \\<notin> set ns' \\<Longrightarrow>\n    \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)", "with ns' Cons_path(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n'-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  length ns' \\<le> length ns\n  n \\<in> set (predecessors g n')\n  n \\<notin> set ns'", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> n'-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  length ns' \\<le> length ns\n  n \\<in> set (predecessors g n')\n  n \\<notin> set ns'\n\ngoal (1 subgoal):\n 1. \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)", "by -(rule exI[where x=\"n#ns'\"], auto)"], ["proof (state)\nthis:\n  \\<exists>ns'.\n     g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n     distinct ns' \\<and>\n     set ns' \\<subseteq> set (n # ns) \\<and>\n     length ns' \\<le> length (n # ns)\n\ngoal (1 subgoal):\n 1. n \\<in> set ns' \\<Longrightarrow>\n    \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<in> set ns' \\<Longrightarrow>\n    \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)", "case True"], ["proof (state)\nthis:\n  n \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n \\<in> set ns' \\<Longrightarrow>\n    \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)", "with ns'"], ["proof (chain)\npicking this:\n  g \\<turnstile> n'-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  length ns' \\<le> length ns\n  n \\<in> set ns'", "obtain ns'\\<^sub>1 ns'\\<^sub>2 where split: \"ns' = ns'\\<^sub>1@n#ns'\\<^sub>2\" \"n \\<notin> set ns'\\<^sub>2\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n'-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  length ns' \\<le> length ns\n  n \\<in> set ns'\n\ngoal (1 subgoal):\n 1. (\\<And>ns'\\<^sub>1 ns'\\<^sub>2.\n        \\<lbrakk>ns' = ns'\\<^sub>1 @ n # ns'\\<^sub>2;\n         n \\<notin> set ns'\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(atomize_elim, rule split_list_last)"], ["proof (state)\nthis:\n  ns' = ns'\\<^sub>1 @ n # ns'\\<^sub>2\n  n \\<notin> set ns'\\<^sub>2\n\ngoal (1 subgoal):\n 1. n \\<in> set ns' \\<Longrightarrow>\n    \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)", "with ns'"], ["proof (chain)\npicking this:\n  g \\<turnstile> n'-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  length ns' \\<le> length ns\n  ns' = ns'\\<^sub>1 @ n # ns'\\<^sub>2\n  n \\<notin> set ns'\\<^sub>2", "have \"g \\<turnstile> n-n#ns'\\<^sub>2\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n'-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  length ns' \\<le> length ns\n  ns' = ns'\\<^sub>1 @ n # ns'\\<^sub>2\n  n \\<notin> set ns'\\<^sub>2\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-n # ns'\\<^sub>2\\<rightarrow>m", "by -(rule path2_split, simp)"], ["proof (state)\nthis:\n  g \\<turnstile> n-n # ns'\\<^sub>2\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. n \\<in> set ns' \\<Longrightarrow>\n    \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)", "with split ns'"], ["proof (chain)\npicking this:\n  ns' = ns'\\<^sub>1 @ n # ns'\\<^sub>2\n  n \\<notin> set ns'\\<^sub>2\n  g \\<turnstile> n'-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  length ns' \\<le> length ns\n  g \\<turnstile> n-n # ns'\\<^sub>2\\<rightarrow>m", "show ?thesis"], ["proof (prove)\nusing this:\n  ns' = ns'\\<^sub>1 @ n # ns'\\<^sub>2\n  n \\<notin> set ns'\\<^sub>2\n  g \\<turnstile> n'-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  length ns' \\<le> length ns\n  g \\<turnstile> n-n # ns'\\<^sub>2\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<exists>ns'.\n       g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n       distinct ns' \\<and>\n       set ns' \\<subseteq> set (n # ns) \\<and>\n       length ns' \\<le> length (n # ns)", "by -(rule exI[where x=\"n#ns'\\<^sub>2\"], auto)"], ["proof (state)\nthis:\n  \\<exists>ns'.\n     g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n     distinct ns' \\<and>\n     set ns' \\<subseteq> set (n # ns) \\<and>\n     length ns' \\<le> length (n # ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>ns'.\n     g \\<turnstile> n-ns'\\<rightarrow>m \\<and>\n     distinct ns' \\<and>\n     set ns' \\<subseteq> set (n # ns) \\<and>\n     length ns' \\<le> length (n # ns)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma simple_path2:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>m\" \"distinct ns'\" \"set ns' \\<subseteq> set ns\" \"length ns' \\<le>  length ns\" \"n \\<notin> set (tl ns')\" \"m \\<notin> set (butlast ns')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m; distinct ns';\n         set ns' \\<subseteq> set ns; length ns' \\<le> length ns;\n         n \\<notin> set (tl ns'); m \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m; distinct ns';\n         set ns' \\<subseteq> set ns; length ns' \\<le> length ns;\n         n \\<notin> set (tl ns'); m \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (rule simple_path2_aux)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ns'.\n       \\<lbrakk>\\<And>ns'.\n                   \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m;\n                    distinct ns'; set ns' \\<subseteq> set ns;\n                    length ns' \\<le> length ns; n \\<notin> set (tl ns');\n                    m \\<notin> set (butlast ns')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<turnstile> n-ns'\\<rightarrow>m; distinct ns';\n        set ns' \\<subseteq> set ns; length ns' \\<le> length ns\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (metis append_butlast_last_id distinct.simps(2) distinct1_rotate hd_Cons_tl path2_hd path2_last path2_not_Nil rotate1.simps(2))"], ["", "lemma simple_path2_unsnoc:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"n \\<noteq> m\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>last ns'\" \"last ns' \\<in> set (predecessors g m)\" \"distinct ns'\" \"set ns' \\<subseteq> set ns\" \"m \\<notin> set ns'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>last ns';\n         last ns' \\<in> set (predecessors g m); distinct ns';\n         set ns' \\<subseteq> set ns; m \\<notin> set ns'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>last ns';\n         last ns' \\<in> set (predecessors g m); distinct ns';\n         set ns' \\<subseteq> set ns; m \\<notin> set ns'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain ns' where 1: \"g \\<turnstile> n-ns'\\<rightarrow>m\" \"distinct ns'\" \"set ns' \\<subseteq> set ns\" \"m \\<notin> set (butlast ns')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m; distinct ns';\n         set ns' \\<subseteq> set ns; m \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule simple_path2[OF assms(1)])"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  m \\<notin> set (butlast ns')\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>last ns';\n         last ns' \\<in> set (predecessors g m); distinct ns';\n         set ns' \\<subseteq> set ns; m \\<notin> set ns'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms(2)"], ["proof (chain)\npicking this:\n  n \\<noteq> m\n  g \\<turnstile> n-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  m \\<notin> set (butlast ns')", "obtain 2: \"g \\<turnstile> n-butlast ns'\\<rightarrow>last (butlast ns')\" \"last (butlast ns') \\<in> set (predecessors g m)\""], ["proof (prove)\nusing this:\n  n \\<noteq> m\n  g \\<turnstile> n-ns'\\<rightarrow>m\n  distinct ns'\n  set ns' \\<subseteq> set ns\n  m \\<notin> set (butlast ns')\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>g \\<turnstile> n-butlast ns'\\<rightarrow>last (butlast ns');\n      last (butlast ns') \\<in> set (predecessors g m)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule path2_unsnoc, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> n-butlast ns'\\<rightarrow>last (butlast ns')\n  last (butlast ns') \\<in> set (predecessors g m)\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>last ns';\n         last ns' \\<in> set (predecessors g m); distinct ns';\n         set ns' \\<subseteq> set ns; m \\<notin> set ns'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule that[of \"butlast ns'\"])"], ["proof (state)\ngoal (5 subgoals):\n 1. g \\<turnstile> n-butlast ns'\\<rightarrow>last (butlast ns')\n 2. last (butlast ns') \\<in> set (predecessors g m)\n 3. distinct (butlast ns')\n 4. set (butlast ns') \\<subseteq> set ns\n 5. m \\<notin> set (butlast ns')", "from 1(3)"], ["proof (chain)\npicking this:\n  set ns' \\<subseteq> set ns", "show \"set (butlast ns') \\<subseteq> set ns\""], ["proof (prove)\nusing this:\n  set ns' \\<subseteq> set ns\n\ngoal (1 subgoal):\n 1. set (butlast ns') \\<subseteq> set ns", "by (metis in_set_butlastD subsetI subset_trans)"], ["proof (state)\nthis:\n  set (butlast ns') \\<subseteq> set ns\n\ngoal (4 subgoals):\n 1. g \\<turnstile> n-butlast ns'\\<rightarrow>last (butlast ns')\n 2. last (butlast ns') \\<in> set (predecessors g m)\n 3. distinct (butlast ns')\n 4. m \\<notin> set (butlast ns')", "qed (auto simp:1 2 distinct_butlast)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_split_first_last:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"x \\<in> set ns\"\n    obtains ns\\<^sub>1 ns\\<^sub>3 ns\\<^sub>2 where \"ns = ns\\<^sub>1@ns\\<^sub>3@ns\\<^sub>2\" \"prefix (ns\\<^sub>1@[x]) ns\" \"suffix (x#ns\\<^sub>2) ns\"\n        and \"g \\<turnstile> n-ns\\<^sub>1@[x]\\<rightarrow>x\"  \"x \\<notin> set ns\\<^sub>1\"\n        and \"g \\<turnstile> x-ns\\<^sub>3\\<rightarrow>x\"\n        and \"g \\<turnstile> x-x#ns\\<^sub>2\\<rightarrow>m\" \"x \\<notin> set ns\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>3 ns\\<^sub>2.\n        \\<lbrakk>ns = ns\\<^sub>1 @ ns\\<^sub>3 @ ns\\<^sub>2;\n         prefix (ns\\<^sub>1 @ [x]) ns; suffix (x # ns\\<^sub>2) ns;\n         g \\<turnstile> n-ns\\<^sub>1 @ [x]\\<rightarrow>x;\n         x \\<notin> set ns\\<^sub>1;\n         g \\<turnstile> x-ns\\<^sub>3\\<rightarrow>x;\n         g \\<turnstile> x-x # ns\\<^sub>2\\<rightarrow>m;\n         x \\<notin> set ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>3 ns\\<^sub>2.\n        \\<lbrakk>ns = ns\\<^sub>1 @ ns\\<^sub>3 @ ns\\<^sub>2;\n         prefix (ns\\<^sub>1 @ [x]) ns; suffix (x # ns\\<^sub>2) ns;\n         g \\<turnstile> n-ns\\<^sub>1 @ [x]\\<rightarrow>x;\n         x \\<notin> set ns\\<^sub>1;\n         g \\<turnstile> x-ns\\<^sub>3\\<rightarrow>x;\n         g \\<turnstile> x-x # ns\\<^sub>2\\<rightarrow>m;\n         x \\<notin> set ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(2)"], ["proof (chain)\npicking this:\n  x \\<in> set ns", "obtain ns\\<^sub>1 ns' where 1: \"ns = ns\\<^sub>1@x#ns'\" \"x \\<notin> set ns\\<^sub>1\""], ["proof (prove)\nusing this:\n  x \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns'.\n        \\<lbrakk>ns = ns\\<^sub>1 @ x # ns';\n         x \\<notin> set ns\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (atomize_elim, rule split_list_first)"], ["proof (state)\nthis:\n  ns = ns\\<^sub>1 @ x # ns'\n  x \\<notin> set ns\\<^sub>1\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>3 ns\\<^sub>2.\n        \\<lbrakk>ns = ns\\<^sub>1 @ ns\\<^sub>3 @ ns\\<^sub>2;\n         prefix (ns\\<^sub>1 @ [x]) ns; suffix (x # ns\\<^sub>2) ns;\n         g \\<turnstile> n-ns\\<^sub>1 @ [x]\\<rightarrow>x;\n         x \\<notin> set ns\\<^sub>1;\n         g \\<turnstile> x-ns\\<^sub>3\\<rightarrow>x;\n         g \\<turnstile> x-x # ns\\<^sub>2\\<rightarrow>m;\n         x \\<notin> set ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(1)[unfolded 1(1)]"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<^sub>1 @ x # ns'\\<rightarrow>m", "have 2: \"g \\<turnstile> n-ns\\<^sub>1@[x]\\<rightarrow>x\" \"g \\<turnstile> x-x#ns'\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<^sub>1 @ x # ns'\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<^sub>1 @ [x]\\<rightarrow>x &&&\n    g \\<turnstile> x-x # ns'\\<rightarrow>m", "by - (erule path2_split, erule path2_split)"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns\\<^sub>1 @ [x]\\<rightarrow>x\n  g \\<turnstile> x-x # ns'\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>3 ns\\<^sub>2.\n        \\<lbrakk>ns = ns\\<^sub>1 @ ns\\<^sub>3 @ ns\\<^sub>2;\n         prefix (ns\\<^sub>1 @ [x]) ns; suffix (x # ns\\<^sub>2) ns;\n         g \\<turnstile> n-ns\\<^sub>1 @ [x]\\<rightarrow>x;\n         x \\<notin> set ns\\<^sub>1;\n         g \\<turnstile> x-ns\\<^sub>3\\<rightarrow>x;\n         g \\<turnstile> x-x # ns\\<^sub>2\\<rightarrow>m;\n         x \\<notin> set ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain ns\\<^sub>3 ns\\<^sub>2 where 3: \"x#ns' = ns\\<^sub>3@x#ns\\<^sub>2\" \"x \\<notin> set ns\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>3 ns\\<^sub>2.\n        \\<lbrakk>x # ns' = ns\\<^sub>3 @ x # ns\\<^sub>2;\n         x \\<notin> set ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (atomize_elim, rule split_list_last, simp)"], ["proof (state)\nthis:\n  x # ns' = ns\\<^sub>3 @ x # ns\\<^sub>2\n  x \\<notin> set ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>3 ns\\<^sub>2.\n        \\<lbrakk>ns = ns\\<^sub>1 @ ns\\<^sub>3 @ ns\\<^sub>2;\n         prefix (ns\\<^sub>1 @ [x]) ns; suffix (x # ns\\<^sub>2) ns;\n         g \\<turnstile> n-ns\\<^sub>1 @ [x]\\<rightarrow>x;\n         x \\<notin> set ns\\<^sub>1;\n         g \\<turnstile> x-ns\\<^sub>3\\<rightarrow>x;\n         g \\<turnstile> x-x # ns\\<^sub>2\\<rightarrow>m;\n         x \\<notin> set ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from 2(2)[unfolded 3(1)]"], ["proof (chain)\npicking this:\n  g \\<turnstile> x-ns\\<^sub>3 @ x # ns\\<^sub>2\\<rightarrow>m", "have 4: \"g \\<turnstile> x-ns\\<^sub>3@[x]\\<rightarrow>x\" \"g \\<turnstile> x-x#ns\\<^sub>2\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> x-ns\\<^sub>3 @ x # ns\\<^sub>2\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. g \\<turnstile> x-ns\\<^sub>3 @ [x]\\<rightarrow>x &&&\n    g \\<turnstile> x-x # ns\\<^sub>2\\<rightarrow>m", "by - (erule path2_split, erule path2_split)"], ["proof (state)\nthis:\n  g \\<turnstile> x-ns\\<^sub>3 @ [x]\\<rightarrow>x\n  g \\<turnstile> x-x # ns\\<^sub>2\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>3 ns\\<^sub>2.\n        \\<lbrakk>ns = ns\\<^sub>1 @ ns\\<^sub>3 @ ns\\<^sub>2;\n         prefix (ns\\<^sub>1 @ [x]) ns; suffix (x # ns\\<^sub>2) ns;\n         g \\<turnstile> n-ns\\<^sub>1 @ [x]\\<rightarrow>x;\n         x \\<notin> set ns\\<^sub>1;\n         g \\<turnstile> x-ns\\<^sub>3\\<rightarrow>x;\n         g \\<turnstile> x-x # ns\\<^sub>2\\<rightarrow>m;\n         x \\<notin> set ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule that[OF _ _ _ 2(1) 1(2) 4 3(2)])"], ["proof (state)\ngoal (3 subgoals):\n 1. ns = ns\\<^sub>1 @ (ns\\<^sub>3 @ [x]) @ ns\\<^sub>2\n 2. prefix (ns\\<^sub>1 @ [x]) ns\n 3. suffix (x # ns\\<^sub>2) ns", "show \"ns = ns\\<^sub>1 @ (ns\\<^sub>3 @ [x]) @ ns\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns = ns\\<^sub>1 @ (ns\\<^sub>3 @ [x]) @ ns\\<^sub>2", "using 1(1) 3(1)"], ["proof (prove)\nusing this:\n  ns = ns\\<^sub>1 @ x # ns'\n  x # ns' = ns\\<^sub>3 @ x # ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. ns = ns\\<^sub>1 @ (ns\\<^sub>3 @ [x]) @ ns\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  ns = ns\\<^sub>1 @ (ns\\<^sub>3 @ [x]) @ ns\\<^sub>2\n\ngoal (2 subgoals):\n 1. prefix (ns\\<^sub>1 @ [x]) ns\n 2. suffix (x # ns\\<^sub>2) ns", "show \"prefix (ns\\<^sub>1@[x]) ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix (ns\\<^sub>1 @ [x]) ns", "using 1"], ["proof (prove)\nusing this:\n  ns = ns\\<^sub>1 @ x # ns'\n  x \\<notin> set ns\\<^sub>1\n\ngoal (1 subgoal):\n 1. prefix (ns\\<^sub>1 @ [x]) ns", "by auto"], ["proof (state)\nthis:\n  prefix (ns\\<^sub>1 @ [x]) ns\n\ngoal (1 subgoal):\n 1. suffix (x # ns\\<^sub>2) ns", "show \"suffix (x#ns\\<^sub>2) ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suffix (x # ns\\<^sub>2) ns", "using 1 3"], ["proof (prove)\nusing this:\n  ns = ns\\<^sub>1 @ x # ns'\n  x \\<notin> set ns\\<^sub>1\n  x # ns' = ns\\<^sub>3 @ x # ns\\<^sub>2\n  x \\<notin> set ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. suffix (x # ns\\<^sub>2) ns", "by (metis Sublist.suffix_def suffix_order.order_trans)"], ["proof (state)\nthis:\n  suffix (x # ns\\<^sub>2) ns\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_simple_loop:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>n\" \"n' \\<in> set ns\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>n\" \"n' \\<in> set ns'\" \"n \\<notin> set (tl (butlast ns'))\" \"set ns' \\<subseteq> set ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>n; n' \\<in> set ns';\n         n \\<notin> set (tl (butlast ns'));\n         set ns' \\<subseteq> set ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>n\n  n' \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>n; n' \\<in> set ns';\n         n \\<notin> set (tl (butlast ns'));\n         set ns' \\<subseteq> set ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction \"length ns\" arbitrary: ns rule: nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       \\<lbrakk>\\<forall>m<length ns.\n                   \\<forall>x.\n                      m = length x \\<longrightarrow>\n                      (\\<forall>xa.\n                          g \\<turnstile> n-xa\\<rightarrow>n \\<longrightarrow>\n                          n' \\<in> set xa \\<longrightarrow>\n                          n \\<notin> set (tl (butlast xa)) \\<longrightarrow>\n                          set xa \\<subseteq> set x \\<longrightarrow>\n                          thesis) \\<longrightarrow>\n                      g \\<turnstile> n-x\\<rightarrow>n \\<longrightarrow>\n                      n' \\<in> set x \\<longrightarrow> thesis;\n        \\<And>ns'.\n           \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>n; n' \\<in> set ns';\n            n \\<notin> set (tl (butlast ns'));\n            set ns' \\<subseteq> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        g \\<turnstile> n-ns\\<rightarrow>n; n' \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> thesis", "case 1"], ["proof (state)\nthis:\n  \\<forall>m<length ns.\n     \\<forall>x.\n        m = length x \\<longrightarrow>\n        (\\<forall>xa.\n            g \\<turnstile> n-xa\\<rightarrow>n \\<longrightarrow>\n            n' \\<in> set xa \\<longrightarrow>\n            n \\<notin> set (tl (butlast xa)) \\<longrightarrow>\n            set xa \\<subseteq> set x \\<longrightarrow>\n            thesis) \\<longrightarrow>\n        g \\<turnstile> n-x\\<rightarrow>n \\<longrightarrow>\n        n' \\<in> set x \\<longrightarrow> thesis\n  \\<lbrakk>g \\<turnstile> n-?ns'1\\<rightarrow>n; n' \\<in> set ?ns'1;\n   n \\<notin> set (tl (butlast ?ns'1));\n   set ?ns'1 \\<subseteq> set ns\\<rbrakk>\n  \\<Longrightarrow> thesis\n  g \\<turnstile> n-ns\\<rightarrow>n\n  n' \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       \\<lbrakk>\\<forall>m<length ns.\n                   \\<forall>x.\n                      m = length x \\<longrightarrow>\n                      (\\<forall>xa.\n                          g \\<turnstile> n-xa\\<rightarrow>n \\<longrightarrow>\n                          n' \\<in> set xa \\<longrightarrow>\n                          n \\<notin> set (tl (butlast xa)) \\<longrightarrow>\n                          set xa \\<subseteq> set x \\<longrightarrow>\n                          thesis) \\<longrightarrow>\n                      g \\<turnstile> n-x\\<rightarrow>n \\<longrightarrow>\n                      n' \\<in> set x \\<longrightarrow> thesis;\n        \\<And>ns'.\n           \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>n; n' \\<in> set ns';\n            n \\<notin> set (tl (butlast ns'));\n            set ns' \\<subseteq> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        g \\<turnstile> n-ns\\<rightarrow>n; n' \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> thesis", "let ?ns' = \"tl (butlast ns)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       \\<lbrakk>\\<forall>m<length ns.\n                   \\<forall>x.\n                      m = length x \\<longrightarrow>\n                      (\\<forall>xa.\n                          g \\<turnstile> n-xa\\<rightarrow>n \\<longrightarrow>\n                          n' \\<in> set xa \\<longrightarrow>\n                          n \\<notin> set (tl (butlast xa)) \\<longrightarrow>\n                          set xa \\<subseteq> set x \\<longrightarrow>\n                          thesis) \\<longrightarrow>\n                      g \\<turnstile> n-x\\<rightarrow>n \\<longrightarrow>\n                      n' \\<in> set x \\<longrightarrow> thesis;\n        \\<And>ns'.\n           \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>n; n' \\<in> set ns';\n            n \\<notin> set (tl (butlast ns'));\n            set ns' \\<subseteq> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        g \\<turnstile> n-ns\\<rightarrow>n; n' \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"n \\<in> set ?ns'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis\n 2. n \\<notin> set (tl (butlast ns)) \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  n \\<notin> set (tl (butlast ns))\n\ngoal (2 subgoals):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis\n 2. n \\<notin> set (tl (butlast ns)) \\<Longrightarrow> thesis", "with \"1.prems\"(2,3)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>n\n  n' \\<in> set ns\n  n \\<notin> set (tl (butlast ns))", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>n\n  n' \\<in> set ns\n  n \\<notin> set (tl (butlast ns))\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule \"1.prems\"(1), auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  n \\<in> set (tl (butlast ns))\n\ngoal (1 subgoal):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis", "hence 2: \"length ns > 1\""], ["proof (prove)\nusing this:\n  n \\<in> set (tl (butlast ns))\n\ngoal (1 subgoal):\n 1. 1 < length ns", "by (cases ns, auto)"], ["proof (state)\nthis:\n  1 < length ns\n\ngoal (1 subgoal):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis", "with \"1.prems\"(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>n\n  1 < length ns", "obtain m where m: \"g \\<turnstile> n-butlast ns\\<rightarrow>m\" \"m \\<in> set (predecessors g n)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>n\n  1 < length ns\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>g \\<turnstile> n-butlast ns\\<rightarrow>m;\n         m \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule path2_unsnoc, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> n-butlast ns\\<rightarrow>m\n  m \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis", "with True"], ["proof (chain)\npicking this:\n  n \\<in> set (tl (butlast ns))\n  g \\<turnstile> n-butlast ns\\<rightarrow>m\n  m \\<in> set (predecessors g n)", "obtain m' where m': \"g \\<turnstile> m'-?ns'\\<rightarrow>m\" \"n \\<in> set (predecessors g m')\""], ["proof (prove)\nusing this:\n  n \\<in> set (tl (butlast ns))\n  g \\<turnstile> n-butlast ns\\<rightarrow>m\n  m \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<lbrakk>g \\<turnstile> m'-tl (butlast ns)\\<rightarrow>m;\n         n \\<in> set (predecessors g m')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (erule path2_cases, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> m'-tl (butlast ns)\\<rightarrow>m\n  n \\<in> set (predecessors g m')\n\ngoal (1 subgoal):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis", "with True"], ["proof (chain)\npicking this:\n  n \\<in> set (tl (butlast ns))\n  g \\<turnstile> m'-tl (butlast ns)\\<rightarrow>m\n  n \\<in> set (predecessors g m')", "obtain ns\\<^sub>1 ns\\<^sub>2 where split: \"g \\<turnstile> m'-ns\\<^sub>1\\<rightarrow>n\" \"g \\<turnstile> n-ns\\<^sub>2\\<rightarrow>m\" \"?ns' = ns\\<^sub>1@tl ns\\<^sub>2\" \"?ns' = butlast ns\\<^sub>1@ns\\<^sub>2\""], ["proof (prove)\nusing this:\n  n \\<in> set (tl (butlast ns))\n  g \\<turnstile> m'-tl (butlast ns)\\<rightarrow>m\n  n \\<in> set (predecessors g m')\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1 ns\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> m'-ns\\<^sub>1\\<rightarrow>n;\n         g \\<turnstile> n-ns\\<^sub>2\\<rightarrow>m;\n         tl (butlast ns) = ns\\<^sub>1 @ tl ns\\<^sub>2;\n         tl (butlast ns) = butlast ns\\<^sub>1 @ ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule path2_split_ex)"], ["proof (state)\nthis:\n  g \\<turnstile> m'-ns\\<^sub>1\\<rightarrow>n\n  g \\<turnstile> n-ns\\<^sub>2\\<rightarrow>m\n  tl (butlast ns) = ns\\<^sub>1 @ tl ns\\<^sub>2\n  tl (butlast ns) = butlast ns\\<^sub>1 @ ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis", "have \"ns = butlast ns@[n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns = butlast ns @ [n]", "using 2 \"1.prems\"(2)"], ["proof (prove)\nusing this:\n  1 < length ns\n  g \\<turnstile> n-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. ns = butlast ns @ [n]", "by (auto simp: path2_def)"], ["proof (state)\nthis:\n  ns = butlast ns @ [n]\n\ngoal (1 subgoal):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  ns = butlast ns @ [n]\n\ngoal (1 subgoal):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis", "have \"butlast ns = n#tl (butlast ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. butlast ns = n # tl (butlast ns)", "using 2 m(1)"], ["proof (prove)\nusing this:\n  1 < length ns\n  g \\<turnstile> n-butlast ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. butlast ns = n # tl (butlast ns)", "by (auto simp: path2_def)"], ["proof (state)\nthis:\n  butlast ns = n # tl (butlast ns)\n\ngoal (1 subgoal):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  ns = butlast ns @ [n]\n  butlast ns = n # tl (butlast ns)", "have split': \"ns = n#ns\\<^sub>1@tl ns\\<^sub>2@[n]\" \"ns = n#butlast ns\\<^sub>1@ns\\<^sub>2@[n]\""], ["proof (prove)\nusing this:\n  ns = butlast ns @ [n]\n  butlast ns = n # tl (butlast ns)\n\ngoal (1 subgoal):\n 1. ns = n # ns\\<^sub>1 @ tl ns\\<^sub>2 @ [n] &&&\n    ns = n # butlast ns\\<^sub>1 @ ns\\<^sub>2 @ [n]", "using split(3,4)"], ["proof (prove)\nusing this:\n  ns = butlast ns @ [n]\n  butlast ns = n # tl (butlast ns)\n  tl (butlast ns) = ns\\<^sub>1 @ tl ns\\<^sub>2\n  tl (butlast ns) = butlast ns\\<^sub>1 @ ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. ns = n # ns\\<^sub>1 @ tl ns\\<^sub>2 @ [n] &&&\n    ns = n # butlast ns\\<^sub>1 @ ns\\<^sub>2 @ [n]", "by auto"], ["proof (state)\nthis:\n  ns = n # ns\\<^sub>1 @ tl ns\\<^sub>2 @ [n]\n  ns = n # butlast ns\\<^sub>1 @ ns\\<^sub>2 @ [n]\n\ngoal (1 subgoal):\n 1. n \\<in> set (tl (butlast ns)) \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"n' \\<in> set (n#ns\\<^sub>1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n' \\<in> set (n # ns\\<^sub>1) \\<Longrightarrow> thesis\n 2. n' \\<notin> set (n # ns\\<^sub>1) \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  n' \\<in> set (n # ns\\<^sub>1)\n\ngoal (2 subgoals):\n 1. n' \\<in> set (n # ns\\<^sub>1) \\<Longrightarrow> thesis\n 2. n' \\<notin> set (n # ns\\<^sub>1) \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule \"1.hyps\"[rule_format, of _ \"n#ns\\<^sub>1\"])"], ["proof (state)\ngoal (5 subgoals):\n 1. ?m < length ns\n 2. ?m = length (n # ns\\<^sub>1)\n 3. \\<And>x.\n       \\<lbrakk>g \\<turnstile> n-x\\<rightarrow>n; n' \\<in> set x;\n        n \\<notin> set (tl (butlast x));\n        set x \\<subseteq> set (n # ns\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. g \\<turnstile> n-n # ns\\<^sub>1\\<rightarrow>n\n 5. n' \\<in> set (n # ns\\<^sub>1)", "show \"length (n#ns\\<^sub>1) < length ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (n # ns\\<^sub>1) < length ns", "using split'(1)"], ["proof (prove)\nusing this:\n  ns = n # ns\\<^sub>1 @ tl ns\\<^sub>2 @ [n]\n\ngoal (1 subgoal):\n 1. length (n # ns\\<^sub>1) < length ns", "by auto"], ["proof (state)\nthis:\n  length (n # ns\\<^sub>1) < length ns\n\ngoal (4 subgoals):\n 1. length (n # ns\\<^sub>1) = length (n # ns\\<^sub>1)\n 2. \\<And>x.\n       \\<lbrakk>g \\<turnstile> n-x\\<rightarrow>n; n' \\<in> set x;\n        n \\<notin> set (tl (butlast x));\n        set x \\<subseteq> set (n # ns\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. g \\<turnstile> n-n # ns\\<^sub>1\\<rightarrow>n\n 4. n' \\<in> set (n # ns\\<^sub>1)", "show \"n' \\<in> set (n#ns\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' \\<in> set (n # ns\\<^sub>1)", "by (rule True)"], ["proof (state)\nthis:\n  n' \\<in> set (n # ns\\<^sub>1)\n\ngoal (3 subgoals):\n 1. length (n # ns\\<^sub>1) = length (n # ns\\<^sub>1)\n 2. \\<And>x.\n       \\<lbrakk>g \\<turnstile> n-x\\<rightarrow>n; n' \\<in> set x;\n        n \\<notin> set (tl (butlast x));\n        set x \\<subseteq> set (n # ns\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. g \\<turnstile> n-n # ns\\<^sub>1\\<rightarrow>n", "qed (auto intro: split(1) m'(2) intro!: \"1.prems\"(1) simp: split'(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. n' \\<notin> set (n # ns\\<^sub>1) \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n' \\<notin> set (n # ns\\<^sub>1) \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  n' \\<notin> set (n # ns\\<^sub>1)\n\ngoal (1 subgoal):\n 1. n' \\<notin> set (n # ns\\<^sub>1) \\<Longrightarrow> thesis", "from False split'(1) \"1.prems\"(3)"], ["proof (chain)\npicking this:\n  n' \\<notin> set (n # ns\\<^sub>1)\n  ns = n # ns\\<^sub>1 @ tl ns\\<^sub>2 @ [n]\n  n' \\<in> set ns", "have 5: \"n' \\<in> set (ns\\<^sub>2@[n])\""], ["proof (prove)\nusing this:\n  n' \\<notin> set (n # ns\\<^sub>1)\n  ns = n # ns\\<^sub>1 @ tl ns\\<^sub>2 @ [n]\n  n' \\<in> set ns\n\ngoal (1 subgoal):\n 1. n' \\<in> set (ns\\<^sub>2 @ [n])", "by auto"], ["proof (state)\nthis:\n  n' \\<in> set (ns\\<^sub>2 @ [n])\n\ngoal (1 subgoal):\n 1. n' \\<notin> set (n # ns\\<^sub>1) \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule \"1.hyps\"[rule_format, of _ \"ns\\<^sub>2@[n]\"])"], ["proof (state)\ngoal (5 subgoals):\n 1. ?m < length ns\n 2. ?m = length (ns\\<^sub>2 @ [n])\n 3. \\<And>x.\n       \\<lbrakk>g \\<turnstile> n-x\\<rightarrow>n; n' \\<in> set x;\n        n \\<notin> set (tl (butlast x));\n        set x \\<subseteq> set (ns\\<^sub>2 @ [n])\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. g \\<turnstile> n-ns\\<^sub>2 @ [n]\\<rightarrow>n\n 5. n' \\<in> set (ns\\<^sub>2 @ [n])", "show \"length (ns\\<^sub>2@[n]) < length ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (ns\\<^sub>2 @ [n]) < length ns", "using split'(2)"], ["proof (prove)\nusing this:\n  ns = n # butlast ns\\<^sub>1 @ ns\\<^sub>2 @ [n]\n\ngoal (1 subgoal):\n 1. length (ns\\<^sub>2 @ [n]) < length ns", "by auto"], ["proof (state)\nthis:\n  length (ns\\<^sub>2 @ [n]) < length ns\n\ngoal (4 subgoals):\n 1. length (ns\\<^sub>2 @ [n]) = length (ns\\<^sub>2 @ [n])\n 2. \\<And>x.\n       \\<lbrakk>g \\<turnstile> n-x\\<rightarrow>n; n' \\<in> set x;\n        n \\<notin> set (tl (butlast x));\n        set x \\<subseteq> set (ns\\<^sub>2 @ [n])\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. g \\<turnstile> n-ns\\<^sub>2 @ [n]\\<rightarrow>n\n 4. n' \\<in> set (ns\\<^sub>2 @ [n])", "show \"n' \\<in> set (ns\\<^sub>2@[n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' \\<in> set (ns\\<^sub>2 @ [n])", "by (rule 5)"], ["proof (state)\nthis:\n  n' \\<in> set (ns\\<^sub>2 @ [n])\n\ngoal (3 subgoals):\n 1. length (ns\\<^sub>2 @ [n]) = length (ns\\<^sub>2 @ [n])\n 2. \\<And>x.\n       \\<lbrakk>g \\<turnstile> n-x\\<rightarrow>n; n' \\<in> set x;\n        n \\<notin> set (tl (butlast x));\n        set x \\<subseteq> set (ns\\<^sub>2 @ [n])\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. g \\<turnstile> n-ns\\<^sub>2 @ [n]\\<rightarrow>n", "show \"g \\<turnstile> n-ns\\<^sub>2@[n]\\<rightarrow>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<^sub>2 @ [n]\\<rightarrow>n", "using split(2) m(2)"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<^sub>2\\<rightarrow>m\n  m \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns\\<^sub>2 @ [n]\\<rightarrow>n", "by (rule path2_snoc)"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns\\<^sub>2 @ [n]\\<rightarrow>n\n\ngoal (2 subgoals):\n 1. length (ns\\<^sub>2 @ [n]) = length (ns\\<^sub>2 @ [n])\n 2. \\<And>x.\n       \\<lbrakk>g \\<turnstile> n-x\\<rightarrow>n; n' \\<in> set x;\n        n \\<notin> set (tl (butlast x));\n        set x \\<subseteq> set (ns\\<^sub>2 @ [n])\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed (auto intro!: \"1.prems\"(1) simp: split'(2))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_split_first_prop:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"\\<exists>x\\<in>set ns. P x\"\n    obtains m' ns' where \"g \\<turnstile> n-ns'\\<rightarrow>m'\" \"P m'\" \"\\<forall>x \\<in> set (butlast ns'). \\<not>P x\" \"prefix ns' ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns' m'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m'; P m';\n         \\<forall>x\\<in>set (butlast ns'). \\<not> P x;\n         prefix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ns' m'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m'; P m';\n         \\<forall>x\\<in>set (butlast ns'). \\<not> P x;\n         prefix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain ns'' n' ns' where 1: \"ns = ns''@n'#ns'\" \"P n'\" \"\\<forall>x \\<in> set ns''. \\<not>P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns'' n' ns'.\n        \\<lbrakk>ns = ns'' @ n' # ns'; P n';\n         \\<forall>x\\<in>set ns''. \\<not> P x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule split_list_first_propE[OF assms(2)])"], ["proof (state)\nthis:\n  ns = ns'' @ n' # ns'\n  P n'\n  \\<forall>x\\<in>set ns''. \\<not> P x\n\ngoal (1 subgoal):\n 1. (\\<And>ns' m'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m'; P m';\n         \\<forall>x\\<in>set (butlast ns'). \\<not> P x;\n         prefix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  ns = ns'' @ n' # ns'\n  P n'\n  \\<forall>x\\<in>set ns''. \\<not> P x", "have \"g \\<turnstile> n-ns''@[n']\\<rightarrow>n'\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  ns = ns'' @ n' # ns'\n  P n'\n  \\<forall>x\\<in>set ns''. \\<not> P x\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns'' @ [n']\\<rightarrow>n'", "by - (rule path2_split(1), auto)"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns'' @ [n']\\<rightarrow>n'\n\ngoal (1 subgoal):\n 1. (\\<And>ns' m'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m'; P m';\n         \\<forall>x\\<in>set (butlast ns'). \\<not> P x;\n         prefix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with 1"], ["proof (chain)\npicking this:\n  ns = ns'' @ n' # ns'\n  P n'\n  \\<forall>x\\<in>set ns''. \\<not> P x\n  g \\<turnstile> n-ns'' @ [n']\\<rightarrow>n'", "show thesis"], ["proof (prove)\nusing this:\n  ns = ns'' @ n' # ns'\n  P n'\n  \\<forall>x\\<in>set ns''. \\<not> P x\n  g \\<turnstile> n-ns'' @ [n']\\<rightarrow>n'\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that, auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_split_last_prop:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"\\<exists>x\\<in>set ns. P x\"\n    obtains n' ns' where \"g \\<turnstile> n'-ns'\\<rightarrow>m\" \"P n'\" \"\\<forall>x \\<in> set (tl ns'). \\<not>P x\" \"suffix ns' ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n' ns'.\n        \\<lbrakk>g \\<turnstile> n'-ns'\\<rightarrow>m; P n';\n         \\<forall>x\\<in>set (tl ns'). \\<not> P x; suffix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n' ns'.\n        \\<lbrakk>g \\<turnstile> n'-ns'\\<rightarrow>m; P n';\n         \\<forall>x\\<in>set (tl ns'). \\<not> P x; suffix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain ns'' n' ns' where 1: \"ns = ns''@n'#ns'\" \"P n'\" \"\\<forall>x \\<in> set ns'. \\<not>P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns'' n' ns'.\n        \\<lbrakk>ns = ns'' @ n' # ns'; P n';\n         \\<forall>x\\<in>set ns'. \\<not> P x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule split_list_last_propE[OF assms(2)])"], ["proof (state)\nthis:\n  ns = ns'' @ n' # ns'\n  P n'\n  \\<forall>x\\<in>set ns'. \\<not> P x\n\ngoal (1 subgoal):\n 1. (\\<And>n' ns'.\n        \\<lbrakk>g \\<turnstile> n'-ns'\\<rightarrow>m; P n';\n         \\<forall>x\\<in>set (tl ns'). \\<not> P x; suffix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  ns = ns'' @ n' # ns'\n  P n'\n  \\<forall>x\\<in>set ns'. \\<not> P x", "have \"g \\<turnstile> n'-n'#ns'\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  ns = ns'' @ n' # ns'\n  P n'\n  \\<forall>x\\<in>set ns'. \\<not> P x\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n'-n' # ns'\\<rightarrow>m", "by - (rule path2_split(2), auto)"], ["proof (state)\nthis:\n  g \\<turnstile> n'-n' # ns'\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. (\\<And>n' ns'.\n        \\<lbrakk>g \\<turnstile> n'-ns'\\<rightarrow>m; P n';\n         \\<forall>x\\<in>set (tl ns'). \\<not> P x; suffix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with 1"], ["proof (chain)\npicking this:\n  ns = ns'' @ n' # ns'\n  P n'\n  \\<forall>x\\<in>set ns'. \\<not> P x\n  g \\<turnstile> n'-n' # ns'\\<rightarrow>m", "show thesis"], ["proof (prove)\nusing this:\n  ns = ns'' @ n' # ns'\n  P n'\n  \\<forall>x\\<in>set ns'. \\<not> P x\n  g \\<turnstile> n'-n' # ns'\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that, auto simp: Sublist.suffix_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_prefix[elim]:\n    assumes 1: \"g \\<turnstile> n-ns\\<rightarrow>m\"\n    assumes 2: \"prefix (ns'@[m']) ns\"\n    shows \"g \\<turnstile> n-ns'@[m']\\<rightarrow>m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns' @ [m']\\<rightarrow>m'", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  prefix (ns' @ [m']) ns\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-ns' @ [m']\\<rightarrow>m'", "by -(erule prefixE, rule path2_split, simp)"], ["", "lemma path2_prefix_ex:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"m' \\<in> set ns\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>m'\" \"prefix ns' ns\" \"m' \\<notin> set (butlast ns')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m'; prefix ns' ns;\n         m' \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m'; prefix ns' ns;\n         m' \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(2)"], ["proof (chain)\npicking this:\n  m' \\<in> set ns", "obtain ns' where \"prefix (ns'@[m']) ns\" \"m' \\<notin> set ns'\""], ["proof (prove)\nusing this:\n  m' \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>prefix (ns' @ [m']) ns; m' \\<notin> set ns'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule prefix_split_first)"], ["proof (state)\nthis:\n  prefix (ns' @ [m']) ns\n  m' \\<notin> set ns'\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m'; prefix ns' ns;\n         m' \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  prefix (ns' @ [m']) ns\n  m' \\<notin> set ns'", "show thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  prefix (ns' @ [m']) ns\n  m' \\<notin> set ns'\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that, auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_strict_prefix_ex:\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"m' \\<in> set (butlast ns)\"\n    obtains ns' where \"g \\<turnstile> n-ns'\\<rightarrow>m'\" \"strict_prefix ns' ns\" \"m' \\<notin> set (butlast ns')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m'; strict_prefix ns' ns;\n         m' \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m'; strict_prefix ns' ns;\n         m' \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(2)"], ["proof (chain)\npicking this:\n  m' \\<in> set (butlast ns)", "obtain ns' where ns': \"prefix (ns'@[m']) (butlast ns)\" \"m' \\<notin> set ns'\""], ["proof (prove)\nusing this:\n  m' \\<in> set (butlast ns)\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>prefix (ns' @ [m']) (butlast ns);\n         m' \\<notin> set ns'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule prefix_split_first)"], ["proof (state)\nthis:\n  prefix (ns' @ [m']) (butlast ns)\n  m' \\<notin> set ns'\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m'; strict_prefix ns' ns;\n         m' \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"strict_prefix (ns'@[m']) ns\""], ["proof (prove)\nusing this:\n  prefix (ns' @ [m']) (butlast ns)\n  m' \\<notin> set ns'\n\ngoal (1 subgoal):\n 1. strict_prefix (ns' @ [m']) ns", "using assms"], ["proof (prove)\nusing this:\n  prefix (ns' @ [m']) (butlast ns)\n  m' \\<notin> set ns'\n  g \\<turnstile> n-ns\\<rightarrow>m\n  m' \\<in> set (butlast ns)\n\ngoal (1 subgoal):\n 1. strict_prefix (ns' @ [m']) ns", "by - (rule strict_prefix_butlast, auto)"], ["proof (state)\nthis:\n  strict_prefix (ns' @ [m']) ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m'; strict_prefix ns' ns;\n         m' \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms(1) ns'(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  m' \\<notin> set ns'\n  strict_prefix (ns' @ [m']) ns", "show thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  m' \\<notin> set ns'\n  strict_prefix (ns' @ [m']) ns\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that, auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path2_nontriv[elim]: \"\\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; n \\<noteq> m\\<rbrakk> \\<Longrightarrow> length ns > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; n \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> 1 < length ns", "by (metis hd_Cons_tl last_appendR last_snoc length_greater_0_conv length_tl path2_def path_not_Nil zero_less_diff)"], ["", "declare path_not_Nil [simp del]"], ["", "declare path2_not_Nil [simp del]"], ["", "declare path2_not_Nil3 [simp del]"], ["", "end"], ["", "subsection \\<open>Domination\\<close>"], ["", "text \\<open>We fix an entry node per graph and use it to define node domination.\\<close>"], ["", "locale graph_Entry_base = graph_path_base \\<alpha>e \\<alpha>n invar inEdges'\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges' :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD) list\"\n+\nfixes Entry :: \"'g \\<Rightarrow> 'node\"\nbegin"], ["", "definition dominates :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'node \\<Rightarrow> bool\" where\n    \"dominates g n m \\<equiv> m \\<in> set (\\<alpha>n g) \\<and> (\\<forall>ns. g \\<turnstile> Entry g-ns\\<rightarrow>m \\<longrightarrow> n \\<in> set ns)\""], ["", "abbreviation \"strict_dom g n m \\<equiv> n \\<noteq> m \\<and> dominates g n m\""], ["", "end"], ["", "locale graph_Entry = graph_Entry_base \\<alpha>e \\<alpha>n invar inEdges' Entry\n  + graph_path \\<alpha>e \\<alpha>n invar inEdges'\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges' :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD) list\" and\n  Entry :: \"'g \\<Rightarrow> 'node\"\n+\nassumes Entry_in_graph[simp]: \"Entry g \\<in> set (\\<alpha>n g)\"\nassumes Entry_unreachable: \"invar g \\<Longrightarrow> inEdges g (Entry g) = []\"\nassumes Entry_reaches[intro]:\n  \"\\<lbrakk>n \\<in> set (\\<alpha>n g); invar g\\<rbrakk> \\<Longrightarrow> \\<exists>ns. g \\<turnstile> Entry g-ns\\<rightarrow>n\"\nbegin"], ["", "lemma Entry_dominates[simp,intro]: \"\\<lbrakk>invar g; n \\<in> set (\\<alpha>n g)\\<rbrakk> \\<Longrightarrow> dominates g (Entry g) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar g; n \\<in> set (\\<alpha>n g)\\<rbrakk>\n    \\<Longrightarrow> dominates g (Entry g) n", "unfolding dominates_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar g; n \\<in> set (\\<alpha>n g)\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (\\<alpha>n g) \\<and>\n                      (\\<forall>ns.\n                          g \\<turnstile> Entry\n    g-ns\\<rightarrow>n \\<longrightarrow>\n                          Entry g \\<in> set ns)", "by auto"], ["", "lemma Entry_iff_unreachable[simp]:\n    assumes \"invar g\" \"n \\<in> set (\\<alpha>n g)\"\n    shows \"predecessors g n = [] \\<longleftrightarrow> n = Entry g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (predecessors g n = []) = (n = Entry g)", "proof (rule, rule ccontr)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>predecessors g n = []; n \\<noteq> Entry g\\<rbrakk>\n    \\<Longrightarrow> False\n 2. n = Entry g \\<Longrightarrow> predecessors g n = []", "assume \"predecessors g n = []\" \"n \\<noteq> Entry g\""], ["proof (state)\nthis:\n  predecessors g n = []\n  n \\<noteq> Entry g\n\ngoal (2 subgoals):\n 1. \\<lbrakk>predecessors g n = []; n \\<noteq> Entry g\\<rbrakk>\n    \\<Longrightarrow> False\n 2. n = Entry g \\<Longrightarrow> predecessors g n = []", "with Entry_reaches[OF assms(2,1)]"], ["proof (chain)\npicking this:\n  \\<exists>ns. g \\<turnstile> Entry g-ns\\<rightarrow>n\n  predecessors g n = []\n  n \\<noteq> Entry g", "show False"], ["proof (prove)\nusing this:\n  \\<exists>ns. g \\<turnstile> Entry g-ns\\<rightarrow>n\n  predecessors g n = []\n  n \\<noteq> Entry g\n\ngoal (1 subgoal):\n 1. False", "by (auto elim:simple_path2_unsnoc)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n = Entry g \\<Longrightarrow> predecessors g n = []", "qed (auto simp:assms Entry_unreachable predecessors_def)"], ["", "lemma Entry_loop:\n    assumes \"invar g\" \"g \\<turnstile> Entry g-ns\\<rightarrow>Entry g\"\n    shows \"ns=[Entry g]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns = [Entry g]", "proof (cases \"length ns \\<ge> 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow> ns = [Entry g]\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow> ns = [Entry g]", "case True"], ["proof (state)\nthis:\n  2 \\<le> length ns\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow> ns = [Entry g]\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow> ns = [Entry g]", "with assms"], ["proof (chain)\npicking this:\n  invar g\n  g \\<turnstile> Entry g-ns\\<rightarrow>Entry g\n  2 \\<le> length ns", "have \"last (butlast ns) \\<in> set (predecessors g (Entry g))\""], ["proof (prove)\nusing this:\n  invar g\n  g \\<turnstile> Entry g-ns\\<rightarrow>Entry g\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. last (butlast ns) \\<in> set (predecessors g (Entry g))", "by - (rule path2_unsnoc)"], ["proof (state)\nthis:\n  last (butlast ns) \\<in> set (predecessors g (Entry g))\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow> ns = [Entry g]\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow> ns = [Entry g]", "with Entry_unreachable[OF assms(1)]"], ["proof (chain)\npicking this:\n  inEdges g (Entry g) = []\n  last (butlast ns) \\<in> set (predecessors g (Entry g))", "have False"], ["proof (prove)\nusing this:\n  inEdges g (Entry g) = []\n  last (butlast ns) \\<in> set (predecessors g (Entry g))\n\ngoal (1 subgoal):\n 1. False", "by (simp add:predecessors_def)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. 2 \\<le> length ns \\<Longrightarrow> ns = [Entry g]\n 2. \\<not> 2 \\<le> length ns \\<Longrightarrow> ns = [Entry g]", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. ns = [Entry g]", ".."], ["proof (state)\nthis:\n  ns = [Entry g]\n\ngoal (1 subgoal):\n 1. \\<not> 2 \\<le> length ns \\<Longrightarrow> ns = [Entry g]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 2 \\<le> length ns \\<Longrightarrow> ns = [Entry g]", "case False"], ["proof (state)\nthis:\n  \\<not> 2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. \\<not> 2 \\<le> length ns \\<Longrightarrow> ns = [Entry g]", "with assms"], ["proof (chain)\npicking this:\n  invar g\n  g \\<turnstile> Entry g-ns\\<rightarrow>Entry g\n  \\<not> 2 \\<le> length ns", "show ?thesis"], ["proof (prove)\nusing this:\n  invar g\n  g \\<turnstile> Entry g-ns\\<rightarrow>Entry g\n  \\<not> 2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. ns = [Entry g]", "by (metis Suc_leI hd_Cons_tl impossible_Cons le_less length_greater_0_conv numeral_2_eq_2 path2_hd path2_not_Nil)"], ["proof (state)\nthis:\n  ns = [Entry g]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma simple_Entry_path:\n    assumes \"invar g\" \"n \\<in> set (\\<alpha>n g)\"\n    obtains ns where \"g \\<turnstile> Entry g-ns\\<rightarrow>n\" and \"n \\<notin> set (butlast ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n         n \\<notin> set (butlast ns)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n         n \\<notin> set (butlast ns)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  invar g\n  n \\<in> set (\\<alpha>n g)", "obtain ns where p: \"g \\<turnstile> Entry g-ns\\<rightarrow>n\""], ["proof (prove)\nusing this:\n  invar g\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by -(atomize_elim, rule Entry_reaches)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n         n \\<notin> set (butlast ns)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with p"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n", "obtain ns' where \"g \\<turnstile> Entry g-ns'\\<rightarrow>n\" \"n \\<notin> set (butlast ns')\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> Entry g-ns'\\<rightarrow>n;\n         n \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(rule path2_split_first_last, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n  n \\<notin> set (butlast ns')\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n         n \\<notin> set (butlast ns)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n  n \\<notin> set (butlast ns')\n\ngoal (1 subgoal):\n 1. thesis", "by (rule that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dominatesI [intro]:\n    \"\\<lbrakk>m \\<in> set (\\<alpha>n g); \\<And>ns. \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>m\\<rbrakk> \\<Longrightarrow> n \\<in> set ns\\<rbrakk> \\<Longrightarrow> dominates g n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> set (\\<alpha>n g);\n     \\<And>ns.\n        g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow>\n        n \\<in> set ns\\<rbrakk>\n    \\<Longrightarrow> dominates g n m", "unfolding dominates_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> set (\\<alpha>n g);\n     \\<And>ns.\n        g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow>\n        n \\<in> set ns\\<rbrakk>\n    \\<Longrightarrow> m \\<in> set (\\<alpha>n g) \\<and>\n                      (\\<forall>ns.\n                          g \\<turnstile> Entry\n    g-ns\\<rightarrow>m \\<longrightarrow>\n                          n \\<in> set ns)", "by simp"], ["", "lemma dominatesE:\n    assumes \"dominates g n m\"\n    obtains \"m \\<in> set (\\<alpha>n g)\" and \"\\<And>ns. g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow> n \\<in> set ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>m \\<in> set (\\<alpha>n g);\n      \\<And>ns.\n         g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow>\n         n \\<in> set ns\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  dominates g n m\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>m \\<in> set (\\<alpha>n g);\n      \\<And>ns.\n         g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow>\n         n \\<in> set ns\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dominates_def"], ["proof (prove)\nusing this:\n  m \\<in> set (\\<alpha>n g) \\<and>\n  (\\<forall>ns.\n      g \\<turnstile> Entry g-ns\\<rightarrow>m \\<longrightarrow>\n      n \\<in> set ns)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>m \\<in> set (\\<alpha>n g);\n      \\<And>ns.\n         g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow>\n         n \\<in> set ns\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma[simp]: \"dominates g n m \\<Longrightarrow> m \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominates g n m \\<Longrightarrow> m \\<in> set (\\<alpha>n g)", "by (rule dominatesE)"], ["", "lemma[simp]:\n    assumes \"dominates g n m\" and[simp]: \"invar g\"\n    shows \"n \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "from assms"], ["proof (chain)\npicking this:\n  dominates g n m\n  invar g", "obtain ns where \"g \\<turnstile> Entry g-ns\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  dominates g n m\n  invar g\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (rule Entry_reaches, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "with assms"], ["proof (chain)\npicking this:\n  dominates g n m\n  invar g\n  g \\<turnstile> Entry g-ns\\<rightarrow>m", "show ?thesis"], ["proof (prove)\nusing this:\n  dominates g n m\n  invar g\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "by (auto elim!:dominatesE)"], ["proof (state)\nthis:\n  n \\<in> set (\\<alpha>n g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strict_domE[elim]:\n    assumes \"strict_dom g n m\"\n    obtains \"m \\<in> set (\\<alpha>n g)\" and \"\\<And>ns. g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow> n \\<in> set (butlast ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>m \\<in> set (\\<alpha>n g);\n      \\<And>ns.\n         g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow>\n         n \\<in> set (butlast ns)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  n \\<noteq> m \\<and> dominates g n m\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>m \\<in> set (\\<alpha>n g);\n      \\<And>ns.\n         g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow>\n         n \\<in> set (butlast ns)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis dominates_def path2_def path_not_Nil rotate1.simps(2) set_ConsD set_rotate1 snoc_eq_iff_butlast)"], ["", "lemma dominates_refl[intro!]: \"\\<lbrakk>invar g; n \\<in> set (\\<alpha>n g)\\<rbrakk> \\<Longrightarrow> dominates g n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar g; n \\<in> set (\\<alpha>n g)\\<rbrakk>\n    \\<Longrightarrow> dominates g n n", "by auto"], ["", "lemma dominates_trans:\n    assumes \"invar g\"\n    assumes part1: \"dominates g n n'\"\n    assumes part2: \"dominates g n' n''\"\n    shows   \"dominates g n n''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominates g n n''", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n'' \\<Longrightarrow>\n       n \\<in> set ns", "from part2"], ["proof (chain)\npicking this:\n  dominates g n' n''", "show \"n'' \\<in> set (\\<alpha>n g)\""], ["proof (prove)\nusing this:\n  dominates g n' n''\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (\\<alpha>n g)", "by auto"], ["proof (state)\nthis:\n  n'' \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n'' \\<Longrightarrow>\n       n \\<in> set ns", "fix ns :: \"'node list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n'' \\<Longrightarrow>\n       n \\<in> set ns", "assume p: \"g \\<turnstile> Entry g-ns\\<rightarrow>n''\""], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n''\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n'' \\<Longrightarrow>\n       n \\<in> set ns", "with part2"], ["proof (chain)\npicking this:\n  dominates g n' n''\n  g \\<turnstile> Entry g-ns\\<rightarrow>n''", "have \"n' \\<in> set ns\""], ["proof (prove)\nusing this:\n  dominates g n' n''\n  g \\<turnstile> Entry g-ns\\<rightarrow>n''\n\ngoal (1 subgoal):\n 1. n' \\<in> set ns", "by - (erule dominatesE, auto)"], ["proof (state)\nthis:\n  n' \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n'' \\<Longrightarrow>\n       n \\<in> set ns", "then"], ["proof (chain)\npicking this:\n  n' \\<in> set ns", "obtain as where prefix: \"prefix (as@[n']) ns\""], ["proof (prove)\nusing this:\n  n' \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        prefix (as @ [n']) ns \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro:prefix_split_first)"], ["proof (state)\nthis:\n  prefix (as @ [n']) ns\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n'' \\<Longrightarrow>\n       n \\<in> set ns", "with p"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n''\n  prefix (as @ [n']) ns", "have \"g \\<turnstile> Entry g-(as@[n'])\\<rightarrow>n'\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n''\n  prefix (as @ [n']) ns\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-as @ [n']\\<rightarrow>n'", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-as @ [n']\\<rightarrow>n'\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n'' \\<Longrightarrow>\n       n \\<in> set ns", "with part1"], ["proof (chain)\npicking this:\n  dominates g n n'\n  g \\<turnstile> Entry g-as @ [n']\\<rightarrow>n'", "have \"n \\<in> set (as@[n'])\""], ["proof (prove)\nusing this:\n  dominates g n n'\n  g \\<turnstile> Entry g-as @ [n']\\<rightarrow>n'\n\ngoal (1 subgoal):\n 1. n \\<in> set (as @ [n'])", "unfolding dominates_def"], ["proof (prove)\nusing this:\n  n' \\<in> set (\\<alpha>n g) \\<and>\n  (\\<forall>ns.\n      g \\<turnstile> Entry g-ns\\<rightarrow>n' \\<longrightarrow>\n      n \\<in> set ns)\n  g \\<turnstile> Entry g-as @ [n']\\<rightarrow>n'\n\ngoal (1 subgoal):\n 1. n \\<in> set (as @ [n'])", "by auto"], ["proof (state)\nthis:\n  n \\<in> set (as @ [n'])\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n'' \\<Longrightarrow>\n       n \\<in> set ns", "with prefix"], ["proof (chain)\npicking this:\n  prefix (as @ [n']) ns\n  n \\<in> set (as @ [n'])", "show \"n \\<in> set ns\""], ["proof (prove)\nusing this:\n  prefix (as @ [n']) ns\n  n \\<in> set (as @ [n'])\n\ngoal (1 subgoal):\n 1. n \\<in> set ns", "by auto"], ["proof (state)\nthis:\n  n \\<in> set ns\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dominates_antisymm:\n    assumes \"invar g\"\n    assumes dom1: \"dominates g n n'\"\n    assumes dom2: \"dominates g n' n\"\n    shows \"n = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = n'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> n' \\<Longrightarrow> False", "assume \"n \\<noteq> n'\""], ["proof (state)\nthis:\n  n \\<noteq> n'\n\ngoal (1 subgoal):\n 1. n \\<noteq> n' \\<Longrightarrow> False", "from dom2"], ["proof (chain)\npicking this:\n  dominates g n' n", "have \"n \\<in> set (\\<alpha>n g)\""], ["proof (prove)\nusing this:\n  dominates g n' n\n\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "by auto"], ["proof (state)\nthis:\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. n \\<noteq> n' \\<Longrightarrow> False", "with \\<open>invar g\\<close>"], ["proof (chain)\npicking this:\n  invar g\n  n \\<in> set (\\<alpha>n g)", "obtain ns where p: \"g \\<turnstile> Entry g-ns\\<rightarrow>n\" and \"n \\<notin> set (butlast ns)\""], ["proof (prove)\nusing this:\n  invar g\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n         n \\<notin> set (butlast ns)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule simple_Entry_path)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  n \\<notin> set (butlast ns)\n\ngoal (1 subgoal):\n 1. n \\<noteq> n' \\<Longrightarrow> False", "with dom2"], ["proof (chain)\npicking this:\n  dominates g n' n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  n \\<notin> set (butlast ns)", "have \"n' \\<in> set ns\""], ["proof (prove)\nusing this:\n  dominates g n' n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  n \\<notin> set (butlast ns)\n\ngoal (1 subgoal):\n 1. n' \\<in> set ns", "by - (erule dominatesE, auto)"], ["proof (state)\nthis:\n  n' \\<in> set ns\n\ngoal (1 subgoal):\n 1. n \\<noteq> n' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n' \\<in> set ns", "obtain as where prefix: \"prefix (as@[n']) ns\""], ["proof (prove)\nusing this:\n  n' \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        prefix (as @ [n']) ns \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro:prefix_split_first)"], ["proof (state)\nthis:\n  prefix (as @ [n']) ns\n\ngoal (1 subgoal):\n 1. n \\<noteq> n' \\<Longrightarrow> False", "with p"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  prefix (as @ [n']) ns", "have \"g \\<turnstile> Entry g-as@[n']\\<rightarrow>n'\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  prefix (as @ [n']) ns\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-as @ [n']\\<rightarrow>n'", "by (rule path2_prefix)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-as @ [n']\\<rightarrow>n'\n\ngoal (1 subgoal):\n 1. n \\<noteq> n' \\<Longrightarrow> False", "with dom1"], ["proof (chain)\npicking this:\n  dominates g n n'\n  g \\<turnstile> Entry g-as @ [n']\\<rightarrow>n'", "have \"n \\<in> set (as@[n'])\""], ["proof (prove)\nusing this:\n  dominates g n n'\n  g \\<turnstile> Entry g-as @ [n']\\<rightarrow>n'\n\ngoal (1 subgoal):\n 1. n \\<in> set (as @ [n'])", "unfolding dominates_def"], ["proof (prove)\nusing this:\n  n' \\<in> set (\\<alpha>n g) \\<and>\n  (\\<forall>ns.\n      g \\<turnstile> Entry g-ns\\<rightarrow>n' \\<longrightarrow>\n      n \\<in> set ns)\n  g \\<turnstile> Entry g-as @ [n']\\<rightarrow>n'\n\ngoal (1 subgoal):\n 1. n \\<in> set (as @ [n'])", "by auto"], ["proof (state)\nthis:\n  n \\<in> set (as @ [n'])\n\ngoal (1 subgoal):\n 1. n \\<noteq> n' \\<Longrightarrow> False", "with \\<open>n \\<noteq> n'\\<close>"], ["proof (chain)\npicking this:\n  n \\<noteq> n'\n  n \\<in> set (as @ [n'])", "have \"n \\<in> set as\""], ["proof (prove)\nusing this:\n  n \\<noteq> n'\n  n \\<in> set (as @ [n'])\n\ngoal (1 subgoal):\n 1. n \\<in> set as", "by auto"], ["proof (state)\nthis:\n  n \\<in> set as\n\ngoal (1 subgoal):\n 1. n \\<noteq> n' \\<Longrightarrow> False", "with \\<open>prefix (as@[n']) ns\\<close>"], ["proof (chain)\npicking this:\n  prefix (as @ [n']) ns\n  n \\<in> set as", "have \"n \\<in> set (butlast ns)\""], ["proof (prove)\nusing this:\n  prefix (as @ [n']) ns\n  n \\<in> set as\n\ngoal (1 subgoal):\n 1. n \\<in> set (butlast ns)", "by -(erule prefixE, auto iff:butlast_append)"], ["proof (state)\nthis:\n  n \\<in> set (butlast ns)\n\ngoal (1 subgoal):\n 1. n \\<noteq> n' \\<Longrightarrow> False", "with \\<open>n \\<notin> set (butlast ns)\\<close>"], ["proof (chain)\npicking this:\n  n \\<notin> set (butlast ns)\n  n \\<in> set (butlast ns)", "show False"], ["proof (prove)\nusing this:\n  n \\<notin> set (butlast ns)\n  n \\<in> set (butlast ns)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dominates_unsnoc:\n    assumes [simp]: \"invar g\" and \"dominates g n m\" \"m' \\<in> set (predecessors g m)\" \"n \\<noteq> m\"\n    shows \"dominates g n m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominates g n m'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. m' \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "show \"m' \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m' \\<in> set (\\<alpha>n g)", "using assms"], ["proof (prove)\nusing this:\n  invar g\n  dominates g n m\n  m' \\<in> set (predecessors g m)\n  n \\<noteq> m\n\ngoal (1 subgoal):\n 1. m' \\<in> set (\\<alpha>n g)", "by auto"], ["proof (state)\nthis:\n  m' \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "fix ns"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "assume \"g \\<turnstile> Entry g-ns\\<rightarrow>m'\""], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>m'\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "with assms(3)"], ["proof (chain)\npicking this:\n  m' \\<in> set (predecessors g m)\n  g \\<turnstile> Entry g-ns\\<rightarrow>m'", "have \"g \\<turnstile> Entry g-ns@[m]\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  m' \\<in> set (predecessors g m)\n  g \\<turnstile> Entry g-ns\\<rightarrow>m'\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-ns @ [m]\\<rightarrow>m", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns @ [m]\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "with assms(2,4)"], ["proof (chain)\npicking this:\n  dominates g n m\n  n \\<noteq> m\n  g \\<turnstile> Entry g-ns @ [m]\\<rightarrow>m", "show \"n \\<in> set ns\""], ["proof (prove)\nusing this:\n  dominates g n m\n  n \\<noteq> m\n  g \\<turnstile> Entry g-ns @ [m]\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. n \\<in> set ns", "by (auto elim!:dominatesE)"], ["proof (state)\nthis:\n  n \\<in> set ns\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dominates_unsnoc':\n    assumes [simp]: \"invar g\" and \"dominates g n m\" \"g \\<turnstile> m'-ms\\<rightarrow>m\" \"\\<forall>x \\<in> set (tl ms). x \\<noteq> n\"\n    shows \"dominates g n m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominates g n m'", "using assms(3,4)"], ["proof (prove)\nusing this:\n  g \\<turnstile> m'-ms\\<rightarrow>m\n  \\<forall>x\\<in>set (tl ms). x \\<noteq> n\n\ngoal (1 subgoal):\n 1. dominates g n m'", "proof (induction rule:path2_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>invar g; \\<forall>x\\<in>set (tl [m]). x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> dominates g n m\n 2. \\<And>ns n' na.\n       \\<lbrakk>g \\<turnstile> na-ns\\<rightarrow>m;\n        \\<forall>x\\<in>set (tl ns). x \\<noteq> n \\<Longrightarrow>\n        dominates g n na;\n        n' \\<in> set (predecessors g na);\n        \\<forall>x\\<in>set (tl (n' # ns)). x \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> dominates g n n'", "case empty_path"], ["proof (state)\nthis:\n  invar g\n  \\<forall>x\\<in>set (tl [m]). x \\<noteq> n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>invar g; \\<forall>x\\<in>set (tl [m]). x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> dominates g n m\n 2. \\<And>ns n' na.\n       \\<lbrakk>g \\<turnstile> na-ns\\<rightarrow>m;\n        \\<forall>x\\<in>set (tl ns). x \\<noteq> n \\<Longrightarrow>\n        dominates g n na;\n        n' \\<in> set (predecessors g na);\n        \\<forall>x\\<in>set (tl (n' # ns)). x \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> dominates g n n'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. dominates g n m", "by (rule assms(2))"], ["proof (state)\nthis:\n  dominates g n m\n\ngoal (1 subgoal):\n 1. \\<And>ns n' na.\n       \\<lbrakk>g \\<turnstile> na-ns\\<rightarrow>m;\n        \\<forall>x\\<in>set (tl ns). x \\<noteq> n \\<Longrightarrow>\n        dominates g n na;\n        n' \\<in> set (predecessors g na);\n        \\<forall>x\\<in>set (tl (n' # ns)). x \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> dominates g n n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns n' na.\n       \\<lbrakk>g \\<turnstile> na-ns\\<rightarrow>m;\n        \\<forall>x\\<in>set (tl ns). x \\<noteq> n \\<Longrightarrow>\n        dominates g n na;\n        n' \\<in> set (predecessors g na);\n        \\<forall>x\\<in>set (tl (n' # ns)). x \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> dominates g n n'", "case (Cons_path ms m'' m')"], ["proof (state)\nthis:\n  g \\<turnstile> m'-ms\\<rightarrow>m\n  m'' \\<in> set (predecessors g m')\n  \\<forall>x\\<in>set (tl ms). x \\<noteq> n \\<Longrightarrow>\n  dominates g n m'\n  \\<forall>x\\<in>set (tl (m'' # ms)). x \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<And>ns n' na.\n       \\<lbrakk>g \\<turnstile> na-ns\\<rightarrow>m;\n        \\<forall>x\\<in>set (tl ns). x \\<noteq> n \\<Longrightarrow>\n        dominates g n na;\n        n' \\<in> set (predecessors g na);\n        \\<forall>x\\<in>set (tl (n' # ns)). x \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> dominates g n n'", "from Cons_path(4)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (tl (m'' # ms)). x \\<noteq> n", "have \"dominates g n m'\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (tl (m'' # ms)). x \\<noteq> n\n\ngoal (1 subgoal):\n 1. dominates g n m'", "by (simp add: Cons_path.IH in_set_tlD)"], ["proof (state)\nthis:\n  dominates g n m'\n\ngoal (1 subgoal):\n 1. \\<And>ns n' na.\n       \\<lbrakk>g \\<turnstile> na-ns\\<rightarrow>m;\n        \\<forall>x\\<in>set (tl ns). x \\<noteq> n \\<Longrightarrow>\n        dominates g n na;\n        n' \\<in> set (predecessors g na);\n        \\<forall>x\\<in>set (tl (n' # ns)). x \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> dominates g n n'", "moreover"], ["proof (state)\nthis:\n  dominates g n m'\n\ngoal (1 subgoal):\n 1. \\<And>ns n' na.\n       \\<lbrakk>g \\<turnstile> na-ns\\<rightarrow>m;\n        \\<forall>x\\<in>set (tl ns). x \\<noteq> n \\<Longrightarrow>\n        dominates g n na;\n        n' \\<in> set (predecessors g na);\n        \\<forall>x\\<in>set (tl (n' # ns)). x \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> dominates g n n'", "from Cons_path(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> m'-ms\\<rightarrow>m", "have \"m' \\<in> set ms\""], ["proof (prove)\nusing this:\n  g \\<turnstile> m'-ms\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. m' \\<in> set ms", "by auto"], ["proof (state)\nthis:\n  m' \\<in> set ms\n\ngoal (1 subgoal):\n 1. \\<And>ns n' na.\n       \\<lbrakk>g \\<turnstile> na-ns\\<rightarrow>m;\n        \\<forall>x\\<in>set (tl ns). x \\<noteq> n \\<Longrightarrow>\n        dominates g n na;\n        n' \\<in> set (predecessors g na);\n        \\<forall>x\\<in>set (tl (n' # ns)). x \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> dominates g n n'", "hence \"m' \\<noteq> n\""], ["proof (prove)\nusing this:\n  m' \\<in> set ms\n\ngoal (1 subgoal):\n 1. m' \\<noteq> n", "using Cons_path(4)"], ["proof (prove)\nusing this:\n  m' \\<in> set ms\n  \\<forall>x\\<in>set (tl (m'' # ms)). x \\<noteq> n\n\ngoal (1 subgoal):\n 1. m' \\<noteq> n", "by simp"], ["proof (state)\nthis:\n  m' \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<And>ns n' na.\n       \\<lbrakk>g \\<turnstile> na-ns\\<rightarrow>m;\n        \\<forall>x\\<in>set (tl ns). x \\<noteq> n \\<Longrightarrow>\n        dominates g n na;\n        n' \\<in> set (predecessors g na);\n        \\<forall>x\\<in>set (tl (n' # ns)). x \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> dominates g n n'", "ultimately"], ["proof (chain)\npicking this:\n  dominates g n m'\n  m' \\<noteq> n", "show ?case"], ["proof (prove)\nusing this:\n  dominates g n m'\n  m' \\<noteq> n\n\ngoal (1 subgoal):\n 1. dominates g n m''", "using Cons_path(2)"], ["proof (prove)\nusing this:\n  dominates g n m'\n  m' \\<noteq> n\n  m'' \\<in> set (predecessors g m')\n\ngoal (1 subgoal):\n 1. dominates g n m''", "by - (rule dominates_unsnoc, auto)"], ["proof (state)\nthis:\n  dominates g n m''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dominates_path:\n    assumes \"dominates g n m\" and[simp]: \"invar g\"\n    obtains ns where \"g \\<turnstile> n-ns\\<rightarrow>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        g \\<turnstile> n-ns\\<rightarrow>m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof atomize_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ns. g \\<turnstile> n-ns\\<rightarrow>m", "from assms"], ["proof (chain)\npicking this:\n  dominates g n m\n  invar g", "obtain ns where ns: \"g \\<turnstile> Entry g-ns\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  dominates g n m\n  invar g\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        g \\<turnstile> Entry g-ns\\<rightarrow>m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (rule Entry_reaches, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<exists>ns. g \\<turnstile> n-ns\\<rightarrow>m", "with assms"], ["proof (chain)\npicking this:\n  dominates g n m\n  invar g\n  g \\<turnstile> Entry g-ns\\<rightarrow>m", "have \"n \\<in> set ns\""], ["proof (prove)\nusing this:\n  dominates g n m\n  invar g\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. n \\<in> set ns", "by - (erule dominatesE)"], ["proof (state)\nthis:\n  n \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<exists>ns. g \\<turnstile> n-ns\\<rightarrow>m", "with ns"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n  n \\<in> set ns", "show \"\\<exists>ns. g \\<turnstile> n-ns\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n  n \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<exists>ns. g \\<turnstile> n-ns\\<rightarrow>m", "by - (rule path2_split_ex, auto)"], ["proof (state)\nthis:\n  \\<exists>ns. g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dominates_antitrans:\n    assumes[simp]: \"invar g\" and \"dominates g n\\<^sub>1 m\" \"dominates g n\\<^sub>2 m\"\n    obtains (1) \"dominates g n\\<^sub>1 n\\<^sub>2\"\n          | (2) \"dominates g n\\<^sub>2 n\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dominates g n\\<^sub>1 n\\<^sub>2 \\<Longrightarrow> thesis;\n     dominates g n\\<^sub>2 n\\<^sub>1 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof (cases \"dominates g n\\<^sub>1 n\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>dominates g n\\<^sub>1 n\\<^sub>2 \\<Longrightarrow> thesis;\n     dominates g n\\<^sub>2 n\\<^sub>1 \\<Longrightarrow> thesis;\n     dominates g n\\<^sub>1 n\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>dominates g n\\<^sub>1 n\\<^sub>2 \\<Longrightarrow> thesis;\n     dominates g n\\<^sub>2 n\\<^sub>1 \\<Longrightarrow> thesis;\n     \\<not> dominates g n\\<^sub>1 n\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  \\<not> dominates g n\\<^sub>1 n\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominates g n\\<^sub>1 n\\<^sub>2 \\<Longrightarrow> thesis;\n     dominates g n\\<^sub>2 n\\<^sub>1 \\<Longrightarrow> thesis;\n     dominates g n\\<^sub>1 n\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>dominates g n\\<^sub>1 n\\<^sub>2 \\<Longrightarrow> thesis;\n     dominates g n\\<^sub>2 n\\<^sub>1 \\<Longrightarrow> thesis;\n     \\<not> dominates g n\\<^sub>1 n\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule 2, rule dominatesI)"], ["proof (state)\ngoal (2 subgoals):\n 1. n\\<^sub>1 \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1 \\<Longrightarrow>\n       n\\<^sub>2 \\<in> set ns", "show \"n\\<^sub>1 \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n\\<^sub>1 \\<in> set (\\<alpha>n g)", "using assms(2)"], ["proof (prove)\nusing this:\n  dominates g n\\<^sub>1 m\n\ngoal (1 subgoal):\n 1. n\\<^sub>1 \\<in> set (\\<alpha>n g)", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>1 \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1 \\<Longrightarrow>\n       n\\<^sub>2 \\<in> set ns", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1 \\<Longrightarrow>\n       n\\<^sub>2 \\<in> set ns", "fix ns"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1 \\<Longrightarrow>\n       n\\<^sub>2 \\<in> set ns", "assume asm: \"g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1\""], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1 \\<Longrightarrow>\n       n\\<^sub>2 \\<in> set ns", "from assms(2)"], ["proof (chain)\npicking this:\n  dominates g n\\<^sub>1 m", "obtain ns\\<^sub>2 where \"g \\<turnstile> n\\<^sub>1-ns\\<^sub>2\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  dominates g n\\<^sub>1 m\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>2.\n        g \\<turnstile> n\\<^sub>1-ns\\<^sub>2\\<rightarrow>m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule dominates_path, simp)"], ["proof (state)\nthis:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>2\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1 \\<Longrightarrow>\n       n\\<^sub>2 \\<in> set ns", "then"], ["proof (chain)\npicking this:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>2\\<rightarrow>m", "obtain ns\\<^sub>2' where ns\\<^sub>2': \"g \\<turnstile> n\\<^sub>1-ns\\<^sub>2'\\<rightarrow>m\" \"n\\<^sub>1 \\<notin> set (tl ns\\<^sub>2')\" \"set ns\\<^sub>2' \\<subseteq> set ns\\<^sub>2\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>2\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>2'.\n        \\<lbrakk>g \\<turnstile> n\\<^sub>1-ns\\<^sub>2'\\<rightarrow>m;\n         n\\<^sub>1 \\<notin> set (tl ns\\<^sub>2');\n         set ns\\<^sub>2' \\<subseteq> set ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>2'\\<rightarrow>m\n  n\\<^sub>1 \\<notin> set (tl ns\\<^sub>2')\n  set ns\\<^sub>2' \\<subseteq> set ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1 \\<Longrightarrow>\n       n\\<^sub>2 \\<in> set ns", "with asm"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>2'\\<rightarrow>m\n  n\\<^sub>1 \\<notin> set (tl ns\\<^sub>2')\n  set ns\\<^sub>2' \\<subseteq> set ns\\<^sub>2", "have \"g \\<turnstile> Entry g-ns@tl ns\\<^sub>2'\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>2'\\<rightarrow>m\n  n\\<^sub>1 \\<notin> set (tl ns\\<^sub>2')\n  set ns\\<^sub>2' \\<subseteq> set ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-ns @ tl ns\\<^sub>2'\\<rightarrow>m", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns @ tl ns\\<^sub>2'\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1 \\<Longrightarrow>\n       n\\<^sub>2 \\<in> set ns", "with assms(3)"], ["proof (chain)\npicking this:\n  dominates g n\\<^sub>2 m\n  g \\<turnstile> Entry g-ns @ tl ns\\<^sub>2'\\<rightarrow>m", "have \"n\\<^sub>2 \\<in> set (ns@tl ns\\<^sub>2')\""], ["proof (prove)\nusing this:\n  dominates g n\\<^sub>2 m\n  g \\<turnstile> Entry g-ns @ tl ns\\<^sub>2'\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. n\\<^sub>2 \\<in> set (ns @ tl ns\\<^sub>2')", "by - (erule dominatesE)"], ["proof (state)\nthis:\n  n\\<^sub>2 \\<in> set (ns @ tl ns\\<^sub>2')\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1 \\<Longrightarrow>\n       n\\<^sub>2 \\<in> set ns", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>2 \\<in> set (ns @ tl ns\\<^sub>2')\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1 \\<Longrightarrow>\n       n\\<^sub>2 \\<in> set ns", "have \"n\\<^sub>2 \\<notin> set (tl ns\\<^sub>2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n\\<^sub>2 \\<notin> set (tl ns\\<^sub>2')", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. n\\<^sub>2 \\<in> set (tl ns\\<^sub>2') \\<Longrightarrow> False", "assume \"n\\<^sub>2 \\<in> set (tl ns\\<^sub>2')\""], ["proof (state)\nthis:\n  n\\<^sub>2 \\<in> set (tl ns\\<^sub>2')\n\ngoal (1 subgoal):\n 1. n\\<^sub>2 \\<in> set (tl ns\\<^sub>2') \\<Longrightarrow> False", "with ns\\<^sub>2'(1,2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>2'\\<rightarrow>m\n  n\\<^sub>1 \\<notin> set (tl ns\\<^sub>2')\n  n\\<^sub>2 \\<in> set (tl ns\\<^sub>2')", "obtain ns\\<^sub>3 where ns\\<^sub>3: \"g \\<turnstile> n\\<^sub>2-ns\\<^sub>3\\<rightarrow>m\" \"n\\<^sub>1 \\<notin> set (tl ns\\<^sub>3)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>2'\\<rightarrow>m\n  n\\<^sub>1 \\<notin> set (tl ns\\<^sub>2')\n  n\\<^sub>2 \\<in> set (tl ns\\<^sub>2')\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>3.\n        \\<lbrakk>g \\<turnstile> n\\<^sub>2-ns\\<^sub>3\\<rightarrow>m;\n         n\\<^sub>1 \\<notin> set (tl ns\\<^sub>3)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (erule path2_split_ex, auto simp: path2_not_Nil)"], ["proof (state)\nthis:\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>3\\<rightarrow>m\n  n\\<^sub>1 \\<notin> set (tl ns\\<^sub>3)\n\ngoal (1 subgoal):\n 1. n\\<^sub>2 \\<in> set (tl ns\\<^sub>2') \\<Longrightarrow> False", "have \"dominates g n\\<^sub>1 n\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominates g n\\<^sub>1 n\\<^sub>2", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n\\<^sub>2 \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>2 \\<Longrightarrow>\n       n\\<^sub>1 \\<in> set ns", "show \"n\\<^sub>2 \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n\\<^sub>2 \\<in> set (\\<alpha>n g)", "using assms(3)"], ["proof (prove)\nusing this:\n  dominates g n\\<^sub>2 m\n\ngoal (1 subgoal):\n 1. n\\<^sub>2 \\<in> set (\\<alpha>n g)", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>2 \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>2 \\<Longrightarrow>\n       n\\<^sub>1 \\<in> set ns", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>2 \\<Longrightarrow>\n       n\\<^sub>1 \\<in> set ns", "fix ns'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>2 \\<Longrightarrow>\n       n\\<^sub>1 \\<in> set ns", "assume ns': \"g \\<turnstile> Entry g-ns'\\<rightarrow>n\\<^sub>2\""], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>2 \\<Longrightarrow>\n       n\\<^sub>1 \\<in> set ns", "with ns\\<^sub>3(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>3\\<rightarrow>m\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\\<^sub>2", "have \"g \\<turnstile> Entry g-ns'@tl ns\\<^sub>3\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>3\\<rightarrow>m\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\\<^sub>2\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-ns' @ tl ns\\<^sub>3\\<rightarrow>m", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns' @ tl ns\\<^sub>3\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>2 \\<Longrightarrow>\n       n\\<^sub>1 \\<in> set ns", "with assms(2)"], ["proof (chain)\npicking this:\n  dominates g n\\<^sub>1 m\n  g \\<turnstile> Entry g-ns' @ tl ns\\<^sub>3\\<rightarrow>m", "have \"n\\<^sub>1 \\<in> set (ns'@tl ns\\<^sub>3)\""], ["proof (prove)\nusing this:\n  dominates g n\\<^sub>1 m\n  g \\<turnstile> Entry g-ns' @ tl ns\\<^sub>3\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. n\\<^sub>1 \\<in> set (ns' @ tl ns\\<^sub>3)", "by - (erule dominatesE)"], ["proof (state)\nthis:\n  n\\<^sub>1 \\<in> set (ns' @ tl ns\\<^sub>3)\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>2 \\<Longrightarrow>\n       n\\<^sub>1 \\<in> set ns", "with ns\\<^sub>3(2)"], ["proof (chain)\npicking this:\n  n\\<^sub>1 \\<notin> set (tl ns\\<^sub>3)\n  n\\<^sub>1 \\<in> set (ns' @ tl ns\\<^sub>3)", "show \"n\\<^sub>1 \\<in> set ns'\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 \\<notin> set (tl ns\\<^sub>3)\n  n\\<^sub>1 \\<in> set (ns' @ tl ns\\<^sub>3)\n\ngoal (1 subgoal):\n 1. n\\<^sub>1 \\<in> set ns'", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>1 \\<in> set ns'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dominates g n\\<^sub>1 n\\<^sub>2\n\ngoal (1 subgoal):\n 1. n\\<^sub>2 \\<in> set (tl ns\\<^sub>2') \\<Longrightarrow> False", "with False"], ["proof (chain)\npicking this:\n  \\<not> dominates g n\\<^sub>1 n\\<^sub>2\n  dominates g n\\<^sub>1 n\\<^sub>2", "show False"], ["proof (prove)\nusing this:\n  \\<not> dominates g n\\<^sub>1 n\\<^sub>2\n  dominates g n\\<^sub>1 n\\<^sub>2\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n\\<^sub>2 \\<notin> set (tl ns\\<^sub>2')\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n\\<^sub>1 \\<Longrightarrow>\n       n\\<^sub>2 \\<in> set ns", "ultimately"], ["proof (chain)\npicking this:\n  n\\<^sub>2 \\<in> set (ns @ tl ns\\<^sub>2')\n  n\\<^sub>2 \\<notin> set (tl ns\\<^sub>2')", "show \"n\\<^sub>2 \\<in> set ns\""], ["proof (prove)\nusing this:\n  n\\<^sub>2 \\<in> set (ns @ tl ns\\<^sub>2')\n  n\\<^sub>2 \\<notin> set (tl ns\\<^sub>2')\n\ngoal (1 subgoal):\n 1. n\\<^sub>2 \\<in> set ns", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>2 \\<in> set ns\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dominates g n\\<^sub>1 n\\<^sub>2 \\<Longrightarrow> thesis;\n     dominates g n\\<^sub>2 n\\<^sub>1 \\<Longrightarrow> thesis;\n     dominates g n\\<^sub>1 n\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> thesis", "qed"], ["", "lemma dominates_extend:\n    assumes \"dominates g n m\"\n    assumes \"g \\<turnstile> m'-ms\\<rightarrow>m\" \"n \\<notin> set (tl ms)\"\n    shows \"dominates g n m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominates g n m'", "proof (rule dominatesI)"], ["proof (state)\ngoal (2 subgoals):\n 1. m' \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "show \"m' \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m' \\<in> set (\\<alpha>n g)", "using assms(2)"], ["proof (prove)\nusing this:\n  g \\<turnstile> m'-ms\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. m' \\<in> set (\\<alpha>n g)", "by auto"], ["proof (state)\nthis:\n  m' \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "fix ms'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "assume \"g \\<turnstile> Entry g-ms'\\<rightarrow>m'\""], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ms'\\<rightarrow>m'\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "with assms(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> m'-ms\\<rightarrow>m\n  g \\<turnstile> Entry g-ms'\\<rightarrow>m'", "have \"g \\<turnstile> Entry g-ms'@tl ms\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> m'-ms\\<rightarrow>m\n  g \\<turnstile> Entry g-ms'\\<rightarrow>m'\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-ms' @ tl ms\\<rightarrow>m", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ms' @ tl ms\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "with assms(1)"], ["proof (chain)\npicking this:\n  dominates g n m\n  g \\<turnstile> Entry g-ms' @ tl ms\\<rightarrow>m", "have \"n \\<in> set (ms'@tl ms)\""], ["proof (prove)\nusing this:\n  dominates g n m\n  g \\<turnstile> Entry g-ms' @ tl ms\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. n \\<in> set (ms' @ tl ms)", "by - (erule dominatesE)"], ["proof (state)\nthis:\n  n \\<in> set (ms' @ tl ms)\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>m' \\<Longrightarrow>\n       n \\<in> set ns", "with assms(3)"], ["proof (chain)\npicking this:\n  n \\<notin> set (tl ms)\n  n \\<in> set (ms' @ tl ms)", "show \"n \\<in> set ms'\""], ["proof (prove)\nusing this:\n  n \\<notin> set (tl ms)\n  n \\<in> set (ms' @ tl ms)\n\ngoal (1 subgoal):\n 1. n \\<in> set ms'", "by auto"], ["proof (state)\nthis:\n  n \\<in> set ms'\n\ngoal:\nNo subgoals!", "qed"], ["", "definition dominators :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'node set\" where\n    \"dominators g n \\<equiv> {m \\<in> set (\\<alpha>n g). dominates g m n}\""], ["", "definition \"isIdom g n m \\<longleftrightarrow> strict_dom g m n \\<and> (\\<forall>m' \\<in> set (\\<alpha>n g). strict_dom g m' n \\<longrightarrow> dominates g m' m)\""], ["", "definition idom :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'node\" where\n    \"idom g n \\<equiv> THE m. isIdom g n m\""], ["", "lemma idom_ex:\n    assumes[simp]: \"invar g\" \"n \\<in> set (\\<alpha>n g)\" \"n \\<noteq> Entry g\"\n    shows \"\\<exists>!m. isIdom g n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!m. isIdom g n m", "proof (rule ex_ex1I)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>m. isIdom g n m\n 2. \\<And>m y.\n       \\<lbrakk>isIdom g n m; isIdom g n y\\<rbrakk> \\<Longrightarrow> m = y", "let ?A = \"\\<lambda>m. {m' \\<in> set (\\<alpha>n g). strict_dom g m' n \\<and> strict_dom g m m'}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>m. isIdom g n m\n 2. \\<And>m y.\n       \\<lbrakk>isIdom g n m; isIdom g n y\\<rbrakk> \\<Longrightarrow> m = y", "have 1: \"\\<And>A m. finite A \\<Longrightarrow> A = ?A m \\<Longrightarrow> strict_dom g m n \\<Longrightarrow> \\<exists>m'. isIdom g n m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A m.\n       \\<lbrakk>finite A;\n        A =\n        {m' \\<in> set (\\<alpha>n g).\n         (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n         m \\<noteq> m' \\<and> dominates g m m'};\n        m \\<noteq> n \\<and> dominates g m n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'. isIdom g n m'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A m.\n       \\<lbrakk>finite A;\n        A =\n        {m' \\<in> set (\\<alpha>n g).\n         (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n         m \\<noteq> m' \\<and> dominates g m m'};\n        m \\<noteq> n \\<and> dominates g m n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'. isIdom g n m'", "fix A m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A m.\n       \\<lbrakk>finite A;\n        A =\n        {m' \\<in> set (\\<alpha>n g).\n         (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n         m \\<noteq> m' \\<and> dominates g m m'};\n        m \\<noteq> n \\<and> dominates g m n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'. isIdom g n m'", "show \"finite A \\<Longrightarrow> A = ?A m \\<Longrightarrow> strict_dom g m n \\<Longrightarrow> \\<exists>m'. isIdom g n m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A;\n     A =\n     {m' \\<in> set (\\<alpha>n g).\n      (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n      m \\<noteq> m' \\<and> dominates g m m'};\n     m \\<noteq> n \\<and> dominates g m n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'. isIdom g n m'", "proof (induction arbitrary:m rule:finite_psubset_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A m.\n       \\<lbrakk>finite A;\n        \\<And>B m.\n           \\<lbrakk>B \\<subset> A;\n            B =\n            {m' \\<in> set (\\<alpha>n g).\n             (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n             m \\<noteq> m' \\<and> dominates g m m'};\n            m \\<noteq> n \\<and> dominates g m n\\<rbrakk>\n           \\<Longrightarrow> Ex (isIdom g n);\n        A =\n        {m' \\<in> set (\\<alpha>n g).\n         (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n         m \\<noteq> m' \\<and> dominates g m m'};\n        m \\<noteq> n \\<and> dominates g m n\\<rbrakk>\n       \\<Longrightarrow> Ex (isIdom g n)", "case (psubset A m)"], ["proof (state)\nthis:\n  finite A\n  \\<lbrakk>?B1 \\<subset> A;\n   ?B1 =\n   {m' \\<in> set (\\<alpha>n g).\n    (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n    ?m1 \\<noteq> m' \\<and> dominates g ?m1 m'};\n   ?m1 \\<noteq> n \\<and> dominates g ?m1 n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a. isIdom g n a\n  A =\n  {m' \\<in> set (\\<alpha>n g).\n   (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n   m \\<noteq> m' \\<and> dominates g m m'}\n  m \\<noteq> n \\<and> dominates g m n\n\ngoal (1 subgoal):\n 1. \\<And>A m.\n       \\<lbrakk>finite A;\n        \\<And>B m.\n           \\<lbrakk>B \\<subset> A;\n            B =\n            {m' \\<in> set (\\<alpha>n g).\n             (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n             m \\<noteq> m' \\<and> dominates g m m'};\n            m \\<noteq> n \\<and> dominates g m n\\<rbrakk>\n           \\<Longrightarrow> Ex (isIdom g n);\n        A =\n        {m' \\<in> set (\\<alpha>n g).\n         (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n         m \\<noteq> m' \\<and> dominates g m m'};\n        m \\<noteq> n \\<and> dominates g m n\\<rbrakk>\n       \\<Longrightarrow> Ex (isIdom g n)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. isIdom g n a", "proof (cases \"A = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> \\<exists>a. isIdom g n a\n 2. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "case True"], ["proof (state)\nthis:\n  A = {}\n\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> \\<exists>a. isIdom g n a\n 2. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "{"], ["proof (state)\nthis:\n  A = {}\n\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> \\<exists>a. isIdom g n a\n 2. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "fix m'"], ["proof (state)\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> \\<exists>a. isIdom g n a\n 2. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "assume asm: \"strict_dom g m' n\" and [simp]: \"m' \\<in> set (\\<alpha>n g)\""], ["proof (state)\nthis:\n  m' \\<noteq> n \\<and> dominates g m' n\n  m' \\<in> set (\\<alpha>n g)\n\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> \\<exists>a. isIdom g n a\n 2. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "with True psubset.prems(1)"], ["proof (chain)\npicking this:\n  A = {}\n  A =\n  {m' \\<in> set (\\<alpha>n g).\n   (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n   m \\<noteq> m' \\<and> dominates g m m'}\n  m' \\<noteq> n \\<and> dominates g m' n\n  m' \\<in> set (\\<alpha>n g)", "have \"\\<not>(strict_dom g m m')\""], ["proof (prove)\nusing this:\n  A = {}\n  A =\n  {m' \\<in> set (\\<alpha>n g).\n   (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n   m \\<noteq> m' \\<and> dominates g m m'}\n  m' \\<noteq> n \\<and> dominates g m' n\n  m' \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. \\<not> (m \\<noteq> m' \\<and> dominates g m m')", "by auto"], ["proof (state)\nthis:\n  \\<not> (m \\<noteq> m' \\<and> dominates g m m')\n\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> \\<exists>a. isIdom g n a\n 2. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "hence \"dominates g m' m\""], ["proof (prove)\nusing this:\n  \\<not> (m \\<noteq> m' \\<and> dominates g m m')\n\ngoal (1 subgoal):\n 1. dominates g m' m", "using dominates_antitrans[of g m' n m] asm psubset.prems(2)"], ["proof (prove)\nusing this:\n  \\<not> (m \\<noteq> m' \\<and> dominates g m m')\n  \\<lbrakk>invar g; dominates g m' n; dominates g m n;\n   dominates g m' m \\<Longrightarrow> ?thesis;\n   dominates g m m' \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  m' \\<noteq> n \\<and> dominates g m' n\n  m \\<noteq> n \\<and> dominates g m n\n\ngoal (1 subgoal):\n 1. dominates g m' m", "by fastforce"], ["proof (state)\nthis:\n  dominates g m' m\n\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> \\<exists>a. isIdom g n a\n 2. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?m'3 \\<noteq> n \\<and> dominates g ?m'3 n;\n   ?m'3 \\<in> set (\\<alpha>n g)\\<rbrakk>\n  \\<Longrightarrow> dominates g ?m'3 m\n\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> \\<exists>a. isIdom g n a\n 2. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?m'3 \\<noteq> n \\<and> dominates g ?m'3 n;\n   ?m'3 \\<in> set (\\<alpha>n g)\\<rbrakk>\n  \\<Longrightarrow> dominates g ?m'3 m\n\ngoal (1 subgoal):\n 1. \\<exists>a. isIdom g n a", "using psubset.prems(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?m'3 \\<noteq> n \\<and> dominates g ?m'3 n;\n   ?m'3 \\<in> set (\\<alpha>n g)\\<rbrakk>\n  \\<Longrightarrow> dominates g ?m'3 m\n  m \\<noteq> n \\<and> dominates g m n\n\ngoal (1 subgoal):\n 1. \\<exists>a. isIdom g n a", "by - (rule exI[of _ m], auto simp:isIdom_def)"], ["proof (state)\nthis:\n  \\<exists>a. isIdom g n a\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "case False"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "then"], ["proof (chain)\npicking this:\n  A \\<noteq> {}", "obtain m' where \"m' \\<in> A\""], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>m'. m' \\<in> A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  m' \\<in> A\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "with psubset.prems(1)"], ["proof (chain)\npicking this:\n  A =\n  {m' \\<in> set (\\<alpha>n g).\n   (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n   m \\<noteq> m' \\<and> dominates g m m'}\n  m' \\<in> A", "have m': \"m' \\<in> set (\\<alpha>n g)\" \"strict_dom g m' n\" \"strict_dom g m m'\""], ["proof (prove)\nusing this:\n  A =\n  {m' \\<in> set (\\<alpha>n g).\n   (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n   m \\<noteq> m' \\<and> dominates g m m'}\n  m' \\<in> A\n\ngoal (1 subgoal):\n 1. m' \\<in> set (\\<alpha>n g) &&&\n    m' \\<noteq> n \\<and> dominates g m' n &&&\n    m \\<noteq> m' \\<and> dominates g m m'", "by auto"], ["proof (state)\nthis:\n  m' \\<in> set (\\<alpha>n g)\n  m' \\<noteq> n \\<and> dominates g m' n\n  m \\<noteq> m' \\<and> dominates g m m'\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "have \"?A m' \\<subset> ?A m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m'a \\<in> set (\\<alpha>n g).\n     (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n     m' \\<noteq> m'a \\<and> dominates g m' m'a}\n    \\<subset> {m' \\<in> set (\\<alpha>n g).\n               (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n               m \\<noteq> m' \\<and> dominates g m m'}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {m'a \\<in> set (\\<alpha>n g).\n     (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n     m' \\<noteq> m'a \\<and> dominates g m' m'a}\n    \\<subseteq> {m' \\<in> set (\\<alpha>n g).\n                 (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n                 m \\<noteq> m' \\<and> dominates g m m'}\n 2. {m'a \\<in> set (\\<alpha>n g).\n     (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n     m' \\<noteq> m'a \\<and> dominates g m' m'a} \\<noteq>\n    {m' \\<in> set (\\<alpha>n g).\n     (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n     m \\<noteq> m' \\<and> dominates g m m'}", "show \"?A m' \\<noteq> ?A m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m'a \\<in> set (\\<alpha>n g).\n     (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n     m' \\<noteq> m'a \\<and> dominates g m' m'a} \\<noteq>\n    {m' \\<in> set (\\<alpha>n g).\n     (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n     m \\<noteq> m' \\<and> dominates g m m'}", "using m'"], ["proof (prove)\nusing this:\n  m' \\<in> set (\\<alpha>n g)\n  m' \\<noteq> n \\<and> dominates g m' n\n  m \\<noteq> m' \\<and> dominates g m m'\n\ngoal (1 subgoal):\n 1. {m'a \\<in> set (\\<alpha>n g).\n     (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n     m' \\<noteq> m'a \\<and> dominates g m' m'a} \\<noteq>\n    {m' \\<in> set (\\<alpha>n g).\n     (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n     m \\<noteq> m' \\<and> dominates g m m'}", "by auto"], ["proof (state)\nthis:\n  {m'a \\<in> set (\\<alpha>n g).\n   (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n   m' \\<noteq> m'a \\<and> dominates g m' m'a} \\<noteq>\n  {m' \\<in> set (\\<alpha>n g).\n   (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n   m \\<noteq> m' \\<and> dominates g m m'}\n\ngoal (1 subgoal):\n 1. {m'a \\<in> set (\\<alpha>n g).\n     (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n     m' \\<noteq> m'a \\<and> dominates g m' m'a}\n    \\<subseteq> {m' \\<in> set (\\<alpha>n g).\n                 (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n                 m \\<noteq> m' \\<and> dominates g m m'}", "show \"?A m' \\<subseteq> ?A m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m'a \\<in> set (\\<alpha>n g).\n     (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n     m' \\<noteq> m'a \\<and> dominates g m' m'a}\n    \\<subseteq> {m' \\<in> set (\\<alpha>n g).\n                 (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n                 m \\<noteq> m' \\<and> dominates g m m'}", "using m' dominates_antisymm[of g m m'] dominates_trans[of g m]"], ["proof (prove)\nusing this:\n  m' \\<in> set (\\<alpha>n g)\n  m' \\<noteq> n \\<and> dominates g m' n\n  m \\<noteq> m' \\<and> dominates g m m'\n  \\<lbrakk>invar g; dominates g m m'; dominates g m' m\\<rbrakk>\n  \\<Longrightarrow> m = m'\n  \\<lbrakk>invar g; dominates g m ?n'; dominates g ?n' ?n''\\<rbrakk>\n  \\<Longrightarrow> dominates g m ?n''\n\ngoal (1 subgoal):\n 1. {m'a \\<in> set (\\<alpha>n g).\n     (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n     m' \\<noteq> m'a \\<and> dominates g m' m'a}\n    \\<subseteq> {m' \\<in> set (\\<alpha>n g).\n                 (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n                 m \\<noteq> m' \\<and> dominates g m m'}", "by auto"], ["proof (state)\nthis:\n  {m'a \\<in> set (\\<alpha>n g).\n   (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n   m' \\<noteq> m'a \\<and> dominates g m' m'a}\n  \\<subseteq> {m' \\<in> set (\\<alpha>n g).\n               (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n               m \\<noteq> m' \\<and> dominates g m m'}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {m'a \\<in> set (\\<alpha>n g).\n   (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n   m' \\<noteq> m'a \\<and> dominates g m' m'a}\n  \\<subset> {m' \\<in> set (\\<alpha>n g).\n             (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n             m \\<noteq> m' \\<and> dominates g m m'}\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> \\<exists>a. isIdom g n a", "thus ?thesis"], ["proof (prove)\nusing this:\n  {m'a \\<in> set (\\<alpha>n g).\n   (m'a \\<noteq> n \\<and> dominates g m'a n) \\<and>\n   m' \\<noteq> m'a \\<and> dominates g m' m'a}\n  \\<subset> {m' \\<in> set (\\<alpha>n g).\n             (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n             m \\<noteq> m' \\<and> dominates g m m'}\n\ngoal (1 subgoal):\n 1. \\<exists>a. isIdom g n a", "by (rule psubset.IH[of _ m', simplified psubset.prems(1)], simp_all add: m')"], ["proof (state)\nthis:\n  \\<exists>a. isIdom g n a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a. isIdom g n a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>finite A;\n   A =\n   {m' \\<in> set (\\<alpha>n g).\n    (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n    m \\<noteq> m' \\<and> dominates g m m'};\n   m \\<noteq> n \\<and> dominates g m n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m'. isIdom g n m'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>finite ?A1;\n   ?A1 =\n   {m' \\<in> set (\\<alpha>n g).\n    (m' \\<noteq> n \\<and> dominates g m' n) \\<and>\n    ?m1 \\<noteq> m' \\<and> dominates g ?m1 m'};\n   ?m1 \\<noteq> n \\<and> dominates g ?m1 n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m'. isIdom g n m'\n\ngoal (2 subgoals):\n 1. \\<exists>m. isIdom g n m\n 2. \\<And>m y.\n       \\<lbrakk>isIdom g n m; isIdom g n y\\<rbrakk> \\<Longrightarrow> m = y", "show \"\\<exists>m. isIdom g n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. isIdom g n m", "by (rule 1[of \"?A (Entry g)\"], auto)"], ["proof (state)\nthis:\n  \\<exists>m. isIdom g n m\n\ngoal (1 subgoal):\n 1. \\<And>m y.\n       \\<lbrakk>isIdom g n m; isIdom g n y\\<rbrakk> \\<Longrightarrow> m = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m y.\n       \\<lbrakk>isIdom g n m; isIdom g n y\\<rbrakk> \\<Longrightarrow> m = y", "fix m m'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m y.\n       \\<lbrakk>isIdom g n m; isIdom g n y\\<rbrakk> \\<Longrightarrow> m = y", "assume \"isIdom g n m\" \"isIdom g n m'\""], ["proof (state)\nthis:\n  isIdom g n m\n  isIdom g n m'\n\ngoal (1 subgoal):\n 1. \\<And>m y.\n       \\<lbrakk>isIdom g n m; isIdom g n y\\<rbrakk> \\<Longrightarrow> m = y", "thus \"m = m'\""], ["proof (prove)\nusing this:\n  isIdom g n m\n  isIdom g n m'\n\ngoal (1 subgoal):\n 1. m = m'", "by - (rule dominates_antisymm[of g], auto simp:isIdom_def)"], ["proof (state)\nthis:\n  m = m'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma idom: \"\\<lbrakk>invar g; n \\<in> set (\\<alpha>n g) - {Entry g}\\<rbrakk> \\<Longrightarrow> isIdom g n (idom g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar g; n \\<in> set (\\<alpha>n g) - {Entry g}\\<rbrakk>\n    \\<Longrightarrow> isIdom g n (idom g n)", "unfolding idom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar g; n \\<in> set (\\<alpha>n g) - {Entry g}\\<rbrakk>\n    \\<Longrightarrow> isIdom g n (THE m. isIdom g n m)", "by (rule theI', rule idom_ex, auto)"], ["", "lemma dominates_mid:\n    assumes \"dominates g n x\" \"dominates g x m\" \"g \\<turnstile> n-ns\\<rightarrow>m\" and[simp]: \"invar g\"\n    shows \"x \\<in> set ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set ns", "using assms"], ["proof (prove)\nusing this:\n  dominates g n x\n  dominates g x m\n  g \\<turnstile> n-ns\\<rightarrow>m\n  invar g\n\ngoal (1 subgoal):\n 1. x \\<in> set ns", "proof (cases \"n = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n = x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns\n 2. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns", "case False"], ["proof (state)\nthis:\n  n \\<noteq> x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n = x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns\n 2. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns", "from assms(1)"], ["proof (chain)\npicking this:\n  dominates g n x", "obtain ns\\<^sub>0 where ns\\<^sub>0: \"g \\<turnstile> Entry g-ns\\<^sub>0\\<rightarrow>n\" \"n \\<notin> set (butlast ns\\<^sub>0)\""], ["proof (prove)\nusing this:\n  dominates g n x\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>0.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<^sub>0\\<rightarrow>n;\n         n \\<notin> set (butlast ns\\<^sub>0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule simple_Entry_path, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<^sub>0\\<rightarrow>n\n  n \\<notin> set (butlast ns\\<^sub>0)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n = x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns\n 2. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns", "with assms(3)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> Entry g-ns\\<^sub>0\\<rightarrow>n\n  n \\<notin> set (butlast ns\\<^sub>0)", "have \"g \\<turnstile> Entry g-butlast ns\\<^sub>0@ns\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> Entry g-ns\\<^sub>0\\<rightarrow>n\n  n \\<notin> set (butlast ns\\<^sub>0)\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-butlast ns\\<^sub>0 @ ns\\<rightarrow>m", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-butlast ns\\<^sub>0 @ ns\\<rightarrow>m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n = x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns\n 2. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns", "with assms(2)"], ["proof (chain)\npicking this:\n  dominates g x m\n  g \\<turnstile> Entry g-butlast ns\\<^sub>0 @ ns\\<rightarrow>m", "have \"x \\<in> set (butlast ns\\<^sub>0@ns)\""], ["proof (prove)\nusing this:\n  dominates g x m\n  g \\<turnstile> Entry g-butlast ns\\<^sub>0 @ ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. x \\<in> set (butlast ns\\<^sub>0 @ ns)", "by (auto elim!:dominatesE)"], ["proof (state)\nthis:\n  x \\<in> set (butlast ns\\<^sub>0 @ ns)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n = x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns\n 2. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns", "moreover"], ["proof (state)\nthis:\n  x \\<in> set (butlast ns\\<^sub>0 @ ns)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n = x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns\n 2. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns", "have \"x \\<notin> set (butlast ns\\<^sub>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set (butlast ns\\<^sub>0)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> set (butlast ns\\<^sub>0) \\<Longrightarrow> False", "assume asm: \"x \\<in> set (butlast ns\\<^sub>0)\""], ["proof (state)\nthis:\n  x \\<in> set (butlast ns\\<^sub>0)\n\ngoal (1 subgoal):\n 1. x \\<in> set (butlast ns\\<^sub>0) \\<Longrightarrow> False", "with ns\\<^sub>0"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<^sub>0\\<rightarrow>n\n  n \\<notin> set (butlast ns\\<^sub>0)\n  x \\<in> set (butlast ns\\<^sub>0)", "obtain ns\\<^sub>0' where ns\\<^sub>0': \"g \\<turnstile> Entry g-ns\\<^sub>0'\\<rightarrow>x\" \"n \\<notin> set (butlast ns\\<^sub>0')\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<^sub>0\\<rightarrow>n\n  n \\<notin> set (butlast ns\\<^sub>0)\n  x \\<in> set (butlast ns\\<^sub>0)\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>0'.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<^sub>0'\\<rightarrow>x;\n         n \\<notin> set (butlast ns\\<^sub>0')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (erule path2_split_ex, auto dest:in_set_butlastD simp: butlast_append split: if_split_asm)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<^sub>0'\\<rightarrow>x\n  n \\<notin> set (butlast ns\\<^sub>0')\n\ngoal (1 subgoal):\n 1. x \\<in> set (butlast ns\\<^sub>0) \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "by (metis False assms(1) ns\\<^sub>0' strict_domE)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<notin> set (butlast ns\\<^sub>0)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n = x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns\n 2. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> set (butlast ns\\<^sub>0 @ ns)\n  x \\<notin> set (butlast ns\\<^sub>0)", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> set (butlast ns\\<^sub>0 @ ns)\n  x \\<notin> set (butlast ns\\<^sub>0)\n\ngoal (1 subgoal):\n 1. x \\<in> set ns", "by simp"], ["proof (state)\nthis:\n  x \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dominates g n x; dominates g x m;\n     g \\<turnstile> n-ns\\<rightarrow>m; invar g; n = x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set ns", "qed auto"], ["", "definition shortestPath :: \"'g \\<Rightarrow> 'node \\<Rightarrow> nat\" where\n    \"shortestPath g n \\<equiv> (LEAST l. \\<exists>ns. length ns = l \\<and> g \\<turnstile> Entry g-ns\\<rightarrow>n)\""], ["", "lemma shortestPath_ex:\n    assumes \"n \\<in> set (\\<alpha>n g)\" \"invar g\"\n    obtains ns where \"g \\<turnstile> Entry g-ns\\<rightarrow>n\" \"distinct ns\" \"length ns = shortestPath g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n; distinct ns;\n         length ns = shortestPath g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n; distinct ns;\n         length ns = shortestPath g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  n \\<in> set (\\<alpha>n g)\n  invar g", "obtain ns where \"g \\<turnstile> Entry g-ns\\<rightarrow>n\""], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g)\n  invar g\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by - (atomize_elim, rule Entry_reaches)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n; distinct ns;\n         length ns = shortestPath g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n", "obtain sns where sns: \"length sns = shortestPath g n\" \"g \\<turnstile> Entry g-sns\\<rightarrow>n\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>sns.\n        \\<lbrakk>length sns = shortestPath g n;\n         g \\<turnstile> Entry g-sns\\<rightarrow>n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding shortestPath_def"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>sns.\n        \\<lbrakk>length sns =\n                 (LEAST l.\n                     \\<exists>ns.\n                        length ns = l \\<and>\n                        g \\<turnstile> Entry g-ns\\<rightarrow>n);\n         g \\<turnstile> Entry g-sns\\<rightarrow>n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(atomize_elim, rule LeastI, auto)"], ["proof (state)\nthis:\n  length sns = shortestPath g n\n  g \\<turnstile> Entry g-sns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n; distinct ns;\n         length ns = shortestPath g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  length sns = shortestPath g n\n  g \\<turnstile> Entry g-sns\\<rightarrow>n", "obtain sns' where sns': \"length sns' \\<le> shortestPath g n\" \"g \\<turnstile> Entry g-sns'\\<rightarrow>n\" \"distinct sns'\""], ["proof (prove)\nusing this:\n  length sns = shortestPath g n\n  g \\<turnstile> Entry g-sns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>sns'.\n        \\<lbrakk>length sns' \\<le> shortestPath g n;\n         g \\<turnstile> Entry g-sns'\\<rightarrow>n; distinct sns'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule simple_path2, auto)"], ["proof (state)\nthis:\n  length sns' \\<le> shortestPath g n\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n\n  distinct sns'\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n; distinct ns;\n         length ns = shortestPath g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  length sns' \\<le> shortestPath g n\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n\n  distinct sns'\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n; distinct ns;\n         length ns = shortestPath g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from sns'(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n", "have \"shortestPath g n \\<le> length sns'\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length sns'", "unfolding shortestPath_def"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (LEAST l.\n        \\<exists>ns.\n           length ns = l \\<and> g \\<turnstile> Entry g-ns\\<rightarrow>n)\n    \\<le> length sns'", "by - (rule Least_le, auto)"], ["proof (state)\nthis:\n  shortestPath g n \\<le> length sns'\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n; distinct ns;\n         length ns = shortestPath g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  length sns' \\<le> shortestPath g n\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n\n  distinct sns'\n  shortestPath g n \\<le> length sns'", "show thesis"], ["proof (prove)\nusing this:\n  length sns' \\<le> shortestPath g n\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n\n  distinct sns'\n  shortestPath g n \\<le> length sns'\n\ngoal (1 subgoal):\n 1. thesis", "by -(rule that, auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma[simp]: \"\\<lbrakk>n \\<in> set (\\<alpha>n g); invar g\\<rbrakk> \\<Longrightarrow> shortestPath g n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g); invar g\\<rbrakk>\n    \\<Longrightarrow> shortestPath g n \\<noteq> 0", "by (metis length_0_conv path2_not_Nil2 shortestPath_ex)"], ["", "lemma shortestPath_upper_bound:\n    assumes \"n \\<in> set (\\<alpha>n g)\" \"invar g\"\n    shows \"shortestPath g n \\<le> length (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length (\\<alpha>n g)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length (\\<alpha>n g)", "from assms"], ["proof (chain)\npicking this:\n  n \\<in> set (\\<alpha>n g)\n  invar g", "obtain ns where ns: \"g \\<turnstile> Entry g-ns\\<rightarrow>n\" \"length ns = shortestPath g n\" \"distinct ns\""], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g)\n  invar g\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n         length ns = shortestPath g n; distinct ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule shortestPath_ex)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  length ns = shortestPath g n\n  distinct ns\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length (\\<alpha>n g)", "hence \"shortestPath g n = length ns\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  length ns = shortestPath g n\n  distinct ns\n\ngoal (1 subgoal):\n 1. shortestPath g n = length ns", "by simp"], ["proof (state)\nthis:\n  shortestPath g n = length ns\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length (\\<alpha>n g)", "also"], ["proof (state)\nthis:\n  shortestPath g n = length ns\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length (\\<alpha>n g)", "have \"... = card (set ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ns = card (set ns)", "using ns(3)"], ["proof (prove)\nusing this:\n  distinct ns\n\ngoal (1 subgoal):\n 1. length ns = card (set ns)", "by (rule distinct_card[symmetric])"], ["proof (state)\nthis:\n  length ns = card (set ns)\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length (\\<alpha>n g)", "also"], ["proof (state)\nthis:\n  length ns = card (set ns)\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length (\\<alpha>n g)", "have \"... \\<le> card (set (\\<alpha>n g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set ns) \\<le> card (set (\\<alpha>n g))", "using ns(1)"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. card (set ns) \\<le> card (set (\\<alpha>n g))", "by - (rule card_mono, auto)"], ["proof (state)\nthis:\n  card (set ns) \\<le> card (set (\\<alpha>n g))\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length (\\<alpha>n g)", "also"], ["proof (state)\nthis:\n  card (set ns) \\<le> card (set (\\<alpha>n g))\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length (\\<alpha>n g)", "have \"... \\<le> length (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set (\\<alpha>n g)) \\<le> length (\\<alpha>n g)", "by (rule card_length)"], ["proof (state)\nthis:\n  card (set (\\<alpha>n g)) \\<le> length (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length (\\<alpha>n g)", "finally"], ["proof (chain)\npicking this:\n  shortestPath g n \\<le> length (\\<alpha>n g)", "show ?thesis"], ["proof (prove)\nusing this:\n  shortestPath g n \\<le> length (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length (\\<alpha>n g)", "."], ["proof (state)\nthis:\n  shortestPath g n \\<le> length (\\<alpha>n g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma shortestPath_predecessor:\n    assumes \"n \\<in> set (\\<alpha>n g) - {Entry g}\" and[simp]: \"invar g\"\n    obtains n' where \"Suc (shortestPath g n') = shortestPath g n\" \"n' \\<in> set (predecessors g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  n \\<in> set (\\<alpha>n g) - {Entry g}\n  invar g", "obtain sns where sns: \"length sns = shortestPath g n\" \"g \\<turnstile> Entry g-sns\\<rightarrow>n\""], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g) - {Entry g}\n  invar g\n\ngoal (1 subgoal):\n 1. (\\<And>sns.\n        \\<lbrakk>length sns = shortestPath g n;\n         g \\<turnstile> Entry g-sns\\<rightarrow>n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule shortestPath_ex, auto)"], ["proof (state)\nthis:\n  length sns = shortestPath g n\n  g \\<turnstile> Entry g-sns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?n' = \"last (butlast sns)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(1) sns(2)"], ["proof (chain)\npicking this:\n  n \\<in> set (\\<alpha>n g) - {Entry g}\n  g \\<turnstile> Entry g-sns\\<rightarrow>n", "have 1: \"length sns \\<ge> 2\""], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g) - {Entry g}\n  g \\<turnstile> Entry g-sns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. 2 \\<le> length sns", "by auto"], ["proof (state)\nthis:\n  2 \\<le> length sns\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence prefix: \"g \\<turnstile> Entry g-butlast sns\\<rightarrow>last (butlast sns) \\<and> last (butlast sns) \\<in> set (predecessors g n)\""], ["proof (prove)\nusing this:\n  2 \\<le> length sns\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-butlast sns\\<rightarrow>last (butlast sns) \\<and>\n    last (butlast sns) \\<in> set (predecessors g n)", "using sns"], ["proof (prove)\nusing this:\n  2 \\<le> length sns\n  length sns = shortestPath g n\n  g \\<turnstile> Entry g-sns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-butlast sns\\<rightarrow>last (butlast sns) \\<and>\n    last (butlast sns) \\<in> set (predecessors g n)", "by -(rule path2_unsnoc, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-butlast sns\\<rightarrow>last (butlast sns) \\<and>\n  last (butlast sns) \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"shortestPath g ?n' \\<le> length (butlast sns)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-butlast sns\\<rightarrow>last (butlast sns) \\<and>\n  last (butlast sns) \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. shortestPath g (last (butlast sns)) \\<le> length (butlast sns)", "unfolding shortestPath_def"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-butlast sns\\<rightarrow>last (butlast sns) \\<and>\n  last (butlast sns) \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. (LEAST l.\n        \\<exists>ns.\n           length ns = l \\<and>\n           g \\<turnstile> Entry g-ns\\<rightarrow>last (butlast sns))\n    \\<le> length (butlast sns)", "by -(rule Least_le, rule exI[where x = \"butlast sns\"], simp)"], ["proof (state)\nthis:\n  shortestPath g (last (butlast sns)) \\<le> length (butlast sns)\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with 1 sns(1)"], ["proof (chain)\npicking this:\n  2 \\<le> length sns\n  length sns = shortestPath g n\n  shortestPath g (last (butlast sns)) \\<le> length (butlast sns)", "have 2: \"shortestPath g ?n' < shortestPath g n\""], ["proof (prove)\nusing this:\n  2 \\<le> length sns\n  length sns = shortestPath g n\n  shortestPath g (last (butlast sns)) \\<le> length (butlast sns)\n\ngoal (1 subgoal):\n 1. shortestPath g (last (butlast sns)) < shortestPath g n", "by auto"], ["proof (state)\nthis:\n  shortestPath g (last (butlast sns)) < shortestPath g n\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  shortestPath g (last (butlast sns)) < shortestPath g n\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume asm: \"Suc (shortestPath g ?n') \\<noteq> shortestPath g n\""], ["proof (state)\nthis:\n  Suc (shortestPath g (last (butlast sns))) \\<noteq> shortestPath g n\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain sns' where sns': \"g \\<turnstile> Entry g-sns'\\<rightarrow>?n'\" \"length sns' = shortestPath g ?n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>sns'.\n        \\<lbrakk>g \\<turnstile> Entry g-sns'\\<rightarrow>last (butlast sns);\n         length sns' = shortestPath g (last (butlast sns))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prefix"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-butlast sns\\<rightarrow>last (butlast sns) \\<and>\n  last (butlast sns) \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. (\\<And>sns'.\n        \\<lbrakk>g \\<turnstile> Entry g-sns'\\<rightarrow>last (butlast sns);\n         length sns' = shortestPath g (last (butlast sns))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule shortestPath_ex, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-sns'\\<rightarrow>last (butlast sns)\n  length sns' = shortestPath g (last (butlast sns))\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence[simp]: \"g \\<turnstile> Entry g-sns'@[n]\\<rightarrow>n\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-sns'\\<rightarrow>last (butlast sns)\n  length sns' = shortestPath g (last (butlast sns))\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-sns' @ [n]\\<rightarrow>n", "using prefix"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-sns'\\<rightarrow>last (butlast sns)\n  length sns' = shortestPath g (last (butlast sns))\n  g \\<turnstile> Entry g-butlast sns\\<rightarrow>last (butlast sns) \\<and>\n  last (butlast sns) \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-sns' @ [n]\\<rightarrow>n", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-sns' @ [n]\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from asm 2"], ["proof (chain)\npicking this:\n  Suc (shortestPath g (last (butlast sns))) \\<noteq> shortestPath g n\n  shortestPath g (last (butlast sns)) < shortestPath g n", "have \"Suc (shortestPath g ?n') < shortestPath g n\""], ["proof (prove)\nusing this:\n  Suc (shortestPath g (last (butlast sns))) \\<noteq> shortestPath g n\n  shortestPath g (last (butlast sns)) < shortestPath g n\n\ngoal (1 subgoal):\n 1. Suc (shortestPath g (last (butlast sns))) < shortestPath g n", "by auto"], ["proof (state)\nthis:\n  Suc (shortestPath g (last (butlast sns))) < shortestPath g n\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this[unfolded shortestPath_def, THEN not_less_Least, folded shortestPath_def, simplified, THEN spec[of _ \"sns'@[n]\"]]"], ["proof (chain)\npicking this:\n  length (sns' @ [n]) =\n  Suc (shortestPath g (last (butlast sns))) \\<longrightarrow>\n  \\<not> g \\<turnstile> Entry g-sns' @ [n]\\<rightarrow>n", "have False"], ["proof (prove)\nusing this:\n  length (sns' @ [n]) =\n  Suc (shortestPath g (last (butlast sns))) \\<longrightarrow>\n  \\<not> g \\<turnstile> Entry g-sns' @ [n]\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. False", "using sns'(2)"], ["proof (prove)\nusing this:\n  length (sns' @ [n]) =\n  Suc (shortestPath g (last (butlast sns))) \\<longrightarrow>\n  \\<not> g \\<turnstile> Entry g-sns' @ [n]\\<rightarrow>n\n  length sns' = shortestPath g (last (butlast sns))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  Suc (shortestPath g (last (butlast sns))) \\<noteq>\n  shortestPath g n \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>Suc (shortestPath g n') = shortestPath g n;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with prefix"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-butlast sns\\<rightarrow>last (butlast sns) \\<and>\n  last (butlast sns) \\<in> set (predecessors g n)\n  Suc (shortestPath g (last (butlast sns))) \\<noteq>\n  shortestPath g n \\<Longrightarrow>\n  False", "show thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-butlast sns\\<rightarrow>last (butlast sns) \\<and>\n  last (butlast sns) \\<in> set (predecessors g n)\n  Suc (shortestPath g (last (butlast sns))) \\<noteq>\n  shortestPath g n \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that, auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma successor_in_\\<alpha>n[simp]:\n    assumes \"predecessors g n \\<noteq> []\" and[simp]: \"invar g\"\n    shows \"n \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "from assms(1)"], ["proof (chain)\npicking this:\n  predecessors g n \\<noteq> []", "obtain m where \"m \\<in> set (predecessors g n)\""], ["proof (prove)\nusing this:\n  predecessors g n \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        m \\<in> set (predecessors g n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"predecessors g n\", auto)"], ["proof (state)\nthis:\n  m \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "with assms(1)"], ["proof (chain)\npicking this:\n  predecessors g n \\<noteq> []\n  m \\<in> set (predecessors g n)", "obtain m' e where \"(m',e,n) \\<in> \\<alpha>e g\""], ["proof (prove)\nusing this:\n  predecessors g n \\<noteq> []\n  m \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. (\\<And>m' e.\n        (m', e, n) \\<in> \\<alpha>e g \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using inEdges_correct[of g n, THEN arg_cong[where f=\"(`) getTo\"]]"], ["proof (prove)\nusing this:\n  predecessors g n \\<noteq> []\n  m \\<in> set (predecessors g n)\n  invar g \\<Longrightarrow>\n  getTo ` set (inEdges g n) =\n  getTo ` ({(uu_, uu_, t). t = n} \\<inter> \\<alpha>e g)\n\ngoal (1 subgoal):\n 1. (\\<And>m' e.\n        (m', e, n) \\<in> \\<alpha>e g \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: predecessors_def simp del: inEdges_correct)"], ["proof (state)\nthis:\n  (m', e, n) \\<in> \\<alpha>e g\n\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "with assms(1)"], ["proof (chain)\npicking this:\n  predecessors g n \\<noteq> []\n  (m', e, n) \\<in> \\<alpha>e g", "show ?thesis"], ["proof (prove)\nusing this:\n  predecessors g n \\<noteq> []\n  (m', e, n) \\<in> \\<alpha>e g\n\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "by (auto simp: predecessors_def)"], ["proof (state)\nthis:\n  n \\<in> set (\\<alpha>n g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma shortestPath_single_predecessor:\n    assumes \"predecessors g n = [m]\" and[simp]: \"invar g\"\n    shows \"shortestPath g m < shortestPath g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shortestPath g m < shortestPath g n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. shortestPath g m < shortestPath g n", "from assms(1)"], ["proof (chain)\npicking this:\n  predecessors g n = [m]", "have \"n \\<in> set (\\<alpha>n g) - {Entry g}\""], ["proof (prove)\nusing this:\n  predecessors g n = [m]\n\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g) - {Entry g}", "by (auto simp: predecessors_def Entry_unreachable)"], ["proof (state)\nthis:\n  n \\<in> set (\\<alpha>n g) - {Entry g}\n\ngoal (1 subgoal):\n 1. shortestPath g m < shortestPath g n", "thus ?thesis"], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g) - {Entry g}\n\ngoal (1 subgoal):\n 1. shortestPath g m < shortestPath g n", "by (rule shortestPath_predecessor, auto simp: assms(1))"], ["proof (state)\nthis:\n  shortestPath g m < shortestPath g n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strict_dom_shortestPath_order:\n    assumes \"strict_dom g n m\" \"m \\<in> set (\\<alpha>n g)\" \"invar g\"\n    shows \"shortestPath g n < shortestPath g m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shortestPath g n < shortestPath g m", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. shortestPath g n < shortestPath g m", "from assms(2,3)"], ["proof (chain)\npicking this:\n  m \\<in> set (\\<alpha>n g)\n  invar g", "obtain sns where sns: \"g \\<turnstile> Entry g-sns\\<rightarrow>m\" \"length sns = shortestPath g m\""], ["proof (prove)\nusing this:\n  m \\<in> set (\\<alpha>n g)\n  invar g\n\ngoal (1 subgoal):\n 1. (\\<And>sns.\n        \\<lbrakk>g \\<turnstile> Entry g-sns\\<rightarrow>m;\n         length sns = shortestPath g m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule shortestPath_ex)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-sns\\<rightarrow>m\n  length sns = shortestPath g m\n\ngoal (1 subgoal):\n 1. shortestPath g n < shortestPath g m", "with assms(1) sns(1)"], ["proof (chain)\npicking this:\n  n \\<noteq> m \\<and> dominates g n m\n  g \\<turnstile> Entry g-sns\\<rightarrow>m\n  g \\<turnstile> Entry g-sns\\<rightarrow>m\n  length sns = shortestPath g m", "obtain sns' where sns': \"g \\<turnstile> Entry g-sns'\\<rightarrow>n\" \"prefix sns' sns\""], ["proof (prove)\nusing this:\n  n \\<noteq> m \\<and> dominates g n m\n  g \\<turnstile> Entry g-sns\\<rightarrow>m\n  g \\<turnstile> Entry g-sns\\<rightarrow>m\n  length sns = shortestPath g m\n\ngoal (1 subgoal):\n 1. (\\<And>sns'.\n        \\<lbrakk>g \\<turnstile> Entry g-sns'\\<rightarrow>n;\n         prefix sns' sns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule path2_prefix_ex, auto elim:dominatesE)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n\n  prefix sns' sns\n\ngoal (1 subgoal):\n 1. shortestPath g n < shortestPath g m", "hence \"shortestPath g n \\<le> length sns'\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n\n  prefix sns' sns\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> length sns'", "unfolding shortestPath_def"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n\n  prefix sns' sns\n\ngoal (1 subgoal):\n 1. (LEAST l.\n        \\<exists>ns.\n           length ns = l \\<and> g \\<turnstile> Entry g-ns\\<rightarrow>n)\n    \\<le> length sns'", "by -(rule Least_le, auto)"], ["proof (state)\nthis:\n  shortestPath g n \\<le> length sns'\n\ngoal (1 subgoal):\n 1. shortestPath g n < shortestPath g m", "also"], ["proof (state)\nthis:\n  shortestPath g n \\<le> length sns'\n\ngoal (1 subgoal):\n 1. shortestPath g n < shortestPath g m", "have \"length sns' < length sns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length sns' < length sns", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. length sns' < length sns", "from assms(1) sns(1) sns'(1)"], ["proof (chain)\npicking this:\n  n \\<noteq> m \\<and> dominates g n m\n  g \\<turnstile> Entry g-sns\\<rightarrow>m\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n", "have \"sns' \\<noteq> sns\""], ["proof (prove)\nusing this:\n  n \\<noteq> m \\<and> dominates g n m\n  g \\<turnstile> Entry g-sns\\<rightarrow>m\n  g \\<turnstile> Entry g-sns'\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. sns' \\<noteq> sns", "by -(drule path2_last, drule path2_last, auto)"], ["proof (state)\nthis:\n  sns' \\<noteq> sns\n\ngoal (1 subgoal):\n 1. length sns' < length sns", "with sns'(2)"], ["proof (chain)\npicking this:\n  prefix sns' sns\n  sns' \\<noteq> sns", "have \"strict_prefix sns' sns\""], ["proof (prove)\nusing this:\n  prefix sns' sns\n  sns' \\<noteq> sns\n\ngoal (1 subgoal):\n 1. strict_prefix sns' sns", "by auto"], ["proof (state)\nthis:\n  strict_prefix sns' sns\n\ngoal (1 subgoal):\n 1. length sns' < length sns", "thus ?thesis"], ["proof (prove)\nusing this:\n  strict_prefix sns' sns\n\ngoal (1 subgoal):\n 1. length sns' < length sns", "by (rule prefix_length_less)"], ["proof (state)\nthis:\n  length sns' < length sns\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length sns' < length sns\n\ngoal (1 subgoal):\n 1. shortestPath g n < shortestPath g m", "finally"], ["proof (chain)\npicking this:\n  shortestPath g n < length sns", "show ?thesis"], ["proof (prove)\nusing this:\n  shortestPath g n < length sns\n\ngoal (1 subgoal):\n 1. shortestPath g n < shortestPath g m", "by (simp add:sns(2))"], ["proof (state)\nthis:\n  shortestPath g n < shortestPath g m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dominates_shortestPath_order:\n    assumes \"dominates g n m\" \"m \\<in> set (\\<alpha>n g)\" \"invar g\"\n    shows \"shortestPath g n \\<le> shortestPath g m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> shortestPath g m", "using assms"], ["proof (prove)\nusing this:\n  dominates g n m\n  m \\<in> set (\\<alpha>n g)\n  invar g\n\ngoal (1 subgoal):\n 1. shortestPath g n \\<le> shortestPath g m", "by (cases \"n = m\", auto intro:strict_dom_shortestPath_order[THEN less_imp_le])"], ["", "lemma strict_dom_trans:\n    assumes[simp]: \"invar g\"\n    assumes \"strict_dom g n m\" \"strict_dom g m m'\"\n    shows \"strict_dom g n m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> m' \\<and> dominates g n m'", "proof (rule, rule notI)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = m' \\<Longrightarrow> False\n 2. dominates g n m'", "assume \"n = m'\""], ["proof (state)\nthis:\n  n = m'\n\ngoal (2 subgoals):\n 1. n = m' \\<Longrightarrow> False\n 2. dominates g n m'", "moreover"], ["proof (state)\nthis:\n  n = m'\n\ngoal (2 subgoals):\n 1. n = m' \\<Longrightarrow> False\n 2. dominates g n m'", "from assms(3)"], ["proof (chain)\npicking this:\n  m \\<noteq> m' \\<and> dominates g m m'", "have \"m' \\<in> set (\\<alpha>n g)\""], ["proof (prove)\nusing this:\n  m \\<noteq> m' \\<and> dominates g m m'\n\ngoal (1 subgoal):\n 1. m' \\<in> set (\\<alpha>n g)", "by auto"], ["proof (state)\nthis:\n  m' \\<in> set (\\<alpha>n g)\n\ngoal (2 subgoals):\n 1. n = m' \\<Longrightarrow> False\n 2. dominates g n m'", "ultimately"], ["proof (chain)\npicking this:\n  n = m'\n  m' \\<in> set (\\<alpha>n g)", "have \"dominates g m' n\""], ["proof (prove)\nusing this:\n  n = m'\n  m' \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. dominates g m' n", "by auto"], ["proof (state)\nthis:\n  dominates g m' n\n\ngoal (2 subgoals):\n 1. n = m' \\<Longrightarrow> False\n 2. dominates g n m'", "with assms(2)"], ["proof (chain)\npicking this:\n  n \\<noteq> m \\<and> dominates g n m\n  dominates g m' n", "have \"dominates g m' m\""], ["proof (prove)\nusing this:\n  n \\<noteq> m \\<and> dominates g n m\n  dominates g m' n\n\ngoal (1 subgoal):\n 1. dominates g m' m", "by - (rule dominates_trans, auto)"], ["proof (state)\nthis:\n  dominates g m' m\n\ngoal (2 subgoals):\n 1. n = m' \\<Longrightarrow> False\n 2. dominates g n m'", "with assms(3)"], ["proof (chain)\npicking this:\n  m \\<noteq> m' \\<and> dominates g m m'\n  dominates g m' m", "show False"], ["proof (prove)\nusing this:\n  m \\<noteq> m' \\<and> dominates g m m'\n  dominates g m' m\n\ngoal (1 subgoal):\n 1. False", "by - (erule conjE, drule dominates_antisymm[OF assms(1)], auto)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. dominates g n m'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. dominates g n m'", "from assms"], ["proof (chain)\npicking this:\n  invar g\n  n \\<noteq> m \\<and> dominates g n m\n  m \\<noteq> m' \\<and> dominates g m m'", "show \"dominates g n m'\""], ["proof (prove)\nusing this:\n  invar g\n  n \\<noteq> m \\<and> dominates g n m\n  m \\<noteq> m' \\<and> dominates g m m'\n\ngoal (1 subgoal):\n 1. dominates g n m'", "by - (rule dominates_trans, auto)"], ["proof (state)\nthis:\n  dominates g n m'\n\ngoal:\nNo subgoals!", "qed"], ["", "inductive EntryPath :: \"'g \\<Rightarrow> 'node list \\<Rightarrow> bool\" where\n    EntryPath_triv[simp]: \"EntryPath g [n]\"\n  | EntryPath_snoc[intro]: \"EntryPath g ns \\<Longrightarrow> shortestPath g m = Suc (shortestPath g (last ns)) \\<Longrightarrow> EntryPath g (ns@[m])\""], ["", "lemma[simp]:\n    assumes \"EntryPath g ns\" \"prefix ns' ns\" \"ns' \\<noteq> []\"\n    shows \"EntryPath g ns'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EntryPath g ns'", "using assms"], ["proof (prove)\nusing this:\n  EntryPath g ns\n  prefix ns' ns\n  ns' \\<noteq> []\n\ngoal (1 subgoal):\n 1. EntryPath g ns'", "proof induction"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>g n.\n       \\<lbrakk>prefix ns' [n]; ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'\n 2. \\<And>g ns m.\n       \\<lbrakk>EntryPath g ns;\n        \\<lbrakk>prefix ns' ns; ns' \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> EntryPath g ns';\n        shortestPath g m = Suc (shortestPath g (last ns));\n        prefix ns' (ns @ [m]); ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'", "case (EntryPath_triv ns n)"], ["proof (state)\nthis:\n  prefix ns' [n]\n  ns' \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>g n.\n       \\<lbrakk>prefix ns' [n]; ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'\n 2. \\<And>g ns m.\n       \\<lbrakk>EntryPath g ns;\n        \\<lbrakk>prefix ns' ns; ns' \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> EntryPath g ns';\n        shortestPath g m = Suc (shortestPath g (last ns));\n        prefix ns' (ns @ [m]); ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'", "thus ?case"], ["proof (prove)\nusing this:\n  prefix ns' [n]\n  ns' \\<noteq> []\n\ngoal (1 subgoal):\n 1. EntryPath ns ns'", "by (cases ns', auto)"], ["proof (state)\nthis:\n  EntryPath ns ns'\n\ngoal (1 subgoal):\n 1. \\<And>g ns m.\n       \\<lbrakk>EntryPath g ns;\n        \\<lbrakk>prefix ns' ns; ns' \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> EntryPath g ns';\n        shortestPath g m = Suc (shortestPath g (last ns));\n        prefix ns' (ns @ [m]); ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'", "qed auto"], ["", "lemma EntryPath_suffix:\n    assumes \"EntryPath g ns\" \"suffix ns' ns\" \"ns' \\<noteq> []\"\n    shows \"EntryPath g ns'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EntryPath g ns'", "using assms"], ["proof (prove)\nusing this:\n  EntryPath g ns\n  suffix ns' ns\n  ns' \\<noteq> []\n\ngoal (1 subgoal):\n 1. EntryPath g ns'", "proof (induction arbitrary: ns')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>g n ns'.\n       \\<lbrakk>suffix ns' [n]; ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'\n 2. \\<And>g ns m ns'.\n       \\<lbrakk>EntryPath g ns;\n        \\<And>ns'.\n           \\<lbrakk>suffix ns' ns; ns' \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> EntryPath g ns';\n        shortestPath g m = Suc (shortestPath g (last ns));\n        suffix ns' (ns @ [m]); ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'", "case EntryPath_triv"], ["proof (state)\nthis:\n  suffix ns' [n_]\n  ns' \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>g n ns'.\n       \\<lbrakk>suffix ns' [n]; ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'\n 2. \\<And>g ns m ns'.\n       \\<lbrakk>EntryPath g ns;\n        \\<And>ns'.\n           \\<lbrakk>suffix ns' ns; ns' \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> EntryPath g ns';\n        shortestPath g m = Suc (shortestPath g (last ns));\n        suffix ns' (ns @ [m]); ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'", "thus ?case"], ["proof (prove)\nusing this:\n  suffix ns' [n_]\n  ns' \\<noteq> []\n\ngoal (1 subgoal):\n 1. EntryPath g_ ns'", "by (metis EntryPath.EntryPath_triv append_Nil append_is_Nil_conv list.sel(3) Sublist.suffix_def tl_append2)"], ["proof (state)\nthis:\n  EntryPath g_ ns'\n\ngoal (1 subgoal):\n 1. \\<And>g ns m ns'.\n       \\<lbrakk>EntryPath g ns;\n        \\<And>ns'.\n           \\<lbrakk>suffix ns' ns; ns' \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> EntryPath g ns';\n        shortestPath g m = Suc (shortestPath g (last ns));\n        suffix ns' (ns @ [m]); ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g ns m ns'.\n       \\<lbrakk>EntryPath g ns;\n        \\<And>ns'.\n           \\<lbrakk>suffix ns' ns; ns' \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> EntryPath g ns';\n        shortestPath g m = Suc (shortestPath g (last ns));\n        suffix ns' (ns @ [m]); ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'", "case (EntryPath_snoc g ns m)"], ["proof (state)\nthis:\n  EntryPath g ns\n  shortestPath g m = Suc (shortestPath g (last ns))\n  \\<lbrakk>suffix ?ns'1 ns; ?ns'1 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> EntryPath g ?ns'1\n  suffix ns' (ns @ [m])\n  ns' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>g ns m ns'.\n       \\<lbrakk>EntryPath g ns;\n        \\<And>ns'.\n           \\<lbrakk>suffix ns' ns; ns' \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> EntryPath g ns';\n        shortestPath g m = Suc (shortestPath g (last ns));\n        suffix ns' (ns @ [m]); ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'", "from EntryPath_snoc.prems"], ["proof (chain)\npicking this:\n  suffix ns' (ns @ [m])\n  ns' \\<noteq> []", "obtain ns'' where [simp]: \"ns' = ns''@[m]\""], ["proof (prove)\nusing this:\n  suffix ns' (ns @ [m])\n  ns' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>ns''.\n        ns' = ns'' @ [m] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (erule suffix_unsnoc, auto)"], ["proof (state)\nthis:\n  ns' = ns'' @ [m]\n\ngoal (1 subgoal):\n 1. \\<And>g ns m ns'.\n       \\<lbrakk>EntryPath g ns;\n        \\<And>ns'.\n           \\<lbrakk>suffix ns' ns; ns' \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> EntryPath g ns';\n        shortestPath g m = Suc (shortestPath g (last ns));\n        suffix ns' (ns @ [m]); ns' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> EntryPath g ns'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. EntryPath g ns'", "proof (cases \"ns'' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ns'' = [] \\<Longrightarrow> EntryPath g ns'\n 2. ns'' \\<noteq> [] \\<Longrightarrow> EntryPath g ns'", "case True"], ["proof (state)\nthis:\n  ns'' = []\n\ngoal (2 subgoals):\n 1. ns'' = [] \\<Longrightarrow> EntryPath g ns'\n 2. ns'' \\<noteq> [] \\<Longrightarrow> EntryPath g ns'", "thus ?thesis"], ["proof (prove)\nusing this:\n  ns'' = []\n\ngoal (1 subgoal):\n 1. EntryPath g ns'", "by auto"], ["proof (state)\nthis:\n  EntryPath g ns'\n\ngoal (1 subgoal):\n 1. ns'' \\<noteq> [] \\<Longrightarrow> EntryPath g ns'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ns'' \\<noteq> [] \\<Longrightarrow> EntryPath g ns'", "case False"], ["proof (state)\nthis:\n  ns'' \\<noteq> []\n\ngoal (1 subgoal):\n 1. ns'' \\<noteq> [] \\<Longrightarrow> EntryPath g ns'", "from EntryPath_snoc.prems(1)"], ["proof (chain)\npicking this:\n  suffix ns' (ns @ [m])", "have \"suffix ns'' ns\""], ["proof (prove)\nusing this:\n  suffix ns' (ns @ [m])\n\ngoal (1 subgoal):\n 1. suffix ns'' ns", "by (auto simp: Sublist.suffix_def)"], ["proof (state)\nthis:\n  suffix ns'' ns\n\ngoal (1 subgoal):\n 1. ns'' \\<noteq> [] \\<Longrightarrow> EntryPath g ns'", "with False"], ["proof (chain)\npicking this:\n  ns'' \\<noteq> []\n  suffix ns'' ns", "have \"last ns'' = last ns\""], ["proof (prove)\nusing this:\n  ns'' \\<noteq> []\n  suffix ns'' ns\n\ngoal (1 subgoal):\n 1. last ns'' = last ns", "by (auto simp: Sublist.suffix_def)"], ["proof (state)\nthis:\n  last ns'' = last ns\n\ngoal (1 subgoal):\n 1. ns'' \\<noteq> [] \\<Longrightarrow> EntryPath g ns'", "moreover"], ["proof (state)\nthis:\n  last ns'' = last ns\n\ngoal (1 subgoal):\n 1. ns'' \\<noteq> [] \\<Longrightarrow> EntryPath g ns'", "from False"], ["proof (chain)\npicking this:\n  ns'' \\<noteq> []", "have \"EntryPath g ns''\""], ["proof (prove)\nusing this:\n  ns'' \\<noteq> []\n\ngoal (1 subgoal):\n 1. EntryPath g ns''", "using EntryPath_snoc.prems(1)"], ["proof (prove)\nusing this:\n  ns'' \\<noteq> []\n  suffix ns' (ns @ [m])\n\ngoal (1 subgoal):\n 1. EntryPath g ns''", "by - (rule EntryPath_snoc.IH, auto simp: Sublist.suffix_def)"], ["proof (state)\nthis:\n  EntryPath g ns''\n\ngoal (1 subgoal):\n 1. ns'' \\<noteq> [] \\<Longrightarrow> EntryPath g ns'", "ultimately"], ["proof (chain)\npicking this:\n  last ns'' = last ns\n  EntryPath g ns''", "show ?thesis"], ["proof (prove)\nusing this:\n  last ns'' = last ns\n  EntryPath g ns''\n\ngoal (1 subgoal):\n 1. EntryPath g ns'", "using EntryPath_snoc.hyps(2)"], ["proof (prove)\nusing this:\n  last ns'' = last ns\n  EntryPath g ns''\n  shortestPath g m = Suc (shortestPath g (last ns))\n\ngoal (1 subgoal):\n 1. EntryPath g ns'", "by - (simp, rule EntryPath.EntryPath_snoc, simp_all)"], ["proof (state)\nthis:\n  EntryPath g ns'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  EntryPath g ns'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma EntryPath_butlast_less_last:\n    assumes \"EntryPath g ns\" \"z \\<in> set (butlast ns)\"\n    shows \"shortestPath g z < shortestPath g (last ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shortestPath g z < shortestPath g (last ns)", "using assms"], ["proof (prove)\nusing this:\n  EntryPath g ns\n  z \\<in> set (butlast ns)\n\ngoal (1 subgoal):\n 1. shortestPath g z < shortestPath g (last ns)", "proof (induction)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>g n.\n       z \\<in> set (butlast [n]) \\<Longrightarrow>\n       shortestPath g z < shortestPath g (last [n])\n 2. \\<And>g ns m.\n       \\<lbrakk>EntryPath g ns;\n        z \\<in> set (butlast ns) \\<Longrightarrow>\n        shortestPath g z < shortestPath g (last ns);\n        shortestPath g m = Suc (shortestPath g (last ns));\n        z \\<in> set (butlast (ns @ [m]))\\<rbrakk>\n       \\<Longrightarrow> shortestPath g z < shortestPath g (last (ns @ [m]))", "case (EntryPath_snoc g ns m)"], ["proof (state)\nthis:\n  EntryPath g ns\n  shortestPath g m = Suc (shortestPath g (last ns))\n  z \\<in> set (butlast ns) \\<Longrightarrow>\n  shortestPath g z < shortestPath g (last ns)\n  z \\<in> set (butlast (ns @ [m]))\n\ngoal (2 subgoals):\n 1. \\<And>g n.\n       z \\<in> set (butlast [n]) \\<Longrightarrow>\n       shortestPath g z < shortestPath g (last [n])\n 2. \\<And>g ns m.\n       \\<lbrakk>EntryPath g ns;\n        z \\<in> set (butlast ns) \\<Longrightarrow>\n        shortestPath g z < shortestPath g (last ns);\n        shortestPath g m = Suc (shortestPath g (last ns));\n        z \\<in> set (butlast (ns @ [m]))\\<rbrakk>\n       \\<Longrightarrow> shortestPath g z < shortestPath g (last (ns @ [m]))", "thus ?case"], ["proof (prove)\nusing this:\n  EntryPath g ns\n  shortestPath g m = Suc (shortestPath g (last ns))\n  z \\<in> set (butlast ns) \\<Longrightarrow>\n  shortestPath g z < shortestPath g (last ns)\n  z \\<in> set (butlast (ns @ [m]))\n\ngoal (1 subgoal):\n 1. shortestPath g z < shortestPath g (last (ns @ [m]))", "by (cases \"z \\<in> set (butlast ns)\", auto dest: not_in_butlast)"], ["proof (state)\nthis:\n  shortestPath g z < shortestPath g (last (ns @ [m]))\n\ngoal (1 subgoal):\n 1. \\<And>g n.\n       z \\<in> set (butlast [n]) \\<Longrightarrow>\n       shortestPath g z < shortestPath g (last [n])", "qed simp"], ["", "lemma EntryPath_distinct:\n    assumes \"EntryPath g ns\"\n    shows \"distinct ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct ns", "using assms"], ["proof (prove)\nusing this:\n  EntryPath g ns\n\ngoal (1 subgoal):\n 1. distinct ns", "proof (induction)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>g n. distinct [n]\n 2. \\<And>g ns m.\n       \\<lbrakk>EntryPath g ns; distinct ns;\n        shortestPath g m = Suc (shortestPath g (last ns))\\<rbrakk>\n       \\<Longrightarrow> distinct (ns @ [m])", "case (EntryPath_snoc g ns m)"], ["proof (state)\nthis:\n  EntryPath g ns\n  shortestPath g m = Suc (shortestPath g (last ns))\n  distinct ns\n\ngoal (2 subgoals):\n 1. \\<And>g n. distinct [n]\n 2. \\<And>g ns m.\n       \\<lbrakk>EntryPath g ns; distinct ns;\n        shortestPath g m = Suc (shortestPath g (last ns))\\<rbrakk>\n       \\<Longrightarrow> distinct (ns @ [m])", "from this"], ["proof (chain)\npicking this:\n  EntryPath g ns\n  shortestPath g m = Suc (shortestPath g (last ns))\n  distinct ns", "consider (non_distinct) \"m \\<in> set ns\" | \"distinct (ns @ [m])\""], ["proof (prove)\nusing this:\n  EntryPath g ns\n  shortestPath g m = Suc (shortestPath g (last ns))\n  distinct ns\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> set ns \\<Longrightarrow> thesis;\n     distinct (ns @ [m]) \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>m \\<in> set ns \\<Longrightarrow> ?thesis1;\n   distinct (ns @ [m]) \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (2 subgoals):\n 1. \\<And>g n. distinct [n]\n 2. \\<And>g ns m.\n       \\<lbrakk>EntryPath g ns; distinct ns;\n        shortestPath g m = Suc (shortestPath g (last ns))\\<rbrakk>\n       \\<Longrightarrow> distinct (ns @ [m])", "thus \"distinct (ns @ [m])\""], ["proof (prove)\nusing this:\n  \\<lbrakk>m \\<in> set ns \\<Longrightarrow> ?thesis1;\n   distinct (ns @ [m]) \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. distinct (ns @ [m])", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. m \\<in> set ns \\<Longrightarrow> distinct (ns @ [m])\n 2. distinct (ns @ [m]) \\<Longrightarrow> distinct (ns @ [m])", "case non_distinct"], ["proof (state)\nthis:\n  m \\<in> set ns\n\ngoal (2 subgoals):\n 1. m \\<in> set ns \\<Longrightarrow> distinct (ns @ [m])\n 2. distinct (ns @ [m]) \\<Longrightarrow> distinct (ns @ [m])", "have \"EntryPath g (ns @ [m])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EntryPath g (ns @ [m])", "using EntryPath_snoc"], ["proof (prove)\nusing this:\n  EntryPath g ns\n  shortestPath g m = Suc (shortestPath g (last ns))\n  distinct ns\n\ngoal (1 subgoal):\n 1. EntryPath g (ns @ [m])", "by (intro EntryPath.intros(2))"], ["proof (state)\nthis:\n  EntryPath g (ns @ [m])\n\ngoal (2 subgoals):\n 1. m \\<in> set ns \\<Longrightarrow> distinct (ns @ [m])\n 2. distinct (ns @ [m]) \\<Longrightarrow> distinct (ns @ [m])", "with non_distinct"], ["proof (chain)\npicking this:\n  m \\<in> set ns\n  EntryPath g (ns @ [m])", "have \"False\""], ["proof (prove)\nusing this:\n  m \\<in> set ns\n  EntryPath g (ns @ [m])\n\ngoal (1 subgoal):\n 1. False", "using EntryPath_butlast_less_last butlast_snoc last_snoc less_not_refl"], ["proof (prove)\nusing this:\n  m \\<in> set ns\n  EntryPath g (ns @ [m])\n  \\<lbrakk>EntryPath ?g ?ns; ?z \\<in> set (butlast ?ns)\\<rbrakk>\n  \\<Longrightarrow> shortestPath ?g ?z < shortestPath ?g (last ?ns)\n  butlast (?xs @ [?x]) = ?xs\n  last (?xs @ [?x]) = ?x\n  \\<not> ?n < ?n\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. m \\<in> set ns \\<Longrightarrow> distinct (ns @ [m])\n 2. distinct (ns @ [m]) \\<Longrightarrow> distinct (ns @ [m])", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. distinct (ns @ [m])", "by simp"], ["proof (state)\nthis:\n  distinct (ns @ [m])\n\ngoal (1 subgoal):\n 1. distinct (ns @ [m]) \\<Longrightarrow> distinct (ns @ [m])", "qed"], ["proof (state)\nthis:\n  distinct (ns @ [m])\n\ngoal (1 subgoal):\n 1. \\<And>g n. distinct [n]", "qed simp"], ["", "lemma Entry_reachesE:\n    assumes \"n \\<in> set (\\<alpha>n g)\" and[simp]: \"invar g\"\n    obtains ns where \"g \\<turnstile> Entry g-ns\\<rightarrow>n\" \"EntryPath g ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n         EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n         EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction \"shortestPath g n\" arbitrary:n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>0 = shortestPath g n;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n            EntryPath g ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x = shortestPath g n;\n                    \\<And>ns.\n                       \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n                        EntryPath g ns\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    n \\<in> set (\\<alpha>n g)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        Suc x = shortestPath g n;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n            EntryPath g ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case 0"], ["proof (state)\nthis:\n  0 = shortestPath g n\n  \\<lbrakk>g \\<turnstile> Entry g-?ns1\\<rightarrow>n;\n   EntryPath g ?ns1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  n \\<in> set (\\<alpha>n g)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>0 = shortestPath g n;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n            EntryPath g ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x = shortestPath g n;\n                    \\<And>ns.\n                       \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n                        EntryPath g ns\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    n \\<in> set (\\<alpha>n g)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        Suc x = shortestPath g n;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n            EntryPath g ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence False"], ["proof (prove)\nusing this:\n  0 = shortestPath g n\n  \\<lbrakk>g \\<turnstile> Entry g-?ns1\\<rightarrow>n;\n   EntryPath g ?ns1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>0 = shortestPath g n;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n            EntryPath g ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x = shortestPath g n;\n                    \\<And>ns.\n                       \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n                        EntryPath g ns\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    n \\<in> set (\\<alpha>n g)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        Suc x = shortestPath g n;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n            EntryPath g ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x = shortestPath g n;\n                    \\<And>ns.\n                       \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n                        EntryPath g ns\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    n \\<in> set (\\<alpha>n g)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        Suc x = shortestPath g n;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n            EntryPath g ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x = shortestPath g n;\n                    \\<And>ns.\n                       \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n                        EntryPath g ns\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    n \\<in> set (\\<alpha>n g)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        Suc x = shortestPath g n;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n            EntryPath g ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Suc l)"], ["proof (state)\nthis:\n  \\<lbrakk>l = shortestPath g ?n1;\n   \\<And>ns.\n      \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>?n1;\n       EntryPath g ns\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   ?n1 \\<in> set (\\<alpha>n g)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  Suc l = shortestPath g n\n  \\<lbrakk>g \\<turnstile> Entry g-?ns1\\<rightarrow>n;\n   EntryPath g ?ns1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x = shortestPath g n;\n                    \\<And>ns.\n                       \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n                        EntryPath g ns\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    n \\<in> set (\\<alpha>n g)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        Suc x = shortestPath g n;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n            EntryPath g ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> thesis", "note Suc.prems(2)[simp]"], ["proof (state)\nthis:\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x = shortestPath g n;\n                    \\<And>ns.\n                       \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n                        EntryPath g ns\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    n \\<in> set (\\<alpha>n g)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        Suc x = shortestPath g n;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>n;\n            EntryPath g ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"n = Entry g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = Entry g \\<Longrightarrow> thesis\n 2. n \\<noteq> Entry g \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  n = Entry g\n\ngoal (2 subgoals):\n 1. n = Entry g \\<Longrightarrow> thesis\n 2. n \\<noteq> Entry g \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = Entry g\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule Suc.prems(1), auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. n \\<noteq> Entry g \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> Entry g \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  n \\<noteq> Entry g\n\ngoal (1 subgoal):\n 1. n \\<noteq> Entry g \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  n \\<noteq> Entry g", "obtain n' where n': \"shortestPath g n' = l\" \"n' \\<in> set (predecessors g n)\""], ["proof (prove)\nusing this:\n  n \\<noteq> Entry g\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>shortestPath g n' = l;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Suc.hyps(2)[symmetric]"], ["proof (prove)\nusing this:\n  n \\<noteq> Entry g\n  shortestPath g n = Suc l\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>shortestPath g n' = l;\n         n' \\<in> set (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule shortestPath_predecessor, auto)"], ["proof (state)\nthis:\n  shortestPath g n' = l\n  n' \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. n \\<noteq> Entry g \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  shortestPath g n' = l\n  n' \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. n \\<noteq> Entry g \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  shortestPath g n' = l\n  n' \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. n \\<noteq> Entry g \\<Longrightarrow> thesis", "fix ns"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> Entry g \\<Longrightarrow> thesis", "assume asm: \"g \\<turnstile> Entry g-ns\\<rightarrow>n'\" \"EntryPath g ns\""], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n'\n  EntryPath g ns\n\ngoal (1 subgoal):\n 1. n \\<noteq> Entry g \\<Longrightarrow> thesis", "hence thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n'\n  EntryPath g ns\n\ngoal (1 subgoal):\n 1. thesis", "using n' Suc.hyps(2) path2_last[OF asm(1)]"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n'\n  EntryPath g ns\n  shortestPath g n' = l\n  n' \\<in> set (predecessors g n)\n  Suc l = shortestPath g n\n  n' = last ns\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule Suc.prems(1)[of \"ns@[n]\"], auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. n \\<noteq> Entry g \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  \\<lbrakk>g \\<turnstile> Entry g-?ns3\\<rightarrow>n';\n   EntryPath g ?ns3\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. n \\<noteq> Entry g \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  shortestPath g n' = l\n  n' \\<in> set (predecessors g n)\n  \\<lbrakk>g \\<turnstile> Entry g-?ns3\\<rightarrow>n';\n   EntryPath g ?ns3\\<rbrakk>\n  \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\nusing this:\n  shortestPath g n' = l\n  n' \\<in> set (predecessors g n)\n  \\<lbrakk>g \\<turnstile> Entry g-?ns3\\<rightarrow>n';\n   EntryPath g ?ns3\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule Suc.hyps(1), auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}