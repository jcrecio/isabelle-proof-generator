{"file_name": "/home/qj213/afp-2021-10-22/thys/Formal_SSA/WhileGraphSSA.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Formal_SSA", "problem_names": ["lemma finite_valid_edge [simp, intro!]: \"finite (Collect (valid_edge c))\"", "lemma uses_expr_finite: \"finite (rhs_aux e)\"", "lemma uses_cmd_finite: \"finite (rhs c)\"", "lemma defs_cmd_finite: \"finite (lhs c)\"", "lemma finite_labels': \"finite {(l,c). labels prog l c}\"", "lemma finite_Defs [simp, intro!]: \"finite (Defs c n)\"", "lemma finite_Uses [simp, intro!]: \"finite (Uses c n)\"", "lemmas while_cfg_defs = while_cfg_\\<alpha>e_def while_cfg_\\<alpha>n_def\n  while_cfg_invar_def while_cfg_inEdges'_def\n  while_cfg_Entry_def while_cfg_defs_def\n  while_cfg_uses_def", "lemma right_total_const: \"right_total (\\<lambda>x y. x = c)\"", "lemma const_transfer: \"rel_fun (\\<lambda>x y. x = c) (=) f (\\<lambda>_. f c)\"", "lemma  while_path_graph_pathD: \"While_CFG.path (transform c) n es m \\<Longrightarrow> while.path2 c n (n#map targetnode es) m\"", "lemma Uses_Entry [simp]: \"Uses c (_Entry_) = {}\"", "lemma in_Uses_valid_node: \"V \\<in> Uses c n \\<Longrightarrow> valid_node c n\"", "lemma while_cfg_CFG_wf_impl:\n  \"SSA_CFG.CFG_wf (\\<lambda>_. gen_\\<alpha>e (gen_while_cfg cmd)) (\\<lambda>_. gen_\\<alpha>n (gen_while_cfg cmd))\n            (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. gen_inEdges' (gen_while_cfg cmd))\n            (\\<lambda>_. gen_Entry (gen_while_cfg cmd)) (\\<lambda>_. gen_defs (gen_while_cfg cmd))\n            (\\<lambda>_. gen_uses (gen_while_cfg cmd))\""], "translations": [["", "lemma finite_valid_edge [simp, intro!]: \"finite (Collect (valid_edge c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Collect (valid_edge c))", "unfolding valid_edge_def [abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {a. c \\<turnstile> sourcenode a -kind a\\<rightarrow> targetnode a}", "apply (rule inj_on_finite [where f=\"\\<lambda>(f,d,t). (f,t)\" and B=\"Collect (valid_node c) \\<times> Collect (valid_node c)\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. inj_on (\\<lambda>(f, d, t). (f, t))\n     {a. c \\<turnstile> sourcenode a -kind a\\<rightarrow> targetnode a}\n 2. (\\<lambda>(f, d, t). (f, t)) `\n    {a. c \\<turnstile> sourcenode a -kind a\\<rightarrow> targetnode a}\n    \\<subseteq> Collect (valid_node c) \\<times> Collect (valid_node c)\n 3. finite (Collect (valid_node c) \\<times> Collect (valid_node c))", "apply (rule inj_onI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {a. c \\<turnstile> sourcenode\n      a -kind a\\<rightarrow> targetnode a};\n        y \\<in> {a. c \\<turnstile> sourcenode\n                                    a -kind a\\<rightarrow> targetnode a};\n        (case x of (f, d, t) \\<Rightarrow> (f, t)) =\n        (case y of (f, d, t) \\<Rightarrow> (f, t))\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. (\\<lambda>(f, d, t). (f, t)) `\n    {a. c \\<turnstile> sourcenode a -kind a\\<rightarrow> targetnode a}\n    \\<subseteq> Collect (valid_node c) \\<times> Collect (valid_node c)\n 3. finite (Collect (valid_node c) \\<times> Collect (valid_node c))", "apply (auto intro: WCFG_edge_det)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<lambda>(f, d, t). (f, t)) `\n    {a. c \\<turnstile> sourcenode a -kind a\\<rightarrow> targetnode a}\n    \\<subseteq> Collect (valid_node c) \\<times> Collect (valid_node c)\n 2. finite (Collect (valid_node c) \\<times> Collect (valid_node c))", "apply (force simp: valid_node_def valid_edge_def)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Collect (valid_node c) \\<times> Collect (valid_node c))", "by auto"], ["", "lemma uses_expr_finite: \"finite (rhs_aux e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (rhs_aux e)", "by (induction e) auto"], ["", "lemma uses_cmd_finite: \"finite (rhs c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (rhs c)", "by (induction c) (auto intro: uses_expr_finite)"], ["", "lemma defs_cmd_finite: \"finite (lhs c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (lhs c)", "by (induction c) auto"], ["", "lemma finite_labels': \"finite {(l,c). labels prog l c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {(l, c). labels prog l c}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {(l, c). labels prog l c}", "have \"{l. \\<exists>c. labels prog l c} = fst ` {(l,c). labels prog l c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l. \\<exists>c. labels prog l c} = fst ` {(l, c). labels prog l c}", "by auto"], ["proof (state)\nthis:\n  {l. \\<exists>c. labels prog l c} = fst ` {(l, c). labels prog l c}\n\ngoal (1 subgoal):\n 1. finite {(l, c). labels prog l c}", "with finite_labels [of prog] labels_det [of prog]"], ["proof (chain)\npicking this:\n  finite {l. \\<exists>c. labels prog l c}\n  \\<lbrakk>labels prog ?l ?c'; labels prog ?l ?c''\\<rbrakk>\n  \\<Longrightarrow> ?c' = ?c''\n  {l. \\<exists>c. labels prog l c} = fst ` {(l, c). labels prog l c}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite {l. \\<exists>c. labels prog l c}\n  \\<lbrakk>labels prog ?l ?c'; labels prog ?l ?c''\\<rbrakk>\n  \\<Longrightarrow> ?c' = ?c''\n  {l. \\<exists>c. labels prog l c} = fst ` {(l, c). labels prog l c}\n\ngoal (1 subgoal):\n 1. finite {(l, c). labels prog l c}", "by (auto 4 4 intro: inj_onI dest: finite_imageD)"], ["proof (state)\nthis:\n  finite {(l, c). labels prog l c}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_Defs [simp, intro!]: \"finite (Defs c n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Defs c n)", "unfolding Defs.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {V. \\<exists>l ca.\n            n = (_ l _) \\<and> labels c l ca \\<and> V \\<in> lhs ca}", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {V. \\<exists>l.\n            n = (_ l _) \\<and>\n            (\\<exists>ca. labels c l ca \\<and> V \\<in> lhs ca)}", "apply (rule_tac B=\"\\<Union>(lhs ` snd ` {(l,c'). labels c l c'})\" in finite_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {V. \\<exists>l.\n           n = (_ l _) \\<and>\n           (\\<exists>ca. labels c l ca \\<and> V \\<in> lhs ca)}\n    \\<subseteq> \\<Union> (lhs ` snd ` {(l, c'). labels c l c'})\n 2. finite (\\<Union> (lhs ` snd ` {(l, c'). labels c l c'}))", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (lhs ` snd ` {(l, c'). labels c l c'}))", "apply (rule finite_Union)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite (lhs ` snd ` {(l, c'). labels c l c'})\n 2. \\<And>M.\n       M \\<in> lhs ` snd ` {(l, c'). labels c l c'} \\<Longrightarrow>\n       finite M", "apply (rule finite_imageI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite {(l, c'). labels c l c'}\n 2. \\<And>M.\n       M \\<in> lhs ` snd ` {(l, c'). labels c l c'} \\<Longrightarrow>\n       finite M", "apply (rule finite_labels')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M.\n       M \\<in> lhs ` snd ` {(l, c'). labels c l c'} \\<Longrightarrow>\n       finite M", "by (clarsimp simp: defs_cmd_finite)"], ["", "lemma finite_Uses [simp, intro!]: \"finite (Uses c n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Uses c n)", "unfolding Uses.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {V. \\<exists>l ca.\n            n = (_ l _) \\<and> labels c l ca \\<and> V \\<in> rhs ca}", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {V. \\<exists>l.\n            n = (_ l _) \\<and>\n            (\\<exists>ca. labels c l ca \\<and> V \\<in> rhs ca)}", "apply (rule_tac B=\"\\<Union>(rhs ` snd ` {(l,c'). labels c l c'})\" in finite_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {V. \\<exists>l.\n           n = (_ l _) \\<and>\n           (\\<exists>ca. labels c l ca \\<and> V \\<in> rhs ca)}\n    \\<subseteq> \\<Union> (rhs ` snd ` {(l, c'). labels c l c'})\n 2. finite (\\<Union> (rhs ` snd ` {(l, c'). labels c l c'}))", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (rhs ` snd ` {(l, c'). labels c l c'}))", "apply (rule finite_Union)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite (rhs ` snd ` {(l, c'). labels c l c'})\n 2. \\<And>M.\n       M \\<in> rhs ` snd ` {(l, c'). labels c l c'} \\<Longrightarrow>\n       finite M", "apply (rule finite_imageI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite {(l, c'). labels c l c'}\n 2. \\<And>M.\n       M \\<in> rhs ` snd ` {(l, c'). labels c l c'} \\<Longrightarrow>\n       finite M", "apply (rule finite_labels')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M.\n       M \\<in> rhs ` snd ` {(l, c'). labels c l c'} \\<Longrightarrow>\n       finite M", "by (clarsimp simp: uses_cmd_finite)"], ["", "definition \"while_cfg_\\<alpha>e c = Collect (valid_edge (transform c))\""], ["", "definition \"while_cfg_\\<alpha>n c = sorted_list_of_set (Collect (valid_node (transform c)))\""], ["", "definition \"while_cfg_invar c = True\""], ["", "definition \"while_cfg_inEdges' c t = (SOME ls. distinct ls \\<and> set ls = {(sourcenode e, kind e)| e. valid_edge (transform c) e \\<and> targetnode e = t})\""], ["", "definition \"while_cfg_Entry c = (_Entry_)\""], ["", "definition \"while_cfg_defs c = (Defs (transform c))((_Entry_) := {v. \\<exists>n. v \\<in> Uses (transform c) n})\""], ["", "definition \"while_cfg_uses c = Uses (transform c)\""], ["", "abbreviation \"while_cfg_inEdges c t \\<equiv> map (\\<lambda>(f,d). (f,d,t)) (while_cfg_inEdges' c t)\""], ["", "lemmas while_cfg_defs = while_cfg_\\<alpha>e_def while_cfg_\\<alpha>n_def\n  while_cfg_invar_def while_cfg_inEdges'_def\n  while_cfg_Entry_def while_cfg_defs_def\n  while_cfg_uses_def"], ["", "interpretation while: graph_path while_cfg_\\<alpha>e while_cfg_\\<alpha>n while_cfg_invar while_cfg_inEdges'"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_path while_cfg_\\<alpha>e while_cfg_\\<alpha>n while_cfg_invar\n     while_cfg_inEdges'", "apply unfold_locales"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>g.\n       while_cfg_invar g \\<Longrightarrow>\n       finite\n        (nodes\n          \\<lparr>nodes = set (while_cfg_\\<alpha>n g),\n             edges = while_cfg_\\<alpha>e g\\<rparr>)\n 2. \\<And>g.\n       while_cfg_invar g \\<Longrightarrow>\n       finite\n        (edges\n          \\<lparr>nodes = set (while_cfg_\\<alpha>n g),\n             edges = while_cfg_\\<alpha>e g\\<rparr>)\n 3. \\<And>g.\n       while_cfg_invar g \\<Longrightarrow>\n       sourcenode `\n       edges\n        \\<lparr>nodes = set (while_cfg_\\<alpha>n g),\n           edges = while_cfg_\\<alpha>e g\\<rparr>\n       \\<subseteq> nodes\n                    \\<lparr>nodes = set (while_cfg_\\<alpha>n g),\n                       edges = while_cfg_\\<alpha>e g\\<rparr>\n 4. \\<And>g.\n       while_cfg_invar g \\<Longrightarrow>\n       snd `\n       snd `\n       edges\n        \\<lparr>nodes = set (while_cfg_\\<alpha>n g),\n           edges = while_cfg_\\<alpha>e g\\<rparr>\n       \\<subseteq> nodes\n                    \\<lparr>nodes = set (while_cfg_\\<alpha>n g),\n                       edges = while_cfg_\\<alpha>e g\\<rparr>\n 5. \\<And>g.\n       while_cfg_invar g \\<Longrightarrow>\n       set_iterator (foldri (while_cfg_\\<alpha>n g))\n        (nodes\n          \\<lparr>nodes = set (while_cfg_\\<alpha>n g),\n             edges = while_cfg_\\<alpha>e g\\<rparr>)\n 6. \\<And>g v.\n       while_cfg_invar g \\<Longrightarrow>\n       set_iterator (foldri (while_cfg_inEdges' g v))\n        (Graph_path.pred\n          \\<lparr>nodes = set (while_cfg_\\<alpha>n g),\n             edges = while_cfg_\\<alpha>e g\\<rparr>\n          v)", "apply (simp_all add: while_cfg_defs)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>g.\n       sourcenode ` Collect (valid_edge (transform g))\n       \\<subseteq> Collect (valid_node (transform g))\n 2. \\<And>g.\n       snd ` snd ` Collect (valid_edge (transform g))\n       \\<subseteq> Collect (valid_node (transform g))\n 3. \\<And>g.\n       set_iterator\n        (foldri (sorted_list_of_set (Collect (valid_node (transform g)))))\n        (Collect (valid_node (transform g)))\n 4. \\<And>g v.\n       set_iterator\n        (foldri\n          (SOME ls.\n              distinct ls \\<and>\n              set ls = {(aa, a). valid_edge (transform g) (aa, a, v)}))\n        (Graph_path.pred\n          \\<lparr>nodes = Collect (valid_node (transform g)),\n             edges = Collect (valid_edge (transform g))\\<rparr>\n          v)", "apply (force simp: valid_node_def)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>g.\n       snd ` snd ` Collect (valid_edge (transform g))\n       \\<subseteq> Collect (valid_node (transform g))\n 2. \\<And>g.\n       set_iterator\n        (foldri (sorted_list_of_set (Collect (valid_node (transform g)))))\n        (Collect (valid_node (transform g)))\n 3. \\<And>g v.\n       set_iterator\n        (foldri\n          (SOME ls.\n              distinct ls \\<and>\n              set ls = {(aa, a). valid_edge (transform g) (aa, a, v)}))\n        (Graph_path.pred\n          \\<lparr>nodes = Collect (valid_node (transform g)),\n             edges = Collect (valid_edge (transform g))\\<rparr>\n          v)", "apply (force simp: valid_node_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g.\n       set_iterator\n        (foldri (sorted_list_of_set (Collect (valid_node (transform g)))))\n        (Collect (valid_node (transform g)))\n 2. \\<And>g v.\n       set_iterator\n        (foldri\n          (SOME ls.\n              distinct ls \\<and>\n              set ls = {(aa, a). valid_edge (transform g) (aa, a, v)}))\n        (Graph_path.pred\n          \\<lparr>nodes = Collect (valid_node (transform g)),\n             edges = Collect (valid_edge (transform g))\\<rparr>\n          v)", "apply (rule set_iterator_I)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>g. distinct (?l0.42 g)\n 2. \\<And>g. Collect (valid_node (transform g)) = set (?l0.42 g)\n 3. \\<And>g.\n       foldri (sorted_list_of_set (Collect (valid_node (transform g)))) =\n       foldli (?l0.42 g)\n 4. \\<And>g v.\n       set_iterator\n        (foldri\n          (SOME ls.\n              distinct ls \\<and>\n              set ls = {(aa, a). valid_edge (transform g) (aa, a, v)}))\n        (Graph_path.pred\n          \\<lparr>nodes = Collect (valid_node (transform g)),\n             edges = Collect (valid_edge (transform g))\\<rparr>\n          v)", "prefer 3"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>g.\n       foldri (sorted_list_of_set (Collect (valid_node (transform g)))) =\n       foldli (?l0.42 g)\n 2. \\<And>g. distinct (?l0.42 g)\n 3. \\<And>g. Collect (valid_node (transform g)) = set (?l0.42 g)\n 4. \\<And>g v.\n       set_iterator\n        (foldri\n          (SOME ls.\n              distinct ls \\<and>\n              set ls = {(aa, a). valid_edge (transform g) (aa, a, v)}))\n        (Graph_path.pred\n          \\<lparr>nodes = Collect (valid_node (transform g)),\n             edges = Collect (valid_edge (transform g))\\<rparr>\n          v)", "apply (simp add: foldri_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>g.\n       distinct\n        (rev (sorted_list_of_set (Collect (valid_node (transform g)))))\n 2. \\<And>g.\n       Collect (valid_node (transform g)) =\n       set (rev (sorted_list_of_set (Collect (valid_node (transform g)))))\n 3. \\<And>g v.\n       set_iterator\n        (foldri\n          (SOME ls.\n              distinct ls \\<and>\n              set ls = {(aa, a). valid_edge (transform g) (aa, a, v)}))\n        (Graph_path.pred\n          \\<lparr>nodes = Collect (valid_node (transform g)),\n             edges = Collect (valid_edge (transform g))\\<rparr>\n          v)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g.\n       Collect (valid_node (transform g)) =\n       set (rev (sorted_list_of_set (Collect (valid_node (transform g)))))\n 2. \\<And>g v.\n       set_iterator\n        (foldri\n          (SOME ls.\n              distinct ls \\<and>\n              set ls = {(aa, a). valid_edge (transform g) (aa, a, v)}))\n        (Graph_path.pred\n          \\<lparr>nodes = Collect (valid_node (transform g)),\n             edges = Collect (valid_edge (transform g))\\<rparr>\n          v)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g v.\n       set_iterator\n        (foldri\n          (SOME ls.\n              distinct ls \\<and>\n              set ls = {(aa, a). valid_edge (transform g) (aa, a, v)}))\n        (Graph_path.pred\n          \\<lparr>nodes = Collect (valid_node (transform g)),\n             edges = Collect (valid_edge (transform g))\\<rparr>\n          v)", "apply (clarsimp simp: Graph_path.pred_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g v.\n       set_iterator\n        (foldri\n          (SOME ls.\n              distinct ls \\<and>\n              set ls = {(aa, a). valid_edge (transform g) (aa, a, v)}))\n        {(v', w). valid_edge (transform g) (v', w, v)}", "apply (subgoal_tac \"finite {(v', w). valid_edge (transform g) (v', w, v)}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g v.\n       finite\n        {(v', w). valid_edge (transform g) (v', w, v)} \\<Longrightarrow>\n       set_iterator\n        (foldri\n          (SOME ls.\n              distinct ls \\<and>\n              set ls = {(aa, a). valid_edge (transform g) (aa, a, v)}))\n        {(v', w). valid_edge (transform g) (v', w, v)}\n 2. \\<And>g v. finite {(v', w). valid_edge (transform g) (v', w, v)}", "apply (drule finite_distinct_list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g v.\n       \\<exists>xs.\n          set xs = {(v', w). valid_edge (transform g) (v', w, v)} \\<and>\n          distinct xs \\<Longrightarrow>\n       set_iterator\n        (foldri\n          (SOME ls.\n              distinct ls \\<and>\n              set ls = {(aa, a). valid_edge (transform g) (aa, a, v)}))\n        {(v', w). valid_edge (transform g) (v', w, v)}\n 2. \\<And>g v. finite {(v', w). valid_edge (transform g) (v', w, v)}", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g v xs.\n       \\<lbrakk>set xs = {(v', w). valid_edge (transform g) (v', w, v)};\n        distinct xs\\<rbrakk>\n       \\<Longrightarrow> set_iterator\n                          (foldri\n                            (SOME ls.\n                                distinct ls \\<and>\n                                set ls =\n                                {(aa, a).\n                                 valid_edge (transform g) (aa, a, v)}))\n                          {(v', w). valid_edge (transform g) (v', w, v)}\n 2. \\<And>g v. finite {(v', w). valid_edge (transform g) (v', w, v)}", "apply (rule_tac a=xs in someI2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>g v xs.\n       \\<lbrakk>set xs = {(v', w). valid_edge (transform g) (v', w, v)};\n        distinct xs\\<rbrakk>\n       \\<Longrightarrow> distinct xs \\<and>\n                         set xs =\n                         {a. case a of\n                             (a, aa) \\<Rightarrow>\n                               valid_edge (transform g) (a, aa, v)}\n 2. \\<And>g v xs x.\n       \\<lbrakk>set xs = {(v', w). valid_edge (transform g) (v', w, v)};\n        distinct xs;\n        distinct x \\<and>\n        set x =\n        {a. case a of\n            (a, aa) \\<Rightarrow>\n              valid_edge (transform g) (a, aa, v)}\\<rbrakk>\n       \\<Longrightarrow> set_iterator (foldri x)\n                          {a. case a of\n                              (v', w) \\<Rightarrow>\n                                valid_edge (transform g) (v', w, v)}\n 3. \\<And>g v. finite {(v', w). valid_edge (transform g) (v', w, v)}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g v xs x.\n       \\<lbrakk>set xs = {(v', w). valid_edge (transform g) (v', w, v)};\n        distinct xs;\n        distinct x \\<and>\n        set x =\n        {a. case a of\n            (a, aa) \\<Rightarrow>\n              valid_edge (transform g) (a, aa, v)}\\<rbrakk>\n       \\<Longrightarrow> set_iterator (foldri x)\n                          {a. case a of\n                              (v', w) \\<Rightarrow>\n                                valid_edge (transform g) (v', w, v)}\n 2. \\<And>g v. finite {(v', w). valid_edge (transform g) (v', w, v)}", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g v xs x.\n       \\<lbrakk>set xs = {(v', w). valid_edge (transform g) (v', w, v)};\n        distinct xs; distinct x;\n        set x =\n        {a. case a of\n            (a, aa) \\<Rightarrow>\n              valid_edge (transform g) (a, aa, v)}\\<rbrakk>\n       \\<Longrightarrow> set_iterator (foldri x)\n                          {a. case a of\n                              (v', w) \\<Rightarrow>\n                                valid_edge (transform g) (v', w, v)}\n 2. \\<And>g v. finite {(v', w). valid_edge (transform g) (v', w, v)}", "apply (metis set_iterator_foldri_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g v. finite {(v', w). valid_edge (transform g) (v', w, v)}", "apply (rule_tac f=\"\\<lambda>(f,d,t). (f,d)\" in finite_surj [OF finite_valid_edge])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g v.\n       {(v', w). valid_edge (transform g) (v', w, v)}\n       \\<subseteq> (\\<lambda>(f, d, t). (f, d)) `\n                   Collect (valid_edge (?c64 g v))", "by (auto intro: rev_image_eqI)"], ["", "lemma right_total_const: \"right_total (\\<lambda>x y. x = c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_total (\\<lambda>x y. x = c)", "by (rule right_totalI) simp"], ["", "lemma const_transfer: \"rel_fun (\\<lambda>x y. x = c) (=) f (\\<lambda>_. f c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun (\\<lambda>x y. x = c) (=) f (\\<lambda>_. f c)", "by (clarsimp simp: rel_fun_def)"], ["", "interpretation while_ign: graph_path \"\\<lambda>_. while_cfg_\\<alpha>e cmd\" \"\\<lambda>_. while_cfg_\\<alpha>n cmd\" \"\\<lambda>_. while_cfg_invar cmd\" \"\\<lambda>_. while_cfg_inEdges' cmd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_path (\\<lambda>_. while_cfg_\\<alpha>e cmd)\n     (\\<lambda>_. while_cfg_\\<alpha>n cmd) (\\<lambda>_. while_cfg_invar cmd)\n     (\\<lambda>_. while_cfg_inEdges' cmd)", "by (rule graph_path_transfer [OF right_total_const const_transfer const_transfer const_transfer const_transfer, rule_format])\n  unfold_locales"], ["", "definition \"gen_while_cfg g \\<equiv> \\<lparr>\n  gen_\\<alpha>e = while_cfg_\\<alpha>e g,\n  gen_\\<alpha>n = while_cfg_\\<alpha>n g,\n  gen_inEdges = while_cfg_inEdges g,\n  gen_Entry = while_cfg_Entry g,\n  gen_defs = while_cfg_defs g ,\n  gen_uses = while_cfg_uses g\n\\<rparr>\""], ["", "lemma  while_path_graph_pathD: \"While_CFG.path (transform c) n es m \\<Longrightarrow> while.path2 c n (n#map targetnode es) m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. While_CFG.path (transform c) n es m \\<Longrightarrow>\n    while.path2 c n (n # map targetnode es) m", "unfolding while.path2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. While_CFG.path (transform c) n es m \\<Longrightarrow>\n    while.path c (n # map targetnode es) \\<and>\n    n = hd (n # map targetnode es) \\<and> m = last (n # map targetnode es)", "apply (induction n es m rule: While_CFG.path.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       While_CFG.valid_node (transform c) n \\<Longrightarrow>\n       while.path c (n # map targetnode []) \\<and>\n       n = hd (n # map targetnode []) \\<and>\n       n = last (n # map targetnode [])\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>While_CFG.path (transform c) n'' as n';\n        while.path c (n'' # map targetnode as) \\<and>\n        n'' = hd (n'' # map targetnode as) \\<and>\n        n' = last (n'' # map targetnode as);\n        valid_edge (transform c) a; sourcenode a = n;\n        targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> while.path c (n # map targetnode (a # as)) \\<and>\n                         n = hd (n # map targetnode (a # as)) \\<and>\n                         n' = last (n # map targetnode (a # as))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       While_CFG.valid_node (transform c) n \\<Longrightarrow>\n       while.path c [n]\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>While_CFG.path (transform c) n'' as n';\n        while.path c (n'' # map targetnode as) \\<and>\n        n'' = hd (n'' # map targetnode as) \\<and>\n        n' = last (n'' # map targetnode as);\n        valid_edge (transform c) a; sourcenode a = n;\n        targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> while.path c (n # map targetnode (a # as)) \\<and>\n                         n = hd (n # map targetnode (a # as)) \\<and>\n                         n' = last (n # map targetnode (a # as))", "apply (rule while.path.intros)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       While_CFG.valid_node (transform c) n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n c)\n 2. \\<And>n.\n       While_CFG.valid_node (transform c) n \\<Longrightarrow>\n       while_cfg_invar c\n 3. \\<And>n'' as n' a n.\n       \\<lbrakk>While_CFG.path (transform c) n'' as n';\n        while.path c (n'' # map targetnode as) \\<and>\n        n'' = hd (n'' # map targetnode as) \\<and>\n        n' = last (n'' # map targetnode as);\n        valid_edge (transform c) a; sourcenode a = n;\n        targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> while.path c (n # map targetnode (a # as)) \\<and>\n                         n = hd (n # map targetnode (a # as)) \\<and>\n                         n' = last (n # map targetnode (a # as))", "apply (auto simp: while_cfg_defs valid_node_def While_CFG.valid_node_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       While_CFG.valid_node (transform c) n \\<Longrightarrow>\n       while_cfg_invar c\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>While_CFG.path (transform c) n'' as n';\n        while.path c (n'' # map targetnode as) \\<and>\n        n'' = hd (n'' # map targetnode as) \\<and>\n        n' = last (n'' # map targetnode as);\n        valid_edge (transform c) a; sourcenode a = n;\n        targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> while.path c (n # map targetnode (a # as)) \\<and>\n                         n = hd (n # map targetnode (a # as)) \\<and>\n                         n' = last (n # map targetnode (a # as))", "apply (simp add: while_cfg_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>While_CFG.path (transform c) n'' as n';\n        while.path c (n'' # map targetnode as) \\<and>\n        n'' = hd (n'' # map targetnode as) \\<and>\n        n' = last (n'' # map targetnode as);\n        valid_edge (transform c) a; sourcenode a = n;\n        targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> while.path c (n # map targetnode (a # as)) \\<and>\n                         n = hd (n # map targetnode (a # as)) \\<and>\n                         n' = last (n # map targetnode (a # as))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as a aa b.\n       \\<lbrakk>While_CFG.path (transform c) b as\n                 (if as = [] then targetnode (a, aa, b)\n                  else last (map targetnode as));\n        while.path c (b # map targetnode as);\n        valid_edge (transform c) (a, aa, b)\\<rbrakk>\n       \\<Longrightarrow> while.path c (a # b # map targetnode as)", "apply (rule while.path.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>as a aa b.\n       \\<lbrakk>While_CFG.path (transform c) b as\n                 (if as = [] then targetnode (a, aa, b)\n                  else last (map targetnode as));\n        while.path c (b # map targetnode as);\n        valid_edge (transform c) (a, aa, b)\\<rbrakk>\n       \\<Longrightarrow> while.path c (b # map targetnode as)\n 2. \\<And>as a aa b.\n       \\<lbrakk>While_CFG.path (transform c) b as\n                 (if as = [] then targetnode (a, aa, b)\n                  else last (map targetnode as));\n        while.path c (b # map targetnode as);\n        valid_edge (transform c) (a, aa, b)\\<rbrakk>\n       \\<Longrightarrow> a \\<in> set (while.predecessors c\n (hd (b # map targetnode as)))", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as a aa b.\n       \\<lbrakk>While_CFG.path (transform c) b as\n                 (if as = [] then targetnode (a, aa, b)\n                  else last (map targetnode as));\n        while.path c (b # map targetnode as);\n        valid_edge (transform c) (a, aa, b)\\<rbrakk>\n       \\<Longrightarrow> a \\<in> set (while.predecessors c\n (hd (b # map targetnode as)))", "apply (clarsimp simp: while.predecessors_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as a aa b.\n       \\<lbrakk>While_CFG.path (transform c) b as\n                 (if as = [] then targetnode (a, aa, b)\n                  else last (map targetnode as));\n        while.path c (b # map targetnode as);\n        valid_edge (transform c) (a, aa, b)\\<rbrakk>\n       \\<Longrightarrow> a \\<in> getFrom ` set (while.inEdges c b)", "apply (rename_tac n ed m)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> n \\<in> getFrom ` set (while.inEdges c m)", "apply (rule_tac x=\"(n,ed,m)\" in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> n = getFrom (n, ed, m)\n 2. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> (n, ed, m) \\<in> set (while.inEdges c m)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> (n, ed, m) \\<in> set (while.inEdges c m)", "apply (clarsimp simp: while.inEdges_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> (n, ed, m)\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (f, d) \\<Rightarrow> (f, d, m)) `\n                               set (while_cfg_inEdges' c m)", "apply (rule_tac x=\"(n,ed)\" in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> (n, ed, m) =\n                         (case (n, ed) of (f, d) \\<Rightarrow> (f, d, m))\n 2. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> (n, ed) \\<in> set (while_cfg_inEdges' c m)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> (n, ed) \\<in> set (while_cfg_inEdges' c m)", "apply (clarsimp simp: while_cfg_inEdges'_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> (n, ed)\n                         \\<in> set (SOME ls.\n distinct ls \\<and> set ls = {(aa, a). valid_edge (transform c) (aa, a, m)})", "apply (subgoal_tac \"finite {(aa, a). valid_edge (transform c) (aa, a, m)}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m);\n        finite {(aa, a). valid_edge (transform c) (aa, a, m)}\\<rbrakk>\n       \\<Longrightarrow> (n, ed)\n                         \\<in> set (SOME ls.\n distinct ls \\<and> set ls = {(aa, a). valid_edge (transform c) (aa, a, m)})\n 2. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {(aa, a). valid_edge (transform c) (aa, a, m)}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {(aa, a). valid_edge (transform c) (aa, a, m)}\n 2. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m);\n        finite {(aa, a). valid_edge (transform c) (aa, a, m)}\\<rbrakk>\n       \\<Longrightarrow> (n, ed)\n                         \\<in> set (SOME ls.\n distinct ls \\<and> set ls = {(aa, a). valid_edge (transform c) (aa, a, m)})", "apply (rule_tac f=\"\\<lambda>(f,d,t). (f,d)\" in finite_surj [OF finite_valid_edge])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m)\\<rbrakk>\n       \\<Longrightarrow> {(aa, a). valid_edge (transform c) (aa, a, m)}\n                         \\<subseteq> (\\<lambda>(f, d, t). (f, d)) `\n                                     Collect (valid_edge (?c18 as n ed m))\n 2. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m);\n        finite {(aa, a). valid_edge (transform c) (aa, a, m)}\\<rbrakk>\n       \\<Longrightarrow> (n, ed)\n                         \\<in> set (SOME ls.\n distinct ls \\<and> set ls = {(aa, a). valid_edge (transform c) (aa, a, m)})", "apply (auto intro: rev_image_eqI)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m);\n        finite {(aa, a). valid_edge (transform c) (aa, a, m)}\\<rbrakk>\n       \\<Longrightarrow> (n, ed)\n                         \\<in> set (SOME ls.\n distinct ls \\<and> set ls = {(aa, a). valid_edge (transform c) (aa, a, m)})", "apply (drule finite_distinct_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as n ed m.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m);\n        \\<exists>xs.\n           set xs = {(aa, a). valid_edge (transform c) (aa, a, m)} \\<and>\n           distinct xs\\<rbrakk>\n       \\<Longrightarrow> (n, ed)\n                         \\<in> set (SOME ls.\n distinct ls \\<and> set ls = {(aa, a). valid_edge (transform c) (aa, a, m)})", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as n ed m xs.\n       \\<lbrakk>While_CFG.path (transform c) m as\n                 (if as = [] then targetnode (n, ed, m)\n                  else last (map targetnode as));\n        while.path c (m # map targetnode as);\n        valid_edge (transform c) (n, ed, m);\n        set xs = {(aa, a). valid_edge (transform c) (aa, a, m)};\n        distinct xs\\<rbrakk>\n       \\<Longrightarrow> (n, ed)\n                         \\<in> set (SOME ls.\n distinct ls \\<and> set ls = {(aa, a). valid_edge (transform c) (aa, a, m)})", "by (rule_tac a=xs in someI2; simp)"], ["", "lemma Uses_Entry [simp]: \"Uses c (_Entry_) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Uses c (_Entry_) = {}", "unfolding Uses.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. {V. \\<exists>l ca.\n           (_Entry_) = (_ l _) \\<and> labels c l ca \\<and> V \\<in> rhs ca} =\n    {}", "by auto"], ["", "lemma in_Uses_valid_node: \"V \\<in> Uses c n \\<Longrightarrow> valid_node c n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<in> Uses c n \\<Longrightarrow> valid_node c n", "by (auto dest!: label_less_num_inner_nodes less_num_nodes_edge\n    simp: Uses.simps valid_node_def valid_edge_def)"], ["", "lemma while_cfg_CFG_wf_impl:\n  \"SSA_CFG.CFG_wf (\\<lambda>_. gen_\\<alpha>e (gen_while_cfg cmd)) (\\<lambda>_. gen_\\<alpha>n (gen_while_cfg cmd))\n            (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. gen_inEdges' (gen_while_cfg cmd))\n            (\\<lambda>_. gen_Entry (gen_while_cfg cmd)) (\\<lambda>_. gen_defs (gen_while_cfg cmd))\n            (\\<lambda>_. gen_uses (gen_while_cfg cmd))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SSA_CFG.CFG_wf (\\<lambda>_. gen_\\<alpha>e (gen_while_cfg cmd))\n     (\\<lambda>_. gen_\\<alpha>n (gen_while_cfg cmd))\n     (\\<lambda>_. while_cfg_invar cmd)\n     (\\<lambda>_. gen_inEdges' (gen_while_cfg cmd))\n     (\\<lambda>_. gen_Entry (gen_while_cfg cmd))\n     (\\<lambda>_. gen_defs (gen_while_cfg cmd))\n     (\\<lambda>_. gen_uses (gen_while_cfg cmd))", "apply (simp add: gen_while_cfg_def o_def split_beta)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SSA_CFG.CFG_wf (\\<lambda>_. while_cfg_\\<alpha>e cmd)\n     (\\<lambda>_. while_cfg_\\<alpha>n cmd) (\\<lambda>_. while_cfg_invar cmd)\n     (\\<lambda>_. while_cfg_inEdges' cmd) (\\<lambda>_. while_cfg_Entry cmd)\n     (\\<lambda>_. while_cfg_defs cmd) (\\<lambda>_. while_cfg_uses cmd)", "unfolding SSA_CFG.CFG_wf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SSA_CFG.CFG (\\<lambda>_. while_cfg_\\<alpha>e cmd)\n     (\\<lambda>_. while_cfg_\\<alpha>n cmd) (\\<lambda>_. while_cfg_invar cmd)\n     (\\<lambda>_. while_cfg_inEdges' cmd) (\\<lambda>_. while_cfg_Entry cmd)\n     (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd) \\<and>\n    SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SSA_CFG.CFG (\\<lambda>_. while_cfg_\\<alpha>e cmd)\n     (\\<lambda>_. while_cfg_\\<alpha>n cmd) (\\<lambda>_. while_cfg_invar cmd)\n     (\\<lambda>_. while_cfg_inEdges' cmd) (\\<lambda>_. while_cfg_Entry cmd)\n     (\\<lambda>_. while_cfg_defs cmd) (\\<lambda>_. while_cfg_uses cmd)\n 2. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (rule CFG_transfer [OF right_total_const const_transfer const_transfer const_transfer const_transfer const_transfer const_transfer const_transfer, rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. SSA_CFG.CFG while_cfg_\\<alpha>e while_cfg_\\<alpha>n while_cfg_invar\n     while_cfg_inEdges' while_cfg_Entry while_cfg_defs while_cfg_uses\n 2. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply unfold_locales[1]"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>g. while_cfg_Entry g \\<in> set (while_cfg_\\<alpha>n g)\n 2. \\<And>g.\n       while_cfg_invar g \\<Longrightarrow>\n       while.inEdges g (while_cfg_Entry g) = []\n 3. \\<And>n g.\n       \\<lbrakk>n \\<in> set (while_cfg_\\<alpha>n g);\n        while_cfg_invar g\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 4. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 5. \\<And>g n. finite (while_cfg_defs g n)\n 6. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 7. \\<And>g n. finite (while_cfg_uses g n)\n 8. \\<And>g. while_cfg_invar g\n 9. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (auto simp: while_cfg_defs valid_node_def valid_edge_def intro: While_CFG.intros)[1]"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>g.\n       while_cfg_invar g \\<Longrightarrow>\n       while.inEdges g (while_cfg_Entry g) = []\n 2. \\<And>n g.\n       \\<lbrakk>n \\<in> set (while_cfg_\\<alpha>n g);\n        while_cfg_invar g\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 3. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 4. \\<And>g n. finite (while_cfg_defs g n)\n 5. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 6. \\<And>g n. finite (while_cfg_uses g n)\n 7. \\<And>g. while_cfg_invar g\n 8. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (clarsimp simp: while.inEdges_def)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>g.\n       while_cfg_invar g \\<Longrightarrow>\n       while_cfg_inEdges' g (while_cfg_Entry g) = []\n 2. \\<And>n g.\n       \\<lbrakk>n \\<in> set (while_cfg_\\<alpha>n g);\n        while_cfg_invar g\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 3. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 4. \\<And>g n. finite (while_cfg_defs g n)\n 5. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 6. \\<And>g n. finite (while_cfg_uses g n)\n 7. \\<And>g. while_cfg_invar g\n 8. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (clarsimp simp: while_cfg_defs valid_edge_def)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>g.\n       (SOME ls.\n           distinct ls \\<and>\n           set ls =\n           {(aa, a).\n            transform g \\<turnstile> aa -a\\<rightarrow> (_Entry_)}) =\n       []\n 2. \\<And>n g.\n       \\<lbrakk>n \\<in> set (while_cfg_\\<alpha>n g);\n        while_cfg_invar g\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 3. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 4. \\<And>g n. finite (while_cfg_defs g n)\n 5. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 6. \\<And>g n. finite (while_cfg_uses g n)\n 7. \\<And>g. while_cfg_invar g\n 8. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (subgoal_tac \"{(aa, a). transform g \\<turnstile> aa -a\\<rightarrow> (_Entry_)} = {}\")"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>g.\n       {(aa, a). transform g \\<turnstile> aa -a\\<rightarrow> (_Entry_)} =\n       {} \\<Longrightarrow>\n       (SOME ls.\n           distinct ls \\<and>\n           set ls =\n           {(aa, a).\n            transform g \\<turnstile> aa -a\\<rightarrow> (_Entry_)}) =\n       []\n 2. \\<And>g.\n       {(aa, a). transform g \\<turnstile> aa -a\\<rightarrow> (_Entry_)} = {}\n 3. \\<And>n g.\n       \\<lbrakk>n \\<in> set (while_cfg_\\<alpha>n g);\n        while_cfg_invar g\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 4. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 5. \\<And>g n. finite (while_cfg_defs g n)\n 6. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 7. \\<And>g n. finite (while_cfg_uses g n)\n 8. \\<And>g. while_cfg_invar g\n 9. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply clarsimp"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>g.\n       \\<forall>a b.\n          \\<not> transform\n                  g \\<turnstile> a -b\\<rightarrow> (_Entry_) \\<Longrightarrow>\n       (SOME ls. distinct ls \\<and> ls = []) = []\n 2. \\<And>g.\n       {(aa, a). transform g \\<turnstile> aa -a\\<rightarrow> (_Entry_)} = {}\n 3. \\<And>n g.\n       \\<lbrakk>n \\<in> set (while_cfg_\\<alpha>n g);\n        while_cfg_invar g\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 4. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 5. \\<And>g n. finite (while_cfg_defs g n)\n 6. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 7. \\<And>g n. finite (while_cfg_uses g n)\n 8. \\<And>g. while_cfg_invar g\n 9. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (rule_tac a=\"[]\" in someI2; simp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>g.\n       {(aa, a). transform g \\<turnstile> aa -a\\<rightarrow> (_Entry_)} = {}\n 2. \\<And>n g.\n       \\<lbrakk>n \\<in> set (while_cfg_\\<alpha>n g);\n        while_cfg_invar g\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 3. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 4. \\<And>g n. finite (while_cfg_defs g n)\n 5. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 6. \\<And>g n. finite (while_cfg_uses g n)\n 7. \\<And>g. while_cfg_invar g\n 8. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply auto[1]"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n g.\n       \\<lbrakk>n \\<in> set (while_cfg_\\<alpha>n g);\n        while_cfg_invar g\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 2. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 3. \\<And>g n. finite (while_cfg_defs g n)\n 4. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 5. \\<And>g n. finite (while_cfg_uses g n)\n 6. \\<And>g. while_cfg_invar g\n 7. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (subst(asm) while_cfg_\\<alpha>n_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n g.\n       \\<lbrakk>n \\<in> set (sorted_list_of_set\n                              (Collect (valid_node (transform g))));\n        while_cfg_invar g\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 2. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 3. \\<And>g n. finite (while_cfg_defs g n)\n 4. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 5. \\<And>g n. finite (while_cfg_uses g n)\n 6. \\<And>g. while_cfg_invar g\n 7. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply simp"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n g.\n       \\<lbrakk>valid_node (transform g) n; while_cfg_invar g\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 2. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 3. \\<And>g n. finite (while_cfg_defs g n)\n 4. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 5. \\<And>g n. finite (while_cfg_uses g n)\n 6. \\<And>g. while_cfg_invar g\n 7. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (drule valid_node_Entry_path)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n g.\n       \\<lbrakk>while_cfg_invar g;\n        \\<exists>as. While_CFG.path (transform g) (_Entry_) as n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 2. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 3. \\<And>g n. finite (while_cfg_defs g n)\n 4. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 5. \\<And>g n. finite (while_cfg_uses g n)\n 6. \\<And>g. while_cfg_invar g\n 7. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply clarsimp"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n g as.\n       \\<lbrakk>while_cfg_invar g;\n        While_CFG.path (transform g) (_Entry_) as n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 2. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 3. \\<And>g n. finite (while_cfg_defs g n)\n 4. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 5. \\<And>g n. finite (while_cfg_uses g n)\n 6. \\<And>g. while_cfg_invar g\n 7. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (drule while_path_graph_pathD)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n g as.\n       \\<lbrakk>while_cfg_invar g;\n        while.path2 g (_Entry_) ((_Entry_) # map targetnode as) n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns. while.path2 g (while_cfg_Entry g) ns n\n 2. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 3. \\<And>g n. finite (while_cfg_defs g n)\n 4. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 5. \\<And>g n. finite (while_cfg_uses g n)\n 6. \\<And>g. while_cfg_invar g\n 7. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (auto simp: while_cfg_Entry_def)[1]"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n g.\n       n \\<in> set (while_cfg_\\<alpha>n g) \\<Longrightarrow>\n       while_cfg_defs g n \\<inter> while_cfg_uses g n = {}\n 2. \\<And>g n. finite (while_cfg_defs g n)\n 3. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 4. \\<And>g n. finite (while_cfg_uses g n)\n 5. \\<And>g. while_cfg_invar g\n 6. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (clarsimp simp: while_cfg_defs)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>g n. finite (while_cfg_defs g n)\n 2. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 3. \\<And>g n. finite (while_cfg_uses g n)\n 4. \\<And>g. while_cfg_invar g\n 5. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (clarsimp simp: while_cfg_defs)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>g. finite {v. \\<exists>n. v \\<in> Uses (transform g) n}\n 2. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 3. \\<And>g n. finite (while_cfg_uses g n)\n 4. \\<And>g. while_cfg_invar g\n 5. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (subgoal_tac \"{v. \\<exists>n. v \\<in> Uses (transform g) n} = (\\<Union>n \\<in> Collect (valid_node (transform g)). Uses (transform g) n)\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>g.\n       {v. \\<exists>n. v \\<in> Uses (transform g) n} =\n       \\<Union>\n        (Uses (transform g) `\n         Collect (valid_node (transform g))) \\<Longrightarrow>\n       finite {v. \\<exists>n. v \\<in> Uses (transform g) n}\n 2. \\<And>g.\n       {v. \\<exists>n. v \\<in> Uses (transform g) n} =\n       \\<Union> (Uses (transform g) ` Collect (valid_node (transform g)))\n 3. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 4. \\<And>g n. finite (while_cfg_uses g n)\n 5. \\<And>g. while_cfg_invar g\n 6. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>g.\n       {v. \\<exists>n. v \\<in> Uses (transform g) n} =\n       \\<Union> (Uses (transform g) ` Collect (valid_node (transform g)))\n 2. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 3. \\<And>g n. finite (while_cfg_uses g n)\n 4. \\<And>g. while_cfg_invar g\n 5. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (auto dest: in_Uses_valid_node)[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>v g n.\n       v \\<in> while_cfg_uses g n \\<Longrightarrow>\n       n \\<in> set (while_cfg_\\<alpha>n g)\n 2. \\<And>g n. finite (while_cfg_uses g n)\n 3. \\<And>g. while_cfg_invar g\n 4. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (auto dest!: label_less_num_inner_nodes less_num_nodes_edge\n     simp: Uses.simps valid_node_def valid_edge_def while_cfg_defs)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>g n. finite (while_cfg_uses g n)\n 2. \\<And>g. while_cfg_invar g\n 3. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (clarsimp simp: while_cfg_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g. while_cfg_invar g\n 2. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (clarsimp simp: while_cfg_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SSA_CFG.CFG_wf_axioms (\\<lambda>_. while_cfg_\\<alpha>n cmd)\n     (\\<lambda>_. while_cfg_invar cmd) (\\<lambda>_. while_cfg_inEdges' cmd)\n     (\\<lambda>_. while_cfg_Entry cmd) (\\<lambda>_. while_cfg_defs cmd)\n     (\\<lambda>_. while_cfg_uses cmd)", "apply (clarsimp simp: SSA_CFG.CFG_wf_axioms_def CFG_base.defAss'_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g m v ns.\n       \\<lbrakk>m \\<in> set (while_cfg_\\<alpha>n cmd);\n        v \\<in> while_cfg_uses cmd m;\n        while_ign.path2 cmd g (while_cfg_Entry cmd) ns m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>set ns. v \\<in> while_cfg_defs cmd n", "apply (rule_tac x=\"(_Entry_)\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g m v ns.\n       \\<lbrakk>m \\<in> set (while_cfg_\\<alpha>n cmd);\n        v \\<in> while_cfg_uses cmd m;\n        while_ign.path2 cmd g (while_cfg_Entry cmd) ns m\\<rbrakk>\n       \\<Longrightarrow> v \\<in> while_cfg_defs cmd (_Entry_)\n 2. \\<And>g m v ns.\n       \\<lbrakk>m \\<in> set (while_cfg_\\<alpha>n cmd);\n        v \\<in> while_cfg_uses cmd m;\n        while_ign.path2 cmd g (while_cfg_Entry cmd) ns m\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<in> set ns", "apply (auto simp: while_cfg_defs)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g m v ns.\n       \\<lbrakk>m \\<in> set (while_cfg_\\<alpha>n cmd);\n        v \\<in> while_cfg_uses cmd m;\n        while_ign.path2 cmd g (while_cfg_Entry cmd) ns m\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<in> set ns", "by (auto elim: graph_path_base.path.cases simp: graph_path_base.path2_def while_cfg_Entry_def)"], ["", "lift_definition gen_while_cfg_wf :: \"cmd \\<Rightarrow> (w_node, vname, state edge_kind) gen_cfg_wf\"\n  is gen_while_cfg"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cmd.\n       SSA_CFG.CFG_wf (\\<lambda>_. gen_\\<alpha>e (gen_while_cfg cmd))\n        (\\<lambda>_. gen_\\<alpha>n (gen_while_cfg cmd)) (\\<lambda>_. True)\n        (\\<lambda>_. gen_inEdges' (gen_while_cfg cmd))\n        (\\<lambda>_. gen_Entry (gen_while_cfg cmd))\n        (\\<lambda>_. gen_defs (gen_while_cfg cmd))\n        (\\<lambda>_. gen_uses (gen_while_cfg cmd))", "using while_cfg_CFG_wf_impl"], ["proof (prove)\nusing this:\n  SSA_CFG.CFG_wf (\\<lambda>_. gen_\\<alpha>e (gen_while_cfg ?cmd))\n   (\\<lambda>_. gen_\\<alpha>n (gen_while_cfg ?cmd))\n   (\\<lambda>_. while_cfg_invar ?cmd)\n   (\\<lambda>_. gen_inEdges' (gen_while_cfg ?cmd))\n   (\\<lambda>_. gen_Entry (gen_while_cfg ?cmd))\n   (\\<lambda>_. gen_defs (gen_while_cfg ?cmd))\n   (\\<lambda>_. gen_uses (gen_while_cfg ?cmd))\n\ngoal (1 subgoal):\n 1. \\<And>cmd.\n       SSA_CFG.CFG_wf (\\<lambda>_. gen_\\<alpha>e (gen_while_cfg cmd))\n        (\\<lambda>_. gen_\\<alpha>n (gen_while_cfg cmd)) (\\<lambda>_. True)\n        (\\<lambda>_. gen_inEdges' (gen_while_cfg cmd))\n        (\\<lambda>_. gen_Entry (gen_while_cfg cmd))\n        (\\<lambda>_. gen_defs (gen_while_cfg cmd))\n        (\\<lambda>_. gen_uses (gen_while_cfg cmd))", "by (auto simp: gen_while_cfg_def o_def split_beta while_cfg_invar_def)"], ["", "definition \"build_ssa cmd = gen_ssa_wf_notriv_substAll (gen_ssa_cfg_wf (gen_while_cfg_wf cmd))\""], ["", "end"]]}