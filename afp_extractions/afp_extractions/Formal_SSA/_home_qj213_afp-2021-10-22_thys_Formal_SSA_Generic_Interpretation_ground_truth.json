{"file_name": "/home/qj213/afp-2021-10-22/thys/Formal_SSA/Generic_Interpretation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Formal_SSA", "problem_names": ["lemma set_iterator_foldri_Nil [simp, intro!]: \"set_iterator (foldri []) {}\"", "lemma set_iterator_foldri_one [simp, intro!]: \"set_iterator (foldri [a]) {a}\"", "lemma gen_cfg_inhabited: \"let g = trivial_gen_cfg ext in CFG_wf (ign gen_\\<alpha>e g) (ign gen_\\<alpha>n g) (const True) (ign gen_inEdges' g) (ign gen_Entry g) (ign gen_defs g) (ign gen_uses g)\"", "lemma gen_wf_inEdges'_transfer [transfer_rule]: \"rel_fun cr_gen_cfg_wf (=) gen_inEdges' gen_wf_inEdges'\"", "lemma gen_wf_invar_trans: \"rel_fun cr_gen_cfg_wf (=) gen_wf_invar gen_wf_invar\"", "lemma gen_ssa_wf_inEdges'_transfer [transfer_rule]: \"rel_fun cr_gen_ssa_cfg_wf (=) gen_inEdges' gen_ssa_wf_inEdges'\"", "lemma gen_ssa_wf_invar_trans: \"rel_fun cr_gen_ssa_cfg_wf (=) gen_wf_invar gen_wf_invar\"", "lemma path2_ign[simp]: \"graph_path_base.path2 (ign gen_\\<alpha>n g) gen_wf_invar (ign gen_inEdges' g) g' n ns m \\<longleftrightarrow> graph_path_base.path2 gen_\\<alpha>n gen_wf_invar gen_inEdges' g n ns m\"", "lemma allDefs_ign[simp]: \"CFG_SSA_base.allDefs (ign gen_ssa_defs g) (ign Mapping.lookup (gen_phis g)) ga n = CFG_SSA_base.allDefs gen_ssa_defs (\\<lambda>g. Mapping.lookup (gen_phis g)) g n\"", "lemma successors_ign[simp]: \"graph_path_base.successors (ign gen_\\<alpha>n g) (ign gen_inEdges' g) ga n = graph_path_base.successors gen_\\<alpha>n gen_inEdges' g n\"", "lemma predecessors_ign[simp]: \"graph_path_base.predecessors (ign gen_inEdges' g) ga n = graph_path_base.predecessors gen_inEdges' g n\"", "lemma phiDefs_ign[simp]: \"CFG_SSA_base.phiDefs (ign Mapping.lookup (gen_phis g)) ga = CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_phis g)) g\"", "lemma defAss_ign[simp]: \"CFG_SSA_base.defAss (ign gen_\\<alpha>n g) gen_wf_invar (ign gen_inEdges' g) (ign gen_Entry g) (ign gen_ssa_defs g) (ign Mapping.lookup (gen_phis g)) ga\n  = CFG_SSA_base.defAss gen_\\<alpha>n gen_wf_invar gen_inEdges' gen_Entry gen_ssa_defs (\\<lambda>g. Mapping.lookup (gen_phis g)) g\"", "lemma allUses_ign[simp]: \"CFG_SSA_base.allUses (ign gen_\\<alpha>n g) (ign gen_inEdges' g) (usesOf \\<circ> ign gen_ssa_uses g) (ign Mapping.lookup (gen_phis g)) ga m\n  = CFG_SSA_base.allUses gen_\\<alpha>n gen_inEdges' (usesOf \\<circ> gen_ssa_uses) (\\<lambda>g. Mapping.lookup (gen_phis g)) g m\"", "lemma defAss'_ign[simp]: \"CFG_base.defAss' (ign gen_\\<alpha>n g) gen_wf_invar (ign gen_inEdges' g) (ign gen_Entry g) (ign gen_defs g) ga\n  = CFG_base.defAss' gen_\\<alpha>n gen_wf_invar gen_inEdges' gen_Entry gen_defs g\"", "lemma gen_\\<alpha>e_wf_extend [simp]:\n  \"gen_\\<alpha>e (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_\\<alpha>e gen_cfg_wf\"", "lemma gen_\\<alpha>n_wf_extend [simp]:\n  \"gen_\\<alpha>n (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_\\<alpha>n gen_cfg_wf\"", "lemma gen_inEdges_wf_extend [simp]:\n  \"gen_inEdges (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_inEdges gen_cfg_wf\"", "lemma gen_Entry_wf_extend [simp]:\n  \"gen_Entry (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_Entry gen_cfg_wf\"", "lemma gen_defs_wf_extend [simp]:\n  \"gen_defs (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_defs gen_cfg_wf\"", "lemma gen_uses_wf_extend [simp]:\n  \"gen_uses (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_uses gen_cfg_wf\"", "lemma gen_ssa_defs_wf_extend [simp]:\n  \"gen_ssa_defs (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = d\"", "lemma gen_ssa_uses_wf_extend [simp]:\n  \"gen_ssa_uses (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = u\"", "lemma gen_phis_wf_extend [simp]:\n  \"gen_phis (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = p\"", "lemma gen_var_wf_extend [simp]:\n  \"gen_var (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = v\"", "lemma CFG_SSA_Transformed_codeI:\n  assumes \"CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g)) (\\<lambda>g. Mapping.lookup (phis g)) var\"\n  and \"\\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\"\n  shows \"CFG_SSA_Transformed_code \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs oldUses defs uses phis var\"", "lemma CFG_SSA_Transformed_ign:\n  \"CFG_SSA_Transformed (ign gen_wf_\\<alpha>e gen_cfg_wf) (ign gen_wf_\\<alpha>n gen_cfg_wf) gen_wf_invar\n        (const (gen_wf_inEdges' gen_cfg_wf)) (ign gen_wf_Entry gen_cfg_wf) (ign gen_wf_defs gen_cfg_wf)\n        (ign gen_wf_uses gen_cfg_wf) (ign gen_wf_defs' gen_cfg_wf) (ign gen_wf.uses' gen_cfg_wf)\n        (ign gen_wf.phis' gen_cfg_wf)\n        (ign gen_wf_var gen_cfg_wf)\"", "lemma fold_Cons_commute: \"(\\<And>a b. \\<lbrakk>a \\<in> set (x # xs); b \\<in> set (x # xs)\\<rbrakk> \\<Longrightarrow> f a \\<circ> f b = f b \\<circ> f a)\n  \\<Longrightarrow> fold f (x # xs) = f x \\<circ> (fold f xs)\"", "lemma Union_of_code [code]: \"Union_of f (RBT_Set.Set r) = RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}\""], "translations": [["", "lemma set_iterator_foldri_Nil [simp, intro!]: \"set_iterator (foldri []) {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator (foldri []) {}", "by (rule set_iterator_I; simp add: foldri_def)"], ["", "lemma set_iterator_foldri_one [simp, intro!]: \"set_iterator (foldri [a]) {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator (foldri [a]) {a}", "by (rule set_iterator_I; simp add: foldri_def)"], ["", "abbreviation \"gen_inEdges' g n \\<equiv> map (\\<lambda>(f,d,t). (f,d)) (gen_inEdges g n)\""], ["", "lemma gen_cfg_inhabited: \"let g = trivial_gen_cfg ext in CFG_wf (ign gen_\\<alpha>e g) (ign gen_\\<alpha>n g) (const True) (ign gen_inEdges' g) (ign gen_Entry g) (ign gen_defs g) (ign gen_uses g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. let g = \\<lparr>gen_\\<alpha>e = {}, gen_\\<alpha>n = [undefined],\n               gen_inEdges = \\<lambda>_. [], gen_Entry = undefined,\n               gen_defs = \\<lambda>_. {}, gen_uses = \\<lambda>_. {},\n               \\<dots> = ext\\<rparr>\n    in CFG_wf (\\<lambda>_. gen_\\<alpha>e g) (\\<lambda>_. gen_\\<alpha>n g)\n        (\\<lambda>_. True) (\\<lambda>_. gen_inEdges' g)\n        (\\<lambda>_. gen_Entry g) (\\<lambda>_. gen_defs g)\n        (\\<lambda>_. gen_uses g)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_wf (\\<lambda>_. {}) (\\<lambda>_. [undefined]) (\\<lambda>_. True)\n     (\\<lambda>_ n. []) (\\<lambda>_. undefined) (\\<lambda>_ _. {})\n     (\\<lambda>_ _. {})", "apply unfold_locales"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow>\n       finite (nodes \\<lparr>nodes = set [undefined], edges = {}\\<rparr>)\n 2. \\<And>g.\n       True \\<Longrightarrow>\n       finite (edges \\<lparr>nodes = set [undefined], edges = {}\\<rparr>)\n 3. \\<And>g.\n       True \\<Longrightarrow>\n       fst ` edges \\<lparr>nodes = set [undefined], edges = {}\\<rparr>\n       \\<subseteq> nodes \\<lparr>nodes = set [undefined], edges = {}\\<rparr>\n 4. \\<And>g.\n       True \\<Longrightarrow>\n       snd ` snd ` edges \\<lparr>nodes = set [undefined], edges = {}\\<rparr>\n       \\<subseteq> nodes \\<lparr>nodes = set [undefined], edges = {}\\<rparr>\n 5. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri [undefined])\n        (nodes \\<lparr>nodes = set [undefined], edges = {}\\<rparr>)\n 6. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri [])\n        (pred \\<lparr>nodes = set [undefined], edges = {}\\<rparr> v)\n 7. \\<And>g. undefined \\<in> set [undefined]\n 8. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges (\\<lambda>_ n. []) g undefined = []\n 9. \\<And>n g.\n       \\<lbrakk>n \\<in> set [undefined]; True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 (\\<lambda>_. [undefined])\n                             (\\<lambda>_. True) (\\<lambda>_ n. []) g\n                             undefined ns n\n 10. \\<And>n g.\n        n \\<in> set [undefined] \\<Longrightarrow> {} \\<inter> {} = {}\nA total of 14 subgoals...", "by (auto simp: gen_cfg.defs graph_path_base.path2_def pred_def graph_path_base.inEdges_def intro!: graph_path_base.path.intros(1) exI)"], ["", "typedef ('node, 'var, 'edge) gen_cfg_wf = \"{g :: ('node::linorder, 'var::linorder, 'edge) gen_cfg.\n  CFG_wf (ign gen_\\<alpha>e g) (ign gen_\\<alpha>n g) (const True) (ign gen_inEdges' g) (ign gen_Entry g) (ign gen_defs g) (ign gen_uses g)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<in> {g. CFG_wf (\\<lambda>_. gen_\\<alpha>e g)\n                    (\\<lambda>_. gen_\\<alpha>n g) (\\<lambda>_. True)\n                    (\\<lambda>_. gen_inEdges' g) (\\<lambda>_. gen_Entry g)\n                    (\\<lambda>_. gen_defs g) (\\<lambda>_. gen_uses g)}", "by (rule exI[where x=\"trivial_gen_cfg undefined\"]) (simp add: gen_cfg_inhabited[simplified])"], ["", "setup_lifting type_definition_gen_cfg_wf"], ["", "lift_definition gen_wf_\\<alpha>n :: \"('node::linorder, 'var::linorder, 'edge) gen_cfg_wf \\<Rightarrow> 'node list\" is gen_\\<alpha>n"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_wf_\\<alpha>e :: \"('node::linorder, 'var::linorder, 'edge) gen_cfg_wf \\<Rightarrow> ('node, 'edge) edge set\" is gen_\\<alpha>e"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_wf_inEdges :: \"('node::linorder, 'var::linorder, 'edge) gen_cfg_wf \\<Rightarrow> 'node \\<Rightarrow> ('node, 'edge) edge list\" is gen_inEdges"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_wf_Entry :: \"('node::linorder, 'var::linorder, 'edge) gen_cfg_wf \\<Rightarrow> 'node\" is gen_Entry"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_wf_defs :: \"('node::linorder, 'var::linorder, 'edge) gen_cfg_wf \\<Rightarrow> 'node \\<Rightarrow> 'var set\" is gen_defs"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_wf_uses :: \"('node::linorder, 'var::linorder, 'edge) gen_cfg_wf \\<Rightarrow> 'node \\<Rightarrow> 'var set\" is gen_uses"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "abbreviation \"gen_wf_invar \\<equiv> const True\""], ["", "abbreviation \"gen_wf_inEdges' g n \\<equiv> map (\\<lambda>(f,d,t). (f,d)) (gen_wf_inEdges g n)\""], ["", "lemma gen_wf_inEdges'_transfer [transfer_rule]: \"rel_fun cr_gen_cfg_wf (=) gen_inEdges' gen_wf_inEdges'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun cr_gen_cfg_wf (=) gen_inEdges' gen_wf_inEdges'", "using gen_wf_inEdges.transfer"], ["proof (prove)\nusing this:\n  rel_fun cr_gen_cfg_wf (=) gen_inEdges gen_wf_inEdges\n\ngoal (1 subgoal):\n 1. rel_fun cr_gen_cfg_wf (=) gen_inEdges' gen_wf_inEdges'", "apply (auto simp: rel_fun_def cr_gen_cfg_wf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<forall>y.\n          gen_inEdges (Rep_gen_cfg_wf y) =\n          gen_wf_inEdges y \\<Longrightarrow>\n       gen_inEdges' (Rep_gen_cfg_wf y) = gen_wf_inEdges' y", "by (erule_tac x=y in allE) simp"], ["", "lemma gen_wf_invar_trans: \"rel_fun cr_gen_cfg_wf (=) gen_wf_invar gen_wf_invar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun cr_gen_cfg_wf (=) (\\<lambda>_. True) (\\<lambda>_. True)", "by auto"], ["", "declare graph_path_base.transfer_rules[OF gen_cfg_wf.right_total gen_wf_\\<alpha>e.transfer gen_wf_\\<alpha>n.transfer gen_wf_invar_trans gen_wf_inEdges'_transfer, transfer_rule]"], ["", "declare CFG_base.defAss'_transfer[OF gen_cfg_wf.right_total gen_wf_\\<alpha>e.transfer gen_wf_\\<alpha>n.transfer gen_wf_invar_trans gen_wf_inEdges'_transfer, transfer_rule]"], ["", "global_interpretation gen_wf: CFG_Construct_linorder gen_wf_\\<alpha>e gen_wf_\\<alpha>n gen_wf_invar gen_wf_inEdges' gen_wf_Entry gen_wf_defs gen_wf_uses\ndefines\n  gen_wf_predecessors = gen_wf.predecessors and\n  gen_wf_successors = gen_wf.successors and\n  gen_wf_defs' = gen_wf.defs' and\n  gen_wf_vars = gen_wf.vars and\n  gen_wf_var = gen_wf.var and\n  gen_wf_readVariableRecursive = gen_wf.readVariableRecursive and\n  gen_wf_readArgs = gen_wf.readArgs and\n  gen_wf_uses'_phis' = gen_wf.uses'_phis'"], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_Construct_linorder gen_wf_\\<alpha>e gen_wf_\\<alpha>n\n     (\\<lambda>_. True) gen_wf_inEdges' gen_wf_Entry gen_wf_defs gen_wf_uses", "apply unfold_locales"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow>\n       finite\n        (nodes\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>)\n 2. \\<And>g.\n       True \\<Longrightarrow>\n       finite\n        (edges\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>)\n 3. \\<And>g.\n       True \\<Longrightarrow>\n       fst `\n       edges\n        \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n           edges = gen_wf_\\<alpha>e g\\<rparr>\n       \\<subseteq> nodes\n                    \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n                       edges = gen_wf_\\<alpha>e g\\<rparr>\n 4. \\<And>g.\n       True \\<Longrightarrow>\n       snd `\n       snd `\n       edges\n        \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n           edges = gen_wf_\\<alpha>e g\\<rparr>\n       \\<subseteq> nodes\n                    \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n                       edges = gen_wf_\\<alpha>e g\\<rparr>\n 5. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_\\<alpha>n g))\n        (nodes\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>)\n 6. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_inEdges' g v))\n        (pred\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>\n          v)\n 7. \\<And>g. gen_wf_Entry g \\<in> set (gen_wf_\\<alpha>n g)\n 8. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges gen_wf_inEdges' g (gen_wf_Entry g) = []\n 9. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 10. \\<And>n g.\n        n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n        gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\nA total of 15 subgoals...", "apply (transfer, simp add: CFG_Construct_wf_def CFG_wf_def CFG_def graph_Entry_def graph_path_def graph_Entry_axioms_def)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow>\n       finite\n        (edges\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>)\n 2. \\<And>g.\n       True \\<Longrightarrow>\n       fst `\n       edges\n        \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n           edges = gen_wf_\\<alpha>e g\\<rparr>\n       \\<subseteq> nodes\n                    \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n                       edges = gen_wf_\\<alpha>e g\\<rparr>\n 3. \\<And>g.\n       True \\<Longrightarrow>\n       snd `\n       snd `\n       edges\n        \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n           edges = gen_wf_\\<alpha>e g\\<rparr>\n       \\<subseteq> nodes\n                    \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n                       edges = gen_wf_\\<alpha>e g\\<rparr>\n 4. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_\\<alpha>n g))\n        (nodes\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>)\n 5. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_inEdges' g v))\n        (pred\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>\n          v)\n 6. \\<And>g. gen_wf_Entry g \\<in> set (gen_wf_\\<alpha>n g)\n 7. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges gen_wf_inEdges' g (gen_wf_Entry g) = []\n 8. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 9. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 10. \\<And>g n. finite (gen_wf_defs g n)\nA total of 14 subgoals...", "apply (transfer, simp add: CFG_Construct_wf_def CFG_wf_def CFG_def graph_Entry_def graph_path_def graph_def)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow>\n       fst `\n       edges\n        \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n           edges = gen_wf_\\<alpha>e g\\<rparr>\n       \\<subseteq> nodes\n                    \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n                       edges = gen_wf_\\<alpha>e g\\<rparr>\n 2. \\<And>g.\n       True \\<Longrightarrow>\n       snd `\n       snd `\n       edges\n        \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n           edges = gen_wf_\\<alpha>e g\\<rparr>\n       \\<subseteq> nodes\n                    \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n                       edges = gen_wf_\\<alpha>e g\\<rparr>\n 3. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_\\<alpha>n g))\n        (nodes\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>)\n 4. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_inEdges' g v))\n        (pred\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>\n          v)\n 5. \\<And>g. gen_wf_Entry g \\<in> set (gen_wf_\\<alpha>n g)\n 6. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges gen_wf_inEdges' g (gen_wf_Entry g) = []\n 7. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 8. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 9. \\<And>g n. finite (gen_wf_defs g n)\n 10. \\<And>v g n.\n        v \\<in> gen_wf_uses g n \\<Longrightarrow>\n        n \\<in> set (gen_wf_\\<alpha>n g)\nA total of 13 subgoals...", "apply (transfer, simp add: CFG_Construct_wf_def CFG_wf_def CFG_def graph_Entry_def graph_path_def graph_def valid_graph_def)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow>\n       snd `\n       snd `\n       edges\n        \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n           edges = gen_wf_\\<alpha>e g\\<rparr>\n       \\<subseteq> nodes\n                    \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n                       edges = gen_wf_\\<alpha>e g\\<rparr>\n 2. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_\\<alpha>n g))\n        (nodes\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>)\n 3. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_inEdges' g v))\n        (pred\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>\n          v)\n 4. \\<And>g. gen_wf_Entry g \\<in> set (gen_wf_\\<alpha>n g)\n 5. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges gen_wf_inEdges' g (gen_wf_Entry g) = []\n 6. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 7. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 8. \\<And>g n. finite (gen_wf_defs g n)\n 9. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 10. \\<And>g n. finite (gen_wf_uses g n)\nA total of 12 subgoals...", "apply (transfer, simp add: CFG_Construct_wf_def CFG_wf_def CFG_def graph_Entry_def graph_path_def graph_Entry_axioms_def graph_def valid_graph_def)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_\\<alpha>n g))\n        (nodes\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>)\n 2. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_inEdges' g v))\n        (pred\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>\n          v)\n 3. \\<And>g. gen_wf_Entry g \\<in> set (gen_wf_\\<alpha>n g)\n 4. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges gen_wf_inEdges' g (gen_wf_Entry g) = []\n 5. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 6. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 7. \\<And>g n. finite (gen_wf_defs g n)\n 8. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 9. \\<And>g n. finite (gen_wf_uses g n)\n 10. \\<And>g. True\nA total of 11 subgoals...", "apply simp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>g.\n       set_iterator (foldri (gen_wf_\\<alpha>n g)) (set (gen_wf_\\<alpha>n g))\n 2. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_inEdges' g v))\n        (pred\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>\n          v)\n 3. \\<And>g. gen_wf_Entry g \\<in> set (gen_wf_\\<alpha>n g)\n 4. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges gen_wf_inEdges' g (gen_wf_Entry g) = []\n 5. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 6. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 7. \\<And>g n. finite (gen_wf_defs g n)\n 8. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 9. \\<And>g n. finite (gen_wf_uses g n)\n 10. \\<And>g. True\nA total of 11 subgoals...", "apply (rule set_iterator_foldri_correct)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>g. distinct (gen_wf_\\<alpha>n g)\n 2. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_inEdges' g v))\n        (pred\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>\n          v)\n 3. \\<And>g. gen_wf_Entry g \\<in> set (gen_wf_\\<alpha>n g)\n 4. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges gen_wf_inEdges' g (gen_wf_Entry g) = []\n 5. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 6. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 7. \\<And>g n. finite (gen_wf_defs g n)\n 8. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 9. \\<And>g n. finite (gen_wf_uses g n)\n 10. \\<And>g. True\nA total of 11 subgoals...", "apply (transfer, clarsimp simp add: CFG_Construct_wf_def CFG_wf_def CFG_def graph_Entry_def)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>g.\n       \\<lbrakk>graph_path (\\<lambda>_. gen_\\<alpha>e g)\n                 (\\<lambda>_. gen_\\<alpha>n g) (\\<lambda>_. True)\n                 (\\<lambda>_. gen_inEdges' g);\n        graph_Entry_axioms (\\<lambda>_. gen_\\<alpha>n g) (\\<lambda>_. True)\n         (\\<lambda>_. gen_inEdges' g) (\\<lambda>_. gen_Entry g);\n        CFG_axioms (\\<lambda>_. gen_\\<alpha>n g) (\\<lambda>_. True)\n         (\\<lambda>_. gen_defs g) (\\<lambda>_. gen_uses g);\n        CFG_wf_axioms (\\<lambda>_. gen_\\<alpha>n g) (\\<lambda>_. True)\n         (\\<lambda>_. gen_inEdges' g) (\\<lambda>_. gen_Entry g)\n         (\\<lambda>_. gen_defs g) (\\<lambda>_. gen_uses g)\\<rbrakk>\n       \\<Longrightarrow> distinct (gen_\\<alpha>n g)\n 2. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_inEdges' g v))\n        (pred\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>\n          v)\n 3. \\<And>g. gen_wf_Entry g \\<in> set (gen_wf_\\<alpha>n g)\n 4. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges gen_wf_inEdges' g (gen_wf_Entry g) = []\n 5. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 6. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 7. \\<And>g n. finite (gen_wf_defs g n)\n 8. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 9. \\<And>g n. finite (gen_wf_uses g n)\n 10. \\<And>g. True\nA total of 11 subgoals...", "apply (drule graph_path.\\<alpha>n_distinct; simp)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_wf_inEdges' g v))\n        (pred\n          \\<lparr>nodes = set (gen_wf_\\<alpha>n g),\n             edges = gen_wf_\\<alpha>e g\\<rparr>\n          v)\n 2. \\<And>g. gen_wf_Entry g \\<in> set (gen_wf_\\<alpha>n g)\n 3. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges gen_wf_inEdges' g (gen_wf_Entry g) = []\n 4. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 5. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 6. \\<And>g n. finite (gen_wf_defs g n)\n 7. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 8. \\<And>g n. finite (gen_wf_uses g n)\n 9. \\<And>g. True\n 10. \\<And>g.\n        \\<forall>m\\<in>set (gen_wf_\\<alpha>n g).\n           \\<forall>v\\<in>gen_wf_uses g m.\n              CFG_base.defAss' gen_wf_\\<alpha>n (\\<lambda>_. True)\n               gen_wf_inEdges' gen_wf_Entry gen_wf_defs g m v", "apply (transfer, clarsimp simp: CFG_Construct_wf_def CFG_wf_def CFG_def graph_Entry_def graph_path_def graph_pred_it_def graph_pred_it_axioms_def)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>g. gen_wf_Entry g \\<in> set (gen_wf_\\<alpha>n g)\n 2. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges gen_wf_inEdges' g (gen_wf_Entry g) = []\n 3. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 4. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 5. \\<And>g n. finite (gen_wf_defs g n)\n 6. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 7. \\<And>g n. finite (gen_wf_uses g n)\n 8. \\<And>g. True\n 9. \\<And>g.\n       \\<forall>m\\<in>set (gen_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_wf_uses g m.\n             CFG_base.defAss' gen_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_wf_inEdges' gen_wf_Entry gen_wf_defs g m v", "apply (transfer, clarsimp simp: CFG_Construct_wf_def CFG_wf_def CFG_def graph_Entry_def graph_Entry_axioms_def)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges gen_wf_inEdges' g (gen_wf_Entry g) = []\n 2. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 3. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 4. \\<And>g n. finite (gen_wf_defs g n)\n 5. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 6. \\<And>g n. finite (gen_wf_uses g n)\n 7. \\<And>g. True\n 8. \\<And>g.\n       \\<forall>m\\<in>set (gen_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_wf_uses g m.\n             CFG_base.defAss' gen_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_wf_inEdges' gen_wf_Entry gen_wf_defs g m v", "apply (transfer, clarsimp simp: CFG_Construct_wf_def CFG_wf_def CFG_def graph_Entry_def graph_Entry_axioms_def graph_path_base.inEdges_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 gen_wf_\\<alpha>n\n                             (\\<lambda>_. True) gen_wf_inEdges' g\n                             (gen_wf_Entry g) ns n\n 2. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 3. \\<And>g n. finite (gen_wf_defs g n)\n 4. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 5. \\<And>g n. finite (gen_wf_uses g n)\n 6. \\<And>g. True\n 7. \\<And>g.\n       \\<forall>m\\<in>set (gen_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_wf_uses g m.\n             CFG_base.defAss' gen_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_wf_inEdges' gen_wf_Entry gen_wf_defs g m v", "apply (transfer, clarsimp simp: CFG_Construct_wf_def CFG_wf_def CFG_def graph_Entry_def graph_Entry_axioms_def graph_path_base.path2_def graph_path_base.path_def graph_path_base.predecessors_def graph_path_base.inEdges_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n g.\n       n \\<in> set (gen_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_wf_defs g n \\<inter> gen_wf_uses g n = {}\n 2. \\<And>g n. finite (gen_wf_defs g n)\n 3. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 4. \\<And>g n. finite (gen_wf_uses g n)\n 5. \\<And>g. True\n 6. \\<And>g.\n       \\<forall>m\\<in>set (gen_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_wf_uses g m.\n             CFG_base.defAss' gen_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_wf_inEdges' gen_wf_Entry gen_wf_defs g m v", "apply (transfer, simp only: CFG_Construct_wf_def CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>g n. finite (gen_wf_defs g n)\n 2. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 3. \\<And>g n. finite (gen_wf_uses g n)\n 4. \\<And>g. True\n 5. \\<And>g.\n       \\<forall>m\\<in>set (gen_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_wf_uses g m.\n             CFG_base.defAss' gen_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_wf_inEdges' gen_wf_Entry gen_wf_defs g m v", "apply (transfer, simp only: CFG_Construct_wf_def CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>v g n.\n       v \\<in> gen_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n g)\n 2. \\<And>g n. finite (gen_wf_uses g n)\n 3. \\<And>g. True\n 4. \\<And>g.\n       \\<forall>m\\<in>set (gen_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_wf_uses g m.\n             CFG_base.defAss' gen_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_wf_inEdges' gen_wf_Entry gen_wf_defs g m v", "apply (transfer, simp only: CFG_Construct_wf_def CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>g n. finite (gen_wf_uses g n)\n 2. \\<And>g. True\n 3. \\<And>g.\n       \\<forall>m\\<in>set (gen_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_wf_uses g m.\n             CFG_base.defAss' gen_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_wf_inEdges' gen_wf_Entry gen_wf_defs g m v", "apply (transfer, simp only: CFG_Construct_wf_def CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>g. True\n 2. \\<And>g.\n       \\<forall>m\\<in>set (gen_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_wf_uses g m.\n             CFG_base.defAss' gen_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_wf_inEdges' gen_wf_Entry gen_wf_defs g m v", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<forall>m\\<in>set (gen_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_wf_uses g m.\n             CFG_base.defAss' gen_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_wf_inEdges' gen_wf_Entry gen_wf_defs g m v", "by (transfer, clarsimp simp: CFG_Construct_wf_def CFG_wf_def CFG_wf_axioms_def CFG_base.defAss'_def [abs_def]\n  graph_path_base.path2_def graph_path_base.path_def graph_path_base.predecessors_def graph_path_base.inEdges_def)"], ["", "record ('node, 'var, 'edge, 'val) gen_ssa_cfg = \"('node, 'var, 'edge) gen_cfg\" +\n  gen_ssa_defs :: \"'node \\<Rightarrow> 'val set\"\n  gen_ssa_uses :: \"('node, 'val set) mapping\"\n  gen_phis :: \"('node, 'val) phis_code\"\n  gen_var :: \"'val \\<Rightarrow> 'var\""], ["", "typedef ('node, 'var, 'edge, 'val) gen_ssa_cfg_wf = \"{g :: ('node::linorder, 'var::linorder, 'edge, 'val::linorder) gen_ssa_cfg.\n  CFG_SSA_Transformed_code (ign gen_\\<alpha>e g) (ign gen_\\<alpha>n g) (const True) (ign gen_inEdges' g) (ign gen_Entry g) (ign gen_defs g) (ign gen_uses g) (ign gen_ssa_defs g) (ign gen_ssa_uses g) (ign gen_phis g) (ign gen_var g)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<in> {g. CFG_SSA_Transformed_code (\\<lambda>_. gen_\\<alpha>e g)\n                    (\\<lambda>_. gen_\\<alpha>n g) (\\<lambda>_. True)\n                    (\\<lambda>_. gen_inEdges' g) (\\<lambda>_. gen_Entry g)\n                    (\\<lambda>_. gen_defs g) (\\<lambda>_. gen_uses g)\n                    (\\<lambda>_. gen_ssa_defs g)\n                    (\\<lambda>_. gen_ssa_uses g) (\\<lambda>_. gen_phis g)\n                    (\\<lambda>_. gen_var g)}", "apply (rule exI[where x =\"trivial_gen_cfg \\<lparr> gen_ssa_defs = const {}, gen_ssa_uses = Mapping.empty, gen_phis = Mapping.empty, gen_var = undefined, \\<dots> = undefined \\<rparr>\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>gen_\\<alpha>e = {}, gen_\\<alpha>n = [undefined],\n       gen_inEdges = \\<lambda>_. [], gen_Entry = undefined,\n       gen_defs = \\<lambda>_. {}, gen_uses = \\<lambda>_. {},\n       gen_ssa_defs = \\<lambda>_. {}, gen_ssa_uses = Mapping.empty,\n       gen_phis = Mapping.empty, gen_var = undefined,\n       \\<dots> = undefined\\<rparr>\n    \\<in> {g. CFG_SSA_Transformed_code (\\<lambda>_. gen_\\<alpha>e g)\n               (\\<lambda>_. gen_\\<alpha>n g) (\\<lambda>_. True)\n               (\\<lambda>_. gen_inEdges' g) (\\<lambda>_. gen_Entry g)\n               (\\<lambda>_. gen_defs g) (\\<lambda>_. gen_uses g)\n               (\\<lambda>_. gen_ssa_defs g) (\\<lambda>_. gen_ssa_uses g)\n               (\\<lambda>_. gen_phis g) (\\<lambda>_. gen_var g)}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_Transformed_code (\\<lambda>_. {}) (\\<lambda>_. [undefined])\n     (\\<lambda>_. True) (\\<lambda>_ n. []) (\\<lambda>_. undefined)\n     (\\<lambda>_ _. {}) (\\<lambda>_ _. {}) (\\<lambda>_ _. {})\n     (\\<lambda>_. Mapping.empty) (\\<lambda>_. Mapping.empty)\n     (\\<lambda>_. undefined)", "apply unfold_locales"], ["proof (prove)\ngoal (31 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow>\n       finite (nodes \\<lparr>nodes = set [undefined], edges = {}\\<rparr>)\n 2. \\<And>g.\n       True \\<Longrightarrow>\n       finite (edges \\<lparr>nodes = set [undefined], edges = {}\\<rparr>)\n 3. \\<And>g.\n       True \\<Longrightarrow>\n       fst ` edges \\<lparr>nodes = set [undefined], edges = {}\\<rparr>\n       \\<subseteq> nodes \\<lparr>nodes = set [undefined], edges = {}\\<rparr>\n 4. \\<And>g.\n       True \\<Longrightarrow>\n       snd ` snd ` edges \\<lparr>nodes = set [undefined], edges = {}\\<rparr>\n       \\<subseteq> nodes \\<lparr>nodes = set [undefined], edges = {}\\<rparr>\n 5. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri [undefined])\n        (nodes \\<lparr>nodes = set [undefined], edges = {}\\<rparr>)\n 6. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri [])\n        (pred \\<lparr>nodes = set [undefined], edges = {}\\<rparr> v)\n 7. \\<And>g. undefined \\<in> set [undefined]\n 8. \\<And>g.\n       True \\<Longrightarrow>\n       graph_path_base.inEdges (\\<lambda>_ n. []) g undefined = []\n 9. \\<And>n g.\n       \\<lbrakk>n \\<in> set [undefined]; True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            graph_path_base.path2 (\\<lambda>_. [undefined])\n                             (\\<lambda>_. True) (\\<lambda>_ n. []) g\n                             undefined ns n\n 10. \\<And>n g.\n        n \\<in> set [undefined] \\<Longrightarrow>\n        {} \\<inter> (usesOf \\<circ> (\\<lambda>_. Mapping.empty)) g n = {}\nA total of 31 subgoals...", "by (auto simp: gen_cfg.defs graph_path_base.path2_def dom_def Mapping.lookup_empty CFG_SSA_base.CFG_SSA_defs pred_def  graph_path_base.inEdges_def intro!: graph_path_base.path.intros(1) exI)"], ["", "setup_lifting type_definition_gen_ssa_cfg_wf"], ["", "lift_definition gen_ssa_wf_\\<alpha>n :: \"('node::linorder, 'var::linorder, 'edge, 'val::linorder) gen_ssa_cfg_wf \\<Rightarrow> 'node list\" is gen_\\<alpha>n"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_ssa_wf_\\<alpha>e :: \"('node::linorder, 'var::linorder, 'edge, 'val::linorder) gen_ssa_cfg_wf \\<Rightarrow> ('node, 'edge) edge set\" is gen_\\<alpha>e"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_ssa_wf_inEdges :: \"('node::linorder, 'var::linorder, 'edge, 'val::linorder) gen_ssa_cfg_wf \\<Rightarrow> 'node \\<Rightarrow> ('node, 'edge) edge list\" is gen_inEdges"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_ssa_wf_Entry :: \"('node::linorder, 'var::linorder, 'edge, 'val::linorder) gen_ssa_cfg_wf \\<Rightarrow> 'node\" is gen_Entry"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_ssa_wf_defs :: \"('node::linorder, 'var::linorder, 'edge, 'val::linorder) gen_ssa_cfg_wf \\<Rightarrow> 'node \\<Rightarrow> 'var set\" is gen_defs"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_ssa_wf_uses :: \"('node::linorder, 'var::linorder, 'edge, 'val::linorder) gen_ssa_cfg_wf \\<Rightarrow> 'node \\<Rightarrow> 'var set\" is gen_uses"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_ssa_wf_ssa_defs :: \"('node::linorder, 'var::linorder, 'edge, 'val::linorder) gen_ssa_cfg_wf \\<Rightarrow> 'node \\<Rightarrow> 'val set\" is gen_ssa_defs"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_ssa_wf_ssa_uses :: \"('node::linorder, 'var::linorder, 'edge, 'val::linorder) gen_ssa_cfg_wf \\<Rightarrow> ('node, 'val set) mapping\" is gen_ssa_uses"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_ssa_wf_phis :: \"('node::linorder, 'var::linorder, 'edge, 'val::linorder) gen_ssa_cfg_wf \\<Rightarrow> ('node, 'val) phis_code\" is gen_phis"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_ssa_wf_var :: \"('node::linorder, 'var::linorder, 'edge, 'val::linorder) gen_ssa_cfg_wf \\<Rightarrow> 'val \\<Rightarrow> 'var\" is gen_var"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "abbreviation \"gen_ssa_wf_inEdges' g n \\<equiv> map (\\<lambda>(f,d,t). (f,d)) (gen_ssa_wf_inEdges g n)\""], ["", "lemma gen_ssa_wf_inEdges'_transfer [transfer_rule]: \"rel_fun cr_gen_ssa_cfg_wf (=) gen_inEdges' gen_ssa_wf_inEdges'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun cr_gen_ssa_cfg_wf (=) gen_inEdges' gen_ssa_wf_inEdges'", "using gen_ssa_wf_inEdges.transfer"], ["proof (prove)\nusing this:\n  rel_fun cr_gen_ssa_cfg_wf (=) gen_inEdges gen_ssa_wf_inEdges\n\ngoal (1 subgoal):\n 1. rel_fun cr_gen_ssa_cfg_wf (=) gen_inEdges' gen_ssa_wf_inEdges'", "apply (auto simp: rel_fun_def cr_gen_cfg_wf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>x y.\n                   cr_gen_ssa_cfg_wf x y \\<longrightarrow>\n                   gen_inEdges x = gen_ssa_wf_inEdges y;\n        cr_gen_ssa_cfg_wf x y\\<rbrakk>\n       \\<Longrightarrow> gen_inEdges' x = gen_ssa_wf_inEdges' y", "by (erule_tac x=x in allE) simp"], ["", "global_interpretation uninst: CFG_SSA_wf_base_code gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n gen_wf_invar gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_ssa_defs u p\n  for u and p\n  defines\n      uninst_predecessors = uninst.predecessors\n  and uninst_successors = uninst.successors\n  and uninst_phiDefs = uninst.phiDefs\n  and uninst_phiUses = uninst.phiUses\n  and uninst_allDefs = uninst.allDefs\n  and uninst_allUses = uninst.allUses\n  and uninst_allVars = uninst.allVars\n  and uninst_isTrivialPhi = uninst.isTrivialPhi\n  and uninst_trivial = uninst.trivial_code\n  and uninst_redundant = uninst.redundant_code\n  and uninst_phi = uninst.phi\n  and uninst_defNode = uninst.defNode\n  and uninst_trivial_phis = uninst.trivial_phis\n  and uninst_phidefNodes = uninst.phidefNodes\n  and uninst_useNodes_of = uninst.useNodes_of\n  and uninst_phiNodes_of = uninst.phiNodes_of"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "definition \"uninst_chooseNext u p g \\<equiv> Max (uninst_trivial_phis (const p) g)\""], ["", "lemma gen_ssa_wf_invar_trans: \"rel_fun cr_gen_ssa_cfg_wf (=) gen_wf_invar gen_wf_invar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun cr_gen_ssa_cfg_wf (=) (\\<lambda>_. True) (\\<lambda>_. True)", "by auto"], ["", "declare graph_path_base.transfer_rules[OF gen_ssa_cfg_wf.right_total gen_ssa_wf_\\<alpha>e.transfer gen_ssa_wf_\\<alpha>n.transfer gen_ssa_wf_invar_trans gen_ssa_wf_inEdges'_transfer, transfer_rule]"], ["", "declare CFG_base.defAss'_transfer[OF gen_ssa_cfg_wf.right_total gen_ssa_wf_\\<alpha>e.transfer gen_ssa_wf_\\<alpha>n.transfer gen_ssa_wf_invar_trans gen_ssa_wf_inEdges'_transfer, transfer_rule]"], ["", "declare CFG_SSA_base_code.CFG_SSA_base_code_transfer_rules[OF gen_ssa_cfg_wf.right_total gen_ssa_wf_\\<alpha>e.transfer gen_ssa_wf_\\<alpha>n.transfer gen_ssa_wf_invar_trans gen_ssa_wf_inEdges'_transfer gen_ssa_wf_Entry.transfer gen_ssa_wf_ssa_defs.transfer gen_ssa_wf_ssa_uses.transfer gen_ssa_wf_phis.transfer, transfer_rule]"], ["", "lemma path2_ign[simp]: \"graph_path_base.path2 (ign gen_\\<alpha>n g) gen_wf_invar (ign gen_inEdges' g) g' n ns m \\<longleftrightarrow> graph_path_base.path2 gen_\\<alpha>n gen_wf_invar gen_inEdges' g n ns m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_path_base.path2 (\\<lambda>_. gen_\\<alpha>n g) (\\<lambda>_. True)\n     (\\<lambda>_. gen_inEdges' g) g' n ns m =\n    graph_path_base.path2 gen_\\<alpha>n (\\<lambda>_. True) gen_inEdges' g n\n     ns m", "by (simp add: graph_path_base.path2_def graph_path_base.path_def graph_path_base.predecessors_def graph_path_base.inEdges_def)"], ["", "lemma allDefs_ign[simp]: \"CFG_SSA_base.allDefs (ign gen_ssa_defs g) (ign Mapping.lookup (gen_phis g)) ga n = CFG_SSA_base.allDefs gen_ssa_defs (\\<lambda>g. Mapping.lookup (gen_phis g)) g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_base.allDefs (\\<lambda>_. gen_ssa_defs g)\n     (\\<lambda>_. Mapping.lookup (gen_phis g)) ga n =\n    CFG_SSA_base.allDefs gen_ssa_defs\n     (\\<lambda>g. Mapping.lookup (gen_phis g)) g n", "by (simp add: CFG_SSA_base.CFG_SSA_defs)"], ["", "lemma successors_ign[simp]: \"graph_path_base.successors (ign gen_\\<alpha>n g) (ign gen_inEdges' g) ga n = graph_path_base.successors gen_\\<alpha>n gen_inEdges' g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_path_base.successors (\\<lambda>_. gen_\\<alpha>n g)\n     (\\<lambda>_. gen_inEdges' g) ga n =\n    graph_path_base.successors gen_\\<alpha>n gen_inEdges' g n", "by (simp add: graph_path_base.successors_def graph_path_base.predecessors_def graph_path_base.inEdges_def)"], ["", "lemma predecessors_ign[simp]: \"graph_path_base.predecessors (ign gen_inEdges' g) ga n = graph_path_base.predecessors gen_inEdges' g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_path_base.predecessors (\\<lambda>_. gen_inEdges' g) ga n =\n    graph_path_base.predecessors gen_inEdges' g n", "by (simp add: graph_path_base.predecessors_def graph_path_base.inEdges_def)"], ["", "lemma phiDefs_ign[simp]: \"CFG_SSA_base.phiDefs (ign Mapping.lookup (gen_phis g)) ga = CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_phis g)) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_base.phiDefs (\\<lambda>_. Mapping.lookup (gen_phis g)) ga =\n    CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_phis g)) g", "by (simp add: CFG_SSA_base.phiDefs_def [abs_def])"], ["", "lemma defAss_ign[simp]: \"CFG_SSA_base.defAss (ign gen_\\<alpha>n g) gen_wf_invar (ign gen_inEdges' g) (ign gen_Entry g) (ign gen_ssa_defs g) (ign Mapping.lookup (gen_phis g)) ga\n  = CFG_SSA_base.defAss gen_\\<alpha>n gen_wf_invar gen_inEdges' gen_Entry gen_ssa_defs (\\<lambda>g. Mapping.lookup (gen_phis g)) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_base.defAss (\\<lambda>_. gen_\\<alpha>n g) (\\<lambda>_. True)\n     (\\<lambda>_. gen_inEdges' g) (\\<lambda>_. gen_Entry g)\n     (\\<lambda>_. gen_ssa_defs g) (\\<lambda>_. Mapping.lookup (gen_phis g))\n     ga =\n    CFG_SSA_base.defAss gen_\\<alpha>n (\\<lambda>_. True) gen_inEdges'\n     gen_Entry gen_ssa_defs (\\<lambda>g. Mapping.lookup (gen_phis g)) g", "by (simp add: CFG_SSA_base.defAss_def [abs_def])"], ["", "lemma allUses_ign[simp]: \"CFG_SSA_base.allUses (ign gen_\\<alpha>n g) (ign gen_inEdges' g) (usesOf \\<circ> ign gen_ssa_uses g) (ign Mapping.lookup (gen_phis g)) ga m\n  = CFG_SSA_base.allUses gen_\\<alpha>n gen_inEdges' (usesOf \\<circ> gen_ssa_uses) (\\<lambda>g. Mapping.lookup (gen_phis g)) g m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_base.allUses (\\<lambda>_. gen_\\<alpha>n g)\n     (\\<lambda>_. gen_inEdges' g)\n     (usesOf \\<circ> (\\<lambda>_. gen_ssa_uses g))\n     (\\<lambda>_. Mapping.lookup (gen_phis g)) ga m =\n    CFG_SSA_base.allUses gen_\\<alpha>n gen_inEdges'\n     (usesOf \\<circ> gen_ssa_uses) (\\<lambda>g. Mapping.lookup (gen_phis g))\n     g m", "by (simp add: CFG_SSA_base.CFG_SSA_defs)"], ["", "lemma defAss'_ign[simp]: \"CFG_base.defAss' (ign gen_\\<alpha>n g) gen_wf_invar (ign gen_inEdges' g) (ign gen_Entry g) (ign gen_defs g) ga\n  = CFG_base.defAss' gen_\\<alpha>n gen_wf_invar gen_inEdges' gen_Entry gen_defs g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_base.defAss' (\\<lambda>_. gen_\\<alpha>n g) (\\<lambda>_. True)\n     (\\<lambda>_. gen_inEdges' g) (\\<lambda>_. gen_Entry g)\n     (\\<lambda>_. gen_defs g) ga =\n    CFG_base.defAss' gen_\\<alpha>n (\\<lambda>_. True) gen_inEdges' gen_Entry\n     gen_defs g", "by (simp add: CFG_base.defAss'_def [abs_def])"], ["", "global_interpretation gen_ssa_wf_notriv: CFG_SSA_Transformed_notriv_linorder_code gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n gen_wf_invar gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses gen_ssa_wf_ssa_defs gen_ssa_wf_ssa_uses gen_ssa_wf_phis gen_ssa_wf_var uninst_chooseNext\ndefines\n  gen_ssa_wf_notriv_substAll = gen_ssa_wf_notriv.substAll and\n  gen_ssa_wf_notriv_substAll_efficient = gen_ssa_wf_notriv.substAll_efficient"], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_Transformed_notriv_linorder_code gen_ssa_wf_\\<alpha>e\n     gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n     gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses gen_ssa_wf_ssa_defs\n     gen_ssa_wf_ssa_uses gen_ssa_wf_phis gen_ssa_wf_var uninst_chooseNext", "apply unfold_locales"], ["proof (prove)\ngoal (34 subgoals):\n 1. \\<And>g. True \\<Longrightarrow> finite (nodes (uninst.\\<alpha> g))\n 2. \\<And>g. True \\<Longrightarrow> finite (edges (uninst.\\<alpha> g))\n 3. \\<And>g.\n       True \\<Longrightarrow>\n       fst ` edges (uninst.\\<alpha> g) \\<subseteq> nodes (uninst.\\<alpha> g)\n 4. \\<And>g.\n       True \\<Longrightarrow>\n       snd ` snd ` edges (uninst.\\<alpha> g)\n       \\<subseteq> nodes (uninst.\\<alpha> g)\n 5. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_ssa_wf_\\<alpha>n g))\n        (nodes (uninst.\\<alpha> g))\n 6. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_ssa_wf_inEdges' g v))\n        (pred (uninst.\\<alpha> g) v)\n 7. \\<And>g. gen_ssa_wf_Entry g \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 8. \\<And>g.\n       True \\<Longrightarrow> uninst.inEdges g (gen_ssa_wf_Entry g) = []\n 9. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            uninst.path2 g (gen_ssa_wf_Entry g) ns n\n 10. \\<And>n g.\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n        gen_ssa_wf_ssa_defs g n \\<inter>\n        (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n =\n        {}\nA total of 34 subgoals...", "apply simp"], ["proof (prove)\ngoal (33 subgoals):\n 1. \\<And>g. True \\<Longrightarrow> finite (edges (uninst.\\<alpha> g))\n 2. \\<And>g.\n       True \\<Longrightarrow>\n       fst ` edges (uninst.\\<alpha> g) \\<subseteq> nodes (uninst.\\<alpha> g)\n 3. \\<And>g.\n       True \\<Longrightarrow>\n       snd ` snd ` edges (uninst.\\<alpha> g)\n       \\<subseteq> nodes (uninst.\\<alpha> g)\n 4. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_ssa_wf_\\<alpha>n g))\n        (nodes (uninst.\\<alpha> g))\n 5. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_ssa_wf_inEdges' g v))\n        (pred (uninst.\\<alpha> g) v)\n 6. \\<And>g. gen_ssa_wf_Entry g \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 7. \\<And>g.\n       True \\<Longrightarrow> uninst.inEdges g (gen_ssa_wf_Entry g) = []\n 8. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            uninst.path2 g (gen_ssa_wf_Entry g) ns n\n 9. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n =\n       {}\n 10. \\<And>g n. finite (gen_ssa_wf_ssa_defs g n)\nA total of 33 subgoals...", "apply (transfer, clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_wf_def CFG_def graph_Entry_def graph_path_def graph_def)"], ["proof (prove)\ngoal (32 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow>\n       fst ` edges (uninst.\\<alpha> g) \\<subseteq> nodes (uninst.\\<alpha> g)\n 2. \\<And>g.\n       True \\<Longrightarrow>\n       snd ` snd ` edges (uninst.\\<alpha> g)\n       \\<subseteq> nodes (uninst.\\<alpha> g)\n 3. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_ssa_wf_\\<alpha>n g))\n        (nodes (uninst.\\<alpha> g))\n 4. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_ssa_wf_inEdges' g v))\n        (pred (uninst.\\<alpha> g) v)\n 5. \\<And>g. gen_ssa_wf_Entry g \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 6. \\<And>g.\n       True \\<Longrightarrow> uninst.inEdges g (gen_ssa_wf_Entry g) = []\n 7. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            uninst.path2 g (gen_ssa_wf_Entry g) ns n\n 8. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n =\n       {}\n 9. \\<And>g n. finite (gen_ssa_wf_ssa_defs g n)\n 10. \\<And>v g n.\n        v \\<in> (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n \\<Longrightarrow>\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\nA total of 32 subgoals...", "apply (transfer, clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_wf_def CFG_def graph_Entry_def graph_path_def graph_def valid_graph_def)"], ["proof (prove)\ngoal (31 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow>\n       snd ` snd ` edges (uninst.\\<alpha> g)\n       \\<subseteq> nodes (uninst.\\<alpha> g)\n 2. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_ssa_wf_\\<alpha>n g))\n        (nodes (uninst.\\<alpha> g))\n 3. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_ssa_wf_inEdges' g v))\n        (pred (uninst.\\<alpha> g) v)\n 4. \\<And>g. gen_ssa_wf_Entry g \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 5. \\<And>g.\n       True \\<Longrightarrow> uninst.inEdges g (gen_ssa_wf_Entry g) = []\n 6. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            uninst.path2 g (gen_ssa_wf_Entry g) ns n\n 7. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n =\n       {}\n 8. \\<And>g n. finite (gen_ssa_wf_ssa_defs g n)\n 9. \\<And>v g n.\n       v \\<in> (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 10. \\<And>g n. finite ((usesOf \\<circ> gen_ssa_wf_ssa_uses) g n)\nA total of 31 subgoals...", "apply (transfer, clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_wf_def CFG_def graph_Entry_def graph_path_def graph_def valid_graph_def)"], ["proof (prove)\ngoal (30 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_ssa_wf_\\<alpha>n g))\n        (nodes (uninst.\\<alpha> g))\n 2. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_ssa_wf_inEdges' g v))\n        (pred (uninst.\\<alpha> g) v)\n 3. \\<And>g. gen_ssa_wf_Entry g \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 4. \\<And>g.\n       True \\<Longrightarrow> uninst.inEdges g (gen_ssa_wf_Entry g) = []\n 5. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            uninst.path2 g (gen_ssa_wf_Entry g) ns n\n 6. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n =\n       {}\n 7. \\<And>g n. finite (gen_ssa_wf_ssa_defs g n)\n 8. \\<And>v g n.\n       v \\<in> (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 9. \\<And>g n. finite ((usesOf \\<circ> gen_ssa_wf_ssa_uses) g n)\n 10. \\<And>g. True\nA total of 30 subgoals...", "apply (transfer, clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_wf_def CFG_def graph_Entry_def graph_path_def graph_nodes_it_def graph_nodes_it_axioms_def)"], ["proof (prove)\ngoal (29 subgoals):\n 1. \\<And>g v.\n       True \\<Longrightarrow>\n       set_iterator (foldri (gen_ssa_wf_inEdges' g v))\n        (pred (uninst.\\<alpha> g) v)\n 2. \\<And>g. gen_ssa_wf_Entry g \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 3. \\<And>g.\n       True \\<Longrightarrow> uninst.inEdges g (gen_ssa_wf_Entry g) = []\n 4. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            uninst.path2 g (gen_ssa_wf_Entry g) ns n\n 5. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n =\n       {}\n 6. \\<And>g n. finite (gen_ssa_wf_ssa_defs g n)\n 7. \\<And>v g n.\n       v \\<in> (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 8. \\<And>g n. finite ((usesOf \\<circ> gen_ssa_wf_ssa_uses) g n)\n 9. \\<And>g. True\n 10. \\<And>g. finite (dom (Mapping.lookup (gen_ssa_wf_phis g)))\nA total of 29 subgoals...", "apply (transfer, clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_wf_def CFG_def graph_Entry_def graph_path_def graph_pred_it_def graph_pred_it_axioms_def)"], ["proof (prove)\ngoal (28 subgoals):\n 1. \\<And>g. gen_ssa_wf_Entry g \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>g.\n       True \\<Longrightarrow> uninst.inEdges g (gen_ssa_wf_Entry g) = []\n 3. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            uninst.path2 g (gen_ssa_wf_Entry g) ns n\n 4. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n =\n       {}\n 5. \\<And>g n. finite (gen_ssa_wf_ssa_defs g n)\n 6. \\<And>v g n.\n       v \\<in> (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 7. \\<And>g n. finite ((usesOf \\<circ> gen_ssa_wf_ssa_uses) g n)\n 8. \\<And>g. True\n 9. \\<And>g. finite (dom (Mapping.lookup (gen_ssa_wf_phis g)))\n 10. \\<And>g n v vs.\n        Mapping.lookup (gen_ssa_wf_phis g) (n, v) =\n        Some vs \\<Longrightarrow>\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\nA total of 28 subgoals...", "apply (transfer, simp only: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_def CFG_wf_def CFG_def graph_Entry_def graph_Entry_axioms_def)"], ["proof (prove)\ngoal (27 subgoals):\n 1. \\<And>g.\n       True \\<Longrightarrow> uninst.inEdges g (gen_ssa_wf_Entry g) = []\n 2. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            uninst.path2 g (gen_ssa_wf_Entry g) ns n\n 3. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n =\n       {}\n 4. \\<And>g n. finite (gen_ssa_wf_ssa_defs g n)\n 5. \\<And>v g n.\n       v \\<in> (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 6. \\<And>g n. finite ((usesOf \\<circ> gen_ssa_wf_ssa_uses) g n)\n 7. \\<And>g. True\n 8. \\<And>g. finite (dom (Mapping.lookup (gen_ssa_wf_phis g)))\n 9. \\<And>g n v vs.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 10. \\<And>g n v args.\n        Mapping.lookup (gen_ssa_wf_phis g) (n, v) =\n        Some args \\<Longrightarrow>\n        length (graph_path_base.predecessors gen_ssa_wf_inEdges' g n) =\n        length args\nA total of 27 subgoals...", "apply (transfer, simp only: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_def CFG_wf_def CFG_def graph_Entry_def graph_Entry_axioms_def graph_path_base.inEdges_def)"], ["proof (prove)\ngoal (26 subgoals):\n 1. \\<And>n g.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g); True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            uninst.path2 g (gen_ssa_wf_Entry g) ns n\n 2. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n =\n       {}\n 3. \\<And>g n. finite (gen_ssa_wf_ssa_defs g n)\n 4. \\<And>v g n.\n       v \\<in> (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 5. \\<And>g n. finite ((usesOf \\<circ> gen_ssa_wf_ssa_uses) g n)\n 6. \\<And>g. True\n 7. \\<And>g. finite (dom (Mapping.lookup (gen_ssa_wf_phis g)))\n 8. \\<And>g n v vs.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 9. \\<And>g n v args.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) =\n       Some args \\<Longrightarrow>\n       length (graph_path_base.predecessors gen_ssa_wf_inEdges' g n) =\n       length args\n 10. \\<And>n g.\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n        gen_ssa_wf_ssa_defs g n \\<inter>\n        CFG_SSA_base.phiDefs\n         (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n =\n        {}\nA total of 26 subgoals...", "apply (transfer, simp only: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_def  CFG_wf_def CFG_def graph_Entry_def graph_Entry_axioms_def graph_path_base.path2_def\n                                                    graph_path_base.path_def graph_path_base.predecessors_def graph_path_base.inEdges_def)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n =\n       {}\n 2. \\<And>g n. finite (gen_ssa_wf_ssa_defs g n)\n 3. \\<And>v g n.\n       v \\<in> (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 4. \\<And>g n. finite ((usesOf \\<circ> gen_ssa_wf_ssa_uses) g n)\n 5. \\<And>g. True\n 6. \\<And>g. finite (dom (Mapping.lookup (gen_ssa_wf_phis g)))\n 7. \\<And>g n v vs.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 8. \\<And>g n v args.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) =\n       Some args \\<Longrightarrow>\n       length (graph_path_base.predecessors gen_ssa_wf_inEdges' g n) =\n       length args\n 9. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g))\n        g n =\n       {}\n 10. \\<And>n g m.\n        \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n         m \\<in> set (gen_ssa_wf_\\<alpha>n g); n \\<noteq> m\\<rbrakk>\n        \\<Longrightarrow> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                           (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g))\n                           g n \\<inter>\n                          CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                           (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g))\n                           g m =\n                          {}\nA total of 25 subgoals...", "apply (transfer, clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_def  CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<And>g n. finite (gen_ssa_wf_ssa_defs g n)\n 2. \\<And>v g n.\n       v \\<in> (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 3. \\<And>g n. finite ((usesOf \\<circ> gen_ssa_wf_ssa_uses) g n)\n 4. \\<And>g. True\n 5. \\<And>g. finite (dom (Mapping.lookup (gen_ssa_wf_phis g)))\n 6. \\<And>g n v vs.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 7. \\<And>g n v args.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) =\n       Some args \\<Longrightarrow>\n       length (graph_path_base.predecessors gen_ssa_wf_inEdges' g n) =\n       length args\n 8. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g))\n        g n =\n       {}\n 9. \\<And>n g m.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        m \\<in> set (gen_ssa_wf_\\<alpha>n g); n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          n \\<inter>\n                         CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          m =\n                         {}\n 10. \\<And>v g n.\n        \\<lbrakk>v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges'\n                          (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          n;\n         n \\<in> set (gen_ssa_wf_\\<alpha>n g)\\<rbrakk>\n        \\<Longrightarrow> uninst.defAss gen_ssa_wf_phis g n v\nA total of 24 subgoals...", "apply (transfer, simp only: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_def  CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (23 subgoals):\n 1. \\<And>v g n.\n       v \\<in> (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>g n. finite ((usesOf \\<circ> gen_ssa_wf_ssa_uses) g n)\n 3. \\<And>g. True\n 4. \\<And>g. finite (dom (Mapping.lookup (gen_ssa_wf_phis g)))\n 5. \\<And>g n v vs.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 6. \\<And>g n v args.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) =\n       Some args \\<Longrightarrow>\n       length (graph_path_base.predecessors gen_ssa_wf_inEdges' g n) =\n       length args\n 7. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g))\n        g n =\n       {}\n 8. \\<And>n g m.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        m \\<in> set (gen_ssa_wf_\\<alpha>n g); n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          n \\<inter>\n                         CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          m =\n                         {}\n 9. \\<And>v g n.\n       \\<lbrakk>v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                         gen_ssa_wf_inEdges'\n                         (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                         (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                         n;\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> uninst.defAss gen_ssa_wf_phis g n v\n 10. \\<And>g v.\n        Mapping.lookup (gen_ssa_wf_phis g) (gen_ssa_wf_Entry g, v) = None\nA total of 23 subgoals...", "apply (transfer, clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_def  CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (22 subgoals):\n 1. \\<And>g n. finite ((usesOf \\<circ> gen_ssa_wf_ssa_uses) g n)\n 2. \\<And>g. True\n 3. \\<And>g. finite (dom (Mapping.lookup (gen_ssa_wf_phis g)))\n 4. \\<And>g n v vs.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 5. \\<And>g n v args.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) =\n       Some args \\<Longrightarrow>\n       length (graph_path_base.predecessors gen_ssa_wf_inEdges' g n) =\n       length args\n 6. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g))\n        g n =\n       {}\n 7. \\<And>n g m.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        m \\<in> set (gen_ssa_wf_\\<alpha>n g); n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          n \\<inter>\n                         CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          m =\n                         {}\n 8. \\<And>v g n.\n       \\<lbrakk>v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                         gen_ssa_wf_inEdges'\n                         (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                         (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                         n;\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> uninst.defAss gen_ssa_wf_phis g n v\n 9. \\<And>g v.\n       Mapping.lookup (gen_ssa_wf_phis g) (gen_ssa_wf_Entry g, v) = None\n 10. \\<And>n g.\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n        gen_ssa_wf_defs g n \\<inter> gen_ssa_wf_uses g n = {}\nA total of 22 subgoals...", "apply (transfer, clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_def  CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<And>g. True\n 2. \\<And>g. finite (dom (Mapping.lookup (gen_ssa_wf_phis g)))\n 3. \\<And>g n v vs.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 4. \\<And>g n v args.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) =\n       Some args \\<Longrightarrow>\n       length (graph_path_base.predecessors gen_ssa_wf_inEdges' g n) =\n       length args\n 5. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g))\n        g n =\n       {}\n 6. \\<And>n g m.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        m \\<in> set (gen_ssa_wf_\\<alpha>n g); n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          n \\<inter>\n                         CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          m =\n                         {}\n 7. \\<And>v g n.\n       \\<lbrakk>v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                         gen_ssa_wf_inEdges'\n                         (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                         (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                         n;\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> uninst.defAss gen_ssa_wf_phis g n v\n 8. \\<And>g v.\n       Mapping.lookup (gen_ssa_wf_phis g) (gen_ssa_wf_Entry g, v) = None\n 9. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_defs g n \\<inter> gen_ssa_wf_uses g n = {}\n 10. \\<And>g n. finite (gen_ssa_wf_defs g n)\nA total of 21 subgoals...", "apply simp"], ["proof (prove)\ngoal (20 subgoals):\n 1. \\<And>g. finite (dom (Mapping.lookup (gen_ssa_wf_phis g)))\n 2. \\<And>g n v vs.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 3. \\<And>g n v args.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) =\n       Some args \\<Longrightarrow>\n       length (graph_path_base.predecessors gen_ssa_wf_inEdges' g n) =\n       length args\n 4. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g))\n        g n =\n       {}\n 5. \\<And>n g m.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        m \\<in> set (gen_ssa_wf_\\<alpha>n g); n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          n \\<inter>\n                         CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          m =\n                         {}\n 6. \\<And>v g n.\n       \\<lbrakk>v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                         gen_ssa_wf_inEdges'\n                         (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                         (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                         n;\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> uninst.defAss gen_ssa_wf_phis g n v\n 7. \\<And>g v.\n       Mapping.lookup (gen_ssa_wf_phis g) (gen_ssa_wf_Entry g, v) = None\n 8. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_defs g n \\<inter> gen_ssa_wf_uses g n = {}\n 9. \\<And>g n. finite (gen_ssa_wf_defs g n)\n 10. \\<And>v g n.\n        v \\<in> gen_ssa_wf_uses g n \\<Longrightarrow>\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\nA total of 20 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom (Mapping.lookup (gen_ssa_wf_phis g_)))", "by transfer (simp add: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_wf_def CFG_def CFG_axioms_def CFG_SSA_def CFG_SSA_axioms_def)"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<And>g n v vs.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>g n v args.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) =\n       Some args \\<Longrightarrow>\n       length (graph_path_base.predecessors gen_ssa_wf_inEdges' g n) =\n       length args\n 3. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g))\n        g n =\n       {}\n 4. \\<And>n g m.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        m \\<in> set (gen_ssa_wf_\\<alpha>n g); n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          n \\<inter>\n                         CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          m =\n                         {}\n 5. \\<And>v g n.\n       \\<lbrakk>v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                         gen_ssa_wf_inEdges'\n                         (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                         (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                         n;\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> uninst.defAss gen_ssa_wf_phis g n v\n 6. \\<And>g v.\n       Mapping.lookup (gen_ssa_wf_phis g) (gen_ssa_wf_Entry g, v) = None\n 7. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_defs g n \\<inter> gen_ssa_wf_uses g n = {}\n 8. \\<And>g n. finite (gen_ssa_wf_defs g n)\n 9. \\<And>v g n.\n       v \\<in> gen_ssa_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 10. \\<And>g n. finite (gen_ssa_wf_uses g n)\nA total of 19 subgoals...", "apply (transfer; force simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_def CFG_SSA_axioms_def)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>g n v args.\n       Mapping.lookup (gen_ssa_wf_phis g) (n, v) =\n       Some args \\<Longrightarrow>\n       length (graph_path_base.predecessors gen_ssa_wf_inEdges' g n) =\n       length args\n 2. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g))\n        g n =\n       {}\n 3. \\<And>n g m.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        m \\<in> set (gen_ssa_wf_\\<alpha>n g); n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          n \\<inter>\n                         CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          m =\n                         {}\n 4. \\<And>v g n.\n       \\<lbrakk>v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                         gen_ssa_wf_inEdges'\n                         (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                         (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                         n;\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> uninst.defAss gen_ssa_wf_phis g n v\n 5. \\<And>g v.\n       Mapping.lookup (gen_ssa_wf_phis g) (gen_ssa_wf_Entry g, v) = None\n 6. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_defs g n \\<inter> gen_ssa_wf_uses g n = {}\n 7. \\<And>g n. finite (gen_ssa_wf_defs g n)\n 8. \\<And>v g n.\n       v \\<in> gen_ssa_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 9. \\<And>g n. finite (gen_ssa_wf_uses g n)\n 10. \\<And>g.\n        \\<forall>m\\<in>set (gen_ssa_wf_\\<alpha>n g).\n           \\<forall>v\\<in>gen_ssa_wf_uses g m.\n              CFG_base.defAss' gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n               gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs g m v\nA total of 18 subgoals...", "apply (transfer; simp add: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_def CFG_SSA_axioms_def graph_path_base.predecessors_def graph_path_base.inEdges_def)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_ssa_defs g n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g))\n        g n =\n       {}\n 2. \\<And>n g m.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        m \\<in> set (gen_ssa_wf_\\<alpha>n g); n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          n \\<inter>\n                         CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          m =\n                         {}\n 3. \\<And>v g n.\n       \\<lbrakk>v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                         gen_ssa_wf_inEdges'\n                         (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                         (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                         n;\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> uninst.defAss gen_ssa_wf_phis g n v\n 4. \\<And>g v.\n       Mapping.lookup (gen_ssa_wf_phis g) (gen_ssa_wf_Entry g, v) = None\n 5. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_defs g n \\<inter> gen_ssa_wf_uses g n = {}\n 6. \\<And>g n. finite (gen_ssa_wf_defs g n)\n 7. \\<And>v g n.\n       v \\<in> gen_ssa_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 8. \\<And>g n. finite (gen_ssa_wf_uses g n)\n 9. \\<And>g.\n       \\<forall>m\\<in>set (gen_ssa_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_ssa_wf_uses g m.\n             CFG_base.defAss' gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs g m v\n 10. \\<And>g n.\n        gen_ssa_wf_defs g n = gen_ssa_wf_var g ` gen_ssa_wf_ssa_defs g n\nA total of 17 subgoals...", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_def CFG_SSA_axioms_def)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>n g m.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        m \\<in> set (gen_ssa_wf_\\<alpha>n g); n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          n \\<inter>\n                         CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                          (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                          m =\n                         {}\n 2. \\<And>v g n.\n       \\<lbrakk>v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                         gen_ssa_wf_inEdges'\n                         (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                         (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                         n;\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> uninst.defAss gen_ssa_wf_phis g n v\n 3. \\<And>g v.\n       Mapping.lookup (gen_ssa_wf_phis g) (gen_ssa_wf_Entry g, v) = None\n 4. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_defs g n \\<inter> gen_ssa_wf_uses g n = {}\n 5. \\<And>g n. finite (gen_ssa_wf_defs g n)\n 6. \\<And>v g n.\n       v \\<in> gen_ssa_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 7. \\<And>g n. finite (gen_ssa_wf_uses g n)\n 8. \\<And>g.\n       \\<forall>m\\<in>set (gen_ssa_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_ssa_wf_uses g m.\n             CFG_base.defAss' gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs g m v\n 9. \\<And>g n.\n       gen_ssa_wf_defs g n = gen_ssa_wf_var g ` gen_ssa_wf_ssa_defs g n\n 10. \\<And>n g.\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n        gen_ssa_wf_uses g n =\n        gen_ssa_wf_var g ` (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n\nA total of 16 subgoals...", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_def CFG_SSA_axioms_def)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>v g n.\n       \\<lbrakk>v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                         gen_ssa_wf_inEdges'\n                         (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                         (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                         n;\n        n \\<in> set (gen_ssa_wf_\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> uninst.defAss gen_ssa_wf_phis g n v\n 2. \\<And>g v.\n       Mapping.lookup (gen_ssa_wf_phis g) (gen_ssa_wf_Entry g, v) = None\n 3. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_defs g n \\<inter> gen_ssa_wf_uses g n = {}\n 4. \\<And>g n. finite (gen_ssa_wf_defs g n)\n 5. \\<And>v g n.\n       v \\<in> gen_ssa_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 6. \\<And>g n. finite (gen_ssa_wf_uses g n)\n 7. \\<And>g.\n       \\<forall>m\\<in>set (gen_ssa_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_ssa_wf_uses g m.\n             CFG_base.defAss' gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs g m v\n 8. \\<And>g n.\n       gen_ssa_wf_defs g n = gen_ssa_wf_var g ` gen_ssa_wf_ssa_defs g n\n 9. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_uses g n =\n       gen_ssa_wf_var g ` (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n\n 10. \\<And>g n ns m v x v'.\n        \\<lbrakk>uninst.path2 g n ns m; n \\<notin> set (tl ns);\n         v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n         v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                  gen_ssa_wf_inEdges' (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g m;\n         x \\<in> set (tl ns);\n         v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                   (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                   x\\<rbrakk>\n        \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\nA total of 15 subgoals...", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_wf_axioms_def CFG_SSA_base.defAss_def)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>g v.\n       Mapping.lookup (gen_ssa_wf_phis g) (gen_ssa_wf_Entry g, v) = None\n 2. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_defs g n \\<inter> gen_ssa_wf_uses g n = {}\n 3. \\<And>g n. finite (gen_ssa_wf_defs g n)\n 4. \\<And>v g n.\n       v \\<in> gen_ssa_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 5. \\<And>g n. finite (gen_ssa_wf_uses g n)\n 6. \\<And>g.\n       \\<forall>m\\<in>set (gen_ssa_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_ssa_wf_uses g m.\n             CFG_base.defAss' gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs g m v\n 7. \\<And>g n.\n       gen_ssa_wf_defs g n = gen_ssa_wf_var g ` gen_ssa_wf_ssa_defs g n\n 8. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_uses g n =\n       gen_ssa_wf_var g ` (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n\n 9. \\<And>g n ns m v x v'.\n       \\<lbrakk>uninst.path2 g n ns m; n \\<notin> set (tl ns);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                 gen_ssa_wf_inEdges' (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g m;\n        x \\<in> set (tl ns);\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                  x\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 10. \\<And>g n v vs v'.\n        \\<lbrakk>Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs;\n         v' \\<in> set vs\\<rbrakk>\n        \\<Longrightarrow> gen_ssa_wf_var g v' = gen_ssa_wf_var g v\nA total of 14 subgoals...", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_SSA_wf_axioms_def)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_defs g n \\<inter> gen_ssa_wf_uses g n = {}\n 2. \\<And>g n. finite (gen_ssa_wf_defs g n)\n 3. \\<And>v g n.\n       v \\<in> gen_ssa_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 4. \\<And>g n. finite (gen_ssa_wf_uses g n)\n 5. \\<And>g.\n       \\<forall>m\\<in>set (gen_ssa_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_ssa_wf_uses g m.\n             CFG_base.defAss' gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs g m v\n 6. \\<And>g n.\n       gen_ssa_wf_defs g n = gen_ssa_wf_var g ` gen_ssa_wf_ssa_defs g n\n 7. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_uses g n =\n       gen_ssa_wf_var g ` (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n\n 8. \\<And>g n ns m v x v'.\n       \\<lbrakk>uninst.path2 g n ns m; n \\<notin> set (tl ns);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                 gen_ssa_wf_inEdges' (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g m;\n        x \\<in> set (tl ns);\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                  x\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 9. \\<And>g n v vs v'.\n       \\<lbrakk>Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs;\n        v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' = gen_ssa_wf_var g v\n 10. \\<And>n g v v'.\n        \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n         v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n         v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                   (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n         v \\<noteq> v'\\<rbrakk>\n        \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\nA total of 13 subgoals...", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>g n. finite (gen_ssa_wf_defs g n)\n 2. \\<And>v g n.\n       v \\<in> gen_ssa_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 3. \\<And>g n. finite (gen_ssa_wf_uses g n)\n 4. \\<And>g.\n       \\<forall>m\\<in>set (gen_ssa_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_ssa_wf_uses g m.\n             CFG_base.defAss' gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs g m v\n 5. \\<And>g n.\n       gen_ssa_wf_defs g n = gen_ssa_wf_var g ` gen_ssa_wf_ssa_defs g n\n 6. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_uses g n =\n       gen_ssa_wf_var g ` (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n\n 7. \\<And>g n ns m v x v'.\n       \\<lbrakk>uninst.path2 g n ns m; n \\<notin> set (tl ns);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                 gen_ssa_wf_inEdges' (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g m;\n        x \\<in> set (tl ns);\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                  x\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 8. \\<And>g n v vs v'.\n       \\<lbrakk>Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs;\n        v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' = gen_ssa_wf_var g v\n 9. \\<And>n g v v'.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 10. \\<And>g.\n        Mapping.keys (gen_ssa_wf_ssa_uses g)\n        \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\nA total of 12 subgoals...", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>v g n.\n       v \\<in> gen_ssa_wf_uses g n \\<Longrightarrow>\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>g n. finite (gen_ssa_wf_uses g n)\n 3. \\<And>g.\n       \\<forall>m\\<in>set (gen_ssa_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_ssa_wf_uses g m.\n             CFG_base.defAss' gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs g m v\n 4. \\<And>g n.\n       gen_ssa_wf_defs g n = gen_ssa_wf_var g ` gen_ssa_wf_ssa_defs g n\n 5. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_uses g n =\n       gen_ssa_wf_var g ` (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n\n 6. \\<And>g n ns m v x v'.\n       \\<lbrakk>uninst.path2 g n ns m; n \\<notin> set (tl ns);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                 gen_ssa_wf_inEdges' (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g m;\n        x \\<in> set (tl ns);\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                  x\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 7. \\<And>g n v vs v'.\n       \\<lbrakk>Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs;\n        v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' = gen_ssa_wf_var g v\n 8. \\<And>n g v v'.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 9. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 10. \\<And>u p g.\n        \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                  gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n                  gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs\n                  gen_ssa_wf_uses gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n         CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n          gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n        \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                          \\<in> dom (p g) \\<and>\n                          CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                           gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                           (snd (uninst_chooseNext (u g)\n                                  (mapping.Mapping (p g)) g))\nA total of 11 subgoals...", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>g n. finite (gen_ssa_wf_uses g n)\n 2. \\<And>g.\n       \\<forall>m\\<in>set (gen_ssa_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_ssa_wf_uses g m.\n             CFG_base.defAss' gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs g m v\n 3. \\<And>g n.\n       gen_ssa_wf_defs g n = gen_ssa_wf_var g ` gen_ssa_wf_ssa_defs g n\n 4. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_uses g n =\n       gen_ssa_wf_var g ` (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n\n 5. \\<And>g n ns m v x v'.\n       \\<lbrakk>uninst.path2 g n ns m; n \\<notin> set (tl ns);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                 gen_ssa_wf_inEdges' (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g m;\n        x \\<in> set (tl ns);\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                  x\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 6. \\<And>g n v vs v'.\n       \\<lbrakk>Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs;\n        v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' = gen_ssa_wf_var g v\n 7. \\<And>n g v v'.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 8. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 9. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 10. \\<And>u p g.\n        \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                  gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n                  gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs\n                  gen_ssa_wf_uses gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n         CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n        \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                          Max (CFG_SSA_wf_base_code.trivial_phis p g)", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_wf_def CFG_def CFG_axioms_def)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>g.\n       \\<forall>m\\<in>set (gen_ssa_wf_\\<alpha>n g).\n          \\<forall>v\\<in>gen_ssa_wf_uses g m.\n             CFG_base.defAss' gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n              gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs g m v\n 2. \\<And>g n.\n       gen_ssa_wf_defs g n = gen_ssa_wf_var g ` gen_ssa_wf_ssa_defs g n\n 3. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_uses g n =\n       gen_ssa_wf_var g ` (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n\n 4. \\<And>g n ns m v x v'.\n       \\<lbrakk>uninst.path2 g n ns m; n \\<notin> set (tl ns);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                 gen_ssa_wf_inEdges' (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g m;\n        x \\<in> set (tl ns);\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                  x\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 5. \\<And>g n v vs v'.\n       \\<lbrakk>Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs;\n        v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' = gen_ssa_wf_var g v\n 6. \\<And>n g v v'.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 7. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 8. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 9. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_wf_def CFG_wf_def CFG_wf_axioms_def)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>g n.\n       gen_ssa_wf_defs g n = gen_ssa_wf_var g ` gen_ssa_wf_ssa_defs g n\n 2. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_uses g n =\n       gen_ssa_wf_var g ` (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n\n 3. \\<And>g n ns m v x v'.\n       \\<lbrakk>uninst.path2 g n ns m; n \\<notin> set (tl ns);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                 gen_ssa_wf_inEdges' (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g m;\n        x \\<in> set (tl ns);\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                  x\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 4. \\<And>g n v vs v'.\n       \\<lbrakk>Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs;\n        v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' = gen_ssa_wf_var g v\n 5. \\<And>n g v v'.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 6. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 7. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 8. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_Transformed_axioms_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n g.\n       n \\<in> set (gen_ssa_wf_\\<alpha>n g) \\<Longrightarrow>\n       gen_ssa_wf_uses g n =\n       gen_ssa_wf_var g ` (usesOf \\<circ> gen_ssa_wf_ssa_uses) g n\n 2. \\<And>g n ns m v x v'.\n       \\<lbrakk>uninst.path2 g n ns m; n \\<notin> set (tl ns);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                 gen_ssa_wf_inEdges' (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g m;\n        x \\<in> set (tl ns);\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                  x\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 3. \\<And>g n v vs v'.\n       \\<lbrakk>Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs;\n        v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' = gen_ssa_wf_var g v\n 4. \\<And>n g v v'.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 5. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 6. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 7. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_Transformed_axioms_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>g n ns m v x v'.\n       \\<lbrakk>uninst.path2 g n ns m; n \\<notin> set (tl ns);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<in> CFG_SSA_base.allUses gen_ssa_wf_\\<alpha>n\n                 gen_ssa_wf_inEdges' (usesOf \\<circ> gen_ssa_wf_ssa_uses)\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g m;\n        x \\<in> set (tl ns);\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g\n                  x\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 2. \\<And>g n v vs v'.\n       \\<lbrakk>Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs;\n        v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' = gen_ssa_wf_var g v\n 3. \\<And>n g v v'.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 4. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 5. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 6. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_Transformed_axioms_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>g n v vs v'.\n       \\<lbrakk>Mapping.lookup (gen_ssa_wf_phis g) (n, v) = Some vs;\n        v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' = gen_ssa_wf_var g v\n 2. \\<And>n g v v'.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 3. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 4. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 5. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_Transformed_axioms_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n g v v'.\n       \\<lbrakk>n \\<in> set (gen_ssa_wf_\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                 (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v' \\<in> CFG_SSA_base.allDefs gen_ssa_wf_ssa_defs\n                  (\\<lambda>g. Mapping.lookup (gen_ssa_wf_phis g)) g n;\n        v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> gen_ssa_wf_var g v' \\<noteq> gen_ssa_wf_var g v\n 2. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 3. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 4. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "apply (transfer; clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_def CFG_SSA_Transformed_axioms_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 3. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "proof-"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 3. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "fix u p g"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 3. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "assume \"CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n gen_wf_invar gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses gen_ssa_wf_ssa_defs (u::('a, 'b, 'c, 'd) gen_ssa_cfg_wf \\<Rightarrow> 'a \\<Rightarrow> 'd set) p gen_ssa_wf_var\""], ["proof (state)\nthis:\n  CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n\n   (\\<lambda>_. True) gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs\n   gen_ssa_wf_uses gen_ssa_wf_ssa_defs u p gen_ssa_wf_var\n\ngoal (3 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 3. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "then"], ["proof (chain)\npicking this:\n  CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n\n   (\\<lambda>_. True) gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs\n   gen_ssa_wf_uses gen_ssa_wf_ssa_defs u p gen_ssa_wf_var", "interpret i: CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n gen_wf_invar gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses gen_ssa_wf_ssa_defs u p gen_ssa_wf_var"], ["proof (prove)\nusing this:\n  CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n\n   (\\<lambda>_. True) gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs\n   gen_ssa_wf_uses gen_ssa_wf_ssa_defs u p gen_ssa_wf_var\n\ngoal (1 subgoal):\n 1. CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n\n     (\\<lambda>_. True) gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs\n     gen_ssa_wf_uses gen_ssa_wf_ssa_defs u p gen_ssa_wf_var", "."], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 3. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "obtain u' where [simp]: \"usesOf \\<circ> u' = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u'.\n        usesOf \\<circ> u' = u \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (erule_tac x=\"\\<lambda>g. Mapping.Mapping (\\<lambda>n. if u g n = {} then None else Some (u g n))\" in meta_allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (usesOf \\<circ>\n     (\\<lambda>g.\n         mapping.Mapping\n          (\\<lambda>n. if u g n = {} then None else Some (u g n))) =\n     u \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "by (erule meta_impE) (auto 4 4 simp: o_def usesOf_def [abs_def] split: option.splits if_splits)"], ["proof (state)\nthis:\n  usesOf \\<circ> u' = u\n\ngoal (3 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 3. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "interpret code: CFG_SSA_wf_code gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n gen_wf_invar gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_ssa_defs u' \"\\<lambda>g. Mapping.Mapping (p g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_wf_code gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n\n     (\\<lambda>_. True) gen_ssa_wf_inEdges' gen_ssa_wf_Entry\n     gen_ssa_wf_ssa_defs u' (\\<lambda>g. mapping.Mapping (p g))", "unfolding CFG_SSA_wf_code_def CFG_SSA_code_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_ext gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n     gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_ssa_defs\n     (usesOf \\<circ> u')\n     (\\<lambda>g. Mapping.lookup (mapping.Mapping (p g))) \\<and>\n    CFG_SSA_wf gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n     gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_ssa_defs\n     (usesOf \\<circ> u')\n     (\\<lambda>g. Mapping.lookup (mapping.Mapping (p g)))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_ext gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n     gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_ssa_defs u p \\<and>\n    CFG_SSA_wf gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n     gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_ssa_defs u p", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. CFG_SSA_ext gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n     gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_ssa_defs u p\n 2. CFG_SSA_wf gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n (\\<lambda>_. True)\n     gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_ssa_defs u p", "by unfold_locales"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 3. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "have aux: \"uninst_trivial_phis (const (Mapping.Mapping (p g))) g = uninst_trivial_phis (\\<lambda>g. (Mapping.Mapping (p g))) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uninst_trivial_phis (\\<lambda>_. mapping.Mapping (p g)) g =\n    uninst_trivial_phis (\\<lambda>g. mapping.Mapping (p g)) g", "by (simp add: uninst.trivial_phis_def[abs_def])"], ["proof (state)\nthis:\n  uninst_trivial_phis (\\<lambda>_. mapping.Mapping (p g)) g =\n  uninst_trivial_phis (\\<lambda>g. mapping.Mapping (p g)) g\n\ngoal (3 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 3. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "assume red: \"i.redundant g\""], ["proof (state)\nthis:\n  i.redundant g\n\ngoal (3 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 3. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "let ?cN = \"uninst_chooseNext (u g) (Mapping.Mapping (p g)) g\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base.redundant gen_ssa_wf_\\<alpha>n gen_ssa_wf_inEdges'\n         gen_ssa_wf_ssa_defs u p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (u g) (mapping.Mapping (p g)) g\n                         \\<in> dom (p g) \\<and>\n                         CFG_SSA_wf_base.trivial gen_ssa_wf_\\<alpha>n\n                          gen_ssa_wf_inEdges' gen_ssa_wf_ssa_defs u p g\n                          (snd (uninst_chooseNext (u g)\n                                 (mapping.Mapping (p g)) g))\n 3. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "show \"?cN \\<in> dom (p g) \\<and> i.trivial g (snd ?cN)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uninst_chooseNext (u g) (mapping.Mapping (p g)) g \\<in> dom (p g) \\<and>\n    i.trivial g (snd (uninst_chooseNext (u g) (mapping.Mapping (p g)) g))", "unfolding uninst_chooseNext_def aux"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (uninst_trivial_phis (\\<lambda>g. mapping.Mapping (p g)) g)\n    \\<in> dom (p g) \\<and>\n    i.trivial g\n     (snd (Max (uninst_trivial_phis (\\<lambda>g. mapping.Mapping (p g)) g)))", "unfolding uninst_trivial_phis_def code.trivial_phis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max {(n, v).\n         Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq> None \\<and>\n         uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v}\n    \\<in> dom (p g) \\<and>\n    i.trivial g\n     (snd (Max {(n, v).\n                Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq>\n                None \\<and>\n                uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v}))", "apply (rule CollectD[where a=\"Max _\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max {(n, v).\n         Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq> None \\<and>\n         uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v}\n    \\<in> {x \\<in> dom (p g). i.trivial g (snd x)}", "apply (rule subsetD[OF _ Max_in])"], ["proof (prove)\ngoal (3 subgoals):\n 1. {(n, v).\n     Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq> None \\<and>\n     uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v}\n    \\<subseteq> {x \\<in> dom (p g). i.trivial g (snd x)}\n 2. finite\n     {(n, v).\n      Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq> None \\<and>\n      uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v}\n 3. {(n, v).\n     Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq> None \\<and>\n     uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v} \\<noteq>\n    {}", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite\n     {(n, v).\n      Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq> None \\<and>\n      uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v}\n 2. {(n, v).\n     Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq> None \\<and>\n     uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v} \\<noteq>\n    {}", "apply (rule finite_subset[OF _ i.phis_finite])"], ["proof (prove)\ngoal (2 subgoals):\n 1. {(n, v).\n     Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq> None \\<and>\n     uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v}\n    \\<subseteq> dom (p ?g30)\n 2. {(n, v).\n     Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq> None \\<and>\n     uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v} \\<noteq>\n    {}", "using red"], ["proof (prove)\nusing this:\n  i.redundant g\n\ngoal (2 subgoals):\n 1. {(n, v).\n     Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq> None \\<and>\n     uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v}\n    \\<subseteq> dom (p ?g30)\n 2. {(n, v).\n     Mapping.lookup (mapping.Mapping (p g)) (n, v) \\<noteq> None \\<and>\n     uninst.trivial u' (\\<lambda>g. mapping.Mapping (p g)) g v} \\<noteq>\n    {}", "apply (auto simp: i.redundant_def[abs_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> i.allVars g; i.trivial g x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>y. p g (a, b) = Some y) \\<and>\n                            i.trivial g b", "apply (frule code.trivial_phi[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> i.allVars g; i.trivial g x;\n        \\<exists>y. i.phi g x = Some y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>y. p g (a, b) = Some y) \\<and>\n                            i.trivial g b", "apply (auto simp: i.phi_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  uninst_chooseNext (u g) (mapping.Mapping (p g)) g \\<in> dom (p g) \\<and>\n  i.trivial g (snd (uninst_chooseNext (u g) (mapping.Mapping (p g)) g))\n\ngoal (2 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "fix g"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>g.\n       Mapping.keys (gen_ssa_wf_ssa_uses g)\n       \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n 2. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "show \"Mapping.keys (gen_ssa_wf_ssa_uses (g::('a, 'b, 'c, 'd) gen_ssa_cfg_wf)) \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mapping.keys (gen_ssa_wf_ssa_uses g)\n    \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)", "by transfer (clarsimp simp: CFG_SSA_Transformed_code_def CFG_SSA_Transformed_code_axioms_def)"], ["proof (state)\nthis:\n  Mapping.keys (gen_ssa_wf_ssa_uses g)\n  \\<subseteq> set (gen_ssa_wf_\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. \\<And>u p g.\n       \\<lbrakk>CFG_SSA_Transformed_code gen_ssa_wf_\\<alpha>e\n                 gen_ssa_wf_\\<alpha>n (\\<lambda>_. True) gen_ssa_wf_inEdges'\n                 gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses\n                 gen_ssa_wf_ssa_defs u p gen_ssa_wf_var;\n        CFG_SSA_wf_base_code.redundant_code p g\\<rbrakk>\n       \\<Longrightarrow> uninst_chooseNext (usesOf (u g)) (p g) g =\n                         Max (CFG_SSA_wf_base_code.trivial_phis p g)", "qed (auto simp: uninst_chooseNext_def uninst_trivial_phis_def CFG_SSA_wf_base_code.trivial_phis_def)"], ["", "global_interpretation uninst_code: CFG_SSA_Transformed_notriv_base_code gen_ssa_wf_\\<alpha>e gen_ssa_wf_\\<alpha>n gen_wf_invar gen_ssa_wf_inEdges' gen_ssa_wf_Entry gen_ssa_wf_defs gen_ssa_wf_uses gen_ssa_wf_ssa_defs u p gen_ssa_wf_var uninst_chooseNext\nfor u and p\ndefines\n  uninst_code_step_code = uninst_code.step_codem and\n  uninst_code_phis' = uninst_code.phis'_codem and\n  uninst_code_uses' = uninst_code.uses'_codem and\n  uninst_code_substNext = uninst_code.substNext_code and\n  uninst_code_substitution = uninst_code.substitution_code and\n  uninst_code_triv_phis' = uninst_code.triv_phis' and\n  uninst_code_nodes_of_uses' = uninst_code.nodes_of_uses' and\n  uninst_code_nodes_of_phis' = uninst_code.nodes_of_phis'"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition gen_cfg_wf_extend :: \"('a::linorder, 'b::linorder, 'c) gen_cfg_wf \\<Rightarrow> 'd \\<Rightarrow> ('a, 'b, 'c, 'd) gen_cfg_scheme\"\n  is gen_cfg.extend"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma gen_\\<alpha>e_wf_extend [simp]:\n  \"gen_\\<alpha>e (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_\\<alpha>e gen_cfg_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_\\<alpha>e\n     (gen_cfg_wf_extend gen_cfg_wf\n       \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p,\n          gen_var = v\\<rparr>) =\n    gen_wf_\\<alpha>e gen_cfg_wf", "by (simp add: gen_cfg_wf_extend_def gen_cfg.defs gen_wf_\\<alpha>e_def)"], ["", "lemma gen_\\<alpha>n_wf_extend [simp]:\n  \"gen_\\<alpha>n (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_\\<alpha>n gen_cfg_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_\\<alpha>n\n     (gen_cfg_wf_extend gen_cfg_wf\n       \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p,\n          gen_var = v\\<rparr>) =\n    gen_wf_\\<alpha>n gen_cfg_wf", "by (simp add: gen_cfg_wf_extend_def gen_cfg.defs gen_wf_\\<alpha>n_def)"], ["", "lemma gen_inEdges_wf_extend [simp]:\n  \"gen_inEdges (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_inEdges gen_cfg_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_inEdges\n     (gen_cfg_wf_extend gen_cfg_wf\n       \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p,\n          gen_var = v\\<rparr>) =\n    gen_wf_inEdges gen_cfg_wf", "by (simp add: gen_cfg_wf_extend_def gen_cfg.defs gen_wf_inEdges_def)"], ["", "lemma gen_Entry_wf_extend [simp]:\n  \"gen_Entry (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_Entry gen_cfg_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_Entry\n     (gen_cfg_wf_extend gen_cfg_wf\n       \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p,\n          gen_var = v\\<rparr>) =\n    gen_wf_Entry gen_cfg_wf", "by (simp add: gen_cfg_wf_extend_def gen_cfg.defs gen_wf_Entry_def)"], ["", "lemma gen_defs_wf_extend [simp]:\n  \"gen_defs (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_defs gen_cfg_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_defs\n     (gen_cfg_wf_extend gen_cfg_wf\n       \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p,\n          gen_var = v\\<rparr>) =\n    gen_wf_defs gen_cfg_wf", "by (simp add: gen_cfg_wf_extend_def gen_cfg.defs gen_wf_defs_def)"], ["", "lemma gen_uses_wf_extend [simp]:\n  \"gen_uses (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = gen_wf_uses gen_cfg_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_uses\n     (gen_cfg_wf_extend gen_cfg_wf\n       \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p,\n          gen_var = v\\<rparr>) =\n    gen_wf_uses gen_cfg_wf", "by (simp add: gen_cfg_wf_extend_def gen_cfg.defs gen_wf_uses_def)"], ["", "lemma gen_ssa_defs_wf_extend [simp]:\n  \"gen_ssa_defs (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_ssa_defs\n     (gen_cfg_wf_extend gen_cfg_wf\n       \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p,\n          gen_var = v\\<rparr>) =\n    d", "by (simp add: gen_cfg_wf_extend_def gen_cfg.defs)"], ["", "lemma gen_ssa_uses_wf_extend [simp]:\n  \"gen_ssa_uses (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_ssa_uses\n     (gen_cfg_wf_extend gen_cfg_wf\n       \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p,\n          gen_var = v\\<rparr>) =\n    u", "by (simp add: gen_cfg_wf_extend_def gen_cfg.defs)"], ["", "lemma gen_phis_wf_extend [simp]:\n  \"gen_phis (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_phis\n     (gen_cfg_wf_extend gen_cfg_wf\n       \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p,\n          gen_var = v\\<rparr>) =\n    p", "by (simp add: gen_cfg_wf_extend_def gen_cfg.defs)"], ["", "lemma gen_var_wf_extend [simp]:\n  \"gen_var (gen_cfg_wf_extend gen_cfg_wf \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p, gen_var = v\\<rparr>)\n  = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_var\n     (gen_cfg_wf_extend gen_cfg_wf\n       \\<lparr>gen_ssa_defs = d, gen_ssa_uses = u, gen_phis = p,\n          gen_var = v\\<rparr>) =\n    v", "by (simp add: gen_cfg_wf_extend_def gen_cfg.defs)"], ["", "lemma CFG_SSA_Transformed_codeI:\n  assumes \"CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g)) (\\<lambda>g. Mapping.lookup (phis g)) var\"\n  and \"\\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\"\n  shows \"CFG_SSA_Transformed_code \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs oldUses defs uses phis var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_Transformed_code \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs\n     oldUses defs uses phis var", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. CFG_SSA_Transformed_code \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs\n     oldUses defs uses phis var", "interpret CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs oldUses \"defs\" \"\\<lambda>g. lookup_multimap (uses g)\" \"\\<lambda>g. Mapping.lookup (phis g)\" var"], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs\n     oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n     (\\<lambda>g. Mapping.lookup (phis g)) var", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. CFG_SSA_Transformed_code \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs\n     oldUses defs uses phis var", "have [simp]: \"usesOf = lookup_multimap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. usesOf = lookup_multimap", "by (intro ext) (clarsimp simp: lookup_multimap_def)"], ["proof (state)\nthis:\n  usesOf = lookup_multimap\n\ngoal (1 subgoal):\n 1. CFG_SSA_Transformed_code \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs\n     oldUses defs uses phis var", "from assms"], ["proof (chain)\npicking this:\n  CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs\n   oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n   (\\<lambda>g. Mapping.lookup (phis g)) var\n  Mapping.keys (uses ?g) \\<subseteq> set (\\<alpha>n ?g)", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs\n   oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n   (\\<lambda>g. Mapping.lookup (phis g)) var\n  Mapping.keys (uses ?g) \\<subseteq> set (\\<alpha>n ?g)\n\ngoal (1 subgoal):\n 1. CFG_SSA_Transformed_code \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs\n     oldUses defs uses phis var", "apply unfold_locales"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defs g n \\<inter> (usesOf \\<circ> uses) g n = {}\n 2. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite (defs g n)\n 3. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> (usesOf \\<circ> uses) g n\\<rbrakk>\n       \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\n 4. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite ((usesOf \\<circ> uses) g n)\n 5. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> invar g\n 6. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite (dom (Mapping.lookup (phis g)))\n 7. \\<And>g n v vs.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs\\<rbrakk>\n       \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\n 8. \\<And>g n v args.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some args\\<rbrakk>\n       \\<Longrightarrow> length (old.predecessors g n) = length args\n 9. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defs g n \\<inter> phiDefs g n = {}\n 10. \\<And>n g m.\n        \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                  oldDefs oldUses defs\n                  (\\<lambda>g. lookup_multimap (uses g))\n                  (\\<lambda>g. Mapping.lookup (phis g)) var;\n         \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n         n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n         n \\<noteq> m\\<rbrakk>\n        \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\nA total of 18 subgoals...", "apply (auto intro!: defs_uses_disjoint)[1]"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite (defs g n)\n 2. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> (usesOf \\<circ> uses) g n\\<rbrakk>\n       \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\n 3. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite ((usesOf \\<circ> uses) g n)\n 4. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> invar g\n 5. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite (dom (Mapping.lookup (phis g)))\n 6. \\<And>g n v vs.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs\\<rbrakk>\n       \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\n 7. \\<And>g n v args.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some args\\<rbrakk>\n       \\<Longrightarrow> length (old.predecessors g n) = length args\n 8. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defs g n \\<inter> phiDefs g n = {}\n 9. \\<And>n g m.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n        n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\n 10. \\<And>v g n.\n        \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                  oldDefs oldUses defs\n                  (\\<lambda>g. lookup_multimap (uses g))\n                  (\\<lambda>g. Mapping.lookup (phis g)) var;\n         \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n         v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges\n                  (usesOf \\<circ> uses)\n                  (\\<lambda>g. Mapping.lookup (phis g)) g n;\n         n \\<in> set (\\<alpha>n g)\\<rbrakk>\n        \\<Longrightarrow> defAss g n v\nA total of 17 subgoals...", "apply (rule defs_finite)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> (usesOf \\<circ> uses) g n\\<rbrakk>\n       \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\n 2. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite ((usesOf \\<circ> uses) g n)\n 3. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> invar g\n 4. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite (dom (Mapping.lookup (phis g)))\n 5. \\<And>g n v vs.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs\\<rbrakk>\n       \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\n 6. \\<And>g n v args.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some args\\<rbrakk>\n       \\<Longrightarrow> length (old.predecessors g n) = length args\n 7. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defs g n \\<inter> phiDefs g n = {}\n 8. \\<And>n g m.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n        n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\n 9. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g n;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defAss g n v\n 10. \\<And>g v.\n        \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                  oldDefs oldUses defs\n                  (\\<lambda>g. lookup_multimap (uses g))\n                  (\\<lambda>g. Mapping.lookup (phis g)) var;\n         \\<And>g.\n            Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n        \\<Longrightarrow> Mapping.lookup (phis g) (Entry g, v) = None\nA total of 16 subgoals...", "apply (rule uses_in_\\<alpha>n)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> (usesOf \\<circ> uses) g n\\<rbrakk>\n       \\<Longrightarrow> ?v30 v g n \\<in> lookup_multimap (uses g) n\n 2. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite ((usesOf \\<circ> uses) g n)\n 3. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> invar g\n 4. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite (dom (Mapping.lookup (phis g)))\n 5. \\<And>g n v vs.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs\\<rbrakk>\n       \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\n 6. \\<And>g n v args.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some args\\<rbrakk>\n       \\<Longrightarrow> length (old.predecessors g n) = length args\n 7. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defs g n \\<inter> phiDefs g n = {}\n 8. \\<And>n g m.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n        n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\n 9. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g n;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defAss g n v\n 10. \\<And>g v.\n        \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                  oldDefs oldUses defs\n                  (\\<lambda>g. lookup_multimap (uses g))\n                  (\\<lambda>g. Mapping.lookup (phis g)) var;\n         \\<And>g.\n            Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n        \\<Longrightarrow> Mapping.lookup (phis g) (Entry g, v) = None\nA total of 16 subgoals...", "apply simp"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite ((usesOf \\<circ> uses) g n)\n 2. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> invar g\n 3. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite (dom (Mapping.lookup (phis g)))\n 4. \\<And>g n v vs.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs\\<rbrakk>\n       \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\n 5. \\<And>g n v args.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some args\\<rbrakk>\n       \\<Longrightarrow> length (old.predecessors g n) = length args\n 6. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defs g n \\<inter> phiDefs g n = {}\n 7. \\<And>n g m.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n        n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\n 8. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g n;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defAss g n v\n 9. \\<And>g v.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup (phis g) (Entry g, v) = None\n 10. \\<And>g n.\n        \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                  oldDefs oldUses defs\n                  (\\<lambda>g. lookup_multimap (uses g))\n                  (\\<lambda>g. Mapping.lookup (phis g)) var;\n         \\<And>g.\n            Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n        \\<Longrightarrow> oldDefs g n = var g ` defs g n\nA total of 15 subgoals...", "apply (clarsimp split: option.splits)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> invar g\n 2. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite (dom (Mapping.lookup (phis g)))\n 3. \\<And>g n v vs.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs\\<rbrakk>\n       \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\n 4. \\<And>g n v args.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some args\\<rbrakk>\n       \\<Longrightarrow> length (old.predecessors g n) = length args\n 5. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defs g n \\<inter> phiDefs g n = {}\n 6. \\<And>n g m.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n        n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\n 7. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g n;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defAss g n v\n 8. \\<And>g v.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup (phis g) (Entry g, v) = None\n 9. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldDefs g n = var g ` defs g n\n 10. \\<And>n g.\n        \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                  oldDefs oldUses defs\n                  (\\<lambda>g. lookup_multimap (uses g))\n                  (\\<lambda>g. Mapping.lookup (phis g)) var;\n         \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n         n \\<in> set (\\<alpha>n g)\\<rbrakk>\n        \\<Longrightarrow> oldUses g n = var g ` (usesOf \\<circ> uses) g n\nA total of 14 subgoals...", "apply (rule invar)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> finite (dom (Mapping.lookup (phis g)))\n 2. \\<And>g n v vs.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs\\<rbrakk>\n       \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\n 3. \\<And>g n v args.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some args\\<rbrakk>\n       \\<Longrightarrow> length (old.predecessors g n) = length args\n 4. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defs g n \\<inter> phiDefs g n = {}\n 5. \\<And>n g m.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n        n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\n 6. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g n;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defAss g n v\n 7. \\<And>g v.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup (phis g) (Entry g, v) = None\n 8. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldDefs g n = var g ` defs g n\n 9. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldUses g n = var g ` (usesOf \\<circ> uses) g n\n 10. \\<And>g n ns m v x v'.\n        \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                  oldDefs oldUses defs\n                  (\\<lambda>g. lookup_multimap (uses g))\n                  (\\<lambda>g. Mapping.lookup (phis g)) var;\n         \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n         old.path2 g n ns m; n \\<notin> set (tl ns); v \\<in> allDefs g n;\n         v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges\n                  (usesOf \\<circ> uses)\n                  (\\<lambda>g. Mapping.lookup (phis g)) g m;\n         x \\<in> set (tl ns); v' \\<in> allDefs g x\\<rbrakk>\n        \\<Longrightarrow> var g v' \\<noteq> var g v\nA total of 13 subgoals...", "apply (rule phis_finite)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>g n v vs.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs\\<rbrakk>\n       \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\n 2. \\<And>g n v args.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some args\\<rbrakk>\n       \\<Longrightarrow> length (old.predecessors g n) = length args\n 3. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defs g n \\<inter> phiDefs g n = {}\n 4. \\<And>n g m.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n        n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\n 5. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g n;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defAss g n v\n 6. \\<And>g v.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup (phis g) (Entry g, v) = None\n 7. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldDefs g n = var g ` defs g n\n 8. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldUses g n = var g ` (usesOf \\<circ> uses) g n\n 9. \\<And>g n ns m v x v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        old.path2 g n ns m; n \\<notin> set (tl ns); v \\<in> allDefs g n;\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g m;\n        x \\<in> set (tl ns); v' \\<in> allDefs g x\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 10. \\<And>g n v vs v'.\n        \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                  oldDefs oldUses defs\n                  (\\<lambda>g. lookup_multimap (uses g))\n                  (\\<lambda>g. Mapping.lookup (phis g)) var;\n         \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n         Mapping.lookup (phis g) (n, v) = Some vs; v' \\<in> set vs\\<rbrakk>\n        \\<Longrightarrow> var g v' = var g v\nA total of 12 subgoals...", "apply (rule phis_in_\\<alpha>n; simp)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>g n v args.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some args\\<rbrakk>\n       \\<Longrightarrow> length (old.predecessors g n) = length args\n 2. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defs g n \\<inter> phiDefs g n = {}\n 3. \\<And>n g m.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n        n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\n 4. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g n;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defAss g n v\n 5. \\<And>g v.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup (phis g) (Entry g, v) = None\n 6. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldDefs g n = var g ` defs g n\n 7. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldUses g n = var g ` (usesOf \\<circ> uses) g n\n 8. \\<And>g n ns m v x v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        old.path2 g n ns m; n \\<notin> set (tl ns); v \\<in> allDefs g n;\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g m;\n        x \\<in> set (tl ns); v' \\<in> allDefs g x\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 9. \\<And>g n v vs v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs; v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> var g v' = var g v\n 10. \\<And>n g v v'.\n        \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                  oldDefs oldUses defs\n                  (\\<lambda>g. lookup_multimap (uses g))\n                  (\\<lambda>g. Mapping.lookup (phis g)) var;\n         \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n         n \\<in> set (\\<alpha>n g); v \\<in> allDefs g n;\n         v' \\<in> allDefs g n; v \\<noteq> v'\\<rbrakk>\n        \\<Longrightarrow> var g v' \\<noteq> var g v\nA total of 11 subgoals...", "apply (rule phis_wf; simp)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defs g n \\<inter> phiDefs g n = {}\n 2. \\<And>n g m.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n        n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\n 3. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g n;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defAss g n v\n 4. \\<And>g v.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup (phis g) (Entry g, v) = None\n 5. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldDefs g n = var g ` defs g n\n 6. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldUses g n = var g ` (usesOf \\<circ> uses) g n\n 7. \\<And>g n ns m v x v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        old.path2 g n ns m; n \\<notin> set (tl ns); v \\<in> allDefs g n;\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g m;\n        x \\<in> set (tl ns); v' \\<in> allDefs g x\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 8. \\<And>g n v vs v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs; v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> var g v' = var g v\n 9. \\<And>n g v v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); v \\<in> allDefs g n;\n        v' \\<in> allDefs g n; v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 10. \\<And>g.\n        \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                  oldDefs oldUses defs\n                  (\\<lambda>g. lookup_multimap (uses g))\n                  (\\<lambda>g. Mapping.lookup (phis g)) var;\n         \\<And>g.\n            Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n        \\<Longrightarrow> Mapping.keys (uses g)\n                          \\<subseteq> set (\\<alpha>n g)", "apply (rule simpleDefs_phiDefs_disjoint; simp)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>n g m.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n        n \\<noteq> m\\<rbrakk>\n       \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\n 2. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g n;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defAss g n v\n 3. \\<And>g v.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup (phis g) (Entry g, v) = None\n 4. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldDefs g n = var g ` defs g n\n 5. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldUses g n = var g ` (usesOf \\<circ> uses) g n\n 6. \\<And>g n ns m v x v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        old.path2 g n ns m; n \\<notin> set (tl ns); v \\<in> allDefs g n;\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g m;\n        x \\<in> set (tl ns); v' \\<in> allDefs g x\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 7. \\<And>g n v vs v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs; v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> var g v' = var g v\n 8. \\<And>n g v v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); v \\<in> allDefs g n;\n        v' \\<in> allDefs g n; v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 9. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)", "apply (rule allDefs_disjoint; simp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>v g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g n;\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> defAss g n v\n 2. \\<And>g v.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup (phis g) (Entry g, v) = None\n 3. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldDefs g n = var g ` defs g n\n 4. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldUses g n = var g ` (usesOf \\<circ> uses) g n\n 5. \\<And>g n ns m v x v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        old.path2 g n ns m; n \\<notin> set (tl ns); v \\<in> allDefs g n;\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g m;\n        x \\<in> set (tl ns); v' \\<in> allDefs g x\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 6. \\<And>g n v vs v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs; v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> var g v' = var g v\n 7. \\<And>n g v v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); v \\<in> allDefs g n;\n        v' \\<in> allDefs g n; v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 8. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)", "apply (rule allUses_def_ass; simp add: comp_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>g v.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup (phis g) (Entry g, v) = None\n 2. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldDefs g n = var g ` defs g n\n 3. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldUses g n = var g ` (usesOf \\<circ> uses) g n\n 4. \\<And>g n ns m v x v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        old.path2 g n ns m; n \\<notin> set (tl ns); v \\<in> allDefs g n;\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g m;\n        x \\<in> set (tl ns); v' \\<in> allDefs g x\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 5. \\<And>g n v vs v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs; v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> var g v' = var g v\n 6. \\<And>n g v v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); v \\<in> allDefs g n;\n        v' \\<in> allDefs g n; v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 7. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)", "apply (rule Entry_no_phis)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>g n.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldDefs g n = var g ` defs g n\n 2. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldUses g n = var g ` (usesOf \\<circ> uses) g n\n 3. \\<And>g n ns m v x v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        old.path2 g n ns m; n \\<notin> set (tl ns); v \\<in> allDefs g n;\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g m;\n        x \\<in> set (tl ns); v' \\<in> allDefs g x\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 4. \\<And>g n v vs v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs; v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> var g v' = var g v\n 5. \\<And>n g v v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); v \\<in> allDefs g n;\n        v' \\<in> allDefs g n; v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 6. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)", "apply (rule oldDefs_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> oldUses g n = var g ` (usesOf \\<circ> uses) g n\n 2. \\<And>g n ns m v x v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        old.path2 g n ns m; n \\<notin> set (tl ns); v \\<in> allDefs g n;\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g m;\n        x \\<in> set (tl ns); v' \\<in> allDefs g x\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 3. \\<And>g n v vs v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs; v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> var g v' = var g v\n 4. \\<And>n g v v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); v \\<in> allDefs g n;\n        v' \\<in> allDefs g n; v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 5. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)", "apply (auto intro!: oldUses_def)[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>g n ns m v x v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        old.path2 g n ns m; n \\<notin> set (tl ns); v \\<in> allDefs g n;\n        v \\<in> CFG_SSA_base.allUses \\<alpha>n inEdges (usesOf \\<circ> uses)\n                 (\\<lambda>g. Mapping.lookup (phis g)) g m;\n        x \\<in> set (tl ns); v' \\<in> allDefs g x\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 2. \\<And>g n v vs v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs; v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> var g v' = var g v\n 3. \\<And>n g v v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); v \\<in> allDefs g n;\n        v' \\<in> allDefs g n; v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 4. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)", "apply (rule conventional; simp add: comp_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>g n v vs v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        Mapping.lookup (phis g) (n, v) = Some vs; v' \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> var g v' = var g v\n 2. \\<And>n g v v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); v \\<in> allDefs g n;\n        v' \\<in> allDefs g n; v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 3. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)", "apply (rule phis_same_var; simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n g v v'.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g. Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g);\n        n \\<in> set (\\<alpha>n g); v \\<in> allDefs g n;\n        v' \\<in> allDefs g n; v \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> var g v' \\<noteq> var g v\n 2. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)", "apply (rule allDefs_var_disjoint; simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges Entry\n                 oldDefs oldUses defs (\\<lambda>g. lookup_multimap (uses g))\n                 (\\<lambda>g. Mapping.lookup (phis g)) var;\n        \\<And>g.\n           Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)\\<rbrakk>\n       \\<Longrightarrow> Mapping.keys (uses g) \\<subseteq> set (\\<alpha>n g)", "by auto"], ["proof (state)\nthis:\n  CFG_SSA_Transformed_code \\<alpha>e \\<alpha>n invar inEdges Entry oldDefs\n   oldUses defs uses phis var\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma CFG_SSA_Transformed_ign:\n  \"CFG_SSA_Transformed (ign gen_wf_\\<alpha>e gen_cfg_wf) (ign gen_wf_\\<alpha>n gen_cfg_wf) gen_wf_invar\n        (const (gen_wf_inEdges' gen_cfg_wf)) (ign gen_wf_Entry gen_cfg_wf) (ign gen_wf_defs gen_cfg_wf)\n        (ign gen_wf_uses gen_cfg_wf) (ign gen_wf_defs' gen_cfg_wf) (ign gen_wf.uses' gen_cfg_wf)\n        (ign gen_wf.phis' gen_cfg_wf)\n        (ign gen_wf_var gen_cfg_wf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_Transformed (\\<lambda>_. gen_wf_\\<alpha>e gen_cfg_wf)\n     (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf) (\\<lambda>_. True)\n     (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n     (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n     (\\<lambda>_. gen_wf_defs gen_cfg_wf)\n     (\\<lambda>_. gen_wf_uses gen_cfg_wf)\n     (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n     (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n     (\\<lambda>_. gen_wf.phis' gen_cfg_wf)\n     (\\<lambda>_. gen_wf_var gen_cfg_wf)", "unfolding CFG_SSA_Transformed_def CFG_wf_def CFG_def CFG_wf_axioms_def\n  graph_Entry_def graph_path_def graph_Entry_axioms_def\n  CFG_axioms_def CFG_SSA_wf_def CFG_SSA_def CFG_SSA_axioms_def\n  CFG_SSA_wf_axioms_def CFG_SSA_Transformed_axioms_def\n  graph_def graph_nodes_it_def graph_pred_it_def\n  graph_nodes_it_axioms_def graph_pred_it_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((((((\\<forall>g.\n             True \\<longrightarrow>\n             finite (nodes (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n         (\\<forall>g.\n             True \\<longrightarrow>\n             finite (edges (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n         (\\<forall>g.\n             True \\<longrightarrow>\n             valid_graph (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n        (((\\<forall>g.\n              True \\<longrightarrow>\n              finite (nodes (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n          (\\<forall>g.\n              True \\<longrightarrow>\n              finite (edges (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n          (\\<forall>g.\n              True \\<longrightarrow>\n              valid_graph (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n         (\\<forall>g.\n             True \\<longrightarrow>\n             set_iterator (foldri (gen_wf_\\<alpha>n gen_cfg_wf))\n              (nodes (gen_wf.\\<alpha> gen_cfg_wf)))) \\<and>\n        ((\\<forall>g.\n             True \\<longrightarrow>\n             finite (nodes (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n         (\\<forall>g.\n             True \\<longrightarrow>\n             finite (edges (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n         (\\<forall>g.\n             True \\<longrightarrow>\n             valid_graph (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n        (\\<forall>g v.\n            True \\<longrightarrow>\n            set_iterator (foldri (gen_wf_inEdges' gen_cfg_wf v))\n             (pred (gen_wf.\\<alpha> gen_cfg_wf) v))) \\<and>\n       (\\<forall>g.\n           gen_wf_Entry gen_cfg_wf\n           \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)) \\<and>\n       (\\<forall>g.\n           True \\<longrightarrow>\n           graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n            g (gen_wf_Entry gen_cfg_wf) =\n           []) \\<and>\n       (\\<forall>n g.\n           n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           True \\<longrightarrow>\n           (\\<exists>ns.\n               graph_path_base.path2\n                (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf) (\\<lambda>_. True)\n                (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) g\n                (gen_wf_Entry gen_cfg_wf) ns n))) \\<and>\n      ((\\<forall>n g.\n           n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           gen_wf_defs gen_cfg_wf n \\<inter> gen_wf_uses gen_cfg_wf n =\n           {}) \\<and>\n       (\\<forall>g n. finite (gen_wf_defs gen_cfg_wf n))) \\<and>\n      (\\<forall>v g n.\n          v \\<in> gen_wf_uses gen_cfg_wf n \\<longrightarrow>\n          n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)) \\<and>\n      (\\<forall>g n. finite (gen_wf_uses gen_cfg_wf n)) \\<and>\n      (\\<forall>g. True)) \\<and>\n     (\\<forall>g.\n         \\<forall>m\\<in>set (gen_wf_\\<alpha>n gen_cfg_wf).\n            \\<forall>v\\<in>gen_wf_uses gen_cfg_wf m.\n               CFG_base.defAss' (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n                (\\<lambda>_. gen_wf_defs gen_cfg_wf) g m v)) \\<and>\n    (((((((\\<forall>g.\n              True \\<longrightarrow>\n              finite (nodes (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n          (\\<forall>g.\n              True \\<longrightarrow>\n              finite (edges (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n          (\\<forall>g.\n              True \\<longrightarrow>\n              valid_graph (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n         (((\\<forall>g.\n               True \\<longrightarrow>\n               finite (nodes (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n           (\\<forall>g.\n               True \\<longrightarrow>\n               finite (edges (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n           (\\<forall>g.\n               True \\<longrightarrow>\n               valid_graph (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n          (\\<forall>g.\n              True \\<longrightarrow>\n              set_iterator (foldri (gen_wf_\\<alpha>n gen_cfg_wf))\n               (nodes (gen_wf.\\<alpha> gen_cfg_wf)))) \\<and>\n         ((\\<forall>g.\n              True \\<longrightarrow>\n              finite (nodes (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n          (\\<forall>g.\n              True \\<longrightarrow>\n              finite (edges (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n          (\\<forall>g.\n              True \\<longrightarrow>\n              valid_graph (gen_wf.\\<alpha> gen_cfg_wf))) \\<and>\n         (\\<forall>g v.\n             True \\<longrightarrow>\n             set_iterator (foldri (gen_wf_inEdges' gen_cfg_wf v))\n              (pred (gen_wf.\\<alpha> gen_cfg_wf) v))) \\<and>\n        (\\<forall>g.\n            gen_wf_Entry gen_cfg_wf\n            \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)) \\<and>\n        (\\<forall>g.\n            True \\<longrightarrow>\n            graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n             g (gen_wf_Entry gen_cfg_wf) =\n            []) \\<and>\n        (\\<forall>n g.\n            n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n            True \\<longrightarrow>\n            (\\<exists>ns.\n                graph_path_base.path2\n                 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                 (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                 g (gen_wf_Entry gen_cfg_wf) ns n))) \\<and>\n       ((\\<forall>n g.\n            n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n            gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n =\n            {}) \\<and>\n        (\\<forall>g n. finite (gen_wf_defs' gen_cfg_wf n))) \\<and>\n       (\\<forall>v g n.\n           v \\<in> gen_wf.uses' gen_cfg_wf n \\<longrightarrow>\n           n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)) \\<and>\n       (\\<forall>g n. finite (gen_wf.uses' gen_cfg_wf n)) \\<and>\n       (\\<forall>g. True)) \\<and>\n      ((\\<forall>g. finite (dom (gen_wf.phis' gen_cfg_wf))) \\<and>\n       (\\<forall>g n v vs.\n           gen_wf.phis' gen_cfg_wf (n, v) = Some vs \\<longrightarrow>\n           n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf))) \\<and>\n      (\\<forall>g n v args.\n          gen_wf.phis' gen_cfg_wf (n, v) = Some args \\<longrightarrow>\n          length\n           (graph_path_base.predecessors\n             (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) g n) =\n          length args) \\<and>\n      (\\<forall>n g.\n          n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n          gen_wf_defs' gen_cfg_wf n \\<inter>\n          CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) g n =\n          {}) \\<and>\n      (\\<forall>n g m.\n          n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n          m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n          n \\<noteq> m \\<longrightarrow>\n          CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n           (\\<lambda>_. gen_wf.phis' gen_cfg_wf) g n \\<inter>\n          CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n           (\\<lambda>_. gen_wf.phis' gen_cfg_wf) g m =\n          {})) \\<and>\n     (\\<forall>v g n.\n         v \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) g\n                  n \\<longrightarrow>\n         n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n         CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n          (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n          (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) g n v) \\<and>\n     (\\<forall>g v.\n         gen_wf.phis' gen_cfg_wf (gen_wf_Entry gen_cfg_wf, v) =\n         None)) \\<and>\n    ((\\<forall>g n.\n         gen_wf_defs gen_cfg_wf n =\n         gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n) \\<and>\n     (\\<forall>n g.\n         n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n         gen_wf_uses gen_cfg_wf n =\n         gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n)) \\<and>\n    (\\<forall>g n ns m v x v'.\n        graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n         (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) g n ns\n         m \\<longrightarrow>\n        n \\<notin> set (tl ns) \\<longrightarrow>\n        v \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                 (\\<lambda>_. gen_wf.phis' gen_cfg_wf) g n \\<longrightarrow>\n        v \\<in> CFG_SSA_base.allUses\n                 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                 (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                 (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                 (\\<lambda>_. gen_wf.phis' gen_cfg_wf) g m \\<longrightarrow>\n        x \\<in> set (tl ns) \\<longrightarrow>\n        v' \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) g\n                  x \\<longrightarrow>\n        gen_wf_var gen_cfg_wf v' \\<noteq> gen_wf_var gen_cfg_wf v) \\<and>\n    (\\<forall>g n v vs v'.\n        gen_wf.phis' gen_cfg_wf (n, v) = Some vs \\<longrightarrow>\n        v' \\<in> set vs \\<longrightarrow>\n        gen_wf_var gen_cfg_wf v' = gen_wf_var gen_cfg_wf v) \\<and>\n    (\\<forall>n g v v'.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        v \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                 (\\<lambda>_. gen_wf.phis' gen_cfg_wf) g n \\<longrightarrow>\n        v' \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) g\n                  n \\<longrightarrow>\n        v \\<noteq> v' \\<longrightarrow>\n        gen_wf_var gen_cfg_wf v' \\<noteq> gen_wf_var gen_cfg_wf v)", "apply (clarsimp simp: gen_wf.Entry_unreachable gen_wf.defs_uses_disjoint [where g=gen_cfg_wf]\n  gen_wf.uses_in_\\<alpha>n\n  gen_wf.braun_ssa.uses_in_\\<alpha>n gen_wf.phis'_finite\n  gen_wf.\\<alpha>n_distinct\n  gen_wf.valid gen_wf.finite [simplified]\n  gen_wf.ni.nodes_list_it_correct [simplified]\n  gen_wf.pi.pred_list_it_correct [simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    [] \\<and>\n    (\\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        (\\<exists>ns.\n            graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n             (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n             (gen_wf_Entry gen_cfg_wf) ns n)) \\<and>\n    (\\<forall>m\\<in>set (gen_wf_\\<alpha>n gen_cfg_wf).\n        \\<forall>x\\<in>gen_wf_uses gen_cfg_wf m.\n           CFG_base.defAss' (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n            (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n            (\\<lambda>_. gen_wf_defs gen_cfg_wf) () m x) \\<and>\n    graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    [] \\<and>\n    (\\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        (\\<exists>ns.\n            graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n             (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n             (gen_wf_Entry gen_cfg_wf) ns n)) \\<and>\n    (\\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n =\n        {}) \\<and>\n    (\\<forall>n.\n        (\\<exists>a aa b vs.\n            gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n            Some vs) \\<longrightarrow>\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)) \\<and>\n    (\\<forall>n a aa b args.\n        gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n        length\n         (graph_path_base.predecessors\n           (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n        length args) \\<and>\n    (\\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        gen_wf_defs' gen_cfg_wf n \\<inter>\n        CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n        {}) \\<and>\n    (\\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        (\\<forall>m.\n            m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n            n \\<noteq> m \\<longrightarrow>\n            CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n             (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n            CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n             (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n            {})) \\<and>\n    (\\<forall>a aa b n.\n        (a, aa, b)\n        \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n               (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n               (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n               (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n         (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n         (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n         (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n         (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)) \\<and>\n    (\\<forall>n.\n        gen_wf_defs gen_cfg_wf n =\n        gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n) \\<and>\n    (\\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        gen_wf_uses gen_cfg_wf n =\n        gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n) \\<and>\n    (\\<forall>n ns m.\n        graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n         (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n         m \\<longrightarrow>\n        n \\<notin> set (tl ns) \\<longrightarrow>\n        (\\<forall>a aa b.\n            (a, aa, b)\n            \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                   (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                   n \\<longrightarrow>\n            (a, aa, b)\n            \\<in> CFG_SSA_base.allUses\n                   (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                   (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                   (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                   (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                   m \\<longrightarrow>\n            (\\<forall>x.\n                x \\<in> set (tl ns) \\<longrightarrow>\n                (\\<forall>ab ac ba.\n                    (ab, ac, ba)\n                    \\<in> CFG_SSA_base.allDefs\n                           (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                           (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                           x \\<longrightarrow>\n                    gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                    gen_wf_var gen_cfg_wf (a, aa, b))))) \\<and>\n    (\\<forall>n a aa b vs.\n        gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n        (\\<forall>ab ac ba.\n            (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n            gen_wf_var gen_cfg_wf (ab, ac, ba) =\n            gen_wf_var gen_cfg_wf (a, aa, b))) \\<and>\n    (\\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        (\\<forall>a aa b.\n            (a, aa, b)\n            \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                   (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                   n \\<longrightarrow>\n            (\\<forall>ab ac ba.\n                (ab, ac, ba)\n                \\<in> CFG_SSA_base.allDefs\n                       (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                       (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                       n \\<longrightarrow>\n                (a = ab \\<longrightarrow>\n                 aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n                gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                gen_wf_var gen_cfg_wf (a, aa, b))))", "apply (intro conjI)"], ["proof (prove)\ngoal (16 subgoals):\n 1. graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    []\n 2. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 3. \\<forall>m\\<in>set (gen_wf_\\<alpha>n gen_cfg_wf).\n       \\<forall>x\\<in>gen_wf_uses gen_cfg_wf m.\n          CFG_base.defAss' (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n           (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n           (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n           (\\<lambda>_. gen_wf_defs gen_cfg_wf) () m x\n 4. graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    []\n 5. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 6. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n = {}\n 7. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 8. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 9. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 10. \\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        (\\<forall>m.\n            m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n            n \\<noteq> m \\<longrightarrow>\n            CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n             (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n            CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n             (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n            {})\nA total of 16 subgoals...", "using gen_wf.Entry_unreachable [of gen_cfg_wf]"], ["proof (prove)\nusing this:\n  True \\<Longrightarrow>\n  gen_wf.inEdges gen_cfg_wf (gen_wf_Entry gen_cfg_wf) = []\n\ngoal (16 subgoals):\n 1. graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    []\n 2. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 3. \\<forall>m\\<in>set (gen_wf_\\<alpha>n gen_cfg_wf).\n       \\<forall>x\\<in>gen_wf_uses gen_cfg_wf m.\n          CFG_base.defAss' (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n           (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n           (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n           (\\<lambda>_. gen_wf_defs gen_cfg_wf) () m x\n 4. graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    []\n 5. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 6. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n = {}\n 7. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 8. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 9. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 10. \\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        (\\<forall>m.\n            m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n            n \\<noteq> m \\<longrightarrow>\n            CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n             (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n            CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n             (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n            {})\nA total of 16 subgoals...", "apply (auto simp: graph_path_base.inEdges_def)[1]"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 2. \\<forall>m\\<in>set (gen_wf_\\<alpha>n gen_cfg_wf).\n       \\<forall>x\\<in>gen_wf_uses gen_cfg_wf m.\n          CFG_base.defAss' (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n           (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n           (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n           (\\<lambda>_. gen_wf_defs gen_cfg_wf) () m x\n 3. graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    []\n 4. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 5. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n = {}\n 6. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 7. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 8. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 9. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 10. \\<forall>a aa b n.\n        (a, aa, b)\n        \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n               (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n               (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n               (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n         (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n         (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n         (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n         (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\nA total of 15 subgoals...", "using gen_wf.Entry_reaches"], ["proof (prove)\nusing this:\n  \\<lbrakk>?n \\<in> set (gen_wf_\\<alpha>n ?g); True\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ns. gen_wf.path2 ?g (gen_wf_Entry ?g) ns ?n\n\ngoal (15 subgoals):\n 1. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 2. \\<forall>m\\<in>set (gen_wf_\\<alpha>n gen_cfg_wf).\n       \\<forall>x\\<in>gen_wf_uses gen_cfg_wf m.\n          CFG_base.defAss' (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n           (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n           (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n           (\\<lambda>_. gen_wf_defs gen_cfg_wf) () m x\n 3. graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    []\n 4. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 5. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n = {}\n 6. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 7. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 8. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 9. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 10. \\<forall>a aa b n.\n        (a, aa, b)\n        \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n               (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n               (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n               (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n         (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n         (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n         (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n         (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\nA total of 15 subgoals...", "apply (fastforce cong del: imp_cong simp: graph_path_base.path2_def graph_path_base.path_def graph_path_base.predecessors_def graph_path_base.inEdges_def)[1]"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<forall>m\\<in>set (gen_wf_\\<alpha>n gen_cfg_wf).\n       \\<forall>x\\<in>gen_wf_uses gen_cfg_wf m.\n          CFG_base.defAss' (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n           (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n           (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n           (\\<lambda>_. gen_wf_defs gen_cfg_wf) () m x\n 2. graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    []\n 3. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 4. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n = {}\n 5. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 6. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 7. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 8. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 9. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 10. \\<forall>n.\n        gen_wf_defs gen_cfg_wf n =\n        gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\nA total of 14 subgoals...", "using gen_wf.def_ass_uses [of gen_cfg_wf]"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>set (gen_wf_\\<alpha>n gen_cfg_wf).\n     \\<forall>v\\<in>gen_wf_uses gen_cfg_wf m. gen_wf.defAss' gen_cfg_wf m v\n\ngoal (14 subgoals):\n 1. \\<forall>m\\<in>set (gen_wf_\\<alpha>n gen_cfg_wf).\n       \\<forall>x\\<in>gen_wf_uses gen_cfg_wf m.\n          CFG_base.defAss' (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n           (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n           (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n           (\\<lambda>_. gen_wf_defs gen_cfg_wf) () m x\n 2. graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    []\n 3. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 4. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n = {}\n 5. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 6. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 7. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 8. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 9. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 10. \\<forall>n.\n        gen_wf_defs gen_cfg_wf n =\n        gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\nA total of 14 subgoals...", "apply (auto simp: CFG_base.defAss'_def graph_path_base.path2_def graph_path_base.path_def graph_path_base.predecessors_def graph_path_base.inEdges_def)[1]"], ["proof (prove)\ngoal (13 subgoals):\n 1. graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    []\n 2. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 3. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n = {}\n 4. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 5. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 6. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 7. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 8. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 9. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 10. \\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        gen_wf_uses gen_cfg_wf n =\n        gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\nA total of 13 subgoals...", "using gen_wf.Entry_unreachable [of gen_cfg_wf]"], ["proof (prove)\nusing this:\n  True \\<Longrightarrow>\n  gen_wf.inEdges gen_cfg_wf (gen_wf_Entry gen_cfg_wf) = []\n\ngoal (13 subgoals):\n 1. graph_path_base.inEdges (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n     (gen_wf_Entry gen_cfg_wf) =\n    []\n 2. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 3. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n = {}\n 4. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 5. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 6. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 7. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 8. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 9. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 10. \\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        gen_wf_uses gen_cfg_wf n =\n        gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\nA total of 13 subgoals...", "apply (auto simp: graph_path_base.inEdges_def)[1]"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 2. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n = {}\n 3. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 4. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 5. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 6. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 7. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 8. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 9. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 10. \\<forall>n ns m.\n        graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n         (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n         m \\<longrightarrow>\n        n \\<notin> set (tl ns) \\<longrightarrow>\n        (\\<forall>a aa b.\n            (a, aa, b)\n            \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                   (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                   n \\<longrightarrow>\n            (a, aa, b)\n            \\<in> CFG_SSA_base.allUses\n                   (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                   (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                   (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                   (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                   m \\<longrightarrow>\n            (\\<forall>x.\n                x \\<in> set (tl ns) \\<longrightarrow>\n                (\\<forall>ab ac ba.\n                    (ab, ac, ba)\n                    \\<in> CFG_SSA_base.allDefs\n                           (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                           (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                           x \\<longrightarrow>\n                    gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                    gen_wf_var gen_cfg_wf (a, aa, b))))\nA total of 12 subgoals...", "using gen_wf.Entry_reaches"], ["proof (prove)\nusing this:\n  \\<lbrakk>?n \\<in> set (gen_wf_\\<alpha>n ?g); True\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ns. gen_wf.path2 ?g (gen_wf_Entry ?g) ns ?n\n\ngoal (12 subgoals):\n 1. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<exists>ns.\n           graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n            (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) ()\n            (gen_wf_Entry gen_cfg_wf) ns n)\n 2. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n = {}\n 3. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 4. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 5. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 6. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 7. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 8. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 9. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 10. \\<forall>n ns m.\n        graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n         (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n         m \\<longrightarrow>\n        n \\<notin> set (tl ns) \\<longrightarrow>\n        (\\<forall>a aa b.\n            (a, aa, b)\n            \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                   (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                   n \\<longrightarrow>\n            (a, aa, b)\n            \\<in> CFG_SSA_base.allUses\n                   (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                   (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                   (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                   (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                   m \\<longrightarrow>\n            (\\<forall>x.\n                x \\<in> set (tl ns) \\<longrightarrow>\n                (\\<forall>ab ac ba.\n                    (ab, ac, ba)\n                    \\<in> CFG_SSA_base.allDefs\n                           (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                           (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                           x \\<longrightarrow>\n                    gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                    gen_wf_var gen_cfg_wf (a, aa, b))))\nA total of 12 subgoals...", "apply (fastforce cong del: imp_cong simp: graph_path_base.path2_def graph_path_base.path_def graph_path_base.predecessors_def gen_wf.defs_uses_disjoint graph_path_base.inEdges_def)[1]"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter> gen_wf.uses' gen_cfg_wf n = {}\n 2. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 3. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 4. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 5. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 6. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 7. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 8. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 9. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 10. \\<forall>n a aa b vs.\n        gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n        (\\<forall>ab ac ba.\n            (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n            gen_wf_var gen_cfg_wf (ab, ac, ba) =\n            gen_wf_var gen_cfg_wf (a, aa, b))\nA total of 11 subgoals...", "apply (auto dest: gen_wf.defs'_uses'_disjoint [where g=gen_cfg_wf])[1]"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<forall>n.\n       (\\<exists>a aa b vs.\n           gen_wf.phis' gen_cfg_wf (n, a, aa, b) =\n           Some vs) \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\n 2. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 3. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 4. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 5. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 6. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 7. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 8. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 9. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 10. \\<forall>n.\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n        (\\<forall>a aa b.\n            (a, aa, b)\n            \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                   (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                   n \\<longrightarrow>\n            (\\<forall>ab ac ba.\n                (ab, ac, ba)\n                \\<in> CFG_SSA_base.allDefs\n                       (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                       (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                       n \\<longrightarrow>\n                (a = ab \\<longrightarrow>\n                 aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n                gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                gen_wf_var gen_cfg_wf (a, aa, b)))", "apply (auto dest: gen_wf.braun_ssa.phis_in_\\<alpha>n)[1]"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<forall>n a aa b args.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some args \\<longrightarrow>\n       length\n        (graph_path_base.predecessors\n          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n) =\n       length args\n 2. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 3. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 4. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 5. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 6. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 7. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 8. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 9. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "apply (auto dest: gen_wf.phis'_wf simp: graph_path_base.predecessors_def gen_wf_predecessors_def graph_path_base.inEdges_def)[1]"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_defs' gen_cfg_wf n \\<inter>\n       CFG_SSA_base.phiDefs (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n =\n       {}\n 2. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 3. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 4. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 5. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 6. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 7. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 8. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "apply (fastforce dest: gen_wf.braun_ssa.simpleDefs_phiDefs_disjoint simp: CFG_SSA_base.phiDefs_def dom_def)[1]"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 2. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 3. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 4. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 5. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 6. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 7. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "using gen_wf.braun_ssa.allDefs_disjoint[where g=gen_cfg_wf]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf);\n   ?m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf); ?n \\<noteq> ?m\\<rbrakk>\n  \\<Longrightarrow> gen_wf.braun_ssa.allDefs gen_cfg_wf ?n \\<inter>\n                    gen_wf.braun_ssa.allDefs gen_cfg_wf ?m =\n                    {}\n\ngoal (7 subgoals):\n 1. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n           n \\<noteq> m \\<longrightarrow>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<inter>\n           CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n            (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () m =\n           {})\n 2. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 3. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 4. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 5. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 6. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 7. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "apply (clarsimp simp: CFG_SSA_base.CFG_SSA_defs)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<forall>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<longrightarrow>\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       CFG_SSA_base.defAss (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n (a, aa, b)\n 2. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 3. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 4. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 5. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 6. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "apply clarsimp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a aa b n.\n       \\<lbrakk>(a, aa, b)\n                \\<in> CFG_SSA_base.allUses\n                       (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                       (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                       (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                       (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n;\n        n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf)\\<rbrakk>\n       \\<Longrightarrow> CFG_SSA_base.defAss\n                          (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                          (\\<lambda>_. True)\n                          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n\n                          (a, aa, b)\n 2. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 3. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 4. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 5. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 6. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "apply (drule gen_wf.braun_ssa.allUses_def_ass [where g=gen_cfg_wf, rotated 1])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>a aa b n.\n       (a, aa, b)\n       \\<in> CFG_SSA_base.allUses (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n              (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n              (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n \\<Longrightarrow>\n       ?v158 a aa b n \\<in> gen_wf.braun_ssa.allUses gen_cfg_wf n\n 2. \\<And>a aa b n.\n       \\<lbrakk>(a, aa, b)\n                \\<in> CFG_SSA_base.allUses\n                       (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                       (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                       (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                       (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n;\n        gen_wf.braun_ssa.defAss gen_cfg_wf n (?v158 a aa b n)\\<rbrakk>\n       \\<Longrightarrow> CFG_SSA_base.defAss\n                          (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                          (\\<lambda>_. True)\n                          (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) () n\n                          (a, aa, b)\n 3. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 4. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 5. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 6. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 7. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "apply (auto simp: CFG_SSA_wf_base.CFG_SSA_wf_defs CFG_SSA_wf_base.defAssUses_def\n        graph_path_base.path2_def graph_path_base.path_def graph_path_base.predecessors_def\n        graph_path_base.successors_def graph_path_base.inEdges_def)[2]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<forall>n.\n       gen_wf_defs gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf_defs' gen_cfg_wf n\n 2. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 3. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 4. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 5. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "apply (clarsimp simp: gen_wf.oldDefs_correct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       gen_wf_uses gen_cfg_wf n =\n       gen_wf_var gen_cfg_wf ` gen_wf.uses' gen_cfg_wf n\n 2. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 3. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 4. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "apply (clarsimp simp: gen_wf.oldUses_correct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>n ns m.\n       graph_path_base.path2 (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n        (\\<lambda>_. True) (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf) () n ns\n        m \\<longrightarrow>\n       n \\<notin> set (tl ns) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allUses\n                  (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf)\n                  (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.uses' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  m \\<longrightarrow>\n           (\\<forall>x.\n               x \\<in> set (tl ns) \\<longrightarrow>\n               (\\<forall>ab ac ba.\n                   (ab, ac, ba)\n                   \\<in> CFG_SSA_base.allDefs\n                          (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                          (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                          x \\<longrightarrow>\n                   gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n                   gen_wf_var gen_cfg_wf (a, aa, b))))\n 2. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 3. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "apply (intro allI impI gen_wf.conventional; auto simp: graph_path_base.path2_def graph_path_base.path_def graph_path_base.predecessors_def graph_path_base.successors_def CFG_SSA_base.CFG_SSA_defs graph_path_base.inEdges_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>n a aa b vs.\n       gen_wf.phis' gen_cfg_wf (n, a, aa, b) = Some vs \\<longrightarrow>\n       (\\<forall>ab ac ba.\n           (ab, ac, ba) \\<in> set vs \\<longrightarrow>\n           gen_wf_var gen_cfg_wf (ab, ac, ba) =\n           gen_wf_var gen_cfg_wf (a, aa, b))\n 2. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "apply (intro allI impI gen_wf.phis'_fst; assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       n \\<in> set (gen_wf_\\<alpha>n gen_cfg_wf) \\<longrightarrow>\n       (\\<forall>a aa b.\n           (a, aa, b)\n           \\<in> CFG_SSA_base.allDefs (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                  (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                  n \\<longrightarrow>\n           (\\<forall>ab ac ba.\n               (ab, ac, ba)\n               \\<in> CFG_SSA_base.allDefs\n                      (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n                      (\\<lambda>_. gen_wf.phis' gen_cfg_wf) ()\n                      n \\<longrightarrow>\n               (a = ab \\<longrightarrow>\n                aa = ac \\<longrightarrow> b \\<noteq> ba) \\<longrightarrow>\n               gen_wf_var gen_cfg_wf (ab, ac, ba) \\<noteq>\n               gen_wf_var gen_cfg_wf (a, aa, b)))", "by (intro allI impI gen_wf.allDefs_var_disjoint; auto simp: CFG_SSA_base.CFG_SSA_defs)"], ["", "lift_definition gen_ssa_cfg_wf :: \"('node::linorder, 'var::linorder, 'edge) gen_cfg_wf \\<Rightarrow> ('node, 'var, 'edge , ('node,'var) ssaVal) gen_ssa_cfg_wf\"\n  is \"\\<lambda>g. let (uses,phis) = gen_wf_uses'_phis' g in (gen_cfg_wf_extend g)\\<lparr>\n    gen_ssa_defs = gen_wf_defs' g,\n    gen_ssa_uses = uses,\n    gen_phis = phis,\n    gen_var = gen_wf_var g\n  \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gen_cfg_wf.\n       CFG_SSA_Transformed_code\n        (\\<lambda>_.\n            gen_\\<alpha>e\n             (let (uses, phis) = gen_wf_uses'_phis' gen_cfg_wf\n              in gen_cfg_wf_extend gen_cfg_wf\n                  \\<lparr>gen_ssa_defs = gen_wf_defs' gen_cfg_wf,\n                     gen_ssa_uses = uses, gen_phis = phis,\n                     gen_var = gen_wf_var gen_cfg_wf\\<rparr>))\n        (\\<lambda>_.\n            gen_\\<alpha>n\n             (let (uses, phis) = gen_wf_uses'_phis' gen_cfg_wf\n              in gen_cfg_wf_extend gen_cfg_wf\n                  \\<lparr>gen_ssa_defs = gen_wf_defs' gen_cfg_wf,\n                     gen_ssa_uses = uses, gen_phis = phis,\n                     gen_var = gen_wf_var gen_cfg_wf\\<rparr>))\n        (\\<lambda>_. True)\n        (\\<lambda>_.\n            gen_inEdges'\n             (let (uses, phis) = gen_wf_uses'_phis' gen_cfg_wf\n              in gen_cfg_wf_extend gen_cfg_wf\n                  \\<lparr>gen_ssa_defs = gen_wf_defs' gen_cfg_wf,\n                     gen_ssa_uses = uses, gen_phis = phis,\n                     gen_var = gen_wf_var gen_cfg_wf\\<rparr>))\n        (\\<lambda>_.\n            gen_Entry\n             (let (uses, phis) = gen_wf_uses'_phis' gen_cfg_wf\n              in gen_cfg_wf_extend gen_cfg_wf\n                  \\<lparr>gen_ssa_defs = gen_wf_defs' gen_cfg_wf,\n                     gen_ssa_uses = uses, gen_phis = phis,\n                     gen_var = gen_wf_var gen_cfg_wf\\<rparr>))\n        (\\<lambda>_.\n            gen_defs\n             (let (uses, phis) = gen_wf_uses'_phis' gen_cfg_wf\n              in gen_cfg_wf_extend gen_cfg_wf\n                  \\<lparr>gen_ssa_defs = gen_wf_defs' gen_cfg_wf,\n                     gen_ssa_uses = uses, gen_phis = phis,\n                     gen_var = gen_wf_var gen_cfg_wf\\<rparr>))\n        (\\<lambda>_.\n            gen_uses\n             (let (uses, phis) = gen_wf_uses'_phis' gen_cfg_wf\n              in gen_cfg_wf_extend gen_cfg_wf\n                  \\<lparr>gen_ssa_defs = gen_wf_defs' gen_cfg_wf,\n                     gen_ssa_uses = uses, gen_phis = phis,\n                     gen_var = gen_wf_var gen_cfg_wf\\<rparr>))\n        (\\<lambda>_.\n            gen_ssa_defs\n             (let (uses, phis) = gen_wf_uses'_phis' gen_cfg_wf\n              in gen_cfg_wf_extend gen_cfg_wf\n                  \\<lparr>gen_ssa_defs = gen_wf_defs' gen_cfg_wf,\n                     gen_ssa_uses = uses, gen_phis = phis,\n                     gen_var = gen_wf_var gen_cfg_wf\\<rparr>))\n        (\\<lambda>_.\n            gen_ssa_uses\n             (let (uses, phis) = gen_wf_uses'_phis' gen_cfg_wf\n              in gen_cfg_wf_extend gen_cfg_wf\n                  \\<lparr>gen_ssa_defs = gen_wf_defs' gen_cfg_wf,\n                     gen_ssa_uses = uses, gen_phis = phis,\n                     gen_var = gen_wf_var gen_cfg_wf\\<rparr>))\n        (\\<lambda>_.\n            gen_phis\n             (let (uses, phis) = gen_wf_uses'_phis' gen_cfg_wf\n              in gen_cfg_wf_extend gen_cfg_wf\n                  \\<lparr>gen_ssa_defs = gen_wf_defs' gen_cfg_wf,\n                     gen_ssa_uses = uses, gen_phis = phis,\n                     gen_var = gen_wf_var gen_cfg_wf\\<rparr>))\n        (\\<lambda>_.\n            gen_var\n             (let (uses, phis) = gen_wf_uses'_phis' gen_cfg_wf\n              in gen_cfg_wf_extend gen_cfg_wf\n                  \\<lparr>gen_ssa_defs = gen_wf_defs' gen_cfg_wf,\n                     gen_ssa_uses = uses, gen_phis = phis,\n                     gen_var = gen_wf_var gen_cfg_wf\\<rparr>))", "apply (simp add: Let_def gen_wf_uses'_phis'_def split_beta)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gen_cfg_wf.\n       CFG_SSA_Transformed_code (\\<lambda>_. gen_wf_\\<alpha>e gen_cfg_wf)\n        (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf) (\\<lambda>_. True)\n        (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs gen_cfg_wf)\n        (\\<lambda>_. gen_wf_uses gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_.\n            fst (CFG_Construct_linorder.uses'_phis' gen_wf_\\<alpha>n\n                  gen_wf_inEdges' gen_wf_defs gen_wf_uses gen_cfg_wf))\n        (\\<lambda>_.\n            snd (CFG_Construct_linorder.uses'_phis' gen_wf_\\<alpha>n\n                  gen_wf_inEdges' gen_wf_defs gen_wf_uses gen_cfg_wf))\n        (\\<lambda>_. gen_wf_var gen_cfg_wf)", "apply (subst CFG_Construct_linorder.snd_uses'_phis'[symmetric, of gen_wf_\\<alpha>e _ gen_wf_invar _ gen_wf_Entry])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>gen_cfg_wf _.\n       CFG_Construct_linorder gen_wf_\\<alpha>e gen_wf_\\<alpha>n\n        (\\<lambda>_. True) gen_wf_inEdges' gen_wf_Entry gen_wf_defs\n        gen_wf_uses\n 2. \\<And>gen_cfg_wf.\n       CFG_SSA_Transformed_code (\\<lambda>_. gen_wf_\\<alpha>e gen_cfg_wf)\n        (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf) (\\<lambda>_. True)\n        (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs gen_cfg_wf)\n        (\\<lambda>_. gen_wf_uses gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_.\n            fst (CFG_Construct_linorder.uses'_phis' gen_wf_\\<alpha>n\n                  gen_wf_inEdges' gen_wf_defs gen_wf_uses gen_cfg_wf))\n        (\\<lambda>_. gen_wf.phis'_code gen_cfg_wf)\n        (\\<lambda>_. gen_wf_var gen_cfg_wf)", "apply unfold_locales[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gen_cfg_wf.\n       CFG_SSA_Transformed_code (\\<lambda>_. gen_wf_\\<alpha>e gen_cfg_wf)\n        (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf) (\\<lambda>_. True)\n        (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs gen_cfg_wf)\n        (\\<lambda>_. gen_wf_uses gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>_.\n            fst (CFG_Construct_linorder.uses'_phis' gen_wf_\\<alpha>n\n                  gen_wf_inEdges' gen_wf_defs gen_wf_uses gen_cfg_wf))\n        (\\<lambda>_. gen_wf.phis'_code gen_cfg_wf)\n        (\\<lambda>_. gen_wf_var gen_cfg_wf)", "apply (rule CFG_SSA_Transformed_codeI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>gen_cfg_wf.\n       CFG_SSA_Transformed (\\<lambda>_. gen_wf_\\<alpha>e gen_cfg_wf)\n        (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf) (\\<lambda>_. True)\n        (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs gen_cfg_wf)\n        (\\<lambda>_. gen_wf_uses gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>g.\n            lookup_multimap\n             (fst (CFG_Construct_linorder.uses'_phis' gen_wf_\\<alpha>n\n                    gen_wf_inEdges' gen_wf_defs gen_wf_uses gen_cfg_wf)))\n        (\\<lambda>g. Mapping.lookup (gen_wf.phis'_code gen_cfg_wf))\n        (\\<lambda>_. gen_wf_var gen_cfg_wf)\n 2. \\<And>gen_cfg_wf g.\n       Mapping.keys\n        (fst (CFG_Construct_linorder.uses'_phis' gen_wf_\\<alpha>n\n               gen_wf_inEdges' gen_wf_defs gen_wf_uses gen_cfg_wf))\n       \\<subseteq> set (gen_wf_\\<alpha>n gen_cfg_wf)", "apply (subst CFG_Construct_linorder.fst_uses'_phis'[symmetric, of gen_wf_\\<alpha>e _ gen_wf_invar _ gen_wf_Entry])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>gen_cfg_wf g.\n       CFG_Construct_linorder gen_wf_\\<alpha>e gen_wf_\\<alpha>n\n        (\\<lambda>_. True) gen_wf_inEdges' gen_wf_Entry gen_wf_defs\n        gen_wf_uses\n 2. \\<And>gen_cfg_wf.\n       CFG_SSA_Transformed (\\<lambda>_. gen_wf_\\<alpha>e gen_cfg_wf)\n        (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf) (\\<lambda>_. True)\n        (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs gen_cfg_wf)\n        (\\<lambda>_. gen_wf_uses gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>g. gen_wf.uses' gen_cfg_wf)\n        (\\<lambda>g. Mapping.lookup (gen_wf.phis'_code gen_cfg_wf))\n        (\\<lambda>_. gen_wf_var gen_cfg_wf)\n 3. \\<And>gen_cfg_wf g.\n       Mapping.keys\n        (fst (CFG_Construct_linorder.uses'_phis' gen_wf_\\<alpha>n\n               gen_wf_inEdges' gen_wf_defs gen_wf_uses gen_cfg_wf))\n       \\<subseteq> set (gen_wf_\\<alpha>n gen_cfg_wf)", "apply unfold_locales[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>gen_cfg_wf.\n       CFG_SSA_Transformed (\\<lambda>_. gen_wf_\\<alpha>e gen_cfg_wf)\n        (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf) (\\<lambda>_. True)\n        (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs gen_cfg_wf)\n        (\\<lambda>_. gen_wf_uses gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>g. gen_wf.uses' gen_cfg_wf)\n        (\\<lambda>g. Mapping.lookup (gen_wf.phis'_code gen_cfg_wf))\n        (\\<lambda>_. gen_wf_var gen_cfg_wf)\n 2. \\<And>gen_cfg_wf g.\n       Mapping.keys\n        (fst (CFG_Construct_linorder.uses'_phis' gen_wf_\\<alpha>n\n               gen_wf_inEdges' gen_wf_defs gen_wf_uses gen_cfg_wf))\n       \\<subseteq> set (gen_wf_\\<alpha>n gen_cfg_wf)", "apply transfer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>gen_cfg_wf.\n       CFG_SSA_Transformed (\\<lambda>_. gen_wf_\\<alpha>e gen_cfg_wf)\n        (\\<lambda>_. gen_wf_\\<alpha>n gen_cfg_wf) (\\<lambda>_. True)\n        (\\<lambda>_. gen_wf_inEdges' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_Entry gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs gen_cfg_wf)\n        (\\<lambda>_. gen_wf_uses gen_cfg_wf)\n        (\\<lambda>_. gen_wf_defs' gen_cfg_wf)\n        (\\<lambda>g. gen_wf.uses' gen_cfg_wf)\n        (\\<lambda>g. gen_wf.phis' gen_cfg_wf)\n        (\\<lambda>_. gen_wf_var gen_cfg_wf)\n 2. \\<And>gen_cfg_wf g.\n       Mapping.keys\n        (fst (CFG_Construct_linorder.uses'_phis' gen_wf_\\<alpha>n\n               gen_wf_inEdges' gen_wf_defs gen_wf_uses gen_cfg_wf))\n       \\<subseteq> set (gen_wf_\\<alpha>n gen_cfg_wf)", "apply (rule CFG_SSA_Transformed_ign)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gen_cfg_wf g.\n       Mapping.keys\n        (fst (CFG_Construct_linorder.uses'_phis' gen_wf_\\<alpha>n\n               gen_wf_inEdges' gen_wf_defs gen_wf_uses gen_cfg_wf))\n       \\<subseteq> set (gen_wf_\\<alpha>n gen_cfg_wf)", "apply (rule CFG_Construct_linorder.fst_uses'_phis'_in_\\<alpha>n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gen_cfg_wf g.\n       CFG_Construct_linorder (?\\<alpha>e615 gen_cfg_wf g) gen_wf_\\<alpha>n\n        (?invar615 gen_cfg_wf g) gen_wf_inEdges' (?Entry615 gen_cfg_wf g)\n        gen_wf_defs gen_wf_uses", "by unfold_locales"], ["", "declare uninst.defNode_code[abs_def, code] uninst.allVars_code[abs_def, code] uninst.allUses_def[abs_def, code] uninst.allDefs_def[abs_def, code]\n  uninst.phiUses_code[abs_def, code] uninst.phi_def[abs_def, code] uninst.redundant_code_def[abs_def, code]"], ["", "declare uninst_code.uses'_code_def[abs_def, code] uninst_code.substNext_code_def[abs_def, code] uninst_code.substitution_code_def[abs_def, folded uninst_phi_def, code]"], ["", "declare uninst_code.phis'_code_def[folded uninst_code_substNext_def, code] uninst_code.step_code_def[folded uninst_code.uses'_code_def uninst_code.phis'_code_def, code]\n  uninst_code.cond_code_def[folded uninst_redundant_def, code]"], ["", "declare gen_ssa_wf_notriv.substAll_efficient_def\n  [folded uninst_code_nodes_of_phis'_def uninst_code_nodes_of_uses'_def uninst_code_triv_phis'_def\n    uninst_code_substitution_def\n    uninst_code_step_code_def uninst_code_phis'_def uninst_code_uses'_def uninst_trivial_phis_def\n    uninst_phidefNodes_def uninst_useNodes_of_def uninst_phiNodes_of_def, code]"], ["", "declare keys_dom_lookup [symmetric, code_unfold]"], ["", "definition \"map_keys_from_sparse \\<equiv> map_keys gen_wf.from_sparse\""], ["", "declare map_keys_code[OF gen_wf.from_sparse_inj, folded map_keys_from_sparse_def, code]"], ["", "declare map_keys_from_sparse_def[symmetric, code_unfold]"], ["", "lemma fold_Cons_commute: \"(\\<And>a b. \\<lbrakk>a \\<in> set (x # xs); b \\<in> set (x # xs)\\<rbrakk> \\<Longrightarrow> f a \\<circ> f b = f b \\<circ> f a)\n  \\<Longrightarrow> fold f (x # xs) = f x \\<circ> (fold f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>a \\<in> set (x # xs); b \\<in> set (x # xs)\\<rbrakk>\n        \\<Longrightarrow> (f a \\<circ>\\<circ> f) b =\n                          (f b \\<circ>\\<circ> f) a) \\<Longrightarrow>\n    fold f (x # xs) = (f x \\<circ>\\<circ>\\<circ> fold) f xs", "by (simp add: fold_commute)"], ["", "lemma Union_of_code [code]: \"Union_of f (RBT_Set.Set r) = RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Union_of f (RBT_Set.Set r) =\n    RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Union_of f (RBT_Set.Set r) =\n    RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Union_of f (RBT_Set.Set r) =\n    RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. Union_of f (RBT_Set.Set r) =\n    RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}", "have \"(\\<Union>x\\<in>{x. (x, ()) \\<in> set xs}. f x) = fold (\\<lambda>(a,_). (\\<union>) (f a)) xs {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (f ` {x. (x, ()) \\<in> set xs}) =\n    fold (\\<lambda>(a, uu_). (\\<union>) (f a)) xs {}", "apply (induction xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Union> (f ` {x. (x, ()) \\<in> set []}) =\n    fold (\\<lambda>a. case a of (a, uu_) \\<Rightarrow> (\\<union>) (f a)) []\n     {}\n 2. \\<And>a xs.\n       \\<Union> (f ` {x. (x, ()) \\<in> set xs}) =\n       fold (\\<lambda>a. case a of (a, uu_) \\<Rightarrow> (\\<union>) (f a))\n        xs {} \\<Longrightarrow>\n       \\<Union> (f ` {x. (x, ()) \\<in> set (a # xs)}) =\n       fold (\\<lambda>a. case a of (a, uu_) \\<Rightarrow> (\\<union>) (f a))\n        (a # xs) {}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<Union> (f ` {x. (x, ()) \\<in> set xs}) =\n       fold (\\<lambda>a. case a of (a, uu_) \\<Rightarrow> (\\<union>) (f a))\n        xs {} \\<Longrightarrow>\n       \\<Union> (f ` {x. (x, ()) \\<in> set (a # xs)}) =\n       fold (\\<lambda>a. case a of (a, uu_) \\<Rightarrow> (\\<union>) (f a))\n        (a # xs) {}", "by (subst fold_Cons_commute) auto"], ["proof (state)\nthis:\n  \\<Union> (f ` {x. (x, ()) \\<in> set xs}) =\n  fold (\\<lambda>(a, uu_). (\\<union>) (f a)) xs {}\n\ngoal (1 subgoal):\n 1. Union_of f (RBT_Set.Set r) =\n    RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}", "}"], ["proof (state)\nthis:\n  \\<Union> (f ` {x. (x, ()) \\<in> set ?xs2}) =\n  fold (\\<lambda>(a, uu_). (\\<union>) (f a)) ?xs2 {}\n\ngoal (1 subgoal):\n 1. Union_of f (RBT_Set.Set r) =\n    RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}", "note Union_fold = this"], ["proof (state)\nthis:\n  \\<Union> (f ` {x. (x, ()) \\<in> set ?xs2}) =\n  fold (\\<lambda>(a, uu_). (\\<union>) (f a)) ?xs2 {}\n\ngoal (1 subgoal):\n 1. Union_of f (RBT_Set.Set r) =\n    RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Union_of f (RBT_Set.Set r) =\n    RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}", "unfolding Union_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (f ` RBT_Set.Set r) =\n    RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}", "by (clarsimp simp: RBT_Set.Set_def RBT.fold_fold RBT.lookup_in_tree) (rule Union_fold [simplified])"], ["proof (state)\nthis:\n  Union_of f (RBT_Set.Set r) =\n  RBT.fold (\\<lambda>a _. (\\<union>) (f a)) r {}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition[code]: \"disjoint xs ys = (xs \\<inter> ys = {})\""], ["", "definition \"gen_ssa_wf_notriv_substAll' = fst \\<circ> gen_ssa_wf_notriv_substAll_efficient\""], ["", "definition \"fold_set f A \\<equiv> fold f (sorted_list_of_set A)\""], ["", "declare fold_set_def [symmetric, code_unfold]"], ["", "declare fold_set_def\n  [where A=\"RBT_Set.Set r\" for r,\n    unfolded sorted_list_set fold_keys_def_alt [symmetric,abs_def] fold_keys_def [abs_def],\n    code]"], ["", "declare graph_path_base.inEdges_def [code]"], ["", "end"]]}