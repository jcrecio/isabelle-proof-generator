{"file_name": "/home/qj213/afp-2021-10-22/thys/Formal_SSA/SSA_CFG.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Formal_SSA", "problem_names": ["lemma vars_finite[simp]: \"finite (vars g)\"", "lemma Entry_no_predecessor[simp]: \"predecessors g (Entry g) = []\"", "lemma uses_in_vars[elim, simp]: \"v \\<in> uses g n \\<Longrightarrow>  v \\<in> vars g\"", "lemma varsE:\n    assumes \"v \\<in> vars g\"\n    obtains n where \"n \\<in> set (\\<alpha>n g)\" \"v \\<in> uses g n\"", "lemma defs_uses_disjoint'[simp]: \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> v \\<in> defs g n \\<Longrightarrow> v \\<in> uses g n \\<Longrightarrow> False\"", "lemma defAss'E:\n    assumes \"defAss' g m v\" \"g \\<turnstile> Entry g-ns\\<rightarrow>m\"\n    obtains n where \"n \\<in> set ns\" \"v \\<in> defs g n\"", "lemmas defAss'I = defAss'_def[THEN iffD2, rule_format]", "lemma defAss'_extend:\n    assumes \"defAss' g m v\"\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"\\<forall>n \\<in> set (tl ns). v \\<notin> defs g n\"\n    shows \"defAss' g n v\"", "lemmas CFG_SSA_defs = phiDefs_def allDefs_def phiUses_def allUses_def allVars_def defAss_def", "lemma phis_disj:\n    assumes \"phis g (n,v) = Some vs\"\n    and \"phis g (n',v) = Some vs'\"\n    shows \"n = n'\" and \"vs = vs'\"", "lemma allDefs_disjoint': \"\\<lbrakk>n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g); v \\<in> allDefs g n; v \\<in> allDefs g m\\<rbrakk> \\<Longrightarrow> n = m\"", "lemma phiUsesI:\n    assumes \"n' \\<in> set (\\<alpha>n g)\" \"phis g (n',v') = Some vs\" \"(n,v) \\<in> set (zip (predecessors g n') vs)\"\n    shows \"v \\<in> phiUses g n\"", "lemma phiUsesE:\n    assumes \"v \\<in> phiUses g n\"\n    obtains  n' v' vs where \"n' \\<in> set (successors g n)\" \"(n,v) \\<in> set (zip (predecessors g n') vs)\" \"phis g (n', v') = Some vs\"", "lemma defs_in_allDefs[simp]: \"v \\<in> defs g n \\<Longrightarrow> v \\<in> allDefs g n\"", "lemma phiDefs_in_allDefs[simp, elim]: \"v \\<in> phiDefs g n \\<Longrightarrow> v \\<in> allDefs g n\"", "lemma uses_in_allUses[simp]: \"v \\<in> uses g n \\<Longrightarrow> v \\<in> allUses g n\"", "lemma phiUses_in_allUses[simp]: \"v \\<in> phiUses g n \\<Longrightarrow> v \\<in> allUses g n\"", "lemma allDefs_in_allVars[simp, intro]: \"\\<lbrakk>v \\<in> allDefs g n; n \\<in> set (\\<alpha>n g)\\<rbrakk> \\<Longrightarrow> v \\<in> allVars g\"", "lemma allUses_in_allVars[simp, intro]: \"\\<lbrakk>v \\<in> allUses g n; n \\<in> set (\\<alpha>n g)\\<rbrakk> \\<Longrightarrow> v \\<in> allVars g\"", "lemma phiDefs_finite[simp]: \"finite (phiDefs g n)\"", "lemma phiUses_finite[simp]:\n    assumes \"n \\<in> set (\\<alpha>n g)\"\n    shows \"finite (phiUses g n)\"", "lemma allDefs_finite[simp]: \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> finite (allDefs g n)\"", "lemma allUses_finite[simp]: \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> finite (allUses g n)\"", "lemma allVars_finite[simp]: \"finite (allVars g)\"", "lemmas defAssI = defAss_def[THEN iffD2, rule_format]", "lemmas defAssD = defAss_def[THEN iffD1, rule_format]", "lemma defAss_extend:\n    assumes \"defAss g m v\"\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"\\<forall>n \\<in> set (tl ns). v \\<notin> allDefs g n\"\n    shows \"defAss g n v\"", "lemma defAss_dominating:\n    assumes[simp]: \"n \\<in> set (\\<alpha>n g)\"\n    shows \"defAss g n v \\<longleftrightarrow> (\\<exists>m \\<in> set (\\<alpha>n g). dominates g m n \\<and> v \\<in> allDefs g m)\"", "lemmas \"CFG_SSA_wf_defs\" = CFG_SSA_defs defNode_code phi_def isTrivialPhi_def trivial_def redundant_def liveVal_def pruned_def", "lemma allVars_in_allDefs: \"v \\<in> allVars g \\<Longrightarrow> \\<exists>n \\<in> set (\\<alpha>n g). v \\<in> allDefs g n\"", "lemma phiDefs_Entry_empty[simp]: \"phiDefs g (Entry g) = {}\"", "lemma phi_Entry_empty[simp]: \"defNode g v = Entry g \\<Longrightarrow> phi g v = None\"", "lemma defNode_ex1:\n    assumes \"v \\<in> allVars g\"\n    shows \"\\<exists>!n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n\"", "lemma defNode_def: \"v \\<in> allVars g \\<Longrightarrow> defNode g v = (THE n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n)\"", "lemma defNode[simp]:\n    assumes \"v \\<in> allVars g\"\n    shows  \"(defNode g v) \\<in> set (\\<alpha>n g)\" \"v \\<in> allDefs g (defNode g v)\"", "lemma defNode_eq[intro]:\n    assumes \"n \\<in> set (\\<alpha>n g)\" \"v \\<in> allDefs g n\"\n    shows \"defNode g v = n\"", "lemma defNode_cases[consumes 1]:\n    assumes \"v \\<in> allVars g\"\n    obtains (simpleDef) \"v \\<in> defs g (defNode g v)\"\n          | (phi)       \"phi g v \\<noteq> None\"", "lemma phi_phiDefs[simp]: \"phi g v = Some vs \\<Longrightarrow> v \\<in> phiDefs g (defNode g v)\"", "lemma simpleDef_not_phi:\n    assumes \"n \\<in> set (\\<alpha>n g)\" \"v \\<in> defs g n\"\n    shows \"phi g v = None\"", "lemma phi_wf: \"phi g v = Some vs \\<Longrightarrow> length (predecessors g (defNode g v)) = length vs\"", "lemma phi_finite: \"finite (dom (phi g))\"", "lemma phiUses_exI:\n    assumes \"m \\<in> set (predecessors g n)\" \"phis g (n,v) = Some vs\" \"n \\<in> set (\\<alpha>n g)\"\n    obtains v' where \"v' \\<in> phiUses g m\" \"v' \\<in> set vs\"", "lemma phiArg_exI:\n    assumes \"m \\<in> set (predecessors g (defNode g v))\" \"phi g v \\<noteq> None\" and[simp]: \"v \\<in> allVars g\"\n    obtains v' where \"v' \\<in> phiUses g m\" \"phiArg g v v'\"", "lemma phiUses_exI':\n    assumes \"phiArg g p q\" and[simp]: \"p \\<in> allVars g\"\n    obtains m where \"q \\<in> phiUses g m\" \"m \\<in> set (predecessors g (defNode g p))\"", "lemma phiArg_in_allVars[simp]:\n    assumes \"phiArg g v v'\"\n    shows \"v' \\<in> allVars g\"", "lemma defAss_defNode:\n    assumes \"defAss g m v\" \"v \\<in> allVars g\" \"g \\<turnstile> Entry g-ns\\<rightarrow>m\"\n    shows \"defNode g v \\<in> set ns\"", "lemma defUse_path_ex:\n    assumes \"v \\<in> allUses g m\" \"m \\<in> set (\\<alpha>n g)\"\n    obtains ns where \"g \\<turnstile> defNode g v-ns\\<rightarrow>m\" \"EntryPath g ns\"", "lemma defUse_path_dominated:\n    assumes \"g \\<turnstile> defNode g v-ns\\<rightarrow>n\" \"defNode g v \\<notin> set (tl ns)\" \"v \\<in> allUses g n\" \"n' \\<in> set ns\"\n    shows \"dominates g (defNode g v) n'\"", "lemma allUses_dominated:\n    assumes \"v \\<in> allUses g n\" \"n \\<in> set (\\<alpha>n g)\"\n    shows \"dominates g (defNode g v) n\"", "lemma phiArg_path_ex':\n    assumes \"phiArg g p q\" and[simp]: \"p \\<in> allVars g\"\n    obtains ns m where \"g \\<turnstile> defNode g q-ns\\<rightarrow>m\" \"EntryPath g ns\" \"q \\<in> phiUses g m\" \"m \\<in> set (predecessors g (defNode g p))\"", "lemma phiArg_path_ex:\n    assumes \"phiArg g p q\" and[simp]: \"p \\<in> allVars g\"\n    obtains ns where \"g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p\" \"length ns > 1\"", "lemma phiArg_tranclp_path_ex:\n    assumes \"r\\<^sup>+\\<^sup>+ p q\" \"p \\<in> allVars g\" and[simp]: \"\\<And>p q. r p q \\<Longrightarrow> phiArg g p q\"\n    obtains ns where \"g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p\" \"length ns > 1\"\n      \"\\<forall>n \\<in> set (butlast ns). \\<exists>p q m ns'. r p q \\<and> g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and> (defNode g q) \\<notin> set (tl ns') \\<and> q \\<in> phiUses g m \\<and> m \\<in> set (predecessors g (defNode g p)) \\<and> n \\<in> set ns' \\<and> set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\"", "lemma non_dominated_predecessor:\n    assumes \"n \\<in> set (\\<alpha>n g)\" \"n \\<noteq> Entry g\"\n    obtains m where \"m \\<in> set (predecessors g n)\" \"\\<not>dominates g n m\"", "lemmas dominates_trans'[trans, elim] = dominates_trans[OF invar]", "lemmas strict_dom_trans'[trans, elim] = strict_dom_trans[OF invar]", "lemmas dominates_refl'[simp] = dominates_refl[OF invar]", "lemmas dominates_antisymm'[dest] = dominates_antisymm[OF invar]", "lemma liveVal_in_allVars[simp]: \"liveVal g v \\<Longrightarrow> v \\<in> allVars g\"", "lemma phi_no_closed_loop:\n    assumes[simp]: \"p \\<in> allVars g\" and \"phi g p = Some vs\"\n    shows \"set vs \\<noteq> {p}\"", "lemma phis_phi: \"phis g (n, v) = Some vs \\<Longrightarrow> phi g v = Some vs\"", "lemma trivial_phi: \"trivial g v \\<Longrightarrow> phi g v \\<noteq> None\"", "lemma trivial_finite: \"finite {v. trivial g v}\"", "lemma trivial_in_allVars: \"trivial g v \\<Longrightarrow> v \\<in> allVars g\"", "lemma conventional': \"\\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; n \\<notin> set (tl ns); v \\<in> allDefs g n; v \\<in> allUses g m; v' \\<in> allDefs g x; var g v' = var g v\\<rbrakk> \\<Longrightarrow> x \\<notin> set (tl ns)\"", "lemma conventional'': \"\\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m; defNode g v \\<notin> set (tl ns); v \\<in> allUses g m; var g v' = var g v; v \\<in> allVars g; v' \\<in> allVars g\\<rbrakk> \\<Longrightarrow> defNode g v' \\<notin> set (tl ns)\"", "lemma phiArg_same_var: \"phiArg g p q \\<Longrightarrow> var g q = var g p\"", "lemma oldDef_defAss:\n    assumes \"v \\<in> allUses g n\" \"g \\<turnstile> Entry g-ns\\<rightarrow>n\"\n    obtains m where \"m \\<in> set ns\" \"var g v \\<in> oldDefs g m\"", "lemma allDef_path_from_simpleDef:\n    assumes[simp]: \"v \\<in> allVars g\"\n    obtains n ns where \"g \\<turnstile> n-ns\\<rightarrow>defNode g v\" \"old.EntryPath g ns\" \"var g v \\<in> oldDefs g n\"", "lemma defNode_var_disjoint:\n    assumes \"p \\<in> allVars g\" \"q \\<in> allVars g\" \"p \\<noteq> q\" \"defNode g p = defNode g q\"\n    shows \"var g p \\<noteq> var g q\"", "lemma phiArg_distinct_nodes:\n    assumes \"phiArg g p q\" \"p \\<noteq> q\" and[simp]: \"p \\<in> allVars g\"\n    shows \"defNode g p \\<noteq> defNode g q\"", "lemma phiArgs_def_distinct:\n    assumes \"phiArg g p q\" \"phiArg g p r\" \"q \\<noteq> r\" \"p \\<in> allVars g\"\n    shows \"defNode g q \\<noteq> defNode g r\"", "lemma defNode_not_on_defUse_path:\n    assumes p: \"g \\<turnstile> defNode g p-ns\\<rightarrow>n\" \"defNode g p \\<notin> set (tl ns)\" \"p \\<in> allUses g n\"\n    assumes[simp]: \"q \\<in> allVars g\" \"p \\<noteq> q\" \"var g p = var g q\"\n    shows \"defNode g q \\<notin> set ns\"", "lemma defUse_paths_disjoint:\n    assumes p: \"g \\<turnstile> defNode g p-ns\\<rightarrow>n\" \"defNode g p \\<notin> set (tl ns)\" \"p \\<in> allUses g n\"\n    assumes q: \"g \\<turnstile> defNode g q-ms\\<rightarrow>m\" \"defNode g q \\<notin> set (tl ms)\" \"q \\<in> allUses g m\"\n    assumes[simp]: \"p \\<noteq> q\" \"var g p = var g q\"\n    shows \"set ns \\<inter> set ms = {}\"", "lemma oldDefsI: \"v \\<in> defs g n \\<Longrightarrow> var g v \\<in> oldDefs g n\"", "lemma simpleDefs_phiDefs_var_disjoint:\n    assumes \"v \\<in> phiDefs g n\" \"n \\<in> set (\\<alpha>n g)\"\n    shows \"var g v \\<notin> oldDefs g n\"", "lemma liveVal_use_path: \n    assumes \"liveVal g v\"\n    obtains ns m where \"g \\<turnstile> defNode g v-ns\\<rightarrow>m\" \"var g v \\<in> oldUses g m\"\n      \"\\<And>x. x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x\""], "translations": [["", "lemma vars_finite[simp]: \"finite (vars g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (vars g)", "by (auto simp:vars_def)"], ["", "lemma Entry_no_predecessor[simp]: \"predecessors g (Entry g) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. predecessors g (Entry g) = []", "using Entry_unreachable"], ["proof (prove)\nusing this:\n  invar ?g \\<Longrightarrow> inEdges ?g (Entry ?g) = []\n\ngoal (1 subgoal):\n 1. predecessors g (Entry g) = []", "by (auto simp:predecessors_def)"], ["", "lemma uses_in_vars[elim, simp]: \"v \\<in> uses g n \\<Longrightarrow>  v \\<in> vars g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> uses g n \\<Longrightarrow> v \\<in> vars g", "by (auto simp add:vars_def uses_in_\\<alpha>n intro!: fold_union_elemI)"], ["", "lemma varsE:\n    assumes \"v \\<in> vars g\"\n    obtains n where \"n \\<in> set (\\<alpha>n g)\" \"v \\<in> uses g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> set (\\<alpha>n g); v \\<in> uses g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> vars g\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> set (\\<alpha>n g); v \\<in> uses g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp:vars_def elim!:fold_union_elem)"], ["", "lemma defs_uses_disjoint'[simp]: \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> v \\<in> defs g n \\<Longrightarrow> v \\<in> uses g n \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g); v \\<in> defs g n;\n     v \\<in> uses g n\\<rbrakk>\n    \\<Longrightarrow> False", "using defs_uses_disjoint"], ["proof (prove)\nusing this:\n  ?n \\<in> set (\\<alpha>n ?g) \\<Longrightarrow>\n  defs ?g ?n \\<inter> uses ?g ?n = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g); v \\<in> defs g n;\n     v \\<in> uses g n\\<rbrakk>\n    \\<Longrightarrow> False", "by auto"], ["", "end"], ["", "context CFG\nbegin"], ["", "lemma defAss'E:\n    assumes \"defAss' g m v\" \"g \\<turnstile> Entry g-ns\\<rightarrow>m\"\n    obtains n where \"n \\<in> set ns\" \"v \\<in> defs g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> set ns; v \\<in> defs g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  defAss' g m v\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> set ns; v \\<in> defs g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding defAss'_def"], ["proof (prove)\nusing this:\n  \\<forall>ns.\n     g \\<turnstile> Entry g-ns\\<rightarrow>m \\<longrightarrow>\n     (\\<exists>n\\<in>set ns. v \\<in> defs g n)\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> set ns; v \\<in> defs g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemmas defAss'I = defAss'_def[THEN iffD2, rule_format]"], ["", "lemma defAss'_extend:\n    assumes \"defAss' g m v\"\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"\\<forall>n \\<in> set (tl ns). v \\<notin> defs g n\"\n    shows \"defAss' g n v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defAss' g n v", "unfolding defAss'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<longrightarrow>\n       (\\<exists>n\\<in>set ns. v \\<in> defs g n)", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> defs g n", "fix ns'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> defs g n", "assume \"g \\<turnstile> Entry g-ns'\\<rightarrow>n\""], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> defs g n", "with assms(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n", "have \"g \\<turnstile> Entry g-ns'@tl ns\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-ns' @ tl ns\\<rightarrow>m", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns' @ tl ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> defs g n", "with assms(1)"], ["proof (chain)\npicking this:\n  defAss' g m v\n  g \\<turnstile> Entry g-ns' @ tl ns\\<rightarrow>m", "obtain n' where n': \"n' \\<in> set (ns'@tl ns)\" \"v \\<in> defs g n'\""], ["proof (prove)\nusing this:\n  defAss' g m v\n  g \\<turnstile> Entry g-ns' @ tl ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' \\<in> set (ns' @ tl ns); v \\<in> defs g n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule defAss'E)"], ["proof (state)\nthis:\n  n' \\<in> set (ns' @ tl ns)\n  v \\<in> defs g n'\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> defs g n", "with assms(3)"], ["proof (chain)\npicking this:\n  \\<forall>n\\<in>set (tl ns). v \\<notin> defs g n\n  n' \\<in> set (ns' @ tl ns)\n  v \\<in> defs g n'", "have \"n' \\<notin> set (tl ns)\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>set (tl ns). v \\<notin> defs g n\n  n' \\<in> set (ns' @ tl ns)\n  v \\<in> defs g n'\n\ngoal (1 subgoal):\n 1. n' \\<notin> set (tl ns)", "by auto"], ["proof (state)\nthis:\n  n' \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> defs g n", "with n'"], ["proof (chain)\npicking this:\n  n' \\<in> set (ns' @ tl ns)\n  v \\<in> defs g n'\n  n' \\<notin> set (tl ns)", "show \"\\<exists>n \\<in> set ns'. v \\<in> defs g n\""], ["proof (prove)\nusing this:\n  n' \\<in> set (ns' @ tl ns)\n  v \\<in> defs g n'\n  n' \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>set ns'. v \\<in> defs g n", "by auto"], ["proof (state)\nthis:\n  \\<exists>n\\<in>set ns'. v \\<in> defs g n\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>A CFG is well-formed if it satisfies definite assignment.\\<close>"], ["", "locale CFG_wf = CFG \\<alpha>e \\<alpha>n invar inEdges' Entry \"defs\" \"uses\"\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node::linorder \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges' :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD) list\" and\n  Entry::\"'g \\<Rightarrow> 'node\" and\n  \"defs\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'var::linorder set\" and\n  \"uses\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'var set\" +\nassumes def_ass_uses: \"\\<forall>m \\<in> set (\\<alpha>n g). \\<forall>v \\<in> uses g m. defAss' g m v\""], ["", "subsection \\<open>SSA CFG\\<close>"], ["", "type_synonym ('node, 'val) phis = \"'node \\<times> 'val \\<rightharpoonup> 'val list\""], ["", "declare in_set_zipE[elim]"], ["", "declare zip_same[simp]"], ["", "locale CFG_SSA_base = CFG_base \\<alpha>e \\<alpha>n invar inEdges' Entry \"defs\" \"uses\"\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node::linorder \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges' :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD) list\" and\n  Entry::\"'g \\<Rightarrow> 'node\" and\n  \"defs\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val::linorder set\" and\n  \"uses\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val set\" +\nfixes phis :: \"'g \\<Rightarrow> ('node, 'val) phis\"\nbegin"], ["", "definition \"phiDefs g n \\<equiv> {v. (n,v) \\<in> dom (phis g)}\""], ["", "definition[code]: \"allDefs g n \\<equiv> defs g n \\<union> phiDefs g n\""], ["", "definition[code]: \"phiUses g n \\<equiv>\n    \\<Union>n' \\<in> set (successors g n). \\<Union>v' \\<in> phiDefs g n'. snd ` Set.filter (\\<lambda>(n'',v). n'' = n) (set (zip (predecessors g n') (the (phis g (n',v')))))\""], ["", "definition[code]: \"allUses g n \\<equiv> uses g n \\<union> phiUses g n\""], ["", "definition[code]: \"allVars g \\<equiv> \\<Union>n \\<in> set (\\<alpha>n g). allDefs g n \\<union> allUses g n\""], ["", "definition defAss :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val \\<Rightarrow> bool\" where\n    \"defAss g m v \\<longleftrightarrow> (\\<forall>ns. g \\<turnstile> Entry g-ns\\<rightarrow>m \\<longrightarrow> (\\<exists>n \\<in> set ns. v \\<in> allDefs g n))\""], ["", "lemmas CFG_SSA_defs = phiDefs_def allDefs_def phiUses_def allUses_def allVars_def defAss_def"], ["", "end"], ["", "locale CFG_SSA = CFG \\<alpha>e \\<alpha>n invar inEdges' Entry \"defs\" \"uses\" + CFG_SSA_base \\<alpha>e \\<alpha>n invar inEdges' Entry \"defs\" \"uses\" phis\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node::linorder \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges' :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD) list\" and\n  Entry::\"'g \\<Rightarrow> 'node\" and\n  \"defs\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val::linorder set\" and\n  \"uses\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val set\" and\n   phis :: \"'g \\<Rightarrow> ('node, 'val) phis\" +\nassumes phis_finite: \"finite (dom (phis g))\"\nassumes phis_in_\\<alpha>n: \"phis g (n,v) = Some vs \\<Longrightarrow> n \\<in> set (\\<alpha>n g)\"\nassumes phis_wf:\n  \"phis g (n,v) = Some args \\<Longrightarrow> length (predecessors g n) = length args\"\nassumes simpleDefs_phiDefs_disjoint:             \n  \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> defs g n \\<inter> phiDefs g n = {}\"\nassumes allDefs_disjoint:\n  \"\\<lbrakk>n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g); n \\<noteq> m\\<rbrakk> \\<Longrightarrow> allDefs g n \\<inter> allDefs g m = {}\"\nbegin"], ["", "lemma phis_disj:\n    assumes \"phis g (n,v) = Some vs\"\n    and \"phis g (n',v) = Some vs'\"\n    shows \"n = n'\" and \"vs = vs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = n' &&& vs = vs'", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. n = n'\n 2. vs = vs'", "from assms"], ["proof (chain)\npicking this:\n  phis g (n, v) = Some vs\n  phis g (n', v) = Some vs'", "have \"n \\<in> set (\\<alpha>n g)\" and \"n' \\<in> set (\\<alpha>n g)\""], ["proof (prove)\nusing this:\n  phis g (n, v) = Some vs\n  phis g (n', v) = Some vs'\n\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g) &&& n' \\<in> set (\\<alpha>n g)", "by (auto dest: phis_in_\\<alpha>n)"], ["proof (state)\nthis:\n  n \\<in> set (\\<alpha>n g)\n  n' \\<in> set (\\<alpha>n g)\n\ngoal (2 subgoals):\n 1. n = n'\n 2. vs = vs'", "from allDefs_disjoint [OF this] assms"], ["proof (chain)\npicking this:\n  n \\<noteq> n' \\<Longrightarrow> allDefs g n \\<inter> allDefs g n' = {}\n  phis g (n, v) = Some vs\n  phis g (n', v) = Some vs'", "show \"n = n'\""], ["proof (prove)\nusing this:\n  n \\<noteq> n' \\<Longrightarrow> allDefs g n \\<inter> allDefs g n' = {}\n  phis g (n, v) = Some vs\n  phis g (n', v) = Some vs'\n\ngoal (1 subgoal):\n 1. n = n'", "by (auto simp: allDefs_def phiDefs_def)"], ["proof (state)\nthis:\n  n = n'\n\ngoal (1 subgoal):\n 1. vs = vs'", "with assms"], ["proof (chain)\npicking this:\n  phis g (n, v) = Some vs\n  phis g (n', v) = Some vs'\n  n = n'", "show \"vs = vs'\""], ["proof (prove)\nusing this:\n  phis g (n, v) = Some vs\n  phis g (n', v) = Some vs'\n  n = n'\n\ngoal (1 subgoal):\n 1. vs = vs'", "by simp"], ["proof (state)\nthis:\n  vs = vs'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma allDefs_disjoint': \"\\<lbrakk>n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g); v \\<in> allDefs g n; v \\<in> allDefs g m\\<rbrakk> \\<Longrightarrow> n = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n; v \\<in> allDefs g m\\<rbrakk>\n    \\<Longrightarrow> n = m", "using allDefs_disjoint"], ["proof (prove)\nusing this:\n  \\<lbrakk>?n \\<in> set (\\<alpha>n ?g); ?m \\<in> set (\\<alpha>n ?g);\n   ?n \\<noteq> ?m\\<rbrakk>\n  \\<Longrightarrow> allDefs ?g ?n \\<inter> allDefs ?g ?m = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g); m \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n; v \\<in> allDefs g m\\<rbrakk>\n    \\<Longrightarrow> n = m", "by auto"], ["", "lemma phiUsesI:\n    assumes \"n' \\<in> set (\\<alpha>n g)\" \"phis g (n',v') = Some vs\" \"(n,v) \\<in> set (zip (predecessors g n') vs)\"\n    shows \"v \\<in> phiUses g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> phiUses g n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> phiUses g n", "from assms(3)"], ["proof (chain)\npicking this:\n  (n, v) \\<in> set (zip (predecessors g n') vs)", "have \"n \\<in> set (predecessors g n')\""], ["proof (prove)\nusing this:\n  (n, v) \\<in> set (zip (predecessors g n') vs)\n\ngoal (1 subgoal):\n 1. n \\<in> set (predecessors g n')", "by auto"], ["proof (state)\nthis:\n  n \\<in> set (predecessors g n')\n\ngoal (1 subgoal):\n 1. v \\<in> phiUses g n", "hence 1: \"n' \\<in> set (successors g n)\""], ["proof (prove)\nusing this:\n  n \\<in> set (predecessors g n')\n\ngoal (1 subgoal):\n 1. n' \\<in> set (successors g n)", "using assms(1)"], ["proof (prove)\nusing this:\n  n \\<in> set (predecessors g n')\n  n' \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. n' \\<in> set (successors g n)", "by simp"], ["proof (state)\nthis:\n  n' \\<in> set (successors g n)\n\ngoal (1 subgoal):\n 1. v \\<in> phiUses g n", "from assms(2)"], ["proof (chain)\npicking this:\n  phis g (n', v') = Some vs", "have 2: \"v' \\<in> phiDefs g n'\""], ["proof (prove)\nusing this:\n  phis g (n', v') = Some vs\n\ngoal (1 subgoal):\n 1. v' \\<in> phiDefs g n'", "by (auto simp add:phiDefs_def)"], ["proof (state)\nthis:\n  v' \\<in> phiDefs g n'\n\ngoal (1 subgoal):\n 1. v \\<in> phiUses g n", "from assms(2)"], ["proof (chain)\npicking this:\n  phis g (n', v') = Some vs", "have 3: \"the (phis g (n',v')) = vs\""], ["proof (prove)\nusing this:\n  phis g (n', v') = Some vs\n\ngoal (1 subgoal):\n 1. the (phis g (n', v')) = vs", "by simp"], ["proof (state)\nthis:\n  the (phis g (n', v')) = vs\n\ngoal (1 subgoal):\n 1. v \\<in> phiUses g n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> phiUses g n", "unfolding phiUses_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> (\\<Union>n'\\<in>set (successors g n).\n                \\<Union>v'\\<in>phiDefs g n'.\n                   snd `\n                   Set.filter (\\<lambda>(n'', v). n'' = n)\n                    (set (zip (predecessors g n') (the (phis g (n', v'))))))", "by (rule UN_I[OF 1], rule UN_I[OF 2], auto simp:image_def Set.filter_def assms(3) 3)"], ["proof (state)\nthis:\n  v \\<in> phiUses g n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phiUsesE:\n    assumes \"v \\<in> phiUses g n\"\n    obtains  n' v' vs where \"n' \\<in> set (successors g n)\" \"(n,v) \\<in> set (zip (predecessors g n') vs)\" \"phis g (n', v') = Some vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n' vs v'.\n        \\<lbrakk>n' \\<in> set (successors g n);\n         (n, v) \\<in> set (zip (predecessors g n') vs);\n         phis g (n', v') = Some vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n' vs v'.\n        \\<lbrakk>n' \\<in> set (successors g n);\n         (n, v) \\<in> set (zip (predecessors g n') vs);\n         phis g (n', v') = Some vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(1)"], ["proof (chain)\npicking this:\n  v \\<in> phiUses g n", "obtain n' v' where \"n'\\<in>set (successors g n)\" \"v'\\<in>phiDefs g n'\"\n      \"v \\<in> snd ` Set.filter (\\<lambda>(n'', v). n'' = n) (set (zip (predecessors g n') (the (phis g (n', v')))))\""], ["proof (prove)\nusing this:\n  v \\<in> phiUses g n\n\ngoal (1 subgoal):\n 1. (\\<And>n' v'.\n        \\<lbrakk>n' \\<in> set (successors g n); v' \\<in> phiDefs g n';\n         v \\<in> snd `\n                 Set.filter (\\<lambda>(n'', v). n'' = n)\n                  (set (zip (predecessors g n')\n                         (the (phis g (n', v')))))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp:phiUses_def)"], ["proof (state)\nthis:\n  n' \\<in> set (successors g n)\n  v' \\<in> phiDefs g n'\n  v \\<in> snd `\n          Set.filter (\\<lambda>(n'', v). n'' = n)\n           (set (zip (predecessors g n') (the (phis g (n', v')))))\n\ngoal (1 subgoal):\n 1. (\\<And>n' vs v'.\n        \\<lbrakk>n' \\<in> set (successors g n);\n         (n, v) \\<in> set (zip (predecessors g n') vs);\n         phis g (n', v') = Some vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  n' \\<in> set (successors g n)\n  v' \\<in> phiDefs g n'\n  v \\<in> snd `\n          Set.filter (\\<lambda>(n'', v). n'' = n)\n           (set (zip (predecessors g n') (the (phis g (n', v')))))\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that[of n' \"the (phis g (n',v'))\" v'], auto simp:phiDefs_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma defs_in_allDefs[simp]: \"v \\<in> defs g n \\<Longrightarrow> v \\<in> allDefs g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> defs g n \\<Longrightarrow> v \\<in> allDefs g n", "by (simp add:allDefs_def)"], ["", "lemma phiDefs_in_allDefs[simp, elim]: \"v \\<in> phiDefs g n \\<Longrightarrow> v \\<in> allDefs g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> phiDefs g n \\<Longrightarrow> v \\<in> allDefs g n", "by (simp add:allDefs_def)"], ["", "lemma uses_in_allUses[simp]: \"v \\<in> uses g n \\<Longrightarrow> v \\<in> allUses g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> uses g n \\<Longrightarrow> v \\<in> allUses g n", "by (simp add:allUses_def)"], ["", "lemma phiUses_in_allUses[simp]: \"v \\<in> phiUses g n \\<Longrightarrow> v \\<in> allUses g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> phiUses g n \\<Longrightarrow> v \\<in> allUses g n", "by (simp add:allUses_def)"], ["", "lemma allDefs_in_allVars[simp, intro]: \"\\<lbrakk>v \\<in> allDefs g n; n \\<in> set (\\<alpha>n g)\\<rbrakk> \\<Longrightarrow> v \\<in> allVars g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> allDefs g n; n \\<in> set (\\<alpha>n g)\\<rbrakk>\n    \\<Longrightarrow> v \\<in> allVars g", "by (auto simp:allVars_def)"], ["", "lemma allUses_in_allVars[simp, intro]: \"\\<lbrakk>v \\<in> allUses g n; n \\<in> set (\\<alpha>n g)\\<rbrakk> \\<Longrightarrow> v \\<in> allVars g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> allUses g n; n \\<in> set (\\<alpha>n g)\\<rbrakk>\n    \\<Longrightarrow> v \\<in> allVars g", "by (auto simp:allVars_def)"], ["", "lemma phiDefs_finite[simp]: \"finite (phiDefs g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (phiDefs g n)", "unfolding phiDefs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {v. (n, v) \\<in> dom (phis g)}", "proof (rule finite_surj[where f=snd], rule phis_finite[where g=g])"], ["proof (state)\ngoal (1 subgoal):\n 1. {v. (n, v) \\<in> dom (phis g)} \\<subseteq> snd ` dom (phis g)", "have \"\\<And>x y. phis g (n,x) = Some y \\<Longrightarrow> x \\<in> snd ` dom (phis g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       phis g (n, x) = Some y \\<Longrightarrow> x \\<in> snd ` dom (phis g)", "by (metis domI imageI snd_conv)"], ["proof (state)\nthis:\n  phis g (n, ?x1) = Some ?y1 \\<Longrightarrow> ?x1 \\<in> snd ` dom (phis g)\n\ngoal (1 subgoal):\n 1. {v. (n, v) \\<in> dom (phis g)} \\<subseteq> snd ` dom (phis g)", "thus \"{v. (n, v) \\<in> dom (phis g)} \\<subseteq> snd ` dom (phis g)\""], ["proof (prove)\nusing this:\n  phis g (n, ?x1) = Some ?y1 \\<Longrightarrow> ?x1 \\<in> snd ` dom (phis g)\n\ngoal (1 subgoal):\n 1. {v. (n, v) \\<in> dom (phis g)} \\<subseteq> snd ` dom (phis g)", "by auto"], ["proof (state)\nthis:\n  {v. (n, v) \\<in> dom (phis g)} \\<subseteq> snd ` dom (phis g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phiUses_finite[simp]:\n    assumes \"n \\<in> set (\\<alpha>n g)\"\n    shows \"finite (phiUses g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (phiUses g n)", "by (auto simp:phiUses_def Set.filter_def)"], ["", "lemma allDefs_finite[simp]: \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> finite (allDefs g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g) \\<Longrightarrow> finite (allDefs g n)", "by (auto simp add:allDefs_def)"], ["", "lemma allUses_finite[simp]: \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> finite (allUses g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g) \\<Longrightarrow> finite (allUses g n)", "by (auto simp add:allUses_def)"], ["", "lemma allVars_finite[simp]: \"finite (allVars g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (allVars g)", "by (auto simp add:allVars_def)"], ["", "lemmas defAssI = defAss_def[THEN iffD2, rule_format]"], ["", "lemmas defAssD = defAss_def[THEN iffD1, rule_format]"], ["", "lemma defAss_extend:\n    assumes \"defAss g m v\"\n    assumes \"g \\<turnstile> n-ns\\<rightarrow>m\" \"\\<forall>n \\<in> set (tl ns). v \\<notin> allDefs g n\"\n    shows \"defAss g n v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defAss g n v", "unfolding defAss_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<longrightarrow>\n       (\\<exists>n\\<in>set ns. v \\<in> allDefs g n)", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "fix ns'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "assume \"g \\<turnstile> Entry g-ns'\\<rightarrow>n\""], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "with assms(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n", "have \"g \\<turnstile> Entry g-ns'@tl ns\\<rightarrow>m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-ns' @ tl ns\\<rightarrow>m", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns' @ tl ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "with assms(1)"], ["proof (chain)\npicking this:\n  defAss g m v\n  g \\<turnstile> Entry g-ns' @ tl ns\\<rightarrow>m", "obtain n' where n': \"n' \\<in> set (ns'@tl ns)\" \"v \\<in> allDefs g n'\""], ["proof (prove)\nusing this:\n  defAss g m v\n  g \\<turnstile> Entry g-ns' @ tl ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' \\<in> set (ns' @ tl ns); v \\<in> allDefs g n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto dest:defAssD)"], ["proof (state)\nthis:\n  n' \\<in> set (ns' @ tl ns)\n  v \\<in> allDefs g n'\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "with assms(3)"], ["proof (chain)\npicking this:\n  \\<forall>n\\<in>set (tl ns). v \\<notin> allDefs g n\n  n' \\<in> set (ns' @ tl ns)\n  v \\<in> allDefs g n'", "have \"n' \\<notin> set (tl ns)\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>set (tl ns). v \\<notin> allDefs g n\n  n' \\<in> set (ns' @ tl ns)\n  v \\<in> allDefs g n'\n\ngoal (1 subgoal):\n 1. n' \\<notin> set (tl ns)", "by auto"], ["proof (state)\nthis:\n  n' \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "with n'"], ["proof (chain)\npicking this:\n  n' \\<in> set (ns' @ tl ns)\n  v \\<in> allDefs g n'\n  n' \\<notin> set (tl ns)", "show \"\\<exists>n \\<in> set ns'. v \\<in> allDefs g n\""], ["proof (prove)\nusing this:\n  n' \\<in> set (ns' @ tl ns)\n  v \\<in> allDefs g n'\n  n' \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>set ns'. v \\<in> allDefs g n", "by auto"], ["proof (state)\nthis:\n  \\<exists>n\\<in>set ns'. v \\<in> allDefs g n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma defAss_dominating:\n    assumes[simp]: \"n \\<in> set (\\<alpha>n g)\"\n    shows \"defAss g n v \\<longleftrightarrow> (\\<exists>m \\<in> set (\\<alpha>n g). dominates g m n \\<and> v \\<in> allDefs g m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defAss g n v =\n    (\\<exists>m\\<in>set (\\<alpha>n g).\n        dominates g m n \\<and> v \\<in> allDefs g m)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. defAss g n v \\<Longrightarrow>\n    \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m\n 2. \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m \\<Longrightarrow>\n    defAss g n v", "assume asm: \"defAss g n v\""], ["proof (state)\nthis:\n  defAss g n v\n\ngoal (2 subgoals):\n 1. defAss g n v \\<Longrightarrow>\n    \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m\n 2. \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m \\<Longrightarrow>\n    defAss g n v", "obtain ns where ns: \"g \\<turnstile> Entry g-ns\\<rightarrow>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (atomize, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (2 subgoals):\n 1. defAss g n v \\<Longrightarrow>\n    \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m\n 2. \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m \\<Longrightarrow>\n    defAss g n v", "from defAssD[OF asm this]"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "obtain m where m: \"m \\<in> set ns\" \"v \\<in> allDefs g m\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>set ns. v \\<in> allDefs g n\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set ns; v \\<in> allDefs g m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<in> set ns\n  v \\<in> allDefs g m\n\ngoal (2 subgoals):\n 1. defAss g n v \\<Longrightarrow>\n    \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m\n 2. \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m \\<Longrightarrow>\n    defAss g n v", "have \"dominates g m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominates g m n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       m \\<in> set ns", "fix ns'"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       m \\<in> set ns", "assume ns': \"g \\<turnstile> Entry g-ns'\\<rightarrow>n\""], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n\ngoal (2 subgoals):\n 1. n \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       m \\<in> set ns", "from defAssD[OF asm this]"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>set ns'. v \\<in> allDefs g n", "obtain m' where m': \"m' \\<in> set ns'\" \"v \\<in> allDefs g m'\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>set ns'. v \\<in> allDefs g n\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<lbrakk>m' \\<in> set ns'; v \\<in> allDefs g m'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m' \\<in> set ns'\n  v \\<in> allDefs g m'\n\ngoal (2 subgoals):\n 1. n \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       m \\<in> set ns", "with m ns ns'"], ["proof (chain)\npicking this:\n  m \\<in> set ns\n  v \\<in> allDefs g m\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n  m' \\<in> set ns'\n  v \\<in> allDefs g m'", "have \"m' = m\""], ["proof (prove)\nusing this:\n  m \\<in> set ns\n  v \\<in> allDefs g m\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n  m' \\<in> set ns'\n  v \\<in> allDefs g m'\n\ngoal (1 subgoal):\n 1. m' = m", "by - (rule allDefs_disjoint', auto)"], ["proof (state)\nthis:\n  m' = m\n\ngoal (2 subgoals):\n 1. n \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       m \\<in> set ns", "with m'"], ["proof (chain)\npicking this:\n  m' \\<in> set ns'\n  v \\<in> allDefs g m'\n  m' = m", "show \"m \\<in> set ns'\""], ["proof (prove)\nusing this:\n  m' \\<in> set ns'\n  v \\<in> allDefs g m'\n  m' = m\n\ngoal (1 subgoal):\n 1. m \\<in> set ns'", "by simp"], ["proof (state)\nthis:\n  m \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "qed simp"], ["proof (state)\nthis:\n  dominates g m n\n\ngoal (2 subgoals):\n 1. defAss g n v \\<Longrightarrow>\n    \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m\n 2. \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m \\<Longrightarrow>\n    defAss g n v", "with m ns"], ["proof (chain)\npicking this:\n  m \\<in> set ns\n  v \\<in> allDefs g m\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  dominates g m n", "show \"\\<exists>m\\<in>set (\\<alpha>n g). dominates g m n \\<and> v \\<in> allDefs g m\""], ["proof (prove)\nusing this:\n  m \\<in> set ns\n  v \\<in> allDefs g m\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  dominates g m n\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<in>set (\\<alpha>n g).\n     dominates g m n \\<and> v \\<in> allDefs g m\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m \\<Longrightarrow>\n    defAss g n v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m \\<Longrightarrow>\n    defAss g n v", "assume \"\\<exists>m \\<in> set (\\<alpha>n g). dominates g m n \\<and> v \\<in> allDefs g m\""], ["proof (state)\nthis:\n  \\<exists>m\\<in>set (\\<alpha>n g).\n     dominates g m n \\<and> v \\<in> allDefs g m\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m \\<Longrightarrow>\n    defAss g n v", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<in>set (\\<alpha>n g).\n     dominates g m n \\<and> v \\<in> allDefs g m", "obtain m where[simp]: \"m \\<in> set (\\<alpha>n g)\" and m: \"dominates g m n\" \"v \\<in> allDefs g m\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<in>set (\\<alpha>n g).\n     dominates g m n \\<and> v \\<in> allDefs g m\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set (\\<alpha>n g); dominates g m n;\n         v \\<in> allDefs g m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<in> set (\\<alpha>n g)\n  dominates g m n\n  v \\<in> allDefs g m\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<in>set (\\<alpha>n g).\n       dominates g m n \\<and> v \\<in> allDefs g m \\<Longrightarrow>\n    defAss g n v", "show \"defAss g n v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defAss g n v", "proof (rule defAssI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "fix ns"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "assume \"g \\<turnstile> Entry g-ns\\<rightarrow>n\""], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "with m(1)"], ["proof (chain)\npicking this:\n  dominates g m n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n", "have \"m \\<in> set ns\""], ["proof (prove)\nusing this:\n  dominates g m n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. m \\<in> set ns", "by - (rule dominates_mid, auto)"], ["proof (state)\nthis:\n  m \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n       \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "with m(2)"], ["proof (chain)\npicking this:\n  v \\<in> allDefs g m\n  m \\<in> set ns", "show \"\\<exists>n\\<in>set ns. v \\<in> allDefs g n\""], ["proof (prove)\nusing this:\n  v \\<in> allDefs g m\n  m \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>set ns. v \\<in> allDefs g n", "by auto"], ["proof (state)\nthis:\n  \\<exists>n\\<in>set ns. v \\<in> allDefs g n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  defAss g n v\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale CFG_SSA_wf_base = CFG_SSA_base \\<alpha>e \\<alpha>n invar inEdges' Entry \"defs\" \"uses\" phis\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node::linorder \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges' :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD) list\" and\n  Entry::\"'g \\<Rightarrow> 'node\" and\n  \"defs\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val::linorder set\" and\n  \"uses\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val set\" and\n  phis :: \"'g \\<Rightarrow> ('node, 'val) phis\"\nbegin"], ["", "text \\<open>Using the SSA properties, we can map every value to its unique defining node and\n    remove the @{typ 'node} parameter of the @{term phis} map.\\<close>"], ["", "definition defNode :: \"'g \\<Rightarrow> 'val \\<Rightarrow> 'node\" where\n    defNode_code [code]: \"defNode g v \\<equiv> hd [n \\<leftarrow> \\<alpha>n g. v \\<in> allDefs g n]\""], ["", "abbreviation \"def_dominates g v' v \\<equiv> dominates g (defNode g v') (defNode g v)\""], ["", "abbreviation \"strict_def_dom g v' v \\<equiv> defNode g v' \\<noteq> defNode g v \\<and> def_dominates g v' v\""], ["", "definition \"phi g v = phis g (defNode g v,v)\""], ["", "definition[simp]: \"phiArg g v v' \\<equiv> \\<exists>vs. phi g v = Some vs \\<and> v' \\<in> set vs\""], ["", "definition[code]: \"isTrivialPhi g v v' \\<longleftrightarrow> v' \\<noteq> v \\<and>\n    (case phi g v of\n      Some vs \\<Rightarrow> set vs = {v,v'} \\<or> set vs = {v'}\n    | None \\<Rightarrow> False)\""], ["", "definition[code]: \"trivial g v \\<equiv> \\<exists>v' \\<in> allVars g. isTrivialPhi g v v'\""], ["", "definition[code]: \"redundant g \\<equiv> \\<exists>v \\<in> allVars g. trivial g v\""], ["", "definition \"defAssUses g \\<equiv> \\<forall>n \\<in> set (\\<alpha>n g). \\<forall>v \\<in> allUses g n. defAss g n v\""], ["", "text \\<open>'liveness' of an SSA value is defined inductively starting from simple uses so that\n    a circle of \\pf s is not considered live.\\<close>"], ["", "declare [[inductive_internals]]"], ["", "inductive liveVal :: \"'g \\<Rightarrow> 'val \\<Rightarrow> bool\"\n    for g :: 'g\n  where\n    liveSimple: \"\\<lbrakk>n \\<in> set (\\<alpha>n g); val \\<in> uses g n\\<rbrakk> \\<Longrightarrow> liveVal g val\"\n  | livePhi: \"\\<lbrakk>liveVal g v; phiArg g v v'\\<rbrakk> \\<Longrightarrow> liveVal g v'\""], ["", "definition \"pruned g = (\\<forall>n \\<in> set (\\<alpha>n g). \\<forall>val. val \\<in> phiDefs g n \\<longrightarrow> liveVal g val)\""], ["", "lemmas \"CFG_SSA_wf_defs\" = CFG_SSA_defs defNode_code phi_def isTrivialPhi_def trivial_def redundant_def liveVal_def pruned_def"], ["", "end"], ["", "locale CFG_SSA_wf = CFG_SSA \\<alpha>e \\<alpha>n invar inEdges' Entry \"defs\" \"uses\" phis + CFG_SSA_wf_base \\<alpha>e \\<alpha>n invar inEdges' Entry \"defs\" \"uses\" phis\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node::linorder \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges' :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD) list\" and\n  Entry::\"'g \\<Rightarrow> 'node\" and\n  \"defs\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val::linorder set\" and\n  \"uses\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val set\" and\n  phis :: \"'g \\<Rightarrow> ('node, 'val) phis\" +\n  assumes allUses_def_ass: \"\\<lbrakk>v \\<in> allUses g n; n \\<in> set (\\<alpha>n g)\\<rbrakk> \\<Longrightarrow> defAss g n v\"\n  assumes Entry_no_phis[simp]: \"phis g (Entry g,v) = None\"\nbegin"], ["", "lemma allVars_in_allDefs: \"v \\<in> allVars g \\<Longrightarrow> \\<exists>n \\<in> set (\\<alpha>n g). v \\<in> allDefs g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> allVars g \\<Longrightarrow>\n    \\<exists>n\\<in>set (\\<alpha>n g). v \\<in> allDefs g n", "unfolding allVars_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> (\\<Union>n\\<in>set (\\<alpha>n g).\n                allDefs g n \\<union> allUses g n) \\<Longrightarrow>\n    \\<exists>n\\<in>set (\\<alpha>n g). v \\<in> allDefs g n", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (\\<alpha>n g); v \\<in> allUses g x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>set (\\<alpha>n g).\n                            v \\<in> allDefs g n", "apply (drule(1) allUses_def_ass)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (\\<alpha>n g); defAss g x v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>set (\\<alpha>n g).\n                            v \\<in> allDefs g n", "apply (clarsimp simp: defAss_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (\\<alpha>n g);\n        \\<forall>ns.\n           g \\<turnstile> Entry g-ns\\<rightarrow>x \\<longrightarrow>\n           (\\<exists>n\\<in>set ns. v \\<in> allDefs g n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>set (\\<alpha>n g).\n                            v \\<in> allDefs g n", "apply (drule Entry_reaches)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>ns.\n          g \\<turnstile> Entry g-ns\\<rightarrow>x \\<longrightarrow>\n          (\\<exists>n\\<in>set ns. v \\<in> allDefs g n) \\<Longrightarrow>\n       invar g\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>ns.\n                   g \\<turnstile> Entry g-ns\\<rightarrow>x \\<longrightarrow>\n                   (\\<exists>n\\<in>set ns. v \\<in> allDefs g n);\n        \\<exists>ns. g \\<turnstile> Entry g-ns\\<rightarrow>x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>set (\\<alpha>n g).\n                            v \\<in> allDefs g n", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>ns.\n                   g \\<turnstile> Entry g-ns\\<rightarrow>x \\<longrightarrow>\n                   (\\<exists>n\\<in>set ns. v \\<in> allDefs g n);\n        \\<exists>ns. g \\<turnstile> Entry g-ns\\<rightarrow>x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>set (\\<alpha>n g).\n                            v \\<in> allDefs g n", "by fastforce"], ["", "lemma phiDefs_Entry_empty[simp]: \"phiDefs g (Entry g) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phiDefs g (Entry g) = {}", "by (auto simp: phiDefs_def)"], ["", "lemma phi_Entry_empty[simp]: \"defNode g v = Entry g \\<Longrightarrow> phi g v = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g v = Entry g \\<Longrightarrow> phi g v = None", "by (simp add:phi_def)"], ["", "lemma defNode_ex1:\n    assumes \"v \\<in> allVars g\"\n    shows \"\\<exists>!n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n", "proof (rule ex_ex1I)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n\n 2. \\<And>n y.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n;\n        y \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g y\\<rbrakk>\n       \\<Longrightarrow> n = y", "show \"\\<exists>n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n", "from assms(1)"], ["proof (chain)\npicking this:\n  v \\<in> allVars g", "obtain n where n: \"n \\<in> set (\\<alpha>n g)\" \"v \\<in> allDefs g n \\<or> v \\<in> allUses g n\""], ["proof (prove)\nusing this:\n  v \\<in> allVars g\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> set (\\<alpha>n g);\n         v \\<in> allDefs g n \\<or> v \\<in> allUses g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp:allVars_def)"], ["proof (state)\nthis:\n  n \\<in> set (\\<alpha>n g)\n  v \\<in> allDefs g n \\<or> v \\<in> allUses g n\n\ngoal (1 subgoal):\n 1. \\<exists>n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n", "thus ?thesis"], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g)\n  v \\<in> allDefs g n \\<or> v \\<in> allUses g n\n\ngoal (1 subgoal):\n 1. \\<exists>n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n", "proof (cases \"v \\<in> allUses g n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n \\<or> v \\<in> allUses g n;\n     v \\<in> allUses g n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         n \\<in> set (\\<alpha>n g) \\<and>\n                         v \\<in> allDefs g n\n 2. \\<lbrakk>n \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n \\<or> v \\<in> allUses g n;\n     v \\<notin> allUses g n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         n \\<in> set (\\<alpha>n g) \\<and>\n                         v \\<in> allDefs g n", "case True"], ["proof (state)\nthis:\n  v \\<in> allUses g n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n \\<or> v \\<in> allUses g n;\n     v \\<in> allUses g n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         n \\<in> set (\\<alpha>n g) \\<and>\n                         v \\<in> allDefs g n\n 2. \\<lbrakk>n \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n \\<or> v \\<in> allUses g n;\n     v \\<notin> allUses g n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         n \\<in> set (\\<alpha>n g) \\<and>\n                         v \\<in> allDefs g n", "from n(1)"], ["proof (chain)\npicking this:\n  n \\<in> set (\\<alpha>n g)", "obtain ns where ns: \"g \\<turnstile> Entry g-ns\\<rightarrow>n\""], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (atomize_elim, rule Entry_reaches, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n \\<or> v \\<in> allUses g n;\n     v \\<in> allUses g n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         n \\<in> set (\\<alpha>n g) \\<and>\n                         v \\<in> allDefs g n\n 2. \\<lbrakk>n \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n \\<or> v \\<in> allUses g n;\n     v \\<notin> allUses g n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         n \\<in> set (\\<alpha>n g) \\<and>\n                         v \\<in> allDefs g n", "with allUses_def_ass[OF True n(1)]"], ["proof (chain)\npicking this:\n  defAss g n v\n  g \\<turnstile> Entry g-ns\\<rightarrow>n", "obtain m where m: \"m \\<in> set ns\" \"v \\<in> allDefs g m\""], ["proof (prove)\nusing this:\n  defAss g n v\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set ns; v \\<in> allDefs g m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (drule defAssD, auto)"], ["proof (state)\nthis:\n  m \\<in> set ns\n  v \\<in> allDefs g m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n \\<or> v \\<in> allUses g n;\n     v \\<in> allUses g n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         n \\<in> set (\\<alpha>n g) \\<and>\n                         v \\<in> allDefs g n\n 2. \\<lbrakk>n \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n \\<or> v \\<in> allUses g n;\n     v \\<notin> allUses g n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         n \\<in> set (\\<alpha>n g) \\<and>\n                         v \\<in> allDefs g n", "from ns this(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  m \\<in> set ns", "have \"m \\<in> set (\\<alpha>n g)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  m \\<in> set ns\n\ngoal (1 subgoal):\n 1. m \\<in> set (\\<alpha>n g)", "by (rule path2_in_\\<alpha>n)"], ["proof (state)\nthis:\n  m \\<in> set (\\<alpha>n g)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n \\<or> v \\<in> allUses g n;\n     v \\<in> allUses g n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         n \\<in> set (\\<alpha>n g) \\<and>\n                         v \\<in> allDefs g n\n 2. \\<lbrakk>n \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n \\<or> v \\<in> allUses g n;\n     v \\<notin> allUses g n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         n \\<in> set (\\<alpha>n g) \\<and>\n                         v \\<in> allDefs g n", "with n(1) m"], ["proof (chain)\npicking this:\n  n \\<in> set (\\<alpha>n g)\n  m \\<in> set ns\n  v \\<in> allDefs g m\n  m \\<in> set (\\<alpha>n g)", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g)\n  m \\<in> set ns\n  v \\<in> allDefs g m\n  m \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. \\<exists>n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n", "by auto"], ["proof (state)\nthis:\n  \\<exists>n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> set (\\<alpha>n g);\n     v \\<in> allDefs g n \\<or> v \\<in> allUses g n;\n     v \\<notin> allUses g n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         n \\<in> set (\\<alpha>n g) \\<and>\n                         v \\<in> allDefs g n", "qed auto"], ["proof (state)\nthis:\n  \\<exists>n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n\n\ngoal (1 subgoal):\n 1. \\<And>n y.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n;\n        y \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g y\\<rbrakk>\n       \\<Longrightarrow> n = y", "show \"\\<And>n m. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n \\<Longrightarrow> m \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g m \\<Longrightarrow> n = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n;\n        m \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g m\\<rbrakk>\n       \\<Longrightarrow> n = m", "using allDefs_disjoint"], ["proof (prove)\nusing this:\n  \\<lbrakk>?n \\<in> set (\\<alpha>n ?g); ?m \\<in> set (\\<alpha>n ?g);\n   ?n \\<noteq> ?m\\<rbrakk>\n  \\<Longrightarrow> allDefs ?g ?n \\<inter> allDefs ?g ?m = {}\n\ngoal (1 subgoal):\n 1. \\<And>n m.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n;\n        m \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g m\\<rbrakk>\n       \\<Longrightarrow> n = m", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?n1 \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g ?n1;\n   ?m1 \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g ?m1\\<rbrakk>\n  \\<Longrightarrow> ?n1 = ?m1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma defNode_def: \"v \\<in> allVars g \\<Longrightarrow> defNode g v = (THE n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> allVars g \\<Longrightarrow>\n    defNode g v =\n    (THE n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n)", "unfolding defNode_code"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> allVars g \\<Longrightarrow>\n    hd (filter (\\<lambda>n. v \\<in> allDefs g n) (\\<alpha>n g)) =\n    (THE n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n)", "by (rule the1_list[symmetric], rule defNode_ex1)"], ["", "lemma defNode[simp]:\n    assumes \"v \\<in> allVars g\"\n    shows  \"(defNode g v) \\<in> set (\\<alpha>n g)\" \"v \\<in> allDefs g (defNode g v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g v \\<in> set (\\<alpha>n g) &&& v \\<in> allDefs g (defNode g v)", "apply (atomize(full))"], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g v \\<in> set (\\<alpha>n g) \\<and>\n    v \\<in> allDefs g (defNode g v)", "unfolding defNode_def[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n)\n    \\<in> set (\\<alpha>n g) \\<and>\n    v \\<in> allDefs g\n             (THE n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n)", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> allVars g\n\ngoal (1 subgoal):\n 1. (THE n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n)\n    \\<in> set (\\<alpha>n g) \\<and>\n    v \\<in> allDefs g\n             (THE n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n)", "by - (rule theI', rule defNode_ex1)"], ["", "lemma defNode_eq[intro]:\n    assumes \"n \\<in> set (\\<alpha>n g)\" \"v \\<in> allDefs g n\"\n    shows \"defNode g v = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g v = n", "apply (subst defNode_def, rule allDefs_in_allVars[OF assms(2) assms(1)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE n. n \\<in> set (\\<alpha>n g) \\<and> v \\<in> allDefs g n) = n", "by (rule the1_equality, rule defNode_ex1, rule allDefs_in_allVars[where n=n], simp_all add:assms)"], ["", "lemma defNode_cases[consumes 1]:\n    assumes \"v \\<in> allVars g\"\n    obtains (simpleDef) \"v \\<in> defs g (defNode g v)\"\n          | (phi)       \"phi g v \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis;\n     phi g v \\<noteq> None \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof (cases \"v \\<in> defs g (defNode g v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis;\n     phi g v \\<noteq> None \\<Longrightarrow> thesis;\n     v \\<in> defs g (defNode g v)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis;\n     phi g v \\<noteq> None \\<Longrightarrow> thesis;\n     v \\<notin> defs g (defNode g v)\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  v \\<in> defs g (defNode g v)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis;\n     phi g v \\<noteq> None \\<Longrightarrow> thesis;\n     v \\<in> defs g (defNode g v)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis;\n     phi g v \\<noteq> None \\<Longrightarrow> thesis;\n     v \\<notin> defs g (defNode g v)\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus thesis"], ["proof (prove)\nusing this:\n  v \\<in> defs g (defNode g v)\n\ngoal (1 subgoal):\n 1. thesis", "by (rule simpleDef)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis;\n     phi g v \\<noteq> None \\<Longrightarrow> thesis;\n     v \\<notin> defs g (defNode g v)\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis;\n     phi g v \\<noteq> None \\<Longrightarrow> thesis;\n     v \\<notin> defs g (defNode g v)\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  v \\<notin> defs g (defNode g v)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis;\n     phi g v \\<noteq> None \\<Longrightarrow> thesis;\n     v \\<notin> defs g (defNode g v)\\<rbrakk>\n    \\<Longrightarrow> thesis", "with assms[THEN defNode(2)]"], ["proof (chain)\npicking this:\n  v \\<in> allDefs g (defNode g v)\n  v \\<notin> defs g (defNode g v)", "show thesis"], ["proof (prove)\nusing this:\n  v \\<in> allDefs g (defNode g v)\n  v \\<notin> defs g (defNode g v)\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule phi, auto simp: allDefs_def phiDefs_def phi_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phi_phiDefs[simp]: \"phi g v = Some vs \\<Longrightarrow> v \\<in> phiDefs g (defNode g v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi g v = Some vs \\<Longrightarrow> v \\<in> phiDefs g (defNode g v)", "by (auto simp:phiDefs_def phi_def)"], ["", "lemma simpleDef_not_phi:\n    assumes \"n \\<in> set (\\<alpha>n g)\" \"v \\<in> defs g n\"\n    shows \"phi g v = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi g v = None", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. phi g v = None", "from assms"], ["proof (chain)\npicking this:\n  n \\<in> set (\\<alpha>n g)\n  v \\<in> defs g n", "have \"defNode g v = n\""], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g)\n  v \\<in> defs g n\n\ngoal (1 subgoal):\n 1. defNode g v = n", "by auto"], ["proof (state)\nthis:\n  defNode g v = n\n\ngoal (1 subgoal):\n 1. phi g v = None", "with assms"], ["proof (chain)\npicking this:\n  n \\<in> set (\\<alpha>n g)\n  v \\<in> defs g n\n  defNode g v = n", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g)\n  v \\<in> defs g n\n  defNode g v = n\n\ngoal (1 subgoal):\n 1. phi g v = None", "using simpleDefs_phiDefs_disjoint"], ["proof (prove)\nusing this:\n  n \\<in> set (\\<alpha>n g)\n  v \\<in> defs g n\n  defNode g v = n\n  ?n \\<in> set (\\<alpha>n ?g) \\<Longrightarrow>\n  defs ?g ?n \\<inter> phiDefs ?g ?n = {}\n\ngoal (1 subgoal):\n 1. phi g v = None", "by (auto simp: phi_def phiDefs_def)"], ["proof (state)\nthis:\n  phi g v = None\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phi_wf: \"phi g v = Some vs \\<Longrightarrow> length (predecessors g (defNode g v)) = length vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi g v = Some vs \\<Longrightarrow>\n    length (predecessors g (defNode g v)) = length vs", "by (rule phis_wf) (simp add:phi_def)"], ["", "lemma phi_finite: \"finite (dom (phi g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom (phi g))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (dom (phi g))", "let ?f = \"\\<lambda>v. (defNode g v,v)\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite (dom (phi g))", "have \"phi g = phis g \\<circ> ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi g = phis g \\<circ> (\\<lambda>v. (defNode g v, v))", "by (auto simp add:phi_def)"], ["proof (state)\nthis:\n  phi g = phis g \\<circ> (\\<lambda>v. (defNode g v, v))\n\ngoal (1 subgoal):\n 1. finite (dom (phi g))", "moreover"], ["proof (state)\nthis:\n  phi g = phis g \\<circ> (\\<lambda>v. (defNode g v, v))\n\ngoal (1 subgoal):\n 1. finite (dom (phi g))", "have \"inj ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>v. (defNode g v, v))", "by (auto intro:injI)"], ["proof (state)\nthis:\n  inj (\\<lambda>v. (defNode g v, v))\n\ngoal (1 subgoal):\n 1. finite (dom (phi g))", "hence \"finite (dom (phis g \\<circ> ?f))\""], ["proof (prove)\nusing this:\n  inj (\\<lambda>v. (defNode g v, v))\n\ngoal (1 subgoal):\n 1. finite (dom (phis g \\<circ> (\\<lambda>v. (defNode g v, v))))", "by - (rule finite_dom_comp, auto simp add:phis_finite inj_on_def)"], ["proof (state)\nthis:\n  finite (dom (phis g \\<circ> (\\<lambda>v. (defNode g v, v))))\n\ngoal (1 subgoal):\n 1. finite (dom (phi g))", "ultimately"], ["proof (chain)\npicking this:\n  phi g = phis g \\<circ> (\\<lambda>v. (defNode g v, v))\n  finite (dom (phis g \\<circ> (\\<lambda>v. (defNode g v, v))))", "show ?thesis"], ["proof (prove)\nusing this:\n  phi g = phis g \\<circ> (\\<lambda>v. (defNode g v, v))\n  finite (dom (phis g \\<circ> (\\<lambda>v. (defNode g v, v))))\n\ngoal (1 subgoal):\n 1. finite (dom (phi g))", "by simp"], ["proof (state)\nthis:\n  finite (dom (phi g))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phiUses_exI:\n    assumes \"m \\<in> set (predecessors g n)\" \"phis g (n,v) = Some vs\" \"n \\<in> set (\\<alpha>n g)\"\n    obtains v' where \"v' \\<in> phiUses g m\" \"v' \\<in> set vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> phiUses g m; v' \\<in> set vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> phiUses g m; v' \\<in> set vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(1)"], ["proof (chain)\npicking this:\n  m \\<in> set (predecessors g n)", "obtain i where i: \"m = predecessors g n ! i\" \"i < length (predecessors g n)\""], ["proof (prove)\nusing this:\n  m \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>m = predecessors g n ! i;\n         i < length (predecessors g n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  m = predecessors g n ! i\n  i < length (predecessors g n)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> phiUses g m; v' \\<in> set vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms(2) phis_wf"], ["proof (chain)\npicking this:\n  phis g (n, v) = Some vs\n  phis ?g (?n, ?v) = Some ?args \\<Longrightarrow>\n  length (predecessors ?g ?n) = length ?args\n  m = predecessors g n ! i\n  i < length (predecessors g n)", "have[simp]: \"i < length vs\""], ["proof (prove)\nusing this:\n  phis g (n, v) = Some vs\n  phis ?g (?n, ?v) = Some ?args \\<Longrightarrow>\n  length (predecessors ?g ?n) = length ?args\n  m = predecessors g n ! i\n  i < length (predecessors g n)\n\ngoal (1 subgoal):\n 1. i < length vs", "by (auto simp add:phi_def)"], ["proof (state)\nthis:\n  i < length vs\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> phiUses g m; v' \\<in> set vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from i assms(2,3)"], ["proof (chain)\npicking this:\n  m = predecessors g n ! i\n  i < length (predecessors g n)\n  phis g (n, v) = Some vs\n  n \\<in> set (\\<alpha>n g)", "have \"vs ! i \\<in> phiUses g m\""], ["proof (prove)\nusing this:\n  m = predecessors g n ! i\n  i < length (predecessors g n)\n  phis g (n, v) = Some vs\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. vs ! i \\<in> phiUses g m", "by - (rule phiUsesI, auto simp add:phiUses_def phi_def set_zip)"], ["proof (state)\nthis:\n  vs ! i \\<in> phiUses g m\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> phiUses g m; v' \\<in> set vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus thesis"], ["proof (prove)\nusing this:\n  vs ! i \\<in> phiUses g m\n\ngoal (1 subgoal):\n 1. thesis", "by (rule that) (auto simp add:i(2) phis_wf)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phiArg_exI:\n    assumes \"m \\<in> set (predecessors g (defNode g v))\" \"phi g v \\<noteq> None\" and[simp]: \"v \\<in> allVars g\"\n    obtains v' where \"v' \\<in> phiUses g m\" \"phiArg g v v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> phiUses g m; phiArg g v v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> phiUses g m; phiArg g v v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(2)"], ["proof (chain)\npicking this:\n  phi g v \\<noteq> None", "obtain vs where \"phi g v = Some vs\""], ["proof (prove)\nusing this:\n  phi g v \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>vs. phi g v = Some vs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  phi g v = Some vs\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> phiUses g m; phiArg g v v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms(1)"], ["proof (chain)\npicking this:\n  m \\<in> set (predecessors g (defNode g v))\n  phi g v = Some vs", "show thesis"], ["proof (prove)\nusing this:\n  m \\<in> set (predecessors g (defNode g v))\n  phi g v = Some vs\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule phiUses_exI, auto intro!:that simp: phi_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phiUses_exI':\n    assumes \"phiArg g p q\" and[simp]: \"p \\<in> allVars g\"\n    obtains m where \"q \\<in> phiUses g m\" \"m \\<in> set (predecessors g (defNode g p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>q \\<in> phiUses g m;\n         m \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>q \\<in> phiUses g m;\n         m \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?n = \"defNode g p\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>q \\<in> phiUses g m;\n         m \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(1)"], ["proof (chain)\npicking this:\n  phiArg g p q", "obtain i vs where vs: \"phi g p = Some vs\" and i: \"q = vs ! i\" \"i < length vs\""], ["proof (prove)\nusing this:\n  phiArg g p q\n\ngoal (1 subgoal):\n 1. (\\<And>vs i.\n        \\<lbrakk>phi g p = Some vs; q = vs ! i; i < length vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth phiArg_def)"], ["proof (state)\nthis:\n  phi g p = Some vs\n  q = vs ! i\n  i < length vs\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>q \\<in> phiUses g m;\n         m \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with phis_wf"], ["proof (chain)\npicking this:\n  phis ?g (?n, ?v) = Some ?args \\<Longrightarrow>\n  length (predecessors ?g ?n) = length ?args\n  phi g p = Some vs\n  q = vs ! i\n  i < length vs", "have[simp]: \"i < length (predecessors g ?n)\""], ["proof (prove)\nusing this:\n  phis ?g (?n, ?v) = Some ?args \\<Longrightarrow>\n  length (predecessors ?g ?n) = length ?args\n  phi g p = Some vs\n  q = vs ! i\n  i < length vs\n\ngoal (1 subgoal):\n 1. i < length (predecessors g (defNode g p))", "by (auto simp add:phi_def)"], ["proof (state)\nthis:\n  i < length (predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>q \\<in> phiUses g m;\n         m \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from vs i"], ["proof (chain)\npicking this:\n  phi g p = Some vs\n  q = vs ! i\n  i < length vs", "have \"q \\<in> phiUses g (predecessors g ?n ! i)\""], ["proof (prove)\nusing this:\n  phi g p = Some vs\n  q = vs ! i\n  i < length vs\n\ngoal (1 subgoal):\n 1. q \\<in> phiUses g (predecessors g (defNode g p) ! i)", "by - (rule phiUsesI, auto simp add:phiUses_def phi_def set_zip)"], ["proof (state)\nthis:\n  q \\<in> phiUses g (predecessors g (defNode g p) ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>q \\<in> phiUses g m;\n         m \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus thesis"], ["proof (prove)\nusing this:\n  q \\<in> phiUses g (predecessors g (defNode g p) ! i)\n\ngoal (1 subgoal):\n 1. thesis", "by (rule that) (auto simp add:i(2) phis_wf)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phiArg_in_allVars[simp]:\n    assumes \"phiArg g v v'\"\n    shows \"v' \\<in> allVars g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v' \\<in> allVars g", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. v' \\<in> allVars g", "let ?n = \"defNode g v\""], ["proof (state)\ngoal (1 subgoal):\n 1. v' \\<in> allVars g", "from assms(1)"], ["proof (chain)\npicking this:\n  phiArg g v v'", "obtain vs where vs: \"phi g v = Some vs\" \"v' \\<in> set vs\""], ["proof (prove)\nusing this:\n  phiArg g v v'\n\ngoal (1 subgoal):\n 1. (\\<And>vs.\n        \\<lbrakk>phi g v = Some vs; v' \\<in> set vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  phi g v = Some vs\n  v' \\<in> set vs\n\ngoal (1 subgoal):\n 1. v' \\<in> allVars g", "then"], ["proof (chain)\npicking this:\n  phi g v = Some vs\n  v' \\<in> set vs", "obtain m where m: \"(m,v') \\<in> set (zip (predecessors g ?n) vs)\""], ["proof (prove)\nusing this:\n  phi g v = Some vs\n  v' \\<in> set vs\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        (m, v')\n        \\<in> set (zip (predecessors g (defNode g v)) vs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by - (rule set_zip_leftI, rule phi_wf)"], ["proof (state)\nthis:\n  (m, v') \\<in> set (zip (predecessors g (defNode g v)) vs)\n\ngoal (1 subgoal):\n 1. v' \\<in> allVars g", "from vs(1)"], ["proof (chain)\npicking this:\n  phi g v = Some vs", "have n: \"?n \\<in> set (\\<alpha>n g)\""], ["proof (prove)\nusing this:\n  phi g v = Some vs\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set (\\<alpha>n g)", "by (simp add: phi_def phis_in_\\<alpha>n)"], ["proof (state)\nthis:\n  defNode g v \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. v' \\<in> allVars g", "with m"], ["proof (chain)\npicking this:\n  (m, v') \\<in> set (zip (predecessors g (defNode g v)) vs)\n  defNode g v \\<in> set (\\<alpha>n g)", "have[simp]: \"m \\<in> set (\\<alpha>n g)\""], ["proof (prove)\nusing this:\n  (m, v') \\<in> set (zip (predecessors g (defNode g v)) vs)\n  defNode g v \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. m \\<in> set (\\<alpha>n g)", "by auto"], ["proof (state)\nthis:\n  m \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. v' \\<in> allVars g", "from n m vs"], ["proof (chain)\npicking this:\n  defNode g v \\<in> set (\\<alpha>n g)\n  (m, v') \\<in> set (zip (predecessors g (defNode g v)) vs)\n  phi g v = Some vs\n  v' \\<in> set vs", "have \"v' \\<in> phiUses g m\""], ["proof (prove)\nusing this:\n  defNode g v \\<in> set (\\<alpha>n g)\n  (m, v') \\<in> set (zip (predecessors g (defNode g v)) vs)\n  phi g v = Some vs\n  v' \\<in> set vs\n\ngoal (1 subgoal):\n 1. v' \\<in> phiUses g m", "by - (rule phiUsesI, simp_all add:phi_def)"], ["proof (state)\nthis:\n  v' \\<in> phiUses g m\n\ngoal (1 subgoal):\n 1. v' \\<in> allVars g", "thus ?thesis"], ["proof (prove)\nusing this:\n  v' \\<in> phiUses g m\n\ngoal (1 subgoal):\n 1. v' \\<in> allVars g", "by - (rule allUses_in_allVars, auto simp:allUses_def)"], ["proof (state)\nthis:\n  v' \\<in> allVars g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma defAss_defNode:\n    assumes \"defAss g m v\" \"v \\<in> allVars g\" \"g \\<turnstile> Entry g-ns\\<rightarrow>m\"\n    shows \"defNode g v \\<in> set ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g v \\<in> set ns", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g v \\<in> set ns", "from assms"], ["proof (chain)\npicking this:\n  defAss g m v\n  v \\<in> allVars g\n  g \\<turnstile> Entry g-ns\\<rightarrow>m", "obtain n where n: \"n \\<in> set ns\" \"v \\<in> allDefs g n\""], ["proof (prove)\nusing this:\n  defAss g m v\n  v \\<in> allVars g\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> set ns; v \\<in> allDefs g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp:defAss_def)"], ["proof (state)\nthis:\n  n \\<in> set ns\n  v \\<in> allDefs g n\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set ns", "with assms(3)"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n  n \\<in> set ns\n  v \\<in> allDefs g n", "have \"n = defNode g v\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n  n \\<in> set ns\n  v \\<in> allDefs g n\n\ngoal (1 subgoal):\n 1. n = defNode g v", "by - (rule defNode_eq[symmetric], auto)"], ["proof (state)\nthis:\n  n = defNode g v\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set ns", "with n"], ["proof (chain)\npicking this:\n  n \\<in> set ns\n  v \\<in> allDefs g n\n  n = defNode g v", "show \"defNode g v \\<in> set ns\""], ["proof (prove)\nusing this:\n  n \\<in> set ns\n  v \\<in> allDefs g n\n  n = defNode g v\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set ns", "by (simp add:defAss_def)"], ["proof (state)\nthis:\n  defNode g v \\<in> set ns\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma defUse_path_ex:\n    assumes \"v \\<in> allUses g m\" \"m \\<in> set (\\<alpha>n g)\"\n    obtains ns where \"g \\<turnstile> defNode g v-ns\\<rightarrow>m\" \"EntryPath g ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n         EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n         EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> allUses g m\n  m \\<in> set (\\<alpha>n g)", "have \"defAss g m v\""], ["proof (prove)\nusing this:\n  v \\<in> allUses g m\n  m \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. defAss g m v", "by - (rule allUses_def_ass, auto)"], ["proof (state)\nthis:\n  defAss g m v\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n         EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  defAss g m v\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n         EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> allUses g m\n  m \\<in> set (\\<alpha>n g)", "obtain ns where ns: \"g \\<turnstile> Entry g-ns\\<rightarrow>m\" \"EntryPath g ns\""], ["proof (prove)\nusing this:\n  v \\<in> allUses g m\n  m \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>m;\n         EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (atomize_elim, rule Entry_reachesE, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n  EntryPath g ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n         EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  defAss g m v\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n  EntryPath g ns", "have \"defNode g v \\<in> set ns\""], ["proof (prove)\nusing this:\n  defAss g m v\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n  EntryPath g ns\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set ns", "using assms(1)"], ["proof (prove)\nusing this:\n  defAss g m v\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n  EntryPath g ns\n  v \\<in> allUses g m\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set ns", "by - (rule defAss_defNode, auto)"], ["proof (state)\nthis:\n  defNode g v \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n         EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with ns(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n  defNode g v \\<in> set ns", "obtain ns' where \"g \\<turnstile> defNode g v-ns'\\<rightarrow>m\" \"suffix ns' ns\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>m\n  defNode g v \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns'\\<rightarrow>m;\n         suffix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule path2_split_ex', auto simp: Sublist.suffix_def)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g v-ns'\\<rightarrow>m\n  suffix ns' ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n         EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g v-ns'\\<rightarrow>m\n  suffix ns' ns\n\ngoal (1 subgoal):\n 1. thesis", "using ns(2)"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g v-ns'\\<rightarrow>m\n  suffix ns' ns\n  EntryPath g ns\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that, assumption, rule EntryPath_suffix, auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma defUse_path_dominated:\n    assumes \"g \\<turnstile> defNode g v-ns\\<rightarrow>n\" \"defNode g v \\<notin> set (tl ns)\" \"v \\<in> allUses g n\" \"n' \\<in> set ns\"\n    shows \"dominates g (defNode g v) n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominates g (defNode g v) n'", "proof (rule dominatesI)"], ["proof (state)\ngoal (2 subgoals):\n 1. n' \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n' \\<Longrightarrow>\n       defNode g v \\<in> set ns", "fix es"], ["proof (state)\ngoal (2 subgoals):\n 1. n' \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n' \\<Longrightarrow>\n       defNode g v \\<in> set ns", "assume asm: \"g \\<turnstile> Entry g-es\\<rightarrow>n'\""], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-es\\<rightarrow>n'\n\ngoal (2 subgoals):\n 1. n' \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n' \\<Longrightarrow>\n       defNode g v \\<in> set ns", "from assms(1,4)"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g v-ns\\<rightarrow>n\n  n' \\<in> set ns", "obtain ns' where ns': \"g \\<turnstile> n'-ns'\\<rightarrow>n\" \"suffix ns' ns\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g v-ns\\<rightarrow>n\n  n' \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n'-ns'\\<rightarrow>n; suffix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule path2_split_ex, auto simp: Sublist.suffix_def)"], ["proof (state)\nthis:\n  g \\<turnstile> n'-ns'\\<rightarrow>n\n  suffix ns' ns\n\ngoal (2 subgoals):\n 1. n' \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n' \\<Longrightarrow>\n       defNode g v \\<in> set ns", "from assms"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g v-ns\\<rightarrow>n\n  defNode g v \\<notin> set (tl ns)\n  v \\<in> allUses g n\n  n' \\<in> set ns", "have \"defAss g n v\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g v-ns\\<rightarrow>n\n  defNode g v \\<notin> set (tl ns)\n  v \\<in> allUses g n\n  n' \\<in> set ns\n\ngoal (1 subgoal):\n 1. defAss g n v", "by - (rule allUses_def_ass, auto)"], ["proof (state)\nthis:\n  defAss g n v\n\ngoal (2 subgoals):\n 1. n' \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n' \\<Longrightarrow>\n       defNode g v \\<in> set ns", "with asm ns'(1) assms(3)"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-es\\<rightarrow>n'\n  g \\<turnstile> n'-ns'\\<rightarrow>n\n  v \\<in> allUses g n\n  defAss g n v", "have \"defNode g v \\<in> set (es@tl ns')\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-es\\<rightarrow>n'\n  g \\<turnstile> n'-ns'\\<rightarrow>n\n  v \\<in> allUses g n\n  defAss g n v\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set (es @ tl ns')", "by - (rule defAss_defNode, auto)"], ["proof (state)\nthis:\n  defNode g v \\<in> set (es @ tl ns')\n\ngoal (2 subgoals):\n 1. n' \\<in> set (\\<alpha>n g)\n 2. \\<And>ns.\n       g \\<turnstile> Entry g-ns\\<rightarrow>n' \\<Longrightarrow>\n       defNode g v \\<in> set ns", "with suffix_tl_subset[OF ns'(2)] assms(2)"], ["proof (chain)\npicking this:\n  set (tl ns') \\<subseteq> set (tl ns)\n  defNode g v \\<notin> set (tl ns)\n  defNode g v \\<in> set (es @ tl ns')", "show \"defNode g v \\<in> set es\""], ["proof (prove)\nusing this:\n  set (tl ns') \\<subseteq> set (tl ns)\n  defNode g v \\<notin> set (tl ns)\n  defNode g v \\<in> set (es @ tl ns')\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set es", "by auto"], ["proof (state)\nthis:\n  defNode g v \\<in> set es\n\ngoal (1 subgoal):\n 1. n' \\<in> set (\\<alpha>n g)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n' \\<in> set (\\<alpha>n g)", "show \"n' \\<in> set (\\<alpha>n g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' \\<in> set (\\<alpha>n g)", "using assms(1,4)"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g v-ns\\<rightarrow>n\n  n' \\<in> set ns\n\ngoal (1 subgoal):\n 1. n' \\<in> set (\\<alpha>n g)", "by auto"], ["proof (state)\nthis:\n  n' \\<in> set (\\<alpha>n g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma allUses_dominated:\n    assumes \"v \\<in> allUses g n\" \"n \\<in> set (\\<alpha>n g)\"\n    shows \"dominates g (defNode g v) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominates g (defNode g v) n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. dominates g (defNode g v) n", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> allUses g n\n  n \\<in> set (\\<alpha>n g)", "obtain ns where \"g \\<turnstile> defNode g v-ns\\<rightarrow>n\" \"defNode g v \\<notin> set (tl ns)\""], ["proof (prove)\nusing this:\n  v \\<in> allUses g n\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>n;\n         defNode g v \\<notin> set (tl ns)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule defUse_path_ex, auto elim: simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g v-ns\\<rightarrow>n\n  defNode g v \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. dominates g (defNode g v) n", "with assms(1)"], ["proof (chain)\npicking this:\n  v \\<in> allUses g n\n  g \\<turnstile> defNode g v-ns\\<rightarrow>n\n  defNode g v \\<notin> set (tl ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> allUses g n\n  g \\<turnstile> defNode g v-ns\\<rightarrow>n\n  defNode g v \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. dominates g (defNode g v) n", "by - (rule defUse_path_dominated, auto)"], ["proof (state)\nthis:\n  dominates g (defNode g v) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phiArg_path_ex':\n    assumes \"phiArg g p q\" and[simp]: \"p \\<in> allVars g\"\n    obtains ns m where \"g \\<turnstile> defNode g q-ns\\<rightarrow>m\" \"EntryPath g ns\" \"q \\<in> phiUses g m\" \"m \\<in> set (predecessors g (defNode g p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns m.\n        \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>m;\n         EntryPath g ns; q \\<in> phiUses g m;\n         m \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ns m.\n        \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>m;\n         EntryPath g ns; q \\<in> phiUses g m;\n         m \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  phiArg g p q\n  p \\<in> allVars g", "obtain m where m: \"q \\<in> phiUses g m\" \"m \\<in> set (predecessors g (defNode g p))\""], ["proof (prove)\nusing this:\n  phiArg g p q\n  p \\<in> allVars g\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>q \\<in> phiUses g m;\n         m \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule phiUses_exI')"], ["proof (state)\nthis:\n  q \\<in> phiUses g m\n  m \\<in> set (predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. (\\<And>ns m.\n        \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>m;\n         EntryPath g ns; q \\<in> phiUses g m;\n         m \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  q \\<in> phiUses g m\n  m \\<in> set (predecessors g (defNode g p))", "obtain ns where \"g \\<turnstile> defNode g q-ns\\<rightarrow>m\" \"EntryPath g ns\""], ["proof (prove)\nusing this:\n  q \\<in> phiUses g m\n  m \\<in> set (predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>m;\n         EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule defUse_path_ex, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>m\n  EntryPath g ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns m.\n        \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>m;\n         EntryPath g ns; q \\<in> phiUses g m;\n         m \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with m"], ["proof (chain)\npicking this:\n  q \\<in> phiUses g m\n  m \\<in> set (predecessors g (defNode g p))\n  g \\<turnstile> defNode g q-ns\\<rightarrow>m\n  EntryPath g ns", "show thesis"], ["proof (prove)\nusing this:\n  q \\<in> phiUses g m\n  m \\<in> set (predecessors g (defNode g p))\n  g \\<turnstile> defNode g q-ns\\<rightarrow>m\n  EntryPath g ns\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phiArg_path_ex:\n    assumes \"phiArg g p q\" and[simp]: \"p \\<in> allVars g\"\n    obtains ns where \"g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p\" \"length ns > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p;\n         1 < length ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule phiArg_path_ex'[OF assms], rule, auto)"], ["", "lemma phiArg_tranclp_path_ex:\n    assumes \"r\\<^sup>+\\<^sup>+ p q\" \"p \\<in> allVars g\" and[simp]: \"\\<And>p q. r p q \\<Longrightarrow> phiArg g p q\"\n    obtains ns where \"g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p\" \"length ns > 1\"\n      \"\\<forall>n \\<in> set (butlast ns). \\<exists>p q m ns'. r p q \\<and> g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and> (defNode g q) \\<notin> set (tl ns') \\<and> q \\<in> phiUses g m \\<and> m \\<in> set (predecessors g (defNode g p)) \\<and> n \\<in> set ns' \\<and> set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p;\n         1 < length ns;\n         \\<forall>n\\<in>set (butlast ns).\n            \\<exists>p q m ns'.\n               r p q \\<and>\n               g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n               defNode g q \\<notin> set (tl ns') \\<and>\n               q \\<in> phiUses g m \\<and>\n               m \\<in> set (predecessors g (defNode g p)) \\<and>\n               n \\<in> set ns' \\<and>\n               set ns' \\<subseteq> set ns \\<and>\n               defNode g p \\<in> set ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1,2)"], ["proof (prove)\nusing this:\n  r\\<^sup>+\\<^sup>+ p q\n  p \\<in> allVars g\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p;\n         1 < length ns;\n         \\<forall>n\\<in>set (butlast ns).\n            \\<exists>p q m ns'.\n               r p q \\<and>\n               g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n               defNode g q \\<notin> set (tl ns') \\<and>\n               q \\<in> phiUses g m \\<and>\n               m \\<in> set (predecessors g (defNode g p)) \\<and>\n               n \\<in> set ns' \\<and>\n               set ns' \\<subseteq> set ns \\<and>\n               defNode g p \\<in> set ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction rule: converse_tranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>r y q;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>y z.\n       \\<lbrakk>r y z; r\\<^sup>+\\<^sup>+ z q;\n        \\<lbrakk>\\<And>ns.\n                    \\<lbrakk>g \\<turnstile> defNode g\n       q-ns\\<rightarrow>defNode g z;\n                     1 < length ns;\n                     \\<forall>n\\<in>set (butlast ns).\n                        \\<exists>p q m ns'.\n                           r p q \\<and>\n                           g \\<turnstile> defNode g\n     q-ns'\\<rightarrow>m \\<and>\n                           defNode g q \\<notin> set (tl ns') \\<and>\n                           q \\<in> phiUses g m \\<and>\n                           m \\<in> set (predecessors g (defNode g p)) \\<and>\n                           n \\<in> set ns' \\<and>\n                           set ns' \\<subseteq> set ns \\<and>\n                           defNode g p \\<in> set ns\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         z \\<in> allVars g\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (base p)"], ["proof (state)\nthis:\n  r p q\n  \\<lbrakk>g \\<turnstile> defNode g q-?ns1\\<rightarrow>defNode g p;\n   1 < length ?ns1;\n   \\<forall>n\\<in>set (butlast ?ns1).\n      \\<exists>p q m ns'.\n         r p q \\<and>\n         g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n         defNode g q \\<notin> set (tl ns') \\<and>\n         q \\<in> phiUses g m \\<and>\n         m \\<in> set (predecessors g (defNode g p)) \\<and>\n         n \\<in> set ns' \\<and>\n         set ns' \\<subseteq> set ?ns1 \\<and>\n         defNode g p \\<in> set ?ns1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p \\<in> allVars g\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>r y q;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>y z.\n       \\<lbrakk>r y z; r\\<^sup>+\\<^sup>+ z q;\n        \\<lbrakk>\\<And>ns.\n                    \\<lbrakk>g \\<turnstile> defNode g\n       q-ns\\<rightarrow>defNode g z;\n                     1 < length ns;\n                     \\<forall>n\\<in>set (butlast ns).\n                        \\<exists>p q m ns'.\n                           r p q \\<and>\n                           g \\<turnstile> defNode g\n     q-ns'\\<rightarrow>m \\<and>\n                           defNode g q \\<notin> set (tl ns') \\<and>\n                           q \\<in> phiUses g m \\<and>\n                           m \\<in> set (predecessors g (defNode g p)) \\<and>\n                           n \\<in> set ns' \\<and>\n                           set ns' \\<subseteq> set ns \\<and>\n                           defNode g p \\<in> set ns\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         z \\<in> allVars g\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis", "from base.hyps base.prems(2)"], ["proof (chain)\npicking this:\n  r p q\n  p \\<in> allVars g", "obtain ns' m where ns': \"g \\<turnstile> defNode g q-ns'\\<rightarrow>m\" \"defNode g q \\<notin> set (tl ns')\" \"m \\<in> set (predecessors g (defNode g p))\" \"q \\<in> phiUses g m\""], ["proof (prove)\nusing this:\n  r p q\n  p \\<in> allVars g\n\ngoal (1 subgoal):\n 1. (\\<And>ns' m.\n        \\<lbrakk>g \\<turnstile> defNode g q-ns'\\<rightarrow>m;\n         defNode g q \\<notin> set (tl ns');\n         m \\<in> set (predecessors g (defNode g p));\n         q \\<in> phiUses g m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule phiArg_path_ex', rule assms(3), auto intro: simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g q-ns'\\<rightarrow>m\n  defNode g q \\<notin> set (tl ns')\n  m \\<in> set (predecessors g (defNode g p))\n  q \\<in> phiUses g m\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>r y q;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>y z.\n       \\<lbrakk>r y z; r\\<^sup>+\\<^sup>+ z q;\n        \\<lbrakk>\\<And>ns.\n                    \\<lbrakk>g \\<turnstile> defNode g\n       q-ns\\<rightarrow>defNode g z;\n                     1 < length ns;\n                     \\<forall>n\\<in>set (butlast ns).\n                        \\<exists>p q m ns'.\n                           r p q \\<and>\n                           g \\<turnstile> defNode g\n     q-ns'\\<rightarrow>m \\<and>\n                           defNode g q \\<notin> set (tl ns') \\<and>\n                           q \\<in> phiUses g m \\<and>\n                           m \\<in> set (predecessors g (defNode g p)) \\<and>\n                           n \\<in> set ns' \\<and>\n                           set ns' \\<subseteq> set ns \\<and>\n                           defNode g p \\<in> set ns\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         z \\<in> allVars g\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence ns: \"g \\<turnstile> defNode g q-ns'@[defNode g p]\\<rightarrow>defNode g p\" \"length (ns'@[defNode g p]) > 1\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g q-ns'\\<rightarrow>m\n  defNode g q \\<notin> set (tl ns')\n  m \\<in> set (predecessors g (defNode g p))\n  q \\<in> phiUses g m\n\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g\n                    q-ns' @ [defNode g p]\\<rightarrow>defNode g p &&&\n    1 < length (ns' @ [defNode g p])", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g q-ns' @ [defNode g p]\\<rightarrow>defNode g p\n  1 < length (ns' @ [defNode g p])\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>r y q;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>y z.\n       \\<lbrakk>r y z; r\\<^sup>+\\<^sup>+ z q;\n        \\<lbrakk>\\<And>ns.\n                    \\<lbrakk>g \\<turnstile> defNode g\n       q-ns\\<rightarrow>defNode g z;\n                     1 < length ns;\n                     \\<forall>n\\<in>set (butlast ns).\n                        \\<exists>p q m ns'.\n                           r p q \\<and>\n                           g \\<turnstile> defNode g\n     q-ns'\\<rightarrow>m \\<and>\n                           defNode g q \\<notin> set (tl ns') \\<and>\n                           q \\<in> phiUses g m \\<and>\n                           m \\<in> set (predecessors g (defNode g p)) \\<and>\n                           n \\<in> set ns' \\<and>\n                           set ns' \\<subseteq> set ns \\<and>\n                           defNode g p \\<in> set ns\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         z \\<in> allVars g\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule base.prems(1)[OF ns, rule_format], rule exI, rule exI, rule exI, rule exI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> set (butlast (ns' @ [defNode g p])) \\<Longrightarrow>\n       r (?p1 n) (?q3 n) \\<and>\n       g \\<turnstile> defNode g (?q3 n)-?ns'7 n\\<rightarrow>?m5 n \\<and>\n       defNode g (?q3 n) \\<notin> set (tl (?ns'7 n)) \\<and>\n       ?q3 n \\<in> phiUses g (?m5 n) \\<and>\n       ?m5 n \\<in> set (predecessors g (defNode g (?p1 n))) \\<and>\n       n \\<in> set (?ns'7 n) \\<and>\n       set (?ns'7 n) \\<subseteq> set (ns' @ [defNode g p]) \\<and>\n       defNode g (?p1 n) \\<in> set (ns' @ [defNode g p])", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> set (butlast (ns' @ [defNode g p])) \\<Longrightarrow>\n       r (?p1 n) (?q3 n) \\<and>\n       g \\<turnstile> defNode g (?q3 n)-?ns'7 n\\<rightarrow>?m5 n \\<and>\n       defNode g (?q3 n) \\<notin> set (tl (?ns'7 n)) \\<and>\n       ?q3 n \\<in> phiUses g (?m5 n) \\<and>\n       ?m5 n \\<in> set (predecessors g (defNode g (?p1 n))) \\<and>\n       n \\<in> set (?ns'7 n) \\<and>\n       set (?ns'7 n) \\<subseteq> set (ns' @ [defNode g p]) \\<and>\n       defNode g (?p1 n) \\<in> set (ns' @ [defNode g p])", "assume \"n \\<in> set (butlast (ns' @ [defNode g p]))\""], ["proof (state)\nthis:\n  n \\<in> set (butlast (ns' @ [defNode g p]))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> set (butlast (ns' @ [defNode g p])) \\<Longrightarrow>\n       r (?p1 n) (?q3 n) \\<and>\n       g \\<turnstile> defNode g (?q3 n)-?ns'7 n\\<rightarrow>?m5 n \\<and>\n       defNode g (?q3 n) \\<notin> set (tl (?ns'7 n)) \\<and>\n       ?q3 n \\<in> phiUses g (?m5 n) \\<and>\n       ?m5 n \\<in> set (predecessors g (defNode g (?p1 n))) \\<and>\n       n \\<in> set (?ns'7 n) \\<and>\n       set (?ns'7 n) \\<subseteq> set (ns' @ [defNode g p]) \\<and>\n       defNode g (?p1 n) \\<in> set (ns' @ [defNode g p])", "with base.hyps ns'"], ["proof (chain)\npicking this:\n  r p q\n  g \\<turnstile> defNode g q-ns'\\<rightarrow>m\n  defNode g q \\<notin> set (tl ns')\n  m \\<in> set (predecessors g (defNode g p))\n  q \\<in> phiUses g m\n  n \\<in> set (butlast (ns' @ [defNode g p]))", "show \"r p q \\<and>\n          g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n          defNode g q \\<notin> set (tl ns') \\<and>\n          q \\<in> phiUses g m \\<and>\n          m \\<in> set (predecessors g (defNode g p)) \\<and> n \\<in> set ns' \\<and> set ns' \\<subseteq> set (ns' @ [defNode g p]) \\<and> defNode g p \\<in> set (ns' @ [defNode g p])\""], ["proof (prove)\nusing this:\n  r p q\n  g \\<turnstile> defNode g q-ns'\\<rightarrow>m\n  defNode g q \\<notin> set (tl ns')\n  m \\<in> set (predecessors g (defNode g p))\n  q \\<in> phiUses g m\n  n \\<in> set (butlast (ns' @ [defNode g p]))\n\ngoal (1 subgoal):\n 1. r p q \\<and>\n    g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n    defNode g q \\<notin> set (tl ns') \\<and>\n    q \\<in> phiUses g m \\<and>\n    m \\<in> set (predecessors g (defNode g p)) \\<and>\n    n \\<in> set ns' \\<and>\n    set ns' \\<subseteq> set (ns' @ [defNode g p]) \\<and>\n    defNode g p \\<in> set (ns' @ [defNode g p])", "by auto"], ["proof (state)\nthis:\n  r p q \\<and>\n  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n  defNode g q \\<notin> set (tl ns') \\<and>\n  q \\<in> phiUses g m \\<and>\n  m \\<in> set (predecessors g (defNode g p)) \\<and>\n  n \\<in> set ns' \\<and>\n  set ns' \\<subseteq> set (ns' @ [defNode g p]) \\<and>\n  defNode g p \\<in> set (ns' @ [defNode g p])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>r y z; r\\<^sup>+\\<^sup>+ z q;\n        \\<lbrakk>\\<And>ns.\n                    \\<lbrakk>g \\<turnstile> defNode g\n       q-ns\\<rightarrow>defNode g z;\n                     1 < length ns;\n                     \\<forall>n\\<in>set (butlast ns).\n                        \\<exists>p q m ns'.\n                           r p q \\<and>\n                           g \\<turnstile> defNode g\n     q-ns'\\<rightarrow>m \\<and>\n                           defNode g q \\<notin> set (tl ns') \\<and>\n                           q \\<in> phiUses g m \\<and>\n                           m \\<in> set (predecessors g (defNode g p)) \\<and>\n                           n \\<in> set ns' \\<and>\n                           set ns' \\<subseteq> set ns \\<and>\n                           defNode g p \\<in> set ns\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         z \\<in> allVars g\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>r y z; r\\<^sup>+\\<^sup>+ z q;\n        \\<lbrakk>\\<And>ns.\n                    \\<lbrakk>g \\<turnstile> defNode g\n       q-ns\\<rightarrow>defNode g z;\n                     1 < length ns;\n                     \\<forall>n\\<in>set (butlast ns).\n                        \\<exists>p q m ns'.\n                           r p q \\<and>\n                           g \\<turnstile> defNode g\n     q-ns'\\<rightarrow>m \\<and>\n                           defNode g q \\<notin> set (tl ns') \\<and>\n                           q \\<in> phiUses g m \\<and>\n                           m \\<in> set (predecessors g (defNode g p)) \\<and>\n                           n \\<in> set ns' \\<and>\n                           set ns' \\<subseteq> set ns \\<and>\n                           defNode g p \\<in> set ns\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         z \\<in> allVars g\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (step p p')"], ["proof (state)\nthis:\n  r p p'\n  r\\<^sup>+\\<^sup>+ p' q\n  \\<lbrakk>\\<And>ns.\n              \\<lbrakk>g \\<turnstile> defNode g\n q-ns\\<rightarrow>defNode g p';\n               1 < length ns;\n               \\<forall>n\\<in>set (butlast ns).\n                  \\<exists>p q m ns'.\n                     r p q \\<and>\n                     g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                     defNode g q \\<notin> set (tl ns') \\<and>\n                     q \\<in> phiUses g m \\<and>\n                     m \\<in> set (predecessors g (defNode g p)) \\<and>\n                     n \\<in> set ns' \\<and>\n                     set ns' \\<subseteq> set ns \\<and>\n                     defNode g p \\<in> set ns\\<rbrakk>\n              \\<Longrightarrow> thesis;\n   p' \\<in> allVars g\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>g \\<turnstile> defNode g q-?ns1\\<rightarrow>defNode g p;\n   1 < length ?ns1;\n   \\<forall>n\\<in>set (butlast ?ns1).\n      \\<exists>p q m ns'.\n         r p q \\<and>\n         g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n         defNode g q \\<notin> set (tl ns') \\<and>\n         q \\<in> phiUses g m \\<and>\n         m \\<in> set (predecessors g (defNode g p)) \\<and>\n         n \\<in> set ns' \\<and>\n         set ns' \\<subseteq> set ?ns1 \\<and>\n         defNode g p \\<in> set ?ns1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p \\<in> allVars g\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>r y z; r\\<^sup>+\\<^sup>+ z q;\n        \\<lbrakk>\\<And>ns.\n                    \\<lbrakk>g \\<turnstile> defNode g\n       q-ns\\<rightarrow>defNode g z;\n                     1 < length ns;\n                     \\<forall>n\\<in>set (butlast ns).\n                        \\<exists>p q m ns'.\n                           r p q \\<and>\n                           g \\<turnstile> defNode g\n     q-ns'\\<rightarrow>m \\<and>\n                           defNode g q \\<notin> set (tl ns') \\<and>\n                           q \\<in> phiUses g m \\<and>\n                           m \\<in> set (predecessors g (defNode g p)) \\<and>\n                           n \\<in> set ns' \\<and>\n                           set ns' \\<subseteq> set ns \\<and>\n                           defNode g p \\<in> set ns\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         z \\<in> allVars g\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis", "from step.prems(2) step.hyps(1)"], ["proof (chain)\npicking this:\n  p \\<in> allVars g\n  r p p'", "obtain ns'\\<^sub>2 m where ns'\\<^sub>2: \"g \\<turnstile> defNode g p'-ns'\\<^sub>2\\<rightarrow>m\" \"m \\<in> set (predecessors g (defNode g p))\" \"defNode g p' \\<notin> set (tl ns'\\<^sub>2)\" \"p' \\<in> phiUses g m\""], ["proof (prove)\nusing this:\n  p \\<in> allVars g\n  r p p'\n\ngoal (1 subgoal):\n 1. (\\<And>ns'\\<^sub>2 m.\n        \\<lbrakk>g \\<turnstile> defNode g p'-ns'\\<^sub>2\\<rightarrow>m;\n         m \\<in> set (predecessors g (defNode g p));\n         defNode g p' \\<notin> set (tl ns'\\<^sub>2);\n         p' \\<in> phiUses g m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule phiArg_path_ex', rule assms(3), auto intro: simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g p'-ns'\\<^sub>2\\<rightarrow>m\n  m \\<in> set (predecessors g (defNode g p))\n  defNode g p' \\<notin> set (tl ns'\\<^sub>2)\n  p' \\<in> phiUses g m\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>r y z; r\\<^sup>+\\<^sup>+ z q;\n        \\<lbrakk>\\<And>ns.\n                    \\<lbrakk>g \\<turnstile> defNode g\n       q-ns\\<rightarrow>defNode g z;\n                     1 < length ns;\n                     \\<forall>n\\<in>set (butlast ns).\n                        \\<exists>p q m ns'.\n                           r p q \\<and>\n                           g \\<turnstile> defNode g\n     q-ns'\\<rightarrow>m \\<and>\n                           defNode g q \\<notin> set (tl ns') \\<and>\n                           q \\<in> phiUses g m \\<and>\n                           m \\<in> set (predecessors g (defNode g p)) \\<and>\n                           n \\<in> set ns' \\<and>\n                           set ns' \\<subseteq> set ns \\<and>\n                           defNode g p \\<in> set ns\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         z \\<in> allVars g\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g p'-ns'\\<^sub>2\\<rightarrow>m\n  m \\<in> set (predecessors g (defNode g p))\n  defNode g p' \\<notin> set (tl ns'\\<^sub>2)\n  p' \\<in> phiUses g m", "obtain ns\\<^sub>2 where ns\\<^sub>2: \"g \\<turnstile> defNode g p'-ns\\<^sub>2\\<rightarrow>defNode g p\" \"length ns\\<^sub>2 > 1\" \"ns\\<^sub>2 = ns'\\<^sub>2@[defNode g p]\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g p'-ns'\\<^sub>2\\<rightarrow>m\n  m \\<in> set (predecessors g (defNode g p))\n  defNode g p' \\<notin> set (tl ns'\\<^sub>2)\n  p' \\<in> phiUses g m\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> defNode g\n                                 p'-ns\\<^sub>2\\<rightarrow>defNode g p;\n         1 < length ns\\<^sub>2;\n         ns\\<^sub>2 = ns'\\<^sub>2 @ [defNode g p]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (atomize_elim, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g p'-ns\\<^sub>2\\<rightarrow>defNode g p\n  1 < length ns\\<^sub>2\n  ns\\<^sub>2 = ns'\\<^sub>2 @ [defNode g p]\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>r y z; r\\<^sup>+\\<^sup>+ z q;\n        \\<lbrakk>\\<And>ns.\n                    \\<lbrakk>g \\<turnstile> defNode g\n       q-ns\\<rightarrow>defNode g z;\n                     1 < length ns;\n                     \\<forall>n\\<in>set (butlast ns).\n                        \\<exists>p q m ns'.\n                           r p q \\<and>\n                           g \\<turnstile> defNode g\n     q-ns'\\<rightarrow>m \\<and>\n                           defNode g q \\<notin> set (tl ns') \\<and>\n                           q \\<in> phiUses g m \\<and>\n                           m \\<in> set (predecessors g (defNode g p)) \\<and>\n                           n \\<in> set ns' \\<and>\n                           set ns' \\<subseteq> set ns \\<and>\n                           defNode g p \\<in> set ns\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         z \\<in> allVars g\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>ns.\n           \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g y;\n            1 < length ns;\n            \\<forall>n\\<in>set (butlast ns).\n               \\<exists>p q m ns'.\n                  r p q \\<and>\n                  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                  defNode g q \\<notin> set (tl ns') \\<and>\n                  q \\<in> phiUses g m \\<and>\n                  m \\<in> set (predecessors g (defNode g p)) \\<and>\n                  n \\<in> set ns' \\<and>\n                  set ns' \\<subseteq> set ns \\<and>\n                  defNode g p \\<in> set ns\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        y \\<in> allVars g\\<rbrakk>\n       \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule step.IH)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ns.\n       \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p';\n        1 < length ns;\n        \\<forall>n\\<in>set (butlast ns).\n           \\<exists>p q m ns'.\n              r p q \\<and>\n              g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n              defNode g q \\<notin> set (tl ns') \\<and>\n              q \\<in> phiUses g m \\<and>\n              m \\<in> set (predecessors g (defNode g p)) \\<and>\n              n \\<in> set ns' \\<and>\n              set ns' \\<subseteq> set ns \\<and>\n              defNode g p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. p' \\<in> allVars g", "fix ns"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ns.\n       \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p';\n        1 < length ns;\n        \\<forall>n\\<in>set (butlast ns).\n           \\<exists>p q m ns'.\n              r p q \\<and>\n              g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n              defNode g q \\<notin> set (tl ns') \\<and>\n              q \\<in> phiUses g m \\<and>\n              m \\<in> set (predecessors g (defNode g p)) \\<and>\n              n \\<in> set ns' \\<and>\n              set ns' \\<subseteq> set ns \\<and>\n              defNode g p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. p' \\<in> allVars g", "assume ns: \"g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p'\" \"1 < length ns\""], ["proof (state)\nthis:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p'\n  1 < length ns\n\ngoal (2 subgoals):\n 1. \\<And>ns.\n       \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p';\n        1 < length ns;\n        \\<forall>n\\<in>set (butlast ns).\n           \\<exists>p q m ns'.\n              r p q \\<and>\n              g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n              defNode g q \\<notin> set (tl ns') \\<and>\n              q \\<in> phiUses g m \\<and>\n              m \\<in> set (predecessors g (defNode g p)) \\<and>\n              n \\<in> set ns' \\<and>\n              set ns' \\<subseteq> set ns \\<and>\n              defNode g p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. p' \\<in> allVars g", "assume IH: \"\\<forall>n\\<in>set (butlast ns).\n             \\<exists>p q m ns'.\n                r p q \\<and>\n                g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                defNode g q \\<notin> set (tl ns') \\<and>\n                q \\<in> phiUses g m \\<and> m \\<in> set (predecessors g (defNode g p)) \\<and> n \\<in> set ns' \\<and> set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\""], ["proof (state)\nthis:\n  \\<forall>n\\<in>set (butlast ns).\n     \\<exists>p q m ns'.\n        r p q \\<and>\n        g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n        defNode g q \\<notin> set (tl ns') \\<and>\n        q \\<in> phiUses g m \\<and>\n        m \\<in> set (predecessors g (defNode g p)) \\<and>\n        n \\<in> set ns' \\<and>\n        set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\n\ngoal (2 subgoals):\n 1. \\<And>ns.\n       \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p';\n        1 < length ns;\n        \\<forall>n\\<in>set (butlast ns).\n           \\<exists>p q m ns'.\n              r p q \\<and>\n              g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n              defNode g q \\<notin> set (tl ns') \\<and>\n              q \\<in> phiUses g m \\<and>\n              m \\<in> set (predecessors g (defNode g p)) \\<and>\n              n \\<in> set ns' \\<and>\n              set ns' \\<subseteq> set ns \\<and>\n              defNode g p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. p' \\<in> allVars g", "let ?path = \"ns@tl ns\\<^sub>2\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ns.\n       \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p';\n        1 < length ns;\n        \\<forall>n\\<in>set (butlast ns).\n           \\<exists>p q m ns'.\n              r p q \\<and>\n              g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n              defNode g q \\<notin> set (tl ns') \\<and>\n              q \\<in> phiUses g m \\<and>\n              m \\<in> set (predecessors g (defNode g p)) \\<and>\n              n \\<in> set ns' \\<and>\n              set ns' \\<subseteq> set ns \\<and>\n              defNode g p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. p' \\<in> allVars g", "have ns_ns\\<^sub>2: \"g \\<turnstile> defNode g q-?path\\<rightarrow>defNode g p\" \"1 < length ?path\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g\n                    q-ns @ tl ns\\<^sub>2\\<rightarrow>defNode g p &&&\n    1 < length (ns @ tl ns\\<^sub>2)", "using ns ns\\<^sub>2(1,2)"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p'\n  1 < length ns\n  g \\<turnstile> defNode g p'-ns\\<^sub>2\\<rightarrow>defNode g p\n  1 < length ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g\n                    q-ns @ tl ns\\<^sub>2\\<rightarrow>defNode g p &&&\n    1 < length (ns @ tl ns\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g q-ns @ tl ns\\<^sub>2\\<rightarrow>defNode g p\n  1 < length (ns @ tl ns\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<And>ns.\n       \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p';\n        1 < length ns;\n        \\<forall>n\\<in>set (butlast ns).\n           \\<exists>p q m ns'.\n              r p q \\<and>\n              g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n              defNode g q \\<notin> set (tl ns') \\<and>\n              q \\<in> phiUses g m \\<and>\n              m \\<in> set (predecessors g (defNode g p)) \\<and>\n              n \\<in> set ns' \\<and>\n              set ns' \\<subseteq> set ns \\<and>\n              defNode g p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. p' \\<in> allVars g", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule step.prems(1)[OF ns_ns\\<^sub>2, rule_format])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> set (butlast (ns @ tl ns\\<^sub>2)) \\<Longrightarrow>\n       \\<exists>p q m ns'.\n          r p q \\<and>\n          g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n          defNode g q \\<notin> set (tl ns') \\<and>\n          q \\<in> phiUses g m \\<and>\n          m \\<in> set (predecessors g (defNode g p)) \\<and>\n          n \\<in> set ns' \\<and>\n          set ns' \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n          defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> set (butlast (ns @ tl ns\\<^sub>2)) \\<Longrightarrow>\n       \\<exists>p q m ns'.\n          r p q \\<and>\n          g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n          defNode g q \\<notin> set (tl ns') \\<and>\n          q \\<in> phiUses g m \\<and>\n          m \\<in> set (predecessors g (defNode g p)) \\<and>\n          n \\<in> set ns' \\<and>\n          set ns' \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n          defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "assume n: \"n \\<in> set (butlast ?path)\""], ["proof (state)\nthis:\n  n \\<in> set (butlast (ns @ tl ns\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> set (butlast (ns @ tl ns\\<^sub>2)) \\<Longrightarrow>\n       \\<exists>p q m ns'.\n          r p q \\<and>\n          g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n          defNode g q \\<notin> set (tl ns') \\<and>\n          q \\<in> phiUses g m \\<and>\n          m \\<in> set (predecessors g (defNode g p)) \\<and>\n          n \\<in> set ns' \\<and>\n          set ns' \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n          defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "show \"\\<exists>p q m ns'a.\n          r p q \\<and>\n          g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n          defNode g q \\<notin> set (tl ns'a) \\<and>\n          q \\<in> phiUses g m \\<and> m \\<in> set (predecessors g (defNode g p)) \\<and> n \\<in> set ns'a \\<and> set ns'a \\<subseteq> set ?path \\<and> defNode g p \\<in> set ?path\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "proof (cases \"n \\<in> set (butlast ns)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<in> set (butlast ns) \\<Longrightarrow>\n    \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)\n 2. n \\<notin> set (butlast ns) \\<Longrightarrow>\n    \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "case True"], ["proof (state)\nthis:\n  n \\<in> set (butlast ns)\n\ngoal (2 subgoals):\n 1. n \\<in> set (butlast ns) \\<Longrightarrow>\n    \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)\n 2. n \\<notin> set (butlast ns) \\<Longrightarrow>\n    \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "with IH"], ["proof (chain)\npicking this:\n  \\<forall>n\\<in>set (butlast ns).\n     \\<exists>p q m ns'.\n        r p q \\<and>\n        g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n        defNode g q \\<notin> set (tl ns') \\<and>\n        q \\<in> phiUses g m \\<and>\n        m \\<in> set (predecessors g (defNode g p)) \\<and>\n        n \\<in> set ns' \\<and>\n        set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\n  n \\<in> set (butlast ns)", "obtain p q m ns' where \"\n                r p q \\<and>\n                g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n                defNode g q \\<notin> set (tl ns') \\<and>\n                q \\<in> phiUses g m \\<and> m \\<in> set (predecessors g (defNode g p)) \\<and> n \\<in> set ns' \\<and> set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>set (butlast ns).\n     \\<exists>p q m ns'.\n        r p q \\<and>\n        g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n        defNode g q \\<notin> set (tl ns') \\<and>\n        q \\<in> phiUses g m \\<and>\n        m \\<in> set (predecessors g (defNode g p)) \\<and>\n        n \\<in> set ns' \\<and>\n        set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\n  n \\<in> set (butlast ns)\n\ngoal (1 subgoal):\n 1. (\\<And>p q ns' m.\n        r p q \\<and>\n        g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n        defNode g q \\<notin> set (tl ns') \\<and>\n        q \\<in> phiUses g m \\<and>\n        m \\<in> set (predecessors g (defNode g p)) \\<and>\n        n \\<in> set ns' \\<and>\n        set ns' \\<subseteq> set ns \\<and>\n        defNode g p \\<in> set ns \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r p q \\<and>\n  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n  defNode g q \\<notin> set (tl ns') \\<and>\n  q \\<in> phiUses g m \\<and>\n  m \\<in> set (predecessors g (defNode g p)) \\<and>\n  n \\<in> set ns' \\<and>\n  set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\n\ngoal (2 subgoals):\n 1. n \\<in> set (butlast ns) \\<Longrightarrow>\n    \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)\n 2. n \\<notin> set (butlast ns) \\<Longrightarrow>\n    \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  r p q \\<and>\n  g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n  defNode g q \\<notin> set (tl ns') \\<and>\n  q \\<in> phiUses g m \\<and>\n  m \\<in> set (predecessors g (defNode g p)) \\<and>\n  n \\<in> set ns' \\<and>\n  set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "by - (rule exI, rule exI, rule exI, rule exI, auto)"], ["proof (state)\nthis:\n  \\<exists>p q m ns'a.\n     r p q \\<and>\n     g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n     defNode g q \\<notin> set (tl ns'a) \\<and>\n     q \\<in> phiUses g m \\<and>\n     m \\<in> set (predecessors g (defNode g p)) \\<and>\n     n \\<in> set ns'a \\<and>\n     set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n     defNode g p \\<in> set (ns @ tl ns\\<^sub>2)\n\ngoal (1 subgoal):\n 1. n \\<notin> set (butlast ns) \\<Longrightarrow>\n    \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<notin> set (butlast ns) \\<Longrightarrow>\n    \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "case False"], ["proof (state)\nthis:\n  n \\<notin> set (butlast ns)\n\ngoal (1 subgoal):\n 1. n \\<notin> set (butlast ns) \\<Longrightarrow>\n    \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "from ns ns\\<^sub>2"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p'\n  1 < length ns\n  g \\<turnstile> defNode g p'-ns\\<^sub>2\\<rightarrow>defNode g p\n  1 < length ns\\<^sub>2\n  ns\\<^sub>2 = ns'\\<^sub>2 @ [defNode g p]", "have 1: \"?path = butlast ns@ns\\<^sub>2\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g p'\n  1 < length ns\n  g \\<turnstile> defNode g p'-ns\\<^sub>2\\<rightarrow>defNode g p\n  1 < length ns\\<^sub>2\n  ns\\<^sub>2 = ns'\\<^sub>2 @ [defNode g p]\n\ngoal (1 subgoal):\n 1. ns @ tl ns\\<^sub>2 = butlast ns @ ns\\<^sub>2", "by - (rule concat_join[symmetric], auto simp: path2_def)"], ["proof (state)\nthis:\n  ns @ tl ns\\<^sub>2 = butlast ns @ ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. n \\<notin> set (butlast ns) \\<Longrightarrow>\n    \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "from ns\\<^sub>2(1) n False 1"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g p'-ns\\<^sub>2\\<rightarrow>defNode g p\n  n \\<in> set (butlast (ns @ tl ns\\<^sub>2))\n  n \\<notin> set (butlast ns)\n  ns @ tl ns\\<^sub>2 = butlast ns @ ns\\<^sub>2", "have \"n \\<in> set (butlast ns\\<^sub>2)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g p'-ns\\<^sub>2\\<rightarrow>defNode g p\n  n \\<in> set (butlast (ns @ tl ns\\<^sub>2))\n  n \\<notin> set (butlast ns)\n  ns @ tl ns\\<^sub>2 = butlast ns @ ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. n \\<in> set (butlast ns\\<^sub>2)", "by (auto simp: butlast_append path2_not_Nil)"], ["proof (state)\nthis:\n  n \\<in> set (butlast ns\\<^sub>2)\n\ngoal (1 subgoal):\n 1. n \\<notin> set (butlast ns) \\<Longrightarrow>\n    \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "with step.hyps ns'\\<^sub>2 ns\\<^sub>2(3)"], ["proof (chain)\npicking this:\n  r p p'\n  r\\<^sup>+\\<^sup>+ p' q\n  g \\<turnstile> defNode g p'-ns'\\<^sub>2\\<rightarrow>m\n  m \\<in> set (predecessors g (defNode g p))\n  defNode g p' \\<notin> set (tl ns'\\<^sub>2)\n  p' \\<in> phiUses g m\n  ns\\<^sub>2 = ns'\\<^sub>2 @ [defNode g p]\n  n \\<in> set (butlast ns\\<^sub>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  r p p'\n  r\\<^sup>+\\<^sup>+ p' q\n  g \\<turnstile> defNode g p'-ns'\\<^sub>2\\<rightarrow>m\n  m \\<in> set (predecessors g (defNode g p))\n  defNode g p' \\<notin> set (tl ns'\\<^sub>2)\n  p' \\<in> phiUses g m\n  ns\\<^sub>2 = ns'\\<^sub>2 @ [defNode g p]\n  n \\<in> set (butlast ns\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<exists>p q m ns'a.\n       r p q \\<and>\n       g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n       defNode g q \\<notin> set (tl ns'a) \\<and>\n       q \\<in> phiUses g m \\<and>\n       m \\<in> set (predecessors g (defNode g p)) \\<and>\n       n \\<in> set ns'a \\<and>\n       set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n       defNode g p \\<in> set (ns @ tl ns\\<^sub>2)", "by - (subst 1, rule exI[where x=p], rule exI[where x=p'], rule exI, rule exI, auto simp: path2_not_Nil)"], ["proof (state)\nthis:\n  \\<exists>p q m ns'a.\n     r p q \\<and>\n     g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n     defNode g q \\<notin> set (tl ns'a) \\<and>\n     q \\<in> phiUses g m \\<and>\n     m \\<in> set (predecessors g (defNode g p)) \\<and>\n     n \\<in> set ns'a \\<and>\n     set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n     defNode g p \\<in> set (ns @ tl ns\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p q m ns'a.\n     r p q \\<and>\n     g \\<turnstile> defNode g q-ns'a\\<rightarrow>m \\<and>\n     defNode g q \\<notin> set (tl ns'a) \\<and>\n     q \\<in> phiUses g m \\<and>\n     m \\<in> set (predecessors g (defNode g p)) \\<and>\n     n \\<in> set ns'a \\<and>\n     set ns'a \\<subseteq> set (ns @ tl ns\\<^sub>2) \\<and>\n     defNode g p \\<in> set (ns @ tl ns\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. p' \\<in> allVars g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p' \\<in> allVars g", "show \"p' \\<in> allVars g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p' \\<in> allVars g", "using step.prems(2) step.hyps(1)[THEN assms(3)]"], ["proof (prove)\nusing this:\n  p \\<in> allVars g\n  phiArg g p p'\n\ngoal (1 subgoal):\n 1. p' \\<in> allVars g", "by auto"], ["proof (state)\nthis:\n  p' \\<in> allVars g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma non_dominated_predecessor:\n    assumes \"n \\<in> set (\\<alpha>n g)\" \"n \\<noteq> Entry g\"\n    obtains m where \"m \\<in> set (predecessors g n)\" \"\\<not>dominates g n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set (predecessors g n);\n         \\<not> dominates g n m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set (predecessors g n);\n         \\<not> dominates g n m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain ns where \"g \\<turnstile> Entry g-ns\\<rightarrow>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        g \\<turnstile> Entry g-ns\\<rightarrow>n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (atomize_elim, rule Entry_reaches, auto simp add:assms(1))"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set (predecessors g n);\n         \\<not> dominates g n m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n", "obtain ns' where ns': \"g \\<turnstile> Entry g-ns'\\<rightarrow>n\" \"n \\<notin> set (butlast ns')\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> Entry g-ns'\\<rightarrow>n;\n         n \\<notin> set (butlast ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n  n \\<notin> set (butlast ns')\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set (predecessors g n);\n         \\<not> dominates g n m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?m = \"last (butlast ns')\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set (predecessors g n);\n         \\<not> dominates g n m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from ns'(1) assms(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n  n \\<noteq> Entry g", "obtain m: \"g \\<turnstile> Entry g-butlast ns'\\<rightarrow>?m\" \"?m \\<in> set (predecessors g n)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>n\n  n \\<noteq> Entry g\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>g \\<turnstile> Entry\n                              g-butlast ns'\\<rightarrow>last (butlast ns');\n      last (butlast ns') \\<in> set (predecessors g n)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule path2_unsnoc, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')\n  last (butlast ns') \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set (predecessors g n);\n         \\<not> dominates g n m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with m(1) ns'(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')\n  n \\<notin> set (butlast ns')\n  g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')\n  last (butlast ns') \\<in> set (predecessors g n)", "show thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')\n  n \\<notin> set (butlast ns')\n  g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')\n  last (butlast ns') \\<in> set (predecessors g n)\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that, auto elim:dominatesE)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas dominates_trans'[trans, elim] = dominates_trans[OF invar]"], ["", "lemmas strict_dom_trans'[trans, elim] = strict_dom_trans[OF invar]"], ["", "lemmas dominates_refl'[simp] = dominates_refl[OF invar]"], ["", "lemmas dominates_antisymm'[dest] = dominates_antisymm[OF invar]"], ["", "lemma liveVal_in_allVars[simp]: \"liveVal g v \\<Longrightarrow> v \\<in> allVars g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liveVal g v \\<Longrightarrow> v \\<in> allVars g", "by (induction rule: liveVal.induct, auto intro!: allUses_in_allVars)"], ["", "lemma phi_no_closed_loop:\n    assumes[simp]: \"p \\<in> allVars g\" and \"phi g p = Some vs\"\n    shows \"set vs \\<noteq> {p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set vs \\<noteq> {p}", "proof (cases \"defNode g p = Entry g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. defNode g p = Entry g \\<Longrightarrow> set vs \\<noteq> {p}\n 2. defNode g p \\<noteq> Entry g \\<Longrightarrow> set vs \\<noteq> {p}", "case True"], ["proof (state)\nthis:\n  defNode g p = Entry g\n\ngoal (2 subgoals):\n 1. defNode g p = Entry g \\<Longrightarrow> set vs \\<noteq> {p}\n 2. defNode g p \\<noteq> Entry g \\<Longrightarrow> set vs \\<noteq> {p}", "with assms(2)"], ["proof (chain)\npicking this:\n  phi g p = Some vs\n  defNode g p = Entry g", "show ?thesis"], ["proof (prove)\nusing this:\n  phi g p = Some vs\n  defNode g p = Entry g\n\ngoal (1 subgoal):\n 1. set vs \\<noteq> {p}", "by auto"], ["proof (state)\nthis:\n  set vs \\<noteq> {p}\n\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> Entry g \\<Longrightarrow> set vs \\<noteq> {p}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> Entry g \\<Longrightarrow> set vs \\<noteq> {p}", "case False"], ["proof (state)\nthis:\n  defNode g p \\<noteq> Entry g\n\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> Entry g \\<Longrightarrow> set vs \\<noteq> {p}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set vs \\<noteq> {p}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. set vs = {p} \\<Longrightarrow> False", "assume[simp]: \"set vs = {p}\""], ["proof (state)\nthis:\n  set vs = {p}\n\ngoal (1 subgoal):\n 1. set vs = {p} \\<Longrightarrow> False", "let ?n = \"defNode g p\""], ["proof (state)\ngoal (1 subgoal):\n 1. set vs = {p} \\<Longrightarrow> False", "obtain ns where ns: \"g \\<turnstile> Entry g-ns\\<rightarrow>?n\" \"?n \\<notin> set (butlast ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>defNode g p;\n         defNode g p \\<notin> set (butlast ns)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule simple_Entry_path, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>defNode g p\n  defNode g p \\<notin> set (butlast ns)\n\ngoal (1 subgoal):\n 1. set vs = {p} \\<Longrightarrow> False", "let ?m = \"last (butlast ns)\""], ["proof (state)\ngoal (1 subgoal):\n 1. set vs = {p} \\<Longrightarrow> False", "from ns False"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>defNode g p\n  defNode g p \\<notin> set (butlast ns)\n  defNode g p \\<noteq> Entry g", "obtain m: \"g \\<turnstile> Entry g-butlast ns\\<rightarrow>?m\" \"?m \\<in> set (predecessors g ?n)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>defNode g p\n  defNode g p \\<notin> set (butlast ns)\n  defNode g p \\<noteq> Entry g\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>g \\<turnstile> Entry\n                              g-butlast ns\\<rightarrow>last (butlast ns);\n      last (butlast ns) \\<in> set (predecessors g (defNode g p))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule path2_unsnoc, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. set vs = {p} \\<Longrightarrow> False", "hence \"p \\<in> phiUses g ?m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. p \\<in> phiUses g (last (butlast ns))", "using assms(2)"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g (defNode g p))\n  phi g p = Some vs\n\ngoal (1 subgoal):\n 1. p \\<in> phiUses g (last (butlast ns))", "by - (rule phiUses_exI, auto simp:phi_def)"], ["proof (state)\nthis:\n  p \\<in> phiUses g (last (butlast ns))\n\ngoal (1 subgoal):\n 1. set vs = {p} \\<Longrightarrow> False", "hence \"defAss g ?m p\""], ["proof (prove)\nusing this:\n  p \\<in> phiUses g (last (butlast ns))\n\ngoal (1 subgoal):\n 1. defAss g (last (butlast ns)) p", "using m"], ["proof (prove)\nusing this:\n  p \\<in> phiUses g (last (butlast ns))\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. defAss g (last (butlast ns)) p", "by - (rule allUses_def_ass, auto)"], ["proof (state)\nthis:\n  defAss g (last (butlast ns)) p\n\ngoal (1 subgoal):\n 1. set vs = {p} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  defAss g (last (butlast ns)) p", "obtain l where l: \"l \\<in> set (butlast ns)\" \"p \\<in> allDefs g l\""], ["proof (prove)\nusing this:\n  defAss g (last (butlast ns)) p\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>l \\<in> set (butlast ns); p \\<in> allDefs g l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using m"], ["proof (prove)\nusing this:\n  defAss g (last (butlast ns)) p\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>l \\<in> set (butlast ns); p \\<in> allDefs g l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (drule defAssD, auto)"], ["proof (state)\nthis:\n  l \\<in> set (butlast ns)\n  p \\<in> allDefs g l\n\ngoal (1 subgoal):\n 1. set vs = {p} \\<Longrightarrow> False", "with assms(2) m"], ["proof (chain)\npicking this:\n  phi g p = Some vs\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g (defNode g p))\n  l \\<in> set (butlast ns)\n  p \\<in> allDefs g l", "have \"l = ?n\""], ["proof (prove)\nusing this:\n  phi g p = Some vs\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g (defNode g p))\n  l \\<in> set (butlast ns)\n  p \\<in> allDefs g l\n\ngoal (1 subgoal):\n 1. l = defNode g p", "by - (rule allDefs_disjoint', auto)"], ["proof (state)\nthis:\n  l = defNode g p\n\ngoal (1 subgoal):\n 1. set vs = {p} \\<Longrightarrow> False", "with ns l m"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>defNode g p\n  defNode g p \\<notin> set (butlast ns)\n  l \\<in> set (butlast ns)\n  p \\<in> allDefs g l\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g (defNode g p))\n  l = defNode g p", "show False"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>defNode g p\n  defNode g p \\<notin> set (butlast ns)\n  l \\<in> set (butlast ns)\n  p \\<in> allDefs g l\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (predecessors g (defNode g p))\n  l = defNode g p\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set vs \\<noteq> {p}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phis_phi: \"phis g (n, v) = Some vs \\<Longrightarrow> phi g v = Some vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phis g (n, v) = Some vs \\<Longrightarrow> phi g v = Some vs", "unfolding phi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. phis g (n, v) = Some vs \\<Longrightarrow>\n    phis g (defNode g v, v) = Some vs", "apply (subst defNode_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. phis g (n, v) = Some vs \\<Longrightarrow> ?y \\<in> set (\\<alpha>n g)\n 2. phis g (n, v) = Some vs \\<Longrightarrow> v \\<in> allDefs g ?y\n 3. phis g (n, v) = Some vs \\<Longrightarrow> phis g (?y, v) = Some vs", "by (auto simp: allDefs_def phi_def phiDefs_def intro: phis_in_\\<alpha>n)"], ["", "lemma trivial_phi: \"trivial g v \\<Longrightarrow> phi g v \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trivial g v \\<Longrightarrow> phi g v \\<noteq> None", "by (auto simp: trivial_def isTrivialPhi_def split: option.splits)"], ["", "lemma trivial_finite: \"finite {v. trivial g v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {v. trivial g v}", "by (rule finite_subset[OF _ phi_finite]) (auto dest: trivial_phi)"], ["", "lemma trivial_in_allVars: \"trivial g v \\<Longrightarrow> v \\<in> allVars g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trivial g v \\<Longrightarrow> v \\<in> allVars g", "by (drule trivial_phi, auto simp: allDefs_def phiDefs_def image_def phi_def intro: phis_in_\\<alpha>n intro!: allDefs_in_allVars)"], ["", "declare phiArg_def [simp del]"], ["", "end"], ["", "subsection \\<open>Bundling of CFG and Equivalent SSA CFG\\<close>"], ["", "locale CFG_SSA_Transformed_base = old: CFG_base \\<alpha>e \\<alpha>n invar inEdges' Entry oldDefs oldUses + CFG_SSA_wf_base \\<alpha>e \\<alpha>n invar inEdges' Entry \"defs\" \"uses\" phis\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node::linorder \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges' :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD) list\" and\n  Entry::\"'g \\<Rightarrow> 'node\" and\n  oldDefs :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'var::linorder set\" and\n  oldUses :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'var set\" and\n  \"defs\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val::linorder set\" and\n  \"uses\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val set\" and\n  phis :: \"'g \\<Rightarrow> ('node, 'val) phis\" +\n  fixes var :: \"'g \\<Rightarrow> 'val \\<Rightarrow> 'var\""], ["", "locale CFG_SSA_Transformed = CFG_SSA_Transformed_base \\<alpha>e \\<alpha>n invar inEdges' Entry oldDefs oldUses \"defs\" \"uses\" phis var\n  + old: CFG_wf \\<alpha>e \\<alpha>n invar inEdges' Entry oldDefs oldUses + CFG_SSA_wf \\<alpha>e \\<alpha>n invar inEdges' Entry \"defs\" \"uses\" phis\nfor\n  \\<alpha>e :: \"'g \\<Rightarrow> ('node::linorder \\<times> 'edgeD \\<times> 'node) set\" and\n  \\<alpha>n :: \"'g \\<Rightarrow> 'node list\" and\n  invar :: \"'g \\<Rightarrow> bool\" and\n  inEdges' :: \"'g \\<Rightarrow> 'node \\<Rightarrow> ('node \\<times> 'edgeD) list\" and\n  Entry::\"'g \\<Rightarrow> 'node\" and\n  oldDefs :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'var::linorder set\" and\n  oldUses :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'var set\" and\n  \"defs\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val::linorder set\" and\n  \"uses\" :: \"'g \\<Rightarrow> 'node \\<Rightarrow> 'val set\" and\n  phis :: \"'g \\<Rightarrow> ('node, 'val) phis\" and\n  var :: \"'g \\<Rightarrow> 'val \\<Rightarrow> 'var\" +\n  assumes oldDefs_def: \"oldDefs g n = var g ` defs g n\"\n  assumes oldUses_def: \"n \\<in> set (\\<alpha>n g) \\<Longrightarrow> oldUses g n = var g ` uses g n\"\n  assumes conventional: \"\n\\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; n \\<notin> set (tl ns); v \\<in> allDefs g n; v \\<in> allUses g m; x \\<in> set (tl ns); v' \\<in> allDefs g x\\<rbrakk> \\<Longrightarrow> var g v' \\<noteq> var g v\"\n  assumes phis_same_var[elim]: \"phis g (n,v) = Some vs \\<Longrightarrow> v' \\<in> set vs \\<Longrightarrow> var g v' = var g v\"\n  assumes allDefs_var_disjoint: \"\\<lbrakk>n \\<in> set (\\<alpha>n g); v \\<in> allDefs g n; v' \\<in> allDefs g n; v \\<noteq> v'\\<rbrakk> \\<Longrightarrow> var g v' \\<noteq> var g v\"\nbegin"], ["", "lemma conventional': \"\\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; n \\<notin> set (tl ns); v \\<in> allDefs g n; v \\<in> allUses g m; v' \\<in> allDefs g x; var g v' = var g v\\<rbrakk> \\<Longrightarrow> x \\<notin> set (tl ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; n \\<notin> set (tl ns);\n     v \\<in> allDefs g n; v \\<in> allUses g m; v' \\<in> allDefs g x;\n     var g v' = var g v\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> set (tl ns)", "using conventional"], ["proof (prove)\nusing this:\n  \\<lbrakk>?g \\<turnstile> ?n-?ns\\<rightarrow>?m; ?n \\<notin> set (tl ?ns);\n   ?v \\<in> allDefs ?g ?n; ?v \\<in> allUses ?g ?m; ?x \\<in> set (tl ?ns);\n   ?v' \\<in> allDefs ?g ?x\\<rbrakk>\n  \\<Longrightarrow> var ?g ?v' \\<noteq> var ?g ?v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m; n \\<notin> set (tl ns);\n     v \\<in> allDefs g n; v \\<in> allUses g m; v' \\<in> allDefs g x;\n     var g v' = var g v\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> set (tl ns)", "by auto"], ["", "lemma conventional'': \"\\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m; defNode g v \\<notin> set (tl ns); v \\<in> allUses g m; var g v' = var g v; v \\<in> allVars g; v' \\<in> allVars g\\<rbrakk> \\<Longrightarrow> defNode g v' \\<notin> set (tl ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n     defNode g v \\<notin> set (tl ns); v \\<in> allUses g m;\n     var g v' = var g v; v \\<in> allVars g; v' \\<in> allVars g\\<rbrakk>\n    \\<Longrightarrow> defNode g v' \\<notin> set (tl ns)", "by (rule conventional'[where v=v and v'=v'], auto)"], ["", "lemma phiArg_same_var: \"phiArg g p q \\<Longrightarrow> var g q = var g p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phiArg g p q \\<Longrightarrow> var g q = var g p", "by (metis phiArg_def phi_def phis_same_var)"], ["", "lemma oldDef_defAss:\n    assumes \"v \\<in> allUses g n\" \"g \\<turnstile> Entry g-ns\\<rightarrow>n\"\n    obtains m where \"m \\<in> set ns\" \"var g v \\<in> oldDefs g m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set ns; var g v \\<in> oldDefs g m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> allUses g n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set ns; var g v \\<in> oldDefs g m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction ns arbitrary: v n rule: length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs v n.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x.\n                       (\\<forall>xa.\n                           xa \\<in> set ys \\<longrightarrow>\n                           var g x \\<in> oldDefs g xa \\<longrightarrow>\n                           thesis) \\<longrightarrow>\n                       (\\<forall>xa.\n                           x \\<in> allUses g xa \\<longrightarrow>\n                           g \\<turnstile> Entry\n     g-ys\\<rightarrow>xa \\<longrightarrow>\n                           thesis));\n        \\<And>m.\n           \\<lbrakk>m \\<in> set xs; var g v \\<in> oldDefs g m\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<in> allUses g n;\n        g \\<turnstile> Entry g-xs\\<rightarrow>n\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (1 ns)"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length ns \\<longrightarrow>\n     (\\<forall>x.\n         (\\<forall>xa.\n             xa \\<in> set ys \\<longrightarrow>\n             var g x \\<in> oldDefs g xa \\<longrightarrow>\n             thesis) \\<longrightarrow>\n         (\\<forall>xa.\n             x \\<in> allUses g xa \\<longrightarrow>\n             g \\<turnstile> Entry g-ys\\<rightarrow>xa \\<longrightarrow>\n             thesis))\n  \\<lbrakk>?m1 \\<in> set ns; var g v \\<in> oldDefs g ?m1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<in> allUses g n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. \\<And>xs v n.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x.\n                       (\\<forall>xa.\n                           xa \\<in> set ys \\<longrightarrow>\n                           var g x \\<in> oldDefs g xa \\<longrightarrow>\n                           thesis) \\<longrightarrow>\n                       (\\<forall>xa.\n                           x \\<in> allUses g xa \\<longrightarrow>\n                           g \\<turnstile> Entry\n     g-ys\\<rightarrow>xa \\<longrightarrow>\n                           thesis));\n        \\<And>m.\n           \\<lbrakk>m \\<in> set xs; var g v \\<in> oldDefs g m\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<in> allUses g n;\n        g \\<turnstile> Entry g-xs\\<rightarrow>n\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \"1.prems\"(2-)"], ["proof (chain)\npicking this:\n  v \\<in> allUses g n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n", "have 2: \"defNode g v \\<in> set ns\""], ["proof (prove)\nusing this:\n  v \\<in> allUses g n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set ns", "by - (rule defAss_defNode, rule allUses_def_ass, auto)"], ["proof (state)\nthis:\n  defNode g v \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<And>xs v n.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x.\n                       (\\<forall>xa.\n                           xa \\<in> set ys \\<longrightarrow>\n                           var g x \\<in> oldDefs g xa \\<longrightarrow>\n                           thesis) \\<longrightarrow>\n                       (\\<forall>xa.\n                           x \\<in> allUses g xa \\<longrightarrow>\n                           g \\<turnstile> Entry\n     g-ys\\<rightarrow>xa \\<longrightarrow>\n                           thesis));\n        \\<And>m.\n           \\<lbrakk>m \\<in> set xs; var g v \\<in> oldDefs g m\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<in> allUses g n;\n        g \\<turnstile> Entry g-xs\\<rightarrow>n\\<rbrakk>\n       \\<Longrightarrow> thesis", "let ?V = \"defNode g v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs v n.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x.\n                       (\\<forall>xa.\n                           xa \\<in> set ys \\<longrightarrow>\n                           var g x \\<in> oldDefs g xa \\<longrightarrow>\n                           thesis) \\<longrightarrow>\n                       (\\<forall>xa.\n                           x \\<in> allUses g xa \\<longrightarrow>\n                           g \\<turnstile> Entry\n     g-ys\\<rightarrow>xa \\<longrightarrow>\n                           thesis));\n        \\<And>m.\n           \\<lbrakk>m \\<in> set xs; var g v \\<in> oldDefs g m\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<in> allUses g n;\n        g \\<turnstile> Entry g-xs\\<rightarrow>n\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \"1.prems\"(2,3)"], ["proof (chain)\npicking this:\n  v \\<in> allUses g n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n", "have[simp]: \"v \\<in> allVars g\""], ["proof (prove)\nusing this:\n  v \\<in> allUses g n\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. v \\<in> allVars g", "by auto"], ["proof (state)\nthis:\n  v \\<in> allVars g\n\ngoal (1 subgoal):\n 1. \\<And>xs v n.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x.\n                       (\\<forall>xa.\n                           xa \\<in> set ys \\<longrightarrow>\n                           var g x \\<in> oldDefs g xa \\<longrightarrow>\n                           thesis) \\<longrightarrow>\n                       (\\<forall>xa.\n                           x \\<in> allUses g xa \\<longrightarrow>\n                           g \\<turnstile> Entry\n     g-ys\\<rightarrow>xa \\<longrightarrow>\n                           thesis));\n        \\<And>m.\n           \\<lbrakk>m \\<in> set xs; var g v \\<in> oldDefs g m\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<in> allUses g n;\n        g \\<turnstile> Entry g-xs\\<rightarrow>n\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  v \\<in> allVars g\n\ngoal (1 subgoal):\n 1. thesis", "proof (cases v rule: defNode_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis\n 2. phi g v \\<noteq> None \\<Longrightarrow> thesis", "case simpleDef"], ["proof (state)\nthis:\n  v \\<in> defs g (defNode g v)\n\ngoal (2 subgoals):\n 1. v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis\n 2. phi g v \\<noteq> None \\<Longrightarrow> thesis", "with 2"], ["proof (chain)\npicking this:\n  defNode g v \\<in> set ns\n  v \\<in> defs g (defNode g v)", "show thesis"], ["proof (prove)\nusing this:\n  defNode g v \\<in> set ns\n  v \\<in> defs g (defNode g v)\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule \"1.prems\"(1), auto simp: oldDefs_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "case phi"], ["proof (state)\nthis:\n  phi g v \\<noteq> None\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  phi g v \\<noteq> None", "obtain vs where vs: \"phi g v = Some vs\""], ["proof (prove)\nusing this:\n  phi g v \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>vs. phi g v = Some vs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  phi g v = Some vs\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "from \"1.prems\"(3) 2"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  defNode g v \\<in> set ns", "obtain ns' where ns': \"g \\<turnstile> Entry g-ns'\\<rightarrow>?V\" \"prefix ns' ns\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>n\n  defNode g v \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> Entry g-ns'\\<rightarrow>defNode g v;\n         prefix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule old.path2_split_ex, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>defNode g v\n  prefix ns' ns\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "let ?V' = \"last (butlast ns')\""], ["proof (state)\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "from ns' phi"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>defNode g v\n  prefix ns' ns\n  phi g v \\<noteq> None", "have nontriv: \"length ns' \\<ge> 2\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>defNode g v\n  prefix ns' ns\n  phi g v \\<noteq> None\n\ngoal (1 subgoal):\n 1. 2 \\<le> length ns'", "by - (rule old.path2_nontrivial, auto)"], ["proof (state)\nthis:\n  2 \\<le> length ns'\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "hence 3: \"g \\<turnstile> Entry g-butlast ns'\\<rightarrow>?V'\" \"?V' \\<in> set (old.predecessors g ?V)\""], ["proof (prove)\nusing this:\n  2 \\<le> length ns'\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns') &&&\n    last (butlast ns') \\<in> set (old.predecessors g (defNode g v))", "using ns'(1)"], ["proof (prove)\nusing this:\n  2 \\<le> length ns'\n  g \\<turnstile> Entry g-ns'\\<rightarrow>defNode g v\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns') &&&\n    last (butlast ns') \\<in> set (old.predecessors g (defNode g v))", "by (auto intro: old.path2_unsnoc)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')\n  last (butlast ns') \\<in> set (old.predecessors g (defNode g v))\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "with phi vs"], ["proof (chain)\npicking this:\n  phi g v \\<noteq> None\n  phi g v = Some vs\n  g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')\n  last (butlast ns') \\<in> set (old.predecessors g (defNode g v))", "obtain v' where v': \"v' \\<in> phiUses g ?V'\" \"var g v' = var g v\""], ["proof (prove)\nusing this:\n  phi g v \\<noteq> None\n  phi g v = Some vs\n  g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')\n  last (butlast ns') \\<in> set (old.predecessors g (defNode g v))\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> phiUses g (last (butlast ns'));\n         var g v' = var g v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule phiArg_exI, auto simp: phi_def phis_same_var phiArg_def)"], ["proof (state)\nthis:\n  v' \\<in> phiUses g (last (butlast ns'))\n  var g v' = var g v\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule \"1.IH\"[rule_format])"], ["proof (state)\ngoal (4 subgoals):\n 1. length ?ys < length ns\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> set ?ys; var g ?x \\<in> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. ?x \\<in> allUses g ?xa\n 4. g \\<turnstile> Entry g-?ys\\<rightarrow>?xa", "show \"length (butlast ns') < length ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (butlast ns') < length ns", "using ns'"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns'\\<rightarrow>defNode g v\n  prefix ns' ns\n\ngoal (1 subgoal):\n 1. length (butlast ns') < length ns", "by (cases ns', auto simp: old.path2_not_Nil2 dest: prefix_length_le)"], ["proof (state)\nthis:\n  length (butlast ns') < length ns\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (butlast ns');\n        var g ?x \\<in> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. ?x \\<in> allUses g ?xa\n 3. g \\<turnstile> Entry g-butlast ns'\\<rightarrow>?xa", "show \"v' \\<in> allUses g ?V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v' \\<in> allUses g (last (butlast ns'))", "using v'(1)"], ["proof (prove)\nusing this:\n  v' \\<in> phiUses g (last (butlast ns'))\n\ngoal (1 subgoal):\n 1. v' \\<in> allUses g (last (butlast ns'))", "by simp"], ["proof (state)\nthis:\n  v' \\<in> allUses g (last (butlast ns'))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (butlast ns');\n        var g v' \\<in> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (butlast ns');\n        var g v' \\<in> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (butlast ns');\n        var g v' \\<in> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')", "assume \"n \\<in> set (butlast ns')\" \"var g v' \\<in> oldDefs g n\""], ["proof (state)\nthis:\n  n \\<in> set (butlast ns')\n  var g v' \\<in> oldDefs g n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (butlast ns');\n        var g v' \\<in> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')", "thus thesis"], ["proof (prove)\nusing this:\n  n \\<in> set (butlast ns')\n  var g v' \\<in> oldDefs g n\n\ngoal (1 subgoal):\n 1. thesis", "using ns'(2)[THEN set_mono_prefix] v'(2)"], ["proof (prove)\nusing this:\n  n \\<in> set (butlast ns')\n  var g v' \\<in> oldDefs g n\n  set ns' \\<subseteq> set ns\n  var g v' = var g v\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule \"1.prems\"(1)[of n], auto dest: in_set_butlastD)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-butlast ns'\\<rightarrow>last (butlast ns')", "qed (rule 3(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma allDef_path_from_simpleDef:\n    assumes[simp]: \"v \\<in> allVars g\"\n    obtains n ns where \"g \\<turnstile> n-ns\\<rightarrow>defNode g v\" \"old.EntryPath g ns\" \"var g v \\<in> oldDefs g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n ns.\n        \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>defNode g v;\n         old.EntryPath g ns; var g v \\<in> oldDefs g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n ns.\n        \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>defNode g v;\n         old.EntryPath g ns; var g v \\<in> oldDefs g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?V = \"defNode g v\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n ns.\n        \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>defNode g v;\n         old.EntryPath g ns; var g v \\<in> oldDefs g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> allVars g", "obtain ns where ns: \"g \\<turnstile> Entry g-ns\\<rightarrow>?V\" \"old.EntryPath g ns\""], ["proof (prove)\nusing this:\n  v \\<in> allVars g\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> Entry g-ns\\<rightarrow>defNode g v;\n         old.EntryPath g ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.Entry_reachesE, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ns\\<rightarrow>defNode g v\n  old.EntryPath g ns\n\ngoal (1 subgoal):\n 1. (\\<And>n ns.\n        \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>defNode g v;\n         old.EntryPath g ns; var g v \\<in> oldDefs g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> allVars g", "show thesis"], ["proof (prove)\nusing this:\n  v \\<in> allVars g\n\ngoal (1 subgoal):\n 1. thesis", "proof (cases v rule: defNode_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis\n 2. phi g v \\<noteq> None \\<Longrightarrow> thesis", "case simpleDef"], ["proof (state)\nthis:\n  v \\<in> defs g (defNode g v)\n\ngoal (2 subgoals):\n 1. v \\<in> defs g (defNode g v) \\<Longrightarrow> thesis\n 2. phi g v \\<noteq> None \\<Longrightarrow> thesis", "thus thesis"], ["proof (prove)\nusing this:\n  v \\<in> defs g (defNode g v)\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that, auto simp: oldDefs_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "case phi"], ["proof (state)\nthis:\n  phi g v \\<noteq> None\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  phi g v \\<noteq> None", "obtain vs where vs: \"phi g v = Some vs\""], ["proof (prove)\nusing this:\n  phi g v \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>vs. phi g v = Some vs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  phi g v = Some vs\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "let ?V' = \"last (butlast ns)\""], ["proof (state)\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "from ns phi"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>defNode g v\n  old.EntryPath g ns\n  phi g v \\<noteq> None", "have nontriv: \"length ns \\<ge> 2\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>defNode g v\n  old.EntryPath g ns\n  phi g v \\<noteq> None\n\ngoal (1 subgoal):\n 1. 2 \\<le> length ns", "by - (rule old.path2_nontrivial, auto)"], ["proof (state)\nthis:\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "hence 3: \"g \\<turnstile> Entry g-butlast ns\\<rightarrow>?V'\" \"?V' \\<in> set (old.predecessors g ?V)\""], ["proof (prove)\nusing this:\n  2 \\<le> length ns\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns) &&&\n    last (butlast ns) \\<in> set (old.predecessors g (defNode g v))", "using ns(1)"], ["proof (prove)\nusing this:\n  2 \\<le> length ns\n  g \\<turnstile> Entry g-ns\\<rightarrow>defNode g v\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns) &&&\n    last (butlast ns) \\<in> set (old.predecessors g (defNode g v))", "by (auto intro: old.path2_unsnoc)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (old.predecessors g (defNode g v))\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "with phi vs"], ["proof (chain)\npicking this:\n  phi g v \\<noteq> None\n  phi g v = Some vs\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (old.predecessors g (defNode g v))", "obtain v' where v': \"v' \\<in> phiUses g ?V'\" \"var g v' = var g v\""], ["proof (prove)\nusing this:\n  phi g v \\<noteq> None\n  phi g v = Some vs\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  last (butlast ns) \\<in> set (old.predecessors g (defNode g v))\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> phiUses g (last (butlast ns));\n         var g v' = var g v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule phiArg_exI, auto simp: phi_def phis_same_var phiArg_def)"], ["proof (state)\nthis:\n  v' \\<in> phiUses g (last (butlast ns))\n  var g v' = var g v\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "with 3(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  v' \\<in> phiUses g (last (butlast ns))\n  var g v' = var g v", "obtain n where n: \"n \\<in> set (butlast ns)\" \"var g v' \\<in> oldDefs g n\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-butlast ns\\<rightarrow>last (butlast ns)\n  v' \\<in> phiUses g (last (butlast ns))\n  var g v' = var g v\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> set (butlast ns);\n         var g v' \\<in> oldDefs g n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule oldDef_defAss[of v' g], auto)"], ["proof (state)\nthis:\n  n \\<in> set (butlast ns)\n  var g v' \\<in> oldDefs g n\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "with ns"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>defNode g v\n  old.EntryPath g ns\n  n \\<in> set (butlast ns)\n  var g v' \\<in> oldDefs g n", "obtain ns' where \"g \\<turnstile> n-ns'\\<rightarrow>?V\" \"suffix ns' ns\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ns\\<rightarrow>defNode g v\n  old.EntryPath g ns\n  n \\<in> set (butlast ns)\n  var g v' \\<in> oldDefs g n\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>defNode g v;\n         suffix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_ex'[OF ns(1)], auto intro: in_set_butlastD simp: Sublist.suffix_def)"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns'\\<rightarrow>defNode g v\n  suffix ns' ns\n\ngoal (1 subgoal):\n 1. phi g v \\<noteq> None \\<Longrightarrow> thesis", "with n(2) v'(2) ns(2)"], ["proof (chain)\npicking this:\n  var g v' \\<in> oldDefs g n\n  var g v' = var g v\n  old.EntryPath g ns\n  g \\<turnstile> n-ns'\\<rightarrow>defNode g v\n  suffix ns' ns", "show thesis"], ["proof (prove)\nusing this:\n  var g v' \\<in> oldDefs g n\n  var g v' = var g v\n  old.EntryPath g ns\n  g \\<turnstile> n-ns'\\<rightarrow>defNode g v\n  suffix ns' ns\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that, assumption, erule old.EntryPath_suffix, auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma defNode_var_disjoint:\n    assumes \"p \\<in> allVars g\" \"q \\<in> allVars g\" \"p \\<noteq> q\" \"defNode g p = defNode g q\"\n    shows \"var g p \\<noteq> var g q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var g p \\<noteq> var g q", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. var g p \\<noteq> var g q", "have \"q \\<in> allDefs g (defNode g p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> allDefs g (defNode g p)", "using assms(2) assms(4)"], ["proof (prove)\nusing this:\n  q \\<in> allVars g\n  defNode g p = defNode g q\n\ngoal (1 subgoal):\n 1. q \\<in> allDefs g (defNode g p)", "by (auto)"], ["proof (state)\nthis:\n  q \\<in> allDefs g (defNode g p)\n\ngoal (1 subgoal):\n 1. var g p \\<noteq> var g q", "thus ?thesis"], ["proof (prove)\nusing this:\n  q \\<in> allDefs g (defNode g p)\n\ngoal (1 subgoal):\n 1. var g p \\<noteq> var g q", "using assms(1-3)"], ["proof (prove)\nusing this:\n  q \\<in> allDefs g (defNode g p)\n  p \\<in> allVars g\n  q \\<in> allVars g\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. var g p \\<noteq> var g q", "by - (rule allDefs_var_disjoint[of \"defNode g p\" g], auto)"], ["proof (state)\nthis:\n  var g p \\<noteq> var g q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phiArg_distinct_nodes:\n    assumes \"phiArg g p q\" \"p \\<noteq> q\" and[simp]: \"p \\<in> allVars g\"\n    shows \"defNode g p \\<noteq> defNode g q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> defNode g q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g p = defNode g q \\<Longrightarrow> False", "have \"p \\<in> allDefs g (defNode g p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> allDefs g (defNode g p)", "by simp"], ["proof (state)\nthis:\n  p \\<in> allDefs g (defNode g p)\n\ngoal (1 subgoal):\n 1. defNode g p = defNode g q \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  p \\<in> allDefs g (defNode g p)\n\ngoal (1 subgoal):\n 1. defNode g p = defNode g q \\<Longrightarrow> False", "assume \"defNode g p = defNode g q\""], ["proof (state)\nthis:\n  defNode g p = defNode g q\n\ngoal (1 subgoal):\n 1. defNode g p = defNode g q \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  p \\<in> allDefs g (defNode g p)\n  defNode g p = defNode g q", "have \"var g p \\<noteq> var g q\""], ["proof (prove)\nusing this:\n  p \\<in> allDefs g (defNode g p)\n  defNode g p = defNode g q\n\ngoal (1 subgoal):\n 1. var g p \\<noteq> var g q", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> allDefs g (defNode g p)\n  defNode g p = defNode g q\n  phiArg g p q\n  p \\<noteq> q\n  p \\<in> allVars g\n\ngoal (1 subgoal):\n 1. var g p \\<noteq> var g q", "by - (rule defNode_var_disjoint, auto)"], ["proof (state)\nthis:\n  var g p \\<noteq> var g q\n\ngoal (1 subgoal):\n 1. defNode g p = defNode g q \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  var g p \\<noteq> var g q\n\ngoal (1 subgoal):\n 1. defNode g p = defNode g q \\<Longrightarrow> False", "from assms(1)"], ["proof (chain)\npicking this:\n  phiArg g p q", "have \"var g q = var g p\""], ["proof (prove)\nusing this:\n  phiArg g p q\n\ngoal (1 subgoal):\n 1. var g q = var g p", "by (rule phiArg_same_var)"], ["proof (state)\nthis:\n  var g q = var g p\n\ngoal (1 subgoal):\n 1. defNode g p = defNode g q \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  var g p \\<noteq> var g q\n  var g q = var g p", "show False"], ["proof (prove)\nusing this:\n  var g p \\<noteq> var g q\n  var g q = var g p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phiArgs_def_distinct:\n    assumes \"phiArg g p q\" \"phiArg g p r\" \"q \\<noteq> r\" \"p \\<in> allVars g\"\n    shows \"defNode g q \\<noteq> defNode g r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g q \\<noteq> defNode g r", "proof (rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g q = defNode g r \\<Longrightarrow> False", "assume \"defNode g q = defNode g r\""], ["proof (state)\nthis:\n  defNode g q = defNode g r\n\ngoal (1 subgoal):\n 1. defNode g q = defNode g r \\<Longrightarrow> False", "hence \"var g q \\<noteq> var g r\""], ["proof (prove)\nusing this:\n  defNode g q = defNode g r\n\ngoal (1 subgoal):\n 1. var g q \\<noteq> var g r", "using assms"], ["proof (prove)\nusing this:\n  defNode g q = defNode g r\n  phiArg g p q\n  phiArg g p r\n  q \\<noteq> r\n  p \\<in> allVars g\n\ngoal (1 subgoal):\n 1. var g q \\<noteq> var g r", "by - (rule defNode_var_disjoint, auto)"], ["proof (state)\nthis:\n  var g q \\<noteq> var g r\n\ngoal (1 subgoal):\n 1. defNode g q = defNode g r \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  var g q \\<noteq> var g r\n\ngoal (1 subgoal):\n 1. False", "using phiArg_same_var[OF assms(1)] phiArg_same_var[OF assms(2)]"], ["proof (prove)\nusing this:\n  var g q \\<noteq> var g r\n  var g q = var g p\n  var g r = var g p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma defNode_not_on_defUse_path:\n    assumes p: \"g \\<turnstile> defNode g p-ns\\<rightarrow>n\" \"defNode g p \\<notin> set (tl ns)\" \"p \\<in> allUses g n\"\n    assumes[simp]: \"q \\<in> allVars g\" \"p \\<noteq> q\" \"var g p = var g q\"\n    shows \"defNode g q \\<notin> set ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set ns", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set ns", "let ?P = \"defNode g p\""], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set ns", "let ?Q = \"defNode g q\""], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set ns", "have[simp]: \"p \\<in> allVars g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> allVars g", "using p(1,3)"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g p-ns\\<rightarrow>n\n  p \\<in> allUses g n\n\ngoal (1 subgoal):\n 1. p \\<in> allVars g", "by auto"], ["proof (state)\nthis:\n  p \\<in> allVars g\n\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set ns", "have \"?P \\<noteq> ?Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> defNode g q", "using defNode_var_disjoint[of p g q]"], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<in> allVars g; q \\<in> allVars g; p \\<noteq> q;\n   defNode g p = defNode g q\\<rbrakk>\n  \\<Longrightarrow> var g p \\<noteq> var g q\n\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> defNode g q", "by auto"], ["proof (state)\nthis:\n  defNode g p \\<noteq> defNode g q\n\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set ns", "moreover"], ["proof (state)\nthis:\n  defNode g p \\<noteq> defNode g q\n\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set ns", "have \"?Q \\<notin> set (tl ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set (tl ns)", "using p(2,3)"], ["proof (prove)\nusing this:\n  defNode g p \\<notin> set (tl ns)\n  p \\<in> allUses g n\n\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set (tl ns)", "by - (rule conventional'[OF p(1), of p q], auto)"], ["proof (state)\nthis:\n  defNode g q \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set ns", "ultimately"], ["proof (chain)\npicking this:\n  defNode g p \\<noteq> defNode g q\n  defNode g q \\<notin> set (tl ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  defNode g p \\<noteq> defNode g q\n  defNode g q \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set ns", "using p(1)"], ["proof (prove)\nusing this:\n  defNode g p \\<noteq> defNode g q\n  defNode g q \\<notin> set (tl ns)\n  g \\<turnstile> defNode g p-ns\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. defNode g q \\<notin> set ns", "by (cases ns, auto simp: old.path2_def)"], ["proof (state)\nthis:\n  defNode g q \\<notin> set ns\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma defUse_paths_disjoint:\n    assumes p: \"g \\<turnstile> defNode g p-ns\\<rightarrow>n\" \"defNode g p \\<notin> set (tl ns)\" \"p \\<in> allUses g n\"\n    assumes q: \"g \\<turnstile> defNode g q-ms\\<rightarrow>m\" \"defNode g q \\<notin> set (tl ms)\" \"q \\<in> allUses g m\"\n    assumes[simp]: \"p \\<noteq> q\" \"var g p = var g q\"\n    shows \"set ns \\<inter> set ms = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ns \\<inter> set ms = {}", "proof (rule equals0I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "assume y: \"y \\<in> set ns \\<inter> set ms\""], ["proof (state)\nthis:\n  y \\<in> set ns \\<inter> set ms\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  y \\<in> set ns \\<inter> set ms\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "fix p ns n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "assume p: \"g \\<turnstile> defNode g p-ns\\<rightarrow>n\" \"defNode g p \\<notin> set (tl ns)\" \"p \\<in> allUses g n\""], ["proof (state)\nthis:\n  g \\<turnstile> defNode g p-ns\\<rightarrow>n\n  defNode g p \\<notin> set (tl ns)\n  p \\<in> allUses g n\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "assume y: \"y \\<in> set ns\""], ["proof (state)\nthis:\n  y \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "from p(1,3)"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g p-ns\\<rightarrow>n\n  p \\<in> allUses g n", "have dom: \"old.dominates g (defNode g p) n\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g p-ns\\<rightarrow>n\n  p \\<in> allUses g n\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g p) n", "by - (rule allUses_dominated, auto)"], ["proof (state)\nthis:\n  old.dominates g (defNode g p) n\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  old.dominates g (defNode g p) n\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "obtain ns' where \"g \\<turnstile> y-ns'\\<rightarrow>n\" \"suffix ns' ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> y-ns'\\<rightarrow>n; suffix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule old.path2_split_first_last[OF p(1) y], auto)"], ["proof (state)\nthis:\n  g \\<turnstile> y-ns'\\<rightarrow>n\n  suffix ns' ns\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  old.dominates g (defNode g p) n\n  g \\<turnstile> y-ns'\\<rightarrow>n\n  suffix ns' ns", "have \"old.dominates g (defNode g p) y\""], ["proof (prove)\nusing this:\n  old.dominates g (defNode g p) n\n  g \\<turnstile> y-ns'\\<rightarrow>n\n  suffix ns' ns\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g p) y", "using suffix_tl_subset[of ns' ns] p(2)"], ["proof (prove)\nusing this:\n  old.dominates g (defNode g p) n\n  g \\<turnstile> y-ns'\\<rightarrow>n\n  suffix ns' ns\n  suffix ns' ns \\<Longrightarrow> set (tl ns') \\<subseteq> set (tl ns)\n  defNode g p \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g p) y", "by - (rule old.dominates_extend[where ms=ns'], auto)"], ["proof (state)\nthis:\n  old.dominates g (defNode g p) y\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>g \\<turnstile> defNode g ?pa3-?nsa3\\<rightarrow>?na3;\n   defNode g ?pa3 \\<notin> set (tl ?nsa3); ?pa3 \\<in> allUses g ?na3;\n   y \\<in> set ?nsa3\\<rbrakk>\n  \\<Longrightarrow> old.dominates g (defNode g ?pa3) y\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "with assms y"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g p-ns\\<rightarrow>n\n  defNode g p \\<notin> set (tl ns)\n  p \\<in> allUses g n\n  g \\<turnstile> defNode g q-ms\\<rightarrow>m\n  defNode g q \\<notin> set (tl ms)\n  q \\<in> allUses g m\n  p \\<noteq> q\n  var g p = var g q\n  y \\<in> set ns \\<inter> set ms\n  \\<lbrakk>g \\<turnstile> defNode g ?pa3-?nsa3\\<rightarrow>?na3;\n   defNode g ?pa3 \\<notin> set (tl ?nsa3); ?pa3 \\<in> allUses g ?na3;\n   y \\<in> set ?nsa3\\<rbrakk>\n  \\<Longrightarrow> old.dominates g (defNode g ?pa3) y", "have dom: \"old.dominates g (defNode g p) y\" \"old.dominates g (defNode g q) y\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g p-ns\\<rightarrow>n\n  defNode g p \\<notin> set (tl ns)\n  p \\<in> allUses g n\n  g \\<turnstile> defNode g q-ms\\<rightarrow>m\n  defNode g q \\<notin> set (tl ms)\n  q \\<in> allUses g m\n  p \\<noteq> q\n  var g p = var g q\n  y \\<in> set ns \\<inter> set ms\n  \\<lbrakk>g \\<turnstile> defNode g ?pa3-?nsa3\\<rightarrow>?na3;\n   defNode g ?pa3 \\<notin> set (tl ?nsa3); ?pa3 \\<in> allUses g ?na3;\n   y \\<in> set ?nsa3\\<rbrakk>\n  \\<Longrightarrow> old.dominates g (defNode g ?pa3) y\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g p) y &&& old.dominates g (defNode g q) y", "by auto"], ["proof (state)\nthis:\n  old.dominates g (defNode g p) y\n  old.dominates g (defNode g q) y\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  old.dominates g (defNode g p) y\n  old.dominates g (defNode g q) y\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "fix p ns n q ms m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "let ?P = \"defNode g p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "let ?Q = \"defNode g q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "assume p: \"g \\<turnstile> defNode g p-ns\\<rightarrow>n\" \"defNode g p \\<notin> set (tl ns)\" \"p \\<in> allUses g n\" \"old.dominates g ?P y\" \"y \\<in> set ns\""], ["proof (state)\nthis:\n  g \\<turnstile> defNode g p-ns\\<rightarrow>n\n  defNode g p \\<notin> set (tl ns)\n  p \\<in> allUses g n\n  old.dominates g (defNode g p) y\n  y \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "assume q: \"g \\<turnstile> defNode g q-ms\\<rightarrow>m\" \"defNode g q \\<notin> set (tl ms)\" \"q \\<in> allUses g m\" \"old.dominates g ?Q y\" \"y \\<in> set ms\""], ["proof (state)\nthis:\n  g \\<turnstile> defNode g q-ms\\<rightarrow>m\n  defNode g q \\<notin> set (tl ms)\n  q \\<in> allUses g m\n  old.dominates g (defNode g q) y\n  y \\<in> set ms\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "assume[simp]: \"p \\<noteq> q\" \"var g p = var g q\""], ["proof (state)\nthis:\n  p \\<noteq> q\n  var g p = var g q\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "assume dom: \"old.dominates g ?P ?Q\""], ["proof (state)\nthis:\n  def_dominates g p q\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  def_dominates g p q", "obtain pqs where pqs: \"g \\<turnstile> ?P-pqs\\<rightarrow>?Q\" \"?P \\<notin> set (tl pqs)\""], ["proof (prove)\nusing this:\n  def_dominates g p q\n\ngoal (1 subgoal):\n 1. (\\<And>pqs.\n        \\<lbrakk>g \\<turnstile> defNode g p-pqs\\<rightarrow>defNode g q;\n         defNode g p \\<notin> set (tl pqs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule old.dominates_path, auto intro: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g p-pqs\\<rightarrow>defNode g q\n  defNode g p \\<notin> set (tl pqs)\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "from p"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g p-ns\\<rightarrow>n\n  defNode g p \\<notin> set (tl ns)\n  p \\<in> allUses g n\n  old.dominates g (defNode g p) y\n  y \\<in> set ns", "obtain ns\\<^sub>2 where ns\\<^sub>2: \"g \\<turnstile> y-ns\\<^sub>2\\<rightarrow>n\" \"suffix ns\\<^sub>2 ns\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g p-ns\\<rightarrow>n\n  defNode g p \\<notin> set (tl ns)\n  p \\<in> allUses g n\n  old.dominates g (defNode g p) y\n  y \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> y-ns\\<^sub>2\\<rightarrow>n;\n         suffix ns\\<^sub>2 ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_first_last, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> y-ns\\<^sub>2\\<rightarrow>n\n  suffix ns\\<^sub>2 ns\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "from q"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g q-ms\\<rightarrow>m\n  defNode g q \\<notin> set (tl ms)\n  q \\<in> allUses g m\n  old.dominates g (defNode g q) y\n  y \\<in> set ms", "obtain ms\\<^sub>1 where ms\\<^sub>1: \"g \\<turnstile> ?Q-ms\\<^sub>1\\<rightarrow>y\" \"prefix ms\\<^sub>1 ms\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g q-ms\\<rightarrow>m\n  defNode g q \\<notin> set (tl ms)\n  q \\<in> allUses g m\n  old.dominates g (defNode g q) y\n  y \\<in> set ms\n\ngoal (1 subgoal):\n 1. (\\<And>ms\\<^sub>1.\n        \\<lbrakk>g \\<turnstile> defNode g q-ms\\<^sub>1\\<rightarrow>y;\n         prefix ms\\<^sub>1 ms\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_first_last, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g q-ms\\<^sub>1\\<rightarrow>y\n  prefix ms\\<^sub>1 ms\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "have \"var g q \\<noteq> var g p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var g q \\<noteq> var g p", "proof (rule conventional[OF _ _ _ p(3)])"], ["proof (state)\ngoal (5 subgoals):\n 1. g \\<turnstile> ?n-?ns\\<rightarrow>n\n 2. ?n \\<notin> set (tl ?ns)\n 3. p \\<in> allDefs g ?n\n 4. ?x \\<in> set (tl ?ns)\n 5. q \\<in> allDefs g ?x", "let ?path = \"(pqs@tl ms\\<^sub>1)@tl ns\\<^sub>2\""], ["proof (state)\ngoal (5 subgoals):\n 1. g \\<turnstile> ?n-?ns\\<rightarrow>n\n 2. ?n \\<notin> set (tl ?ns)\n 3. p \\<in> allDefs g ?n\n 4. ?x \\<in> set (tl ?ns)\n 5. q \\<in> allDefs g ?x", "show \"g \\<turnstile> ?P-?path\\<rightarrow>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g\n                    p-(pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2\\<rightarrow>n", "using pqs ms\\<^sub>1 ns\\<^sub>2"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g p-pqs\\<rightarrow>defNode g q\n  defNode g p \\<notin> set (tl pqs)\n  g \\<turnstile> defNode g q-ms\\<^sub>1\\<rightarrow>y\n  prefix ms\\<^sub>1 ms\n  g \\<turnstile> y-ns\\<^sub>2\\<rightarrow>n\n  suffix ns\\<^sub>2 ns\n\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g\n                    p-(pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2\\<rightarrow>n", "by (auto simp del:append_assoc intro:old.path2_app)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g\n                  p-(pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2\\<rightarrow>n\n\ngoal (4 subgoals):\n 1. defNode g p \\<notin> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. p \\<in> allDefs g (defNode g p)\n 3. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 4. q \\<in> allDefs g ?x", "have \"?P \\<notin> set (tl ns\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g p \\<notin> set (tl ns\\<^sub>2)", "using p(2) ns\\<^sub>2(2)[THEN suffix_tl_subset, THEN subsetD]"], ["proof (prove)\nusing this:\n  defNode g p \\<notin> set (tl ns)\n  ?c \\<in> set (tl ns\\<^sub>2) \\<Longrightarrow> ?c \\<in> set (tl ns)\n\ngoal (1 subgoal):\n 1. defNode g p \\<notin> set (tl ns\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  defNode g p \\<notin> set (tl ns\\<^sub>2)\n\ngoal (4 subgoals):\n 1. defNode g p \\<notin> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. p \\<in> allDefs g (defNode g p)\n 3. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 4. q \\<in> allDefs g ?x", "moreover"], ["proof (state)\nthis:\n  defNode g p \\<notin> set (tl ns\\<^sub>2)\n\ngoal (4 subgoals):\n 1. defNode g p \\<notin> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. p \\<in> allDefs g (defNode g p)\n 3. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 4. q \\<in> allDefs g ?x", "have[simp]: \"q \\<in> allVars g\" \"p \\<in> allVars g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> allVars g &&& p \\<in> allVars g", "using p q"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g p-ns\\<rightarrow>n\n  defNode g p \\<notin> set (tl ns)\n  p \\<in> allUses g n\n  old.dominates g (defNode g p) y\n  y \\<in> set ns\n  g \\<turnstile> defNode g q-ms\\<rightarrow>m\n  defNode g q \\<notin> set (tl ms)\n  q \\<in> allUses g m\n  old.dominates g (defNode g q) y\n  y \\<in> set ms\n\ngoal (1 subgoal):\n 1. q \\<in> allVars g &&& p \\<in> allVars g", "by auto"], ["proof (state)\nthis:\n  q \\<in> allVars g\n  p \\<in> allVars g\n\ngoal (4 subgoals):\n 1. defNode g p \\<notin> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. p \\<in> allDefs g (defNode g p)\n 3. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 4. q \\<in> allDefs g ?x", "have \"?P \\<notin> set (tl ms)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g p \\<notin> set (tl ms)", "using q"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g q-ms\\<rightarrow>m\n  defNode g q \\<notin> set (tl ms)\n  q \\<in> allUses g m\n  old.dominates g (defNode g q) y\n  y \\<in> set ms\n\ngoal (1 subgoal):\n 1. defNode g p \\<notin> set (tl ms)", "by - (rule conventional'[where v'=p and v=q], auto)"], ["proof (state)\nthis:\n  defNode g p \\<notin> set (tl ms)\n\ngoal (4 subgoals):\n 1. defNode g p \\<notin> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. p \\<in> allDefs g (defNode g p)\n 3. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 4. q \\<in> allDefs g ?x", "hence \"?P \\<notin> set (tl ms\\<^sub>1)\""], ["proof (prove)\nusing this:\n  defNode g p \\<notin> set (tl ms)\n\ngoal (1 subgoal):\n 1. defNode g p \\<notin> set (tl ms\\<^sub>1)", "using ms\\<^sub>1(2)[simplified, THEN prefix_tl_subset]"], ["proof (prove)\nusing this:\n  defNode g p \\<notin> set (tl ms)\n  set (tl ms\\<^sub>1) \\<subseteq> set (tl ms)\n\ngoal (1 subgoal):\n 1. defNode g p \\<notin> set (tl ms\\<^sub>1)", "by auto"], ["proof (state)\nthis:\n  defNode g p \\<notin> set (tl ms\\<^sub>1)\n\ngoal (4 subgoals):\n 1. defNode g p \\<notin> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. p \\<in> allDefs g (defNode g p)\n 3. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 4. q \\<in> allDefs g ?x", "ultimately"], ["proof (chain)\npicking this:\n  defNode g p \\<notin> set (tl ns\\<^sub>2)\n  defNode g p \\<notin> set (tl ms\\<^sub>1)", "show \"?P \\<notin> set (tl ?path)\""], ["proof (prove)\nusing this:\n  defNode g p \\<notin> set (tl ns\\<^sub>2)\n  defNode g p \\<notin> set (tl ms\\<^sub>1)\n\ngoal (1 subgoal):\n 1. defNode g p \\<notin> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))", "using pqs(2)"], ["proof (prove)\nusing this:\n  defNode g p \\<notin> set (tl ns\\<^sub>2)\n  defNode g p \\<notin> set (tl ms\\<^sub>1)\n  defNode g p \\<notin> set (tl pqs)\n\ngoal (1 subgoal):\n 1. defNode g p \\<notin> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))", "by - (rule notI, auto dest: subsetD[OF set_tl_append'])"], ["proof (state)\nthis:\n  defNode g p \\<notin> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n\ngoal (3 subgoals):\n 1. p \\<in> allDefs g (defNode g p)\n 2. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 3. q \\<in> allDefs g ?x", "show \"p \\<in> allDefs g (defNode g p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> allDefs g (defNode g p)", "by auto"], ["proof (state)\nthis:\n  p \\<in> allDefs g (defNode g p)\n\ngoal (2 subgoals):\n 1. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. q \\<in> allDefs g ?x", "have \"?P \\<noteq> ?Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> defNode g q", "using defNode_var_disjoint[of p g q]"], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<in> allVars g; q \\<in> allVars g; p \\<noteq> q;\n   defNode g p = defNode g q\\<rbrakk>\n  \\<Longrightarrow> var g p \\<noteq> var g q\n\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> defNode g q", "by auto"], ["proof (state)\nthis:\n  defNode g p \\<noteq> defNode g q\n\ngoal (2 subgoals):\n 1. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. q \\<in> allDefs g ?x", "hence 1: \"length pqs > 1\""], ["proof (prove)\nusing this:\n  defNode g p \\<noteq> defNode g q\n\ngoal (1 subgoal):\n 1. 1 < length pqs", "using pqs"], ["proof (prove)\nusing this:\n  defNode g p \\<noteq> defNode g q\n  g \\<turnstile> defNode g p-pqs\\<rightarrow>defNode g q\n  defNode g p \\<notin> set (tl pqs)\n\ngoal (1 subgoal):\n 1. 1 < length pqs", "by - (rule old.path2_nontriv)"], ["proof (state)\nthis:\n  1 < length pqs\n\ngoal (2 subgoals):\n 1. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. q \\<in> allDefs g ?x", "hence \"?Q \\<in> set (tl pqs)\""], ["proof (prove)\nusing this:\n  1 < length pqs\n\ngoal (1 subgoal):\n 1. defNode g q \\<in> set (tl pqs)", "using pqs"], ["proof (prove)\nusing this:\n  1 < length pqs\n  g \\<turnstile> defNode g p-pqs\\<rightarrow>defNode g q\n  defNode g p \\<notin> set (tl pqs)\n\ngoal (1 subgoal):\n 1. defNode g q \\<in> set (tl pqs)", "unfolding old.path2_def"], ["proof (prove)\nusing this:\n  1 < length pqs\n  old.path g pqs \\<and> defNode g p = hd pqs \\<and> defNode g q = last pqs\n  defNode g p \\<notin> set (tl pqs)\n\ngoal (1 subgoal):\n 1. defNode g q \\<in> set (tl pqs)", "by (auto intro:last_in_tl)"], ["proof (state)\nthis:\n  defNode g q \\<in> set (tl pqs)\n\ngoal (2 subgoals):\n 1. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. q \\<in> allDefs g ?x", "moreover"], ["proof (state)\nthis:\n  defNode g q \\<in> set (tl pqs)\n\ngoal (2 subgoals):\n 1. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. q \\<in> allDefs g ?x", "from 1"], ["proof (chain)\npicking this:\n  1 < length pqs", "have \"pqs \\<noteq> []\""], ["proof (prove)\nusing this:\n  1 < length pqs\n\ngoal (1 subgoal):\n 1. pqs \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  pqs \\<noteq> []\n\ngoal (2 subgoals):\n 1. ?x \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n 2. q \\<in> allDefs g ?x", "ultimately"], ["proof (chain)\npicking this:\n  defNode g q \\<in> set (tl pqs)\n  pqs \\<noteq> []", "show \"?Q \\<in> set (tl ?path)\""], ["proof (prove)\nusing this:\n  defNode g q \\<in> set (tl pqs)\n  pqs \\<noteq> []\n\ngoal (1 subgoal):\n 1. defNode g q \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))", "by simp"], ["proof (state)\nthis:\n  defNode g q \\<in> set (tl ((pqs @ tl ms\\<^sub>1) @ tl ns\\<^sub>2))\n\ngoal (1 subgoal):\n 1. q \\<in> allDefs g (defNode g q)", "show \"q \\<in> allDefs g ?Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> allDefs g (defNode g q)", "by simp"], ["proof (state)\nthis:\n  q \\<in> allDefs g (defNode g q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var g q \\<noteq> var g p\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "hence False"], ["proof (prove)\nusing this:\n  var g q \\<noteq> var g p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>g \\<turnstile> defNode g ?pa3-?nsa3\\<rightarrow>?na3;\n   defNode g ?pa3 \\<notin> set (tl ?nsa3); ?pa3 \\<in> allUses g ?na3;\n   old.dominates g (defNode g ?pa3) y; y \\<in> set ?nsa3;\n   g \\<turnstile> defNode g ?qa3-?msa3\\<rightarrow>?ma3;\n   defNode g ?qa3 \\<notin> set (tl ?msa3); ?qa3 \\<in> allUses g ?ma3;\n   old.dominates g (defNode g ?qa3) y; y \\<in> set ?msa3;\n   ?pa3 \\<noteq> ?qa3; var g ?pa3 = var g ?qa3;\n   def_dominates g ?pa3 ?qa3\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ns \\<inter> set ms \\<Longrightarrow> False", "from this[OF p _ _ q] this[OF q _ _ p] y dom"], ["proof (chain)\npicking this:\n  \\<lbrakk>old.dominates g (defNode g p) y; y \\<in> set ns;\n   old.dominates g (defNode g q) y; y \\<in> set ms; p \\<noteq> q;\n   var g p = var g q; def_dominates g p q\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>old.dominates g (defNode g q) y; y \\<in> set ms;\n   old.dominates g (defNode g p) y; y \\<in> set ns; q \\<noteq> p;\n   var g q = var g p; def_dominates g q p\\<rbrakk>\n  \\<Longrightarrow> False\n  y \\<in> set ns \\<inter> set ms\n  old.dominates g (defNode g p) y\n  old.dominates g (defNode g q) y", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>old.dominates g (defNode g p) y; y \\<in> set ns;\n   old.dominates g (defNode g q) y; y \\<in> set ms; p \\<noteq> q;\n   var g p = var g q; def_dominates g p q\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>old.dominates g (defNode g q) y; y \\<in> set ms;\n   old.dominates g (defNode g p) y; y \\<in> set ns; q \\<noteq> p;\n   var g q = var g p; def_dominates g q p\\<rbrakk>\n  \\<Longrightarrow> False\n  y \\<in> set ns \\<inter> set ms\n  old.dominates g (defNode g p) y\n  old.dominates g (defNode g q) y\n\ngoal (1 subgoal):\n 1. False", "by - (rule old.dominates_antitrans[OF _ dom], auto)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oldDefsI: \"v \\<in> defs g n \\<Longrightarrow> var g v \\<in> oldDefs g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> defs g n \\<Longrightarrow> var g v \\<in> oldDefs g n", "by (simp add: oldDefs_def)"], ["", "lemma simpleDefs_phiDefs_var_disjoint:\n    assumes \"v \\<in> phiDefs g n\" \"n \\<in> set (\\<alpha>n g)\"\n    shows \"var g v \\<notin> oldDefs g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var g v \\<notin> oldDefs g n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. var g v \\<in> oldDefs g n \\<Longrightarrow> False", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> phiDefs g n\n  n \\<in> set (\\<alpha>n g)", "have[simp]: \"v \\<in> allVars g\""], ["proof (prove)\nusing this:\n  v \\<in> phiDefs g n\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. v \\<in> allVars g", "by auto"], ["proof (state)\nthis:\n  v \\<in> allVars g\n\ngoal (1 subgoal):\n 1. var g v \\<in> oldDefs g n \\<Longrightarrow> False", "assume \"var g v \\<in> oldDefs g n\""], ["proof (state)\nthis:\n  var g v \\<in> oldDefs g n\n\ngoal (1 subgoal):\n 1. var g v \\<in> oldDefs g n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  var g v \\<in> oldDefs g n", "obtain v'' where v'': \"v'' \\<in> defs g n\" \"var g v'' = var g v\""], ["proof (prove)\nusing this:\n  var g v \\<in> oldDefs g n\n\ngoal (1 subgoal):\n 1. (\\<And>v''.\n        \\<lbrakk>v'' \\<in> defs g n; var g v'' = var g v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: oldDefs_def)"], ["proof (state)\nthis:\n  v'' \\<in> defs g n\n  var g v'' = var g v\n\ngoal (1 subgoal):\n 1. var g v \\<in> oldDefs g n \\<Longrightarrow> False", "from this(1) assms"], ["proof (chain)\npicking this:\n  v'' \\<in> defs g n\n  v \\<in> phiDefs g n\n  n \\<in> set (\\<alpha>n g)", "have \"v'' \\<noteq> v\""], ["proof (prove)\nusing this:\n  v'' \\<in> defs g n\n  v \\<in> phiDefs g n\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. v'' \\<noteq> v", "using simpleDefs_phiDefs_disjoint[of n g]"], ["proof (prove)\nusing this:\n  v'' \\<in> defs g n\n  v \\<in> phiDefs g n\n  n \\<in> set (\\<alpha>n g)\n  n \\<in> set (\\<alpha>n g) \\<Longrightarrow>\n  defs g n \\<inter> phiDefs g n = {}\n\ngoal (1 subgoal):\n 1. v'' \\<noteq> v", "by (auto simp: phiArg_def)"], ["proof (state)\nthis:\n  v'' \\<noteq> v\n\ngoal (1 subgoal):\n 1. var g v \\<in> oldDefs g n \\<Longrightarrow> False", "with v'' assms"], ["proof (chain)\npicking this:\n  v'' \\<in> defs g n\n  var g v'' = var g v\n  v \\<in> phiDefs g n\n  n \\<in> set (\\<alpha>n g)\n  v'' \\<noteq> v", "show False"], ["proof (prove)\nusing this:\n  v'' \\<in> defs g n\n  var g v'' = var g v\n  v \\<in> phiDefs g n\n  n \\<in> set (\\<alpha>n g)\n  v'' \\<noteq> v\n\ngoal (1 subgoal):\n 1. False", "using allDefs_var_disjoint[of n g v'' v]"], ["proof (prove)\nusing this:\n  v'' \\<in> defs g n\n  var g v'' = var g v\n  v \\<in> phiDefs g n\n  n \\<in> set (\\<alpha>n g)\n  v'' \\<noteq> v\n  \\<lbrakk>n \\<in> set (\\<alpha>n g); v'' \\<in> allDefs g n;\n   v \\<in> allDefs g n; v'' \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> var g v \\<noteq> var g v''\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma liveVal_use_path: \n    assumes \"liveVal g v\"\n    obtains ns m where \"g \\<turnstile> defNode g v-ns\\<rightarrow>m\" \"var g v \\<in> oldUses g m\"\n      \"\\<And>x. x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns m.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n         var g v \\<in> oldUses g m;\n         \\<And>x.\n            x \\<in> set (tl ns) \\<Longrightarrow>\n            var g v \\<notin> oldDefs g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  liveVal g v\n\ngoal (1 subgoal):\n 1. (\\<And>ns m.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n         var g v \\<in> oldUses g m;\n         \\<And>x.\n            x \\<in> set (tl ns) \\<Longrightarrow>\n            var g v \\<notin> oldDefs g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n val.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g); val \\<in> uses g n;\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g val-ns\\<rightarrow>m;\n            var g val \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g val \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>v v'.\n       \\<lbrakk>liveVal g v;\n        (\\<And>ns m.\n            \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n             var g v \\<in> oldUses g m;\n             \\<And>x.\n                x \\<in> set (tl ns) \\<Longrightarrow>\n                var g v \\<notin> oldDefs g x\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        phiArg g v v';\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g v'-ns\\<rightarrow>m;\n            var g v' \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g v' \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (liveSimple m v)"], ["proof (state)\nthis:\n  m \\<in> set (\\<alpha>n g)\n  v \\<in> uses g m\n  \\<lbrakk>g \\<turnstile> defNode g v-?ns1\\<rightarrow>?m1;\n   var g v \\<in> oldUses g ?m1;\n   \\<And>x.\n      x \\<in> set (tl ?ns1) \\<Longrightarrow>\n      var g v \\<notin> oldDefs g x\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<And>n val.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g); val \\<in> uses g n;\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g val-ns\\<rightarrow>m;\n            var g val \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g val \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>v v'.\n       \\<lbrakk>liveVal g v;\n        (\\<And>ns m.\n            \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n             var g v \\<in> oldUses g m;\n             \\<And>x.\n                x \\<in> set (tl ns) \\<Longrightarrow>\n                var g v \\<notin> oldDefs g x\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        phiArg g v v';\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g v'-ns\\<rightarrow>m;\n            var g v' \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g v' \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from liveSimple.hyps"], ["proof (chain)\npicking this:\n  m \\<in> set (\\<alpha>n g)\n  v \\<in> uses g m", "have[simp]: \"v \\<in> allVars g\""], ["proof (prove)\nusing this:\n  m \\<in> set (\\<alpha>n g)\n  v \\<in> uses g m\n\ngoal (1 subgoal):\n 1. v \\<in> allVars g", "by - (rule allUses_in_allVars, auto)"], ["proof (state)\nthis:\n  v \\<in> allVars g\n\ngoal (2 subgoals):\n 1. \\<And>n val.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g); val \\<in> uses g n;\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g val-ns\\<rightarrow>m;\n            var g val \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g val \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>v v'.\n       \\<lbrakk>liveVal g v;\n        (\\<And>ns m.\n            \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n             var g v \\<in> oldUses g m;\n             \\<And>x.\n                x \\<in> set (tl ns) \\<Longrightarrow>\n                var g v \\<notin> oldDefs g x\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        phiArg g v v';\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g v'-ns\\<rightarrow>m;\n            var g v' \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g v' \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from liveSimple.hyps"], ["proof (chain)\npicking this:\n  m \\<in> set (\\<alpha>n g)\n  v \\<in> uses g m", "obtain ns where ns: \"g \\<turnstile> defNode g v-ns\\<rightarrow>m\" \"defNode g v \\<notin> set (tl ns)\""], ["proof (prove)\nusing this:\n  m \\<in> set (\\<alpha>n g)\n  v \\<in> uses g m\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n         defNode g v \\<notin> set (tl ns)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule defUse_path_ex, auto intro!: uses_in_allUses elim: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g v-ns\\<rightarrow>m\n  defNode g v \\<notin> set (tl ns)\n\ngoal (2 subgoals):\n 1. \\<And>n val.\n       \\<lbrakk>n \\<in> set (\\<alpha>n g); val \\<in> uses g n;\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g val-ns\\<rightarrow>m;\n            var g val \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g val \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>v v'.\n       \\<lbrakk>liveVal g v;\n        (\\<And>ns m.\n            \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n             var g v \\<in> oldUses g m;\n             \\<And>x.\n                x \\<in> set (tl ns) \\<Longrightarrow>\n                var g v \\<notin> oldDefs g x\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        phiArg g v v';\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g v'-ns\\<rightarrow>m;\n            var g v' \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g v' \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from this(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g v-ns\\<rightarrow>m", "show thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g v-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. thesis", "proof (rule liveSimple.prems)"], ["proof (state)\ngoal (2 subgoals):\n 1. var g v \\<in> oldUses g m\n 2. \\<And>x.\n       x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x", "show \"var g v \\<in> oldUses g m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var g v \\<in> oldUses g m", "using liveSimple.hyps"], ["proof (prove)\nusing this:\n  m \\<in> set (\\<alpha>n g)\n  v \\<in> uses g m\n\ngoal (1 subgoal):\n 1. var g v \\<in> oldUses g m", "by (auto simp: oldUses_def)"], ["proof (state)\nthis:\n  var g v \\<in> oldUses g m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x", "{"], ["proof (state)\nthis:\n  var g v \\<in> oldUses g m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x", "assume asm: \"x \\<in> set (tl ns)\" \"var g v \\<in> oldDefs g x\""], ["proof (state)\nthis:\n  x \\<in> set (tl ns)\n  var g v \\<in> oldDefs g x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (tl ns)\n  var g v \\<in> oldDefs g x", "obtain v' where \"v' \\<in> defs g x\" \"var g v' = var g v\""], ["proof (prove)\nusing this:\n  x \\<in> set (tl ns)\n  var g v \\<in> oldDefs g x\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> defs g x; var g v' = var g v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: oldDefs_def)"], ["proof (state)\nthis:\n  v' \\<in> defs g x\n  var g v' = var g v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x", "with asm liveSimple.hyps"], ["proof (chain)\npicking this:\n  x \\<in> set (tl ns)\n  var g v \\<in> oldDefs g x\n  m \\<in> set (\\<alpha>n g)\n  v \\<in> uses g m\n  v' \\<in> defs g x\n  var g v' = var g v", "have False"], ["proof (prove)\nusing this:\n  x \\<in> set (tl ns)\n  var g v \\<in> oldDefs g x\n  m \\<in> set (\\<alpha>n g)\n  v \\<in> uses g m\n  v' \\<in> defs g x\n  var g v' = var g v\n\ngoal (1 subgoal):\n 1. False", "by - (rule conventional[OF ns, of v x v', THEN notE], auto)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x3 \\<in> set (tl ns); var g v \\<in> oldDefs g ?x3\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x", "thus \"\\<And>x. x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x3 \\<in> set (tl ns); var g v \\<in> oldDefs g ?x3\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x", "by auto"], ["proof (state)\nthis:\n  ?x1 \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g ?x1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>v v'.\n       \\<lbrakk>liveVal g v;\n        (\\<And>ns m.\n            \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n             var g v \\<in> oldUses g m;\n             \\<And>x.\n                x \\<in> set (tl ns) \\<Longrightarrow>\n                var g v \\<notin> oldDefs g x\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        phiArg g v v';\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g v'-ns\\<rightarrow>m;\n            var g v' \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g v' \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v v'.\n       \\<lbrakk>liveVal g v;\n        (\\<And>ns m.\n            \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n             var g v \\<in> oldUses g m;\n             \\<And>x.\n                x \\<in> set (tl ns) \\<Longrightarrow>\n                var g v \\<notin> oldDefs g x\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        phiArg g v v';\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g v'-ns\\<rightarrow>m;\n            var g v' \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g v' \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (livePhi v v')"], ["proof (state)\nthis:\n  liveVal g v\n  phiArg g v v'\n  (\\<And>ns m.\n      \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n       var g v \\<in> oldUses g m;\n       \\<And>x.\n          x \\<in> set (tl ns) \\<Longrightarrow>\n          var g v \\<notin> oldDefs g x\\<rbrakk>\n      \\<Longrightarrow> thesis) \\<Longrightarrow>\n  thesis\n  \\<lbrakk>g \\<turnstile> defNode g v'-?ns1\\<rightarrow>?m1;\n   var g v' \\<in> oldUses g ?m1;\n   \\<And>x.\n      x \\<in> set (tl ?ns1) \\<Longrightarrow>\n      var g v' \\<notin> oldDefs g x\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>v v'.\n       \\<lbrakk>liveVal g v;\n        (\\<And>ns m.\n            \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n             var g v \\<in> oldUses g m;\n             \\<And>x.\n                x \\<in> set (tl ns) \\<Longrightarrow>\n                var g v \\<notin> oldDefs g x\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        phiArg g v v';\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g v'-ns\\<rightarrow>m;\n            var g v' \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g v' \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from livePhi.hyps"], ["proof (chain)\npicking this:\n  liveVal g v\n  phiArg g v v'", "have[simp]: \"v \\<in> allVars g\" \"v' \\<in> allVars g\" \"var g v' = var g v\""], ["proof (prove)\nusing this:\n  liveVal g v\n  phiArg g v v'\n\ngoal (1 subgoal):\n 1. v \\<in> allVars g &&& v' \\<in> allVars g &&& var g v' = var g v", "by (auto intro: phiArg_same_var)"], ["proof (state)\nthis:\n  v \\<in> allVars g\n  v' \\<in> allVars g\n  var g v' = var g v\n\ngoal (1 subgoal):\n 1. \\<And>v v'.\n       \\<lbrakk>liveVal g v;\n        (\\<And>ns m.\n            \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n             var g v \\<in> oldUses g m;\n             \\<And>x.\n                x \\<in> set (tl ns) \\<Longrightarrow>\n                var g v \\<notin> oldDefs g x\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        phiArg g v v';\n        \\<And>ns m.\n           \\<lbrakk>g \\<turnstile> defNode g v'-ns\\<rightarrow>m;\n            var g v' \\<in> oldUses g m;\n            \\<And>x.\n               x \\<in> set (tl ns) \\<Longrightarrow>\n               var g v' \\<notin> oldDefs g x\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule livePhi.IH)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns m.\n       \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n        var g v \\<in> oldUses g m;\n        \\<And>x.\n           x \\<in> set (tl ns) \\<Longrightarrow>\n           var g v \\<notin> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis", "fix ns m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns m.\n       \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n        var g v \\<in> oldUses g m;\n        \\<And>x.\n           x \\<in> set (tl ns) \\<Longrightarrow>\n           var g v \\<notin> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume asm: \"g \\<turnstile> defNode g v-ns\\<rightarrow>m\" \"var g v \\<in> oldUses g m\"\n        \"\\<And>x. x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x\""], ["proof (state)\nthis:\n  g \\<turnstile> defNode g v-ns\\<rightarrow>m\n  var g v \\<in> oldUses g m\n  ?x1 \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g ?x1\n\ngoal (1 subgoal):\n 1. \\<And>ns m.\n       \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n        var g v \\<in> oldUses g m;\n        \\<And>x.\n           x \\<in> set (tl ns) \\<Longrightarrow>\n           var g v \\<notin> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis", "from livePhi.hyps(2)"], ["proof (chain)\npicking this:\n  phiArg g v v'", "obtain ns' m' where ns': \"g \\<turnstile> defNode g v'-ns'\\<rightarrow>m'\" \"v' \\<in> phiUses g m'\"\n        \"m' \\<in> set (old.predecessors g (defNode g v))\" \"defNode g v' \\<notin> set (tl ns')\""], ["proof (prove)\nusing this:\n  phiArg g v v'\n\ngoal (1 subgoal):\n 1. (\\<And>ns' m'.\n        \\<lbrakk>g \\<turnstile> defNode g v'-ns'\\<rightarrow>m';\n         v' \\<in> phiUses g m';\n         m' \\<in> set (old.predecessors g (defNode g v));\n         defNode g v' \\<notin> set (tl ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule phiArg_path_ex', auto elim: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g v'-ns'\\<rightarrow>m'\n  v' \\<in> phiUses g m'\n  m' \\<in> set (old.predecessors g (defNode g v))\n  defNode g v' \\<notin> set (tl ns')\n\ngoal (1 subgoal):\n 1. \\<And>ns m.\n       \\<lbrakk>g \\<turnstile> defNode g v-ns\\<rightarrow>m;\n        var g v \\<in> oldUses g m;\n        \\<And>x.\n           x \\<in> set (tl ns) \\<Longrightarrow>\n           var g v \\<notin> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule livePhi.prems)"], ["proof (state)\ngoal (3 subgoals):\n 1. g \\<turnstile> defNode g v'-?ns1\\<rightarrow>?m1\n 2. var g v' \\<in> oldUses g ?m1\n 3. \\<And>x.\n       x \\<in> set (tl ?ns1) \\<Longrightarrow> var g v' \\<notin> oldDefs g x", "show \"g \\<turnstile> defNode g v'-(ns'@[defNode g v])@tl ns\\<rightarrow>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g v'-(ns' @ [defNode g v]) @ tl ns\\<rightarrow>m", "apply (rule old.path2_app)"], ["proof (prove)\ngoal (2 subgoals):\n 1. g \\<turnstile> defNode g v'-ns' @ [defNode g v]\\<rightarrow>?m\n 2. g \\<turnstile> ?m-ns\\<rightarrow>m", "apply (rule old.path2_snoc[OF ns'(1,3)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g v-ns\\<rightarrow>m", "by (rule asm(1))"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g v'-(ns' @ [defNode g v]) @ tl ns\\<rightarrow>m\n\ngoal (2 subgoals):\n 1. var g v' \\<in> oldUses g m\n 2. \\<And>x.\n       x \\<in> set (tl ((ns' @ [defNode g v]) @ tl ns)) \\<Longrightarrow>\n       var g v' \\<notin> oldDefs g x", "show \"var g v' \\<in> oldUses g m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var g v' \\<in> oldUses g m", "using asm(2)"], ["proof (prove)\nusing this:\n  var g v \\<in> oldUses g m\n\ngoal (1 subgoal):\n 1. var g v' \\<in> oldUses g m", "by simp"], ["proof (state)\nthis:\n  var g v' \\<in> oldUses g m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ((ns' @ [defNode g v]) @ tl ns)) \\<Longrightarrow>\n       var g v' \\<notin> oldDefs g x", "{"], ["proof (state)\nthis:\n  var g v' \\<in> oldUses g m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ((ns' @ [defNode g v]) @ tl ns)) \\<Longrightarrow>\n       var g v' \\<notin> oldDefs g x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ((ns' @ [defNode g v]) @ tl ns)) \\<Longrightarrow>\n       var g v' \\<notin> oldDefs g x", "assume asm: \"x \\<in> set (tl ns')\" \"var g v \\<in> oldDefs g x\""], ["proof (state)\nthis:\n  x \\<in> set (tl ns')\n  var g v \\<in> oldDefs g x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ((ns' @ [defNode g v]) @ tl ns)) \\<Longrightarrow>\n       var g v' \\<notin> oldDefs g x", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (tl ns')\n  var g v \\<in> oldDefs g x", "obtain v'' where \"v'' \\<in> defs g x\" \"var g v'' = var g v\""], ["proof (prove)\nusing this:\n  x \\<in> set (tl ns')\n  var g v \\<in> oldDefs g x\n\ngoal (1 subgoal):\n 1. (\\<And>v''.\n        \\<lbrakk>v'' \\<in> defs g x; var g v'' = var g v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: oldDefs_def)"], ["proof (state)\nthis:\n  v'' \\<in> defs g x\n  var g v'' = var g v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ((ns' @ [defNode g v]) @ tl ns)) \\<Longrightarrow>\n       var g v' \\<notin> oldDefs g x", "with asm ns'(2)"], ["proof (chain)\npicking this:\n  x \\<in> set (tl ns')\n  var g v \\<in> oldDefs g x\n  v' \\<in> phiUses g m'\n  v'' \\<in> defs g x\n  var g v'' = var g v", "have False"], ["proof (prove)\nusing this:\n  x \\<in> set (tl ns')\n  var g v \\<in> oldDefs g x\n  v' \\<in> phiUses g m'\n  v'' \\<in> defs g x\n  var g v'' = var g v\n\ngoal (1 subgoal):\n 1. False", "by - (rule conventional[OF ns'(1,4), of v' x v'', THEN notE], auto)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ((ns' @ [defNode g v]) @ tl ns)) \\<Longrightarrow>\n       var g v' \\<notin> oldDefs g x", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x3 \\<in> set (tl ns'); var g v \\<in> oldDefs g ?x3\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ((ns' @ [defNode g v]) @ tl ns)) \\<Longrightarrow>\n       var g v' \\<notin> oldDefs g x", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x3 \\<in> set (tl ns'); var g v \\<in> oldDefs g ?x3\\<rbrakk>\n  \\<Longrightarrow> False", "show \"\\<And>x. x \\<in> set (tl ((ns'@[defNode g v])@tl ns)) \\<Longrightarrow> var g v' \\<notin> oldDefs g x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x3 \\<in> set (tl ns'); var g v \\<in> oldDefs g ?x3\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ((ns' @ [defNode g v]) @ tl ns)) \\<Longrightarrow>\n       var g v' \\<notin> oldDefs g x", "using simpleDefs_phiDefs_var_disjoint[of v g \"defNode g v\"] livePhi.hyps(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x3 \\<in> set (tl ns'); var g v \\<in> oldDefs g ?x3\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>v \\<in> phiDefs g (defNode g v);\n   defNode g v \\<in> set (\\<alpha>n g)\\<rbrakk>\n  \\<Longrightarrow> var g v \\<notin> oldDefs g (defNode g v)\n  phiArg g v v'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (tl ((ns' @ [defNode g v]) @ tl ns)) \\<Longrightarrow>\n       var g v' \\<notin> oldDefs g x", "by (auto dest!: set_tl_append'[THEN subsetD] asm(3) simp: phiArg_def)"], ["proof (state)\nthis:\n  ?x1 \\<in> set (tl ((ns' @ [defNode g v]) @ tl ns)) \\<Longrightarrow>\n  var g v' \\<notin> oldDefs g ?x1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}