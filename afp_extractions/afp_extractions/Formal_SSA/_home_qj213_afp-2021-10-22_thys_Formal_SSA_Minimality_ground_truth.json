{"file_name": "/home/qj213/afp-2021-10-22/thys/Formal_SSA/Minimality.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Formal_SSA", "problem_names": ["lemma pathsConverge'[simp]: \"pathsConverge g x xs y ys z \\<longleftrightarrow> pathsConverge' g x xs y ys z\"", "lemma pathsConvergeI:\n    assumes \"g \\<turnstile> x-xs\\<rightarrow>z\" \"g \\<turnstile> y-ys\\<rightarrow>z\" \"length xs > 1\" \"length ys > 1\" \"set (butlast xs) \\<inter> set (butlast ys) = {}\"\n    shows \"pathsConverge g x xs y ys z\"", "lemma necessaryPhiI: \"old.pathsConverge g n ns m ms z \\<Longrightarrow> v \\<in> oldDefs g n \\<Longrightarrow> v \\<in> oldDefs g m \\<Longrightarrow> necessaryPhi g v z\"", "lemma 2:\n    assumes \"phiArg g p q\" \"phiArg g p r\" \"distinct [p, q, r]\" and[simp]: \"p \\<in> allVars g\"\n    shows \"\\<not>(def_dominates g q p \\<and> def_dominates g r p)\"", "lemma convergence_prop:\n    assumes \"necessaryPhi g (var g v) n\" \"g \\<turnstile> n-ns\\<rightarrow>m\" \"v \\<in> allUses g m\" \"\\<And>x. x \\<in> set (tl ns) \\<Longrightarrow> v \\<notin> allDefs g x\" \"v \\<notin> defs g n\"\n    shows \"phis g (n,v) \\<noteq> None\"", "lemma convergence_prop':\n    assumes \"necessaryPhi g v n\" \"g \\<turnstile> n-ns\\<rightarrow>m\" \"v \\<in> var g ` allUses g m\" \"\\<And>x. x \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g x\"\n    obtains val where \"var g val = v\" \"phis g (n,val) \\<noteq> None\"", "lemma nontrivialE:\n    assumes \"\\<not>trivial g p\" \"phi g p \\<noteq> None\" and[simp]: \"p \\<in> allVars g\"\n    obtains r s where \"phiArg g p r\" \"phiArg g p s\" \"distinct [p, r, s]\"", "lemma paths_converge_prefix:\n    assumes \"g \\<turnstile> x-xs\\<rightarrow>z\" \"g \\<turnstile> y-ys\\<rightarrow>z\" \"x \\<noteq> y\" \"length xs > 1\" \"length ys > 1\" \"x \\<notin> set (butlast ys)\" \"y \\<notin> set (butlast xs)\"\n    obtains xs' ys' z' where \"old.pathsConverge g x xs' y ys' z'\" \"prefix xs' xs\" \"prefix ys' ys\"", "lemma ununnecessaryPhis_disjoint_paths_aux:\n    assumes \"\\<not>unnecessaryPhi g r\" and[simp]: \"r \\<in> allVars g\"\n    obtains n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2 where\n      \"var g r \\<in> oldDefs g n\\<^sub>1\" \"g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\" and\n      \"var g r \\<in> oldDefs g n\\<^sub>2\" \"g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\" and\n      \"set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\"", "lemma ununnecessaryPhis_disjoint_paths:\n    assumes \"\\<not>unnecessaryPhi g r\" \"\\<not>unnecessaryPhi g s\"\n      (* and rs: \"phiArg p r\" \"phiArg p s\" \"distinct [p, r, s]\" *)\n      and rs: \"defNode g r \\<noteq> defNode g s\"\n      and[simp]: \"r \\<in> allVars g\" \"s \\<in> allVars g\" \"var g r = V\" \"var g s = V\"\n    obtains n ns m ms where \"V \\<in> oldDefs g n\" \"g \\<turnstile> n-ns\\<rightarrow>defNode g r\" and \"V \\<in> oldDefs g m\" \"g \\<turnstile> m-ms\\<rightarrow>defNode g s\"\n        and \"set ns \\<inter> set ms = {}\"", "lemma 3:\n    assumes \"unnecessaryPhi g p\" \"\\<not>trivial g p\" and[simp]: \"p \\<in> allVars g\"\n    obtains q where \"phiArg g p q\" \"unnecessaryPhi g q\" \"\\<not>def_dominates g q p\"", "theorem reducible_nonredundant_imp_minimal:\n    assumes \"old.reducible g\" \"\\<not>redundant g\"\n    shows \"cytronMinimal g\"", "lemma phiCount: \"phiCount g = card (dom (phis g))\"", "theorem phi_count_minimal:\n    assumes \"cytronMinimal g\" \"pruned g\"\n    assumes \"CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges' Entry oldDefs oldUses defs' uses' phis' var'\"\n    shows \"card (dom (phis g)) \\<le> card (dom (phis' g))\""], "translations": [["", "lemma pathsConverge'[simp]: \"pathsConverge g x xs y ys z \\<longleftrightarrow> pathsConverge' g x xs y ys z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pathsConverge g x xs y ys z = pathsConverge' g x xs y ys z", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. pathsConverge g x xs y ys z = pathsConverge' g x xs y ys z", "have \"(\\<forall>j \\<in> {0..< length xs}. \\<forall>k \\<in> {0..<length ys}. xs ! j = ys ! k \\<longrightarrow> j = length xs - 1 \\<or> k = length ys - 1)\n          \\<longleftrightarrow> (\\<forall>x' \\<in> set (butlast xs). \\<forall>y' \\<in> set (butlast ys). x' \\<noteq> y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>j\\<in>{0..<length xs}.\n        \\<forall>k\\<in>{0..<length ys}.\n           xs ! j = ys ! k \\<longrightarrow>\n           j = length xs - 1 \\<or> k = length ys - 1) =\n    (\\<forall>x'\\<in>set (butlast xs).\n        \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>j\\<in>{0..<length xs}.\n       \\<forall>k\\<in>{0..<length ys}.\n          xs ! j = ys ! k \\<longrightarrow>\n          j = length xs - 1 \\<or> k = length ys - 1 \\<Longrightarrow>\n    \\<forall>x'\\<in>set (butlast xs).\n       \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y'\n 2. \\<forall>x'\\<in>set (butlast xs).\n       \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y' \\<Longrightarrow>\n    \\<forall>j\\<in>{0..<length xs}.\n       \\<forall>k\\<in>{0..<length ys}.\n          xs ! j = ys ! k \\<longrightarrow>\n          j = length xs - 1 \\<or> k = length ys - 1", "assume 1: \"\\<forall>j\\<in>{0..<length xs}. \\<forall>k\\<in>{0..<length ys}. xs ! j = ys ! k \\<longrightarrow> j = length xs - 1 \\<or> k = length ys - 1\""], ["proof (state)\nthis:\n  \\<forall>j\\<in>{0..<length xs}.\n     \\<forall>k\\<in>{0..<length ys}.\n        xs ! j = ys ! k \\<longrightarrow>\n        j = length xs - 1 \\<or> k = length ys - 1\n\ngoal (2 subgoals):\n 1. \\<forall>j\\<in>{0..<length xs}.\n       \\<forall>k\\<in>{0..<length ys}.\n          xs ! j = ys ! k \\<longrightarrow>\n          j = length xs - 1 \\<or> k = length ys - 1 \\<Longrightarrow>\n    \\<forall>x'\\<in>set (butlast xs).\n       \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y'\n 2. \\<forall>x'\\<in>set (butlast xs).\n       \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y' \\<Longrightarrow>\n    \\<forall>j\\<in>{0..<length xs}.\n       \\<forall>k\\<in>{0..<length ys}.\n          xs ! j = ys ! k \\<longrightarrow>\n          j = length xs - 1 \\<or> k = length ys - 1", "show \"\\<forall>x'\\<in>set (butlast xs). \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x'\\<in>set (butlast xs).\n       \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y'", "proof (rule, rule, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<in> set (butlast xs); y' \\<in> set (butlast ys);\n        x' = y'\\<rbrakk>\n       \\<Longrightarrow> False", "fix x' y'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<in> set (butlast xs); y' \\<in> set (butlast ys);\n        x' = y'\\<rbrakk>\n       \\<Longrightarrow> False", "assume 2: \"x' \\<in> set (butlast xs)\" \"y' \\<in> set (butlast ys)\" and[simp]: \"x' = y'\""], ["proof (state)\nthis:\n  x' \\<in> set (butlast xs)\n  y' \\<in> set (butlast ys)\n  x' = y'\n\ngoal (1 subgoal):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<in> set (butlast xs); y' \\<in> set (butlast ys);\n        x' = y'\\<rbrakk>\n       \\<Longrightarrow> False", "from 2(1)"], ["proof (chain)\npicking this:\n  x' \\<in> set (butlast xs)", "obtain j where j: \"xs ! j = x'\" \"j < length xs - 1\""], ["proof (prove)\nusing this:\n  x' \\<in> set (butlast xs)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>xs ! j = x'; j < length xs - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule butlast_idx)"], ["proof (state)\nthis:\n  xs ! j = x'\n  j < length xs - 1\n\ngoal (1 subgoal):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<in> set (butlast xs); y' \\<in> set (butlast ys);\n        x' = y'\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  xs ! j = x'\n  j < length xs - 1\n\ngoal (1 subgoal):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<in> set (butlast xs); y' \\<in> set (butlast ys);\n        x' = y'\\<rbrakk>\n       \\<Longrightarrow> False", "from j"], ["proof (chain)\npicking this:\n  xs ! j = x'\n  j < length xs - 1", "have \"j < length xs\""], ["proof (prove)\nusing this:\n  xs ! j = x'\n  j < length xs - 1\n\ngoal (1 subgoal):\n 1. j < length xs", "by simp"], ["proof (state)\nthis:\n  j < length xs\n\ngoal (1 subgoal):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<in> set (butlast xs); y' \\<in> set (butlast ys);\n        x' = y'\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  j < length xs\n\ngoal (1 subgoal):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<in> set (butlast xs); y' \\<in> set (butlast ys);\n        x' = y'\\<rbrakk>\n       \\<Longrightarrow> False", "from 2(2)"], ["proof (chain)\npicking this:\n  y' \\<in> set (butlast ys)", "obtain k where k: \"ys ! k = y'\" \"k < length ys - 1\""], ["proof (prove)\nusing this:\n  y' \\<in> set (butlast ys)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>ys ! k = y'; k < length ys - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule butlast_idx)"], ["proof (state)\nthis:\n  ys ! k = y'\n  k < length ys - 1\n\ngoal (1 subgoal):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<in> set (butlast xs); y' \\<in> set (butlast ys);\n        x' = y'\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  ys ! k = y'\n  k < length ys - 1\n\ngoal (1 subgoal):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<in> set (butlast xs); y' \\<in> set (butlast ys);\n        x' = y'\\<rbrakk>\n       \\<Longrightarrow> False", "from k"], ["proof (chain)\npicking this:\n  ys ! k = y'\n  k < length ys - 1", "have \"k < length ys\""], ["proof (prove)\nusing this:\n  ys ! k = y'\n  k < length ys - 1\n\ngoal (1 subgoal):\n 1. k < length ys", "by simp"], ["proof (state)\nthis:\n  k < length ys\n\ngoal (1 subgoal):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<in> set (butlast xs); y' \\<in> set (butlast ys);\n        x' = y'\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  xs ! j = x'\n  j < length xs - 1\n  j < length xs\n  ys ! k = y'\n  k < length ys - 1\n  k < length ys", "show False"], ["proof (prove)\nusing this:\n  xs ! j = x'\n  j < length xs - 1\n  j < length xs\n  ys ! k = y'\n  k < length ys - 1\n  k < length ys\n\ngoal (1 subgoal):\n 1. False", "using 1[THEN bspec[where x=j], THEN bspec[where x=k]]"], ["proof (prove)\nusing this:\n  xs ! j = x'\n  j < length xs - 1\n  j < length xs\n  ys ! k = y'\n  k < length ys - 1\n  k < length ys\n  \\<lbrakk>j \\<in> {0..<length xs}; k \\<in> {0..<length ys}\\<rbrakk>\n  \\<Longrightarrow> xs ! j = ys ! k \\<longrightarrow>\n                    j = length xs - 1 \\<or> k = length ys - 1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x'\\<in>set (butlast xs).\n     \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y'\n\ngoal (1 subgoal):\n 1. \\<forall>x'\\<in>set (butlast xs).\n       \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y' \\<Longrightarrow>\n    \\<forall>j\\<in>{0..<length xs}.\n       \\<forall>k\\<in>{0..<length ys}.\n          xs ! j = ys ! k \\<longrightarrow>\n          j = length xs - 1 \\<or> k = length ys - 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x'\\<in>set (butlast xs).\n       \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y' \\<Longrightarrow>\n    \\<forall>j\\<in>{0..<length xs}.\n       \\<forall>k\\<in>{0..<length ys}.\n          xs ! j = ys ! k \\<longrightarrow>\n          j = length xs - 1 \\<or> k = length ys - 1", "assume 1: \"\\<forall>x'\\<in>set (butlast xs). \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y'\""], ["proof (state)\nthis:\n  \\<forall>x'\\<in>set (butlast xs).\n     \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y'\n\ngoal (1 subgoal):\n 1. \\<forall>x'\\<in>set (butlast xs).\n       \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y' \\<Longrightarrow>\n    \\<forall>j\\<in>{0..<length xs}.\n       \\<forall>k\\<in>{0..<length ys}.\n          xs ! j = ys ! k \\<longrightarrow>\n          j = length xs - 1 \\<or> k = length ys - 1", "show \"\\<forall>j\\<in>{0..<length xs}. \\<forall>k\\<in>{0..<length ys}. xs ! j = ys ! k \\<longrightarrow> j = length xs - 1 \\<or> k = length ys - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{0..<length xs}.\n       \\<forall>k\\<in>{0..<length ys}.\n          xs ! j = ys ! k \\<longrightarrow>\n          j = length xs - 1 \\<or> k = length ys - 1", "proof (rule, rule, rule, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j k.\n       \\<lbrakk>j < length xs; k < length ys; xs ! j = ys ! k\\<rbrakk>\n       \\<Longrightarrow> j = length xs - Suc 0 \\<or> k = length ys - Suc 0", "fix j k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j k.\n       \\<lbrakk>j < length xs; k < length ys; xs ! j = ys ! k\\<rbrakk>\n       \\<Longrightarrow> j = length xs - Suc 0 \\<or> k = length ys - Suc 0", "assume 2: \"j < length xs\" \"k < length ys\" \"xs ! j = ys ! k\""], ["proof (state)\nthis:\n  j < length xs\n  k < length ys\n  xs ! j = ys ! k\n\ngoal (1 subgoal):\n 1. \\<And>j k.\n       \\<lbrakk>j < length xs; k < length ys; xs ! j = ys ! k\\<rbrakk>\n       \\<Longrightarrow> j = length xs - Suc 0 \\<or> k = length ys - Suc 0", "show \"j = length xs - Suc 0 \\<or> k = length ys - Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j = length xs - Suc 0 \\<or> k = length ys - Suc 0", "proof (rule ccontr, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> length xs - Suc 0 \\<and>\n    k \\<noteq> length ys - Suc 0 \\<Longrightarrow>\n    False", "assume 3: \"j \\<noteq> length xs - Suc 0 \\<and> k \\<noteq> length ys - Suc 0\""], ["proof (state)\nthis:\n  j \\<noteq> length xs - Suc 0 \\<and> k \\<noteq> length ys - Suc 0\n\ngoal (1 subgoal):\n 1. j \\<noteq> length xs - Suc 0 \\<and>\n    k \\<noteq> length ys - Suc 0 \\<Longrightarrow>\n    False", "let ?x' = \"xs ! j\""], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> length xs - Suc 0 \\<and>\n    k \\<noteq> length ys - Suc 0 \\<Longrightarrow>\n    False", "let ?y' = \"ys ! k\""], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> length xs - Suc 0 \\<and>\n    k \\<noteq> length ys - Suc 0 \\<Longrightarrow>\n    False", "from 2(1) 3"], ["proof (chain)\npicking this:\n  j < length xs\n  j \\<noteq> length xs - Suc 0 \\<and> k \\<noteq> length ys - Suc 0", "have \"?x' \\<in> set (butlast xs)\""], ["proof (prove)\nusing this:\n  j < length xs\n  j \\<noteq> length xs - Suc 0 \\<and> k \\<noteq> length ys - Suc 0\n\ngoal (1 subgoal):\n 1. xs ! j \\<in> set (butlast xs)", "by - (rule butlast_idx', auto)"], ["proof (state)\nthis:\n  xs ! j \\<in> set (butlast xs)\n\ngoal (1 subgoal):\n 1. j \\<noteq> length xs - Suc 0 \\<and>\n    k \\<noteq> length ys - Suc 0 \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  xs ! j \\<in> set (butlast xs)\n\ngoal (1 subgoal):\n 1. j \\<noteq> length xs - Suc 0 \\<and>\n    k \\<noteq> length ys - Suc 0 \\<Longrightarrow>\n    False", "from 2(2) 3"], ["proof (chain)\npicking this:\n  k < length ys\n  j \\<noteq> length xs - Suc 0 \\<and> k \\<noteq> length ys - Suc 0", "have \"?y' \\<in> set (butlast ys)\""], ["proof (prove)\nusing this:\n  k < length ys\n  j \\<noteq> length xs - Suc 0 \\<and> k \\<noteq> length ys - Suc 0\n\ngoal (1 subgoal):\n 1. ys ! k \\<in> set (butlast ys)", "by - (rule butlast_idx', auto)"], ["proof (state)\nthis:\n  ys ! k \\<in> set (butlast ys)\n\ngoal (1 subgoal):\n 1. j \\<noteq> length xs - Suc 0 \\<and>\n    k \\<noteq> length ys - Suc 0 \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  xs ! j \\<in> set (butlast xs)\n  ys ! k \\<in> set (butlast ys)", "have \"?x' \\<noteq> ?y'\""], ["proof (prove)\nusing this:\n  xs ! j \\<in> set (butlast xs)\n  ys ! k \\<in> set (butlast ys)\n\ngoal (1 subgoal):\n 1. xs ! j \\<noteq> ys ! k", "using 1"], ["proof (prove)\nusing this:\n  xs ! j \\<in> set (butlast xs)\n  ys ! k \\<in> set (butlast ys)\n  \\<forall>x'\\<in>set (butlast xs).\n     \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y'\n\ngoal (1 subgoal):\n 1. xs ! j \\<noteq> ys ! k", "by simp"], ["proof (state)\nthis:\n  xs ! j \\<noteq> ys ! k\n\ngoal (1 subgoal):\n 1. j \\<noteq> length xs - Suc 0 \\<and>\n    k \\<noteq> length ys - Suc 0 \\<Longrightarrow>\n    False", "with 2(3)"], ["proof (chain)\npicking this:\n  xs ! j = ys ! k\n  xs ! j \\<noteq> ys ! k", "show False"], ["proof (prove)\nusing this:\n  xs ! j = ys ! k\n  xs ! j \\<noteq> ys ! k\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  j = length xs - Suc 0 \\<or> k = length ys - Suc 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j\\<in>{0..<length xs}.\n     \\<forall>k\\<in>{0..<length ys}.\n        xs ! j = ys ! k \\<longrightarrow>\n        j = length xs - 1 \\<or> k = length ys - 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>j\\<in>{0..<length xs}.\n      \\<forall>k\\<in>{0..<length ys}.\n         xs ! j = ys ! k \\<longrightarrow>\n         j = length xs - 1 \\<or> k = length ys - 1) =\n  (\\<forall>x'\\<in>set (butlast xs).\n      \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y')\n\ngoal (1 subgoal):\n 1. pathsConverge g x xs y ys z = pathsConverge' g x xs y ys z", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<forall>j\\<in>{0..<length xs}.\n      \\<forall>k\\<in>{0..<length ys}.\n         xs ! j = ys ! k \\<longrightarrow>\n         j = length xs - 1 \\<or> k = length ys - 1) =\n  (\\<forall>x'\\<in>set (butlast xs).\n      \\<forall>y'\\<in>set (butlast ys). x' \\<noteq> y')\n\ngoal (1 subgoal):\n 1. pathsConverge g x xs y ys z = pathsConverge' g x xs y ys z", "by (auto simp:pathsConverge_def pathsConverge'_def)"], ["proof (state)\nthis:\n  pathsConverge g x xs y ys z = pathsConverge' g x xs y ys z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pathsConvergeI:\n    assumes \"g \\<turnstile> x-xs\\<rightarrow>z\" \"g \\<turnstile> y-ys\\<rightarrow>z\" \"length xs > 1\" \"length ys > 1\" \"set (butlast xs) \\<inter> set (butlast ys) = {}\"\n    shows \"pathsConverge g x xs y ys z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pathsConverge g x xs y ys z", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. pathsConverge g x xs y ys z", "from assms"], ["proof (chain)\npicking this:\n  g \\<turnstile> x-xs\\<rightarrow>z\n  g \\<turnstile> y-ys\\<rightarrow>z\n  1 < length xs\n  1 < length ys\n  set (butlast xs) \\<inter> set (butlast ys) = {}", "have \"x \\<noteq> y\""], ["proof (prove)\nusing this:\n  g \\<turnstile> x-xs\\<rightarrow>z\n  g \\<turnstile> y-ys\\<rightarrow>z\n  1 < length xs\n  1 < length ys\n  set (butlast xs) \\<inter> set (butlast ys) = {}\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "by (metis append_is_Nil_conv disjoint_iff_not_equal length_butlast list.collapse list.distinct(1) nth_Cons_0 nth_butlast nth_mem path2_def split_list zero_less_diff)"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. pathsConverge g x xs y ys z", "with assms"], ["proof (chain)\npicking this:\n  g \\<turnstile> x-xs\\<rightarrow>z\n  g \\<turnstile> y-ys\\<rightarrow>z\n  1 < length xs\n  1 < length ys\n  set (butlast xs) \\<inter> set (butlast ys) = {}\n  x \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> x-xs\\<rightarrow>z\n  g \\<turnstile> y-ys\\<rightarrow>z\n  1 < length xs\n  1 < length ys\n  set (butlast xs) \\<inter> set (butlast ys) = {}\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. pathsConverge g x xs y ys z", "by (simp add:pathsConverge'_def)"], ["proof (state)\nthis:\n  pathsConverge g x xs y ys z\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>A (control) flow graph G is reducible iff for each cycle C of G there is a node of C that dominates all other nodes in C.\\<close>"], ["", "definition (in graph_Entry) \"reducible g \\<equiv> \\<forall>n ns. g \\<turnstile> n-ns\\<rightarrow>n \\<longrightarrow> (\\<exists>m \\<in> set ns. \\<forall>n \\<in> set ns. dominates g m n)\""], ["", "context CFG_SSA_Transformed\nbegin"], ["", "text \\<open>A $\\phi$ function for variable v is necessary in block Z iff two non-null paths $X \\rightarrow^+ Z$ and $Y \\rightarrow^+ Z$ converge at a block Z,\n    such that the blocks X and Y contain assignments to v.\\<close>"], ["", "definition \"necessaryPhi g v z \\<equiv> \\<exists>n ns m ms. old.pathsConverge g n ns m ms z \\<and> v \\<in> oldDefs g n \\<and> v \\<in> oldDefs g m\""], ["", "abbreviation \"necessaryPhi' g val \\<equiv> necessaryPhi g (var g val) (defNode g val)\""], ["", "definition \"unnecessaryPhi g val \\<equiv> phi g val \\<noteq> None \\<and> \\<not>necessaryPhi' g val\""], ["", "lemma necessaryPhiI: \"old.pathsConverge g n ns m ms z \\<Longrightarrow> v \\<in> oldDefs g n \\<Longrightarrow> v \\<in> oldDefs g m \\<Longrightarrow> necessaryPhi g v z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>old.pathsConverge g n ns m ms z; v \\<in> oldDefs g n;\n     v \\<in> oldDefs g m\\<rbrakk>\n    \\<Longrightarrow> necessaryPhi g v z", "by (auto simp: necessaryPhi_def)"], ["", "text \\<open>A program with only necessary $\\phi$ functions is in minimal SSA form.\\<close>"], ["", "definition \"cytronMinimal g \\<equiv> \\<forall>v \\<in> allVars g. phi g v \\<noteq> None \\<longrightarrow> necessaryPhi' g v\""], ["", "text \\<open>Let p be a $\\phi$ function in a block P. Furthermore, let q in a block Q\nand r in a block R be two operands of p, such that p, q and r are pairwise distinct.\nThen at least one of Q and R does not dominate P.\\<close>"], ["", "lemma 2:\n    assumes \"phiArg g p q\" \"phiArg g p r\" \"distinct [p, q, r]\" and[simp]: \"p \\<in> allVars g\"\n    shows \"\\<not>(def_dominates g q p \\<and> def_dominates g r p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (def_dominates g q p \\<and> def_dominates g r p)", "proof (rule, erule conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "txt \\<open>Proof. Assume that Q and R dominate P, i.e., every path from the start block to P contains Q and R.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "assume asm: \"def_dominates g q p\" \"def_dominates g r p\""], ["proof (state)\nthis:\n  def_dominates g q p\n  def_dominates g r p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "txt \\<open>Since immediate dominance forms a tree, Q dominates R or R dominates Q.\\<close>"], ["proof (state)\nthis:\n  def_dominates g q p\n  def_dominates g r p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"def_dominates g q r \\<or> def_dominates g r q\""], ["proof (prove)\nusing this:\n  def_dominates g q p\n  def_dominates g r p\n\ngoal (1 subgoal):\n 1. def_dominates g q r \\<or> def_dominates g r q", "by - (rule old.dominates_antitrans[of g \"defNode g q\" \"defNode g p\" \"defNode g r\"], auto)"], ["proof (state)\nthis:\n  def_dominates g q r \\<or> def_dominates g r q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  def_dominates g q r \\<or> def_dominates g r q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  def_dominates g q r \\<or> def_dominates g r q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "txt \\<open>Without loss of generality, let Q dominate R.\\<close>"], ["proof (state)\nthis:\n  def_dominates g q r \\<or> def_dominates g r q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "fix q r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "assume assms: \"phiArg g p q\" \"phiArg g p r\" \"distinct [p, q, r]\""], ["proof (state)\nthis:\n  phiArg g p q\n  phiArg g p r\n  distinct [p, q, r]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "assume asm: \"def_dominates g q p\" \"def_dominates g r p\""], ["proof (state)\nthis:\n  def_dominates g q p\n  def_dominates g r p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "assume wlog: \"def_dominates g q r\""], ["proof (state)\nthis:\n  def_dominates g q r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "have[simp]: \"var g q = var g r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var g q = var g r", "using phiArg_same_var[OF assms(1)] phiArg_same_var[OF assms(2)]"], ["proof (prove)\nusing this:\n  var g q = var g p\n  var g r = var g p\n\ngoal (1 subgoal):\n 1. var g q = var g r", "by simp"], ["proof (state)\nthis:\n  var g q = var g r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "txt \\<open>Furthermore, let S be the corresponding predecessor block of P where p is using q.\\<close>"], ["proof (state)\nthis:\n  var g q = var g r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "obtain S where S: \"q \\<in> phiUses g S\" \"S \\<in> set (old.predecessors g (defNode g p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>q \\<in> phiUses g S;\n         S \\<in> set (old.predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule phiUses_exI'[OF assms(1)], simp)"], ["proof (state)\nthis:\n  q \\<in> phiUses g S\n  S \\<in> set (old.predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "txt \\<open>Then there is a path from the start block crossing Q then R and S.\\<close>"], ["proof (state)\nthis:\n  q \\<in> phiUses g S\n  S \\<in> set (old.predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "have \"defNode g p \\<noteq> defNode g q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> defNode g q", "using assms(1,3)"], ["proof (prove)\nusing this:\n  phiArg g p q\n  distinct [p, q, r]\n\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> defNode g q", "by - (rule phiArg_distinct_nodes, auto)"], ["proof (state)\nthis:\n  defNode g p \\<noteq> defNode g q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "with S"], ["proof (chain)\npicking this:\n  q \\<in> phiUses g S\n  S \\<in> set (old.predecessors g (defNode g p))\n  defNode g p \\<noteq> defNode g q", "have \"old.dominates g (defNode g q) S\""], ["proof (prove)\nusing this:\n  q \\<in> phiUses g S\n  S \\<in> set (old.predecessors g (defNode g p))\n  defNode g p \\<noteq> defNode g q\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g q) S", "by - (rule allUses_dominated, auto)"], ["proof (state)\nthis:\n  old.dominates g (defNode g q) S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  old.dominates g (defNode g q) S", "obtain ns where ns: \"g \\<turnstile> defNode g q-ns\\<rightarrow>S\" \"distinct ns\""], ["proof (prove)\nusing this:\n  old.dominates g (defNode g q) S\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>S;\n         distinct ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule old.dominates_path, auto elim: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>S\n  distinct ns\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>S\n  distinct ns\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "have \"defNode g r \\<in> set (tl ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (tl ns)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (tl ns)", "have \"defNode g r \\<noteq> defNode g q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> defNode g q", "using assms"], ["proof (prove)\nusing this:\n  phiArg g p q\n  phiArg g p r\n  distinct [p, q, r]\n\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> defNode g q", "by - (rule phiArgs_def_distinct, auto)"], ["proof (state)\nthis:\n  defNode g r \\<noteq> defNode g q\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (tl ns)", "hence \"hd ns \\<noteq> defNode g r\""], ["proof (prove)\nusing this:\n  defNode g r \\<noteq> defNode g q\n\ngoal (1 subgoal):\n 1. hd ns \\<noteq> defNode g r", "using ns"], ["proof (prove)\nusing this:\n  defNode g r \\<noteq> defNode g q\n  g \\<turnstile> defNode g q-ns\\<rightarrow>S\n  distinct ns\n\ngoal (1 subgoal):\n 1. hd ns \\<noteq> defNode g r", "by (auto simp:old.path2_def)"], ["proof (state)\nthis:\n  hd ns \\<noteq> defNode g r\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (tl ns)", "moreover"], ["proof (state)\nthis:\n  hd ns \\<noteq> defNode g r\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (tl ns)", "have \"defNode g p \\<noteq> defNode g r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> defNode g r", "using assms(2,3)"], ["proof (prove)\nusing this:\n  phiArg g p r\n  distinct [p, q, r]\n\ngoal (1 subgoal):\n 1. defNode g p \\<noteq> defNode g r", "by - (rule phiArg_distinct_nodes, auto)"], ["proof (state)\nthis:\n  defNode g p \\<noteq> defNode g r\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (tl ns)", "with S(2)"], ["proof (chain)\npicking this:\n  S \\<in> set (old.predecessors g (defNode g p))\n  defNode g p \\<noteq> defNode g r", "have \"old.dominates g (defNode g r) S\""], ["proof (prove)\nusing this:\n  S \\<in> set (old.predecessors g (defNode g p))\n  defNode g p \\<noteq> defNode g r\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g r) S", "by - (rule old.dominates_unsnoc[where m=\"defNode g p\"], auto simp:wlog asm assms)"], ["proof (state)\nthis:\n  old.dominates g (defNode g r) S\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (tl ns)", "with wlog"], ["proof (chain)\npicking this:\n  def_dominates g q r\n  old.dominates g (defNode g r) S", "have \"defNode g r \\<in> set ns\""], ["proof (prove)\nusing this:\n  def_dominates g q r\n  old.dominates g (defNode g r) S\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set ns", "using ns(1)"], ["proof (prove)\nusing this:\n  def_dominates g q r\n  old.dominates g (defNode g r) S\n  g \\<turnstile> defNode g q-ns\\<rightarrow>S\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set ns", "by (rule old.dominates_mid, auto)"], ["proof (state)\nthis:\n  defNode g r \\<in> set ns\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (tl ns)", "ultimately"], ["proof (chain)\npicking this:\n  hd ns \\<noteq> defNode g r\n  defNode g r \\<in> set ns", "show ?thesis"], ["proof (prove)\nusing this:\n  hd ns \\<noteq> defNode g r\n  defNode g r \\<in> set ns\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (tl ns)", "by (metis append_Nil in_set_conv_decomp list.sel(1) tl_append2)"], ["proof (state)\nthis:\n  defNode g r \\<in> set (tl ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  defNode g r \\<in> set (tl ns)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "txt \\<open>This violates the SSA property.\\<close>"], ["proof (state)\nthis:\n  defNode g r \\<in> set (tl ns)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  defNode g r \\<in> set (tl ns)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "have \"q \\<in> allDefs g (defNode g q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> allDefs g (defNode g q)", "using assms S(1)"], ["proof (prove)\nusing this:\n  phiArg g p q\n  phiArg g p r\n  distinct [p, q, r]\n  q \\<in> phiUses g S\n\ngoal (1 subgoal):\n 1. q \\<in> allDefs g (defNode g q)", "by simp"], ["proof (state)\nthis:\n  q \\<in> allDefs g (defNode g q)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  q \\<in> allDefs g (defNode g q)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "have \"r \\<in> allDefs g (defNode g r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> allDefs g (defNode g r)", "using assms S(1)"], ["proof (prove)\nusing this:\n  phiArg g p q\n  phiArg g p r\n  distinct [p, q, r]\n  q \\<in> phiUses g S\n\ngoal (1 subgoal):\n 1. r \\<in> allDefs g (defNode g r)", "by simp"], ["proof (state)\nthis:\n  r \\<in> allDefs g (defNode g r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>S\n  distinct ns\n  defNode g r \\<in> set (tl ns)\n  q \\<in> allDefs g (defNode g q)\n  r \\<in> allDefs g (defNode g r)", "have \"var g r \\<noteq> var g q\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>S\n  distinct ns\n  defNode g r \\<in> set (tl ns)\n  q \\<in> allDefs g (defNode g q)\n  r \\<in> allDefs g (defNode g r)\n\ngoal (1 subgoal):\n 1. var g r \\<noteq> var g q", "using S(1)"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>S\n  distinct ns\n  defNode g r \\<in> set (tl ns)\n  q \\<in> allDefs g (defNode g q)\n  r \\<in> allDefs g (defNode g r)\n  q \\<in> phiUses g S\n\ngoal (1 subgoal):\n 1. var g r \\<noteq> var g q", "by - (rule conventional, auto simp:old.path2_def distinct_hd_tl)"], ["proof (state)\nthis:\n  var g r \\<noteq> var g q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "hence False"], ["proof (prove)\nusing this:\n  var g r \\<noteq> var g q\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>phiArg g p ?qa3; phiArg g p ?ra3; distinct [p, ?qa3, ?ra3];\n   def_dominates g ?qa3 p; def_dominates g ?ra3 p;\n   def_dominates g ?qa3 ?ra3\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>def_dominates g q p; def_dominates g r p\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  def_dominates g q r \\<or> def_dominates g r q\n  \\<lbrakk>phiArg g p ?qa3; phiArg g p ?ra3; distinct [p, ?qa3, ?ra3];\n   def_dominates g ?qa3 p; def_dominates g ?ra3 p;\n   def_dominates g ?qa3 ?ra3\\<rbrakk>\n  \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  def_dominates g q r \\<or> def_dominates g r q\n  \\<lbrakk>phiArg g p ?qa3; phiArg g p ?ra3; distinct [p, ?qa3, ?ra3];\n   def_dominates g ?qa3 p; def_dominates g ?ra3 p;\n   def_dominates g ?qa3 ?ra3\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "using assms asm"], ["proof (prove)\nusing this:\n  def_dominates g q r \\<or> def_dominates g r q\n  \\<lbrakk>phiArg g p ?qa3; phiArg g p ?ra3; distinct [p, ?qa3, ?ra3];\n   def_dominates g ?qa3 p; def_dominates g ?ra3 p;\n   def_dominates g ?qa3 ?ra3\\<rbrakk>\n  \\<Longrightarrow> False\n  phiArg g p q\n  phiArg g p r\n  distinct [p, q, r]\n  p \\<in> allVars g\n  def_dominates g q p\n  def_dominates g r p\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convergence_prop:\n    assumes \"necessaryPhi g (var g v) n\" \"g \\<turnstile> n-ns\\<rightarrow>m\" \"v \\<in> allUses g m\" \"\\<And>x. x \\<in> set (tl ns) \\<Longrightarrow> v \\<notin> allDefs g x\" \"v \\<notin> defs g n\"\n    shows \"phis g (n,v) \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phis g (n, v) \\<noteq> None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "from assms(2, 3)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  v \\<in> allUses g m", "have \"v \\<in> allVars g\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  v \\<in> allUses g m\n\ngoal (1 subgoal):\n 1. v \\<in> allVars g", "by auto"], ["proof (state)\nthis:\n  v \\<in> allVars g\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "hence 1: \"v \\<in> allDefs g (defNode g v)\""], ["proof (prove)\nusing this:\n  v \\<in> allVars g\n\ngoal (1 subgoal):\n 1. v \\<in> allDefs g (defNode g v)", "by (rule defNode)"], ["proof (state)\nthis:\n  v \\<in> allDefs g (defNode g v)\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "assume \"phis g (n,v) = None\""], ["proof (state)\nthis:\n  phis g (n, v) = None\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "with assms(5)"], ["proof (chain)\npicking this:\n  v \\<notin> defs g n\n  phis g (n, v) = None", "have 2: \"v \\<notin> allDefs g n\""], ["proof (prove)\nusing this:\n  v \\<notin> defs g n\n  phis g (n, v) = None\n\ngoal (1 subgoal):\n 1. v \\<notin> allDefs g n", "by (auto simp:allDefs_def phiDefs_def)"], ["proof (state)\nthis:\n  v \\<notin> allDefs g n\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "from assms(1)"], ["proof (chain)\npicking this:\n  necessaryPhi g (var g v) n", "obtain a as b bs v\\<^sub>a v\\<^sub>b where\n      a: \"v\\<^sub>a \\<in> defs g a\" \"var g v\\<^sub>a = var g v\" and\n      b: \"v\\<^sub>b \\<in> defs g b\" \"var g v\\<^sub>b = var g v\"\n      and conv: \"g \\<turnstile> a-as\\<rightarrow>n\" \"g \\<turnstile> b-bs\\<rightarrow>n\" \"1 < length as\" \"1 < length bs\" \"a \\<noteq> b\" \"set (butlast as) \\<inter> set (butlast bs) = {}\""], ["proof (prove)\nusing this:\n  necessaryPhi g (var g v) n\n\ngoal (1 subgoal):\n 1. (\\<And>v\\<^sub>a a v\\<^sub>b b as bs.\n        \\<lbrakk>v\\<^sub>a \\<in> defs g a; var g v\\<^sub>a = var g v;\n         v\\<^sub>b \\<in> defs g b; var g v\\<^sub>b = var g v;\n         g \\<turnstile> a-as\\<rightarrow>n;\n         g \\<turnstile> b-bs\\<rightarrow>n; 1 < length as; 1 < length bs;\n         a \\<noteq> b;\n         set (butlast as) \\<inter> set (butlast bs) = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp:necessaryPhi_def old.pathsConverge'_def oldDefs_def)"], ["proof (state)\nthis:\n  v\\<^sub>a \\<in> defs g a\n  var g v\\<^sub>a = var g v\n  v\\<^sub>b \\<in> defs g b\n  var g v\\<^sub>b = var g v\n  g \\<turnstile> a-as\\<rightarrow>n\n  g \\<turnstile> b-bs\\<rightarrow>n\n  1 < length as\n  1 < length bs\n  a \\<noteq> b\n  set (butlast as) \\<inter> set (butlast bs) = {}\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "have \"old.dominates g (defNode g v) m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. old.dominates g (defNode g v) m", "using assms(2,3)"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  v \\<in> allUses g m\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g v) m", "by - (rule allUses_dominated, auto)"], ["proof (state)\nthis:\n  old.dominates g (defNode g v) m\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "hence dom: \"old.dominates g (defNode g v) n\""], ["proof (prove)\nusing this:\n  old.dominates g (defNode g v) m\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g v) n", "using assms(2,4) 1"], ["proof (prove)\nusing this:\n  old.dominates g (defNode g v) m\n  g \\<turnstile> n-ns\\<rightarrow>m\n  ?x1 \\<in> set (tl ns) \\<Longrightarrow> v \\<notin> allDefs g ?x1\n  v \\<in> allDefs g (defNode g v)\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g v) n", "by - (rule old.dominates_unsnoc', auto)"], ["proof (state)\nthis:\n  old.dominates g (defNode g v) n\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "hence \"old.strict_dom g (defNode g v) n\""], ["proof (prove)\nusing this:\n  old.dominates g (defNode g v) n\n\ngoal (1 subgoal):\n 1. defNode g v \\<noteq> n \\<and> old.dominates g (defNode g v) n", "using 1 2"], ["proof (prove)\nusing this:\n  old.dominates g (defNode g v) n\n  v \\<in> allDefs g (defNode g v)\n  v \\<notin> allDefs g n\n\ngoal (1 subgoal):\n 1. defNode g v \\<noteq> n \\<and> old.dominates g (defNode g v) n", "by auto"], ["proof (state)\nthis:\n  defNode g v \\<noteq> n \\<and> old.dominates g (defNode g v) n\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  defNode g v \\<noteq> n \\<and> old.dominates g (defNode g v) n\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "fix v\\<^sub>a a as v\\<^sub>b b bs"], ["proof (state)\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "assume a: \"v\\<^sub>a \\<in> defs g a\" \"var g v\\<^sub>a = var g v\""], ["proof (state)\nthis:\n  v\\<^sub>a \\<in> defs g a\n  var g v\\<^sub>a = var g v\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "assume as: \"g \\<turnstile> a-as\\<rightarrow>n\" \"length as > 1\""], ["proof (state)\nthis:\n  g \\<turnstile> a-as\\<rightarrow>n\n  1 < length as\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "assume b: \"v\\<^sub>b \\<in> defs g b\" \"var g v\\<^sub>b = var g v\""], ["proof (state)\nthis:\n  v\\<^sub>b \\<in> defs g b\n  var g v\\<^sub>b = var g v\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "assume bs: \"g \\<turnstile> b-bs\\<rightarrow>n\""], ["proof (state)\nthis:\n  g \\<turnstile> b-bs\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "assume conv: \"a \\<noteq> b\" \"set (butlast as) \\<inter> set (butlast bs) = {}\""], ["proof (state)\nthis:\n  a \\<noteq> b\n  set (butlast as) \\<inter> set (butlast bs) = {}\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "have 3: \"defNode g v \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g v \\<noteq> a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g v = a \\<Longrightarrow> False", "assume contr: \"defNode g v = a\""], ["proof (state)\nthis:\n  defNode g v = a\n\ngoal (1 subgoal):\n 1. defNode g v = a \\<Longrightarrow> False", "have \"a \\<in> set (butlast as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set (butlast as)", "using as"], ["proof (prove)\nusing this:\n  g \\<turnstile> a-as\\<rightarrow>n\n  1 < length as\n\ngoal (1 subgoal):\n 1. a \\<in> set (butlast as)", "by (auto simp:old.path2_def intro:hd_in_butlast)"], ["proof (state)\nthis:\n  a \\<in> set (butlast as)\n\ngoal (1 subgoal):\n 1. defNode g v = a \\<Longrightarrow> False", "hence \"a \\<notin> set (butlast bs)\""], ["proof (prove)\nusing this:\n  a \\<in> set (butlast as)\n\ngoal (1 subgoal):\n 1. a \\<notin> set (butlast bs)", "using conv(2)"], ["proof (prove)\nusing this:\n  a \\<in> set (butlast as)\n  set (butlast as) \\<inter> set (butlast bs) = {}\n\ngoal (1 subgoal):\n 1. a \\<notin> set (butlast bs)", "by auto"], ["proof (state)\nthis:\n  a \\<notin> set (butlast bs)\n\ngoal (1 subgoal):\n 1. defNode g v = a \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  a \\<notin> set (butlast bs)\n\ngoal (1 subgoal):\n 1. defNode g v = a \\<Longrightarrow> False", "have \"a \\<noteq> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> n", "using 1 2 contr"], ["proof (prove)\nusing this:\n  v \\<in> allDefs g (defNode g v)\n  v \\<notin> allDefs g n\n  defNode g v = a\n\ngoal (1 subgoal):\n 1. a \\<noteq> n", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> n\n\ngoal (1 subgoal):\n 1. defNode g v = a \\<Longrightarrow> False", "hence \"a \\<noteq> last bs\""], ["proof (prove)\nusing this:\n  a \\<noteq> n\n\ngoal (1 subgoal):\n 1. a \\<noteq> last bs", "using bs"], ["proof (prove)\nusing this:\n  a \\<noteq> n\n  g \\<turnstile> b-bs\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. a \\<noteq> last bs", "by (auto simp:old.path2_def)"], ["proof (state)\nthis:\n  a \\<noteq> last bs\n\ngoal (1 subgoal):\n 1. defNode g v = a \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  a \\<notin> set (butlast bs)\n  a \\<noteq> last bs", "have 4: \"a \\<notin> set bs\""], ["proof (prove)\nusing this:\n  a \\<notin> set (butlast bs)\n  a \\<noteq> last bs\n\ngoal (1 subgoal):\n 1. a \\<notin> set bs", "by - (subst append_butlast_last_id[symmetric], rule old.path2_not_Nil[OF bs], auto)"], ["proof (state)\nthis:\n  a \\<notin> set bs\n\ngoal (1 subgoal):\n 1. defNode g v = a \\<Longrightarrow> False", "have \"v \\<noteq> v\\<^sub>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<noteq> v\\<^sub>a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v = v\\<^sub>a \\<Longrightarrow> False", "assume asm: \"v = v\\<^sub>a\""], ["proof (state)\nthis:\n  v = v\\<^sub>a\n\ngoal (1 subgoal):\n 1. v = v\\<^sub>a \\<Longrightarrow> False", "have \"v \\<noteq> v\\<^sub>b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<noteq> v\\<^sub>b", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v = v\\<^sub>b \\<Longrightarrow> False", "assume \"v = v\\<^sub>b\""], ["proof (state)\nthis:\n  v = v\\<^sub>b\n\ngoal (1 subgoal):\n 1. v = v\\<^sub>b \\<Longrightarrow> False", "with asm[symmetric] b(1)"], ["proof (chain)\npicking this:\n  v\\<^sub>a = v\n  v\\<^sub>b \\<in> defs g b\n  v = v\\<^sub>b", "have \"v\\<^sub>a \\<in> allDefs g b\""], ["proof (prove)\nusing this:\n  v\\<^sub>a = v\n  v\\<^sub>b \\<in> defs g b\n  v = v\\<^sub>b\n\ngoal (1 subgoal):\n 1. v\\<^sub>a \\<in> allDefs g b", "by simp"], ["proof (state)\nthis:\n  v\\<^sub>a \\<in> allDefs g b\n\ngoal (1 subgoal):\n 1. v = v\\<^sub>b \\<Longrightarrow> False", "with asm"], ["proof (chain)\npicking this:\n  v = v\\<^sub>a\n  v\\<^sub>a \\<in> allDefs g b", "have \"a = b\""], ["proof (prove)\nusing this:\n  v = v\\<^sub>a\n  v\\<^sub>a \\<in> allDefs g b\n\ngoal (1 subgoal):\n 1. a = b", "using as bs a(1)"], ["proof (prove)\nusing this:\n  v = v\\<^sub>a\n  v\\<^sub>a \\<in> allDefs g b\n  g \\<turnstile> a-as\\<rightarrow>n\n  1 < length as\n  g \\<turnstile> b-bs\\<rightarrow>n\n  v\\<^sub>a \\<in> defs g a\n\ngoal (1 subgoal):\n 1. a = b", "by - (rule allDefs_disjoint', auto)"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. v = v\\<^sub>b \\<Longrightarrow> False", "with conv(1)"], ["proof (chain)\npicking this:\n  a \\<noteq> b\n  a = b", "show False"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n  a = b\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<noteq> v\\<^sub>b\n\ngoal (1 subgoal):\n 1. v = v\\<^sub>a \\<Longrightarrow> False", "obtain ebs where ebs: \"g \\<turnstile> Entry g-ebs\\<rightarrow>b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ebs.\n        g \\<turnstile> Entry g-ebs\\<rightarrow>b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using bs"], ["proof (prove)\nusing this:\n  g \\<turnstile> b-bs\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. (\\<And>ebs.\n        g \\<turnstile> Entry g-ebs\\<rightarrow>b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (atomize, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-ebs\\<rightarrow>b\n\ngoal (1 subgoal):\n 1. v = v\\<^sub>a \\<Longrightarrow> False", "hence \"g \\<turnstile> Entry g-butlast ebs@bs\\<rightarrow>n\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ebs\\<rightarrow>b\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-butlast ebs @ bs\\<rightarrow>n", "using bs"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ebs\\<rightarrow>b\n  g \\<turnstile> b-bs\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-butlast ebs @ bs\\<rightarrow>n", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-butlast ebs @ bs\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. v = v\\<^sub>a \\<Longrightarrow> False", "hence 5: \"a \\<in> set (butlast ebs@bs)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-butlast ebs @ bs\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. a \\<in> set (butlast ebs @ bs)", "by - (rule old.dominatesE[OF dom[simplified contr]])"], ["proof (state)\nthis:\n  a \\<in> set (butlast ebs @ bs)\n\ngoal (1 subgoal):\n 1. v = v\\<^sub>a \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"a \\<in> set (butlast ebs)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> set (butlast ebs) \\<Longrightarrow> False\n 2. a \\<notin> set (butlast ebs) \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  a \\<in> set (butlast ebs)\n\ngoal (2 subgoals):\n 1. a \\<in> set (butlast ebs) \\<Longrightarrow> False\n 2. a \\<notin> set (butlast ebs) \\<Longrightarrow> False", "hence \"a \\<in> set ebs\""], ["proof (prove)\nusing this:\n  a \\<in> set (butlast ebs)\n\ngoal (1 subgoal):\n 1. a \\<in> set ebs", "by (rule in_set_butlastD)"], ["proof (state)\nthis:\n  a \\<in> set ebs\n\ngoal (2 subgoals):\n 1. a \\<in> set (butlast ebs) \\<Longrightarrow> False\n 2. a \\<notin> set (butlast ebs) \\<Longrightarrow> False", "with ebs"], ["proof (chain)\npicking this:\n  g \\<turnstile> Entry g-ebs\\<rightarrow>b\n  a \\<in> set ebs", "obtain abs where abs: \"g \\<turnstile> a-abs\\<rightarrow>b\" \"a \\<notin> set (tl abs)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-ebs\\<rightarrow>b\n  a \\<in> set ebs\n\ngoal (1 subgoal):\n 1. (\\<And>abs.\n        \\<lbrakk>g \\<turnstile> a-abs\\<rightarrow>b;\n         a \\<notin> set (tl abs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule old.path2_split_first_last, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> a-abs\\<rightarrow>b\n  a \\<notin> set (tl abs)\n\ngoal (2 subgoals):\n 1. a \\<in> set (butlast ebs) \\<Longrightarrow> False\n 2. a \\<notin> set (butlast ebs) \\<Longrightarrow> False", "let ?path = \"(abs@tl bs)@tl ns\""], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> set (butlast ebs) \\<Longrightarrow> False\n 2. a \\<notin> set (butlast ebs) \\<Longrightarrow> False", "have \"var g v\\<^sub>b \\<noteq> var g v\\<^sub>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var g v\\<^sub>b \\<noteq> var g v\\<^sub>a", "proof (rule conventional)"], ["proof (state)\ngoal (6 subgoals):\n 1. g \\<turnstile> ?n-?ns\\<rightarrow>?m\n 2. ?n \\<notin> set (tl ?ns)\n 3. v\\<^sub>a \\<in> allDefs g ?n\n 4. v\\<^sub>a \\<in> allUses g ?m\n 5. ?x \\<in> set (tl ?ns)\n 6. v\\<^sub>b \\<in> allDefs g ?x", "show \"g \\<turnstile> a-?path\\<rightarrow>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> a-(abs @ tl bs) @ tl ns\\<rightarrow>m", "using abs(1) bs assms(2)"], ["proof (prove)\nusing this:\n  g \\<turnstile> a-abs\\<rightarrow>b\n  g \\<turnstile> b-bs\\<rightarrow>n\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. g \\<turnstile> a-(abs @ tl bs) @ tl ns\\<rightarrow>m", "by - (rule old.path2_app, rule old.path2_app)"], ["proof (state)\nthis:\n  g \\<turnstile> a-(abs @ tl bs) @ tl ns\\<rightarrow>m\n\ngoal (5 subgoals):\n 1. a \\<notin> set (tl ((abs @ tl bs) @ tl ns))\n 2. v\\<^sub>a \\<in> allDefs g a\n 3. v\\<^sub>a \\<in> allUses g m\n 4. ?x \\<in> set (tl ((abs @ tl bs) @ tl ns))\n 5. v\\<^sub>b \\<in> allDefs g ?x", "have \"a \\<notin> set (tl bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> set (tl bs)", "using 4"], ["proof (prove)\nusing this:\n  a \\<notin> set bs\n\ngoal (1 subgoal):\n 1. a \\<notin> set (tl bs)", "by (auto simp:in_set_tlD)"], ["proof (state)\nthis:\n  a \\<notin> set (tl bs)\n\ngoal (5 subgoals):\n 1. a \\<notin> set (tl ((abs @ tl bs) @ tl ns))\n 2. v\\<^sub>a \\<in> allDefs g a\n 3. v\\<^sub>a \\<in> allUses g m\n 4. ?x \\<in> set (tl ((abs @ tl bs) @ tl ns))\n 5. v\\<^sub>b \\<in> allDefs g ?x", "moreover"], ["proof (state)\nthis:\n  a \\<notin> set (tl bs)\n\ngoal (5 subgoals):\n 1. a \\<notin> set (tl ((abs @ tl bs) @ tl ns))\n 2. v\\<^sub>a \\<in> allDefs g a\n 3. v\\<^sub>a \\<in> allUses g m\n 4. ?x \\<in> set (tl ((abs @ tl bs) @ tl ns))\n 5. v\\<^sub>b \\<in> allDefs g ?x", "have \"a \\<notin> set (tl ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> set (tl ns)", "using 1 2 contr assms(4)"], ["proof (prove)\nusing this:\n  v \\<in> allDefs g (defNode g v)\n  v \\<notin> allDefs g n\n  defNode g v = a\n  ?x1 \\<in> set (tl ns) \\<Longrightarrow> v \\<notin> allDefs g ?x1\n\ngoal (1 subgoal):\n 1. a \\<notin> set (tl ns)", "by auto"], ["proof (state)\nthis:\n  a \\<notin> set (tl ns)\n\ngoal (5 subgoals):\n 1. a \\<notin> set (tl ((abs @ tl bs) @ tl ns))\n 2. v\\<^sub>a \\<in> allDefs g a\n 3. v\\<^sub>a \\<in> allUses g m\n 4. ?x \\<in> set (tl ((abs @ tl bs) @ tl ns))\n 5. v\\<^sub>b \\<in> allDefs g ?x", "ultimately"], ["proof (chain)\npicking this:\n  a \\<notin> set (tl bs)\n  a \\<notin> set (tl ns)", "show \"a \\<notin> set (tl ?path)\""], ["proof (prove)\nusing this:\n  a \\<notin> set (tl bs)\n  a \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. a \\<notin> set (tl ((abs @ tl bs) @ tl ns))", "using abs conv(2)"], ["proof (prove)\nusing this:\n  a \\<notin> set (tl bs)\n  a \\<notin> set (tl ns)\n  g \\<turnstile> a-abs\\<rightarrow>b\n  a \\<notin> set (tl abs)\n  set (butlast as) \\<inter> set (butlast bs) = {}\n\ngoal (1 subgoal):\n 1. a \\<notin> set (tl ((abs @ tl bs) @ tl ns))", "by - (subst tl_append2, auto simp: old.path2_not_Nil)"], ["proof (state)\nthis:\n  a \\<notin> set (tl ((abs @ tl bs) @ tl ns))\n\ngoal (4 subgoals):\n 1. v\\<^sub>a \\<in> allDefs g a\n 2. v\\<^sub>a \\<in> allUses g m\n 3. ?x \\<in> set (tl ((abs @ tl bs) @ tl ns))\n 4. v\\<^sub>b \\<in> allDefs g ?x", "show \"v\\<^sub>a \\<in> allUses g m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v\\<^sub>a \\<in> allUses g m", "using asm assms(3)"], ["proof (prove)\nusing this:\n  v = v\\<^sub>a\n  v \\<in> allUses g m\n\ngoal (1 subgoal):\n 1. v\\<^sub>a \\<in> allUses g m", "by simp"], ["proof (state)\nthis:\n  v\\<^sub>a \\<in> allUses g m\n\ngoal (3 subgoals):\n 1. v\\<^sub>a \\<in> allDefs g a\n 2. ?x \\<in> set (tl ((abs @ tl bs) @ tl ns))\n 3. v\\<^sub>b \\<in> allDefs g ?x", "have \"b \\<in> set (tl abs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> set (tl abs)", "using abs(1) conv(1)"], ["proof (prove)\nusing this:\n  g \\<turnstile> a-abs\\<rightarrow>b\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. b \\<in> set (tl abs)", "by (auto simp:old.path2_def intro!:last_in_tl nonsimple_length_gt_1)"], ["proof (state)\nthis:\n  b \\<in> set (tl abs)\n\ngoal (3 subgoals):\n 1. v\\<^sub>a \\<in> allDefs g a\n 2. ?x \\<in> set (tl ((abs @ tl bs) @ tl ns))\n 3. v\\<^sub>b \\<in> allDefs g ?x", "thus \"b \\<in> set (tl ?path)\""], ["proof (prove)\nusing this:\n  b \\<in> set (tl abs)\n\ngoal (1 subgoal):\n 1. b \\<in> set (tl ((abs @ tl bs) @ tl ns))", "using abs(1)"], ["proof (prove)\nusing this:\n  b \\<in> set (tl abs)\n  g \\<turnstile> a-abs\\<rightarrow>b\n\ngoal (1 subgoal):\n 1. b \\<in> set (tl ((abs @ tl bs) @ tl ns))", "by (simp add: old.path2_not_Nil)"], ["proof (state)\nthis:\n  b \\<in> set (tl ((abs @ tl bs) @ tl ns))\n\ngoal (2 subgoals):\n 1. v\\<^sub>a \\<in> allDefs g a\n 2. v\\<^sub>b \\<in> allDefs g b", "qed (simp_all add: a b)"], ["proof (state)\nthis:\n  var g v\\<^sub>b \\<noteq> var g v\\<^sub>a\n\ngoal (2 subgoals):\n 1. a \\<in> set (butlast ebs) \\<Longrightarrow> False\n 2. a \\<notin> set (butlast ebs) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  var g v\\<^sub>b \\<noteq> var g v\\<^sub>a\n\ngoal (1 subgoal):\n 1. False", "using a b"], ["proof (prove)\nusing this:\n  var g v\\<^sub>b \\<noteq> var g v\\<^sub>a\n  v\\<^sub>a \\<in> defs g a\n  var g v\\<^sub>a = var g v\n  v\\<^sub>b \\<in> defs g b\n  var g v\\<^sub>b = var g v\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. a \\<notin> set (butlast ebs) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<notin> set (butlast ebs) \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  a \\<notin> set (butlast ebs)\n\ngoal (1 subgoal):\n 1. a \\<notin> set (butlast ebs) \\<Longrightarrow> False", "with 4 5"], ["proof (chain)\npicking this:\n  a \\<notin> set bs\n  a \\<in> set (butlast ebs @ bs)\n  a \\<notin> set (butlast ebs)", "show False"], ["proof (prove)\nusing this:\n  a \\<notin> set bs\n  a \\<in> set (butlast ebs @ bs)\n  a \\<notin> set (butlast ebs)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<noteq> v\\<^sub>a\n\ngoal (1 subgoal):\n 1. defNode g v = a \\<Longrightarrow> False", "hence \"var g v \\<noteq> var g v\\<^sub>a\""], ["proof (prove)\nusing this:\n  v \\<noteq> v\\<^sub>a\n\ngoal (1 subgoal):\n 1. var g v \\<noteq> var g v\\<^sub>a", "using a as 1 contr"], ["proof (prove)\nusing this:\n  v \\<noteq> v\\<^sub>a\n  v\\<^sub>a \\<in> defs g a\n  var g v\\<^sub>a = var g v\n  g \\<turnstile> a-as\\<rightarrow>n\n  1 < length as\n  v \\<in> allDefs g (defNode g v)\n  defNode g v = a\n\ngoal (1 subgoal):\n 1. var g v \\<noteq> var g v\\<^sub>a", "by - (rule allDefs_var_disjoint, auto)"], ["proof (state)\nthis:\n  var g v \\<noteq> var g v\\<^sub>a\n\ngoal (1 subgoal):\n 1. defNode g v = a \\<Longrightarrow> False", "with a(2)"], ["proof (chain)\npicking this:\n  var g v\\<^sub>a = var g v\n  var g v \\<noteq> var g v\\<^sub>a", "show False"], ["proof (prove)\nusing this:\n  var g v\\<^sub>a = var g v\n  var g v \\<noteq> var g v\\<^sub>a\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  defNode g v \\<noteq> a\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "obtain eas where eas: \"g \\<turnstile> Entry g-eas\\<rightarrow>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>eas.\n        g \\<turnstile> Entry g-eas\\<rightarrow>a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using as"], ["proof (prove)\nusing this:\n  g \\<turnstile> a-as\\<rightarrow>n\n  1 < length as\n\ngoal (1 subgoal):\n 1. (\\<And>eas.\n        g \\<turnstile> Entry g-eas\\<rightarrow>a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (atomize, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-eas\\<rightarrow>a\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "hence \"g \\<turnstile> Entry g-eas@tl as\\<rightarrow>n\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-eas\\<rightarrow>a\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-eas @ tl as\\<rightarrow>n", "using as"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-eas\\<rightarrow>a\n  g \\<turnstile> a-as\\<rightarrow>n\n  1 < length as\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Entry g-eas @ tl as\\<rightarrow>n", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-eas @ tl as\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "hence 4: \"defNode g v \\<in> set (eas@tl as)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-eas @ tl as\\<rightarrow>n\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set (eas @ tl as)", "by - (rule old.dominatesE[OF dom])"], ["proof (state)\nthis:\n  defNode g v \\<in> set (eas @ tl as)\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "have \"defNode g v \\<in> set (tl as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g v \\<in> set (tl as)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g v \\<notin> set (tl as) \\<Longrightarrow> False", "assume asm: \"defNode g v \\<notin> set (tl as)\""], ["proof (state)\nthis:\n  defNode g v \\<notin> set (tl as)\n\ngoal (1 subgoal):\n 1. defNode g v \\<notin> set (tl as) \\<Longrightarrow> False", "with 4"], ["proof (chain)\npicking this:\n  defNode g v \\<in> set (eas @ tl as)\n  defNode g v \\<notin> set (tl as)", "have \"defNode g v \\<in> set eas\""], ["proof (prove)\nusing this:\n  defNode g v \\<in> set (eas @ tl as)\n  defNode g v \\<notin> set (tl as)\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set eas", "by simp"], ["proof (state)\nthis:\n  defNode g v \\<in> set eas\n\ngoal (1 subgoal):\n 1. defNode g v \\<notin> set (tl as) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  defNode g v \\<in> set eas", "obtain eas' where eas': \"g \\<turnstile> defNode g v-defNode g v#eas'\\<rightarrow>a\" \"defNode g v \\<notin> set eas'\""], ["proof (prove)\nusing this:\n  defNode g v \\<in> set eas\n\ngoal (1 subgoal):\n 1. (\\<And>eas'.\n        \\<lbrakk>g \\<turnstile> defNode g\n                                 v-defNode g v # eas'\\<rightarrow>a;\n         defNode g v \\<notin> set eas'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using eas"], ["proof (prove)\nusing this:\n  defNode g v \\<in> set eas\n  g \\<turnstile> Entry g-eas\\<rightarrow>a\n\ngoal (1 subgoal):\n 1. (\\<And>eas'.\n        \\<lbrakk>g \\<turnstile> defNode g\n                                 v-defNode g v # eas'\\<rightarrow>a;\n         defNode g v \\<notin> set eas'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_first_last)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g v-defNode g v # eas'\\<rightarrow>a\n  defNode g v \\<notin> set eas'\n\ngoal (1 subgoal):\n 1. defNode g v \\<notin> set (tl as) \\<Longrightarrow> False", "let ?path = \"((defNode g v#eas')@tl as)@tl ns\""], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g v \\<notin> set (tl as) \\<Longrightarrow> False", "have \"var g v\\<^sub>a \\<noteq> var g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var g v\\<^sub>a \\<noteq> var g v", "proof (rule conventional)"], ["proof (state)\ngoal (6 subgoals):\n 1. g \\<turnstile> ?n-?ns\\<rightarrow>?m\n 2. ?n \\<notin> set (tl ?ns)\n 3. v \\<in> allDefs g ?n\n 4. v \\<in> allUses g ?m\n 5. ?x \\<in> set (tl ?ns)\n 6. v\\<^sub>a \\<in> allDefs g ?x", "show \"g \\<turnstile> defNode g v-?path\\<rightarrow>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g\n                    v-((defNode g v # eas') @ tl as) @ tl ns\\<rightarrow>m", "using eas' as assms(2)"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g v-defNode g v # eas'\\<rightarrow>a\n  defNode g v \\<notin> set eas'\n  g \\<turnstile> a-as\\<rightarrow>n\n  1 < length as\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g\n                    v-((defNode g v # eas') @ tl as) @ tl ns\\<rightarrow>m", "by (auto simp del:append_Cons append_assoc intro: old.path2_app)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g\n                  v-((defNode g v # eas') @ tl as) @ tl ns\\<rightarrow>m\n\ngoal (5 subgoals):\n 1. defNode g v \\<notin> set (tl (((defNode g v # eas') @ tl as) @ tl ns))\n 2. v \\<in> allDefs g (defNode g v)\n 3. v \\<in> allUses g m\n 4. ?x \\<in> set (tl (((defNode g v # eas') @ tl as) @ tl ns))\n 5. v\\<^sub>a \\<in> allDefs g ?x", "show \"a \\<in> set (tl ?path)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set (tl (((defNode g v # eas') @ tl as) @ tl ns))", "using eas' 3"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g v-defNode g v # eas'\\<rightarrow>a\n  defNode g v \\<notin> set eas'\n  defNode g v \\<noteq> a\n\ngoal (1 subgoal):\n 1. a \\<in> set (tl (((defNode g v # eas') @ tl as) @ tl ns))", "by (auto simp:old.path2_def)"], ["proof (state)\nthis:\n  a \\<in> set (tl (((defNode g v # eas') @ tl as) @ tl ns))\n\ngoal (4 subgoals):\n 1. defNode g v \\<notin> set (tl (((defNode g v # eas') @ tl as) @ tl ns))\n 2. v \\<in> allDefs g (defNode g v)\n 3. v \\<in> allUses g m\n 4. v\\<^sub>a \\<in> allDefs g a", "show \"defNode g v \\<notin> set (tl ?path)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g v \\<notin> set (tl (((defNode g v # eas') @ tl as) @ tl ns))", "using assms(4) 1 eas'(2) asm"], ["proof (prove)\nusing this:\n  ?x1 \\<in> set (tl ns) \\<Longrightarrow> v \\<notin> allDefs g ?x1\n  v \\<in> allDefs g (defNode g v)\n  defNode g v \\<notin> set eas'\n  defNode g v \\<notin> set (tl as)\n\ngoal (1 subgoal):\n 1. defNode g v \\<notin> set (tl (((defNode g v # eas') @ tl as) @ tl ns))", "by auto"], ["proof (state)\nthis:\n  defNode g v \\<notin> set (tl (((defNode g v # eas') @ tl as) @ tl ns))\n\ngoal (3 subgoals):\n 1. v \\<in> allDefs g (defNode g v)\n 2. v \\<in> allUses g m\n 3. v\\<^sub>a \\<in> allDefs g a", "qed (simp_all add:1 assms(3) a(1))"], ["proof (state)\nthis:\n  var g v\\<^sub>a \\<noteq> var g v\n\ngoal (1 subgoal):\n 1. defNode g v \\<notin> set (tl as) \\<Longrightarrow> False", "with a(2)"], ["proof (chain)\npicking this:\n  var g v\\<^sub>a = var g v\n  var g v\\<^sub>a \\<noteq> var g v", "show False"], ["proof (prove)\nusing this:\n  var g v\\<^sub>a = var g v\n  var g v\\<^sub>a \\<noteq> var g v\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  defNode g v \\<in> set (tl as)\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  defNode g v \\<in> set (tl as)\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "have \"defNode g v \\<noteq> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g v \\<noteq> n", "using 1 2"], ["proof (prove)\nusing this:\n  v \\<in> allDefs g (defNode g v)\n  v \\<notin> allDefs g n\n\ngoal (1 subgoal):\n 1. defNode g v \\<noteq> n", "by auto"], ["proof (state)\nthis:\n  defNode g v \\<noteq> n\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  defNode g v \\<in> set (tl as)\n  defNode g v \\<noteq> n", "have \"defNode g v \\<in> set (butlast as)\""], ["proof (prove)\nusing this:\n  defNode g v \\<in> set (tl as)\n  defNode g v \\<noteq> n\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set (butlast as)", "using as subsetD[OF set_tl, of \"defNode g v\" as]"], ["proof (prove)\nusing this:\n  defNode g v \\<in> set (tl as)\n  defNode g v \\<noteq> n\n  g \\<turnstile> a-as\\<rightarrow>n\n  1 < length as\n  defNode g v \\<in> set (tl as) \\<Longrightarrow> defNode g v \\<in> set as\n\ngoal (1 subgoal):\n 1. defNode g v \\<in> set (butlast as)", "by - (rule in_set_butlastI, auto simp:old.path2_def)"], ["proof (state)\nthis:\n  defNode g v \\<in> set (butlast as)\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?v\\<^sub>a'3 \\<in> defs g ?aa3; var g ?v\\<^sub>a'3 = var g v;\n   g \\<turnstile> ?aa3-?asa3\\<rightarrow>n; 1 < length ?asa3;\n   ?v\\<^sub>b'3 \\<in> defs g ?ba3; var g ?v\\<^sub>b'3 = var g v;\n   g \\<turnstile> ?ba3-?bsa3\\<rightarrow>n; ?aa3 \\<noteq> ?ba3;\n   set (butlast ?asa3) \\<inter> set (butlast ?bsa3) = {}\\<rbrakk>\n  \\<Longrightarrow> defNode g v \\<in> set (butlast ?asa3)\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "note def_in_as = this"], ["proof (state)\nthis:\n  \\<lbrakk>?v\\<^sub>a'3 \\<in> defs g ?aa3; var g ?v\\<^sub>a'3 = var g v;\n   g \\<turnstile> ?aa3-?asa3\\<rightarrow>n; 1 < length ?asa3;\n   ?v\\<^sub>b'3 \\<in> defs g ?ba3; var g ?v\\<^sub>b'3 = var g v;\n   g \\<turnstile> ?ba3-?bsa3\\<rightarrow>n; ?aa3 \\<noteq> ?ba3;\n   set (butlast ?asa3) \\<inter> set (butlast ?bsa3) = {}\\<rbrakk>\n  \\<Longrightarrow> defNode g v \\<in> set (butlast ?asa3)\n\ngoal (1 subgoal):\n 1. phis g (n, v) = None \\<Longrightarrow> False", "from def_in_as[OF a conv(1,3) b conv(2)] def_in_as[OF b conv(2,4) a conv(1)] conv(5,6)"], ["proof (chain)\npicking this:\n  \\<lbrakk>a \\<noteq> b;\n   set (butlast as) \\<inter> set (butlast bs) = {}\\<rbrakk>\n  \\<Longrightarrow> defNode g v \\<in> set (butlast as)\n  \\<lbrakk>b \\<noteq> a;\n   set (butlast bs) \\<inter> set (butlast as) = {}\\<rbrakk>\n  \\<Longrightarrow> defNode g v \\<in> set (butlast bs)\n  a \\<noteq> b\n  set (butlast as) \\<inter> set (butlast bs) = {}", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>a \\<noteq> b;\n   set (butlast as) \\<inter> set (butlast bs) = {}\\<rbrakk>\n  \\<Longrightarrow> defNode g v \\<in> set (butlast as)\n  \\<lbrakk>b \\<noteq> a;\n   set (butlast bs) \\<inter> set (butlast as) = {}\\<rbrakk>\n  \\<Longrightarrow> defNode g v \\<in> set (butlast bs)\n  a \\<noteq> b\n  set (butlast as) \\<inter> set (butlast bs) = {}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convergence_prop':\n    assumes \"necessaryPhi g v n\" \"g \\<turnstile> n-ns\\<rightarrow>m\" \"v \\<in> var g ` allUses g m\" \"\\<And>x. x \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g x\"\n    obtains val where \"var g val = v\" \"phis g (n,val) \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>val.\n        \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  necessaryPhi g v n\n  g \\<turnstile> n-ns\\<rightarrow>m\n  v \\<in> var g ` allUses g m\n  ?x1 \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g ?x1\n\ngoal (1 subgoal):\n 1. (\\<And>val.\n        \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction \"length ns\" arbitrary: ns m rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ns m.\n       \\<lbrakk>\\<And>nsa m.\n                   \\<lbrakk>length nsa < length ns;\n                    \\<And>val.\n                       \\<lbrakk>var g val = v;\n                        phis g (n, val) \\<noteq> None\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    necessaryPhi g v n; g \\<turnstile> n-nsa\\<rightarrow>m;\n                    v \\<in> var g ` allUses g m;\n                    \\<And>x.\n                       x \\<in> set nsa \\<Longrightarrow>\n                       v \\<notin> oldDefs g x\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>val.\n           \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        necessaryPhi g v n; g \\<turnstile> n-ns\\<rightarrow>m;\n        v \\<in> var g ` allUses g m;\n        \\<And>x.\n           x \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>length ?ns1 < length ns;\n   \\<And>val.\n      \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   necessaryPhi g v n; g \\<turnstile> n-?ns1\\<rightarrow>?m1;\n   v \\<in> var g ` allUses g ?m1;\n   \\<And>x.\n      x \\<in> set ?ns1 \\<Longrightarrow> v \\<notin> oldDefs g x\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>var g ?val1 = v; phis g (n, ?val1) \\<noteq> None\\<rbrakk>\n  \\<Longrightarrow> thesis\n  necessaryPhi g v n\n  g \\<turnstile> n-ns\\<rightarrow>m\n  v \\<in> var g ` allUses g m\n  ?x1 \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g ?x1\n\ngoal (1 subgoal):\n 1. \\<And>ns m.\n       \\<lbrakk>\\<And>nsa m.\n                   \\<lbrakk>length nsa < length ns;\n                    \\<And>val.\n                       \\<lbrakk>var g val = v;\n                        phis g (n, val) \\<noteq> None\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    necessaryPhi g v n; g \\<turnstile> n-nsa\\<rightarrow>m;\n                    v \\<in> var g ` allUses g m;\n                    \\<And>x.\n                       x \\<in> set nsa \\<Longrightarrow>\n                       v \\<notin> oldDefs g x\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>val.\n           \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        necessaryPhi g v n; g \\<turnstile> n-ns\\<rightarrow>m;\n        v \\<in> var g ` allUses g m;\n        \\<And>x.\n           x \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis", "from less.prems(4)"], ["proof (chain)\npicking this:\n  v \\<in> var g ` allUses g m", "obtain val where val: \"var g val = v\" \"val \\<in> allUses g m\""], ["proof (prove)\nusing this:\n  v \\<in> var g ` allUses g m\n\ngoal (1 subgoal):\n 1. (\\<And>val.\n        \\<lbrakk>var g val = v; val \\<in> allUses g m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  var g val = v\n  val \\<in> allUses g m\n\ngoal (1 subgoal):\n 1. \\<And>ns m.\n       \\<lbrakk>\\<And>nsa m.\n                   \\<lbrakk>length nsa < length ns;\n                    \\<And>val.\n                       \\<lbrakk>var g val = v;\n                        phis g (n, val) \\<noteq> None\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    necessaryPhi g v n; g \\<turnstile> n-nsa\\<rightarrow>m;\n                    v \\<in> var g ` allUses g m;\n                    \\<And>x.\n                       x \\<in> set nsa \\<Longrightarrow>\n                       v \\<notin> oldDefs g x\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>val.\n           \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        necessaryPhi g v n; g \\<turnstile> n-ns\\<rightarrow>m;\n        v \\<in> var g ` allUses g m;\n        \\<And>x.\n           x \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"\\<exists>m' \\<in> set (tl ns). v \\<in> var g ` phiDefs g m'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>m'\\<in>set (tl ns).\n       v \\<in> var g ` phiDefs g m' \\<Longrightarrow>\n    thesis\n 2. \\<not> (\\<exists>m'\\<in>set (tl ns).\n               v \\<in> var g ` phiDefs g m') \\<Longrightarrow>\n    thesis", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>m'\\<in>set (tl ns). v \\<in> var g ` phiDefs g m')\n\ngoal (2 subgoals):\n 1. \\<exists>m'\\<in>set (tl ns).\n       v \\<in> var g ` phiDefs g m' \\<Longrightarrow>\n    thesis\n 2. \\<not> (\\<exists>m'\\<in>set (tl ns).\n               v \\<in> var g ` phiDefs g m') \\<Longrightarrow>\n    thesis", "with less.prems(5)"], ["proof (chain)\npicking this:\n  ?x1 \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g ?x1\n  \\<not> (\\<exists>m'\\<in>set (tl ns). v \\<in> var g ` phiDefs g m')", "have \"\\<And>x. x \\<in> set (tl ns) \\<Longrightarrow> val \\<notin> allDefs g x\""], ["proof (prove)\nusing this:\n  ?x1 \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g ?x1\n  \\<not> (\\<exists>m'\\<in>set (tl ns). v \\<in> var g ` phiDefs g m')\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (tl ns) \\<Longrightarrow> val \\<notin> allDefs g x", "by (auto simp: allDefs_def val(1)[symmetric] oldDefs_def dest: in_set_tlD)"], ["proof (state)\nthis:\n  ?x1 \\<in> set (tl ns) \\<Longrightarrow> val \\<notin> allDefs g ?x1\n\ngoal (2 subgoals):\n 1. \\<exists>m'\\<in>set (tl ns).\n       v \\<in> var g ` phiDefs g m' \\<Longrightarrow>\n    thesis\n 2. \\<not> (\\<exists>m'\\<in>set (tl ns).\n               v \\<in> var g ` phiDefs g m') \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  ?x1 \\<in> set (tl ns) \\<Longrightarrow> val \\<notin> allDefs g ?x1\n\ngoal (2 subgoals):\n 1. \\<exists>m'\\<in>set (tl ns).\n       v \\<in> var g ` phiDefs g m' \\<Longrightarrow>\n    thesis\n 2. \\<not> (\\<exists>m'\\<in>set (tl ns).\n               v \\<in> var g ` phiDefs g m') \\<Longrightarrow>\n    thesis", "from less.prems(3,5)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  ?x1 \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g ?x1", "have \"val \\<notin> defs g n\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  ?x1 \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g ?x1\n\ngoal (1 subgoal):\n 1. val \\<notin> defs g n", "by (auto simp: oldDefs_def val(1)[symmetric] dest: old.path2_hd_in_ns)"], ["proof (state)\nthis:\n  val \\<notin> defs g n\n\ngoal (2 subgoals):\n 1. \\<exists>m'\\<in>set (tl ns).\n       v \\<in> var g ` phiDefs g m' \\<Longrightarrow>\n    thesis\n 2. \\<not> (\\<exists>m'\\<in>set (tl ns).\n               v \\<in> var g ` phiDefs g m') \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  ?x1 \\<in> set (tl ns) \\<Longrightarrow> val \\<notin> allDefs g ?x1\n  val \\<notin> defs g n", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x1 \\<in> set (tl ns) \\<Longrightarrow> val \\<notin> allDefs g ?x1\n  val \\<notin> defs g n\n\ngoal (1 subgoal):\n 1. thesis", "using less.prems"], ["proof (prove)\nusing this:\n  ?x1 \\<in> set (tl ns) \\<Longrightarrow> val \\<notin> allDefs g ?x1\n  val \\<notin> defs g n\n  \\<lbrakk>var g ?val1 = v; phis g (n, ?val1) \\<noteq> None\\<rbrakk>\n  \\<Longrightarrow> thesis\n  necessaryPhi g v n\n  g \\<turnstile> n-ns\\<rightarrow>m\n  v \\<in> var g ` allUses g m\n  ?x1 \\<in> set ns \\<Longrightarrow> v \\<notin> oldDefs g ?x1\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that[OF val(1)], rule convergence_prop, auto simp: val)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<exists>m'\\<in>set (tl ns).\n       v \\<in> var g ` phiDefs g m' \\<Longrightarrow>\n    thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m'\\<in>set (tl ns).\n       v \\<in> var g ` phiDefs g m' \\<Longrightarrow>\n    thesis", "case True"], ["proof (state)\nthis:\n  \\<exists>m'\\<in>set (tl ns). v \\<in> var g ` phiDefs g m'\n\ngoal (1 subgoal):\n 1. \\<exists>m'\\<in>set (tl ns).\n       v \\<in> var g ` phiDefs g m' \\<Longrightarrow>\n    thesis", "with less.prems(3)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  \\<exists>m'\\<in>set (tl ns). v \\<in> var g ` phiDefs g m'", "obtain ns' m' where m': \"g \\<turnstile> n-ns'\\<rightarrow>m'\" \"v \\<in> var g ` phiDefs g m'\" \"prefix ns' ns\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  \\<exists>m'\\<in>set (tl ns). v \\<in> var g ` phiDefs g m'\n\ngoal (1 subgoal):\n 1. (\\<And>ns' m'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>m';\n         v \\<in> var g ` phiDefs g m'; prefix ns' ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (erule old.path2_split_first_prop[where P=\"\\<lambda>m. v \\<in> var g ` phiDefs g m\"], auto dest: in_set_tlD)"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns'\\<rightarrow>m'\n  v \\<in> var g ` phiDefs g m'\n  prefix ns' ns\n\ngoal (1 subgoal):\n 1. \\<exists>m'\\<in>set (tl ns).\n       v \\<in> var g ` phiDefs g m' \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"m' = n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m' = n \\<Longrightarrow> thesis\n 2. m' \\<noteq> n \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  m' = n\n\ngoal (2 subgoals):\n 1. m' = n \\<Longrightarrow> thesis\n 2. m' \\<noteq> n \\<Longrightarrow> thesis", "with m'(2)"], ["proof (chain)\npicking this:\n  v \\<in> var g ` phiDefs g m'\n  m' = n", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> var g ` phiDefs g m'\n  m' = n\n\ngoal (1 subgoal):\n 1. thesis", "by (auto simp: phiDefs_def intro: that)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. m' \\<noteq> n \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m' \\<noteq> n \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  m' \\<noteq> n\n\ngoal (1 subgoal):\n 1. m' \\<noteq> n \\<Longrightarrow> thesis", "with m'(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns'\\<rightarrow>m'\n  m' \\<noteq> n", "obtain m'' where m'': \"g \\<turnstile> n-butlast ns'\\<rightarrow>m''\" \"m'' \\<in> set (old.predecessors g m')\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns'\\<rightarrow>m'\n  m' \\<noteq> n\n\ngoal (1 subgoal):\n 1. (\\<And>m''.\n        \\<lbrakk>g \\<turnstile> n-butlast ns'\\<rightarrow>m'';\n         m'' \\<in> set (old.predecessors g m')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_unsnoc, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> n-butlast ns'\\<rightarrow>m''\n  m'' \\<in> set (old.predecessors g m')\n\ngoal (1 subgoal):\n 1. m' \\<noteq> n \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule less.hyps[of \"butlast ns'\", OF _])"], ["proof (state)\ngoal (6 subgoals):\n 1. length (butlast ns') < length ns\n 2. \\<And>val.\n       \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. necessaryPhi g v n\n 4. g \\<turnstile> n-butlast ns'\\<rightarrow>?m1\n 5. v \\<in> var g ` allUses g ?m1\n 6. \\<And>x.\n       x \\<in> set (butlast ns') \\<Longrightarrow> v \\<notin> oldDefs g x", "show \"length (butlast ns') < length ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (butlast ns') < length ns", "using m''(1) m'(3)"], ["proof (prove)\nusing this:\n  g \\<turnstile> n-butlast ns'\\<rightarrow>m''\n  prefix ns' ns\n\ngoal (1 subgoal):\n 1. length (butlast ns') < length ns", "by (cases \"length ns'\", auto dest: prefix_length_le)"], ["proof (state)\nthis:\n  length (butlast ns') < length ns\n\ngoal (5 subgoals):\n 1. \\<And>val.\n       \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. necessaryPhi g v n\n 3. g \\<turnstile> n-butlast ns'\\<rightarrow>?m1\n 4. v \\<in> var g ` allUses g ?m1\n 5. \\<And>x.\n       x \\<in> set (butlast ns') \\<Longrightarrow> v \\<notin> oldDefs g x", "from m'(2)"], ["proof (chain)\npicking this:\n  v \\<in> var g ` phiDefs g m'", "obtain val vs where vs: \"phis g (m',val) = Some vs\" \"var g val = v\""], ["proof (prove)\nusing this:\n  v \\<in> var g ` phiDefs g m'\n\ngoal (1 subgoal):\n 1. (\\<And>val vs.\n        \\<lbrakk>phis g (m', val) = Some vs; var g val = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: phiDefs_def)"], ["proof (state)\nthis:\n  phis g (m', val) = Some vs\n  var g val = v\n\ngoal (5 subgoals):\n 1. \\<And>val.\n       \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. necessaryPhi g v n\n 3. g \\<turnstile> n-butlast ns'\\<rightarrow>?m1\n 4. v \\<in> var g ` allUses g ?m1\n 5. \\<And>x.\n       x \\<in> set (butlast ns') \\<Longrightarrow> v \\<notin> oldDefs g x", "with m''"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-butlast ns'\\<rightarrow>m''\n  m'' \\<in> set (old.predecessors g m')\n  phis g (m', val) = Some vs\n  var g val = v", "obtain val' where \"val' \\<in> phiUses g m''\" \"val' \\<in> set vs\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-butlast ns'\\<rightarrow>m''\n  m'' \\<in> set (old.predecessors g m')\n  phis g (m', val) = Some vs\n  var g val = v\n\ngoal (1 subgoal):\n 1. (\\<And>val'.\n        \\<lbrakk>val' \\<in> phiUses g m''; val' \\<in> set vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule phiUses_exI, auto simp: phiDefs_def)"], ["proof (state)\nthis:\n  val' \\<in> phiUses g m''\n  val' \\<in> set vs\n\ngoal (5 subgoals):\n 1. \\<And>val.\n       \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. necessaryPhi g v n\n 3. g \\<turnstile> n-butlast ns'\\<rightarrow>?m1\n 4. v \\<in> var g ` allUses g ?m1\n 5. \\<And>x.\n       x \\<in> set (butlast ns') \\<Longrightarrow> v \\<notin> oldDefs g x", "with vs"], ["proof (chain)\npicking this:\n  phis g (m', val) = Some vs\n  var g val = v\n  val' \\<in> phiUses g m''\n  val' \\<in> set vs", "have \"val' \\<in> allUses g m''\" \"var g val' = v\""], ["proof (prove)\nusing this:\n  phis g (m', val) = Some vs\n  var g val = v\n  val' \\<in> phiUses g m''\n  val' \\<in> set vs\n\ngoal (1 subgoal):\n 1. val' \\<in> allUses g m'' &&& var g val' = v", "by auto"], ["proof (state)\nthis:\n  val' \\<in> allUses g m''\n  var g val' = v\n\ngoal (5 subgoals):\n 1. \\<And>val.\n       \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. necessaryPhi g v n\n 3. g \\<turnstile> n-butlast ns'\\<rightarrow>?m1\n 4. v \\<in> var g ` allUses g ?m1\n 5. \\<And>x.\n       x \\<in> set (butlast ns') \\<Longrightarrow> v \\<notin> oldDefs g x", "then"], ["proof (chain)\npicking this:\n  val' \\<in> allUses g m''\n  var g val' = v", "show \"v \\<in> var g ` allUses g m''\""], ["proof (prove)\nusing this:\n  val' \\<in> allUses g m''\n  var g val' = v\n\ngoal (1 subgoal):\n 1. v \\<in> var g ` allUses g m''", "by auto"], ["proof (state)\nthis:\n  v \\<in> var g ` allUses g m''\n\ngoal (4 subgoals):\n 1. \\<And>val.\n       \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. necessaryPhi g v n\n 3. g \\<turnstile> n-butlast ns'\\<rightarrow>m''\n 4. \\<And>x.\n       x \\<in> set (butlast ns') \\<Longrightarrow> v \\<notin> oldDefs g x", "from m'(3)"], ["proof (chain)\npicking this:\n  prefix ns' ns", "show \"\\<And>x. x \\<in> set (butlast ns') \\<Longrightarrow> v \\<notin> oldDefs g x\""], ["proof (prove)\nusing this:\n  prefix ns' ns\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (butlast ns') \\<Longrightarrow> v \\<notin> oldDefs g x", "by - (rule less.prems(5), auto elim: in_set_butlastD)"], ["proof (state)\nthis:\n  ?x1 \\<in> set (butlast ns') \\<Longrightarrow> v \\<notin> oldDefs g ?x1\n\ngoal (3 subgoals):\n 1. \\<And>val.\n       \\<lbrakk>var g val = v; phis g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. necessaryPhi g v n\n 3. g \\<turnstile> n-butlast ns'\\<rightarrow>m''", "qed (auto intro: less.prems(1,2) m''(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nontrivialE:\n    assumes \"\\<not>trivial g p\" \"phi g p \\<noteq> None\" and[simp]: \"p \\<in> allVars g\"\n    obtains r s where \"phiArg g p r\" \"phiArg g p s\" \"distinct [p, r, s]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        \\<lbrakk>phiArg g p r; phiArg g p s; distinct [p, r, s]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        \\<lbrakk>phiArg g p r; phiArg g p s; distinct [p, r, s]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(2)"], ["proof (chain)\npicking this:\n  phi g p \\<noteq> None", "obtain vs where vs: \"phi g p = Some vs\""], ["proof (prove)\nusing this:\n  phi g p \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>vs. phi g p = Some vs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  phi g p = Some vs\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        \\<lbrakk>phiArg g p r; phiArg g p s; distinct [p, r, s]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"card (set vs - {p}) \\<ge> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> card (set vs - {p})", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> card (set vs - {p})", "have \"card (set vs) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set vs) \\<noteq> 0", "using Entry_no_phis[of g p] phi_wf[OF vs] vs"], ["proof (prove)\nusing this:\n  phis g (Entry g, p) = None\n  length (old.predecessors g (defNode g p)) = length vs\n  phi g p = Some vs\n\ngoal (1 subgoal):\n 1. card (set vs) \\<noteq> 0", "by (auto simp:phi_def invar)"], ["proof (state)\nthis:\n  card (set vs) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (set vs - {p})", "moreover"], ["proof (state)\nthis:\n  card (set vs) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (set vs - {p})", "have \"set vs \\<noteq> {p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set vs \\<noteq> {p}", "using vs"], ["proof (prove)\nusing this:\n  phi g p = Some vs\n\ngoal (1 subgoal):\n 1. set vs \\<noteq> {p}", "by - (rule phi_no_closed_loop, auto)"], ["proof (state)\nthis:\n  set vs \\<noteq> {p}\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (set vs - {p})", "ultimately"], ["proof (chain)\npicking this:\n  card (set vs) \\<noteq> 0\n  set vs \\<noteq> {p}", "have \"card (set vs - {p}) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  card (set vs) \\<noteq> 0\n  set vs \\<noteq> {p}\n\ngoal (1 subgoal):\n 1. card (set vs - {p}) \\<noteq> 0", "by (metis List.finite_set card_0_eq insert_Diff_single insert_absorb removeAll_id set_removeAll)"], ["proof (state)\nthis:\n  card (set vs - {p}) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (set vs - {p})", "moreover"], ["proof (state)\nthis:\n  card (set vs - {p}) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (set vs - {p})", "have \"card (set vs - {p}) \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set vs - {p}) \\<noteq> 1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. card (set vs - {p}) = 1 \\<Longrightarrow> False", "assume \"card (set vs - {p}) = 1\""], ["proof (state)\nthis:\n  card (set vs - {p}) = 1\n\ngoal (1 subgoal):\n 1. card (set vs - {p}) = 1 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  card (set vs - {p}) = 1", "obtain q where q: \"{q} = set vs - {p}\""], ["proof (prove)\nusing this:\n  card (set vs - {p}) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>q. {q} = set vs - {p} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (erule card_eq_1_singleton, auto)"], ["proof (state)\nthis:\n  {q} = set vs - {p}\n\ngoal (1 subgoal):\n 1. card (set vs - {p}) = 1 \\<Longrightarrow> False", "hence \"isTrivialPhi g p q\""], ["proof (prove)\nusing this:\n  {q} = set vs - {p}\n\ngoal (1 subgoal):\n 1. isTrivialPhi g p q", "using vs"], ["proof (prove)\nusing this:\n  {q} = set vs - {p}\n  phi g p = Some vs\n\ngoal (1 subgoal):\n 1. isTrivialPhi g p q", "by (auto simp:isTrivialPhi_def split:option.split)"], ["proof (state)\nthis:\n  isTrivialPhi g p q\n\ngoal (1 subgoal):\n 1. card (set vs - {p}) = 1 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  isTrivialPhi g p q\n\ngoal (1 subgoal):\n 1. card (set vs - {p}) = 1 \\<Longrightarrow> False", "have \"phiArg g p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phiArg g p q", "using q vs"], ["proof (prove)\nusing this:\n  {q} = set vs - {p}\n  phi g p = Some vs\n\ngoal (1 subgoal):\n 1. phiArg g p q", "unfolding phiArg_def"], ["proof (prove)\nusing this:\n  {q} = set vs - {p}\n  phi g p = Some vs\n\ngoal (1 subgoal):\n 1. \\<exists>vs. phi g p = Some vs \\<and> q \\<in> set vs", "by auto"], ["proof (state)\nthis:\n  phiArg g p q\n\ngoal (1 subgoal):\n 1. card (set vs - {p}) = 1 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  isTrivialPhi g p q\n  phiArg g p q", "show False"], ["proof (prove)\nusing this:\n  isTrivialPhi g p q\n  phiArg g p q\n\ngoal (1 subgoal):\n 1. False", "using assms(1)"], ["proof (prove)\nusing this:\n  isTrivialPhi g p q\n  phiArg g p q\n  \\<not> trivial g p\n\ngoal (1 subgoal):\n 1. False", "by (auto simp:trivial_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (set vs - {p}) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (set vs - {p})", "ultimately"], ["proof (chain)\npicking this:\n  card (set vs - {p}) \\<noteq> 0\n  card (set vs - {p}) \\<noteq> 1", "show ?thesis"], ["proof (prove)\nusing this:\n  card (set vs - {p}) \\<noteq> 0\n  card (set vs - {p}) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (set vs - {p})", "by arith"], ["proof (state)\nthis:\n  2 \\<le> card (set vs - {p})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 \\<le> card (set vs - {p})\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        \\<lbrakk>phiArg g p r; phiArg g p s; distinct [p, r, s]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  2 \\<le> card (set vs - {p})", "obtain r s where rs: \"r \\<noteq> s\" \"r \\<in> set vs - {p}\" \"s \\<in> set vs - {p}\""], ["proof (prove)\nusing this:\n  2 \\<le> card (set vs - {p})\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        \\<lbrakk>r \\<noteq> s; r \\<in> set vs - {p};\n         s \\<in> set vs - {p}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule set_take_two)"], ["proof (state)\nthis:\n  r \\<noteq> s\n  r \\<in> set vs - {p}\n  s \\<in> set vs - {p}\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        \\<lbrakk>phiArg g p r; phiArg g p s; distinct [p, r, s]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  r \\<noteq> s\n  r \\<in> set vs - {p}\n  s \\<in> set vs - {p}\n\ngoal (1 subgoal):\n 1. thesis", "using vs"], ["proof (prove)\nusing this:\n  r \\<noteq> s\n  r \\<in> set vs - {p}\n  s \\<in> set vs - {p}\n  phi g p = Some vs\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that[of r s], auto simp: phiArg_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma paths_converge_prefix:\n    assumes \"g \\<turnstile> x-xs\\<rightarrow>z\" \"g \\<turnstile> y-ys\\<rightarrow>z\" \"x \\<noteq> y\" \"length xs > 1\" \"length ys > 1\" \"x \\<notin> set (butlast ys)\" \"y \\<notin> set (butlast xs)\"\n    obtains xs' ys' z' where \"old.pathsConverge g x xs' y ys' z'\" \"prefix xs' xs\" \"prefix ys' ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs' ys' z'.\n        \\<lbrakk>old.pathsConverge g x xs' y ys' z'; prefix xs' xs;\n         prefix ys' ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  g \\<turnstile> x-xs\\<rightarrow>z\n  g \\<turnstile> y-ys\\<rightarrow>z\n  x \\<noteq> y\n  1 < length xs\n  1 < length ys\n  x \\<notin> set (butlast ys)\n  y \\<notin> set (butlast xs)\n\ngoal (1 subgoal):\n 1. (\\<And>xs' ys' z'.\n        \\<lbrakk>old.pathsConverge g x xs' y ys' z'; prefix xs' xs;\n         prefix ys' ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction \"length xs\" arbitrary:xs ys z rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys z.\n       \\<lbrakk>\\<forall>m<length xs.\n                   \\<forall>xa.\n                      m = length xa \\<longrightarrow>\n                      (\\<forall>xb.\n                          (\\<forall>xc xd xe.\n                              old.pathsConverge g x xc y xd\n                               xe \\<longrightarrow>\n                              prefix xc xa \\<longrightarrow>\n                              prefix xd xb \\<longrightarrow>\n                              thesis) \\<longrightarrow>\n                          (\\<forall>xc.\n                              g \\<turnstile> x-xa\\<rightarrow>xc \\<longrightarrow>\n                              g \\<turnstile> y-xb\\<rightarrow>xc \\<longrightarrow>\n                              x \\<noteq> y \\<longrightarrow>\n                              1 < length xa \\<longrightarrow>\n                              1 < length xb \\<longrightarrow>\n                              x \\<notin> set (butlast xb) \\<longrightarrow>\n                              y \\<notin> set (butlast xa) \\<longrightarrow>\n                              thesis));\n        \\<And>xs' ys' z'.\n           \\<lbrakk>old.pathsConverge g x xs' y ys' z'; prefix xs' xs;\n            prefix ys' ys\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        g \\<turnstile> x-xs\\<rightarrow>z;\n        g \\<turnstile> y-ys\\<rightarrow>z; x \\<noteq> y; 1 < length xs;\n        1 < length ys; x \\<notin> set (butlast ys);\n        y \\<notin> set (butlast xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case 1"], ["proof (state)\nthis:\n  \\<forall>m<length xs.\n     \\<forall>xa.\n        m = length xa \\<longrightarrow>\n        (\\<forall>xb.\n            (\\<forall>xc xd xe.\n                old.pathsConverge g x xc y xd xe \\<longrightarrow>\n                prefix xc xa \\<longrightarrow>\n                prefix xd xb \\<longrightarrow> thesis) \\<longrightarrow>\n            (\\<forall>xc.\n                g \\<turnstile> x-xa\\<rightarrow>xc \\<longrightarrow>\n                g \\<turnstile> y-xb\\<rightarrow>xc \\<longrightarrow>\n                x \\<noteq> y \\<longrightarrow>\n                1 < length xa \\<longrightarrow>\n                1 < length xb \\<longrightarrow>\n                x \\<notin> set (butlast xb) \\<longrightarrow>\n                y \\<notin> set (butlast xa) \\<longrightarrow> thesis))\n  \\<lbrakk>old.pathsConverge g x ?xs'1 y ?ys'1 ?z'1; prefix ?xs'1 xs;\n   prefix ?ys'1 ys\\<rbrakk>\n  \\<Longrightarrow> thesis\n  g \\<turnstile> x-xs\\<rightarrow>z\n  g \\<turnstile> y-ys\\<rightarrow>z\n  x \\<noteq> y\n  1 < length xs\n  1 < length ys\n  x \\<notin> set (butlast ys)\n  y \\<notin> set (butlast xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs ys z.\n       \\<lbrakk>\\<forall>m<length xs.\n                   \\<forall>xa.\n                      m = length xa \\<longrightarrow>\n                      (\\<forall>xb.\n                          (\\<forall>xc xd xe.\n                              old.pathsConverge g x xc y xd\n                               xe \\<longrightarrow>\n                              prefix xc xa \\<longrightarrow>\n                              prefix xd xb \\<longrightarrow>\n                              thesis) \\<longrightarrow>\n                          (\\<forall>xc.\n                              g \\<turnstile> x-xa\\<rightarrow>xc \\<longrightarrow>\n                              g \\<turnstile> y-xb\\<rightarrow>xc \\<longrightarrow>\n                              x \\<noteq> y \\<longrightarrow>\n                              1 < length xa \\<longrightarrow>\n                              1 < length xb \\<longrightarrow>\n                              x \\<notin> set (butlast xb) \\<longrightarrow>\n                              y \\<notin> set (butlast xa) \\<longrightarrow>\n                              thesis));\n        \\<And>xs' ys' z'.\n           \\<lbrakk>old.pathsConverge g x xs' y ys' z'; prefix xs' xs;\n            prefix ys' ys\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        g \\<turnstile> x-xs\\<rightarrow>z;\n        g \\<turnstile> y-ys\\<rightarrow>z; x \\<noteq> y; 1 < length xs;\n        1 < length ys; x \\<notin> set (butlast ys);\n        y \\<notin> set (butlast xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \"1.prems\"(3,4)"], ["proof (chain)\npicking this:\n  g \\<turnstile> y-ys\\<rightarrow>z\n  x \\<noteq> y", "have 2: \"x \\<noteq> y\""], ["proof (prove)\nusing this:\n  g \\<turnstile> y-ys\\<rightarrow>z\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "by (auto simp:old.path2_def)"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<And>xs ys z.\n       \\<lbrakk>\\<forall>m<length xs.\n                   \\<forall>xa.\n                      m = length xa \\<longrightarrow>\n                      (\\<forall>xb.\n                          (\\<forall>xc xd xe.\n                              old.pathsConverge g x xc y xd\n                               xe \\<longrightarrow>\n                              prefix xc xa \\<longrightarrow>\n                              prefix xd xb \\<longrightarrow>\n                              thesis) \\<longrightarrow>\n                          (\\<forall>xc.\n                              g \\<turnstile> x-xa\\<rightarrow>xc \\<longrightarrow>\n                              g \\<turnstile> y-xb\\<rightarrow>xc \\<longrightarrow>\n                              x \\<noteq> y \\<longrightarrow>\n                              1 < length xa \\<longrightarrow>\n                              1 < length xb \\<longrightarrow>\n                              x \\<notin> set (butlast xb) \\<longrightarrow>\n                              y \\<notin> set (butlast xa) \\<longrightarrow>\n                              thesis));\n        \\<And>xs' ys' z'.\n           \\<lbrakk>old.pathsConverge g x xs' y ys' z'; prefix xs' xs;\n            prefix ys' ys\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        g \\<turnstile> x-xs\\<rightarrow>z;\n        g \\<turnstile> y-ys\\<rightarrow>z; x \\<noteq> y; 1 < length xs;\n        1 < length ys; x \\<notin> set (butlast ys);\n        y \\<notin> set (butlast xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"set (butlast xs) \\<inter> set (butlast ys) = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. set (butlast xs) \\<inter> set (butlast ys) = {} \\<Longrightarrow> thesis\n 2. set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {} \\<Longrightarrow>\n    thesis", "case True"], ["proof (state)\nthis:\n  set (butlast xs) \\<inter> set (butlast ys) = {}\n\ngoal (2 subgoals):\n 1. set (butlast xs) \\<inter> set (butlast ys) = {} \\<Longrightarrow> thesis\n 2. set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {} \\<Longrightarrow>\n    thesis", "with \"1.prems\"(2-)"], ["proof (chain)\npicking this:\n  g \\<turnstile> x-xs\\<rightarrow>z\n  g \\<turnstile> y-ys\\<rightarrow>z\n  x \\<noteq> y\n  1 < length xs\n  1 < length ys\n  x \\<notin> set (butlast ys)\n  y \\<notin> set (butlast xs)\n  set (butlast xs) \\<inter> set (butlast ys) = {}", "have \"old.pathsConverge g x xs y ys z\""], ["proof (prove)\nusing this:\n  g \\<turnstile> x-xs\\<rightarrow>z\n  g \\<turnstile> y-ys\\<rightarrow>z\n  x \\<noteq> y\n  1 < length xs\n  1 < length ys\n  x \\<notin> set (butlast ys)\n  y \\<notin> set (butlast xs)\n  set (butlast xs) \\<inter> set (butlast ys) = {}\n\ngoal (1 subgoal):\n 1. old.pathsConverge g x xs y ys z", "by (auto simp add: old.pathsConverge'_def)"], ["proof (state)\nthis:\n  old.pathsConverge g x xs y ys z\n\ngoal (2 subgoals):\n 1. set (butlast xs) \\<inter> set (butlast ys) = {} \\<Longrightarrow> thesis\n 2. set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {} \\<Longrightarrow>\n    thesis", "thus thesis"], ["proof (prove)\nusing this:\n  old.pathsConverge g x xs y ys z\n\ngoal (1 subgoal):\n 1. thesis", "by (rule \"1.prems\"(1), simp_all)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {} \\<Longrightarrow>\n    thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {} \\<Longrightarrow>\n    thesis", "case False"], ["proof (state)\nthis:\n  set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {} \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {}", "obtain xs' z' where xs': \"g \\<turnstile> x-xs'\\<rightarrow>z'\" \"prefix xs' (butlast xs)\" \"z' \\<in> set (butlast ys)\" \"\\<forall>a \\<in> set (butlast xs'). a \\<notin> set (butlast ys)\""], ["proof (prove)\nusing this:\n  set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>xs' z'.\n        \\<lbrakk>g \\<turnstile> x-xs'\\<rightarrow>z';\n         prefix xs' (butlast xs); z' \\<in> set (butlast ys);\n         \\<forall>a\\<in>set (butlast xs').\n            a \\<notin> set (butlast ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \"1.prems\"(2,5)"], ["proof (prove)\nusing this:\n  set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {}\n  g \\<turnstile> x-xs\\<rightarrow>z\n  1 < length xs\n\ngoal (1 subgoal):\n 1. (\\<And>xs' z'.\n        \\<lbrakk>g \\<turnstile> x-xs'\\<rightarrow>z';\n         prefix xs' (butlast xs); z' \\<in> set (butlast ys);\n         \\<forall>a\\<in>set (butlast xs').\n            a \\<notin> set (butlast ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_first_prop[of g x \"butlast xs\" _ \"\\<lambda>a. a \\<in> set (butlast ys)\"], auto elim: old.path2_unsnoc)"], ["proof (state)\nthis:\n  g \\<turnstile> x-xs'\\<rightarrow>z'\n  prefix xs' (butlast xs)\n  z' \\<in> set (butlast ys)\n  \\<forall>a\\<in>set (butlast xs'). a \\<notin> set (butlast ys)\n\ngoal (1 subgoal):\n 1. set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {} \\<Longrightarrow>\n    thesis", "from xs'(3) \"1.prems\"(3)"], ["proof (chain)\npicking this:\n  z' \\<in> set (butlast ys)\n  g \\<turnstile> y-ys\\<rightarrow>z", "obtain ys' where ys': \"g \\<turnstile> y-ys'\\<rightarrow>z'\" \"strict_prefix ys' ys\""], ["proof (prove)\nusing this:\n  z' \\<in> set (butlast ys)\n  g \\<turnstile> y-ys\\<rightarrow>z\n\ngoal (1 subgoal):\n 1. (\\<And>ys'.\n        \\<lbrakk>g \\<turnstile> y-ys'\\<rightarrow>z';\n         strict_prefix ys' ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_strict_prefix_ex)"], ["proof (state)\nthis:\n  g \\<turnstile> y-ys'\\<rightarrow>z'\n  strict_prefix ys' ys\n\ngoal (1 subgoal):\n 1. set (butlast xs) \\<inter> set (butlast ys) \\<noteq> {} \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule \"1.hyps\"[rule_format, OF _ _ _ xs'(1) ys'(1) assms(3)])"], ["proof (state)\ngoal (7 subgoals):\n 1. ?m < length xs\n 2. ?m = length xs'\n 3. \\<And>xa xaa xb.\n       \\<lbrakk>old.pathsConverge g x xa y xaa xb; prefix xa xs';\n        prefix xaa ys'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. 1 < length xs'\n 5. 1 < length ys'\n 6. x \\<notin> set (butlast ys')\n 7. y \\<notin> set (butlast xs')", "show \"length xs' < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs' < length xs", "using xs'(2) xs'(1)"], ["proof (prove)\nusing this:\n  prefix xs' (butlast xs)\n  g \\<turnstile> x-xs'\\<rightarrow>z'\n\ngoal (1 subgoal):\n 1. length xs' < length xs", "by - (rule prefix_length_less, rule strict_prefix_butlast, auto)"], ["proof (state)\nthis:\n  length xs' < length xs\n\ngoal (6 subgoals):\n 1. length xs' = length xs'\n 2. \\<And>xa xaa xb.\n       \\<lbrakk>old.pathsConverge g x xa y xaa xb; prefix xa xs';\n        prefix xaa ys'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. 1 < length xs'\n 4. 1 < length ys'\n 5. x \\<notin> set (butlast ys')\n 6. y \\<notin> set (butlast xs')", "from \"1.prems\"(1) prefix_order.dual_order.strict_implies_order prefix_order.dual_order.trans\n          prefix_butlastD xs'(2) ys'(2)"], ["proof (chain)\npicking this:\n  \\<lbrakk>old.pathsConverge g x ?xs'1 y ?ys'1 ?z'1; prefix ?xs'1 xs;\n   prefix ?ys'1 ys\\<rbrakk>\n  \\<Longrightarrow> thesis\n  strict_prefix ?b ?a \\<Longrightarrow> prefix ?b ?a\n  \\<lbrakk>prefix ?b ?a; prefix ?c ?b\\<rbrakk>\n  \\<Longrightarrow> prefix ?c ?a\n  prefix ?xs (butlast ?ys) \\<Longrightarrow> prefix ?xs ?ys\n  prefix xs' (butlast xs)\n  strict_prefix ys' ys", "show \"\\<And>xs'' ys'' z''. old.pathsConverge g x xs'' y ys'' z'' \\<Longrightarrow> prefix xs'' xs' \\<Longrightarrow> prefix ys'' ys' \\<Longrightarrow> thesis\""], ["proof (prove)\nusing this:\n  \\<lbrakk>old.pathsConverge g x ?xs'1 y ?ys'1 ?z'1; prefix ?xs'1 xs;\n   prefix ?ys'1 ys\\<rbrakk>\n  \\<Longrightarrow> thesis\n  strict_prefix ?b ?a \\<Longrightarrow> prefix ?b ?a\n  \\<lbrakk>prefix ?b ?a; prefix ?c ?b\\<rbrakk>\n  \\<Longrightarrow> prefix ?c ?a\n  prefix ?xs (butlast ?ys) \\<Longrightarrow> prefix ?xs ?ys\n  prefix xs' (butlast xs)\n  strict_prefix ys' ys\n\ngoal (1 subgoal):\n 1. \\<And>xs'' ys'' z''.\n       \\<lbrakk>old.pathsConverge g x xs'' y ys'' z''; prefix xs'' xs';\n        prefix ys'' ys'\\<rbrakk>\n       \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>old.pathsConverge g x ?xs''1 y ?ys''1 ?z''1; prefix ?xs''1 xs';\n   prefix ?ys''1 ys'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (5 subgoals):\n 1. length xs' = length xs'\n 2. 1 < length xs'\n 3. 1 < length ys'\n 4. x \\<notin> set (butlast ys')\n 5. y \\<notin> set (butlast xs')", "show \"length xs' > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length xs'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < length xs'", "have \"length xs' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs' \\<noteq> 0", "using xs'"], ["proof (prove)\nusing this:\n  g \\<turnstile> x-xs'\\<rightarrow>z'\n  prefix xs' (butlast xs)\n  z' \\<in> set (butlast ys)\n  \\<forall>a\\<in>set (butlast xs'). a \\<notin> set (butlast ys)\n\ngoal (1 subgoal):\n 1. length xs' \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  length xs' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < length xs'", "moreover"], ["proof (state)\nthis:\n  length xs' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < length xs'", "{"], ["proof (state)\nthis:\n  length xs' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < length xs'", "assume \"length xs' = 1\""], ["proof (state)\nthis:\n  length xs' = 1\n\ngoal (1 subgoal):\n 1. 1 < length xs'", "with xs'(1,3)"], ["proof (chain)\npicking this:\n  g \\<turnstile> x-xs'\\<rightarrow>z'\n  z' \\<in> set (butlast ys)\n  length xs' = 1", "have \"x \\<in> set (butlast ys)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> x-xs'\\<rightarrow>z'\n  z' \\<in> set (butlast ys)\n  length xs' = 1\n\ngoal (1 subgoal):\n 1. x \\<in> set (butlast ys)", "by (auto simp:old.path2_def simp del:One_nat_def dest!:singleton_list_hd_last)"], ["proof (state)\nthis:\n  x \\<in> set (butlast ys)\n\ngoal (1 subgoal):\n 1. 1 < length xs'", "with \"1.prems\"(7)"], ["proof (chain)\npicking this:\n  x \\<notin> set (butlast ys)\n  x \\<in> set (butlast ys)", "have False"], ["proof (prove)\nusing this:\n  x \\<notin> set (butlast ys)\n  x \\<in> set (butlast ys)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. 1 < length xs'", "}"], ["proof (state)\nthis:\n  length xs' = 1 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. 1 < length xs'", "ultimately"], ["proof (chain)\npicking this:\n  length xs' \\<noteq> 0\n  length xs' = 1 \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  length xs' \\<noteq> 0\n  length xs' = 1 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. 1 < length xs'", "by arith"], ["proof (state)\nthis:\n  1 < length xs'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < length xs'\n\ngoal (4 subgoals):\n 1. length xs' = length xs'\n 2. 1 < length ys'\n 3. x \\<notin> set (butlast ys')\n 4. y \\<notin> set (butlast xs')", "show \"length ys' > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length ys'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < length ys'", "have \"length ys' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys' \\<noteq> 0", "using ys'"], ["proof (prove)\nusing this:\n  g \\<turnstile> y-ys'\\<rightarrow>z'\n  strict_prefix ys' ys\n\ngoal (1 subgoal):\n 1. length ys' \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  length ys' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < length ys'", "moreover"], ["proof (state)\nthis:\n  length ys' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < length ys'", "{"], ["proof (state)\nthis:\n  length ys' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < length ys'", "assume \"length ys' = 1\""], ["proof (state)\nthis:\n  length ys' = 1\n\ngoal (1 subgoal):\n 1. 1 < length ys'", "with ys'(1) xs'(1,2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> y-ys'\\<rightarrow>z'\n  g \\<turnstile> x-xs'\\<rightarrow>z'\n  prefix xs' (butlast xs)\n  length ys' = 1", "have \"y \\<in> set (butlast xs)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> y-ys'\\<rightarrow>z'\n  g \\<turnstile> x-xs'\\<rightarrow>z'\n  prefix xs' (butlast xs)\n  length ys' = 1\n\ngoal (1 subgoal):\n 1. y \\<in> set (butlast xs)", "by (auto simp:old.path2_def old.path_not_Nil simp del:One_nat_def dest!:singleton_list_hd_last)"], ["proof (state)\nthis:\n  y \\<in> set (butlast xs)\n\ngoal (1 subgoal):\n 1. 1 < length ys'", "with \"1.prems\"(8)"], ["proof (chain)\npicking this:\n  y \\<notin> set (butlast xs)\n  y \\<in> set (butlast xs)", "have False"], ["proof (prove)\nusing this:\n  y \\<notin> set (butlast xs)\n  y \\<in> set (butlast xs)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. 1 < length ys'", "}"], ["proof (state)\nthis:\n  length ys' = 1 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. 1 < length ys'", "ultimately"], ["proof (chain)\npicking this:\n  length ys' \\<noteq> 0\n  length ys' = 1 \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  length ys' \\<noteq> 0\n  length ys' = 1 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. 1 < length ys'", "by arith"], ["proof (state)\nthis:\n  1 < length ys'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < length ys'\n\ngoal (3 subgoals):\n 1. length xs' = length xs'\n 2. x \\<notin> set (butlast ys')\n 3. y \\<notin> set (butlast xs')", "show \"y \\<notin> set (butlast xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> set (butlast xs')", "using  xs'(2) \"1.prems\"(8)"], ["proof (prove)\nusing this:\n  prefix xs' (butlast xs)\n  y \\<notin> set (butlast xs)\n\ngoal (1 subgoal):\n 1. y \\<notin> set (butlast xs')", "by (metis in_prefix in_set_butlastD)"], ["proof (state)\nthis:\n  y \\<notin> set (butlast xs')\n\ngoal (2 subgoals):\n 1. length xs' = length xs'\n 2. x \\<notin> set (butlast ys')", "show \"x \\<notin> set (butlast ys')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set (butlast ys')", "by (metis \"1.prems\"(7) in_set_butlast_appendI strict_prefixE' ys'(2))"], ["proof (state)\nthis:\n  x \\<notin> set (butlast ys')\n\ngoal (1 subgoal):\n 1. length xs' = length xs'", "qed simp"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ununnecessaryPhis_disjoint_paths_aux:\n    assumes \"\\<not>unnecessaryPhi g r\" and[simp]: \"r \\<in> allVars g\"\n    obtains n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2 where\n      \"var g r \\<in> oldDefs g n\\<^sub>1\" \"g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\" and\n      \"var g r \\<in> oldDefs g n\\<^sub>2\" \"g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\" and\n      \"set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n        \\<lbrakk>var g r \\<in> oldDefs g n\\<^sub>1;\n         g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r;\n         var g r \\<in> oldDefs g n\\<^sub>2;\n         g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r;\n         set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) =\n         {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (cases \"phi g r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n                \\<lbrakk>var g r \\<in> oldDefs g n\\<^sub>1;\n                 g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g\n                            r;\n                 var g r \\<in> oldDefs g n\\<^sub>2;\n                 g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g\n                            r;\n                 set (butlast ns\\<^sub>1) \\<inter>\n                 set (butlast ns\\<^sub>2) =\n                 {}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     phi g r = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n                   \\<lbrakk>var g r \\<in> oldDefs g n\\<^sub>1;\n                    g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode\n                               g r;\n                    var g r \\<in> oldDefs g n\\<^sub>2;\n                    g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode\n                               g r;\n                    set (butlast ns\\<^sub>1) \\<inter>\n                    set (butlast ns\\<^sub>2) =\n                    {}\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g r = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "case None"], ["proof (state)\nthis:\n  phi g r = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n                \\<lbrakk>var g r \\<in> oldDefs g n\\<^sub>1;\n                 g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g\n                            r;\n                 var g r \\<in> oldDefs g n\\<^sub>2;\n                 g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g\n                            r;\n                 set (butlast ns\\<^sub>1) \\<inter>\n                 set (butlast ns\\<^sub>2) =\n                 {}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     phi g r = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n                   \\<lbrakk>var g r \\<in> oldDefs g n\\<^sub>1;\n                    g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode\n                               g r;\n                    var g r \\<in> oldDefs g n\\<^sub>2;\n                    g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode\n                               g r;\n                    set (butlast ns\\<^sub>1) \\<inter>\n                    set (butlast ns\\<^sub>2) =\n                    {}\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g r = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus thesis"], ["proof (prove)\nusing this:\n  phi g r = None\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that[of \"defNode g r\" _ \"defNode g r\"], auto intro!: oldDefsI intro: defNode_cases[of r g])"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n                   \\<lbrakk>var g r \\<in> oldDefs g n\\<^sub>1;\n                    g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode\n                               g r;\n                    var g r \\<in> oldDefs g n\\<^sub>2;\n                    g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode\n                               g r;\n                    set (butlast ns\\<^sub>1) \\<inter>\n                    set (butlast ns\\<^sub>2) =\n                    {}\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g r = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n                   \\<lbrakk>var g r \\<in> oldDefs g n\\<^sub>1;\n                    g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode\n                               g r;\n                    var g r \\<in> oldDefs g n\\<^sub>2;\n                    g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode\n                               g r;\n                    set (butlast ns\\<^sub>1) \\<inter>\n                    set (butlast ns\\<^sub>2) =\n                    {}\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g r = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Some"], ["proof (state)\nthis:\n  phi g r = Some a_\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n                   \\<lbrakk>var g r \\<in> oldDefs g n\\<^sub>1;\n                    g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode\n                               g r;\n                    var g r \\<in> oldDefs g n\\<^sub>2;\n                    g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode\n                               g r;\n                    set (butlast ns\\<^sub>1) \\<inter>\n                    set (butlast ns\\<^sub>2) =\n                    {}\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g r = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "with assms that"], ["proof (chain)\npicking this:\n  \\<not> unnecessaryPhi g r\n  r \\<in> allVars g\n  \\<lbrakk>var g r \\<in> oldDefs g ?n\\<^sub>11;\n   g \\<turnstile> ?n\\<^sub>11-?ns\\<^sub>11\\<rightarrow>defNode g r;\n   var g r \\<in> oldDefs g ?n\\<^sub>21;\n   g \\<turnstile> ?n\\<^sub>21-?ns\\<^sub>21\\<rightarrow>defNode g r;\n   set (butlast ?ns\\<^sub>11) \\<inter> set (butlast ?ns\\<^sub>21) =\n   {}\\<rbrakk>\n  \\<Longrightarrow> thesis\n  phi g r = Some a_", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> unnecessaryPhi g r\n  r \\<in> allVars g\n  \\<lbrakk>var g r \\<in> oldDefs g ?n\\<^sub>11;\n   g \\<turnstile> ?n\\<^sub>11-?ns\\<^sub>11\\<rightarrow>defNode g r;\n   var g r \\<in> oldDefs g ?n\\<^sub>21;\n   g \\<turnstile> ?n\\<^sub>21-?ns\\<^sub>21\\<rightarrow>defNode g r;\n   set (butlast ?ns\\<^sub>11) \\<inter> set (butlast ?ns\\<^sub>21) =\n   {}\\<rbrakk>\n  \\<Longrightarrow> thesis\n  phi g r = Some a_\n\ngoal (1 subgoal):\n 1. thesis", "by (auto simp: unnecessaryPhi_def necessaryPhi_def old.pathsConverge'_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ununnecessaryPhis_disjoint_paths:\n    assumes \"\\<not>unnecessaryPhi g r\" \"\\<not>unnecessaryPhi g s\"\n      (* and rs: \"phiArg p r\" \"phiArg p s\" \"distinct [p, r, s]\" *)\n      and rs: \"defNode g r \\<noteq> defNode g s\"\n      and[simp]: \"r \\<in> allVars g\" \"s \\<in> allVars g\" \"var g r = V\" \"var g s = V\"\n    obtains n ns m ms where \"V \\<in> oldDefs g n\" \"g \\<turnstile> n-ns\\<rightarrow>defNode g r\" and \"V \\<in> oldDefs g m\" \"g \\<turnstile> m-ms\\<rightarrow>defNode g s\"\n        and \"set ns \\<inter> set ms = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>V \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r; V \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>V \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r; V \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2 where\n      ns\\<^sub>1: \"V \\<in> oldDefs g n\\<^sub>1\" \"g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\" \"defNode g r \\<notin> set (butlast ns\\<^sub>1)\" and\n      ns\\<^sub>2: \"V \\<in> oldDefs g n\\<^sub>2\" \"g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\" \"defNode g r \\<notin> set (butlast ns\\<^sub>2)\" and\n      ns: \"set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n        \\<lbrakk>V \\<in> oldDefs g n\\<^sub>1;\n         g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>1);\n         V \\<in> oldDefs g n\\<^sub>2;\n         g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>2);\n         set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) =\n         {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n        \\<lbrakk>V \\<in> oldDefs g n\\<^sub>1;\n         g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>1);\n         V \\<in> oldDefs g n\\<^sub>2;\n         g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>2);\n         set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) =\n         {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  \\<not> unnecessaryPhi g r\n  \\<not> unnecessaryPhi g s\n  defNode g r \\<noteq> defNode g s\n  r \\<in> allVars g\n  s \\<in> allVars g\n  var g r = V\n  var g s = V", "obtain n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2 where\n        ns\\<^sub>1: \"V \\<in> oldDefs g n\\<^sub>1\" \"g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\" and\n        ns\\<^sub>2: \"V \\<in> oldDefs g n\\<^sub>2\" \"g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\" and\n        ns: \"set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\""], ["proof (prove)\nusing this:\n  \\<not> unnecessaryPhi g r\n  \\<not> unnecessaryPhi g s\n  defNode g r \\<noteq> defNode g s\n  r \\<in> allVars g\n  s \\<in> allVars g\n  var g r = V\n  var g s = V\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n        \\<lbrakk>V \\<in> oldDefs g n\\<^sub>1;\n         g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r;\n         V \\<in> oldDefs g n\\<^sub>2;\n         g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r;\n         set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) =\n         {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule ununnecessaryPhis_disjoint_paths_aux, auto)"], ["proof (state)\nthis:\n  V \\<in> oldDefs g n\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  V \\<in> oldDefs g n\\<^sub>2\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\n  set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n        \\<lbrakk>V \\<in> oldDefs g n\\<^sub>1;\n         g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>1);\n         V \\<in> oldDefs g n\\<^sub>2;\n         g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>2);\n         set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) =\n         {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from ns\\<^sub>1"], ["proof (chain)\npicking this:\n  V \\<in> oldDefs g n\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r", "obtain ns\\<^sub>1' where ns\\<^sub>1': \"g \\<turnstile> n\\<^sub>1-ns\\<^sub>1'\\<rightarrow>defNode g r\" \"defNode g r \\<notin> set (butlast ns\\<^sub>1')\" \"distinct ns\\<^sub>1'\" \"set ns\\<^sub>1' \\<subseteq> set ns\\<^sub>1\""], ["proof (prove)\nusing this:\n  V \\<in> oldDefs g n\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1'.\n        \\<lbrakk>g \\<turnstile> n\\<^sub>1-ns\\<^sub>1'\\<rightarrow>defNode g\n                             r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>1');\n         distinct ns\\<^sub>1';\n         set ns\\<^sub>1' \\<subseteq> set ns\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1'\\<rightarrow>defNode g r\n  defNode g r \\<notin> set (butlast ns\\<^sub>1')\n  distinct ns\\<^sub>1'\n  set ns\\<^sub>1' \\<subseteq> set ns\\<^sub>1\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n        \\<lbrakk>V \\<in> oldDefs g n\\<^sub>1;\n         g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>1);\n         V \\<in> oldDefs g n\\<^sub>2;\n         g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>2);\n         set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) =\n         {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from ns\\<^sub>2"], ["proof (chain)\npicking this:\n  V \\<in> oldDefs g n\\<^sub>2\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r", "obtain ns\\<^sub>2' where ns\\<^sub>2': \"g \\<turnstile> n\\<^sub>2-ns\\<^sub>2'\\<rightarrow>defNode g r\" \"defNode g r \\<notin> set (butlast ns\\<^sub>2')\" \"distinct ns\\<^sub>2'\" \"set ns\\<^sub>2' \\<subseteq> set ns\\<^sub>2\""], ["proof (prove)\nusing this:\n  V \\<in> oldDefs g n\\<^sub>2\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>2'.\n        \\<lbrakk>g \\<turnstile> n\\<^sub>2-ns\\<^sub>2'\\<rightarrow>defNode g\n                             r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>2');\n         distinct ns\\<^sub>2';\n         set ns\\<^sub>2' \\<subseteq> set ns\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>2'\\<rightarrow>defNode g r\n  defNode g r \\<notin> set (butlast ns\\<^sub>2')\n  distinct ns\\<^sub>2'\n  set ns\\<^sub>2' \\<subseteq> set ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n        \\<lbrakk>V \\<in> oldDefs g n\\<^sub>1;\n         g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>1);\n         V \\<in> oldDefs g n\\<^sub>2;\n         g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>2);\n         set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) =\n         {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"set (butlast ns\\<^sub>1') \\<inter> set (butlast ns\\<^sub>2') = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (butlast ns\\<^sub>1') \\<inter> set (butlast ns\\<^sub>2') = {}", "proof (rule equals0I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast ns\\<^sub>1') \\<inter>\n               set (butlast ns\\<^sub>2') \\<Longrightarrow>\n       False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast ns\\<^sub>1') \\<inter>\n               set (butlast ns\\<^sub>2') \\<Longrightarrow>\n       False", "assume 1: \"x \\<in> set (butlast ns\\<^sub>1') \\<inter> set (butlast ns\\<^sub>2')\""], ["proof (state)\nthis:\n  x \\<in> set (butlast ns\\<^sub>1') \\<inter> set (butlast ns\\<^sub>2')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast ns\\<^sub>1') \\<inter>\n               set (butlast ns\\<^sub>2') \\<Longrightarrow>\n       False", "with set_butlast_distinct[OF ns\\<^sub>1'(3)] ns\\<^sub>1'(1)"], ["proof (chain)\npicking this:\n  set (butlast ns\\<^sub>1') \\<inter> {last ns\\<^sub>1'} = {}\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1'\\<rightarrow>defNode g r\n  x \\<in> set (butlast ns\\<^sub>1') \\<inter> set (butlast ns\\<^sub>2')", "have 2: \"x \\<noteq> defNode g r\""], ["proof (prove)\nusing this:\n  set (butlast ns\\<^sub>1') \\<inter> {last ns\\<^sub>1'} = {}\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1'\\<rightarrow>defNode g r\n  x \\<in> set (butlast ns\\<^sub>1') \\<inter> set (butlast ns\\<^sub>2')\n\ngoal (1 subgoal):\n 1. x \\<noteq> defNode g r", "by (auto simp:old.path2_def)"], ["proof (state)\nthis:\n  x \\<noteq> defNode g r\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast ns\\<^sub>1') \\<inter>\n               set (butlast ns\\<^sub>2') \\<Longrightarrow>\n       False", "with 1 ns\\<^sub>1'(4) ns\\<^sub>2'(4) ns\\<^sub>1(2) ns\\<^sub>2(2)"], ["proof (chain)\npicking this:\n  x \\<in> set (butlast ns\\<^sub>1') \\<inter> set (butlast ns\\<^sub>2')\n  set ns\\<^sub>1' \\<subseteq> set ns\\<^sub>1\n  set ns\\<^sub>2' \\<subseteq> set ns\\<^sub>2\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\n  x \\<noteq> defNode g r", "have \"x \\<in> set (butlast ns\\<^sub>1)\" \"x \\<in> set (butlast ns\\<^sub>2)\""], ["proof (prove)\nusing this:\n  x \\<in> set (butlast ns\\<^sub>1') \\<inter> set (butlast ns\\<^sub>2')\n  set ns\\<^sub>1' \\<subseteq> set ns\\<^sub>1\n  set ns\\<^sub>2' \\<subseteq> set ns\\<^sub>2\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\n  x \\<noteq> defNode g r\n\ngoal (1 subgoal):\n 1. x \\<in> set (butlast ns\\<^sub>1) &&& x \\<in> set (butlast ns\\<^sub>2)", "by - (auto intro!:in_set_butlastI elim:in_set_butlastD simp:old.path2_def)"], ["proof (state)\nthis:\n  x \\<in> set (butlast ns\\<^sub>1)\n  x \\<in> set (butlast ns\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast ns\\<^sub>1') \\<inter>\n               set (butlast ns\\<^sub>2') \\<Longrightarrow>\n       False", "with ns"], ["proof (chain)\npicking this:\n  set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\n  x \\<in> set (butlast ns\\<^sub>1)\n  x \\<in> set (butlast ns\\<^sub>2)", "show False"], ["proof (prove)\nusing this:\n  set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\n  x \\<in> set (butlast ns\\<^sub>1)\n  x \\<in> set (butlast ns\\<^sub>2)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (butlast ns\\<^sub>1') \\<inter> set (butlast ns\\<^sub>2') = {}\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2.\n        \\<lbrakk>V \\<in> oldDefs g n\\<^sub>1;\n         g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>1);\n         V \\<in> oldDefs g n\\<^sub>2;\n         g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r;\n         defNode g r \\<notin> set (butlast ns\\<^sub>2);\n         set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) =\n         {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus thesis"], ["proof (prove)\nusing this:\n  set (butlast ns\\<^sub>1') \\<inter> set (butlast ns\\<^sub>2') = {}\n\ngoal (1 subgoal):\n 1. thesis", "by (rule that[OF ns\\<^sub>1(1) ns\\<^sub>1'(1,2) ns\\<^sub>2(1) ns\\<^sub>2'(1,2)])"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<in> oldDefs g n\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  defNode g r \\<notin> set (butlast ns\\<^sub>1)\n  V \\<in> oldDefs g n\\<^sub>2\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\n  defNode g r \\<notin> set (butlast ns\\<^sub>2)\n  set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\n\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>V \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r; V \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain m ms where ms: \"V \\<in> oldDefs g m\" \"g \\<turnstile> m-ms\\<rightarrow>defNode g s\" \"defNode g r \\<notin> set ms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m ms.\n        \\<lbrakk>V \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         defNode g r \\<notin> set ms\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>m ms.\n        \\<lbrakk>V \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         defNode g r \\<notin> set ms\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<not> unnecessaryPhi g s", "obtain m\\<^sub>1 ms\\<^sub>1 m\\<^sub>2 ms\\<^sub>2 where\n        ms\\<^sub>1: \"V \\<in> oldDefs g m\\<^sub>1\" \"g \\<turnstile> m\\<^sub>1-ms\\<^sub>1\\<rightarrow>defNode g s\" and\n        ms\\<^sub>2: \"V \\<in> oldDefs g m\\<^sub>2\" \"g \\<turnstile> m\\<^sub>2-ms\\<^sub>2\\<rightarrow>defNode g s\" and\n        ms: \"set (butlast ms\\<^sub>1) \\<inter> set (butlast ms\\<^sub>2) = {}\""], ["proof (prove)\nusing this:\n  \\<not> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. (\\<And>m\\<^sub>1 ms\\<^sub>1 m\\<^sub>2 ms\\<^sub>2.\n        \\<lbrakk>V \\<in> oldDefs g m\\<^sub>1;\n         g \\<turnstile> m\\<^sub>1-ms\\<^sub>1\\<rightarrow>defNode g s;\n         V \\<in> oldDefs g m\\<^sub>2;\n         g \\<turnstile> m\\<^sub>2-ms\\<^sub>2\\<rightarrow>defNode g s;\n         set (butlast ms\\<^sub>1) \\<inter> set (butlast ms\\<^sub>2) =\n         {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule ununnecessaryPhis_disjoint_paths_aux, auto)"], ["proof (state)\nthis:\n  V \\<in> oldDefs g m\\<^sub>1\n  g \\<turnstile> m\\<^sub>1-ms\\<^sub>1\\<rightarrow>defNode g s\n  V \\<in> oldDefs g m\\<^sub>2\n  g \\<turnstile> m\\<^sub>2-ms\\<^sub>2\\<rightarrow>defNode g s\n  set (butlast ms\\<^sub>1) \\<inter> set (butlast ms\\<^sub>2) = {}\n\ngoal (1 subgoal):\n 1. (\\<And>m ms.\n        \\<lbrakk>V \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         defNode g r \\<notin> set ms\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"defNode g r \\<in> set ms\\<^sub>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. defNode g r \\<in> set ms\\<^sub>1 \\<Longrightarrow> thesis\n 2. defNode g r \\<notin> set ms\\<^sub>1 \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  defNode g r \\<notin> set ms\\<^sub>1\n\ngoal (2 subgoals):\n 1. defNode g r \\<in> set ms\\<^sub>1 \\<Longrightarrow> thesis\n 2. defNode g r \\<notin> set ms\\<^sub>1 \\<Longrightarrow> thesis", "with ms\\<^sub>1"], ["proof (chain)\npicking this:\n  V \\<in> oldDefs g m\\<^sub>1\n  g \\<turnstile> m\\<^sub>1-ms\\<^sub>1\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ms\\<^sub>1", "show thesis"], ["proof (prove)\nusing this:\n  V \\<in> oldDefs g m\\<^sub>1\n  g \\<turnstile> m\\<^sub>1-ms\\<^sub>1\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ms\\<^sub>1\n\ngoal (1 subgoal):\n 1. thesis", "by (rule that)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set ms\\<^sub>1 \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g r \\<in> set ms\\<^sub>1 \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  defNode g r \\<in> set ms\\<^sub>1\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set ms\\<^sub>1 \\<Longrightarrow> thesis", "have \"defNode g r \\<notin> set ms\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set ms\\<^sub>2", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. defNode g r \\<in> set ms\\<^sub>2 \\<Longrightarrow> False", "assume \"defNode g r \\<in> set ms\\<^sub>2\""], ["proof (state)\nthis:\n  defNode g r \\<in> set ms\\<^sub>2\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set ms\\<^sub>2 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  defNode g r \\<in> set ms\\<^sub>2\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set ms\\<^sub>2 \\<Longrightarrow> False", "note \\<open>defNode g r \\<noteq> defNode g s\\<close>"], ["proof (state)\nthis:\n  defNode g r \\<noteq> defNode g s\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set ms\\<^sub>2 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  defNode g r \\<in> set ms\\<^sub>2\n  defNode g r \\<noteq> defNode g s", "have \"defNode g r \\<in> set (butlast ms\\<^sub>1)\" \"defNode g r \\<in> set (butlast ms\\<^sub>2)\""], ["proof (prove)\nusing this:\n  defNode g r \\<in> set ms\\<^sub>2\n  defNode g r \\<noteq> defNode g s\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (butlast ms\\<^sub>1) &&&\n    defNode g r \\<in> set (butlast ms\\<^sub>2)", "using True ms\\<^sub>1(2) ms\\<^sub>2(2)"], ["proof (prove)\nusing this:\n  defNode g r \\<in> set ms\\<^sub>2\n  defNode g r \\<noteq> defNode g s\n  defNode g r \\<in> set ms\\<^sub>1\n  g \\<turnstile> m\\<^sub>1-ms\\<^sub>1\\<rightarrow>defNode g s\n  g \\<turnstile> m\\<^sub>2-ms\\<^sub>2\\<rightarrow>defNode g s\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (butlast ms\\<^sub>1) &&&\n    defNode g r \\<in> set (butlast ms\\<^sub>2)", "by (auto simp:old.path2_def intro:in_set_butlastI)"], ["proof (state)\nthis:\n  defNode g r \\<in> set (butlast ms\\<^sub>1)\n  defNode g r \\<in> set (butlast ms\\<^sub>2)\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set ms\\<^sub>2 \\<Longrightarrow> False", "with ms"], ["proof (chain)\npicking this:\n  set (butlast ms\\<^sub>1) \\<inter> set (butlast ms\\<^sub>2) = {}\n  defNode g r \\<in> set (butlast ms\\<^sub>1)\n  defNode g r \\<in> set (butlast ms\\<^sub>2)", "show False"], ["proof (prove)\nusing this:\n  set (butlast ms\\<^sub>1) \\<inter> set (butlast ms\\<^sub>2) = {}\n  defNode g r \\<in> set (butlast ms\\<^sub>1)\n  defNode g r \\<in> set (butlast ms\\<^sub>2)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  defNode g r \\<notin> set ms\\<^sub>2\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set ms\\<^sub>1 \\<Longrightarrow> thesis", "with ms\\<^sub>2"], ["proof (chain)\npicking this:\n  V \\<in> oldDefs g m\\<^sub>2\n  g \\<turnstile> m\\<^sub>2-ms\\<^sub>2\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ms\\<^sub>2", "show thesis"], ["proof (prove)\nusing this:\n  V \\<in> oldDefs g m\\<^sub>2\n  g \\<turnstile> m\\<^sub>2-ms\\<^sub>2\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ms\\<^sub>2\n\ngoal (1 subgoal):\n 1. thesis", "by (rule that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ms\n\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>V \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r; V \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"(set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms =\n    {} \\<Longrightarrow>\n    thesis\n 2. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "case True"], ["proof (state)\nthis:\n  (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms = {}\n\ngoal (2 subgoals):\n 1. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms =\n    {} \\<Longrightarrow>\n    thesis\n 2. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "with ns\\<^sub>1 ms"], ["proof (chain)\npicking this:\n  V \\<in> oldDefs g n\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  defNode g r \\<notin> set (butlast ns\\<^sub>1)\n  V \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ms\n  (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  V \\<in> oldDefs g n\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  defNode g r \\<notin> set (butlast ns\\<^sub>1)\n  V \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ms\n  (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms = {}\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that, auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "case False"], ["proof (state)\nthis:\n  (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq> {}", "obtain m' ms' where ms': \"g \\<turnstile> m'-ms'\\<rightarrow>defNode g s\" \"m' \\<in> set ns\\<^sub>1 \\<union> set ns\\<^sub>2\" \"set (tl ms') \\<inter> (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) = {}\" \"suffix ms' ms\""], ["proof (prove)\nusing this:\n  (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>m' ms'.\n        \\<lbrakk>g \\<turnstile> m'-ms'\\<rightarrow>defNode g s;\n         m' \\<in> set ns\\<^sub>1 \\<union> set ns\\<^sub>2;\n         set (tl ms') \\<inter> (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) =\n         {};\n         suffix ms' ms\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_last_prop[OF ms(2), of \"\\<lambda>x. x \\<in> set ns\\<^sub>1 \\<union> set ns\\<^sub>2\"], auto)"], ["proof (state)\nthis:\n  g \\<turnstile> m'-ms'\\<rightarrow>defNode g s\n  m' \\<in> set ns\\<^sub>1 \\<union> set ns\\<^sub>2\n  set (tl ms') \\<inter> (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) = {}\n  suffix ms' ms\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "from this(4) ms(3)"], ["proof (chain)\npicking this:\n  suffix ms' ms\n  defNode g r \\<notin> set ms", "have 2: \"defNode g r \\<notin> set ms'\""], ["proof (prove)\nusing this:\n  suffix ms' ms\n  defNode g r \\<notin> set ms\n\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set ms'", "by (auto dest: set_mono_suffix)"], ["proof (state)\nthis:\n  defNode g r \\<notin> set ms'\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  defNode g r \\<notin> set ms'\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "fix n\\<^sub>1 ns\\<^sub>1 n\\<^sub>2 ns\\<^sub>2"], ["proof (state)\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1__ \\<union> set ns\\<^sub>2__) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "assume 4: \"m' \\<in> set ns\\<^sub>1\""], ["proof (state)\nthis:\n  m' \\<in> set ns\\<^sub>1\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1__ \\<union> set ns\\<^sub>2__) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "assume ns\\<^sub>1: \"V \\<in> oldDefs g n\\<^sub>1\" \"g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\" \"defNode g r \\<notin> set (butlast ns\\<^sub>1)\""], ["proof (state)\nthis:\n  V \\<in> oldDefs g n\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  defNode g r \\<notin> set (butlast ns\\<^sub>1)\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1__ \\<union> set ns\\<^sub>2__) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "assume ns\\<^sub>2: \"V \\<in> oldDefs g n\\<^sub>2\" \"g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\" \"defNode g r \\<notin> set (butlast ns\\<^sub>2)\""], ["proof (state)\nthis:\n  V \\<in> oldDefs g n\\<^sub>2\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\n  defNode g r \\<notin> set (butlast ns\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1__ \\<union> set ns\\<^sub>2__) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "assume ns: \"set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\""], ["proof (state)\nthis:\n  set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1__ \\<union> set ns\\<^sub>2__) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "assume ms': \"g \\<turnstile> m'-ms'\\<rightarrow>defNode g s\" \"set (tl ms') \\<inter> (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) = {}\""], ["proof (state)\nthis:\n  g \\<turnstile> m'-ms'\\<rightarrow>defNode g s\n  set (tl ms') \\<inter> (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) = {}\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1__ \\<union> set ns\\<^sub>2__) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "have \"m' \\<in> set (butlast ns\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m' \\<in> set (butlast ns\\<^sub>1)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. m' \\<in> set (butlast ns\\<^sub>1)", "from ms'(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> m'-ms'\\<rightarrow>defNode g s", "have \"m' \\<in> set ms'\""], ["proof (prove)\nusing this:\n  g \\<turnstile> m'-ms'\\<rightarrow>defNode g s\n\ngoal (1 subgoal):\n 1. m' \\<in> set ms'", "by auto"], ["proof (state)\nthis:\n  m' \\<in> set ms'\n\ngoal (1 subgoal):\n 1. m' \\<in> set (butlast ns\\<^sub>1)", "with 2"], ["proof (chain)\npicking this:\n  defNode g r \\<notin> set ms'\n  m' \\<in> set ms'", "have \"defNode g r \\<noteq> m'\""], ["proof (prove)\nusing this:\n  defNode g r \\<notin> set ms'\n  m' \\<in> set ms'\n\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> m'", "by auto"], ["proof (state)\nthis:\n  defNode g r \\<noteq> m'\n\ngoal (1 subgoal):\n 1. m' \\<in> set (butlast ns\\<^sub>1)", "with 4 ns\\<^sub>1(2)"], ["proof (chain)\npicking this:\n  m' \\<in> set ns\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  defNode g r \\<noteq> m'", "show ?thesis"], ["proof (prove)\nusing this:\n  m' \\<in> set ns\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  defNode g r \\<noteq> m'\n\ngoal (1 subgoal):\n 1. m' \\<in> set (butlast ns\\<^sub>1)", "by - (rule in_set_butlastI, auto simp:old.path2_def)"], ["proof (state)\nthis:\n  m' \\<in> set (butlast ns\\<^sub>1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m' \\<in> set (butlast ns\\<^sub>1)\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1__ \\<union> set ns\\<^sub>2__) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "with ns\\<^sub>1(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  m' \\<in> set (butlast ns\\<^sub>1)", "obtain ns\\<^sub>1' where ns\\<^sub>1': \"g \\<turnstile> n\\<^sub>1-ns\\<^sub>1'\\<rightarrow>m'\" \"m' \\<notin> set (butlast ns\\<^sub>1')\" \"strict_prefix ns\\<^sub>1' ns\\<^sub>1\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  m' \\<in> set (butlast ns\\<^sub>1)\n\ngoal (1 subgoal):\n 1. (\\<And>ns\\<^sub>1''.\n        \\<lbrakk>g \\<turnstile> n\\<^sub>1-ns\\<^sub>1''\\<rightarrow>m';\n         m' \\<notin> set (butlast ns\\<^sub>1'');\n         strict_prefix ns\\<^sub>1'' ns\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_strict_prefix_ex)"], ["proof (state)\nthis:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1'\\<rightarrow>m'\n  m' \\<notin> set (butlast ns\\<^sub>1')\n  strict_prefix ns\\<^sub>1' ns\\<^sub>1\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1__ \\<union> set ns\\<^sub>2__) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "have thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule that[OF ns\\<^sub>2(1,2), OF ns\\<^sub>1(1), of \"ns\\<^sub>1'@tl ms'\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. g \\<turnstile> n\\<^sub>1-ns\\<^sub>1' @ tl ms'\\<rightarrow>defNode g s\n 2. set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms') = {}", "show \"g \\<turnstile> n\\<^sub>1-ns\\<^sub>1' @ tl ms'\\<rightarrow>defNode g s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n\\<^sub>1-ns\\<^sub>1' @ tl ms'\\<rightarrow>defNode g s", "using ns\\<^sub>1'(1) ms'(1)"], ["proof (prove)\nusing this:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1'\\<rightarrow>m'\n  g \\<turnstile> m'-ms'\\<rightarrow>defNode g s\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n\\<^sub>1-ns\\<^sub>1' @ tl ms'\\<rightarrow>defNode g s", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1' @ tl ms'\\<rightarrow>defNode g s\n\ngoal (1 subgoal):\n 1. set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms') = {}", "show \"set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms') = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms') = {}", "proof (rule equals0I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set ns\\<^sub>2 \\<inter>\n               set (ns\\<^sub>1' @ tl ms') \\<Longrightarrow>\n       False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set ns\\<^sub>2 \\<inter>\n               set (ns\\<^sub>1' @ tl ms') \\<Longrightarrow>\n       False", "assume x: \"x \\<in> set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms')\""], ["proof (state)\nthis:\n  x \\<in> set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set ns\\<^sub>2 \\<inter>\n               set (ns\\<^sub>1' @ tl ms') \\<Longrightarrow>\n       False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"x \\<in> set ns\\<^sub>1'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> set ns\\<^sub>1' \\<Longrightarrow> False\n 2. x \\<notin> set ns\\<^sub>1' \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  x \\<in> set ns\\<^sub>1'\n\ngoal (2 subgoals):\n 1. x \\<in> set ns\\<^sub>1' \\<Longrightarrow> False\n 2. x \\<notin> set ns\\<^sub>1' \\<Longrightarrow> False", "hence 4: \"x \\<in> set (butlast ns\\<^sub>1)\""], ["proof (prove)\nusing this:\n  x \\<in> set ns\\<^sub>1'\n\ngoal (1 subgoal):\n 1. x \\<in> set (butlast ns\\<^sub>1)", "using ns\\<^sub>1'(3)"], ["proof (prove)\nusing this:\n  x \\<in> set ns\\<^sub>1'\n  strict_prefix ns\\<^sub>1' ns\\<^sub>1\n\ngoal (1 subgoal):\n 1. x \\<in> set (butlast ns\\<^sub>1)", "by (auto dest:set_mono_strict_prefix)"], ["proof (state)\nthis:\n  x \\<in> set (butlast ns\\<^sub>1)\n\ngoal (2 subgoals):\n 1. x \\<in> set ns\\<^sub>1' \\<Longrightarrow> False\n 2. x \\<notin> set ns\\<^sub>1' \\<Longrightarrow> False", "with ns\\<^sub>1(3)"], ["proof (chain)\npicking this:\n  defNode g r \\<notin> set (butlast ns\\<^sub>1)\n  x \\<in> set (butlast ns\\<^sub>1)", "have \"x \\<noteq> defNode g r\""], ["proof (prove)\nusing this:\n  defNode g r \\<notin> set (butlast ns\\<^sub>1)\n  x \\<in> set (butlast ns\\<^sub>1)\n\ngoal (1 subgoal):\n 1. x \\<noteq> defNode g r", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> defNode g r\n\ngoal (2 subgoals):\n 1. x \\<in> set ns\\<^sub>1' \\<Longrightarrow> False\n 2. x \\<notin> set ns\\<^sub>1' \\<Longrightarrow> False", "with ns\\<^sub>2(2) x"], ["proof (chain)\npicking this:\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\n  x \\<in> set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms')\n  x \\<noteq> defNode g r", "have \"x \\<in> set (butlast ns\\<^sub>2)\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\n  x \\<in> set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms')\n  x \\<noteq> defNode g r\n\ngoal (1 subgoal):\n 1. x \\<in> set (butlast ns\\<^sub>2)", "by - (rule in_set_butlastI, auto simp:old.path2_def)"], ["proof (state)\nthis:\n  x \\<in> set (butlast ns\\<^sub>2)\n\ngoal (2 subgoals):\n 1. x \\<in> set ns\\<^sub>1' \\<Longrightarrow> False\n 2. x \\<notin> set ns\\<^sub>1' \\<Longrightarrow> False", "with 4 ns"], ["proof (chain)\npicking this:\n  x \\<in> set (butlast ns\\<^sub>1)\n  set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\n  x \\<in> set (butlast ns\\<^sub>2)", "show False"], ["proof (prove)\nusing this:\n  x \\<in> set (butlast ns\\<^sub>1)\n  set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\n  x \\<in> set (butlast ns\\<^sub>2)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. x \\<notin> set ns\\<^sub>1' \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> set ns\\<^sub>1' \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  x \\<notin> set ns\\<^sub>1'\n\ngoal (1 subgoal):\n 1. x \\<notin> set ns\\<^sub>1' \\<Longrightarrow> False", "with x"], ["proof (chain)\npicking this:\n  x \\<in> set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms')\n  x \\<notin> set ns\\<^sub>1'", "have \"x \\<in> set (tl ms')\""], ["proof (prove)\nusing this:\n  x \\<in> set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms')\n  x \\<notin> set ns\\<^sub>1'\n\ngoal (1 subgoal):\n 1. x \\<in> set (tl ms')", "by simp"], ["proof (state)\nthis:\n  x \\<in> set (tl ms')\n\ngoal (1 subgoal):\n 1. x \\<notin> set ns\\<^sub>1' \\<Longrightarrow> False", "with x ms'(2)"], ["proof (chain)\npicking this:\n  x \\<in> set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms')\n  set (tl ms') \\<inter> (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) = {}\n  x \\<in> set (tl ms')", "show False"], ["proof (prove)\nusing this:\n  x \\<in> set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms')\n  set (tl ms') \\<inter> (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) = {}\n  x \\<in> set (tl ms')\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set ns\\<^sub>2 \\<inter> set (ns\\<^sub>1' @ tl ms') = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1__ \\<union> set ns\\<^sub>2__) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  \\<lbrakk>m' \\<in> set ?ns\\<^sub>1'3; V \\<in> oldDefs g ?n\\<^sub>1'3;\n   g \\<turnstile> ?n\\<^sub>1'3-?ns\\<^sub>1'3\\<rightarrow>defNode g r;\n   defNode g r \\<notin> set (butlast ?ns\\<^sub>1'3);\n   V \\<in> oldDefs g ?n\\<^sub>2'3;\n   g \\<turnstile> ?n\\<^sub>2'3-?ns\\<^sub>2'3\\<rightarrow>defNode g r;\n   defNode g r \\<notin> set (butlast ?ns\\<^sub>2'3);\n   set (butlast ?ns\\<^sub>1'3) \\<inter> set (butlast ?ns\\<^sub>2'3) = {};\n   g \\<turnstile> m'-ms'\\<rightarrow>defNode g s;\n   set (tl ms') \\<inter> (set ?ns\\<^sub>1'3 \\<union> set ?ns\\<^sub>2'3) =\n   {}\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "note 4 = this"], ["proof (state)\nthis:\n  \\<lbrakk>m' \\<in> set ?ns\\<^sub>1'3; V \\<in> oldDefs g ?n\\<^sub>1'3;\n   g \\<turnstile> ?n\\<^sub>1'3-?ns\\<^sub>1'3\\<rightarrow>defNode g r;\n   defNode g r \\<notin> set (butlast ?ns\\<^sub>1'3);\n   V \\<in> oldDefs g ?n\\<^sub>2'3;\n   g \\<turnstile> ?n\\<^sub>2'3-?ns\\<^sub>2'3\\<rightarrow>defNode g r;\n   defNode g r \\<notin> set (butlast ?ns\\<^sub>2'3);\n   set (butlast ?ns\\<^sub>1'3) \\<inter> set (butlast ?ns\\<^sub>2'3) = {};\n   g \\<turnstile> m'-ms'\\<rightarrow>defNode g s;\n   set (tl ms') \\<inter> (set ?ns\\<^sub>1'3 \\<union> set ?ns\\<^sub>2'3) =\n   {}\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) \\<inter> set ms \\<noteq>\n    {} \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"m' \\<in> set ns\\<^sub>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m' \\<in> set ns\\<^sub>1 \\<Longrightarrow> thesis\n 2. m' \\<notin> set ns\\<^sub>1 \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  m' \\<in> set ns\\<^sub>1\n\ngoal (2 subgoals):\n 1. m' \\<in> set ns\\<^sub>1 \\<Longrightarrow> thesis\n 2. m' \\<notin> set ns\\<^sub>1 \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  m' \\<in> set ns\\<^sub>1\n\ngoal (1 subgoal):\n 1. thesis", "using ns\\<^sub>1 ns\\<^sub>2 ns ms'(1,3)"], ["proof (prove)\nusing this:\n  m' \\<in> set ns\\<^sub>1\n  V \\<in> oldDefs g n\\<^sub>1\n  g \\<turnstile> n\\<^sub>1-ns\\<^sub>1\\<rightarrow>defNode g r\n  defNode g r \\<notin> set (butlast ns\\<^sub>1)\n  V \\<in> oldDefs g n\\<^sub>2\n  g \\<turnstile> n\\<^sub>2-ns\\<^sub>2\\<rightarrow>defNode g r\n  defNode g r \\<notin> set (butlast ns\\<^sub>2)\n  set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\n  g \\<turnstile> m'-ms'\\<rightarrow>defNode g s\n  set (tl ms') \\<inter> (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) = {}\n\ngoal (1 subgoal):\n 1. thesis", "by (rule 4)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. m' \\<notin> set ns\\<^sub>1 \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m' \\<notin> set ns\\<^sub>1 \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  m' \\<notin> set ns\\<^sub>1\n\ngoal (1 subgoal):\n 1. m' \\<notin> set ns\\<^sub>1 \\<Longrightarrow> thesis", "with ms'(2)"], ["proof (chain)\npicking this:\n  m' \\<in> set ns\\<^sub>1 \\<union> set ns\\<^sub>2\n  m' \\<notin> set ns\\<^sub>1", "have \"m' \\<in> set ns\\<^sub>2\""], ["proof (prove)\nusing this:\n  m' \\<in> set ns\\<^sub>1 \\<union> set ns\\<^sub>2\n  m' \\<notin> set ns\\<^sub>1\n\ngoal (1 subgoal):\n 1. m' \\<in> set ns\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  m' \\<in> set ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. m' \\<notin> set ns\\<^sub>1 \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  m' \\<in> set ns\\<^sub>2\n\ngoal (1 subgoal):\n 1. thesis", "using ns ms'(1,3)"], ["proof (prove)\nusing this:\n  m' \\<in> set ns\\<^sub>2\n  set (butlast ns\\<^sub>1) \\<inter> set (butlast ns\\<^sub>2) = {}\n  g \\<turnstile> m'-ms'\\<rightarrow>defNode g s\n  set (tl ms') \\<inter> (set ns\\<^sub>1 \\<union> set ns\\<^sub>2) = {}\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule 4[OF _ ns\\<^sub>2 ns\\<^sub>1], auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3. If a $\\phi$ function p in a block P for a variable v is unnecessary, but non-trivial, then it has an operand q in a block Q,\n    such that q is an unnecessary $\\phi$ function and Q does not dominate P.\\<close>"], ["", "lemma 3:\n    assumes \"unnecessaryPhi g p\" \"\\<not>trivial g p\" and[simp]: \"p \\<in> allVars g\"\n    obtains q where \"phiArg g p q\" \"unnecessaryPhi g q\" \"\\<not>def_dominates g q p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note unnecessaryPhi_def[simp]"], ["proof (state)\nthis:\n  unnecessaryPhi ?g ?val \\<equiv>\n  phi ?g ?val \\<noteq> None \\<and> \\<not> necessaryPhi' ?g ?val\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?P = \"defNode g p\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "txt \\<open>The node p must have at least two different operands r and s, which are not p itself. Otherwise, p is trivial.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  unnecessaryPhi g p\n  \\<not> trivial g p\n  p \\<in> allVars g", "obtain r s where rs: \"phiArg g p r\" \"phiArg g p s\" \"distinct [p, r, s]\""], ["proof (prove)\nusing this:\n  unnecessaryPhi g p\n  \\<not> trivial g p\n  p \\<in> allVars g\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        \\<lbrakk>phiArg g p r; phiArg g p s; distinct [p, r, s]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule nontrivialE, auto)"], ["proof (state)\nthis:\n  phiArg g p r\n  phiArg g p s\n  distinct [p, r, s]\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence[simp]: \"var g r = var g p\" \"var g s = var g p\" \"r \\<in> allVars g\" \"s \\<in> allVars g\""], ["proof (prove)\nusing this:\n  phiArg g p r\n  phiArg g p s\n  distinct [p, r, s]\n\ngoal (1 subgoal):\n 1. (var g r = var g p &&& var g s = var g p) &&&\n    r \\<in> allVars g &&& s \\<in> allVars g", "by (simp_all add:phiArg_same_var)"], ["proof (state)\nthis:\n  var g r = var g p\n  var g s = var g p\n  r \\<in> allVars g\n  s \\<in> allVars g\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "txt \\<open>They can either be:\n      \\<^item> The result of a direct assignment to v.\n      \\<^item> The result of a necessary $\\phi$ function r' . This however means that r' was\n        reachable by at least two different direct assignments to v. So there is a path\n        from a direct assignment of v to p.\n      \\<^item> Another unnecessary $\\phi$ function.\\<close>"], ["proof (state)\nthis:\n  var g r = var g p\n  var g s = var g p\n  r \\<in> allVars g\n  s \\<in> allVars g\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?R = \"defNode g r\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?S = \"defNode g s\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have[simp]: \"?R \\<noteq> ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> defNode g s", "using rs"], ["proof (prove)\nusing this:\n  phiArg g p r\n  phiArg g p s\n  distinct [p, r, s]\n\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> defNode g s", "by - (rule phiArgs_def_distinct, auto)"], ["proof (state)\nthis:\n  defNode g r \\<noteq> defNode g s\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have one_unnec: \"unnecessaryPhi g r \\<or> unnecessaryPhi g s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unnecessaryPhi g r \\<or> unnecessaryPhi g s", "proof (rule ccontr, simp only: de_Morgan_disj not_not)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "txt \\<open>Assume neither r in a block R nor s in a block S is an unnecessary $\\phi$ function.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "assume asm: \"\\<not>unnecessaryPhi g r \\<and> \\<not>unnecessaryPhi g s\""], ["proof (state)\nthis:\n  \\<not> unnecessaryPhi g r \\<and> \\<not> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "txt \\<open>Then a path from an assignment to v in a block n crosses R and a path from an assignment to v in a block m crosses S.\\<close>"], ["proof (state)\nthis:\n  \\<not> unnecessaryPhi g r \\<and> \\<not> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "txt \\<open>AMENDMENT: ...so that the paths are disjoint!\\<close>"], ["proof (state)\nthis:\n  \\<not> unnecessaryPhi g r \\<and> \\<not> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "obtain n ns m ms where ns: \"var g p \\<in> oldDefs g n\" \"g \\<turnstile> n-ns\\<rightarrow>?R\" \"n \\<notin> set (tl ns)\"\n        and ms: \"var g p \\<in> oldDefs g m\" \"g \\<turnstile> m-ms\\<rightarrow>defNode g s\" \"m \\<notin> set (tl ms)\"\n        and ns_ms: \"set ns \\<inter> set ms = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>var g p \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r;\n         n \\<notin> set (tl ns); var g p \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         m \\<notin> set (tl ms); set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>var g p \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r;\n         n \\<notin> set (tl ns); var g p \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         m \\<notin> set (tl ms); set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain n ns m ms where ns: \"var g p \\<in> oldDefs g n\" \"g \\<turnstile> n-ns\\<rightarrow>?R\" and ms: \"var g p \\<in> oldDefs g m\" \"g \\<turnstile> m-ms\\<rightarrow>?S\"\n          and ns_ms: \"set ns \\<inter> set ms = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>var g p \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r;\n         var g p \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using asm[THEN conjunct1] asm[THEN conjunct2]"], ["proof (prove)\nusing this:\n  \\<not> unnecessaryPhi g r\n  \\<not> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>var g p \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r;\n         var g p \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule ununnecessaryPhis_disjoint_paths, auto)"], ["proof (state)\nthis:\n  var g p \\<in> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>defNode g r\n  var g p \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  set ns \\<inter> set ms = {}\n\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>var g p \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r;\n         n \\<notin> set (tl ns); var g p \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         m \\<notin> set (tl ms); set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  var g p \\<in> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>defNode g r\n  var g p \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  set ns \\<inter> set ms = {}\n\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>var g p \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r;\n         n \\<notin> set (tl ns); var g p \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         m \\<notin> set (tl ms); set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from ns"], ["proof (chain)\npicking this:\n  var g p \\<in> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>defNode g r", "obtain ns' where \"g \\<turnstile> n-ns'\\<rightarrow>?R\" \"n \\<notin> set (tl ns')\" \"set ns' \\<subseteq> set ns\""], ["proof (prove)\nusing this:\n  var g p \\<in> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>defNode g r\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        \\<lbrakk>g \\<turnstile> n-ns'\\<rightarrow>defNode g r;\n         n \\<notin> set (tl ns'); set ns' \\<subseteq> set ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns'\\<rightarrow>defNode g r\n  n \\<notin> set (tl ns')\n  set ns' \\<subseteq> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>var g p \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r;\n         n \\<notin> set (tl ns); var g p \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         m \\<notin> set (tl ms); set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns'\\<rightarrow>defNode g r\n  n \\<notin> set (tl ns')\n  set ns' \\<subseteq> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>var g p \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r;\n         n \\<notin> set (tl ns); var g p \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         m \\<notin> set (tl ms); set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from ms"], ["proof (chain)\npicking this:\n  var g p \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s", "obtain ms' where \"g \\<turnstile> m-ms'\\<rightarrow>?S\" \"m \\<notin> set (tl ms')\" \"set ms' \\<subseteq> set ms\""], ["proof (prove)\nusing this:\n  var g p \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n\ngoal (1 subgoal):\n 1. (\\<And>ms'.\n        \\<lbrakk>g \\<turnstile> m-ms'\\<rightarrow>defNode g s;\n         m \\<notin> set (tl ms'); set ms' \\<subseteq> set ms\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> m-ms'\\<rightarrow>defNode g s\n  m \\<notin> set (tl ms')\n  set ms' \\<subseteq> set ms\n\ngoal (1 subgoal):\n 1. (\\<And>n ns m ms.\n        \\<lbrakk>var g p \\<in> oldDefs g n;\n         g \\<turnstile> n-ns\\<rightarrow>defNode g r;\n         n \\<notin> set (tl ns); var g p \\<in> oldDefs g m;\n         g \\<turnstile> m-ms\\<rightarrow>defNode g s;\n         m \\<notin> set (tl ms); set ns \\<inter> set ms = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  var g p \\<in> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>defNode g r\n  var g p \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  set ns \\<inter> set ms = {}\n  g \\<turnstile> n-ns'\\<rightarrow>defNode g r\n  n \\<notin> set (tl ns')\n  set ns' \\<subseteq> set ns\n  g \\<turnstile> m-ms'\\<rightarrow>defNode g s\n  m \\<notin> set (tl ms')\n  set ms' \\<subseteq> set ms", "show thesis"], ["proof (prove)\nusing this:\n  var g p \\<in> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>defNode g r\n  var g p \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  set ns \\<inter> set ms = {}\n  g \\<turnstile> n-ns'\\<rightarrow>defNode g r\n  n \\<notin> set (tl ns')\n  set ns' \\<subseteq> set ns\n  g \\<turnstile> m-ms'\\<rightarrow>defNode g s\n  m \\<notin> set (tl ms')\n  set ms' \\<subseteq> set ms\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that[of n ns' m ms'], auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var g p \\<in> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>defNode g r\n  n \\<notin> set (tl ns)\n  var g p \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  m \\<notin> set (tl ms)\n  set ns \\<inter> set ms = {}\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "from ns(1) ms(1)"], ["proof (chain)\npicking this:\n  var g p \\<in> oldDefs g n\n  var g p \\<in> oldDefs g m", "obtain v v' where v: \"v \\<in> defs g n\" and v': \"v' \\<in> defs g m\" and[simp]: \"var g v = var g p\" \"var g v' = var g p\""], ["proof (prove)\nusing this:\n  var g p \\<in> oldDefs g n\n  var g p \\<in> oldDefs g m\n\ngoal (1 subgoal):\n 1. (\\<And>v v'.\n        \\<lbrakk>v \\<in> defs g n; v' \\<in> defs g m; var g v = var g p;\n         var g v' = var g p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp:oldDefs_def)"], ["proof (state)\nthis:\n  v \\<in> defs g n\n  v' \\<in> defs g m\n  var g v = var g p\n  var g v' = var g p\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "txt \\<open>They converge at P or earlier.\\<close>"], ["proof (state)\nthis:\n  v \\<in> defs g n\n  v' \\<in> defs g m\n  var g v = var g p\n  var g v' = var g p\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "obtain ns' n' where ns': \"g \\<turnstile> ?R-ns'\\<rightarrow>n'\" \"r \\<in> phiUses g n'\" \"n' \\<in> set (old.predecessors g ?P)\" \"?R \\<notin> set (tl ns')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns' n'.\n        \\<lbrakk>g \\<turnstile> defNode g r-ns'\\<rightarrow>n';\n         r \\<in> phiUses g n';\n         n' \\<in> set (old.predecessors g (defNode g p));\n         defNode g r \\<notin> set (tl ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule phiArg_path_ex'[OF rs(1)], auto elim: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g r-ns'\\<rightarrow>n'\n  r \\<in> phiUses g n'\n  n' \\<in> set (old.predecessors g (defNode g p))\n  defNode g r \\<notin> set (tl ns')\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "obtain ms' m' where ms': \"g \\<turnstile> ?S-ms'\\<rightarrow>m'\" \"s \\<in> phiUses g m'\" \"m' \\<in> set (old.predecessors g ?P)\" \"?S \\<notin> set (tl ms')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ms' m'.\n        \\<lbrakk>g \\<turnstile> defNode g s-ms'\\<rightarrow>m';\n         s \\<in> phiUses g m';\n         m' \\<in> set (old.predecessors g (defNode g p));\n         defNode g s \\<notin> set (tl ms')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule phiArg_path_ex'[OF rs(2)], auto elim: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g s-ms'\\<rightarrow>m'\n  s \\<in> phiUses g m'\n  m' \\<in> set (old.predecessors g (defNode g p))\n  defNode g s \\<notin> set (tl ms')\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "let ?left = \"(ns@tl ns')@[?P]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "let ?right = \"(ms@tl ms')@[?P]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "obtain ns'' ms'' z where z: \"old.pathsConverge g n ns'' m ms'' z\" \"prefix ns'' ?left\" \"prefix ms'' ?right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (rule paths_converge_prefix)"], ["proof (state)\ngoal (8 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?g3 \\<turnstile> ?x3-?xs3\\<rightarrow>?z3\n 2. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?g3 \\<turnstile> ?y3-?ys3\\<rightarrow>?z3\n 3. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?x3 \\<noteq> ?y3\n 4. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    1 < length ?xs3\n 5. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    1 < length ?ys3\n 6. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?x3 \\<notin> set (butlast ?ys3)\n 7. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?y3 \\<notin> set (butlast ?xs3)\n 8. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge ?g3 ?x3 xs' ?y3 ys' z'; prefix xs' ?xs3;\n        prefix ys' ?ys3\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"n \\<noteq> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> m", "using ns ms ns_ms"], ["proof (prove)\nusing this:\n  var g p \\<in> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>defNode g r\n  n \\<notin> set (tl ns)\n  var g p \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  m \\<notin> set (tl ms)\n  set ns \\<inter> set ms = {}\n\ngoal (1 subgoal):\n 1. n \\<noteq> m", "by auto"], ["proof (state)\nthis:\n  n \\<noteq> m\n\ngoal (7 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?g3 \\<turnstile> n-?xs3\\<rightarrow>?z3\n 2. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?g3 \\<turnstile> m-?ys3\\<rightarrow>?z3\n 3. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    1 < length ?xs3\n 4. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    1 < length ?ys3\n 5. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    n \\<notin> set (butlast ?ys3)\n 6. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ?xs3)\n 7. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge ?g3 n xs' m ys' z'; prefix xs' ?xs3;\n        prefix ys' ?ys3\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"g \\<turnstile> n-?left\\<rightarrow>?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> n-(ns @ tl ns') @ [defNode g p]\\<rightarrow>defNode g p", "using ns ns'"], ["proof (prove)\nusing this:\n  var g p \\<in> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>defNode g r\n  n \\<notin> set (tl ns)\n  g \\<turnstile> defNode g r-ns'\\<rightarrow>n'\n  r \\<in> phiUses g n'\n  n' \\<in> set (old.predecessors g (defNode g p))\n  defNode g r \\<notin> set (tl ns')\n\ngoal (1 subgoal):\n 1. g \\<turnstile> n-(ns @ tl ns') @ [defNode g p]\\<rightarrow>defNode g p", "by - (rule old.path2_snoc, rule old.path2_app)"], ["proof (state)\nthis:\n  g \\<turnstile> n-(ns @ tl ns') @ [defNode g p]\\<rightarrow>defNode g p\n\ngoal (6 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    g \\<turnstile> m-?ys3\\<rightarrow>defNode g p\n 2. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    1 < length ((ns @ tl ns') @ [defNode g p])\n 3. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    1 < length ?ys3\n 4. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    n \\<notin> set (butlast ?ys3)\n 5. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n 6. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]); prefix ys' ?ys3\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"length ?left > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length ((ns @ tl ns') @ [defNode g p])", "using ns"], ["proof (prove)\nusing this:\n  var g p \\<in> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>defNode g r\n  n \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. 1 < length ((ns @ tl ns') @ [defNode g p])", "by auto"], ["proof (state)\nthis:\n  1 < length ((ns @ tl ns') @ [defNode g p])\n\ngoal (5 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    g \\<turnstile> m-?ys3\\<rightarrow>defNode g p\n 2. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    1 < length ?ys3\n 3. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    n \\<notin> set (butlast ?ys3)\n 4. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n 5. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]); prefix ys' ?ys3\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"g \\<turnstile> m-?right\\<rightarrow>?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> m-(ms @ tl ms') @ [defNode g p]\\<rightarrow>defNode g p", "using ms ms'"], ["proof (prove)\nusing this:\n  var g p \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  m \\<notin> set (tl ms)\n  g \\<turnstile> defNode g s-ms'\\<rightarrow>m'\n  s \\<in> phiUses g m'\n  m' \\<in> set (old.predecessors g (defNode g p))\n  defNode g s \\<notin> set (tl ms')\n\ngoal (1 subgoal):\n 1. g \\<turnstile> m-(ms @ tl ms') @ [defNode g p]\\<rightarrow>defNode g p", "by - (rule old.path2_snoc, rule old.path2_app)"], ["proof (state)\nthis:\n  g \\<turnstile> m-(ms @ tl ms') @ [defNode g p]\\<rightarrow>defNode g p\n\ngoal (4 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    1 < length ((ms @ tl ms') @ [defNode g p])\n 2. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    n \\<notin> set (butlast ((ms @ tl ms') @ [defNode g p]))\n 3. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n 4. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]);\n        prefix ys' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"length ?right > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length ((ms @ tl ms') @ [defNode g p])", "using ms"], ["proof (prove)\nusing this:\n  var g p \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  m \\<notin> set (tl ms)\n\ngoal (1 subgoal):\n 1. 1 < length ((ms @ tl ms') @ [defNode g p])", "by auto"], ["proof (state)\nthis:\n  1 < length ((ms @ tl ms') @ [defNode g p])\n\ngoal (3 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    n \\<notin> set (butlast ((ms @ tl ms') @ [defNode g p]))\n 2. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n 3. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]);\n        prefix ys' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"n \\<notin> set ms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<notin> set ms", "using ns_ms ns"], ["proof (prove)\nusing this:\n  set ns \\<inter> set ms = {}\n  var g p \\<in> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>defNode g r\n  n \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. n \\<notin> set ms", "by auto"], ["proof (state)\nthis:\n  n \\<notin> set ms\n\ngoal (3 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    n \\<notin> set (butlast ((ms @ tl ms') @ [defNode g p]))\n 2. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n 3. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]);\n        prefix ys' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  n \\<notin> set ms\n\ngoal (3 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    n \\<notin> set (butlast ((ms @ tl ms') @ [defNode g p]))\n 2. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n 3. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]);\n        prefix ys' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"n \\<notin> set (tl ms')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<notin> set (tl ms')", "using v rs(2) ms'(2) asm"], ["proof (prove)\nusing this:\n  v \\<in> defs g n\n  phiArg g p s\n  s \\<in> phiUses g m'\n  \\<not> unnecessaryPhi g r \\<and> \\<not> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. n \\<notin> set (tl ms')", "by - (rule conventional'[OF ms'(1,4), of s v], auto)"], ["proof (state)\nthis:\n  n \\<notin> set (tl ms')\n\ngoal (3 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    n \\<notin> set (butlast ((ms @ tl ms') @ [defNode g p]))\n 2. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n 3. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]);\n        prefix ys' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  n \\<notin> set ms\n  n \\<notin> set (tl ms')", "show \"n \\<notin> set (butlast ?right)\""], ["proof (prove)\nusing this:\n  n \\<notin> set ms\n  n \\<notin> set (tl ms')\n\ngoal (1 subgoal):\n 1. n \\<notin> set (butlast ((ms @ tl ms') @ [defNode g p]))", "by (auto simp del:append_assoc)"], ["proof (state)\nthis:\n  n \\<notin> set (butlast ((ms @ tl ms') @ [defNode g p]))\n\ngoal (2 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n 2. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]);\n        prefix ys' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"m \\<notin> set ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<notin> set ns", "using ns_ms ms"], ["proof (prove)\nusing this:\n  set ns \\<inter> set ms = {}\n  var g p \\<in> oldDefs g m\n  g \\<turnstile> m-ms\\<rightarrow>defNode g s\n  m \\<notin> set (tl ms)\n\ngoal (1 subgoal):\n 1. m \\<notin> set ns", "by auto"], ["proof (state)\nthis:\n  m \\<notin> set ns\n\ngoal (2 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n 2. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]);\n        prefix ys' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  m \\<notin> set ns\n\ngoal (2 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n 2. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]);\n        prefix ys' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"m \\<notin> set (tl ns')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<notin> set (tl ns')", "using v' rs(1) ns'(2) asm"], ["proof (prove)\nusing this:\n  v' \\<in> defs g m\n  phiArg g p r\n  r \\<in> phiUses g n'\n  \\<not> unnecessaryPhi g r \\<and> \\<not> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. m \\<notin> set (tl ns')", "by - (rule conventional'[OF ns'(1,4), of r v'], auto)"], ["proof (state)\nthis:\n  m \\<notin> set (tl ns')\n\ngoal (2 subgoals):\n 1. (\\<And>ns'' ms'' z.\n        \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n         prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n         prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n 2. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]);\n        prefix ys' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  m \\<notin> set ns\n  m \\<notin> set (tl ns')", "show \"m \\<notin> set (butlast ?left)\""], ["proof (prove)\nusing this:\n  m \\<notin> set ns\n  m \\<notin> set (tl ns')\n\ngoal (1 subgoal):\n 1. m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))", "by (auto simp del:append_assoc)"], ["proof (state)\nthis:\n  m \\<notin> set (butlast ((ns @ tl ns') @ [defNode g p]))\n\ngoal (1 subgoal):\n 1. \\<And>xs' ys' z'.\n       \\<lbrakk>\\<And>ns'' ms'' z.\n                   \\<lbrakk>old.pathsConverge g n ns'' m ms'' z;\n                    prefix ns'' ((ns @ tl ns') @ [defNode g p]);\n                    prefix ms'' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        old.pathsConverge g n xs' m ys' z';\n        prefix xs' ((ns @ tl ns') @ [defNode g p]);\n        prefix ys' ((ms @ tl ms') @ [defNode g p])\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed"], ["proof (state)\nthis:\n  old.pathsConverge g n ns'' m ms'' z\n  prefix ns'' ((ns @ tl ns') @ [defNode g p])\n  prefix ms'' ((ms @ tl ms') @ [defNode g p])\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "from this(1) ns(1) ms(1)"], ["proof (chain)\npicking this:\n  old.pathsConverge g n ns'' m ms'' z\n  var g p \\<in> oldDefs g n\n  var g p \\<in> oldDefs g m", "have necessary: \"necessaryPhi g (var g p) z\""], ["proof (prove)\nusing this:\n  old.pathsConverge g n ns'' m ms'' z\n  var g p \\<in> oldDefs g n\n  var g p \\<in> oldDefs g m\n\ngoal (1 subgoal):\n 1. necessaryPhi g (var g p) z", "by (rule necessaryPhiI)"], ["proof (state)\nthis:\n  necessaryPhi g (var g p) z\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g r \\<and>\n    \\<not> unnecessaryPhi g s \\<Longrightarrow>\n    False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"z = ?P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z = defNode g p \\<Longrightarrow> False\n 2. z \\<noteq> defNode g p \\<Longrightarrow> False", "txt \\<open>Convergence at P is not possible because p is unnecessary.\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. z = defNode g p \\<Longrightarrow> False\n 2. z \\<noteq> defNode g p \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  z = defNode g p\n\ngoal (2 subgoals):\n 1. z = defNode g p \\<Longrightarrow> False\n 2. z \\<noteq> defNode g p \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  z = defNode g p\n\ngoal (1 subgoal):\n 1. False", "using assms(1) necessary"], ["proof (prove)\nusing this:\n  z = defNode g p\n  unnecessaryPhi g p\n  necessaryPhi g (var g p) z\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "txt \\<open>An earlier convergence would imply a necessary $\\phi$ function at this point, which violates the SSA property.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  z \\<noteq> defNode g p\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "from z(1)"], ["proof (chain)\npicking this:\n  old.pathsConverge g n ns'' m ms'' z", "have \"z \\<in> set ns'' \\<inter> set ms''\""], ["proof (prove)\nusing this:\n  old.pathsConverge g n ns'' m ms'' z\n\ngoal (1 subgoal):\n 1. z \\<in> set ns'' \\<inter> set ms''", "by (auto simp: old.pathsConverge'_def)"], ["proof (state)\nthis:\n  z \\<in> set ns'' \\<inter> set ms''\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "with False"], ["proof (chain)\npicking this:\n  z \\<noteq> defNode g p\n  z \\<in> set ns'' \\<inter> set ms''", "have \"z \\<in> set (ns@tl ns') \\<inter> set (ms@tl ms')\""], ["proof (prove)\nusing this:\n  z \\<noteq> defNode g p\n  z \\<in> set ns'' \\<inter> set ms''\n\ngoal (1 subgoal):\n 1. z \\<in> set (ns @ tl ns') \\<inter> set (ms @ tl ms')", "using z(2,3)[THEN set_mono_prefix]"], ["proof (prove)\nusing this:\n  z \\<noteq> defNode g p\n  z \\<in> set ns'' \\<inter> set ms''\n  set ns'' \\<subseteq> set ((ns @ tl ns') @ [defNode g p])\n  set ms'' \\<subseteq> set ((ms @ tl ms') @ [defNode g p])\n\ngoal (1 subgoal):\n 1. z \\<in> set (ns @ tl ns') \\<inter> set (ms @ tl ms')", "by (auto elim:set_mono_prefix)"], ["proof (state)\nthis:\n  z \\<in> set (ns @ tl ns') \\<inter> set (ms @ tl ms')\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "hence z_on: \"z \\<in> set (tl ns') \\<union> set (tl ms')\""], ["proof (prove)\nusing this:\n  z \\<in> set (ns @ tl ns') \\<inter> set (ms @ tl ms')\n\ngoal (1 subgoal):\n 1. z \\<in> set (tl ns') \\<union> set (tl ms')", "using ns_ms"], ["proof (prove)\nusing this:\n  z \\<in> set (ns @ tl ns') \\<inter> set (ms @ tl ms')\n  set ns \\<inter> set ms = {}\n\ngoal (1 subgoal):\n 1. z \\<in> set (tl ns') \\<union> set (tl ms')", "by auto"], ["proof (state)\nthis:\n  z \\<in> set (tl ns') \\<union> set (tl ms')\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  z \\<in> set (tl ns') \\<union> set (tl ms')\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "fix r ns' n'"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "let ?R = \"defNode g r\""], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "assume ns': \"g \\<turnstile> ?R-ns'\\<rightarrow>n'\" \"r \\<in> phiUses g n'\" \"n' \\<in> set (old.predecessors g (?P))\" \"?R \\<notin> set (tl ns')\""], ["proof (state)\nthis:\n  g \\<turnstile> defNode g r-ns'\\<rightarrow>n'\n  r \\<in> phiUses g n'\n  n' \\<in> set (old.predecessors g (defNode g p))\n  defNode g r \\<notin> set (tl ns')\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "assume rs: \"var g r = var g p\""], ["proof (state)\nthis:\n  var g r = var g p\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "have \"z \\<notin> set (tl ns')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<notin> set (tl ns')", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<in> set (tl ns') \\<Longrightarrow> False", "assume asm: \"z \\<in> set (tl ns')\""], ["proof (state)\nthis:\n  z \\<in> set (tl ns')\n\ngoal (1 subgoal):\n 1. z \\<in> set (tl ns') \\<Longrightarrow> False", "obtain zs where zs: \"g \\<turnstile> z-zs\\<rightarrow>n'\" \"set (tl zs) \\<subseteq> set (tl ns')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>zs.\n        \\<lbrakk>g \\<turnstile> z-zs\\<rightarrow>n';\n         set (tl zs) \\<subseteq> set (tl ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using asm"], ["proof (prove)\nusing this:\n  z \\<in> set (tl ns')\n\ngoal (1 subgoal):\n 1. (\\<And>zs.\n        \\<lbrakk>g \\<turnstile> z-zs\\<rightarrow>n';\n         set (tl zs) \\<subseteq> set (tl ns')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_ex[OF ns'(1)], auto simp: old.path2_not_Nil elim: subsetD[OF set_tl])"], ["proof (state)\nthis:\n  g \\<turnstile> z-zs\\<rightarrow>n'\n  set (tl zs) \\<subseteq> set (tl ns')\n\ngoal (1 subgoal):\n 1. z \\<in> set (tl ns') \\<Longrightarrow> False", "have \"phis g (z, r) \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phis g (z, r) \\<noteq> None", "proof (rule convergence_prop[OF necessary[simplified rs[symmetric]] zs(1)])"], ["proof (state)\ngoal (3 subgoals):\n 1. r \\<in> allUses g n'\n 2. \\<And>x. x \\<in> set (tl zs) \\<Longrightarrow> r \\<notin> allDefs g x\n 3. r \\<notin> defs g z", "show \"r \\<in> allUses g n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> allUses g n'", "using ns'(2)"], ["proof (prove)\nusing this:\n  r \\<in> phiUses g n'\n\ngoal (1 subgoal):\n 1. r \\<in> allUses g n'", "by auto"], ["proof (state)\nthis:\n  r \\<in> allUses g n'\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set (tl zs) \\<Longrightarrow> r \\<notin> allDefs g x\n 2. r \\<notin> defs g z", "show \"r \\<notin> defs g z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<notin> defs g z", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> defs g z \\<Longrightarrow> False", "assume \"r \\<in> defs g z\""], ["proof (state)\nthis:\n  r \\<in> defs g z\n\ngoal (1 subgoal):\n 1. r \\<in> defs g z \\<Longrightarrow> False", "hence \"?R = z\""], ["proof (prove)\nusing this:\n  r \\<in> defs g z\n\ngoal (1 subgoal):\n 1. defNode g r = z", "using zs"], ["proof (prove)\nusing this:\n  r \\<in> defs g z\n  g \\<turnstile> z-zs\\<rightarrow>n'\n  set (tl zs) \\<subseteq> set (tl ns')\n\ngoal (1 subgoal):\n 1. defNode g r = z", "by - (rule defNode_eq, auto)"], ["proof (state)\nthis:\n  defNode g r = z\n\ngoal (1 subgoal):\n 1. r \\<in> defs g z \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  defNode g r = z\n\ngoal (1 subgoal):\n 1. False", "using ns'(4) asm"], ["proof (prove)\nusing this:\n  defNode g r = z\n  defNode g r \\<notin> set (tl ns')\n  z \\<in> set (tl ns')\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r \\<notin> defs g z\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (tl zs) \\<Longrightarrow> r \\<notin> allDefs g x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (tl zs) \\<Longrightarrow> r \\<notin> allDefs g x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (tl zs) \\<Longrightarrow> r \\<notin> allDefs g x", "assume \"x \\<in> set (tl zs)\""], ["proof (state)\nthis:\n  x \\<in> set (tl zs)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (tl zs) \\<Longrightarrow> r \\<notin> allDefs g x", "moreover"], ["proof (state)\nthis:\n  x \\<in> set (tl zs)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (tl zs) \\<Longrightarrow> r \\<notin> allDefs g x", "have \"?R \\<notin> set (tl zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set (tl zs)", "using ns'(4) zs(2)"], ["proof (prove)\nusing this:\n  defNode g r \\<notin> set (tl ns')\n  set (tl zs) \\<subseteq> set (tl ns')\n\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set (tl zs)", "by auto"], ["proof (state)\nthis:\n  defNode g r \\<notin> set (tl zs)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (tl zs) \\<Longrightarrow> r \\<notin> allDefs g x", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> set (tl zs)\n  defNode g r \\<notin> set (tl zs)", "show \"r \\<notin> allDefs g x\""], ["proof (prove)\nusing this:\n  x \\<in> set (tl zs)\n  defNode g r \\<notin> set (tl zs)\n\ngoal (1 subgoal):\n 1. r \\<notin> allDefs g x", "by (metis defNode_eq old.path2_in_\\<alpha>n set_tl subset_code(1) zs(1))"], ["proof (state)\nthis:\n  r \\<notin> allDefs g x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  phis g (z, r) \\<noteq> None\n\ngoal (1 subgoal):\n 1. z \\<in> set (tl ns') \\<Longrightarrow> False", "hence \"?R = z\""], ["proof (prove)\nusing this:\n  phis g (z, r) \\<noteq> None\n\ngoal (1 subgoal):\n 1. defNode g r = z", "using zs(1)"], ["proof (prove)\nusing this:\n  phis g (z, r) \\<noteq> None\n  g \\<turnstile> z-zs\\<rightarrow>n'\n\ngoal (1 subgoal):\n 1. defNode g r = z", "by - (rule defNode_eq, auto simp:allDefs_def phiDefs_def)"], ["proof (state)\nthis:\n  defNode g r = z\n\ngoal (1 subgoal):\n 1. z \\<in> set (tl ns') \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  defNode g r = z\n\ngoal (1 subgoal):\n 1. False", "using ns'(4) asm"], ["proof (prove)\nusing this:\n  defNode g r = z\n  defNode g r \\<notin> set (tl ns')\n  z \\<in> set (tl ns')\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<notin> set (tl ns')\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>g \\<turnstile> defNode g ?ra3-?ns'a3\\<rightarrow>?n'a3;\n   ?ra3 \\<in> phiUses g ?n'a3;\n   ?n'a3 \\<in> set (old.predecessors g (defNode g p));\n   defNode g ?ra3 \\<notin> set (tl ?ns'a3); var g ?ra3 = var g p\\<rbrakk>\n  \\<Longrightarrow> z \\<notin> set (tl ?ns'a3)\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "note z_not_on = this"], ["proof (state)\nthis:\n  \\<lbrakk>g \\<turnstile> defNode g ?ra3-?ns'a3\\<rightarrow>?n'a3;\n   ?ra3 \\<in> phiUses g ?n'a3;\n   ?n'a3 \\<in> set (old.predecessors g (defNode g p));\n   defNode g ?ra3 \\<notin> set (tl ?ns'a3); var g ?ra3 = var g p\\<rbrakk>\n  \\<Longrightarrow> z \\<notin> set (tl ?ns'a3)\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "have \"z \\<notin> set (tl ns')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<notin> set (tl ns')", "by (rule z_not_on[OF ns'], simp)"], ["proof (state)\nthis:\n  z \\<notin> set (tl ns')\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  z \\<notin> set (tl ns')\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "have \"z \\<notin> set (tl ms')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<notin> set (tl ms')", "by (rule z_not_on[OF ms'], simp)"], ["proof (state)\nthis:\n  z \\<notin> set (tl ms')\n\ngoal (1 subgoal):\n 1. z \\<noteq> defNode g p \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  z \\<notin> set (tl ns')\n  z \\<notin> set (tl ms')", "show False"], ["proof (prove)\nusing this:\n  z \\<notin> set (tl ns')\n  z \\<notin> set (tl ms')\n\ngoal (1 subgoal):\n 1. False", "using z_on"], ["proof (prove)\nusing this:\n  z \\<notin> set (tl ns')\n  z \\<notin> set (tl ms')\n  z \\<in> set (tl ns') \\<union> set (tl ms')\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  unnecessaryPhi g r \\<or> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "txt \\<open>\nSo r or s must be an unnecessary $\\phi$ function. Without loss of generality, let\nthis be r.\\<close>"], ["proof (state)\nthis:\n  unnecessaryPhi g r \\<or> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  unnecessaryPhi g r \\<or> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix r s"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume r: \"unnecessaryPhi g r\" and[simp]: \"var g r = var g p\""], ["proof (state)\nthis:\n  unnecessaryPhi g r\n  var g r = var g p\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume[simp]: \"var g s = var g p\""], ["proof (state)\nthis:\n  var g s = var g p\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume rs: \"phiArg g p r\" \"phiArg g p s\" \"distinct [p, r, s]\""], ["proof (state)\nthis:\n  phiArg g p r\n  phiArg g p s\n  distinct [p, r, s]\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?R = \"defNode g r\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?S = \"defNode g s\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have[simp]: \"?R \\<noteq> ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> defNode g s", "using rs"], ["proof (prove)\nusing this:\n  phiArg g p r\n  phiArg g p s\n  distinct [p, r, s]\n\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> defNode g s", "by - (rule phiArgs_def_distinct, auto)"], ["proof (state)\nthis:\n  defNode g r \\<noteq> defNode g s\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have[simp]: \"s \\<in> allVars g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> allVars g", "using rs"], ["proof (prove)\nusing this:\n  phiArg g p r\n  phiArg g p s\n  distinct [p, r, s]\n\ngoal (1 subgoal):\n 1. s \\<in> allVars g", "by auto"], ["proof (state)\nthis:\n  s \\<in> allVars g\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"old.dominates g ?R ?P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. def_dominates g r p \\<Longrightarrow> thesis\n 2. \\<not> def_dominates g r p \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  \\<not> def_dominates g r p\n\ngoal (2 subgoals):\n 1. def_dominates g r p \\<Longrightarrow> thesis\n 2. \\<not> def_dominates g r p \\<Longrightarrow> thesis", "txt \\<open>If R does not dominate P, then r is the sought-after q.\\<close>"], ["proof (state)\nthis:\n  \\<not> def_dominates g r p\n\ngoal (2 subgoals):\n 1. def_dominates g r p \\<Longrightarrow> thesis\n 2. \\<not> def_dominates g r p \\<Longrightarrow> thesis", "thus thesis"], ["proof (prove)\nusing this:\n  \\<not> def_dominates g r p\n\ngoal (1 subgoal):\n 1. thesis", "using r rs(1)"], ["proof (prove)\nusing this:\n  \\<not> def_dominates g r p\n  unnecessaryPhi g r\n  phiArg g p r\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  def_dominates g r p\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "txt \\<open>So let R dominate P.\nDue to Lemma 2, S does not dominate P.\\<close>"], ["proof (state)\nthis:\n  def_dominates g r p\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "hence 4: \"\\<not>old.dominates g ?S ?P\""], ["proof (prove)\nusing this:\n  def_dominates g r p\n\ngoal (1 subgoal):\n 1. \\<not> def_dominates g s p", "using 2[OF rs]"], ["proof (prove)\nusing this:\n  def_dominates g r p\n  p \\<in> allVars g \\<Longrightarrow>\n  \\<not> (def_dominates g r p \\<and> def_dominates g s p)\n\ngoal (1 subgoal):\n 1. \\<not> def_dominates g s p", "by simp"], ["proof (state)\nthis:\n  \\<not> def_dominates g s p\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "txt \\<open>Employing the SSA property, r /= p\nyields R /= P.\\<close>"], ["proof (state)\nthis:\n  \\<not> def_dominates g s p\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "(* actually not SSA property *)"], ["proof (state)\nthis:\n  \\<not> def_dominates g s p\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "have \"?R \\<noteq> ?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> defNode g p", "proof (rule notI, rule allDefs_var_disjoint[of ?R g p r, simplified])"], ["proof (state)\ngoal (4 subgoals):\n 1. defNode g r = defNode g p \\<Longrightarrow>\n    defNode g r \\<in> set (\\<alpha>n g)\n 2. defNode g r = defNode g p \\<Longrightarrow>\n    p \\<in> allDefs g (defNode g r)\n 3. defNode g r = defNode g p \\<Longrightarrow>\n    r \\<in> allDefs g (defNode g r)\n 4. defNode g r = defNode g p \\<Longrightarrow> p \\<noteq> r", "show \"r \\<in> allDefs g (defNode g r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> allDefs g (defNode g r)", "using rs(1)"], ["proof (prove)\nusing this:\n  phiArg g p r\n\ngoal (1 subgoal):\n 1. r \\<in> allDefs g (defNode g r)", "by auto"], ["proof (state)\nthis:\n  r \\<in> allDefs g (defNode g r)\n\ngoal (3 subgoals):\n 1. defNode g r = defNode g p \\<Longrightarrow>\n    defNode g r \\<in> set (\\<alpha>n g)\n 2. defNode g r = defNode g p \\<Longrightarrow>\n    p \\<in> allDefs g (defNode g r)\n 3. defNode g r = defNode g p \\<Longrightarrow> p \\<noteq> r", "show \"p \\<noteq> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> r", "using rs(3)"], ["proof (prove)\nusing this:\n  distinct [p, r, s]\n\ngoal (1 subgoal):\n 1. p \\<noteq> r", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> r\n\ngoal (2 subgoals):\n 1. defNode g r = defNode g p \\<Longrightarrow>\n    defNode g r \\<in> set (\\<alpha>n g)\n 2. defNode g r = defNode g p \\<Longrightarrow>\n    p \\<in> allDefs g (defNode g r)", "qed auto"], ["proof (state)\nthis:\n  defNode g r \\<noteq> defNode g p\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "txt \\<open>Thus, R strictly dominates P.\\<close>"], ["proof (state)\nthis:\n  defNode g r \\<noteq> defNode g p\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "hence \"old.strict_dom g ?R ?P\""], ["proof (prove)\nusing this:\n  defNode g r \\<noteq> defNode g p\n\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> defNode g p \\<and> def_dominates g r p", "using True"], ["proof (prove)\nusing this:\n  defNode g r \\<noteq> defNode g p\n  def_dominates g r p\n\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> defNode g p \\<and> def_dominates g r p", "by simp"], ["proof (state)\nthis:\n  defNode g r \\<noteq> defNode g p \\<and> def_dominates g r p\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "txt \\<open>This implies that R dominates all\npredecessors of P, which contain the uses of p, especially the predecessor S' that\ncontains the use of s.\\<close>"], ["proof (state)\nthis:\n  defNode g r \\<noteq> defNode g p \\<and> def_dominates g r p\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  defNode g r \\<noteq> defNode g p \\<and> def_dominates g r p\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "obtain ss' S' where ss': \"g \\<turnstile> ?S-ss'\\<rightarrow>S'\"\n          and S': \"s \\<in> phiUses g S'\" \"S' \\<in> set (old.predecessors g ?P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ss' S'.\n        \\<lbrakk>g \\<turnstile> defNode g s-ss'\\<rightarrow>S';\n         s \\<in> phiUses g S';\n         S' \\<in> set (old.predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule phiArg_path_ex'[OF rs(2)], simp)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n  s \\<in> phiUses g S'\n  S' \\<in> set (old.predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  defNode g r \\<noteq> defNode g p \\<and> def_dominates g r p\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n  s \\<in> phiUses g S'\n  S' \\<in> set (old.predecessors g (defNode g p))", "have 5: \"old.dominates g ?R S'\""], ["proof (prove)\nusing this:\n  defNode g r \\<noteq> defNode g p \\<and> def_dominates g r p\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n  s \\<in> phiUses g S'\n  S' \\<in> set (old.predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g r) S'", "by - (rule old.dominates_unsnoc, auto)"], ["proof (state)\nthis:\n  old.dominates g (defNode g r) S'\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "txt \\<open>Due to the SSA property, there is a path from S to S' that\ndoes not contain R.\\<close>"], ["proof (state)\nthis:\n  old.dominates g (defNode g r) S'\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "from ss'"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'", "obtain ss' where ss': \"g \\<turnstile> ?S-ss'\\<rightarrow>S'\" \"?S \\<notin> set (tl ss')\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n\ngoal (1 subgoal):\n 1. (\\<And>ss'.\n        \\<lbrakk>g \\<turnstile> defNode g s-ss'\\<rightarrow>S';\n         defNode g s \\<notin> set (tl ss')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n  defNode g s \\<notin> set (tl ss')\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "hence \"?R \\<notin> set (tl ss')\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n  defNode g s \\<notin> set (tl ss')\n\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set (tl ss')", "using rs(1,2) S'(1)"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n  defNode g s \\<notin> set (tl ss')\n  phiArg g p r\n  phiArg g p s\n  s \\<in> phiUses g S'\n\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set (tl ss')", "by - (rule conventional'[where v=s and v'=r], auto simp del: phiArg_def)"], ["proof (state)\nthis:\n  defNode g r \\<notin> set (tl ss')\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "txt \\<open>Employing R dominates S' this yields R dominates S.\\<close>"], ["proof (state)\nthis:\n  defNode g r \\<notin> set (tl ss')\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "hence dom: \"old.dominates g ?R ?S\""], ["proof (prove)\nusing this:\n  defNode g r \\<notin> set (tl ss')\n\ngoal (1 subgoal):\n 1. def_dominates g r s", "using 5 ss'"], ["proof (prove)\nusing this:\n  defNode g r \\<notin> set (tl ss')\n  old.dominates g (defNode g r) S'\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n  defNode g s \\<notin> set (tl ss')\n\ngoal (1 subgoal):\n 1. def_dominates g r s", "by - (rule old.dominates_extend)"], ["proof (state)\nthis:\n  def_dominates g r s\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "txt \\<open>Now assume that s is necessary.\\<close>"], ["proof (state)\nthis:\n  def_dominates g r s\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "have \"unnecessaryPhi g s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unnecessaryPhi g s", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "assume s: \"\\<not>unnecessaryPhi g s\""], ["proof (state)\nthis:\n  \\<not> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "txt \\<open>Let X contain the most recent definition of v on a path from the start block to R.\\<close>"], ["proof (state)\nthis:\n  \\<not> unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "from rs(1)"], ["proof (chain)\npicking this:\n  phiArg g p r", "obtain X xs where xs: \"g \\<turnstile> X-xs\\<rightarrow>?R\" \"var g r \\<in> oldDefs g X\" \"old.EntryPath g xs\""], ["proof (prove)\nusing this:\n  phiArg g p r\n\ngoal (1 subgoal):\n 1. (\\<And>X xs.\n        \\<lbrakk>g \\<turnstile> X-xs\\<rightarrow>defNode g r;\n         var g r \\<in> oldDefs g X; old.EntryPath g xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule allDef_path_from_simpleDef[of r g], auto simp del: phiArg_def)"], ["proof (state)\nthis:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  var g r \\<in> oldDefs g X\n  old.EntryPath g xs\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  var g r \\<in> oldDefs g X\n  old.EntryPath g xs", "obtain X xs where xs: \"g \\<turnstile> X-xs\\<rightarrow>?R\" \"var g r \\<in> oldDefs g X\" \"\\<forall>x \\<in> set (tl xs). var g r \\<notin> oldDefs g x\" \"old.EntryPath g xs\""], ["proof (prove)\nusing this:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  var g r \\<in> oldDefs g X\n  old.EntryPath g xs\n\ngoal (1 subgoal):\n 1. (\\<And>X xs.\n        \\<lbrakk>g \\<turnstile> X-xs\\<rightarrow>defNode g r;\n         var g r \\<in> oldDefs g X;\n         \\<forall>x\\<in>set (tl xs). var g r \\<notin> oldDefs g x;\n         old.EntryPath g xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_last_prop[OF xs(1), of \"\\<lambda>x. var g r \\<in> oldDefs g x\"], auto dest: old.EntryPath_suffix)"], ["proof (state)\nthis:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  var g r \\<in> oldDefs g X\n  \\<forall>x\\<in>set (tl xs). var g r \\<notin> oldDefs g x\n  old.EntryPath g xs\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  var g r \\<in> oldDefs g X\n  \\<forall>x\\<in>set (tl xs). var g r \\<notin> oldDefs g x\n  old.EntryPath g xs", "obtain x where x: \"x \\<in> defs g X\" \"var g x = var g r\""], ["proof (prove)\nusing this:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  var g r \\<in> oldDefs g X\n  \\<forall>x\\<in>set (tl xs). var g r \\<notin> oldDefs g x\n  old.EntryPath g xs\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> defs g X; var g x = var g r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: oldDefs_def old.path2_def)"], ["proof (state)\nthis:\n  x \\<in> defs g X\n  var g x = var g r\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "hence[simp]: \"X = defNode g x\""], ["proof (prove)\nusing this:\n  x \\<in> defs g X\n  var g x = var g r\n\ngoal (1 subgoal):\n 1. X = defNode g x", "using xs"], ["proof (prove)\nusing this:\n  x \\<in> defs g X\n  var g x = var g r\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  var g r \\<in> oldDefs g X\n  \\<forall>x\\<in>set (tl xs). var g r \\<notin> oldDefs g x\n  old.EntryPath g xs\n\ngoal (1 subgoal):\n 1. X = defNode g x", "by - (rule defNode_eq[symmetric], auto)"], ["proof (state)\nthis:\n  X = defNode g x\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "from xs"], ["proof (chain)\npicking this:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  var g r \\<in> oldDefs g X\n  \\<forall>x\\<in>set (tl xs). var g r \\<notin> oldDefs g x\n  old.EntryPath g xs", "obtain xs where xs: \"g \\<turnstile> X-xs\\<rightarrow>?R\" \"X \\<notin> set (tl xs)\" \"old.EntryPath g xs\""], ["proof (prove)\nusing this:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  var g r \\<in> oldDefs g X\n  \\<forall>x\\<in>set (tl xs). var g r \\<notin> oldDefs g x\n  old.EntryPath g xs\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>g \\<turnstile> X-xs\\<rightarrow>defNode g r;\n         X \\<notin> set (tl xs); old.EntryPath g xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.simple_path2, auto dest: old.EntryPath_suffix)"], ["proof (state)\nthis:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  X \\<notin> set (tl xs)\n  old.EntryPath g xs\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "txt \\<open>By Definition 2 there are two definitions\nof v that render s necessary. Since R dominates S, the SSA property yields that\none of these definitions is contained in a block Y on a path $R \\rightarrow^+ S$.\\<close>"], ["proof (state)\nthis:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  X \\<notin> set (tl xs)\n  old.EntryPath g xs\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "(* actually not SSA property *)"], ["proof (state)\nthis:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  X \\<notin> set (tl xs)\n  old.EntryPath g xs\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "obtain Y ys ys' where Y: \"var g s \\<in> oldDefs g Y\"\n            and ys: \"g \\<turnstile> Y-ys\\<rightarrow>?S\" \"?R \\<notin> set ys\"\n            and ys': \"g \\<turnstile> ?R-ys'\\<rightarrow>Y\" \"?R \\<notin> set (tl ys')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Y ys ys'.\n        \\<lbrakk>var g s \\<in> oldDefs g Y;\n         g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n         defNode g r \\<notin> set ys;\n         g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n         defNode g r \\<notin> set (tl ys')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (cases \"phi g s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>Y ys ys'.\n                \\<lbrakk>var g s \\<in> oldDefs g Y;\n                 g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                 defNode g r \\<notin> set ys;\n                 g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                 defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     phi g s = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "case None"], ["proof (state)\nthis:\n  phi g s = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>Y ys ys'.\n                \\<lbrakk>var g s \\<in> oldDefs g Y;\n                 g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                 defNode g r \\<notin> set ys;\n                 g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                 defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     phi g s = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence \"s \\<in> defs g ?S\""], ["proof (prove)\nusing this:\n  phi g s = None\n\ngoal (1 subgoal):\n 1. s \\<in> defs g (defNode g s)", "by - (rule defNode_cases[of s g], auto)"], ["proof (state)\nthis:\n  s \\<in> defs g (defNode g s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>Y ys ys'.\n                \\<lbrakk>var g s \\<in> oldDefs g Y;\n                 g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                 defNode g r \\<notin> set ys;\n                 g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                 defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     phi g s = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  s \\<in> defs g (defNode g s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>Y ys ys'.\n                \\<lbrakk>var g s \\<in> oldDefs g Y;\n                 g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                 defNode g r \\<notin> set ys;\n                 g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                 defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     phi g s = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "obtain ns where \"g \\<turnstile> ?R-ns\\<rightarrow>?S\" \"?R \\<notin> set (tl ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g r-ns\\<rightarrow>defNode g s;\n         defNode g r \\<notin> set (tl ns)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using dom"], ["proof (prove)\nusing this:\n  def_dominates g r s\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g r-ns\\<rightarrow>defNode g s;\n         defNode g r \\<notin> set (tl ns)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.dominates_path, auto intro: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g r-ns\\<rightarrow>defNode g s\n  defNode g r \\<notin> set (tl ns)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>Y ys ys'.\n                \\<lbrakk>var g s \\<in> oldDefs g Y;\n                 g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                 defNode g r \\<notin> set ys;\n                 g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                 defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     phi g s = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  s \\<in> defs g (defNode g s)\n  g \\<turnstile> defNode g r-ns\\<rightarrow>defNode g s\n  defNode g r \\<notin> set (tl ns)", "show thesis"], ["proof (prove)\nusing this:\n  s \\<in> defs g (defNode g s)\n  g \\<turnstile> defNode g r-ns\\<rightarrow>defNode g s\n  defNode g r \\<notin> set (tl ns)\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that[where ys1=\"[?S]\"], auto dest: oldDefsI)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Some"], ["proof (state)\nthis:\n  phi g s = Some a_\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "with s"], ["proof (chain)\npicking this:\n  \\<not> unnecessaryPhi g s\n  phi g s = Some a_", "obtain Y\\<^sub>1 ys\\<^sub>1 Y\\<^sub>2 ys\\<^sub>2 where \"var g s \\<in> oldDefs g Y\\<^sub>1\" \"g \\<turnstile> Y\\<^sub>1-ys\\<^sub>1\\<rightarrow>?S\"\n              and \"var g s \\<in> oldDefs g Y\\<^sub>2\" \"g \\<turnstile> Y\\<^sub>2-ys\\<^sub>2\\<rightarrow>?S\"\n              and ys: \"set (butlast ys\\<^sub>1) \\<inter> set (butlast ys\\<^sub>2) = {}\" \"Y\\<^sub>1 \\<noteq> Y\\<^sub>2\""], ["proof (prove)\nusing this:\n  \\<not> unnecessaryPhi g s\n  phi g s = Some a_\n\ngoal (1 subgoal):\n 1. (\\<And>Y\\<^sub>1 ys\\<^sub>1 Y\\<^sub>2 ys\\<^sub>2.\n        \\<lbrakk>var g s \\<in> oldDefs g Y\\<^sub>1;\n         g \\<turnstile> Y\\<^sub>1-ys\\<^sub>1\\<rightarrow>defNode g s;\n         var g s \\<in> oldDefs g Y\\<^sub>2;\n         g \\<turnstile> Y\\<^sub>2-ys\\<^sub>2\\<rightarrow>defNode g s;\n         set (butlast ys\\<^sub>1) \\<inter> set (butlast ys\\<^sub>2) = {};\n         Y\\<^sub>1 \\<noteq> Y\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp:necessaryPhi_def old.pathsConverge'_def)"], ["proof (state)\nthis:\n  var g s \\<in> oldDefs g Y\\<^sub>1\n  g \\<turnstile> Y\\<^sub>1-ys\\<^sub>1\\<rightarrow>defNode g s\n  var g s \\<in> oldDefs g Y\\<^sub>2\n  g \\<turnstile> Y\\<^sub>2-ys\\<^sub>2\\<rightarrow>defNode g s\n  set (butlast ys\\<^sub>1) \\<inter> set (butlast ys\\<^sub>2) = {}\n  Y\\<^sub>1 \\<noteq> Y\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  var g s \\<in> oldDefs g Y\\<^sub>1\n  g \\<turnstile> Y\\<^sub>1-ys\\<^sub>1\\<rightarrow>defNode g s\n  var g s \\<in> oldDefs g Y\\<^sub>2\n  g \\<turnstile> Y\\<^sub>2-ys\\<^sub>2\\<rightarrow>defNode g s\n  set (butlast ys\\<^sub>1) \\<inter> set (butlast ys\\<^sub>2) = {}\n  Y\\<^sub>1 \\<noteq> Y\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "from ys(1)"], ["proof (chain)\npicking this:\n  set (butlast ys\\<^sub>1) \\<inter> set (butlast ys\\<^sub>2) = {}", "have \"?R \\<notin> set (butlast ys\\<^sub>1) \\<or> ?R \\<notin> set (butlast ys\\<^sub>2)\""], ["proof (prove)\nusing this:\n  set (butlast ys\\<^sub>1) \\<inter> set (butlast ys\\<^sub>2) = {}\n\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set (butlast ys\\<^sub>1) \\<or>\n    defNode g r \\<notin> set (butlast ys\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  defNode g r \\<notin> set (butlast ys\\<^sub>1) \\<or>\n  defNode g r \\<notin> set (butlast ys\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  var g s \\<in> oldDefs g Y\\<^sub>1\n  g \\<turnstile> Y\\<^sub>1-ys\\<^sub>1\\<rightarrow>defNode g s\n  var g s \\<in> oldDefs g Y\\<^sub>2\n  g \\<turnstile> Y\\<^sub>2-ys\\<^sub>2\\<rightarrow>defNode g s\n  set (butlast ys\\<^sub>1) \\<inter> set (butlast ys\\<^sub>2) = {}\n  Y\\<^sub>1 \\<noteq> Y\\<^sub>2\n  defNode g r \\<notin> set (butlast ys\\<^sub>1) \\<or>\n  defNode g r \\<notin> set (butlast ys\\<^sub>2)", "obtain Y ys where ys: \"var g s \\<in> oldDefs g Y\" \"g \\<turnstile> Y-ys\\<rightarrow>?S\" \"?R \\<notin> set (butlast ys)\""], ["proof (prove)\nusing this:\n  var g s \\<in> oldDefs g Y\\<^sub>1\n  g \\<turnstile> Y\\<^sub>1-ys\\<^sub>1\\<rightarrow>defNode g s\n  var g s \\<in> oldDefs g Y\\<^sub>2\n  g \\<turnstile> Y\\<^sub>2-ys\\<^sub>2\\<rightarrow>defNode g s\n  set (butlast ys\\<^sub>1) \\<inter> set (butlast ys\\<^sub>2) = {}\n  Y\\<^sub>1 \\<noteq> Y\\<^sub>2\n  defNode g r \\<notin> set (butlast ys\\<^sub>1) \\<or>\n  defNode g r \\<notin> set (butlast ys\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<And>Y ys.\n        \\<lbrakk>var g s \\<in> oldDefs g Y;\n         g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n         defNode g r \\<notin> set (butlast ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  var g s \\<in> oldDefs g Y\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n  defNode g r \\<notin> set (butlast ys)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "obtain es where es: \"g \\<turnstile> Entry g-es\\<rightarrow>Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>es.\n        g \\<turnstile> Entry g-es\\<rightarrow>Y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ys(2)"], ["proof (prove)\nusing this:\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n\ngoal (1 subgoal):\n 1. (\\<And>es.\n        g \\<turnstile> Entry g-es\\<rightarrow>Y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by - (atomize_elim, rule old.Entry_reaches, auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Entry g-es\\<rightarrow>Y\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"?R \\<in> set (butlast es@ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (butlast es @ ys)", "using old.path2_app'[OF es ys(2)]"], ["proof (prove)\nusing this:\n  g \\<turnstile> Entry g-butlast es @ ys\\<rightarrow>defNode g s\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (butlast es @ ys)", "by - (rule old.dominatesE[OF dom])"], ["proof (state)\nthis:\n  defNode g r \\<in> set (butlast es @ ys)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  defNode g r \\<in> set (butlast es @ ys)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"?R \\<noteq> last ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> last ys", "using old.path2_last[OF ys(2), symmetric]"], ["proof (prove)\nusing this:\n  last ys = defNode g s\n\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> last ys", "by simp"], ["proof (state)\nthis:\n  defNode g r \\<noteq> last ys\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence 1: \"?R \\<notin> set ys\""], ["proof (prove)\nusing this:\n  defNode g r \\<noteq> last ys\n\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set ys", "using ys(3)"], ["proof (prove)\nusing this:\n  defNode g r \\<noteq> last ys\n  defNode g r \\<notin> set (butlast ys)\n\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set ys", "by (auto dest: in_set_butlastI)"], ["proof (state)\nthis:\n  defNode g r \\<notin> set ys\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  defNode g r \\<in> set (butlast es @ ys)\n  defNode g r \\<notin> set ys", "have \"?R \\<in> set (butlast es)\""], ["proof (prove)\nusing this:\n  defNode g r \\<in> set (butlast es @ ys)\n  defNode g r \\<notin> set ys\n\ngoal (1 subgoal):\n 1. defNode g r \\<in> set (butlast es)", "by auto"], ["proof (state)\nthis:\n  defNode g r \\<in> set (butlast es)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  defNode g r \\<in> set (butlast es)", "obtain ys' where \"g \\<turnstile> ?R-ys'\\<rightarrow>Y\" \"?R \\<notin> set (tl ys')\""], ["proof (prove)\nusing this:\n  defNode g r \\<in> set (butlast es)\n\ngoal (1 subgoal):\n 1. (\\<And>ys'.\n        \\<lbrakk>g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n         defNode g r \\<notin> set (tl ys')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using es"], ["proof (prove)\nusing this:\n  defNode g r \\<in> set (butlast es)\n  g \\<turnstile> Entry g-es\\<rightarrow>Y\n\ngoal (1 subgoal):\n 1. (\\<And>ys'.\n        \\<lbrakk>g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n         defNode g r \\<notin> set (tl ys')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_ex, assumption, rule in_set_butlastD, auto intro: old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g r-ys'\\<rightarrow>Y\n  defNode g r \\<notin> set (tl ys')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>Y ys ys'.\n                   \\<lbrakk>var g s \\<in> oldDefs g Y;\n                    g \\<turnstile> Y-ys\\<rightarrow>defNode g s;\n                    defNode g r \\<notin> set ys;\n                    g \\<turnstile> defNode g r-ys'\\<rightarrow>Y;\n                    defNode g r \\<notin> set (tl ys')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        phi g s = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus thesis"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g r-ys'\\<rightarrow>Y\n  defNode g r \\<notin> set (tl ys')\n\ngoal (1 subgoal):\n 1. thesis", "using ys(1,2) 1"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g r-ys'\\<rightarrow>Y\n  defNode g r \\<notin> set (tl ys')\n  var g s \\<in> oldDefs g Y\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ys\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that[of Y ys ys'], auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var g s \\<in> oldDefs g Y\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ys\n  g \\<turnstile> defNode g r-ys'\\<rightarrow>Y\n  defNode g r \\<notin> set (tl ys')\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "from Y"], ["proof (chain)\npicking this:\n  var g s \\<in> oldDefs g Y", "obtain y where y: \"y \\<in> defs g Y\" \"var g y = var g s\""], ["proof (prove)\nusing this:\n  var g s \\<in> oldDefs g Y\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> defs g Y; var g y = var g s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: oldDefs_def)"], ["proof (state)\nthis:\n  y \\<in> defs g Y\n  var g y = var g s\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "hence[simp]: \"Y = defNode g y\""], ["proof (prove)\nusing this:\n  y \\<in> defs g Y\n  var g y = var g s\n\ngoal (1 subgoal):\n 1. Y = defNode g y", "using ys"], ["proof (prove)\nusing this:\n  y \\<in> defs g Y\n  var g y = var g s\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ys\n\ngoal (1 subgoal):\n 1. Y = defNode g y", "by - (rule defNode_eq[symmetric], auto)"], ["proof (state)\nthis:\n  Y = defNode g y\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "obtain rr' R' where \"g \\<turnstile> ?R-rr'\\<rightarrow>R'\"\n            and R': \"r \\<in> phiUses g R'\" \"R' \\<in> set (old.predecessors g ?P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>rr' R'.\n        \\<lbrakk>g \\<turnstile> defNode g r-rr'\\<rightarrow>R';\n         r \\<in> phiUses g R';\n         R' \\<in> set (old.predecessors g (defNode g p))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule phiArg_path_ex'[OF rs(1)], simp)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g r-rr'\\<rightarrow>R'\n  r \\<in> phiUses g R'\n  R' \\<in> set (old.predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g r-rr'\\<rightarrow>R'\n  r \\<in> phiUses g R'\n  R' \\<in> set (old.predecessors g (defNode g p))", "obtain rr' where rr': \"g \\<turnstile> ?R-rr'\\<rightarrow>R'\" \"?R \\<notin> set (tl rr')\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g r-rr'\\<rightarrow>R'\n  r \\<in> phiUses g R'\n  R' \\<in> set (old.predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. (\\<And>rr'.\n        \\<lbrakk>g \\<turnstile> defNode g r-rr'\\<rightarrow>R';\n         defNode g r \\<notin> set (tl rr')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.simple_path2)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g r-rr'\\<rightarrow>R'\n  defNode g r \\<notin> set (tl rr')\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "with R'"], ["proof (chain)\npicking this:\n  r \\<in> phiUses g R'\n  R' \\<in> set (old.predecessors g (defNode g p))\n  g \\<turnstile> defNode g r-rr'\\<rightarrow>R'\n  defNode g r \\<notin> set (tl rr')", "obtain rr where rr: \"g \\<turnstile> ?R-rr\\<rightarrow>?P\" and[simp]: \"rr = rr' @ [?P]\""], ["proof (prove)\nusing this:\n  r \\<in> phiUses g R'\n  R' \\<in> set (old.predecessors g (defNode g p))\n  g \\<turnstile> defNode g r-rr'\\<rightarrow>R'\n  defNode g r \\<notin> set (tl rr')\n\ngoal (1 subgoal):\n 1. (\\<And>rr.\n        \\<lbrakk>g \\<turnstile> defNode g r-rr\\<rightarrow>defNode g p;\n         rr = rr' @ [defNode g p]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: old.path2_snoc)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g r-rr\\<rightarrow>defNode g p\n  rr = rr' @ [defNode g p]\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "from ss' S'"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n  defNode g s \\<notin> set (tl ss')\n  s \\<in> phiUses g S'\n  S' \\<in> set (old.predecessors g (defNode g p))", "obtain ss where ss: \"g \\<turnstile> ?S-ss\\<rightarrow>?P\" and[simp]: \"ss = ss' @ [?P]\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n  defNode g s \\<notin> set (tl ss')\n  s \\<in> phiUses g S'\n  S' \\<in> set (old.predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. (\\<And>ss.\n        \\<lbrakk>g \\<turnstile> defNode g s-ss\\<rightarrow>defNode g p;\n         ss = ss' @ [defNode g p]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: old.path2_snoc)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g s-ss\\<rightarrow>defNode g p\n  ss = ss' @ [defNode g p]\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "txt \\<open>Thus, there are paths $X \\rightarrow^+ P$ and $Y \\rightarrow^+ P$ rendering p necessary. Since this is a\ncontradiction, s is unnecessary and the sought-after q.\\<close>"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g s-ss\\<rightarrow>defNode g p\n  ss = ss' @ [defNode g p]\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "have \"old.pathsConverge g X (butlast xs@rr) Y (ys@tl ss) ?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. old.pathsConverge g X (butlast xs @ rr) Y (ys @ tl ss) (defNode g p)", "proof (rule old.pathsConvergeI)"], ["proof (state)\ngoal (5 subgoals):\n 1. g \\<turnstile> X-butlast xs @ rr\\<rightarrow>defNode g p\n 2. g \\<turnstile> Y-ys @ tl ss\\<rightarrow>defNode g p\n 3. 1 < length (butlast xs @ rr)\n 4. 1 < length (ys @ tl ss)\n 5. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "show \"g \\<turnstile> X-butlast xs@rr\\<rightarrow>?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> X-butlast xs @ rr\\<rightarrow>defNode g p", "using xs rr"], ["proof (prove)\nusing this:\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  X \\<notin> set (tl xs)\n  old.EntryPath g xs\n  g \\<turnstile> defNode g r-rr\\<rightarrow>defNode g p\n\ngoal (1 subgoal):\n 1. g \\<turnstile> X-butlast xs @ rr\\<rightarrow>defNode g p", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> X-butlast xs @ rr\\<rightarrow>defNode g p\n\ngoal (4 subgoals):\n 1. g \\<turnstile> Y-ys @ tl ss\\<rightarrow>defNode g p\n 2. 1 < length (butlast xs @ rr)\n 3. 1 < length (ys @ tl ss)\n 4. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "show \"g \\<turnstile> Y-ys@tl ss\\<rightarrow>?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> Y-ys @ tl ss\\<rightarrow>defNode g p", "using ys ss"], ["proof (prove)\nusing this:\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ys\n  g \\<turnstile> defNode g s-ss\\<rightarrow>defNode g p\n\ngoal (1 subgoal):\n 1. g \\<turnstile> Y-ys @ tl ss\\<rightarrow>defNode g p", "by auto"], ["proof (state)\nthis:\n  g \\<turnstile> Y-ys @ tl ss\\<rightarrow>defNode g p\n\ngoal (3 subgoals):\n 1. 1 < length (butlast xs @ rr)\n 2. 1 < length (ys @ tl ss)\n 3. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "{"], ["proof (state)\nthis:\n  g \\<turnstile> Y-ys @ tl ss\\<rightarrow>defNode g p\n\ngoal (3 subgoals):\n 1. 1 < length (butlast xs @ rr)\n 2. 1 < length (ys @ tl ss)\n 3. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "assume \"X = ?P\""], ["proof (state)\nthis:\n  X = defNode g p\n\ngoal (3 subgoals):\n 1. 1 < length (butlast xs @ rr)\n 2. 1 < length (ys @ tl ss)\n 3. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "moreover"], ["proof (state)\nthis:\n  X = defNode g p\n\ngoal (3 subgoals):\n 1. 1 < length (butlast xs @ rr)\n 2. 1 < length (ys @ tl ss)\n 3. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "have \"p \\<in> phiDefs g ?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> phiDefs g (defNode g p)", "using assms(1)"], ["proof (prove)\nusing this:\n  unnecessaryPhi g p\n\ngoal (1 subgoal):\n 1. p \\<in> phiDefs g (defNode g p)", "by (auto simp:phiDefs_def phi_def)"], ["proof (state)\nthis:\n  p \\<in> phiDefs g (defNode g p)\n\ngoal (3 subgoals):\n 1. 1 < length (butlast xs @ rr)\n 2. 1 < length (ys @ tl ss)\n 3. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "ultimately"], ["proof (chain)\npicking this:\n  X = defNode g p\n  p \\<in> phiDefs g (defNode g p)", "have False"], ["proof (prove)\nusing this:\n  X = defNode g p\n  p \\<in> phiDefs g (defNode g p)\n\ngoal (1 subgoal):\n 1. False", "using simpleDefs_phiDefs_disjoint[of X g] allDefs_var_disjoint[of X g] x"], ["proof (prove)\nusing this:\n  X = defNode g p\n  p \\<in> phiDefs g (defNode g p)\n  X \\<in> set (\\<alpha>n g) \\<Longrightarrow>\n  defs g X \\<inter> phiDefs g X = {}\n  \\<lbrakk>X \\<in> set (\\<alpha>n g); ?v \\<in> allDefs g X;\n   ?v' \\<in> allDefs g X; ?v \\<noteq> ?v'\\<rbrakk>\n  \\<Longrightarrow> var g ?v' \\<noteq> var g ?v\n  x \\<in> defs g X\n  var g x = var g r\n\ngoal (1 subgoal):\n 1. False", "by (cases \"x = p\", auto)"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. 1 < length (butlast xs @ rr)\n 2. 1 < length (ys @ tl ss)\n 3. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "}"], ["proof (state)\nthis:\n  X = defNode g p \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. 1 < length (butlast xs @ rr)\n 2. 1 < length (ys @ tl ss)\n 3. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "thus \"length (butlast xs@rr) > 1\""], ["proof (prove)\nusing this:\n  X = defNode g p \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. 1 < length (butlast xs @ rr)", "using xs rr"], ["proof (prove)\nusing this:\n  X = defNode g p \\<Longrightarrow> False\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  X \\<notin> set (tl xs)\n  old.EntryPath g xs\n  g \\<turnstile> defNode g r-rr\\<rightarrow>defNode g p\n\ngoal (1 subgoal):\n 1. 1 < length (butlast xs @ rr)", "by - (rule old.path2_nontriv, auto)"], ["proof (state)\nthis:\n  1 < length (butlast xs @ rr)\n\ngoal (2 subgoals):\n 1. 1 < length (ys @ tl ss)\n 2. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "{"], ["proof (state)\nthis:\n  1 < length (butlast xs @ rr)\n\ngoal (2 subgoals):\n 1. 1 < length (ys @ tl ss)\n 2. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "assume \"Y = ?P\""], ["proof (state)\nthis:\n  Y = defNode g p\n\ngoal (2 subgoals):\n 1. 1 < length (ys @ tl ss)\n 2. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "moreover"], ["proof (state)\nthis:\n  Y = defNode g p\n\ngoal (2 subgoals):\n 1. 1 < length (ys @ tl ss)\n 2. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "have \"p \\<in> phiDefs g ?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> phiDefs g (defNode g p)", "using assms(1)"], ["proof (prove)\nusing this:\n  unnecessaryPhi g p\n\ngoal (1 subgoal):\n 1. p \\<in> phiDefs g (defNode g p)", "by (auto simp:phiDefs_def phi_def)"], ["proof (state)\nthis:\n  p \\<in> phiDefs g (defNode g p)\n\ngoal (2 subgoals):\n 1. 1 < length (ys @ tl ss)\n 2. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "ultimately"], ["proof (chain)\npicking this:\n  Y = defNode g p\n  p \\<in> phiDefs g (defNode g p)", "have False"], ["proof (prove)\nusing this:\n  Y = defNode g p\n  p \\<in> phiDefs g (defNode g p)\n\ngoal (1 subgoal):\n 1. False", "using simpleDefs_phiDefs_disjoint[of Y g] allDefs_var_disjoint[of Y g] y"], ["proof (prove)\nusing this:\n  Y = defNode g p\n  p \\<in> phiDefs g (defNode g p)\n  Y \\<in> set (\\<alpha>n g) \\<Longrightarrow>\n  defs g Y \\<inter> phiDefs g Y = {}\n  \\<lbrakk>Y \\<in> set (\\<alpha>n g); ?v \\<in> allDefs g Y;\n   ?v' \\<in> allDefs g Y; ?v \\<noteq> ?v'\\<rbrakk>\n  \\<Longrightarrow> var g ?v' \\<noteq> var g ?v\n  y \\<in> defs g Y\n  var g y = var g s\n\ngoal (1 subgoal):\n 1. False", "by (cases \"y = p\", auto)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. 1 < length (ys @ tl ss)\n 2. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "}"], ["proof (state)\nthis:\n  Y = defNode g p \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. 1 < length (ys @ tl ss)\n 2. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "thus \"length (ys@tl ss) > 1\""], ["proof (prove)\nusing this:\n  Y = defNode g p \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. 1 < length (ys @ tl ss)", "using ys ss"], ["proof (prove)\nusing this:\n  Y = defNode g p \\<Longrightarrow> False\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ys\n  g \\<turnstile> defNode g s-ss\\<rightarrow>defNode g p\n\ngoal (1 subgoal):\n 1. 1 < length (ys @ tl ss)", "by - (rule old.path2_nontriv, auto)"], ["proof (state)\nthis:\n  1 < length (ys @ tl ss)\n\ngoal (1 subgoal):\n 1. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "show \"set (butlast (butlast xs @rr)) \\<inter> set (butlast (ys @ tl ss)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}", "proof (rule equals0I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "assume \"z \\<in> set (butlast (butlast xs@rr)) \\<inter> set (butlast (ys@tl ss))\""], ["proof (state)\nthis:\n  z \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n          set (butlast (ys @ tl ss))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  z \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n          set (butlast (ys @ tl ss))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "{"], ["proof (state)\nthis:\n  z \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n          set (butlast (ys @ tl ss))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "assume asm: \"z \\<in> set (butlast xs)\" \"z \\<in> set ys\""], ["proof (state)\nthis:\n  z \\<in> set (butlast xs)\n  z \\<in> set ys\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "have \"old.shortestPath g z < old.shortestPath g ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. old.shortestPath g z < old.shortestPath g (defNode g r)", "using asm(1) xs(3)"], ["proof (prove)\nusing this:\n  z \\<in> set (butlast xs)\n  old.EntryPath g xs\n\ngoal (1 subgoal):\n 1. old.shortestPath g z < old.shortestPath g (defNode g r)", "by - (subst old.path2_last[OF xs(1)], rule old.EntryPath_butlast_less_last)"], ["proof (state)\nthis:\n  old.shortestPath g z < old.shortestPath g (defNode g r)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  old.shortestPath g z < old.shortestPath g (defNode g r)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "from ys asm(2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ys\n  z \\<in> set ys", "obtain ys' where ys': \"g \\<turnstile> z-ys'\\<rightarrow>?S\" \"suffix ys' ys\""], ["proof (prove)\nusing this:\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ys\n  z \\<in> set ys\n\ngoal (1 subgoal):\n 1. (\\<And>ys'.\n        \\<lbrakk>g \\<turnstile> z-ys'\\<rightarrow>defNode g s;\n         suffix ys' ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_ex, auto simp: Sublist.suffix_def)"], ["proof (state)\nthis:\n  g \\<turnstile> z-ys'\\<rightarrow>defNode g s\n  suffix ys' ys\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "have \"old.dominates g ?R z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. old.dominates g (defNode g r) z", "using ys(2) set_tl[of ys] suffix_tl_subset[OF ys'(2)]"], ["proof (prove)\nusing this:\n  defNode g r \\<notin> set ys\n  set (tl ys) \\<subseteq> set ys\n  set (tl ys') \\<subseteq> set (tl ys)\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g r) z", "by - (rule old.dominates_extend[OF dom ys'(1)], auto)"], ["proof (state)\nthis:\n  old.dominates g (defNode g r) z\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "hence \"old.shortestPath g ?R \\<le> old.shortestPath g z\""], ["proof (prove)\nusing this:\n  old.dominates g (defNode g r) z\n\ngoal (1 subgoal):\n 1. old.shortestPath g (defNode g r) \\<le> old.shortestPath g z", "by (rule old.dominates_shortestPath_order, auto)"], ["proof (state)\nthis:\n  old.shortestPath g (defNode g r) \\<le> old.shortestPath g z\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "ultimately"], ["proof (chain)\npicking this:\n  old.shortestPath g z < old.shortestPath g (defNode g r)\n  old.shortestPath g (defNode g r) \\<le> old.shortestPath g z", "have False"], ["proof (prove)\nusing this:\n  old.shortestPath g z < old.shortestPath g (defNode g r)\n  old.shortestPath g (defNode g r) \\<le> old.shortestPath g z\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<in> set (butlast xs); z \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<in> set (butlast xs); z \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "{"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<in> set (butlast xs); z \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "assume asm: \"z \\<in> set (butlast xs)\" \"z \\<in> set (tl ss')\""], ["proof (state)\nthis:\n  z \\<in> set (butlast xs)\n  z \\<in> set (tl ss')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "have \"old.shortestPath g z < old.shortestPath g ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. old.shortestPath g z < old.shortestPath g (defNode g r)", "using asm(1) xs(3)"], ["proof (prove)\nusing this:\n  z \\<in> set (butlast xs)\n  old.EntryPath g xs\n\ngoal (1 subgoal):\n 1. old.shortestPath g z < old.shortestPath g (defNode g r)", "by - (subst old.path2_last[OF xs(1)], rule old.EntryPath_butlast_less_last)"], ["proof (state)\nthis:\n  old.shortestPath g z < old.shortestPath g (defNode g r)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  old.shortestPath g z < old.shortestPath g (defNode g r)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "from asm(2)"], ["proof (chain)\npicking this:\n  z \\<in> set (tl ss')", "obtain ss\\<^sub>2 where ss\\<^sub>2: \"g \\<turnstile> z-ss\\<^sub>2\\<rightarrow>S'\" \"set (tl ss\\<^sub>2) \\<subseteq> set (tl ss')\""], ["proof (prove)\nusing this:\n  z \\<in> set (tl ss')\n\ngoal (1 subgoal):\n 1. (\\<And>ss\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> z-ss\\<^sub>2\\<rightarrow>S';\n         set (tl ss\\<^sub>2) \\<subseteq> set (tl ss')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using set_tl[of ss']"], ["proof (prove)\nusing this:\n  z \\<in> set (tl ss')\n  set (tl ss') \\<subseteq> set ss'\n\ngoal (1 subgoal):\n 1. (\\<And>ss\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> z-ss\\<^sub>2\\<rightarrow>S';\n         set (tl ss\\<^sub>2) \\<subseteq> set (tl ss')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_ex[OF ss'(1)], auto simp: old.path2_not_Nil dest: in_set_butlastD)"], ["proof (state)\nthis:\n  g \\<turnstile> z-ss\\<^sub>2\\<rightarrow>S'\n  set (tl ss\\<^sub>2) \\<subseteq> set (tl ss')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "from S'(1) ss'(1)"], ["proof (chain)\npicking this:\n  s \\<in> phiUses g S'\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'", "have \"old.dominates g ?S S'\""], ["proof (prove)\nusing this:\n  s \\<in> phiUses g S'\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g s) S'", "by - (rule allUses_dominated, auto)"], ["proof (state)\nthis:\n  old.dominates g (defNode g s) S'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "hence \"old.dominates g ?S z\""], ["proof (prove)\nusing this:\n  old.dominates g (defNode g s) S'\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g s) z", "using ss'(2) ss\\<^sub>2(2)"], ["proof (prove)\nusing this:\n  old.dominates g (defNode g s) S'\n  defNode g s \\<notin> set (tl ss')\n  set (tl ss\\<^sub>2) \\<subseteq> set (tl ss')\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g s) z", "by - (rule old.dominates_extend[OF _ ss\\<^sub>2(1)], auto)"], ["proof (state)\nthis:\n  old.dominates g (defNode g s) z\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "with dom"], ["proof (chain)\npicking this:\n  def_dominates g r s\n  old.dominates g (defNode g s) z", "have \"old.dominates g ?R z\""], ["proof (prove)\nusing this:\n  def_dominates g r s\n  old.dominates g (defNode g s) z\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g r) z", "by auto"], ["proof (state)\nthis:\n  old.dominates g (defNode g r) z\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "hence \"old.shortestPath g ?R \\<le> old.shortestPath g z\""], ["proof (prove)\nusing this:\n  old.dominates g (defNode g r) z\n\ngoal (1 subgoal):\n 1. old.shortestPath g (defNode g r) \\<le> old.shortestPath g z", "by - (rule old.dominates_shortestPath_order, auto)"], ["proof (state)\nthis:\n  old.shortestPath g (defNode g r) \\<le> old.shortestPath g z\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "ultimately"], ["proof (chain)\npicking this:\n  old.shortestPath g z < old.shortestPath g (defNode g r)\n  old.shortestPath g (defNode g r) \\<le> old.shortestPath g z", "have False"], ["proof (prove)\nusing this:\n  old.shortestPath g z < old.shortestPath g (defNode g r)\n  old.shortestPath g (defNode g r) \\<le> old.shortestPath g z\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<in> set (butlast xs); z \\<in> set (tl ss')\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<in> set (butlast xs); z \\<in> set (tl ss')\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "have \"?R \\<noteq> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> Y", "using ys"], ["proof (prove)\nusing this:\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ys\n\ngoal (1 subgoal):\n 1. defNode g r \\<noteq> Y", "by (auto simp:old.path2_def)"], ["proof (state)\nthis:\n  defNode g r \\<noteq> Y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "with ys'(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g r-ys'\\<rightarrow>Y\n  defNode g r \\<noteq> Y", "have 1: \"length ys' > 1\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g r-ys'\\<rightarrow>Y\n  defNode g r \\<noteq> Y\n\ngoal (1 subgoal):\n 1. 1 < length ys'", "by (rule old.path2_nontriv)"], ["proof (state)\nthis:\n  1 < length ys'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "{"], ["proof (state)\nthis:\n  1 < length ys'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "assume asm: \"z \\<in> set rr'\" \"z \\<in> set ys\""], ["proof (state)\nthis:\n  z \\<in> set rr'\n  z \\<in> set ys\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "then"], ["proof (chain)\npicking this:\n  z \\<in> set rr'\n  z \\<in> set ys", "obtain ys\\<^sub>1 where ys\\<^sub>1: \"g \\<turnstile> Y-ys\\<^sub>1\\<rightarrow>z\" \"prefix ys\\<^sub>1 ys\""], ["proof (prove)\nusing this:\n  z \\<in> set rr'\n  z \\<in> set ys\n\ngoal (1 subgoal):\n 1. (\\<And>ys\\<^sub>1.\n        \\<lbrakk>g \\<turnstile> Y-ys\\<^sub>1\\<rightarrow>z;\n         prefix ys\\<^sub>1 ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_ex[OF ys(1)], auto)"], ["proof (state)\nthis:\n  g \\<turnstile> Y-ys\\<^sub>1\\<rightarrow>z\n  prefix ys\\<^sub>1 ys\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "from asm"], ["proof (chain)\npicking this:\n  z \\<in> set rr'\n  z \\<in> set ys", "obtain rr\\<^sub>2 where rr\\<^sub>2: \"g \\<turnstile> z-rr\\<^sub>2\\<rightarrow>R'\" \"set (tl rr\\<^sub>2) \\<subseteq> set (tl rr')\""], ["proof (prove)\nusing this:\n  z \\<in> set rr'\n  z \\<in> set ys\n\ngoal (1 subgoal):\n 1. (\\<And>rr\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> z-rr\\<^sub>2\\<rightarrow>R';\n         set (tl rr\\<^sub>2) \\<subseteq> set (tl rr')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_ex[OF rr'(1)], auto simp: old.path2_not_Nil)"], ["proof (state)\nthis:\n  g \\<turnstile> z-rr\\<^sub>2\\<rightarrow>R'\n  set (tl rr\\<^sub>2) \\<subseteq> set (tl rr')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "let ?path = \"ys'@tl (ys\\<^sub>1@tl rr\\<^sub>2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "have \"var g y \\<noteq> var g r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var g y \\<noteq> var g r", "proof (rule conventional)"], ["proof (state)\ngoal (6 subgoals):\n 1. g \\<turnstile> ?n-?ns\\<rightarrow>?m\n 2. ?n \\<notin> set (tl ?ns)\n 3. r \\<in> allDefs g ?n\n 4. r \\<in> allUses g ?m\n 5. ?x \\<in> set (tl ?ns)\n 6. y \\<in> allDefs g ?x", "show \"g \\<turnstile> ?R-?path\\<rightarrow>R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g\n                    r-ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)\\<rightarrow>R'", "using ys' ys\\<^sub>1 rr\\<^sub>2"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g r-ys'\\<rightarrow>Y\n  defNode g r \\<notin> set (tl ys')\n  g \\<turnstile> Y-ys\\<^sub>1\\<rightarrow>z\n  prefix ys\\<^sub>1 ys\n  g \\<turnstile> z-rr\\<^sub>2\\<rightarrow>R'\n  set (tl rr\\<^sub>2) \\<subseteq> set (tl rr')\n\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g\n                    r-ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)\\<rightarrow>R'", "by (intro old.path2_app)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g\n                  r-ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)\\<rightarrow>R'\n\ngoal (5 subgoals):\n 1. defNode g r \\<notin> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))\n 2. r \\<in> allDefs g (defNode g r)\n 3. r \\<in> allUses g R'\n 4. ?x \\<in> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))\n 5. y \\<in> allDefs g ?x", "show \"r \\<in> allDefs g ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> allDefs g (defNode g r)", "using rs"], ["proof (prove)\nusing this:\n  phiArg g p r\n  phiArg g p s\n  distinct [p, r, s]\n\ngoal (1 subgoal):\n 1. r \\<in> allDefs g (defNode g r)", "by auto"], ["proof (state)\nthis:\n  r \\<in> allDefs g (defNode g r)\n\ngoal (4 subgoals):\n 1. defNode g r \\<notin> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))\n 2. r \\<in> allUses g R'\n 3. ?x \\<in> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))\n 4. y \\<in> allDefs g ?x", "show \"r \\<in> allUses g R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> allUses g R'", "using R'"], ["proof (prove)\nusing this:\n  r \\<in> phiUses g R'\n  R' \\<in> set (old.predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. r \\<in> allUses g R'", "by auto"], ["proof (state)\nthis:\n  r \\<in> allUses g R'\n\ngoal (3 subgoals):\n 1. defNode g r \\<notin> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))\n 2. ?x \\<in> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))\n 3. y \\<in> allDefs g ?x", "thus \"Y \\<in> set (tl ?path)\""], ["proof (prove)\nusing this:\n  r \\<in> allUses g R'\n\ngoal (1 subgoal):\n 1. Y \\<in> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))", "using ys'(1) 1"], ["proof (prove)\nusing this:\n  r \\<in> allUses g R'\n  g \\<turnstile> defNode g r-ys'\\<rightarrow>Y\n  1 < length ys'\n\ngoal (1 subgoal):\n 1. Y \\<in> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))", "by (auto simp:old.path2_def old.path2_not_Nil intro:last_in_tl)"], ["proof (state)\nthis:\n  Y \\<in> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))\n\ngoal (2 subgoals):\n 1. defNode g r \\<notin> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))\n 2. y \\<in> allDefs g Y", "show \"y \\<in> allDefs g Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> allDefs g Y", "using y"], ["proof (prove)\nusing this:\n  y \\<in> defs g Y\n  var g y = var g s\n\ngoal (1 subgoal):\n 1. y \\<in> allDefs g Y", "by simp"], ["proof (state)\nthis:\n  y \\<in> allDefs g Y\n\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))", "show \"defNode g r \\<notin> set (tl ?path)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))", "using ys' ys\\<^sub>1(1) ys(2) rr\\<^sub>2(2) rr'(2) prefix_tl_subset[OF ys\\<^sub>1(2)] set_tl[of ys]"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g r-ys'\\<rightarrow>Y\n  defNode g r \\<notin> set (tl ys')\n  g \\<turnstile> Y-ys\\<^sub>1\\<rightarrow>z\n  defNode g r \\<notin> set ys\n  set (tl rr\\<^sub>2) \\<subseteq> set (tl rr')\n  defNode g r \\<notin> set (tl rr')\n  set (tl ys\\<^sub>1) \\<subseteq> set (tl ys)\n  set (tl ys) \\<subseteq> set ys\n\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))", "by (auto simp: old.path2_not_Nil)"], ["proof (state)\nthis:\n  defNode g r \\<notin> set (tl (ys' @ tl (ys\\<^sub>1 @ tl rr\\<^sub>2)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var g y \\<noteq> var g r\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "hence False"], ["proof (prove)\nusing this:\n  var g y \\<noteq> var g r\n\ngoal (1 subgoal):\n 1. False", "using y"], ["proof (prove)\nusing this:\n  var g y \\<noteq> var g r\n  y \\<in> defs g Y\n  var g y = var g s\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<in> set rr'; z \\<in> set ys\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<in> set rr'; z \\<in> set ys\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "{"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<in> set rr'; z \\<in> set ys\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "assume asm: \"z \\<in> set rr'\" \"z \\<in> set (tl ss')\""], ["proof (state)\nthis:\n  z \\<in> set rr'\n  z \\<in> set (tl ss')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "then"], ["proof (chain)\npicking this:\n  z \\<in> set rr'\n  z \\<in> set (tl ss')", "obtain ss'\\<^sub>1 where ss'\\<^sub>1: \"g \\<turnstile> ?S-ss'\\<^sub>1\\<rightarrow>z\" \"prefix ss'\\<^sub>1 ss'\""], ["proof (prove)\nusing this:\n  z \\<in> set rr'\n  z \\<in> set (tl ss')\n\ngoal (1 subgoal):\n 1. (\\<And>ss'\\<^sub>1.\n        \\<lbrakk>g \\<turnstile> defNode g s-ss'\\<^sub>1\\<rightarrow>z;\n         prefix ss'\\<^sub>1 ss'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ss'"], ["proof (prove)\nusing this:\n  z \\<in> set rr'\n  z \\<in> set (tl ss')\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n  defNode g s \\<notin> set (tl ss')\n\ngoal (1 subgoal):\n 1. (\\<And>ss'\\<^sub>1.\n        \\<lbrakk>g \\<turnstile> defNode g s-ss'\\<^sub>1\\<rightarrow>z;\n         prefix ss'\\<^sub>1 ss'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_ex[OF ss'(1), of z], auto)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g s-ss'\\<^sub>1\\<rightarrow>z\n  prefix ss'\\<^sub>1 ss'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "from asm"], ["proof (chain)\npicking this:\n  z \\<in> set rr'\n  z \\<in> set (tl ss')", "obtain rr'\\<^sub>2 where rr'\\<^sub>2: \"g \\<turnstile> z-rr'\\<^sub>2\\<rightarrow>R'\" \"suffix rr'\\<^sub>2 rr'\""], ["proof (prove)\nusing this:\n  z \\<in> set rr'\n  z \\<in> set (tl ss')\n\ngoal (1 subgoal):\n 1. (\\<And>rr'\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> z-rr'\\<^sub>2\\<rightarrow>R';\n         suffix rr'\\<^sub>2 rr'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rr'"], ["proof (prove)\nusing this:\n  z \\<in> set rr'\n  z \\<in> set (tl ss')\n  g \\<turnstile> defNode g r-rr'\\<rightarrow>R'\n  defNode g r \\<notin> set (tl rr')\n\ngoal (1 subgoal):\n 1. (\\<And>rr'\\<^sub>2.\n        \\<lbrakk>g \\<turnstile> z-rr'\\<^sub>2\\<rightarrow>R';\n         suffix rr'\\<^sub>2 rr'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule old.path2_split_ex, auto simp: Sublist.suffix_def)"], ["proof (state)\nthis:\n  g \\<turnstile> z-rr'\\<^sub>2\\<rightarrow>R'\n  suffix rr'\\<^sub>2 rr'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "let ?path = \"butlast ys'@(ys@tl (ss'\\<^sub>1@tl rr'\\<^sub>2))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "have \"var g s \\<noteq> var g r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var g s \\<noteq> var g r", "proof (rule conventional)"], ["proof (state)\ngoal (6 subgoals):\n 1. g \\<turnstile> ?n-?ns\\<rightarrow>?m\n 2. ?n \\<notin> set (tl ?ns)\n 3. r \\<in> allDefs g ?n\n 4. r \\<in> allUses g ?m\n 5. ?x \\<in> set (tl ?ns)\n 6. s \\<in> allDefs g ?x", "show \"g \\<turnstile> ?R-?path\\<rightarrow>R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g\n                    r-butlast ys' @\n                      ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)\\<rightarrow>R'", "using ys' ys ss'\\<^sub>1 rr'\\<^sub>2(1)"], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g r-ys'\\<rightarrow>Y\n  defNode g r \\<notin> set (tl ys')\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n  defNode g r \\<notin> set ys\n  g \\<turnstile> defNode g s-ss'\\<^sub>1\\<rightarrow>z\n  prefix ss'\\<^sub>1 ss'\n  g \\<turnstile> z-rr'\\<^sub>2\\<rightarrow>R'\n\ngoal (1 subgoal):\n 1. g \\<turnstile> defNode g\n                    r-butlast ys' @\n                      ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)\\<rightarrow>R'", "by (intro old.path2_app old.path2_app')"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g\n                  r-butlast ys' @\n                    ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)\\<rightarrow>R'\n\ngoal (5 subgoals):\n 1. defNode g r\n    \\<notin> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))\n 2. r \\<in> allDefs g (defNode g r)\n 3. r \\<in> allUses g R'\n 4. ?x \\<in> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))\n 5. s \\<in> allDefs g ?x", "show \"r \\<in> allDefs g ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> allDefs g (defNode g r)", "using rs"], ["proof (prove)\nusing this:\n  phiArg g p r\n  phiArg g p s\n  distinct [p, r, s]\n\ngoal (1 subgoal):\n 1. r \\<in> allDefs g (defNode g r)", "by auto"], ["proof (state)\nthis:\n  r \\<in> allDefs g (defNode g r)\n\ngoal (4 subgoals):\n 1. defNode g r\n    \\<notin> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))\n 2. r \\<in> allUses g R'\n 3. ?x \\<in> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))\n 4. s \\<in> allDefs g ?x", "show \"r \\<in> allUses g R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> allUses g R'", "using R'"], ["proof (prove)\nusing this:\n  r \\<in> phiUses g R'\n  R' \\<in> set (old.predecessors g (defNode g p))\n\ngoal (1 subgoal):\n 1. r \\<in> allUses g R'", "by auto"], ["proof (state)\nthis:\n  r \\<in> allUses g R'\n\ngoal (3 subgoals):\n 1. defNode g r\n    \\<notin> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))\n 2. ?x \\<in> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))\n 3. s \\<in> allDefs g ?x", "from 1"], ["proof (chain)\npicking this:\n  1 < length ys'", "have[simp]: \"butlast ys' \\<noteq> []\""], ["proof (prove)\nusing this:\n  1 < length ys'\n\ngoal (1 subgoal):\n 1. butlast ys' \\<noteq> []", "by (cases ys', auto)"], ["proof (state)\nthis:\n  butlast ys' \\<noteq> []\n\ngoal (3 subgoals):\n 1. defNode g r\n    \\<notin> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))\n 2. ?x \\<in> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))\n 3. s \\<in> allDefs g ?x", "show \"?S \\<in> set (tl ?path)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g s\n    \\<in> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))", "using ys(1)"], ["proof (prove)\nusing this:\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n\ngoal (1 subgoal):\n 1. defNode g s\n    \\<in> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))", "by auto"], ["proof (state)\nthis:\n  defNode g s\n  \\<in> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))\n\ngoal (2 subgoals):\n 1. defNode g r\n    \\<notin> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))\n 2. s \\<in> allDefs g (defNode g s)", "show \"s \\<in> allDefs g ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> allDefs g (defNode g s)", "using rs(2)"], ["proof (prove)\nusing this:\n  phiArg g p s\n\ngoal (1 subgoal):\n 1. s \\<in> allDefs g (defNode g s)", "by auto"], ["proof (state)\nthis:\n  s \\<in> allDefs g (defNode g s)\n\ngoal (1 subgoal):\n 1. defNode g r\n    \\<notin> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))", "have \"?R \\<notin> set (tl ss')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set (tl ss')", "using rs S'(1)"], ["proof (prove)\nusing this:\n  phiArg g p r\n  phiArg g p s\n  distinct [p, r, s]\n  s \\<in> phiUses g S'\n\ngoal (1 subgoal):\n 1. defNode g r \\<notin> set (tl ss')", "by - (rule conventional''[OF ss'], auto)"], ["proof (state)\nthis:\n  defNode g r \\<notin> set (tl ss')\n\ngoal (1 subgoal):\n 1. defNode g r\n    \\<notin> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))", "thus \"defNode g r \\<notin> set (tl ?path)\""], ["proof (prove)\nusing this:\n  defNode g r \\<notin> set (tl ss')\n\ngoal (1 subgoal):\n 1. defNode g r\n    \\<notin> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))", "using ys(1) ss'\\<^sub>1(1) suffix_tl_subset[OF rr'\\<^sub>2(2)] ys'(2) ys(2) rr'(2) prefix_tl_subset[OF ss'\\<^sub>1(2)]"], ["proof (prove)\nusing this:\n  defNode g r \\<notin> set (tl ss')\n  g \\<turnstile> Y-ys\\<rightarrow>defNode g s\n  g \\<turnstile> defNode g s-ss'\\<^sub>1\\<rightarrow>z\n  set (tl rr'\\<^sub>2) \\<subseteq> set (tl rr')\n  defNode g r \\<notin> set (tl ys')\n  defNode g r \\<notin> set ys\n  defNode g r \\<notin> set (tl rr')\n  set (tl ss'\\<^sub>1) \\<subseteq> set (tl ss')\n\ngoal (1 subgoal):\n 1. defNode g r\n    \\<notin> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))", "by (auto simp: List.butlast_tl[symmetric] old.path2_not_Nil dest: in_set_butlastD)"], ["proof (state)\nthis:\n  defNode g r\n  \\<notin> set (tl (butlast ys' @ ys @ tl (ss'\\<^sub>1 @ tl rr'\\<^sub>2)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var g s \\<noteq> var g r\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "hence False"], ["proof (prove)\nusing this:\n  var g s \\<noteq> var g r\n\ngoal (1 subgoal):\n 1. False", "using y"], ["proof (prove)\nusing this:\n  var g s \\<noteq> var g r\n  y \\<in> defs g Y\n  var g y = var g s\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<in> set rr'; z \\<in> set (tl ss')\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n               set (butlast (ys @ tl ss)) \\<Longrightarrow>\n       False", "ultimately"], ["proof (chain)\npicking this:\n  z \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n          set (butlast (ys @ tl ss))\n  \\<lbrakk>z \\<in> set (butlast xs); z \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>z \\<in> set (butlast xs); z \\<in> set (tl ss')\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>z \\<in> set rr'; z \\<in> set ys\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>z \\<in> set rr'; z \\<in> set (tl ss')\\<rbrakk>\n  \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  z \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n          set (butlast (ys @ tl ss))\n  \\<lbrakk>z \\<in> set (butlast xs); z \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>z \\<in> set (butlast xs); z \\<in> set (tl ss')\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>z \\<in> set rr'; z \\<in> set ys\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>z \\<in> set rr'; z \\<in> set (tl ss')\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "using rr'(1) ss'(1)"], ["proof (prove)\nusing this:\n  z \\<in> set (butlast (butlast xs @ rr)) \\<inter>\n          set (butlast (ys @ tl ss))\n  \\<lbrakk>z \\<in> set (butlast xs); z \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>z \\<in> set (butlast xs); z \\<in> set (tl ss')\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>z \\<in> set rr'; z \\<in> set ys\\<rbrakk> \\<Longrightarrow> False\n  \\<lbrakk>z \\<in> set rr'; z \\<in> set (tl ss')\\<rbrakk>\n  \\<Longrightarrow> False\n  g \\<turnstile> defNode g r-rr'\\<rightarrow>R'\n  g \\<turnstile> defNode g s-ss'\\<rightarrow>S'\n\ngoal (1 subgoal):\n 1. False", "by (auto simp del: append_assoc simp: append_assoc[symmetric] old.path2_not_Nil dest: in_set_tlD)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (butlast (butlast xs @ rr)) \\<inter> set (butlast (ys @ tl ss)) = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  old.pathsConverge g X (butlast xs @ rr) Y (ys @ tl ss) (defNode g p)\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "hence \"necessaryPhi' g p\""], ["proof (prove)\nusing this:\n  old.pathsConverge g X (butlast xs @ rr) Y (ys @ tl ss) (defNode g p)\n\ngoal (1 subgoal):\n 1. necessaryPhi' g p", "using xs oldDefsI[OF x(1)] x(2) oldDefsI[OF y(1)] y(2)"], ["proof (prove)\nusing this:\n  old.pathsConverge g X (butlast xs @ rr) Y (ys @ tl ss) (defNode g p)\n  g \\<turnstile> X-xs\\<rightarrow>defNode g r\n  X \\<notin> set (tl xs)\n  old.EntryPath g xs\n  var g x \\<in> oldDefs g X\n  var g x = var g r\n  var g y \\<in> oldDefs g Y\n  var g y = var g s\n\ngoal (1 subgoal):\n 1. necessaryPhi' g p", "by - (rule necessaryPhiI[where v=\"var g p\"], assumption, auto simp:old.path2_def)"], ["proof (state)\nthis:\n  necessaryPhi' g p\n\ngoal (1 subgoal):\n 1. \\<not> unnecessaryPhi g s \\<Longrightarrow> False", "with assms(1)"], ["proof (chain)\npicking this:\n  unnecessaryPhi g p\n  necessaryPhi' g p", "show False"], ["proof (prove)\nusing this:\n  unnecessaryPhi g p\n  necessaryPhi' g p\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. def_dominates g r p \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  unnecessaryPhi g s\n\ngoal (1 subgoal):\n 1. thesis", "using rs(2) 4"], ["proof (prove)\nusing this:\n  unnecessaryPhi g s\n  phiArg g p s\n  \\<not> def_dominates g s p\n\ngoal (1 subgoal):\n 1. thesis", "by - (rule that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  \\<lbrakk>unnecessaryPhi g ?ra3; var g ?ra3 = var g p;\n   var g ?sa3 = var g p; phiArg g p ?ra3; phiArg g p ?sa3;\n   distinct [p, ?ra3, ?sa3]\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>phiArg g p q; unnecessaryPhi g q;\n         \\<not> def_dominates g q p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from one_unnec this[of r s] this[of s r] rs"], ["proof (chain)\npicking this:\n  unnecessaryPhi g r \\<or> unnecessaryPhi g s\n  \\<lbrakk>unnecessaryPhi g r; var g r = var g p; var g s = var g p;\n   phiArg g p r; phiArg g p s; distinct [p, r, s]\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>unnecessaryPhi g s; var g s = var g p; var g r = var g p;\n   phiArg g p s; phiArg g p r; distinct [p, s, r]\\<rbrakk>\n  \\<Longrightarrow> thesis\n  phiArg g p r\n  phiArg g p s\n  distinct [p, r, s]", "show thesis"], ["proof (prove)\nusing this:\n  unnecessaryPhi g r \\<or> unnecessaryPhi g s\n  \\<lbrakk>unnecessaryPhi g r; var g r = var g p; var g s = var g p;\n   phiArg g p r; phiArg g p s; distinct [p, r, s]\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>unnecessaryPhi g s; var g s = var g p; var g r = var g p;\n   phiArg g p s; phiArg g p r; distinct [p, s, r]\\<rbrakk>\n  \\<Longrightarrow> thesis\n  phiArg g p r\n  phiArg g p s\n  distinct [p, r, s]\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Theorem 1. A program in SSA form with a reducible CFG G without any trivial $\\phi$ functions is in minimal SSA form.\\<close>"], ["", "theorem reducible_nonredundant_imp_minimal:\n    assumes \"old.reducible g\" \"\\<not>redundant g\"\n    shows \"cytronMinimal g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cytronMinimal g", "unfolding cytronMinimal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>allVars g.\n       phi g v \\<noteq> None \\<longrightarrow> necessaryPhi' g v", "proof (rule, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> allVars g; phi g v \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> necessaryPhi' g v", "txt \\<open>\nProof. Assume G is not in minimal SSA form and contains no trivial $\\phi$ functions.\nWe choose an unnecessary $\\phi$ function p.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> allVars g; phi g v \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> necessaryPhi' g v", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> allVars g; phi g v \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> necessaryPhi' g v", "assume[simp]: \"p \\<in> allVars g\" and phi: \"phi g p \\<noteq> None\""], ["proof (state)\nthis:\n  p \\<in> allVars g\n  phi g p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> allVars g; phi g v \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> necessaryPhi' g v", "show \"necessaryPhi' g p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. necessaryPhi' g p", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "assume \"\\<not>necessaryPhi' g p\""], ["proof (state)\nthis:\n  \\<not> necessaryPhi' g p\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "with phi"], ["proof (chain)\npicking this:\n  phi g p \\<noteq> None\n  \\<not> necessaryPhi' g p", "have asm: \"unnecessaryPhi g p\""], ["proof (prove)\nusing this:\n  phi g p \\<noteq> None\n  \\<not> necessaryPhi' g p\n\ngoal (1 subgoal):\n 1. unnecessaryPhi g p", "by (simp add: unnecessaryPhi_def)"], ["proof (state)\nthis:\n  unnecessaryPhi g p\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "let ?A = \"{p. p \\<in> allVars g \\<and> unnecessaryPhi g p}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "let ?r = \"\\<lambda>p q. p \\<in> ?A \\<and> q \\<in> ?A \\<and> phiArg g p q \\<and> \\<not>def_dominates g q p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "let ?r' = \"{(p,q). ?r p q}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "note phiArg_def[simp del]"], ["proof (state)\nthis:\n  phiArg ?g ?v ?v' \\<equiv>\n  \\<exists>vs. phi ?g ?v = Some vs \\<and> ?v' \\<in> set vs\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "txt \\<open>Due to Lemma 3, p has an operand q,\nwhich is unnecessary and does not dominate p. By induction q has an unnecessary\n$\\phi$ function as operand as well and so on. Since the program only has a finite\nnumber of operations, there must be a cycle when following the q chain.\\<close>"], ["proof (state)\nthis:\n  phiArg ?g ?v ?v' \\<equiv>\n  \\<exists>vs. phi ?g ?v = Some vs \\<and> ?v' \\<in> set vs\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "obtain q where q: \"(q,q) \\<in> ?r'\\<^sup>+\" \"q \\<in> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>(q, q)\n                 \\<in> {(p, q).\n                        p \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        q \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        phiArg g p q \\<and>\n                        \\<not> def_dominates g q p}\\<^sup>+;\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (rule serial_on_finite_cycle)"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<And>q.\n        \\<lbrakk>(q, q)\n                 \\<in> {(p, q).\n                        p \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        q \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        phiArg g p q \\<and>\n                        \\<not> def_dominates g q p}\\<^sup>+;\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    serial_on ?A3 ?r3\n 2. (\\<And>q.\n        \\<lbrakk>(q, q)\n                 \\<in> {(p, q).\n                        p \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        q \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        phiArg g p q \\<and>\n                        \\<not> def_dominates g q p}\\<^sup>+;\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?A3 \\<noteq> {}\n 3. (\\<And>q.\n        \\<lbrakk>(q, q)\n                 \\<in> {(p, q).\n                        p \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        q \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        phiArg g p q \\<and>\n                        \\<not> def_dominates g q p}\\<^sup>+;\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite ?A3\n 4. \\<And>a.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>(q, q)\n                            \\<in> {(p, q).\n                                   p \\<in> {p \\<in> allVars g.\n      unnecessaryPhi g p} \\<and>\n                                   q \\<in> {p \\<in> allVars g.\n      unnecessaryPhi g p} \\<and>\n                                   phiArg g p q \\<and>\n                                   \\<not> def_dominates g q p}\\<^sup>+;\n                    q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        a \\<in> ?A3; (a, a) \\<in> ?r3\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"serial_on ?A ?r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. serial_on {p \\<in> allVars g. unnecessaryPhi g p}\n     {(p, q).\n      p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n      q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n      phiArg g p q \\<and> \\<not> def_dominates g q p}", "proof (rule serial_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<Longrightarrow>\n       \\<exists>y\\<in>{p \\<in> allVars g. unnecessaryPhi g p}.\n          (x, y)\n          \\<in> {(p, q).\n                 p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                 q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                 phiArg g p q \\<and> \\<not> def_dominates g q p}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<Longrightarrow>\n       \\<exists>y\\<in>{p \\<in> allVars g. unnecessaryPhi g p}.\n          (x, y)\n          \\<in> {(p, q).\n                 p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                 q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                 phiArg g p q \\<and> \\<not> def_dominates g q p}", "assume \"x \\<in> ?A\""], ["proof (state)\nthis:\n  x \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<Longrightarrow>\n       \\<exists>y\\<in>{p \\<in> allVars g. unnecessaryPhi g p}.\n          (x, y)\n          \\<in> {(p, q).\n                 p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                 q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                 phiArg g p q \\<and> \\<not> def_dominates g q p}", "then"], ["proof (chain)\npicking this:\n  x \\<in> {p \\<in> allVars g. unnecessaryPhi g p}", "obtain y where \"unnecessaryPhi g y\" \"phiArg g x y\" \"\\<not>def_dominates g y x\""], ["proof (prove)\nusing this:\n  x \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>unnecessaryPhi g y; phiArg g x y;\n         \\<not> def_dominates g y x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2)"], ["proof (prove)\nusing this:\n  x \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\n  \\<not> redundant g\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>unnecessaryPhi g y; phiArg g x y;\n         \\<not> def_dominates g y x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule 3, auto simp: redundant_def)"], ["proof (state)\nthis:\n  unnecessaryPhi g y\n  phiArg g x y\n  \\<not> def_dominates g y x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<Longrightarrow>\n       \\<exists>y\\<in>{p \\<in> allVars g. unnecessaryPhi g p}.\n          (x, y)\n          \\<in> {(p, q).\n                 p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                 q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                 phiArg g p q \\<and> \\<not> def_dominates g q p}", "thus \"\\<exists>y \\<in> ?A. (x,y) \\<in> ?r'\""], ["proof (prove)\nusing this:\n  unnecessaryPhi g y\n  phiArg g x y\n  \\<not> def_dominates g y x\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>{p \\<in> allVars g. unnecessaryPhi g p}.\n       (x, y)\n       \\<in> {(p, q).\n              p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n              q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n              phiArg g p q \\<and> \\<not> def_dominates g q p}", "using \\<open>x \\<in> ?A\\<close>"], ["proof (prove)\nusing this:\n  unnecessaryPhi g y\n  phiArg g x y\n  \\<not> def_dominates g y x\n  x \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>{p \\<in> allVars g. unnecessaryPhi g p}.\n       (x, y)\n       \\<in> {(p, q).\n              p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n              q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n              phiArg g p q \\<and> \\<not> def_dominates g q p}", "by - (rule bexI[where x=y], auto)"], ["proof (state)\nthis:\n  \\<exists>y\\<in>{p \\<in> allVars g. unnecessaryPhi g p}.\n     (x, y)\n     \\<in> {(p, q).\n            p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n            q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n            phiArg g p q \\<and> \\<not> def_dominates g q p}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  serial_on {p \\<in> allVars g. unnecessaryPhi g p}\n   {(p, q).\n    p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n    q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n    phiArg g p q \\<and> \\<not> def_dominates g q p}\n\ngoal (3 subgoals):\n 1. (\\<And>q.\n        \\<lbrakk>(q, q)\n                 \\<in> {(p, q).\n                        p \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        q \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        phiArg g p q \\<and>\n                        \\<not> def_dominates g q p}\\<^sup>+;\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    {p \\<in> allVars g. unnecessaryPhi g p} \\<noteq> {}\n 2. (\\<And>q.\n        \\<lbrakk>(q, q)\n                 \\<in> {(p, q).\n                        p \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        q \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        phiArg g p q \\<and>\n                        \\<not> def_dominates g q p}\\<^sup>+;\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite {p \\<in> allVars g. unnecessaryPhi g p}\n 3. \\<And>a.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>(q, q)\n                            \\<in> {(p, q).\n                                   p \\<in> {p \\<in> allVars g.\n      unnecessaryPhi g p} \\<and>\n                                   q \\<in> {p \\<in> allVars g.\n      unnecessaryPhi g p} \\<and>\n                                   phiArg g p q \\<and>\n                                   \\<not> def_dominates g q p}\\<^sup>+;\n                    q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        a \\<in> {p \\<in> allVars g. unnecessaryPhi g p};\n        (a, a)\n        \\<in> {(p, q).\n               p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n               q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n               phiArg g p q \\<and>\n               \\<not> def_dominates g q p}\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"?A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p \\<in> allVars g. unnecessaryPhi g p} \\<noteq> {}", "using asm"], ["proof (prove)\nusing this:\n  unnecessaryPhi g p\n\ngoal (1 subgoal):\n 1. {p \\<in> allVars g. unnecessaryPhi g p} \\<noteq> {}", "by (auto intro!: exI)"], ["proof (state)\nthis:\n  {p \\<in> allVars g. unnecessaryPhi g p} \\<noteq> {}\n\ngoal (2 subgoals):\n 1. (\\<And>q.\n        \\<lbrakk>(q, q)\n                 \\<in> {(p, q).\n                        p \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        q \\<in> {p \\<in> allVars g.\n                                 unnecessaryPhi g p} \\<and>\n                        phiArg g p q \\<and>\n                        \\<not> def_dominates g q p}\\<^sup>+;\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite {p \\<in> allVars g. unnecessaryPhi g p}\n 2. \\<And>a.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>(q, q)\n                            \\<in> {(p, q).\n                                   p \\<in> {p \\<in> allVars g.\n      unnecessaryPhi g p} \\<and>\n                                   q \\<in> {p \\<in> allVars g.\n      unnecessaryPhi g p} \\<and>\n                                   phiArg g p q \\<and>\n                                   \\<not> def_dominates g q p}\\<^sup>+;\n                    q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        a \\<in> {p \\<in> allVars g. unnecessaryPhi g p};\n        (a, a)\n        \\<in> {(p, q).\n               p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n               q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n               phiArg g p q \\<and>\n               \\<not> def_dominates g q p}\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed auto"], ["proof (state)\nthis:\n  (q, q)\n  \\<in> {(p, q).\n         p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         phiArg g p q \\<and> \\<not> def_dominates g q p}\\<^sup>+\n  q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "txt \\<open>A cycle in the $\\phi$ functions implies a cycle in G.\\<close>"], ["proof (state)\nthis:\n  (q, q)\n  \\<in> {(p, q).\n         p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         phiArg g p q \\<and> \\<not> def_dominates g q p}\\<^sup>+\n  q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  (q, q)\n  \\<in> {(p, q).\n         p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         phiArg g p q \\<and> \\<not> def_dominates g q p}\\<^sup>+\n  q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}", "obtain ns where ns: \"g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g q\" \"length ns > 1\"\n        \"\\<forall>n \\<in> set (butlast ns). \\<exists>p q m ns'. ?r p q \\<and> g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and> (defNode g q) \\<notin> set (tl ns') \\<and> q \\<in> phiUses g m \\<and> m \\<in> set (old.predecessors g (defNode g p)) \\<and> n \\<in> set ns' \\<and> set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\""], ["proof (prove)\nusing this:\n  (q, q)\n  \\<in> {(p, q).\n         p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         phiArg g p q \\<and> \\<not> def_dominates g q p}\\<^sup>+\n  q \\<in> {p \\<in> allVars g. unnecessaryPhi g p}\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g q;\n         1 < length ns;\n         \\<forall>n\\<in>set (butlast ns).\n            \\<exists>p q m ns'.\n               (p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                phiArg g p q \\<and> \\<not> def_dominates g q p) \\<and>\n               g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n               defNode g q \\<notin> set (tl ns') \\<and>\n               q \\<in> phiUses g m \\<and>\n               m \\<in> set (old.predecessors g (defNode g p)) \\<and>\n               n \\<in> set ns' \\<and>\n               set ns' \\<subseteq> set ns \\<and>\n               defNode g p \\<in> set ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (rule phiArg_tranclp_path_ex[where r=\"?r\"], auto simp: tranclp_unfold)"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g q\n  1 < length ns\n  \\<forall>n\\<in>set (butlast ns).\n     \\<exists>p q m ns'.\n        (p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         phiArg g p q \\<and> \\<not> def_dominates g q p) \\<and>\n        g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n        defNode g q \\<notin> set (tl ns') \\<and>\n        q \\<in> phiUses g m \\<and>\n        m \\<in> set (old.predecessors g (defNode g p)) \\<and>\n        n \\<in> set ns' \\<and>\n        set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "txt \\<open>As G is reducible, the control flow\ncycle contains one entry block, which dominates all other blocks in the cycle.\\<close>"], ["proof (state)\nthis:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g q\n  1 < length ns\n  \\<forall>n\\<in>set (butlast ns).\n     \\<exists>p q m ns'.\n        (p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n         phiArg g p q \\<and> \\<not> def_dominates g q p) \\<and>\n        g \\<turnstile> defNode g q-ns'\\<rightarrow>m \\<and>\n        defNode g q \\<notin> set (tl ns') \\<and>\n        q \\<in> phiUses g m \\<and>\n        m \\<in> set (old.predecessors g (defNode g p)) \\<and>\n        n \\<in> set ns' \\<and>\n        set ns' \\<subseteq> set ns \\<and> defNode g p \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "obtain n where n: \"n \\<in> set ns\" \"\\<forall>m \\<in> set ns. old.dominates g n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> set ns;\n         \\<forall>m\\<in>set ns. old.dominates g n m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)[unfolded old.reducible_def, rule_format, OF ns(1)]"], ["proof (prove)\nusing this:\n  \\<exists>m\\<in>set ns. Ball (set ns) (old.dominates g m)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> set ns;\n         \\<forall>m\\<in>set ns. old.dominates g n m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n \\<in> set ns\n  \\<forall>m\\<in>set ns. old.dominates g n m\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "txt \\<open>Without loss of generality, let q be in the entry block, which means it dominates p.\\<close>"], ["proof (state)\nthis:\n  n \\<in> set ns\n  \\<forall>m\\<in>set ns. old.dominates g n m\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "have \"n \\<in> set (butlast ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> set (butlast ns)", "proof (cases \"n = last ns\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = last ns \\<Longrightarrow> n \\<in> set (butlast ns)\n 2. n \\<noteq> last ns \\<Longrightarrow> n \\<in> set (butlast ns)", "case False"], ["proof (state)\nthis:\n  n \\<noteq> last ns\n\ngoal (2 subgoals):\n 1. n = last ns \\<Longrightarrow> n \\<in> set (butlast ns)\n 2. n \\<noteq> last ns \\<Longrightarrow> n \\<in> set (butlast ns)", "with n(1)"], ["proof (chain)\npicking this:\n  n \\<in> set ns\n  n \\<noteq> last ns", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<in> set ns\n  n \\<noteq> last ns\n\ngoal (1 subgoal):\n 1. n \\<in> set (butlast ns)", "by (rule in_set_butlastI)"], ["proof (state)\nthis:\n  n \\<in> set (butlast ns)\n\ngoal (1 subgoal):\n 1. n = last ns \\<Longrightarrow> n \\<in> set (butlast ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n = last ns \\<Longrightarrow> n \\<in> set (butlast ns)", "case True"], ["proof (state)\nthis:\n  n = last ns\n\ngoal (1 subgoal):\n 1. n = last ns \\<Longrightarrow> n \\<in> set (butlast ns)", "with ns(1)"], ["proof (chain)\npicking this:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g q\n  n = last ns", "have \"n = hd ns\""], ["proof (prove)\nusing this:\n  g \\<turnstile> defNode g q-ns\\<rightarrow>defNode g q\n  n = last ns\n\ngoal (1 subgoal):\n 1. n = hd ns", "by (auto simp: old.path2_def)"], ["proof (state)\nthis:\n  n = hd ns\n\ngoal (1 subgoal):\n 1. n = last ns \\<Longrightarrow> n \\<in> set (butlast ns)", "with ns(2)"], ["proof (chain)\npicking this:\n  1 < length ns\n  n = hd ns", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < length ns\n  n = hd ns\n\ngoal (1 subgoal):\n 1. n \\<in> set (butlast ns)", "by - (auto intro: hd_in_butlast)"], ["proof (state)\nthis:\n  n \\<in> set (butlast ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n \\<in> set (butlast ns)\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n \\<in> set (butlast ns)", "obtain p q ns' m where ns': \"?r p q\" \"g \\<turnstile> defNode g q-ns'\\<rightarrow>m\" \"defNode g q \\<notin> set (tl ns')\" \"q \\<in> phiUses g m\" \"m \\<in> set (old.predecessors g (defNode g p))\" \"n \\<in> set ns'\" \"set ns' \\<subseteq> set ns\" \"defNode g p \\<in> set ns\""], ["proof (prove)\nusing this:\n  n \\<in> set (butlast ns)\n\ngoal (1 subgoal):\n 1. (\\<And>p q ns' m.\n        \\<lbrakk>p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                 q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n                 phiArg g p q \\<and> \\<not> def_dominates g q p;\n         g \\<turnstile> defNode g q-ns'\\<rightarrow>m;\n         defNode g q \\<notin> set (tl ns'); q \\<in> phiUses g m;\n         m \\<in> set (old.predecessors g (defNode g p)); n \\<in> set ns';\n         set ns' \\<subseteq> set ns; defNode g p \\<in> set ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (drule ns(3)[THEN bspec], auto)"], ["proof (state)\nthis:\n  p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  phiArg g p q \\<and> \\<not> def_dominates g q p\n  g \\<turnstile> defNode g q-ns'\\<rightarrow>m\n  defNode g q \\<notin> set (tl ns')\n  q \\<in> phiUses g m\n  m \\<in> set (old.predecessors g (defNode g p))\n  n \\<in> set ns'\n  set ns' \\<subseteq> set ns\n  defNode g p \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p__ \\<Longrightarrow> False", "hence \"old.dominates g (defNode g q) n\""], ["proof (prove)\nusing this:\n  p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  phiArg g p q \\<and> \\<not> def_dominates g q p\n  g \\<turnstile> defNode g q-ns'\\<rightarrow>m\n  defNode g q \\<notin> set (tl ns')\n  q \\<in> phiUses g m\n  m \\<in> set (old.predecessors g (defNode g p))\n  n \\<in> set ns'\n  set ns' \\<subseteq> set ns\n  defNode g p \\<in> set ns\n\ngoal (1 subgoal):\n 1. old.dominates g (defNode g q) n", "by - (rule defUse_path_dominated, auto)"], ["proof (state)\nthis:\n  old.dominates g (defNode g q) n\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p__ \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  old.dominates g (defNode g q) n\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p__ \\<Longrightarrow> False", "from ns' n(2)"], ["proof (chain)\npicking this:\n  p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  phiArg g p q \\<and> \\<not> def_dominates g q p\n  g \\<turnstile> defNode g q-ns'\\<rightarrow>m\n  defNode g q \\<notin> set (tl ns')\n  q \\<in> phiUses g m\n  m \\<in> set (old.predecessors g (defNode g p))\n  n \\<in> set ns'\n  set ns' \\<subseteq> set ns\n  defNode g p \\<in> set ns\n  \\<forall>m\\<in>set ns. old.dominates g n m", "have n_dom: \"old.dominates g n (defNode g q)\" \"old.dominates g n (defNode g p)\""], ["proof (prove)\nusing this:\n  p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  phiArg g p q \\<and> \\<not> def_dominates g q p\n  g \\<turnstile> defNode g q-ns'\\<rightarrow>m\n  defNode g q \\<notin> set (tl ns')\n  q \\<in> phiUses g m\n  m \\<in> set (old.predecessors g (defNode g p))\n  n \\<in> set ns'\n  set ns' \\<subseteq> set ns\n  defNode g p \\<in> set ns\n  \\<forall>m\\<in>set ns. old.dominates g n m\n\ngoal (1 subgoal):\n 1. old.dominates g n (defNode g q) &&& old.dominates g n (defNode g p)", "by - (auto elim!:bspec)"], ["proof (state)\nthis:\n  old.dominates g n (defNode g q)\n  old.dominates g n (defNode g p)\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p__ \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  old.dominates g (defNode g q) n\n  old.dominates g n (defNode g q)\n  old.dominates g n (defNode g p)", "have \"defNode g q = n\""], ["proof (prove)\nusing this:\n  old.dominates g (defNode g q) n\n  old.dominates g n (defNode g q)\n  old.dominates g n (defNode g p)\n\ngoal (1 subgoal):\n 1. defNode g q = n", "by auto"], ["proof (state)\nthis:\n  defNode g q = n\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p__ \\<Longrightarrow> False", "txt \\<open>Therefore, our assumption is wrong and G is either in minimal SSA form or there exist trivial $\\phi$ functions.\\<close>"], ["proof (state)\nthis:\n  defNode g q = n\n\ngoal (1 subgoal):\n 1. \\<not> necessaryPhi' g p__ \\<Longrightarrow> False", "with ns'(1) n_dom(2)"], ["proof (chain)\npicking this:\n  p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  phiArg g p q \\<and> \\<not> def_dominates g q p\n  old.dominates g n (defNode g p)\n  defNode g q = n", "show False"], ["proof (prove)\nusing this:\n  p \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  q \\<in> {p \\<in> allVars g. unnecessaryPhi g p} \\<and>\n  phiArg g p q \\<and> \\<not> def_dominates g q p\n  old.dominates g n (defNode g p)\n  defNode g q = n\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  necessaryPhi' g p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context CFG_SSA_Transformed\nbegin"], ["", "definition \"phiCount g = card ((\\<lambda>(n,v). (n, var g v)) ` dom (phis g))\""], ["", "lemma phiCount: \"phiCount g = card (dom (phis g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phiCount g = card (dom (phis g))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. phiCount g = card (dom (phis g))", "have 1: \"v = v'\"\n      if asm: \"phis g (n, v) \\<noteq> None\" \"phis g (n, v') \\<noteq> None\" \"var g v = var g v'\"\n      for n v v'"], ["proof (prove)\ngoal (1 subgoal):\n 1. v = v'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow> False", "from asm"], ["proof (chain)\npicking this:\n  phis g (n, v) \\<noteq> None\n  phis g (n, v') \\<noteq> None\n  var g v = var g v'", "have[simp]: \"v \\<in> allDefs g n\" \"v' \\<in> allDefs g n\""], ["proof (prove)\nusing this:\n  phis g (n, v) \\<noteq> None\n  phis g (n, v') \\<noteq> None\n  var g v = var g v'\n\ngoal (1 subgoal):\n 1. v \\<in> allDefs g n &&& v' \\<in> allDefs g n", "by (auto simp: phiDefs_def allDefs_def)"], ["proof (state)\nthis:\n  v \\<in> allDefs g n\n  v' \\<in> allDefs g n\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow> False", "from asm"], ["proof (chain)\npicking this:\n  phis g (n, v) \\<noteq> None\n  phis g (n, v') \\<noteq> None\n  var g v = var g v'", "have[simp]: \"n \\<in> set (\\<alpha>n g)\""], ["proof (prove)\nusing this:\n  phis g (n, v) \\<noteq> None\n  phis g (n, v') \\<noteq> None\n  var g v = var g v'\n\ngoal (1 subgoal):\n 1. n \\<in> set (\\<alpha>n g)", "by - (auto simp: phis_in_\\<alpha>n)"], ["proof (state)\nthis:\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow> False", "assume \"v \\<noteq> v'\""], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow> False", "with asm"], ["proof (chain)\npicking this:\n  phis g (n, v) \\<noteq> None\n  phis g (n, v') \\<noteq> None\n  var g v = var g v'\n  v \\<noteq> v'", "show False"], ["proof (prove)\nusing this:\n  phis g (n, v) \\<noteq> None\n  phis g (n, v') \\<noteq> None\n  var g v = var g v'\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. False", "by - (rule allDefs_var_disjoint[of n g v v', THEN notE], auto)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>phis g (?n1, ?v1) \\<noteq> None;\n   phis g (?n1, ?v'1) \\<noteq> None; var g ?v1 = var g ?v'1\\<rbrakk>\n  \\<Longrightarrow> ?v1 = ?v'1\n\ngoal (1 subgoal):\n 1. phiCount g = card (dom (phis g))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. phiCount g = card (dom (phis g))", "unfolding phiCount_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>(n, v). (n, var g v)) ` dom (phis g)) =\n    card (dom (phis g))", "apply (rule card_image)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(n, v). (n, var g v)) (dom (phis g))", "apply (rule inj_onI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> dom (phis g); y \\<in> dom (phis g);\n        (case x of (n, v) \\<Rightarrow> (n, var g v)) =\n        (case y of (n, v) \\<Rightarrow> (n, var g v))\\<rbrakk>\n       \\<Longrightarrow> x = y", "by (auto intro!: 1)"], ["proof (state)\nthis:\n  phiCount g = card (dom (phis g))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem phi_count_minimal:\n    assumes \"cytronMinimal g\" \"pruned g\"\n    assumes \"CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges' Entry oldDefs oldUses defs' uses' phis' var'\"\n    shows \"card (dom (phis g)) \\<le> card (dom (phis' g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "interpret other: CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges' Entry oldDefs oldUses defs' uses' phis' var'"], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_SSA_Transformed \\<alpha>e \\<alpha>n invar inEdges' Entry oldDefs\n     oldUses defs' uses' phis' var'", "by (rule assms(3))"], ["proof (state)\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "fix n v"], ["proof (state)\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "assume asm: \"phis g (n,v) \\<noteq> None\""], ["proof (state)\nthis:\n  phis g (n, v) \\<noteq> None\n\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "from asm"], ["proof (chain)\npicking this:\n  phis g (n, v) \\<noteq> None", "have[simp]: \"v \\<in> phiDefs g n\" \"v \\<in> allDefs g n\""], ["proof (prove)\nusing this:\n  phis g (n, v) \\<noteq> None\n\ngoal (1 subgoal):\n 1. v \\<in> phiDefs g n &&& v \\<in> allDefs g n", "by (auto simp: phiDefs_def allDefs_def)"], ["proof (state)\nthis:\n  v \\<in> phiDefs g n\n  v \\<in> allDefs g n\n\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "from asm"], ["proof (chain)\npicking this:\n  phis g (n, v) \\<noteq> None", "have[simp]: \"defNode g v = n\" \"n \\<in> set (\\<alpha>n g)\""], ["proof (prove)\nusing this:\n  phis g (n, v) \\<noteq> None\n\ngoal (1 subgoal):\n 1. defNode g v = n &&& n \\<in> set (\\<alpha>n g)", "by - (auto simp: phis_in_\\<alpha>n)"], ["proof (state)\nthis:\n  defNode g v = n\n  n \\<in> set (\\<alpha>n g)\n\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "from asm"], ["proof (chain)\npicking this:\n  phis g (n, v) \\<noteq> None", "have \"liveVal g v\""], ["proof (prove)\nusing this:\n  phis g (n, v) \\<noteq> None\n\ngoal (1 subgoal):\n 1. liveVal g v", "by - (rule \\<open>pruned g\\<close>[unfolded pruned_def, THEN bspec, of n, rule_format]; simp)"], ["proof (state)\nthis:\n  liveVal g v\n\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "then"], ["proof (chain)\npicking this:\n  liveVal g v", "obtain ns m where ns: \"g \\<turnstile> n-ns\\<rightarrow>m\" \"var g v \\<in> oldUses g m\" \"\\<And>x. x \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g x\""], ["proof (prove)\nusing this:\n  liveVal g v\n\ngoal (1 subgoal):\n 1. (\\<And>ns m.\n        \\<lbrakk>g \\<turnstile> n-ns\\<rightarrow>m;\n         var g v \\<in> oldUses g m;\n         \\<And>x.\n            x \\<in> set (tl ns) \\<Longrightarrow>\n            var g v \\<notin> oldDefs g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule liveVal_use_path, simp)"], ["proof (state)\nthis:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  var g v \\<in> oldUses g m\n  ?x1 \\<in> set (tl ns) \\<Longrightarrow> var g v \\<notin> oldDefs g ?x1\n\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "have \"\\<exists>v'. phis' g (n,v') \\<noteq> None \\<and> var g v = var' g v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v'. phis' g (n, v') \\<noteq> None \\<and> var g v = var' g v'", "proof (rule other.convergence_prop'[OF _ ns(1)])"], ["proof (state)\ngoal (4 subgoals):\n 1. other.necessaryPhi g ?v n\n 2. ?v \\<in> var' g ` other.allUses g m\n 3. \\<And>x. x \\<in> set ns \\<Longrightarrow> ?v \\<notin> oldDefs g x\n 4. \\<And>val.\n       \\<lbrakk>var' g val = ?v; phis' g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'.\n                            phis' g (n, v') \\<noteq> None \\<and>\n                            var g v = var' g v'", "from asm"], ["proof (chain)\npicking this:\n  phis g (n, v) \\<noteq> None", "show \"necessaryPhi g (var g v) n\""], ["proof (prove)\nusing this:\n  phis g (n, v) \\<noteq> None\n\ngoal (1 subgoal):\n 1. other.necessaryPhi g (var g v) n", "by - (rule \\<open>cytronMinimal g\\<close>[unfolded cytronMinimal_def, THEN bspec, of v, simplified, rule_format],\n            auto simp: cytronMinimal_def phi_def, auto intro: allDefs_in_allVars[where n=n])"], ["proof (state)\nthis:\n  other.necessaryPhi g (var g v) n\n\ngoal (3 subgoals):\n 1. var g v \\<in> var' g ` other.allUses g m\n 2. \\<And>x. x \\<in> set ns \\<Longrightarrow> var g v \\<notin> oldDefs g x\n 3. \\<And>val.\n       \\<lbrakk>var' g val = var g v;\n        phis' g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'.\n                            phis' g (n, v') \\<noteq> None \\<and>\n                            var g v = var' g v'", "with ns(1,2)"], ["proof (chain)\npicking this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  var g v \\<in> oldUses g m\n  other.necessaryPhi g (var g v) n", "show \"var g v \\<in> var' g ` other.allUses g m\""], ["proof (prove)\nusing this:\n  g \\<turnstile> n-ns\\<rightarrow>m\n  var g v \\<in> oldUses g m\n  other.necessaryPhi g (var g v) n\n\ngoal (1 subgoal):\n 1. var g v \\<in> var' g ` other.allUses g m", "by (subst(asm) other.oldUses_def, auto simp: image_def allUses_def other.oldUses_def intro!: bexI)"], ["proof (state)\nthis:\n  var g v \\<in> var' g ` other.allUses g m\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set ns \\<Longrightarrow> var g v \\<notin> oldDefs g x\n 2. \\<And>val.\n       \\<lbrakk>var' g val = var g v;\n        phis' g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'.\n                            phis' g (n, v') \\<noteq> None \\<and>\n                            var g v = var' g v'", "have \"var g v \\<notin> oldDefs g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var g v \\<notin> oldDefs g n", "by (rule simpleDefs_phiDefs_var_disjoint, auto)"], ["proof (state)\nthis:\n  var g v \\<notin> oldDefs g n\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set ns \\<Longrightarrow> var g v \\<notin> oldDefs g x\n 2. \\<And>val.\n       \\<lbrakk>var' g val = var g v;\n        phis' g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'.\n                            phis' g (n, v') \\<noteq> None \\<and>\n                            var g v = var' g v'", "then"], ["proof (chain)\npicking this:\n  var g v \\<notin> oldDefs g n", "show \"\\<And>x. x \\<in> set ns \\<Longrightarrow> var g v \\<notin> oldDefs g x\""], ["proof (prove)\nusing this:\n  var g v \\<notin> oldDefs g n\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ns \\<Longrightarrow> var g v \\<notin> oldDefs g x", "using ns(1)"], ["proof (prove)\nusing this:\n  var g v \\<notin> oldDefs g n\n  g \\<turnstile> n-ns\\<rightarrow>m\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ns \\<Longrightarrow> var g v \\<notin> oldDefs g x", "by (case_tac \"x = hd ns\", auto dest: ns(3) not_hd_in_tl dest: old.path2_hd)"], ["proof (state)\nthis:\n  ?x1 \\<in> set ns \\<Longrightarrow> var g v \\<notin> oldDefs g ?x1\n\ngoal (1 subgoal):\n 1. \\<And>val.\n       \\<lbrakk>var' g val = var g v;\n        phis' g (n, val) \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'.\n                            phis' g (n, v') \\<noteq> None \\<and>\n                            var g v = var' g v'", "qed auto"], ["proof (state)\nthis:\n  \\<exists>v'. phis' g (n, v') \\<noteq> None \\<and> var g v = var' g v'\n\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "}"], ["proof (state)\nthis:\n  phis g (?n3, ?v3) \\<noteq> None \\<Longrightarrow>\n  \\<exists>v'. phis' g (?n3, v') \\<noteq> None \\<and> var g ?v3 = var' g v'\n\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "note 1 = this"], ["proof (state)\nthis:\n  phis g (?n3, ?v3) \\<noteq> None \\<Longrightarrow>\n  \\<exists>v'. phis' g (?n3, v') \\<noteq> None \\<and> var g ?v3 = var' g v'\n\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "have \"phiCount g \\<le> other.phiCount g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phiCount g \\<le> other.phiCount g", "unfolding phiCount_def other.phiCount_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>(n, v). (n, var g v)) ` dom (phis g))\n    \\<le> card ((\\<lambda>(n, v). (n, var' g v)) ` dom (phis' g))", "apply (rule card_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite ((\\<lambda>(n, v). (n, var' g v)) ` dom (phis' g))\n 2. (\\<lambda>(n, v). (n, var g v)) ` dom (phis g)\n    \\<subseteq> (\\<lambda>(n, v). (n, var' g v)) ` dom (phis' g)", "apply (rule finite_imageI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite (dom (phis' g))\n 2. (\\<lambda>(n, v). (n, var g v)) ` dom (phis g)\n    \\<subseteq> (\\<lambda>(n, v). (n, var' g v)) ` dom (phis' g)", "apply (rule other.phis_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(n, v). (n, var g v)) ` dom (phis g)\n    \\<subseteq> (\\<lambda>(n, v). (n, var' g v)) ` dom (phis' g)", "by (auto simp: dom_def image_def simp del: not_None_eq intro!: 1)"], ["proof (state)\nthis:\n  phiCount g \\<le> other.phiCount g\n\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "thus ?thesis"], ["proof (prove)\nusing this:\n  phiCount g \\<le> other.phiCount g\n\ngoal (1 subgoal):\n 1. card (dom (phis g)) \\<le> card (dom (phis' g))", "by (simp add: phiCount other.phiCount)"], ["proof (state)\nthis:\n  card (dom (phis g)) \\<le> card (dom (phis' g))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}