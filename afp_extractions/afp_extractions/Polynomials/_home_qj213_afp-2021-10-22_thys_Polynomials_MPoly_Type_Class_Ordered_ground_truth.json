{"file_name": "/home/qj213/afp-2021-10-22/thys/Polynomials/MPoly_Type_Class_Ordered.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Polynomials", "problem_names": ["lemma min_term_min: \"min_term \\<preceq>\\<^sub>t v\"", "lemma splus_mono_strict:\n  assumes \"v \\<prec>\\<^sub>t w\"\n  shows \"t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w\"", "lemma splus_mono_left:\n  assumes \"s \\<preceq> t\"\n  shows \"s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v\"", "lemma splus_mono_strict_left:\n  assumes \"s \\<prec> t\"\n  shows \"s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v\"", "lemma ord_term_canc:\n  assumes \"t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> w\"\n  shows \"v \\<preceq>\\<^sub>t w\"", "lemma ord_term_strict_canc:\n  assumes \"t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w\"\n  shows \"v \\<prec>\\<^sub>t w\"", "lemma ord_term_canc_left:\n  assumes \"t \\<oplus> v \\<preceq>\\<^sub>t s \\<oplus> v\"\n  shows \"t \\<preceq> s\"", "lemma ord_term_strict_canc_left:\n  assumes \"t \\<oplus> v \\<prec>\\<^sub>t s \\<oplus> v\"\n  shows \"t \\<prec> s\"", "lemma ord_adds_term:\n  assumes \"u adds\\<^sub>t v\"\n  shows \"u \\<preceq>\\<^sub>t v\"", "lemma punit_min_term [simp]: \"punit.min_term = 0\"", "lemma lt_zero [simp]: \"lt 0 = min_term\"", "lemma lc_zero [simp]: \"lc 0 = 0\"", "lemma lt_uminus [simp]: \"lt (- p) = lt p\"", "lemma lc_uminus [simp]: \"lc (- p) = - lc p\"", "lemma lt_alt:\n  assumes \"p \\<noteq> 0\"\n  shows \"lt p = ord_term_lin.Max (keys p)\"", "lemma lt_max:\n  assumes \"lookup p v \\<noteq> 0\"\n  shows \"v \\<preceq>\\<^sub>t lt p\"", "lemma lt_eqI:\n  assumes \"lookup p v \\<noteq> 0\" and \"\\<And>u. lookup p u \\<noteq> 0 \\<Longrightarrow> u \\<preceq>\\<^sub>t v\"\n  shows \"lt p = v\"", "lemma lt_less:\n  assumes \"p \\<noteq> 0\" and \"\\<And>u. v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = 0\"\n  shows \"lt p \\<prec>\\<^sub>t v\"", "lemma lt_le:\n  assumes \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = 0\"\n  shows \"lt p \\<preceq>\\<^sub>t v\"", "lemma lt_gr:\n  assumes \"lookup p s \\<noteq> 0\" and \"t \\<prec>\\<^sub>t s\"\n  shows \"t \\<prec>\\<^sub>t lt p\"", "lemma lc_not_0:\n  assumes \"p \\<noteq> 0\"\n  shows \"lc p \\<noteq> 0\"", "lemma lc_eq_zero_iff: \"lc p = 0 \\<longleftrightarrow> p = 0\"", "lemma lt_in_keys:\n  assumes \"p \\<noteq> 0\"\n  shows \"lt p \\<in> (keys p)\"", "lemma lt_monomial:\n  assumes \"c \\<noteq> 0\"\n  shows \"lt (monomial c t) = t\"", "lemma lc_monomial [simp]: \"lc (monomial c t) = c\"", "lemma lt_le_iff: \"lt p \\<preceq>\\<^sub>t v \\<longleftrightarrow> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = 0)\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma lt_plus_eqI:\n  assumes \"lt p \\<prec>\\<^sub>t lt q\"\n  shows \"lt (p + q) = lt q\"", "lemma lt_plus_eqI_2:\n  assumes \"lt q \\<prec>\\<^sub>t lt p\"\n  shows \"lt (p + q) = lt p\"", "lemma lt_plus_eqI_3:\n  assumes \"lt q = lt p\" and \"lc p + lc q \\<noteq> 0\"\n  shows \"lt (p + q) = lt (p::'t \\<Rightarrow>\\<^sub>0 'b::monoid_add)\"", "lemma lt_plus_lessE:\n  assumes \"lt p \\<prec>\\<^sub>t lt (p + q)\"\n  shows \"lt p \\<prec>\\<^sub>t lt q\"", "lemma lt_plus_lessE_2:\n  assumes \"lt q \\<prec>\\<^sub>t lt (p + q)\"\n  shows \"lt q \\<prec>\\<^sub>t lt p\"", "lemma lt_plus_lessI':\n  fixes p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::monoid_add\"\n  assumes \"p + q \\<noteq> 0\" and lt_eq: \"lt q = lt p\" and lc_eq: \"lc p + lc q = 0\"\n  shows \"lt (p + q) \\<prec>\\<^sub>t lt p\"", "lemma lt_plus_distinct_eq_max:\n  assumes \"lt p \\<noteq> lt q\"\n  shows \"lt (p + q) = ord_term_lin.max (lt p) (lt q)\"", "lemma lt_plus_le_max: \"lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)\"", "lemma lt_minus_eqI: \"lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> lt (p - q) = lt q\" for p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add\"", "lemma lt_minus_eqI_2: \"lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> lt (p - q) = lt p\" for p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add\"", "lemma lt_minus_eqI_3:\n  assumes \"lt q = lt p\" and \"lc q \\<noteq> lc p\"\n  shows \"lt (p - q) = lt (p::'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add)\"", "lemma lt_minus_distinct_eq_max:\n  assumes \"lt p \\<noteq> lt (q::'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add)\"\n  shows \"lt (p - q) = ord_term_lin.max (lt p) (lt q)\"", "lemma lt_minus_lessE: \"lt p \\<prec>\\<^sub>t lt (p - q) \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt q\" for p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add\"", "lemma lt_minus_lessE_2: \"lt q \\<prec>\\<^sub>t lt (p - q) \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt p\" for p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add\"", "lemma lt_minus_lessI: \"p - q \\<noteq> 0 \\<Longrightarrow> lt q = lt p \\<Longrightarrow> lc q = lc p \\<Longrightarrow> lt (p - q) \\<prec>\\<^sub>t lt p\"\n  for p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add\"", "lemma lt_max_keys:\n  assumes \"v \\<in> keys p\"\n  shows \"v \\<preceq>\\<^sub>t lt p\"", "lemma lt_eqI_keys:\n  assumes \"v \\<in> keys p\" and a2: \"\\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<preceq>\\<^sub>t v\"\n  shows \"lt p = v\"", "lemma lt_gr_keys:\n  assumes \"u \\<in> keys p\" and \"v \\<prec>\\<^sub>t u\"\n  shows \"v \\<prec>\\<^sub>t lt p\"", "lemma lt_plus_eq_maxI:\n  assumes \"lt p = lt q \\<Longrightarrow> lc p + lc q \\<noteq> 0\"\n  shows \"lt (p + q) = ord_term_lin.max (lt p) (lt q)\"", "lemma lt_monom_mult:\n  assumes \"c \\<noteq> (0::'b::semiring_no_zero_divisors)\" and \"p \\<noteq> 0\"\n  shows \"lt (monom_mult c t p) = t \\<oplus> lt p\"", "lemma lt_monom_mult_zero:\n  assumes \"c \\<noteq> (0::'b::semiring_no_zero_divisors)\"\n  shows \"lt (monom_mult c 0 p) = lt p\"", "lemma lc_monom_mult [simp]: \"lc (monom_mult c t p) = (c::'b::semiring_no_zero_divisors) * lc p\"", "lemma (in ordered_term) lt_mult_scalar_monomial_right:\n  assumes \"c \\<noteq> (0::'b::semiring_no_zero_divisors)\" and \"p \\<noteq> 0\"\n  shows \"lt (p \\<odot> monomial c v) = punit.lt p \\<oplus> v\"", "lemma lc_mult_scalar_monomial_right:\n  \"lc (p \\<odot> monomial c v) = punit.lc p * (c::'b::semiring_no_zero_divisors)\"", "lemma lookup_monom_mult_eq_zero:\n  assumes \"s \\<oplus> lt p \\<prec>\\<^sub>t v\"\n  shows \"lookup (monom_mult (c::'b::semiring_no_zero_divisors) s p) v = 0\"", "lemma in_keys_monom_mult_le:\n  assumes \"v \\<in> keys (monom_mult c t p)\"\n  shows \"v \\<preceq>\\<^sub>t t \\<oplus> lt p\"", "lemma lt_monom_mult_le: \"lt (monom_mult c t p) \\<preceq>\\<^sub>t t \\<oplus> lt p\"", "lemma monom_mult_inj_2:\n  assumes \"monom_mult c t1 p = monom_mult c t2 p\"\n    and \"c \\<noteq> 0\" and \"(p::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors) \\<noteq> 0\"\n  shows \"t1 = t2\"", "lemma tt_zero [simp]: \"tt 0 = min_term\"", "lemma tc_zero [simp]: \"tc 0 = 0\"", "lemma tt_alt:\n  assumes \"p \\<noteq> 0\"\n  shows \"tt p = ord_term_lin.Min (keys p)\"", "lemma tt_min_keys:\n  assumes \"v \\<in> keys p\"\n  shows \"tt p \\<preceq>\\<^sub>t v\"", "lemma tt_min:\n  assumes \"lookup p v \\<noteq> 0\"\n  shows \"tt p \\<preceq>\\<^sub>t v\"", "lemma tt_in_keys:\n  assumes \"p \\<noteq> 0\"\n  shows \"tt p \\<in> keys p\"", "lemma tt_eqI:\n  assumes \"v \\<in> keys p\" and \"\\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<preceq>\\<^sub>t u\"\n  shows \"tt p = v\"", "lemma tt_gr:\n  assumes \"\\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<prec>\\<^sub>t u\" and \"p \\<noteq> 0\"\n  shows \"v \\<prec>\\<^sub>t tt p\"", "lemma tt_less:\n  assumes \"u \\<in> keys p\" and \"u \\<prec>\\<^sub>t v\"\n  shows \"tt p \\<prec>\\<^sub>t v\"", "lemma tt_ge:\n  assumes \"\\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = 0\" and \"p \\<noteq> 0\"\n  shows \"v \\<preceq>\\<^sub>t tt p\"", "lemma tt_ge_keys:\n  assumes \"\\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<preceq>\\<^sub>t u\" and \"p \\<noteq> 0\"\n  shows \"v \\<preceq>\\<^sub>t tt p\"", "lemma tt_ge_iff: \"v \\<preceq>\\<^sub>t tt p \\<longleftrightarrow> ((p \\<noteq> 0 \\<or> v = min_term) \\<and> (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = 0))\"\n  (is \"?L \\<longleftrightarrow> (?A \\<and> ?B)\")", "lemma tc_not_0:\n  assumes \"p \\<noteq> 0\"\n  shows \"tc p \\<noteq> 0\"", "lemma tt_monomial:\n  assumes \"c \\<noteq> 0\"\n  shows \"tt (monomial c v) = v\"", "lemma tc_monomial [simp]: \"tc (monomial c t) = c\"", "lemma tt_plus_eqI:\n  assumes \"p \\<noteq> 0\" and \"tt p \\<prec>\\<^sub>t tt q\"\n  shows \"tt (p + q) = tt p\"", "lemma tt_plus_lessE:\n  fixes p q\n  assumes \"p + q \\<noteq> 0\" and tt: \"tt (p + q) \\<prec>\\<^sub>t tt p\"\n  shows \"tt q \\<prec>\\<^sub>t tt p\"", "lemma tt_plus_lessI:\n  fixes p q :: \"_ \\<Rightarrow>\\<^sub>0 'b::ring\"\n  assumes \"p + q \\<noteq> 0\" and tt_eq: \"tt q = tt p\" and tc_eq: \"tc q = - tc p\"\n  shows \"tt p \\<prec>\\<^sub>t tt (p + q)\"", "lemma tt_uminus [simp]: \"tt (- p) = tt p\"", "lemma tc_uminus [simp]: \"tc (- p) = - tc p\"", "lemma tt_monom_mult:\n  assumes \"c \\<noteq> (0::'b::semiring_no_zero_divisors)\" and \"p \\<noteq> 0\"\n  shows \"tt (monom_mult c t p) = t \\<oplus> tt p\"", "lemma tt_map_scale: \"c \\<noteq> (0::'b::semiring_no_zero_divisors) \\<Longrightarrow> tt (c \\<cdot> p) = tt p\"", "lemma tc_monom_mult [simp]: \"tc (monom_mult c t p) = (c::'b::semiring_no_zero_divisors) * tc p\"", "lemma in_keys_monom_mult_ge:\n  assumes \"v \\<in> keys (monom_mult c t p)\"\n  shows \"t \\<oplus> tt p \\<preceq>\\<^sub>t v\"", "lemma lt_ge_tt: \"tt p \\<preceq>\\<^sub>t lt p\"", "lemma lt_eq_tt_monomial:\n  assumes \"is_monomial p\"\n  shows \"lt p = tt p\"", "lemma lookup_higher: \"lookup (higher p u) v = (if u \\<prec>\\<^sub>t v then lookup p v else 0)\"", "lemma lookup_higher_when: \"lookup (higher p u) v = (lookup p v when u \\<prec>\\<^sub>t v)\"", "lemma higher_plus: \"higher (p + q) v = higher p v + higher q v\"", "lemma higher_uminus [simp]: \"higher (- p) v = -(higher p v)\"", "lemma higher_minus: \"higher (p - q) v = higher p v - higher q v\"", "lemma higher_zero [simp]: \"higher 0 t = 0\"", "lemma higher_eq_iff: \"higher p v = higher q v \\<longleftrightarrow> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma higher_eq_zero_iff: \"higher p v = 0 \\<longleftrightarrow> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = 0)\"", "lemma keys_higher: \"keys (higher p v) = {u\\<in>keys p. v \\<prec>\\<^sub>t u}\"", "lemma higher_higher: \"higher (higher p u) v = higher p (ord_term_lin.max u v)\"", "lemma lookup_lower: \"lookup (lower p u) v = (if v \\<prec>\\<^sub>t u then lookup p v else 0)\"", "lemma lookup_lower_when: \"lookup (lower p u) v = (lookup p v when v \\<prec>\\<^sub>t u)\"", "lemma lower_plus: \"lower (p + q) v = lower p v + lower q v\"", "lemma lower_uminus [simp]: \"lower (- p) v = - lower p v\"", "lemma lower_minus:  \"lower (p - (q::_ \\<Rightarrow>\\<^sub>0 'b::ab_group_add)) v = lower p v - lower q v\"", "lemma lower_zero [simp]: \"lower 0 v = 0\"", "lemma lower_eq_iff: \"lower p v = lower q v \\<longleftrightarrow> (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup q u)\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma lower_eq_zero_iff: \"lower p v = 0 \\<longleftrightarrow> (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = 0)\"", "lemma keys_lower: \"keys (lower p v) = {u\\<in>keys p. u \\<prec>\\<^sub>t v}\"", "lemma lower_lower: \"lower (lower p u) v = lower p (ord_term_lin.min u v)\"", "lemma lt_higher:\n  assumes \"v \\<prec>\\<^sub>t lt p\"\n  shows \"lt (higher p v) = lt p\"", "lemma lc_higher:\n  assumes \"v \\<prec>\\<^sub>t lt p\"\n  shows \"lc (higher p v) = lc p\"", "lemma higher_eq_zero_iff': \"higher p v = 0 \\<longleftrightarrow> lt p \\<preceq>\\<^sub>t v\"", "lemma higher_id_iff: \"higher p v = p \\<longleftrightarrow> (p = 0 \\<or> v \\<prec>\\<^sub>t tt p)\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma tt_lower:\n  assumes \"tt p \\<prec>\\<^sub>t v\"\n  shows \"tt (lower p v) = tt p\"", "lemma tc_lower:\n  assumes \"tt p \\<prec>\\<^sub>t v\"\n  shows \"tc (lower p v) = tc p\"", "lemma lt_lower: \"lt (lower p v) \\<preceq>\\<^sub>t lt p\"", "lemma lt_lower_less:\n  assumes \"lower p v \\<noteq> 0\"\n  shows \"lt (lower p v) \\<prec>\\<^sub>t v\"", "lemma lt_lower_eq_iff: \"lt (lower p v) = lt p \\<longleftrightarrow> (lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v)\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma tt_higher:\n  assumes \"v \\<prec>\\<^sub>t lt p\"\n  shows \"tt p \\<preceq>\\<^sub>t tt (higher p v)\"", "lemma tt_higher_eq_iff:\n  \"tt (higher p v) = tt p \\<longleftrightarrow> ((lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term) \\<or> v \\<prec>\\<^sub>t tt p)\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma lower_eq_zero_iff': \"lower p v = 0 \\<longleftrightarrow> (p = 0 \\<or> v \\<preceq>\\<^sub>t tt p)\"", "lemma lower_id_iff: \"lower p v = p \\<longleftrightarrow> (p = 0 \\<or> lt p \\<prec>\\<^sub>t v)\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma lower_higher_commute: \"higher (lower p s) t = lower (higher p t) s\"", "lemma lt_lower_higher:\n  assumes \"v \\<prec>\\<^sub>t lt (lower p u)\"\n  shows \"lt (lower (higher p v) u) = lt (lower p u)\"", "lemma lc_lower_higher:\n  assumes \"v \\<prec>\\<^sub>t lt (lower p u)\"\n  shows \"lc (lower (higher p v) u) = lc (lower p u)\"", "lemma trailing_monomial_higher:\n  assumes \"p \\<noteq> 0\"\n  shows \"p = (higher p (tt p)) + monomial (tc p) (tt p)\"", "lemma higher_lower_decomp: \"higher p v + monomial (lookup p v) v + lower p v = p\"", "lemma lookup_tail: \"lookup (tail p) v = (if v \\<prec>\\<^sub>t lt p then lookup p v else 0)\"", "lemma lookup_tail_when: \"lookup (tail p) v = (lookup p v when v \\<prec>\\<^sub>t lt p)\"", "lemma lookup_tail_2: \"lookup (tail p) v = (if v = lt p then 0 else lookup p v)\"", "lemma leading_monomial_tail: \"p = monomial (lc p) (lt p) + tail p\" for p::\"_ \\<Rightarrow>\\<^sub>0 'b::comm_monoid_add\"", "lemma tail_alt: \"tail p = except p {lt p}\"", "lemma tail_zero [simp]: \"tail 0 = 0\"", "lemma lt_tail:\n  assumes \"tail p \\<noteq> 0\"\n  shows \"lt (tail p) \\<prec>\\<^sub>t lt p\"", "lemma keys_tail: \"keys (tail p) = keys p - {lt p}\"", "lemma tail_monomial: \"tail (monomial c v) = 0\"", "lemma (in ordered_term) mult_scalar_tail_rec_left:\n  \"p \\<odot> q = monom_mult (punit.lc p) (punit.lt p) q + (punit.tail p) \\<odot> q\"", "lemma mult_scalar_tail_rec_right: \"p \\<odot> q = p \\<odot> monomial (lc q) (lt q) + p \\<odot> tail q\"", "lemma lt_tail_max:\n  assumes \"tail p \\<noteq> 0\" and \"v \\<in> keys p\" and \"v \\<prec>\\<^sub>t lt p\"\n  shows \"v \\<preceq>\\<^sub>t lt (tail p)\"", "lemma keys_tail_less_lt:\n  assumes \"v \\<in> keys (tail p)\"\n  shows \"v \\<prec>\\<^sub>t lt p\"", "lemma tt_tail:\n  assumes \"tail p \\<noteq> 0\"\n  shows \"tt (tail p) = tt p\"", "lemma tc_tail:\n  assumes \"tail p \\<noteq> 0\"\n  shows \"tc (tail p) = tc p\"", "lemma tt_tail_min:\n  assumes \"s \\<in> keys p\"\n  shows \"tt (tail p) \\<preceq>\\<^sub>t s\"", "lemma tail_monom_mult:\n  \"tail (monom_mult c t p) = monom_mult (c::'b::semiring_no_zero_divisors) t (tail p)\"", "lemma keys_plus_eq_lt_tt_D:\n  assumes \"keys (p + q) = {lt p, tt q}\" and \"lt q \\<prec>\\<^sub>t lt p\" and \"tt q \\<prec>\\<^sub>t tt (p::_ \\<Rightarrow>\\<^sub>0 'b::comm_monoid_add)\"\n  shows \"tail p + higher q (tt q) = 0\"", "lemma ord_strict_pI:\n  assumes \"lookup p v = 0\" and \"lookup q v \\<noteq> 0\" and \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\"\n  shows \"p \\<prec>\\<^sub>p q\"", "lemma ord_strict_pE:\n  assumes \"p \\<prec>\\<^sub>p q\"\n  obtains v where \"lookup p v = 0\" and \"lookup q v \\<noteq> 0\" and \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\"", "lemma not_ord_pI:\n  assumes \"lookup p v \\<noteq> lookup q v\" and \"lookup p v \\<noteq> 0\" and \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\"\n  shows \"\\<not> p \\<preceq>\\<^sub>p q\"", "lemma ord_strict_higher: \"p \\<prec>\\<^sub>p q \\<longleftrightarrow> (\\<exists>v. lookup p v = 0 \\<and> lookup q v \\<noteq> 0 \\<and> higher p v = higher q v)\"", "lemma ord_strict_p_asymmetric:\n  assumes \"p \\<prec>\\<^sub>p q\"\n  shows \"\\<not> q \\<prec>\\<^sub>p p\"", "lemma ord_strict_p_irreflexive: \"\\<not> p \\<prec>\\<^sub>p p\"", "lemma ord_strict_p_transitive:\n  assumes \"a \\<prec>\\<^sub>p b\" and \"b \\<prec>\\<^sub>p c\"\n  shows \"a \\<prec>\\<^sub>p c\"", "lemma ord_p_zero_min: \"0 \\<preceq>\\<^sub>p p\"", "lemma lt_ord_p:\n  assumes \"lt p \\<prec>\\<^sub>t lt q\"\n  shows \"p \\<prec>\\<^sub>p q\"", "lemma ord_p_lt:\n  assumes \"p \\<preceq>\\<^sub>p q\"\n  shows \"lt p \\<preceq>\\<^sub>t lt q\"", "lemma ord_p_tail:\n  assumes \"p \\<noteq> 0\" and \"lt p = lt q\" and \"p \\<prec>\\<^sub>p q\"\n  shows \"tail p \\<prec>\\<^sub>p tail q\"", "lemma tail_ord_p:\n  assumes \"p \\<noteq> 0\"\n  shows \"tail p \\<prec>\\<^sub>p p\"", "lemma higher_lookup_eq_zero:\n  assumes pt: \"lookup p v = 0\" and hp: \"higher p v = 0\" and le: \"q \\<preceq>\\<^sub>p p\"\n  shows \"(lookup q v = 0) \\<and> (higher q v) = 0\"", "lemma ord_strict_p_recI:\n  assumes \"lt p = lt q\" and \"lc p = lc q\" and tail: \"tail p \\<prec>\\<^sub>p tail q\"\n  shows \"p \\<prec>\\<^sub>p q\"", "lemma ord_strict_p_recE1:\n  assumes \"p \\<prec>\\<^sub>p q\"\n  shows \"q \\<noteq> 0\"", "lemma ord_strict_p_recE2:\n  assumes \"p \\<noteq> 0\" and \"p \\<prec>\\<^sub>p q\" and \"lt p = lt q\"\n  shows \"lc p = lc q\"", "lemma ord_strict_p_rec [code]:\n  \"p \\<prec>\\<^sub>p q =\n  (q \\<noteq> 0 \\<and>\n    (p = 0 \\<or>\n      (let v1 = lt p; v2 = lt q in\n        (v1 \\<prec>\\<^sub>t v2 \\<or> (v1 = v2 \\<and> lookup p v1 = lookup q v2 \\<and> lower p v1 \\<prec>\\<^sub>p lower q v2))\n      )\n    )\n   )\"\n  (is \"?L = ?R\")", "lemma ord_strict_p_monomial_iff: \"p \\<prec>\\<^sub>p monomial c v \\<longleftrightarrow> (c \\<noteq> 0 \\<and> (p = 0 \\<or> lt p \\<prec>\\<^sub>t v))\"", "lemma ord_strict_p_monom_mult:\n  assumes \"p \\<prec>\\<^sub>p q\" and \"c \\<noteq> (0::'b::semiring_no_zero_divisors)\"\n  shows \"monom_mult c t p \\<prec>\\<^sub>p monom_mult c t q\"", "lemma ord_strict_p_plus:\n  assumes \"p \\<prec>\\<^sub>p q\" and \"keys r \\<inter> keys q = {}\"\n  shows \"p + r \\<prec>\\<^sub>p q + r\"", "lemma poly_mapping_tail_induct [case_names 0 tail]:\n  assumes \"P 0\" and \"\\<And>p. p \\<noteq> 0 \\<Longrightarrow> P (tail p) \\<Longrightarrow> P p\"\n  shows \"P p\"", "lemma poly_mapping_neqE:\n  assumes \"p \\<noteq> q\"\n  obtains v where \"v \\<in> keys p \\<union> keys q\" and \"lookup p v \\<noteq> lookup q v\"\n    and \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\"", "lemma keys_monomial:\n  assumes \"is_monomial p\"\n  shows \"keys p = {lt p}\"", "lemma monomial_eq_itself:\n  assumes \"is_monomial p\"\n  shows \"monomial (lc p) (lt p) = p\"", "lemma lt_eq_min_term_monomial:\n  assumes \"lt p = min_term\"\n  shows \"monomial (lc p) min_term = p\"", "lemma is_monomial_monomial_ordered:\n  assumes \"is_monomial p\"\n  obtains c v where \"c \\<noteq> 0\" and \"lc p = c\" and \"lt p = v\" and \"p = monomial c v\"", "lemma monomial_plus_not_0:\n  assumes \"c \\<noteq> 0\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"monomial c v + p \\<noteq> 0\"", "lemma lt_monomial_plus:\n  assumes \"c \\<noteq> (0::'b::comm_monoid_add)\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"lt (monomial c v + p) = v\"", "lemma lc_monomial_plus:\n  assumes \"c \\<noteq> (0::'b::comm_monoid_add)\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"lc (monomial c v + p) = c\"", "lemma tt_monomial_plus:\n  assumes \"p \\<noteq> (0::_ \\<Rightarrow>\\<^sub>0 'b::comm_monoid_add)\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"tt (monomial c v + p) = tt p\"", "lemma tc_monomial_plus:\n  assumes \"p \\<noteq> (0::_ \\<Rightarrow>\\<^sub>0 'b::comm_monoid_add)\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"tc (monomial c v + p) = tc p\"", "lemma tail_monomial_plus:\n  assumes \"c \\<noteq> (0::'b::comm_monoid_add)\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"tail (monomial c v + p) = p\" (is \"tail ?q = _\")", "lemma distinct_pps_to_list: \"distinct (pps_to_list S)\"", "lemma set_pps_to_list:\n  assumes \"finite S\"\n  shows \"set (pps_to_list S) = S\"", "lemma length_pps_to_list: \"length (pps_to_list S) = card S\"", "lemma pps_to_list_sorted_wrt: \"sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list S)\"", "lemma pps_to_list_nth_leI:\n  assumes \"j \\<le> i\" and \"i < card S\"\n  shows \"(pps_to_list S) ! i \\<preceq>\\<^sub>t (pps_to_list S) ! j\"", "lemma pps_to_list_nth_lessI:\n  assumes \"j < i\" and \"i < card S\"\n  shows \"(pps_to_list S) ! i \\<prec>\\<^sub>t (pps_to_list S) ! j\"", "lemma pps_to_list_nth_leD:\n  assumes \"(pps_to_list S) ! i \\<preceq>\\<^sub>t (pps_to_list S) ! j\" and \"j < card S\"\n  shows \"j \\<le> i\"", "lemma pps_to_list_nth_lessD:\n  assumes \"(pps_to_list S) ! i \\<prec>\\<^sub>t (pps_to_list S) ! j\" and \"j < card S\"\n  shows \"j < i\"", "lemma set_keys_to_list: \"set (keys_to_list p) = keys p\"", "lemma length_keys_to_list: \"length (keys_to_list p) = card (keys p)\"", "lemma keys_to_list_zero [simp]: \"keys_to_list 0 = []\"", "lemma Keys_to_list_Nil [simp]: \"Keys_to_list [] = []\"", "lemma set_Keys_to_list: \"set (Keys_to_list ps) = Keys (set ps)\"", "lemma Keys_to_list_sorted_wrt_aux:\n  assumes \"sorted_wrt (\\<succ>\\<^sub>t) ts\"\n  shows \"sorted_wrt (\\<succ>\\<^sub>t) (fold (\\<lambda>p ts. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p) ts) ps ts)\"", "lemma length_Keys_to_list: \"length (Keys_to_list ps) = card (Keys (set ps))\"", "lemma Keys_to_list_eq_pps_to_list: \"Keys_to_list ps = pps_to_list (Keys (set ps))\"", "lemma in_keys_mult_scalar_le:\n  assumes \"v \\<in> keys (p \\<odot> q)\"\n  shows \"v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q\"", "lemma in_keys_mult_scalar_ge:\n  assumes \"v \\<in> keys (p \\<odot> q)\"\n  shows \"punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v\"", "lemma (in ordered_term) lookup_mult_scalar_lt_lt:\n  \"lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q\"", "lemma lookup_mult_scalar_tt_tt: \"lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q\"", "lemma lt_mult_scalar:\n  assumes \"p \\<noteq> 0\" and \"q \\<noteq> (0::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors)\"\n  shows \"lt (p \\<odot> q) = punit.lt p \\<oplus> lt q\"", "lemma tt_mult_scalar:\n  assumes \"p \\<noteq> 0\" and \"q \\<noteq> (0::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors)\"\n  shows \"tt (p \\<odot> q) = punit.tt p \\<oplus> tt q\"", "lemma lc_mult_scalar: \"lc (p \\<odot> q) = punit.lc p * lc (q::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors)\"", "lemma tc_mult_scalar: \"tc (p \\<odot> q) = punit.tc p * tc (q::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors)\"", "lemma mult_scalar_not_zero:\n  assumes \"p \\<noteq> 0\" and \"q \\<noteq> (0::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors)\"\n  shows \"p \\<odot> q \\<noteq> 0\"", "lemmas in_keys_times_le = punit.in_keys_mult_scalar_le[simplified]", "lemmas in_keys_times_ge = punit.in_keys_mult_scalar_ge[simplified]", "lemmas lookup_times_lp_lp = punit.lookup_mult_scalar_lt_lt[simplified]", "lemmas lookup_times_tp_tp = punit.lookup_mult_scalar_tt_tt[simplified]", "lemmas lookup_times_monomial_right_plus = punit.lookup_mult_scalar_monomial_right_plus[simplified]", "lemmas lookup_times_monomial_right = punit.lookup_mult_scalar_monomial_right[simplified]", "lemmas lp_times = punit.lt_mult_scalar[simplified]", "lemmas tp_times = punit.tt_mult_scalar[simplified]", "lemmas lc_times = punit.lc_mult_scalar[simplified]", "lemmas tc_times = punit.tc_mult_scalar[simplified]", "lemmas times_not_zero = punit.mult_scalar_not_zero[simplified]", "lemmas times_tail_rec_left = punit.mult_scalar_tail_rec_left[simplified]", "lemmas times_tail_rec_right = punit.mult_scalar_tail_rec_right[simplified]", "lemmas punit_in_keys_monom_mult_le = punit.in_keys_monom_mult_le[simplified]", "lemmas punit_in_keys_monom_mult_ge = punit.in_keys_monom_mult_ge[simplified]", "lemmas lp_monom_mult = punit.lt_monom_mult[simplified]", "lemmas tp_monom_mult = punit.tt_monom_mult[simplified]", "lemma adds_term_antisym:\n  assumes \"u adds\\<^sub>t v\" and \"v adds\\<^sub>t u\"\n  shows \"u = v\"", "lemma in_dgrad_p_set_iff: \"p \\<in> dgrad_p_set d m \\<longleftrightarrow> (\\<forall>v\\<in>keys p. d (pp_of_term v) \\<le> m)\"", "lemma dgrad_p_setI [intro]:\n  assumes \"\\<And>v. v \\<in> keys p \\<Longrightarrow> d (pp_of_term v) \\<le> m\"\n  shows \"p \\<in> dgrad_p_set d m\"", "lemma dgrad_p_setD:\n  assumes \"p \\<in> dgrad_p_set d m\" and \"v \\<in> keys p\"\n  shows \"d (pp_of_term v) \\<le> m\"", "lemma zero_in_dgrad_p_set: \"0 \\<in> dgrad_p_set d m\"", "lemma dgrad_p_set_zero [simp]: \"dgrad_p_set (\\<lambda>_. 0) m = UNIV\"", "lemma subset_dgrad_p_set_zero: \"F \\<subseteq> dgrad_p_set (\\<lambda>_. 0) m\"", "lemma dgrad_p_set_subset:\n  assumes \"m \\<le> n\"\n  shows \"dgrad_p_set d m \\<subseteq> dgrad_p_set d n\"", "lemma dgrad_p_setD_lp:\n  assumes \"p \\<in> dgrad_p_set d m\" and \"p \\<noteq> 0\"\n  shows \"d (lp p) \\<le> m\"", "lemma dgrad_p_set_exhaust_expl:\n  assumes \"finite F\"\n  shows \"F \\<subseteq> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))\"", "lemma dgrad_p_set_exhaust:\n  assumes \"finite F\"\n  obtains m where \"F \\<subseteq> dgrad_p_set d m\"", "lemma dgrad_p_set_insert:\n  assumes \"F \\<subseteq> dgrad_p_set d m\"\n  obtains n where \"m \\<le> n\" and \"f \\<in> dgrad_p_set d n\" and \"F \\<subseteq> dgrad_p_set d n\"", "lemma dgrad_p_set_leI:\n  assumes \"\\<And>f. f \\<in> F \\<Longrightarrow> dgrad_p_set_le d {f} G\"\n  shows \"dgrad_p_set_le d F G\"", "lemma dgrad_p_set_le_trans [trans]:\n  assumes \"dgrad_p_set_le d F G\" and \"dgrad_p_set_le d G H\"\n  shows \"dgrad_p_set_le d F H\"", "lemma dgrad_p_set_le_subset:\n  assumes \"F \\<subseteq> G\"\n  shows \"dgrad_p_set_le d F G\"", "lemma dgrad_p_set_leI_insert_keys:\n  assumes \"dgrad_p_set_le d F G\" and \"dgrad_set_le d (pp_of_term ` keys f) (pp_of_term ` Keys G)\"\n  shows \"dgrad_p_set_le d (insert f F) G\"", "lemma dgrad_p_set_leI_insert:\n  assumes \"dgrad_p_set_le d F G\" and \"dgrad_p_set_le d {f} G\"\n  shows \"dgrad_p_set_le d (insert f F) G\"", "lemma dgrad_p_set_leI_Un:\n  assumes \"dgrad_p_set_le d F1 G\" and \"dgrad_p_set_le d F2 G\"\n  shows \"dgrad_p_set_le d (F1 \\<union> F2) G\"", "lemma dgrad_p_set_le_dgrad_p_set:\n  assumes \"dgrad_p_set_le d F G\" and \"G \\<subseteq> dgrad_p_set d m\"\n  shows \"F \\<subseteq> dgrad_p_set d m\"", "lemma dgrad_p_set_le_except: \"dgrad_p_set_le d {except p S} {p}\"", "lemma dgrad_p_set_le_tail: \"dgrad_p_set_le d {tail p} {p}\"", "lemma dgrad_p_set_le_plus: \"dgrad_p_set_le d {p + q} {p, q}\"", "lemma dgrad_p_set_le_uminus: \"dgrad_p_set_le d {-p} {p}\"", "lemma dgrad_p_set_le_minus: \"dgrad_p_set_le d {p - q} {p, q}\"", "lemma dgrad_set_le_monom_mult:\n  assumes \"dickson_grading d\"\n  shows \"dgrad_set_le d (pp_of_term ` keys (monom_mult c t p)) (insert t (pp_of_term ` keys p))\"", "lemma dgrad_p_set_closed_plus:\n  assumes \"p \\<in> dgrad_p_set d m\" and \"q \\<in> dgrad_p_set d m\"\n  shows \"p + q \\<in> dgrad_p_set d m\"", "lemma dgrad_p_set_closed_uminus:\n  assumes \"p \\<in> dgrad_p_set d m\"\n  shows \"-p \\<in> dgrad_p_set d m\"", "lemma dgrad_p_set_closed_minus:\n  assumes \"p \\<in> dgrad_p_set d m\" and \"q \\<in> dgrad_p_set d m\"\n  shows \"p - q \\<in> dgrad_p_set d m\"", "lemma dgrad_p_set_closed_monom_mult:\n  assumes \"dickson_grading d\" and \"d t \\<le> m\" and \"p \\<in> dgrad_p_set d m\"\n  shows \"monom_mult c t p \\<in> dgrad_p_set d m\"", "lemma dgrad_p_set_closed_monom_mult_zero:\n  assumes \"p \\<in> dgrad_p_set d m\"\n  shows \"monom_mult c 0 p \\<in> dgrad_p_set d m\"", "lemma dgrad_p_set_closed_except:\n  assumes \"p \\<in> dgrad_p_set d m\"\n  shows \"except p S \\<in> dgrad_p_set d m\"", "lemma dgrad_p_set_closed_tail:\n  assumes \"p \\<in> dgrad_p_set d m\"\n  shows \"tail p \\<in> dgrad_p_set d m\"", "lemma Dickson_term:\n  assumes \"dickson_grading d\" and \"finite K\"\n  shows \"almost_full_on (adds\\<^sub>t) {t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> K}\"\n    (is \"almost_full_on _ ?A\")", "lemma ex_finite_adds_term:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` S)\" and \"pp_of_term ` S \\<subseteq> dgrad_set d m\"\n  obtains T where \"finite T\" and \"T \\<subseteq> S\" and \"\\<And>s. s \\<in> S \\<Longrightarrow> (\\<exists>t\\<in>T. t adds\\<^sub>t s)\"", "lemma dickson_less_vI:\n  assumes \"d (pp_of_term v) \\<le> m\" and \"d (pp_of_term u) \\<le> m\" and \"v \\<prec>\\<^sub>t u\"\n  shows \"dickson_less_v d m v u\"", "lemma dickson_less_vD1:\n  assumes \"dickson_less_v d m v u\"\n  shows \"d (pp_of_term v) \\<le> m\"", "lemma dickson_less_vD2:\n  assumes \"dickson_less_v d m v u\"\n  shows \"d (pp_of_term u) \\<le> m\"", "lemma dickson_less_vD3:\n  assumes \"dickson_less_v d m v u\"\n  shows \"v \\<prec>\\<^sub>t u\"", "lemma dickson_less_v_irrefl: \"\\<not> dickson_less_v d m v v\"", "lemma dickson_less_v_trans:\n  assumes \"dickson_less_v d m v u\" and \"dickson_less_v d m u w\"\n  shows \"dickson_less_v d m v w\"", "lemma wf_dickson_less_v_aux1:\n  assumes \"dickson_grading d\" and \"\\<And>i::nat. dickson_less_v d m (seq (Suc i)) (seq i)\"\n  obtains i where \"\\<And>j. j > i \\<Longrightarrow> component_of_term (seq j) < component_of_term (seq i)\"", "lemma wf_dickson_less_v_aux2:\n  assumes \"dickson_grading d\" and \"\\<And>i::nat. dickson_less_v d m (seq (Suc i)) (seq i)\"\n    and \"\\<And>i::nat. component_of_term (seq i) < k\"\n  shows thesis", "lemma wf_dickson_less_v:\n  assumes \"dickson_grading d\"\n  shows \"wfP (dickson_less_v d m)\"", "lemma dickson_less_v_zero: \"dickson_less_v (\\<lambda>_. 0) m = (\\<prec>\\<^sub>t)\"", "lemma dickson_less_pI:\n  assumes \"p \\<in> dgrad_p_set d m\" and \"q \\<in> dgrad_p_set d m\" and \"p \\<prec>\\<^sub>p q\"\n  shows \"dickson_less_p d m p q\"", "lemma dickson_less_pD1:\n  assumes \"dickson_less_p d m p q\"\n  shows \"p \\<in> dgrad_p_set d m\"", "lemma dickson_less_pD2:\n  assumes \"dickson_less_p d m p q\"\n  shows \"q \\<in> dgrad_p_set d m\"", "lemma dickson_less_pD3:\n  assumes \"dickson_less_p d m p q\"\n  shows \"p \\<prec>\\<^sub>p q\"", "lemma dickson_less_p_irrefl: \"\\<not> dickson_less_p d m p p\"", "lemma dickson_less_p_trans:\n  assumes \"dickson_less_p d m p q\" and \"dickson_less_p d m q r\"\n  shows \"dickson_less_p d m p r\"", "lemma dickson_less_p_mono:\n  assumes \"dickson_less_p d m p q\" and \"m \\<le> n\"\n  shows \"dickson_less_p d n p q\"", "lemma dickson_less_p_zero: \"dickson_less_p (\\<lambda>_. 0) m = (\\<prec>\\<^sub>p)\"", "lemma wf_dickson_less_p_aux:\n  assumes \"dickson_grading d\"\n  assumes \"x \\<in> Q\" and \"\\<forall>y\\<in>Q. y \\<noteq> 0 \\<longrightarrow> (y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) u)\"\n  shows \"\\<exists>p\\<in>Q. (\\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p)\"", "theorem wf_dickson_less_p:\n  assumes \"dickson_grading d\"\n  shows \"wfP (dickson_less_p d m)\"", "lemma ord_term_minimum_dgrad_set:\n  assumes \"dickson_grading d\" and \"v \\<in> V\" and \"pp_of_term ` V \\<subseteq> dgrad_set d m\"\n  obtains u where \"u \\<in> V\" and \"\\<And>w. w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V\"", "lemma ord_p_wf: \"wfP (\\<prec>\\<^sub>p)\""], "translations": [["", "lemma min_term_min: \"min_term \\<preceq>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_term \\<preceq>\\<^sub>t v", "proof (rule ord_termI)"], ["proof (state)\ngoal (2 subgoals):\n 1. pp_of_term min_term \\<preceq> pp_of_term v\n 2. component_of_term min_term \\<le> component_of_term v", "show \"pp_of_term min_term \\<preceq> pp_of_term v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pp_of_term min_term \\<preceq> pp_of_term v", "by (simp add: min_term_def zero_min term_simps)"], ["proof (state)\nthis:\n  pp_of_term min_term \\<preceq> pp_of_term v\n\ngoal (1 subgoal):\n 1. component_of_term min_term \\<le> component_of_term v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. component_of_term min_term \\<le> component_of_term v", "show \"component_of_term min_term \\<le> component_of_term v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term min_term \\<le> component_of_term v", "by (simp add: min_term_def the_min_min term_simps)"], ["proof (state)\nthis:\n  component_of_term min_term \\<le> component_of_term v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma splus_mono_strict:\n  assumes \"v \\<prec>\\<^sub>t w\"\n  shows \"t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w", "from assms"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t w", "have \"v \\<preceq>\\<^sub>t w\" and \"v \\<noteq> w\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t w\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t w &&& v \\<noteq> w", "by simp_all"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t w\n  v \\<noteq> w\n\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w", "from this(1)"], ["proof (chain)\npicking this:\n  v \\<preceq>\\<^sub>t w", "have \"t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> w\""], ["proof (prove)\nusing this:\n  v \\<preceq>\\<^sub>t w\n\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> w", "by (rule splus_mono)"], ["proof (state)\nthis:\n  t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> w\n\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w", "moreover"], ["proof (state)\nthis:\n  t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> w\n\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w", "from \\<open>v \\<noteq> w\\<close>"], ["proof (chain)\npicking this:\n  v \\<noteq> w", "have \"t \\<oplus> v \\<noteq> t \\<oplus> w\""], ["proof (prove)\nusing this:\n  v \\<noteq> w\n\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<noteq> t \\<oplus> w", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  t \\<oplus> v \\<noteq> t \\<oplus> w\n\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w", "ultimately"], ["proof (chain)\npicking this:\n  t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> w\n  t \\<oplus> v \\<noteq> t \\<oplus> w", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> w\n  t \\<oplus> v \\<noteq> t \\<oplus> w\n\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w", "using ord_term_lin.antisym_conv1"], ["proof (prove)\nusing this:\n  t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> w\n  t \\<oplus> v \\<noteq> t \\<oplus> w\n  \\<not> ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n  (?x \\<preceq>\\<^sub>t ?y) = (?x = ?y)\n\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w", "by blast"], ["proof (state)\nthis:\n  t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma splus_mono_left:\n  assumes \"s \\<preceq> t\"\n  shows \"s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v", "proof (rule ord_termI, simp_all add: term_simps)"], ["proof (state)\ngoal (1 subgoal):\n 1. s + pp_of_term v \\<preceq> t + pp_of_term v", "from assms"], ["proof (chain)\npicking this:\n  s \\<preceq> t", "show \"s + pp_of_term v \\<preceq> t + pp_of_term v\""], ["proof (prove)\nusing this:\n  s \\<preceq> t\n\ngoal (1 subgoal):\n 1. s + pp_of_term v \\<preceq> t + pp_of_term v", "by (rule plus_monotone)"], ["proof (state)\nthis:\n  s + pp_of_term v \\<preceq> t + pp_of_term v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma splus_mono_strict_left:\n  assumes \"s \\<prec> t\"\n  shows \"s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v", "from assms"], ["proof (chain)\npicking this:\n  s \\<prec> t", "have \"s \\<preceq> t\" and \"s \\<noteq> t\""], ["proof (prove)\nusing this:\n  s \\<prec> t\n\ngoal (1 subgoal):\n 1. s \\<preceq> t &&& s \\<noteq> t", "by simp_all"], ["proof (state)\nthis:\n  s \\<preceq> t\n  s \\<noteq> t\n\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v", "from this(1)"], ["proof (chain)\npicking this:\n  s \\<preceq> t", "have \"s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v\""], ["proof (prove)\nusing this:\n  s \\<preceq> t\n\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v", "by (rule splus_mono_left)"], ["proof (state)\nthis:\n  s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v", "moreover"], ["proof (state)\nthis:\n  s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v", "from \\<open>s \\<noteq> t\\<close>"], ["proof (chain)\npicking this:\n  s \\<noteq> t", "have \"s \\<oplus> v \\<noteq> t \\<oplus> v\""], ["proof (prove)\nusing this:\n  s \\<noteq> t\n\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<noteq> t \\<oplus> v", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  s \\<oplus> v \\<noteq> t \\<oplus> v\n\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v", "ultimately"], ["proof (chain)\npicking this:\n  s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v\n  s \\<oplus> v \\<noteq> t \\<oplus> v", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v\n  s \\<oplus> v \\<noteq> t \\<oplus> v\n\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v", "using ord_term_lin.antisym_conv1"], ["proof (prove)\nusing this:\n  s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v\n  s \\<oplus> v \\<noteq> t \\<oplus> v\n  \\<not> ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n  (?x \\<preceq>\\<^sub>t ?y) = (?x = ?y)\n\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v", "by blast"], ["proof (state)\nthis:\n  s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_term_canc:\n  assumes \"t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> w\"\n  shows \"v \\<preceq>\\<^sub>t w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t w", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t w \\<Longrightarrow> False", "assume \"\\<not> v \\<preceq>\\<^sub>t w\""], ["proof (state)\nthis:\n  \\<not> v \\<preceq>\\<^sub>t w\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t w \\<Longrightarrow> False", "hence \"w \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  \\<not> v \\<preceq>\\<^sub>t w\n\ngoal (1 subgoal):\n 1. w \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  w \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t w \\<Longrightarrow> False", "hence \"t \\<oplus> w \\<prec>\\<^sub>t t \\<oplus> v\""], ["proof (prove)\nusing this:\n  w \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. t \\<oplus> w \\<prec>\\<^sub>t t \\<oplus> v", "by (rule splus_mono_strict)"], ["proof (state)\nthis:\n  t \\<oplus> w \\<prec>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t w \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> w\n  t \\<oplus> w \\<prec>\\<^sub>t t \\<oplus> v", "show False"], ["proof (prove)\nusing this:\n  t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> w\n  t \\<oplus> w \\<prec>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_term_strict_canc:\n  assumes \"t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w\"\n  shows \"v \\<prec>\\<^sub>t w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t w", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t w \\<Longrightarrow> False", "assume \"\\<not> v \\<prec>\\<^sub>t w\""], ["proof (state)\nthis:\n  \\<not> v \\<prec>\\<^sub>t w\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t w \\<Longrightarrow> False", "hence \"w \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  \\<not> v \\<prec>\\<^sub>t w\n\ngoal (1 subgoal):\n 1. w \\<preceq>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  w \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t w \\<Longrightarrow> False", "hence \"t \\<oplus> w \\<preceq>\\<^sub>t t \\<oplus> v\""], ["proof (prove)\nusing this:\n  w \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. t \\<oplus> w \\<preceq>\\<^sub>t t \\<oplus> v", "by (rule splus_mono)"], ["proof (state)\nthis:\n  t \\<oplus> w \\<preceq>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t w \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w\n  t \\<oplus> w \\<preceq>\\<^sub>t t \\<oplus> v", "show False"], ["proof (prove)\nusing this:\n  t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w\n  t \\<oplus> w \\<preceq>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_term_canc_left:\n  assumes \"t \\<oplus> v \\<preceq>\\<^sub>t s \\<oplus> v\"\n  shows \"t \\<preceq> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<preceq> s", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> t \\<preceq> s \\<Longrightarrow> False", "assume \"\\<not> t \\<preceq> s\""], ["proof (state)\nthis:\n  \\<not> t \\<preceq> s\n\ngoal (1 subgoal):\n 1. \\<not> t \\<preceq> s \\<Longrightarrow> False", "hence \"s \\<prec> t\""], ["proof (prove)\nusing this:\n  \\<not> t \\<preceq> s\n\ngoal (1 subgoal):\n 1. s \\<prec> t", "by simp"], ["proof (state)\nthis:\n  s \\<prec> t\n\ngoal (1 subgoal):\n 1. \\<not> t \\<preceq> s \\<Longrightarrow> False", "hence \"s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v\""], ["proof (prove)\nusing this:\n  s \\<prec> t\n\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v", "by (rule splus_mono_strict_left)"], ["proof (state)\nthis:\n  s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. \\<not> t \\<preceq> s \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  t \\<oplus> v \\<preceq>\\<^sub>t s \\<oplus> v\n  s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v", "show False"], ["proof (prove)\nusing this:\n  t \\<oplus> v \\<preceq>\\<^sub>t s \\<oplus> v\n  s \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_term_strict_canc_left:\n  assumes \"t \\<oplus> v \\<prec>\\<^sub>t s \\<oplus> v\"\n  shows \"t \\<prec> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<prec> s", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> t \\<prec> s \\<Longrightarrow> False", "assume \"\\<not> t \\<prec> s\""], ["proof (state)\nthis:\n  \\<not> t \\<prec> s\n\ngoal (1 subgoal):\n 1. \\<not> t \\<prec> s \\<Longrightarrow> False", "hence \"s \\<preceq> t\""], ["proof (prove)\nusing this:\n  \\<not> t \\<prec> s\n\ngoal (1 subgoal):\n 1. s \\<preceq> t", "by simp"], ["proof (state)\nthis:\n  s \\<preceq> t\n\ngoal (1 subgoal):\n 1. \\<not> t \\<prec> s \\<Longrightarrow> False", "hence \"s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v\""], ["proof (prove)\nusing this:\n  s \\<preceq> t\n\ngoal (1 subgoal):\n 1. s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v", "by (rule splus_mono_left)"], ["proof (state)\nthis:\n  s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. \\<not> t \\<prec> s \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  t \\<oplus> v \\<prec>\\<^sub>t s \\<oplus> v\n  s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v", "show False"], ["proof (prove)\nusing this:\n  t \\<oplus> v \\<prec>\\<^sub>t s \\<oplus> v\n  s \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_adds_term:\n  assumes \"u adds\\<^sub>t v\"\n  shows \"u \\<preceq>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "from assms"], ["proof (chain)\npicking this:\n  u adds\\<^sub>t v", "have *: \"component_of_term u \\<le> component_of_term v\" and \"pp_of_term u adds pp_of_term v\""], ["proof (prove)\nusing this:\n  u adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. component_of_term u \\<le> component_of_term v &&&\n    pp_of_term u adds pp_of_term v", "by (simp_all add: adds_term_def)"], ["proof (state)\nthis:\n  component_of_term u \\<le> component_of_term v\n  pp_of_term u adds pp_of_term v\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "from this(2)"], ["proof (chain)\npicking this:\n  pp_of_term u adds pp_of_term v", "have \"pp_of_term u \\<preceq> pp_of_term v\""], ["proof (prove)\nusing this:\n  pp_of_term u adds pp_of_term v\n\ngoal (1 subgoal):\n 1. pp_of_term u \\<preceq> pp_of_term v", "by (rule ord_adds)"], ["proof (state)\nthis:\n  pp_of_term u \\<preceq> pp_of_term v\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "from this *"], ["proof (chain)\npicking this:\n  pp_of_term u \\<preceq> pp_of_term v\n  component_of_term u \\<le> component_of_term v", "show ?thesis"], ["proof (prove)\nusing this:\n  pp_of_term u \\<preceq> pp_of_term v\n  component_of_term u \\<le> component_of_term v\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "by (rule ord_termI)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Interpretations\\<close>"], ["", "context ordered_powerprod\nbegin"], ["", "subsubsection \\<open>Unit\\<close>"], ["", "sublocale punit: ordered_term to_pair_unit fst \"(\\<preceq>)\" \"(\\<prec>)\" \"(\\<preceq>)\" \"(\\<prec>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_term to_pair_unit fst (\\<preceq>) (\\<prec>) (\\<preceq>)\n     (\\<prec>)", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v w t.\n       v \\<preceq> w \\<Longrightarrow>\n       punit.splus t v \\<preceq> punit.splus t w\n 2. \\<And>v w.\n       \\<lbrakk>punit.pp_of_term v \\<preceq> punit.pp_of_term w;\n        punit.component_of_term v \\<le> punit.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> v \\<preceq> w", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. v_ \\<preceq> w_ \\<Longrightarrow>\n    punit.splus t_ v_ \\<preceq> punit.splus t_ w_", "by (simp, fact plus_monotone_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>punit.pp_of_term v \\<preceq> punit.pp_of_term w;\n        punit.component_of_term v \\<le> punit.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> v \\<preceq> w", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>punit.pp_of_term v_ \\<preceq> punit.pp_of_term w_;\n     punit.component_of_term v_ \\<le> punit.component_of_term w_\\<rbrakk>\n    \\<Longrightarrow> v_ \\<preceq> w_", "by (simp only: punit_pp_of_term punit_component_of_term)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma punit_min_term [simp]: \"punit.min_term = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.min_term = (0::'a)", "by (simp add: punit.min_term_def)"], ["", "end"], ["", "subsection \\<open>Definitions\\<close>"], ["", "context ordered_term\nbegin"], ["", "definition higher :: \"('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> 't \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b::zero)\"\n  where \"higher p t = except p {s. s \\<preceq>\\<^sub>t t}\""], ["", "definition lower :: \"('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> 't \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b::zero)\"\n  where \"lower p t = except p {s. t \\<preceq>\\<^sub>t s}\""], ["", "definition lt :: \"('t \\<Rightarrow>\\<^sub>0 'b::zero) \\<Rightarrow> 't\"\n  where \"lt p = (if p = 0 then min_term else ord_term_lin.Max (keys p))\""], ["", "abbreviation \"lp p \\<equiv> pp_of_term (lt p)\""], ["", "definition lc :: \"('t \\<Rightarrow>\\<^sub>0 'b::zero) \\<Rightarrow> 'b\"\n  where \"lc p = lookup p (lt p)\""], ["", "definition tt :: \"('t \\<Rightarrow>\\<^sub>0 'b::zero) \\<Rightarrow> 't\"\n  where \"tt p = (if p = 0 then min_term else ord_term_lin.Min (keys p))\""], ["", "abbreviation \"tp p \\<equiv> pp_of_term (tt p)\""], ["", "definition tc :: \"('t \\<Rightarrow>\\<^sub>0 'b::zero) \\<Rightarrow> 'b\"\n  where \"tc p \\<equiv> lookup p (tt p)\""], ["", "definition tail :: \"('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b::zero)\"\n  where \"tail p \\<equiv> lower p (lt p)\""], ["", "subsection \\<open>Leading Term and Leading Coefficient: @{const lt} and @{const lc}\\<close>"], ["", "lemma lt_zero [simp]: \"lt 0 = min_term\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt 0 = min_term", "by (simp add: lt_def)"], ["", "lemma lc_zero [simp]: \"lc 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc 0 = (0::'b)", "by (simp add: lc_def)"], ["", "lemma lt_uminus [simp]: \"lt (- p) = lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (- p) = lt p", "by (simp add: lt_def keys_uminus)"], ["", "lemma lc_uminus [simp]: \"lc (- p) = - lc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (- p) = - lc p", "by (simp add: lc_def)"], ["", "lemma lt_alt:\n  assumes \"p \\<noteq> 0\"\n  shows \"lt p = ord_term_lin.Max (keys p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p = ord_term_lin.Max (keys p)", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt p = ord_term_lin.Max (keys p)", "unfolding lt_def"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (if p = 0 then min_term else ord_term_lin.Max (keys p)) =\n    ord_term_lin.Max (keys p)", "by simp"], ["", "lemma lt_max:\n  assumes \"lookup p v \\<noteq> 0\"\n  shows \"v \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "from assms"], ["proof (chain)\npicking this:\n  lookup p v \\<noteq> (0::'b)", "have t_in: \"v \\<in> keys p\""], ["proof (prove)\nusing this:\n  lookup p v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<in> keys p", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "hence \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "hence \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "using keys_zero"], ["proof (prove)\nusing this:\n  keys p \\<noteq> {}\n  keys 0 = {}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "from lt_alt[OF this] ord_term_lin.Max_ge[OF finite_keys t_in]"], ["proof (chain)\npicking this:\n  lt p = ord_term_lin.Max (keys p)\n  v \\<preceq>\\<^sub>t ord_term_lin.Max (keys p)", "show ?thesis"], ["proof (prove)\nusing this:\n  lt p = ord_term_lin.Max (keys p)\n  v \\<preceq>\\<^sub>t ord_term_lin.Max (keys p)\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_eqI:\n  assumes \"lookup p v \\<noteq> 0\" and \"\\<And>u. lookup p u \\<noteq> 0 \\<Longrightarrow> u \\<preceq>\\<^sub>t v\"\n  shows \"lt p = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p = v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p = v", "from assms(1)"], ["proof (chain)\npicking this:\n  lookup p v \\<noteq> (0::'b)", "have \"v \\<in> keys p\""], ["proof (prove)\nusing this:\n  lookup p v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<in> keys p", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. lt p = v", "hence \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. lt p = v", "hence \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "using keys_zero"], ["proof (prove)\nusing this:\n  keys p \\<noteq> {}\n  keys 0 = {}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt p = v", "have \"u \\<preceq>\\<^sub>t v\" if \"u \\<in> keys p\" for u"], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "from that"], ["proof (chain)\npicking this:\n  u \\<in> keys p", "have \"lookup p u \\<noteq> 0\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "thus \"u \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "by (rule assms(2))"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?u20 \\<in> keys p \\<Longrightarrow> ?u20 \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p = v", "from lt_alt[OF \\<open>p \\<noteq> 0\\<close>] ord_term_lin.Max_eqI[OF finite_keys this \\<open>v \\<in> keys p\\<close>]"], ["proof (chain)\npicking this:\n  lt p = ord_term_lin.Max (keys p)\n  (\\<And>y.\n      y \\<in> keys p \\<Longrightarrow> y \\<in> keys p) \\<Longrightarrow>\n  ord_term_lin.Max (keys p) = v", "show ?thesis"], ["proof (prove)\nusing this:\n  lt p = ord_term_lin.Max (keys p)\n  (\\<And>y.\n      y \\<in> keys p \\<Longrightarrow> y \\<in> keys p) \\<Longrightarrow>\n  ord_term_lin.Max (keys p) = v\n\ngoal (1 subgoal):\n 1. lt p = v", "by simp"], ["proof (state)\nthis:\n  lt p = v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_less:\n  assumes \"p \\<noteq> 0\" and \"\\<And>u. v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = 0\"\n  shows \"lt p \\<prec>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v", "have \"\\<forall>u\\<in>keys p. u \\<prec>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>keys p. u \\<prec>\\<^sub>t v", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<prec>\\<^sub>t v", "fix u::'t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<prec>\\<^sub>t v", "assume \"u \\<in> keys p\""], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<prec>\\<^sub>t v", "hence \"lookup p u \\<noteq> 0\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<prec>\\<^sub>t v", "hence \"\\<not> v \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t u", "using assms(2)[of u]"], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n  v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t u", "by auto"], ["proof (state)\nthis:\n  \\<not> v \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<prec>\\<^sub>t v", "thus \"u \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  \\<not> v \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u\\<in>keys p. u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v", "with lt_alt[OF assms(1)] ord_term_lin.Max_less_iff[OF finite_keys \\<open>keys p \\<noteq> {}\\<close>]"], ["proof (chain)\npicking this:\n  lt p = ord_term_lin.Max (keys p)\n  (ord_term_lin.Max (keys p) \\<prec>\\<^sub>t ?x) =\n  (\\<forall>a\\<in>keys p. a \\<prec>\\<^sub>t ?x)\n  \\<forall>u\\<in>keys p. u \\<prec>\\<^sub>t v", "show ?thesis"], ["proof (prove)\nusing this:\n  lt p = ord_term_lin.Max (keys p)\n  (ord_term_lin.Max (keys p) \\<prec>\\<^sub>t ?x) =\n  (\\<forall>a\\<in>keys p. a \\<prec>\\<^sub>t ?x)\n  \\<forall>u\\<in>keys p. u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_le:\n  assumes \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = 0\"\n  shows \"lt p \\<preceq>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lt p \\<preceq>\\<^sub>t v\n 2. p \\<noteq> 0 \\<Longrightarrow> lt p \\<preceq>\\<^sub>t v", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lt p \\<preceq>\\<^sub>t v\n 2. p \\<noteq> 0 \\<Longrightarrow> lt p \\<preceq>\\<^sub>t v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v", "by (simp add: True min_term_min)"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lt p \\<preceq>\\<^sub>t v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lt p \\<preceq>\\<^sub>t v", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lt p \\<preceq>\\<^sub>t v", "hence \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lt p \\<preceq>\\<^sub>t v", "have \"\\<forall>u\\<in>keys p. u \\<preceq>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>keys p. u \\<preceq>\\<^sub>t v", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<preceq>\\<^sub>t v", "fix u::'t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<preceq>\\<^sub>t v", "assume \"u \\<in> keys p\""], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<preceq>\\<^sub>t v", "hence \"lookup p u \\<noteq> 0\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b)", "unfolding keys_def"], ["proof (prove)\nusing this:\n  u \\<in> map_fun lookup id (\\<lambda>f. {k. f k \\<noteq> (0::'b)}) p\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<preceq>\\<^sub>t v", "hence \"\\<not> v \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t u", "using assms[of u]"], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n  v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t u", "by auto"], ["proof (state)\nthis:\n  \\<not> v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<preceq>\\<^sub>t v", "thus \"u \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  \\<not> v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u\\<in>keys p. u \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lt p \\<preceq>\\<^sub>t v", "with lt_alt[OF False] ord_term_lin.Max_le_iff[OF finite_keys[of p] \\<open>keys p \\<noteq> {}\\<close>]"], ["proof (chain)\npicking this:\n  lt p = ord_term_lin.Max (keys p)\n  (ord_term_lin.Max (keys p) \\<preceq>\\<^sub>t ?x) =\n  (\\<forall>a\\<in>keys p. a \\<preceq>\\<^sub>t ?x)\n  \\<forall>u\\<in>keys p. u \\<preceq>\\<^sub>t v", "show ?thesis"], ["proof (prove)\nusing this:\n  lt p = ord_term_lin.Max (keys p)\n  (ord_term_lin.Max (keys p) \\<preceq>\\<^sub>t ?x) =\n  (\\<forall>a\\<in>keys p. a \\<preceq>\\<^sub>t ?x)\n  \\<forall>u\\<in>keys p. u \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_gr:\n  assumes \"lookup p s \\<noteq> 0\" and \"t \\<prec>\\<^sub>t s\"\n  shows \"t \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<prec>\\<^sub>t lt p", "using assms lt_max ord_term_lin.order.strict_trans2"], ["proof (prove)\nusing this:\n  lookup p s \\<noteq> (0::'b)\n  t \\<prec>\\<^sub>t s\n  lookup ?p ?v \\<noteq> (0::?'b) \\<Longrightarrow>\n  ?v \\<preceq>\\<^sub>t lt ?p\n  \\<lbrakk>?a \\<prec>\\<^sub>t ?b; ?b \\<preceq>\\<^sub>t ?c\\<rbrakk>\n  \\<Longrightarrow> ?a \\<prec>\\<^sub>t ?c\n\ngoal (1 subgoal):\n 1. t \\<prec>\\<^sub>t lt p", "by blast"], ["", "lemma lc_not_0:\n  assumes \"p \\<noteq> 0\"\n  shows \"lc p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc p \\<noteq> (0::'b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lc p \\<noteq> (0::'b)", "from keys_zero assms"], ["proof (chain)\npicking this:\n  keys 0 = {}\n  p \\<noteq> 0", "have \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  keys 0 = {}\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. lc p \\<noteq> (0::'b)", "from lt_alt[OF assms] ord_term_lin.Max_in[OF finite_keys this]"], ["proof (chain)\npicking this:\n  lt p = ord_term_lin.Max (keys p)\n  ord_term_lin.Max (keys p) \\<in> keys p", "show ?thesis"], ["proof (prove)\nusing this:\n  lt p = ord_term_lin.Max (keys p)\n  ord_term_lin.Max (keys p) \\<in> keys p\n\ngoal (1 subgoal):\n 1. lc p \\<noteq> (0::'b)", "by (simp add: in_keys_iff lc_def)"], ["proof (state)\nthis:\n  lc p \\<noteq> (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lc_eq_zero_iff: \"lc p = 0 \\<longleftrightarrow> p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lc p = (0::'b)) = (p = 0)", "using lc_not_0 lc_zero"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<Longrightarrow> lc ?p \\<noteq> (0::?'b)\n  lc 0 = (0::?'b)\n\ngoal (1 subgoal):\n 1. (lc p = (0::'b)) = (p = 0)", "by blast"], ["", "lemma lt_in_keys:\n  assumes \"p \\<noteq> 0\"\n  shows \"lt p \\<in> (keys p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<in> keys p", "by (metis assms in_keys_iff lc_def lc_not_0)"], ["", "lemma lt_monomial:\n  assumes \"c \\<noteq> 0\"\n  shows \"lt (monomial c t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (monomial c t) = t", "by (metis assms lookup_single_eq lookup_single_not_eq lt_eqI ord_term_lin.eq_iff)"], ["", "lemma lc_monomial [simp]: \"lc (monomial c t) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (monomial c t) = c", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow> lc (monomial c t) = c\n 2. c \\<noteq> (0::'b) \\<Longrightarrow> lc (monomial c t) = c", "case True"], ["proof (state)\nthis:\n  c = (0::'b)\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow> lc (monomial c t) = c\n 2. c \\<noteq> (0::'b) \\<Longrightarrow> lc (monomial c t) = c", "thus ?thesis"], ["proof (prove)\nusing this:\n  c = (0::'b)\n\ngoal (1 subgoal):\n 1. lc (monomial c t) = c", "by simp"], ["proof (state)\nthis:\n  lc (monomial c t) = c\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> lc (monomial c t) = c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> lc (monomial c t) = c", "case False"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> lc (monomial c t) = c", "thus ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lc (monomial c t) = c", "by (simp add: lc_def lt_monomial)"], ["proof (state)\nthis:\n  lc (monomial c t) = c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_le_iff: \"lt p \\<preceq>\\<^sub>t v \\<longleftrightarrow> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = 0)\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (lt p \\<preceq>\\<^sub>t v) =\n    (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b)\n 2. \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow>\n       lookup p u = (0::'b) \\<Longrightarrow>\n    lt p \\<preceq>\\<^sub>t v", "assume ?L"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v\n\ngoal (2 subgoals):\n 1. lt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b)\n 2. \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow>\n       lookup p u = (0::'b) \\<Longrightarrow>\n    lt p \\<preceq>\\<^sub>t v", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b)", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "note \\<open>lt p \\<preceq>\\<^sub>t v\\<close>"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "also"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "assume \"v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "finally"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t u", "have \"lt p \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t u", "."], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "hence \"\\<not> u \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  \\<not> u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "with lt_max[of p u]"], ["proof (chain)\npicking this:\n  lookup p u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p\n  \\<not> u \\<preceq>\\<^sub>t lt p", "show \"lookup p u = 0\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p\n  \\<not> u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow>\n       lookup p u = (0::'b) \\<Longrightarrow>\n    lt p \\<preceq>\\<^sub>t v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow>\n       lookup p u = (0::'b) \\<Longrightarrow>\n    lt p \\<preceq>\\<^sub>t v", "assume ?R"], ["proof (state)\nthis:\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow>\n       lookup p u = (0::'b) \\<Longrightarrow>\n    lt p \\<preceq>\\<^sub>t v", "thus ?L"], ["proof (prove)\nusing this:\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v", "using lt_le"], ["proof (prove)\nusing this:\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b)\n  (\\<And>u.\n      ?v \\<prec>\\<^sub>t u \\<Longrightarrow>\n      lookup ?p u = (0::?'b)) \\<Longrightarrow>\n  lt ?p \\<preceq>\\<^sub>t ?v\n\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v", "by auto"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_plus_eqI:\n  assumes \"lt p \\<prec>\\<^sub>t lt q\"\n  shows \"lt (p + q) = lt q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) = lt q", "proof (cases \"q = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. q = 0 \\<Longrightarrow> lt (p + q) = lt q\n 2. q \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt q", "case True"], ["proof (state)\nthis:\n  q = 0\n\ngoal (2 subgoals):\n 1. q = 0 \\<Longrightarrow> lt (p + q) = lt q\n 2. q \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt q", "with assms"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t lt q\n  q = 0", "have \"lt p \\<prec>\\<^sub>t min_term\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t lt q\n  q = 0\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t min_term", "by (simp add: lt_def)"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t min_term\n\ngoal (2 subgoals):\n 1. q = 0 \\<Longrightarrow> lt (p + q) = lt q\n 2. q \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt q", "with min_term_min[of \"lt p\"]"], ["proof (chain)\npicking this:\n  min_term \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t min_term", "show ?thesis"], ["proof (prove)\nusing this:\n  min_term \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t min_term\n\ngoal (1 subgoal):\n 1. lt (p + q) = lt q", "by simp"], ["proof (state)\nthis:\n  lt (p + q) = lt q\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt q", "case False"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) = lt q", "proof (intro lt_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (p + q) (lt q) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt q", "from lt_gr[of p \"lt q\" \"lt p\"] assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>lookup p (lt q) \\<noteq> (0::'b);\n   lt p \\<prec>\\<^sub>t lt q\\<rbrakk>\n  \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t lt q", "have \"lookup p (lt q) = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>lookup p (lt q) \\<noteq> (0::'b);\n   lt p \\<prec>\\<^sub>t lt q\\<rbrakk>\n  \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lookup p (lt q) = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p (lt q) = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup (p + q) (lt q) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt q", "with lookup_add[of p q \"lt q\"] lc_not_0[OF False]"], ["proof (chain)\npicking this:\n  lookup (p + q) (lt q) = lookup p (lt q) + lookup q (lt q)\n  lc q \\<noteq> (0::'b)\n  lookup p (lt q) = (0::'b)", "show \"lookup (p + q) (lt q) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup (p + q) (lt q) = lookup p (lt q) + lookup q (lt q)\n  lc q \\<noteq> (0::'b)\n  lookup p (lt q) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + q) (lt q) \\<noteq> (0::'b)", "unfolding lc_def"], ["proof (prove)\nusing this:\n  lookup (p + q) (lt q) = lookup p (lt q) + lookup q (lt q)\n  lookup q (lt q) \\<noteq> (0::'b)\n  lookup p (lt q) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + q) (lt q) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup (p + q) (lt q) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt q", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt q", "assume \"lookup (p + q) u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup (p + q) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt q", "show \"u \\<preceq>\\<^sub>t lt q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt q", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt q \\<Longrightarrow> False", "assume \"\\<not> u \\<preceq>\\<^sub>t lt q\""], ["proof (state)\nthis:\n  \\<not> u \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt q \\<Longrightarrow> False", "hence qs: \"lt q \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  \\<not> u \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt q \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t u", "have \"lt p \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt q \\<Longrightarrow> False", "with lt_gr[of p u \"lt p\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>lookup p u \\<noteq> (0::'b); lt p \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u", "have \"lookup p u = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>lookup p u \\<noteq> (0::'b); lt p \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt q \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt q \\<Longrightarrow> False", "from qs lt_gr[of q u \"lt q\"]"], ["proof (chain)\npicking this:\n  lt q \\<prec>\\<^sub>t u\n  \\<lbrakk>lookup q u \\<noteq> (0::'b); lt q \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt q", "have \"lookup q u = 0\""], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t u\n  \\<lbrakk>lookup q u \\<noteq> (0::'b); lt q \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lookup q u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt q \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  lookup p u = (0::'b)\n  lookup q u = (0::'b)", "show False"], ["proof (prove)\nusing this:\n  lookup p u = (0::'b)\n  lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. False", "using \\<open>lookup (p + q) u \\<noteq> 0\\<close> lookup_add[of p q u]"], ["proof (prove)\nusing this:\n  lookup p u = (0::'b)\n  lookup q u = (0::'b)\n  lookup (p + q) u \\<noteq> (0::'b)\n  lookup (p + q) u = lookup p u + lookup q u\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (p + q) = lt q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_plus_eqI_2:\n  assumes \"lt q \\<prec>\\<^sub>t lt p\"\n  shows \"lt (p + q) = lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) = lt p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lt (p + q) = lt p\n 2. p \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lt (p + q) = lt p\n 2. p \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt p", "with assms"], ["proof (chain)\npicking this:\n  lt q \\<prec>\\<^sub>t lt p\n  p = 0", "have \"lt q \\<prec>\\<^sub>t min_term\""], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t lt p\n  p = 0\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t min_term", "by (simp add: lt_def)"], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t min_term\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lt (p + q) = lt p\n 2. p \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt p", "with min_term_min[of \"lt q\"]"], ["proof (chain)\npicking this:\n  min_term \\<preceq>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t min_term", "show ?thesis"], ["proof (prove)\nusing this:\n  min_term \\<preceq>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t min_term\n\ngoal (1 subgoal):\n 1. lt (p + q) = lt p", "by simp"], ["proof (state)\nthis:\n  lt (p + q) = lt p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lt (p + q) = lt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) = lt p", "proof (intro lt_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (p + q) (lt p) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "from lt_gr[of q \"lt p\" \"lt q\"] assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>lookup q (lt p) \\<noteq> (0::'b);\n   lt q \\<prec>\\<^sub>t lt p\\<rbrakk>\n  \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t lt p", "have \"lookup q (lt p) = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>lookup q (lt p) \\<noteq> (0::'b);\n   lt q \\<prec>\\<^sub>t lt p\\<rbrakk>\n  \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup q (lt p) = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup q (lt p) = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup (p + q) (lt p) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "with lookup_add[of p q \"lt p\"] lc_not_0[OF False]"], ["proof (chain)\npicking this:\n  lookup (p + q) (lt p) = lookup p (lt p) + lookup q (lt p)\n  lc p \\<noteq> (0::'b)\n  lookup q (lt p) = (0::'b)", "show \"lookup (p + q) (lt p) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup (p + q) (lt p) = lookup p (lt p) + lookup q (lt p)\n  lc p \\<noteq> (0::'b)\n  lookup q (lt p) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + q) (lt p) \\<noteq> (0::'b)", "unfolding lc_def"], ["proof (prove)\nusing this:\n  lookup (p + q) (lt p) = lookup p (lt p) + lookup q (lt p)\n  lookup p (lt p) \\<noteq> (0::'b)\n  lookup q (lt p) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + q) (lt p) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup (p + q) (lt p) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "assume \"lookup (p + q) u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup (p + q) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "show \"u \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt p", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt p \\<Longrightarrow> False", "assume \"\\<not> u \\<preceq>\\<^sub>t lt p\""], ["proof (state)\nthis:\n  \\<not> u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt p \\<Longrightarrow> False", "hence ps: \"lt p \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  \\<not> u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt p \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  lt q \\<prec>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u", "have \"lt q \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt p \\<Longrightarrow> False", "with lt_gr[of q u \"lt q\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>lookup q u \\<noteq> (0::'b); lt q \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t u", "have \"lookup q u = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>lookup q u \\<noteq> (0::'b); lt q \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup q u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt p \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt p \\<Longrightarrow> False", "from ps lt_gr[of p u \"lt p\"]"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t u\n  \\<lbrakk>lookup p u \\<noteq> (0::'b); lt p \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt p", "have \"lookup p u = 0\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t u\n  \\<lbrakk>lookup p u \\<noteq> (0::'b); lt p \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt p \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  lookup q u = (0::'b)\n  lookup p u = (0::'b)", "show False"], ["proof (prove)\nusing this:\n  lookup q u = (0::'b)\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. False", "using \\<open>lookup (p + q) u \\<noteq> 0\\<close> lookup_add[of p q u]"], ["proof (prove)\nusing this:\n  lookup q u = (0::'b)\n  lookup p u = (0::'b)\n  lookup (p + q) u \\<noteq> (0::'b)\n  lookup (p + q) u = lookup p u + lookup q u\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (p + q) = lt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_plus_eqI_3:\n  assumes \"lt q = lt p\" and \"lc p + lc q \\<noteq> 0\"\n  shows \"lt (p + q) = lt (p::'t \\<Rightarrow>\\<^sub>0 'b::monoid_add)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) = lt p", "proof (rule lt_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (p + q) (lt p) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "from assms(2)"], ["proof (chain)\npicking this:\n  lc p + lc q \\<noteq> (0::'b)", "show \"lookup (p + q) (lt p) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc p + lc q \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + q) (lt p) \\<noteq> (0::'b)", "by (simp add: lookup_add lc_def assms(1))"], ["proof (state)\nthis:\n  lookup (p + q) (lt p) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "assume \"lookup (p + q) u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup (p + q) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "hence \"lookup p u + lookup q u \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup (p + q) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p u + lookup q u \\<noteq> (0::'b)", "by (simp add: lookup_add)"], ["proof (state)\nthis:\n  lookup p u + lookup q u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "hence \"lookup p u \\<noteq> 0 \\<or> lookup q u \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup p u + lookup q u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b) \\<or> lookup q u \\<noteq> (0::'b)", "by auto"], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b) \\<or> lookup q u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p + q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "thus \"u \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b) \\<or> lookup q u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup p u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p\n 2. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "assume \"lookup p u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. lookup p u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p\n 2. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt p", "by (rule lt_max)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "assume \"lookup q u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup q u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "hence \"u \\<preceq>\\<^sub>t lt q\""], ["proof (prove)\nusing this:\n  lookup q u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt q", "by (rule lt_max)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt p", "by (simp only: assms(1))"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_plus_lessE:\n  assumes \"lt p \\<prec>\\<^sub>t lt (p + q)\"\n  shows \"lt p \\<prec>\\<^sub>t lt q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt q", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> False", "assume \"\\<not> lt p \\<prec>\\<^sub>t lt q\""], ["proof (state)\nthis:\n  \\<not> lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. \\<not> lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> False", "hence \"lt p = lt q \\<or> lt q \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  \\<not> lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt p = lt q \\<or> lt q \\<prec>\\<^sub>t lt p", "by auto"], ["proof (state)\nthis:\n  lt p = lt q \\<or> lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<not> lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  lt p = lt q \\<or> lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow> False\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "assume lt_eq: \"lt p = lt q\""], ["proof (state)\nthis:\n  lt p = lt q\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow> False\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "have \"lt (p + q) \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) \\<preceq>\\<^sub>t lt p", "proof (rule lt_le)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "assume \"lt p \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "with lt_gr[of p u \"lt p\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>lookup p u \\<noteq> (0::'b); lt p \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u", "have \"lookup p u = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>lookup p u \\<noteq> (0::'b); lt p \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "from \\<open>lt p \\<prec>\\<^sub>t u\\<close>"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t u", "have \"lt q \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t u", "using lt_eq"], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t u\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "with lt_gr[of q u \"lt q\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>lookup q u \\<noteq> (0::'b); lt q \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t u", "have \"lookup q u = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>lookup q u \\<noteq> (0::'b); lt q \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup q u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "with \\<open>lookup p u = 0\\<close>"], ["proof (chain)\npicking this:\n  lookup p u = (0::'b)\n  lookup q u = (0::'b)", "show \"lookup (p + q) u = 0\""], ["proof (prove)\nusing this:\n  lookup p u = (0::'b)\n  lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + q) u = (0::'b)", "by (simp add: lookup_add)"], ["proof (state)\nthis:\n  lookup (p + q) u = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (p + q) \\<preceq>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow> False\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t lt (p + q)\n  lt (p + q) \\<preceq>\\<^sub>t lt p", "show False"], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t lt (p + q)\n  lt (p + q) \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "assume \"lt q \\<prec>\\<^sub>t lt p\""], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "from lt_plus_eqI_2[OF this] assms"], ["proof (chain)\npicking this:\n  lt (p + q) = lt p\n  lt p \\<prec>\\<^sub>t lt (p + q)", "show False"], ["proof (prove)\nusing this:\n  lt (p + q) = lt p\n  lt p \\<prec>\\<^sub>t lt (p + q)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_plus_lessE_2:\n  assumes \"lt q \\<prec>\\<^sub>t lt (p + q)\"\n  shows \"lt q \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t lt p", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "assume \"\\<not> lt q \\<prec>\\<^sub>t lt p\""], ["proof (state)\nthis:\n  \\<not> lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<not> lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "hence \"lt q = lt p \\<or> lt p \\<prec>\\<^sub>t lt q\""], ["proof (prove)\nusing this:\n  \\<not> lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt q = lt p \\<or> lt p \\<prec>\\<^sub>t lt q", "by auto"], ["proof (state)\nthis:\n  lt q = lt p \\<or> lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. \\<not> lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  lt q = lt p \\<or> lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lt q = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> False", "assume lt_eq: \"lt q = lt p\""], ["proof (state)\nthis:\n  lt q = lt p\n\ngoal (2 subgoals):\n 1. lt q = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> False", "have \"lt (p + q) \\<preceq>\\<^sub>t lt q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) \\<preceq>\\<^sub>t lt q", "proof (rule lt_le)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "assume \"lt q \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "with lt_gr[of q u \"lt q\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>lookup q u \\<noteq> (0::'b); lt q \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t u", "have \"lookup q u = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>lookup q u \\<noteq> (0::'b); lt q \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup q u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "from \\<open>lt q \\<prec>\\<^sub>t u\\<close>"], ["proof (chain)\npicking this:\n  lt q \\<prec>\\<^sub>t u", "have \"lt p \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t u", "using lt_eq"], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t u\n  lt q = lt p\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "with lt_gr[of p u \"lt p\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>lookup p u \\<noteq> (0::'b); lt p \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u", "have \"lookup p u = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>lookup p u \\<noteq> (0::'b); lt p \\<prec>\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup (p + q) u = (0::'b)", "with \\<open>lookup q u = 0\\<close>"], ["proof (chain)\npicking this:\n  lookup q u = (0::'b)\n  lookup p u = (0::'b)", "show \"lookup (p + q) u = 0\""], ["proof (prove)\nusing this:\n  lookup q u = (0::'b)\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + q) u = (0::'b)", "by (simp add: lookup_add)"], ["proof (state)\nthis:\n  lookup (p + q) u = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (p + q) \\<preceq>\\<^sub>t lt q\n\ngoal (2 subgoals):\n 1. lt q = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  lt q \\<prec>\\<^sub>t lt (p + q)\n  lt (p + q) \\<preceq>\\<^sub>t lt q", "show False"], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t lt (p + q)\n  lt (p + q) \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> False", "assume \"lt p \\<prec>\\<^sub>t lt q\""], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> False", "from lt_plus_eqI[OF this] assms"], ["proof (chain)\npicking this:\n  lt (p + q) = lt q\n  lt q \\<prec>\\<^sub>t lt (p + q)", "show False"], ["proof (prove)\nusing this:\n  lt (p + q) = lt q\n  lt q \\<prec>\\<^sub>t lt (p + q)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_plus_lessI':\n  fixes p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::monoid_add\"\n  assumes \"p + q \\<noteq> 0\" and lt_eq: \"lt q = lt p\" and lc_eq: \"lc p + lc q = 0\"\n  shows \"lt (p + q) \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) \\<prec>\\<^sub>t lt p", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lt (p + q) \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "assume \"\\<not> lt (p + q) \\<prec>\\<^sub>t lt p\""], ["proof (state)\nthis:\n  \\<not> lt (p + q) \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<not> lt (p + q) \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "hence \"lt (p + q) = lt p \\<or> lt p \\<prec>\\<^sub>t lt (p + q)\""], ["proof (prove)\nusing this:\n  \\<not> lt (p + q) \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt (p + q) = lt p \\<or> lt p \\<prec>\\<^sub>t lt (p + q)", "by auto"], ["proof (state)\nthis:\n  lt (p + q) = lt p \\<or> lt p \\<prec>\\<^sub>t lt (p + q)\n\ngoal (1 subgoal):\n 1. \\<not> lt (p + q) \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  lt (p + q) = lt p \\<or> lt p \\<prec>\\<^sub>t lt (p + q)\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lt (p + q) = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "assume \"lt (p + q) = lt p\""], ["proof (state)\nthis:\n  lt (p + q) = lt p\n\ngoal (2 subgoals):\n 1. lt (p + q) = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "have \"lookup (p + q) (lt p) = (lookup p (lt p)) + (lookup q (lt q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (p + q) (lt p) = lookup p (lt p) + lookup q (lt q)", "unfolding lt_eq lookup_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p (lt p) + lookup q (lt p) = lookup p (lt p) + lookup q (lt p)", ".."], ["proof (state)\nthis:\n  lookup (p + q) (lt p) = lookup p (lt p) + lookup q (lt q)\n\ngoal (2 subgoals):\n 1. lt (p + q) = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lookup (p + q) (lt p) = lookup p (lt p) + lookup q (lt q)\n\ngoal (2 subgoals):\n 1. lt (p + q) = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "have \"... = lc p + lc q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p (lt p) + lookup q (lt q) = lc p + lc q", "unfolding lc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p (lt p) + lookup q (lt q) = lookup p (lt p) + lookup q (lt q)", ".."], ["proof (state)\nthis:\n  lookup p (lt p) + lookup q (lt q) = lc p + lc q\n\ngoal (2 subgoals):\n 1. lt (p + q) = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lookup p (lt p) + lookup q (lt q) = lc p + lc q\n\ngoal (2 subgoals):\n 1. lt (p + q) = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc p + lc q = (0::'b)", "unfolding lc_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'b) = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lc p + lc q = (0::'b)\n\ngoal (2 subgoals):\n 1. lt (p + q) = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  lookup (p + q) (lt p) = (0::'b)", "have \"lookup (p + q) (lt p) = 0\""], ["proof (prove)\nusing this:\n  lookup (p + q) (lt p) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + q) (lt p) = (0::'b)", "."], ["proof (state)\nthis:\n  lookup (p + q) (lt p) = (0::'b)\n\ngoal (2 subgoals):\n 1. lt (p + q) = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "hence \"lt (p + q) \\<noteq> lt p\""], ["proof (prove)\nusing this:\n  lookup (p + q) (lt p) = (0::'b)\n\ngoal (1 subgoal):\n 1. lt (p + q) \\<noteq> lt p", "using lc_not_0[OF \\<open>p + q \\<noteq> 0\\<close>]"], ["proof (prove)\nusing this:\n  lookup (p + q) (lt p) = (0::'b)\n  lc (p + q) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt (p + q) \\<noteq> lt p", "unfolding lc_def"], ["proof (prove)\nusing this:\n  lookup (p + q) (lt p) = (0::'b)\n  lookup (p + q) (lt (p + q)) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt (p + q) \\<noteq> lt p", "by auto"], ["proof (state)\nthis:\n  lt (p + q) \\<noteq> lt p\n\ngoal (2 subgoals):\n 1. lt (p + q) = lt p \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "with \\<open>lt (p + q) = lt p\\<close>"], ["proof (chain)\npicking this:\n  lt (p + q) = lt p\n  lt (p + q) \\<noteq> lt p", "show False"], ["proof (prove)\nusing this:\n  lt (p + q) = lt p\n  lt (p + q) \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "assume \"lt p \\<prec>\\<^sub>t lt (p + q)\""], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t lt (p + q)\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "have \"lt p \\<prec>\\<^sub>t lt q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt q", "by (rule lt_plus_lessE, fact+)"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "hence \"lt p \\<noteq> lt q\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> lt q", "by simp"], ["proof (state)\nthis:\n  lt p \\<noteq> lt q\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt (p + q) \\<Longrightarrow> False", "with lt_eq"], ["proof (chain)\npicking this:\n  lt q = lt p\n  lt p \\<noteq> lt q", "show False"], ["proof (prove)\nusing this:\n  lt q = lt p\n  lt p \\<noteq> lt q\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary lt_plus_lessI:\n  fixes p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::group_add\"\n  assumes \"p + q \\<noteq> 0\" and \"lt q = lt p\" and \"lc q = - lc p\"\n  shows \"lt (p + q) \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) \\<prec>\\<^sub>t lt p", "using assms(1, 2)"], ["proof (prove)\nusing this:\n  p + q \\<noteq> 0\n  lt q = lt p\n\ngoal (1 subgoal):\n 1. lt (p + q) \\<prec>\\<^sub>t lt p", "proof (rule lt_plus_lessI')"], ["proof (state)\ngoal (1 subgoal):\n 1. lc p + lc q = (0::'b)", "from assms(3)"], ["proof (chain)\npicking this:\n  lc q = - lc p", "show \"lc p + lc q = 0\""], ["proof (prove)\nusing this:\n  lc q = - lc p\n\ngoal (1 subgoal):\n 1. lc p + lc q = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lc p + lc q = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_plus_distinct_eq_max:\n  assumes \"lt p \\<noteq> lt q\"\n  shows \"lt (p + q) = ord_term_lin.max (lt p) (lt q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) = ord_term_lin.max (lt p) (lt q)", "proof (rule ord_term_lin.linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. ?x = ?y \\<Longrightarrow> lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "assume a: \"lt p \\<prec>\\<^sub>t lt q\""], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. ?x = ?y \\<Longrightarrow> lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "hence \"lt (p + q) = lt q\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt (p + q) = lt q", "by (rule lt_plus_eqI)"], ["proof (state)\nthis:\n  lt (p + q) = lt q\n\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. ?x = ?y \\<Longrightarrow> lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "also"], ["proof (state)\nthis:\n  lt (p + q) = lt q\n\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. ?x = ?y \\<Longrightarrow> lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "from a"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t lt q", "have \"... = ord_term_lin.max (lt p) (lt q)\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt q = ord_term_lin.max (lt p) (lt q)", "by (simp add: ord_term_lin.max.absorb2)"], ["proof (state)\nthis:\n  lt q = ord_term_lin.max (lt p) (lt q)\n\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. ?x = ?y \\<Longrightarrow> lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "finally"], ["proof (chain)\npicking this:\n  lt (p + q) = ord_term_lin.max (lt p) (lt q)", "show ?thesis"], ["proof (prove)\nusing this:\n  lt (p + q) = ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. lt (p + q) = ord_term_lin.max (lt p) (lt q)", "."], ["proof (state)\nthis:\n  lt (p + q) = ord_term_lin.max (lt p) (lt q)\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "assume a: \"lt q \\<prec>\\<^sub>t lt p\""], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "hence \"lt (p + q) = lt p\""], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt (p + q) = lt p", "by (rule lt_plus_eqI_2)"], ["proof (state)\nthis:\n  lt (p + q) = lt p\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "also"], ["proof (state)\nthis:\n  lt (p + q) = lt p\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "from a"], ["proof (chain)\npicking this:\n  lt q \\<prec>\\<^sub>t lt p", "have \"... = ord_term_lin.max (lt p) (lt q)\""], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt p = ord_term_lin.max (lt p) (lt q)", "by (simp add: ord_term_lin.max.absorb1)"], ["proof (state)\nthis:\n  lt p = ord_term_lin.max (lt p) (lt q)\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "finally"], ["proof (chain)\npicking this:\n  lt (p + q) = ord_term_lin.max (lt p) (lt q)", "show ?thesis"], ["proof (prove)\nusing this:\n  lt (p + q) = ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. lt (p + q) = ord_term_lin.max (lt p) (lt q)", "."], ["proof (state)\nthis:\n  lt (p + q) = ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "assume \"lt p = lt q\""], ["proof (state)\nthis:\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "with assms"], ["proof (chain)\npicking this:\n  lt p \\<noteq> lt q\n  lt p = lt q", "show ?thesis"], ["proof (prove)\nusing this:\n  lt p \\<noteq> lt q\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lt (p + q) = ord_term_lin.max (lt p) (lt q)", ".."], ["proof (state)\nthis:\n  lt (p + q) = ord_term_lin.max (lt p) (lt q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_plus_le_max: \"lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "proof (cases \"lt p = lt q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)\n 2. lt p \\<noteq> lt q \\<Longrightarrow>\n    lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "case True"], ["proof (state)\nthis:\n  lt p = lt q\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)\n 2. lt p \\<noteq> lt q \\<Longrightarrow>\n    lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "proof (rule lt_le)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       ord_term_lin.max (lt p) (lt q) \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (p + q) u = (0::'b)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       ord_term_lin.max (lt p) (lt q) \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (p + q) u = (0::'b)", "assume \"ord_term_lin.max (lt p) (lt q) \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  ord_term_lin.max (lt p) (lt q) \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       ord_term_lin.max (lt p) (lt q) \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (p + q) u = (0::'b)", "hence \"lt p \\<prec>\\<^sub>t u\" and \"lt q \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  ord_term_lin.max (lt p) (lt q) \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t u &&& lt q \\<prec>\\<^sub>t u", "by simp_all"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t u\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       ord_term_lin.max (lt p) (lt q) \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (p + q) u = (0::'b)", "hence \"lookup p u = 0\" and \"lookup q u = 0\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t u\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b) &&& lookup q u = (0::'b)", "using lt_max ord_term_lin.leD"], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t u\n  lt q \\<prec>\\<^sub>t u\n  lookup ?p ?v \\<noteq> (0::?'b) \\<Longrightarrow>\n  ?v \\<preceq>\\<^sub>t lt ?p\n  ?y \\<preceq>\\<^sub>t ?x \\<Longrightarrow> \\<not> ?x \\<prec>\\<^sub>t ?y\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b) &&& lookup q u = (0::'b)", "by blast+"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n  lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       ord_term_lin.max (lt p) (lt q) \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (p + q) u = (0::'b)", "thus \"lookup (p + q) u = 0\""], ["proof (prove)\nusing this:\n  lookup p u = (0::'b)\n  lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + q) u = (0::'b)", "by (simp add: lookup_add)"], ["proof (state)\nthis:\n  lookup (p + q) u = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> lt q \\<Longrightarrow>\n    lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<noteq> lt q \\<Longrightarrow>\n    lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "case False"], ["proof (state)\nthis:\n  lt p \\<noteq> lt q\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> lt q \\<Longrightarrow>\n    lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "hence \"lt (p + q) = ord_term_lin.max (lt p) (lt q)\""], ["proof (prove)\nusing this:\n  lt p \\<noteq> lt q\n\ngoal (1 subgoal):\n 1. lt (p + q) = ord_term_lin.max (lt p) (lt q)", "by (rule lt_plus_distinct_eq_max)"], ["proof (state)\nthis:\n  lt (p + q) = ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> lt q \\<Longrightarrow>\n    lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  lt (p + q) = ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "by simp"], ["proof (state)\nthis:\n  lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_minus_eqI: \"lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> lt (p - q) = lt q\" for p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> lt (p - q) = lt q", "by (metis lt_plus_eqI_2 lt_uminus uminus_add_conv_diff)"], ["", "lemma lt_minus_eqI_2: \"lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> lt (p - q) = lt p\" for p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow> lt (p - q) = lt p", "by (metis lt_minus_eqI lt_uminus minus_diff_eq)"], ["", "lemma lt_minus_eqI_3:\n  assumes \"lt q = lt p\" and \"lc q \\<noteq> lc p\"\n  shows \"lt (p - q) = lt (p::'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p - q) = lt p", "proof (rule lt_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (p - q) (lt p) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lookup (p - q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "from assms(2)"], ["proof (chain)\npicking this:\n  lc q \\<noteq> lc p", "show \"lookup (p - q) (lt p) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc q \\<noteq> lc p\n\ngoal (1 subgoal):\n 1. lookup (p - q) (lt p) \\<noteq> (0::'b)", "by (simp add: lookup_minus lc_def assms(1))"], ["proof (state)\nthis:\n  lookup (p - q) (lt p) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p - q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p - q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p - q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "assume \"lookup (p - q) u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup (p - q) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p - q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "hence \"lookup p u \\<noteq> lookup q u\""], ["proof (prove)\nusing this:\n  lookup (p - q) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> lookup q u", "by (simp add: lookup_minus)"], ["proof (state)\nthis:\n  lookup p u \\<noteq> lookup q u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p - q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "hence \"lookup p u \\<noteq> 0 \\<or> lookup q u \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> lookup q u\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b) \\<or> lookup q u \\<noteq> (0::'b)", "by auto"], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b) \\<or> lookup q u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p - q) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "thus \"u \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b) \\<or> lookup q u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup p u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p\n 2. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "assume \"lookup p u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. lookup p u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p\n 2. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt p", "by (rule lt_max)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "assume \"lookup q u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup q u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "hence \"u \\<preceq>\\<^sub>t lt q\""], ["proof (prove)\nusing this:\n  lookup q u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt q", "by (rule lt_max)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt p", "by (simp only: assms(1))"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_minus_distinct_eq_max:\n  assumes \"lt p \\<noteq> lt (q::'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add)\"\n  shows \"lt (p - q) = ord_term_lin.max (lt p) (lt q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p - q) = ord_term_lin.max (lt p) (lt q)", "proof (rule ord_term_lin.linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 2. ?x = ?y \\<Longrightarrow> lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "assume a: \"lt p \\<prec>\\<^sub>t lt q\""], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 2. ?x = ?y \\<Longrightarrow> lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "hence \"lt (p - q) = lt q\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt (p - q) = lt q", "by (rule lt_minus_eqI)"], ["proof (state)\nthis:\n  lt (p - q) = lt q\n\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 2. ?x = ?y \\<Longrightarrow> lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "also"], ["proof (state)\nthis:\n  lt (p - q) = lt q\n\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 2. ?x = ?y \\<Longrightarrow> lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "from a"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t lt q", "have \"... = ord_term_lin.max (lt p) (lt q)\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt q = ord_term_lin.max (lt p) (lt q)", "by (simp add: ord_term_lin.max.absorb2)"], ["proof (state)\nthis:\n  lt q = ord_term_lin.max (lt p) (lt q)\n\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 2. ?x = ?y \\<Longrightarrow> lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "finally"], ["proof (chain)\npicking this:\n  lt (p - q) = ord_term_lin.max (lt p) (lt q)", "show ?thesis"], ["proof (prove)\nusing this:\n  lt (p - q) = ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. lt (p - q) = ord_term_lin.max (lt p) (lt q)", "."], ["proof (state)\nthis:\n  lt (p - q) = ord_term_lin.max (lt p) (lt q)\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "assume a: \"lt q \\<prec>\\<^sub>t lt p\""], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "hence \"lt (p - q) = lt p\""], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt (p - q) = lt p", "by (rule lt_minus_eqI_2)"], ["proof (state)\nthis:\n  lt (p - q) = lt p\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "also"], ["proof (state)\nthis:\n  lt (p - q) = lt p\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "from a"], ["proof (chain)\npicking this:\n  lt q \\<prec>\\<^sub>t lt p", "have \"... = ord_term_lin.max (lt p) (lt q)\""], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt p = ord_term_lin.max (lt p) (lt q)", "by (simp add: ord_term_lin.max.absorb1)"], ["proof (state)\nthis:\n  lt p = ord_term_lin.max (lt p) (lt q)\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)\n 2. lt q \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "finally"], ["proof (chain)\npicking this:\n  lt (p - q) = ord_term_lin.max (lt p) (lt q)", "show ?thesis"], ["proof (prove)\nusing this:\n  lt (p - q) = ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. lt (p - q) = ord_term_lin.max (lt p) (lt q)", "."], ["proof (state)\nthis:\n  lt (p - q) = ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "assume \"lt p = lt q\""], ["proof (state)\nthis:\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p - q) = ord_term_lin.max (lt p) (lt q)", "with assms"], ["proof (chain)\npicking this:\n  lt p \\<noteq> lt q\n  lt p = lt q", "show ?thesis"], ["proof (prove)\nusing this:\n  lt p \\<noteq> lt q\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lt (p - q) = ord_term_lin.max (lt p) (lt q)", ".."], ["proof (state)\nthis:\n  lt (p - q) = ord_term_lin.max (lt p) (lt q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_minus_lessE: \"lt p \\<prec>\\<^sub>t lt (p - q) \\<Longrightarrow> lt p \\<prec>\\<^sub>t lt q\" for p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt (p - q) \\<Longrightarrow>\n    lt p \\<prec>\\<^sub>t lt q", "using lt_minus_eqI_2"], ["proof (prove)\nusing this:\n  lt ?q \\<prec>\\<^sub>t lt ?p \\<Longrightarrow> lt (?p - ?q) = lt ?p\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt (p - q) \\<Longrightarrow>\n    lt p \\<prec>\\<^sub>t lt q", "by fastforce"], ["", "lemma lt_minus_lessE_2: \"lt q \\<prec>\\<^sub>t lt (p - q) \\<Longrightarrow> lt q \\<prec>\\<^sub>t lt p\" for p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t lt (p - q) \\<Longrightarrow>\n    lt q \\<prec>\\<^sub>t lt p", "using lt_plus_eqI_2"], ["proof (prove)\nusing this:\n  lt ?q \\<prec>\\<^sub>t lt ?p \\<Longrightarrow> lt (?p + ?q) = lt ?p\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t lt (p - q) \\<Longrightarrow>\n    lt q \\<prec>\\<^sub>t lt p", "by fastforce"], ["", "lemma lt_minus_lessI: \"p - q \\<noteq> 0 \\<Longrightarrow> lt q = lt p \\<Longrightarrow> lc q = lc p \\<Longrightarrow> lt (p - q) \\<prec>\\<^sub>t lt p\"\n  for p q :: \"'t \\<Rightarrow>\\<^sub>0 'b::ab_group_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p - q \\<noteq> 0; lt q = lt p; lc q = lc p\\<rbrakk>\n    \\<Longrightarrow> lt (p - q) \\<prec>\\<^sub>t lt p", "by (metis (no_types, hide_lams) diff_diff_eq2 diff_self group_eq_aux lc_def lc_not_0 lookup_minus\n      lt_minus_eqI ord_term_lin.antisym_conv3)"], ["", "lemma lt_max_keys:\n  assumes \"v \\<in> keys p\"\n  shows \"v \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "proof (rule lt_max)"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup p v \\<noteq> (0::'b)", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> keys p", "show \"lookup p v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. lookup p v \\<noteq> (0::'b)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup p v \\<noteq> (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_eqI_keys:\n  assumes \"v \\<in> keys p\" and a2: \"\\<And>u. u \\<in> keys p \\<Longrightarrow> u \\<preceq>\\<^sub>t v\"\n  shows \"lt p = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p = v", "by (rule lt_eqI, simp_all only: in_keys_iff[symmetric], fact+)"], ["", "lemma lt_gr_keys:\n  assumes \"u \\<in> keys p\" and \"v \\<prec>\\<^sub>t u\"\n  shows \"v \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "proof (rule lt_gr)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup p ?s \\<noteq> (0::'b)\n 2. v \\<prec>\\<^sub>t ?s", "from assms(1)"], ["proof (chain)\npicking this:\n  u \\<in> keys p", "show \"lookup p u \\<noteq> 0\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t u", "qed fact"], ["", "lemma lt_plus_eq_maxI:\n  assumes \"lt p = lt q \\<Longrightarrow> lc p + lc q \\<noteq> 0\"\n  shows \"lt (p + q) = ord_term_lin.max (lt p) (lt q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) = ord_term_lin.max (lt p) (lt q)", "proof (cases \"lt p = lt q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. lt p \\<noteq> lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "case True"], ["proof (state)\nthis:\n  lt p = lt q\n\ngoal (2 subgoals):\n 1. lt p = lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)\n 2. lt p \\<noteq> lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) = ord_term_lin.max (lt p) (lt q)", "proof (rule lt_eqI_keys)"], ["proof (state)\ngoal (2 subgoals):\n 1. ord_term_lin.max (lt p) (lt q) \\<in> keys (p + q)\n 2. \\<And>u.\n       u \\<in> keys (p + q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "from True"], ["proof (chain)\npicking this:\n  lt p = lt q", "have \"lc p + lc q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lc p + lc q \\<noteq> (0::'b)", "by (rule assms)"], ["proof (state)\nthis:\n  lc p + lc q \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. ord_term_lin.max (lt p) (lt q) \\<in> keys (p + q)\n 2. \\<And>u.\n       u \\<in> keys (p + q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "thus \"ord_term_lin.max (lt p) (lt q) \\<in> keys (p + q)\""], ["proof (prove)\nusing this:\n  lc p + lc q \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. ord_term_lin.max (lt p) (lt q) \\<in> keys (p + q)", "by (simp add: in_keys_iff lc_def lookup_add True)"], ["proof (state)\nthis:\n  ord_term_lin.max (lt p) (lt q) \\<in> keys (p + q)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (p + q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (p + q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (p + q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "assume \"u \\<in> keys (p + q)\""], ["proof (state)\nthis:\n  u \\<in> keys (p + q)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (p + q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "hence \"u \\<preceq>\\<^sub>t lt (p + q)\""], ["proof (prove)\nusing this:\n  u \\<in> keys (p + q)\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt (p + q)", "by (rule lt_max_keys)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt (p + q)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (p + q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "also"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt (p + q)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (p + q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "have \"... \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "by (fact lt_plus_le_max)"], ["proof (state)\nthis:\n  lt (p + q) \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (p + q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "finally"], ["proof (chain)\npicking this:\n  u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "show \"u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)\""], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)", "."], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t ord_term_lin.max (lt p) (lt q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (p + q) = ord_term_lin.max (lt p) (lt q)\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<noteq> lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "case False"], ["proof (state)\nthis:\n  lt p \\<noteq> lt q\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> lt q \\<Longrightarrow>\n    lt (p + q) = ord_term_lin.max (lt p) (lt q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  lt p \\<noteq> lt q\n\ngoal (1 subgoal):\n 1. lt (p + q) = ord_term_lin.max (lt p) (lt q)", "by (rule lt_plus_distinct_eq_max)"], ["proof (state)\nthis:\n  lt (p + q) = ord_term_lin.max (lt p) (lt q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_monom_mult:\n  assumes \"c \\<noteq> (0::'b::semiring_no_zero_divisors)\" and \"p \\<noteq> 0\"\n  shows \"lt (monom_mult c t p) = t \\<oplus> lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (monom_mult c t p) = t \\<oplus> lt p", "proof (intro lt_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (monom_mult c t p) (t \\<oplus> lt p) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lookup (monom_mult c t p) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t t \\<oplus> lt p", "from assms(1)"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)", "show \"lookup (monom_mult c t p) (t \\<oplus> lt p) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c t p) (t \\<oplus> lt p) \\<noteq> (0::'b)", "proof (simp add: lookup_monom_mult_plus)"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> lookup p (lt p) \\<noteq> (0::'b)", "show \"lookup p (lt p) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p (lt p) \\<noteq> (0::'b)", "using assms(2) lt_in_keys"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  ?p \\<noteq> 0 \\<Longrightarrow> lt ?p \\<in> keys ?p\n\ngoal (1 subgoal):\n 1. lookup p (lt p) \\<noteq> (0::'b)", "by auto"], ["proof (state)\nthis:\n  lookup p (lt p) \\<noteq> (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (monom_mult c t p) (t \\<oplus> lt p) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (monom_mult c t p) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t t \\<oplus> lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (monom_mult c t p) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t t \\<oplus> lt p", "fix u::'t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (monom_mult c t p) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t t \\<oplus> lt p", "assume \"lookup (monom_mult c t p) u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup (monom_mult c t p) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (monom_mult c t p) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t t \\<oplus> lt p", "hence \"u \\<in> keys (monom_mult c t p)\""], ["proof (prove)\nusing this:\n  lookup (monom_mult c t p) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<in> keys (monom_mult c t p)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  u \\<in> keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (monom_mult c t p) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t t \\<oplus> lt p", "also"], ["proof (state)\nthis:\n  u \\<in> keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (monom_mult c t p) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t t \\<oplus> lt p", "have \"... \\<subseteq> (\\<oplus>) t ` keys p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (monom_mult c t p) \\<subseteq> (\\<oplus>) t ` keys p", "by (fact keys_monom_mult_subset)"], ["proof (state)\nthis:\n  keys (monom_mult c t p) \\<subseteq> (\\<oplus>) t ` keys p\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (monom_mult c t p) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t t \\<oplus> lt p", "finally"], ["proof (chain)\npicking this:\n  u \\<in> (\\<oplus>) t ` keys p", "obtain v where \"v \\<in> keys p\" and \"u = t \\<oplus> v\""], ["proof (prove)\nusing this:\n  u \\<in> (\\<oplus>) t ` keys p\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p; u = t \\<oplus> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  v \\<in> keys p\n  u = t \\<oplus> v\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (monom_mult c t p) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t t \\<oplus> lt p", "show \"u \\<preceq>\\<^sub>t t \\<oplus> lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t t \\<oplus> lt p", "unfolding \\<open>u = t \\<oplus> v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<preceq>\\<^sub>t t \\<oplus> lt p", "proof (rule splus_mono)"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "from \\<open>v \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> keys p", "show \"v \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "by (rule lt_max_keys)"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t t \\<oplus> lt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_monom_mult_zero:\n  assumes \"c \\<noteq> (0::'b::semiring_no_zero_divisors)\"\n  shows \"lt (monom_mult c 0 p) = lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (monom_mult c (0::'a) p) = lt p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lt (monom_mult c (0::'a) p) = lt p\n 2. p \\<noteq> 0 \\<Longrightarrow> lt (monom_mult c (0::'a) p) = lt p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lt (monom_mult c (0::'a) p) = lt p\n 2. p \\<noteq> 0 \\<Longrightarrow> lt (monom_mult c (0::'a) p) = lt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (monom_mult c (0::'a) p) = lt p", "by (simp add: True)"], ["proof (state)\nthis:\n  lt (monom_mult c (0::'a) p) = lt p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lt (monom_mult c (0::'a) p) = lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lt (monom_mult c (0::'a) p) = lt p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lt (monom_mult c (0::'a) p) = lt p", "with assms"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt (monom_mult c (0::'a) p) = lt p", "by (simp add: lt_monom_mult term_simps)"], ["proof (state)\nthis:\n  lt (monom_mult c (0::'a) p) = lt p\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary lt_map_scale: \"c \\<noteq> (0::'b::semiring_no_zero_divisors) \\<Longrightarrow> lt (c \\<cdot> p) = lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> lt (c \\<cdot> p) = lt p", "by (simp add: map_scale_eq_monom_mult lt_monom_mult_zero)"], ["", "lemma lc_monom_mult [simp]: \"lc (monom_mult c t p) = (c::'b::semiring_no_zero_divisors) * lc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (monom_mult c t p) = c * lc p", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow> lc (monom_mult c t p) = c * lc p\n 2. c \\<noteq> (0::'b) \\<Longrightarrow> lc (monom_mult c t p) = c * lc p", "case True"], ["proof (state)\nthis:\n  c = (0::'b)\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow> lc (monom_mult c t p) = c * lc p\n 2. c \\<noteq> (0::'b) \\<Longrightarrow> lc (monom_mult c t p) = c * lc p", "thus ?thesis"], ["proof (prove)\nusing this:\n  c = (0::'b)\n\ngoal (1 subgoal):\n 1. lc (monom_mult c t p) = c * lc p", "by simp"], ["proof (state)\nthis:\n  lc (monom_mult c t p) = c * lc p\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> lc (monom_mult c t p) = c * lc p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> lc (monom_mult c t p) = c * lc p", "case False"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> lc (monom_mult c t p) = c * lc p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (monom_mult c t p) = c * lc p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lc (monom_mult c t p) = c * lc p\n 2. p \\<noteq> 0 \\<Longrightarrow> lc (monom_mult c t p) = c * lc p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lc (monom_mult c t p) = c * lc p\n 2. p \\<noteq> 0 \\<Longrightarrow> lc (monom_mult c t p) = c * lc p", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. lc (monom_mult c t p) = c * lc p", "by simp"], ["proof (state)\nthis:\n  lc (monom_mult c t p) = c * lc p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lc (monom_mult c t p) = c * lc p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lc (monom_mult c t p) = c * lc p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lc (monom_mult c t p) = c * lc p", "with \\<open>c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc (monom_mult c t p) = c * lc p", "by (simp add: lc_def lt_monom_mult lookup_monom_mult_plus)"], ["proof (state)\nthis:\n  lc (monom_mult c t p) = c * lc p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lc (monom_mult c t p) = c * lc p\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary lc_map_scale [simp]: \"lc (c \\<cdot> p) = (c::'b::semiring_no_zero_divisors) * lc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (c \\<cdot> p) = c * lc p", "by (simp add: map_scale_eq_monom_mult)"], ["", "lemma (in ordered_term) lt_mult_scalar_monomial_right:\n  assumes \"c \\<noteq> (0::'b::semiring_no_zero_divisors)\" and \"p \\<noteq> 0\"\n  shows \"lt (p \\<odot> monomial c v) = punit.lt p \\<oplus> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p \\<odot> monomial c v) = punit.lt p \\<oplus> v", "proof (intro lt_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (p \\<odot> monomial c v) (punit.lt p \\<oplus> v) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lookup (p \\<odot> monomial c v) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v", "from assms(1)"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)", "show \"lookup (p \\<odot> monomial c v) (punit.lt p \\<oplus> v) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p \\<odot> monomial c v) (punit.lt p \\<oplus> v) \\<noteq> (0::'b)", "proof (simp add: lookup_mult_scalar_monomial_right_plus)"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    lookup p (punit.lt p) \\<noteq> (0::'b)", "from assms(2)"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "show \"lookup p (punit.lt p) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lookup p (punit.lt p) \\<noteq> (0::'b)", "using in_keys_iff punit.lt_in_keys"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  (?x \\<in> keys ?s) = (lookup ?s ?x \\<noteq> (0::?'b))\n  ?p \\<noteq> 0 \\<Longrightarrow> punit.lt ?p \\<in> keys ?p\n\ngoal (1 subgoal):\n 1. lookup p (punit.lt p) \\<noteq> (0::'b)", "by fastforce"], ["proof (state)\nthis:\n  lookup p (punit.lt p) \\<noteq> (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (p \\<odot> monomial c v) (punit.lt p \\<oplus> v) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p \\<odot> monomial c v) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p \\<odot> monomial c v) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v", "fix u::'t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p \\<odot> monomial c v) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v", "assume \"lookup (p \\<odot> monomial c v) u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup (p \\<odot> monomial c v) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p \\<odot> monomial c v) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v", "hence \"u \\<in> keys (p \\<odot> monomial c v)\""], ["proof (prove)\nusing this:\n  lookup (p \\<odot> monomial c v) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<in> keys (p \\<odot> monomial c v)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  u \\<in> keys (p \\<odot> monomial c v)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p \\<odot> monomial c v) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v", "also"], ["proof (state)\nthis:\n  u \\<in> keys (p \\<odot> monomial c v)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p \\<odot> monomial c v) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v", "have \"... \\<subseteq> (\\<lambda>t. t \\<oplus> v) ` keys p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (p \\<odot> monomial c v)\n    \\<subseteq> (\\<lambda>t. t \\<oplus> v) ` keys p", "by (fact keys_mult_scalar_monomial_right_subset)"], ["proof (state)\nthis:\n  keys (p \\<odot> monomial c v)\n  \\<subseteq> (\\<lambda>t. t \\<oplus> v) ` keys p\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p \\<odot> monomial c v) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v", "finally"], ["proof (chain)\npicking this:\n  u \\<in> (\\<lambda>t. t \\<oplus> v) ` keys p", "obtain t where \"t \\<in> keys p\" and \"u = t \\<oplus> v\""], ["proof (prove)\nusing this:\n  u \\<in> (\\<lambda>t. t \\<oplus> v) ` keys p\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> keys p; u = t \\<oplus> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  t \\<in> keys p\n  u = t \\<oplus> v\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (p \\<odot> monomial c v) u \\<noteq> (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v", "show \"u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v", "unfolding \\<open>u = t \\<oplus> v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<oplus> v \\<preceq>\\<^sub>t punit.lt p \\<oplus> v", "proof (rule splus_mono_left)"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<preceq> punit.lt p", "from \\<open>t \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> keys p", "show \"t \\<preceq> punit.lt p\""], ["proof (prove)\nusing this:\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. t \\<preceq> punit.lt p", "by (rule punit.lt_max_keys)"], ["proof (state)\nthis:\n  t \\<preceq> punit.lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t punit.lt p \\<oplus> v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lc_mult_scalar_monomial_right:\n  \"lc (p \\<odot> monomial c v) = punit.lc p * (c::'b::semiring_no_zero_divisors)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (p \\<odot> monomial c v) = punit.lc p * c", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c", "case True"], ["proof (state)\nthis:\n  c = (0::'b)\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c", "thus ?thesis"], ["proof (prove)\nusing this:\n  c = (0::'b)\n\ngoal (1 subgoal):\n 1. lc (p \\<odot> monomial c v) = punit.lc p * c", "by simp"], ["proof (state)\nthis:\n  lc (p \\<odot> monomial c v) = punit.lc p * c\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c", "case False"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (p \\<odot> monomial c v) = punit.lc p * c", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lc (p \\<odot> monomial c v) = punit.lc p * c\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lc (p \\<odot> monomial c v) = punit.lc p * c\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. lc (p \\<odot> monomial c v) = punit.lc p * c", "by simp"], ["proof (state)\nthis:\n  lc (p \\<odot> monomial c v) = punit.lc p * c\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    lc (p \\<odot> monomial c v) = punit.lc p * c", "with \\<open>c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc (p \\<odot> monomial c v) = punit.lc p * c", "by (simp add: punit.lc_def lc_def lt_mult_scalar_monomial_right lookup_mult_scalar_monomial_right_plus)"], ["proof (state)\nthis:\n  lc (p \\<odot> monomial c v) = punit.lc p * c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lc (p \\<odot> monomial c v) = punit.lc p * c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_monom_mult_eq_zero:\n  assumes \"s \\<oplus> lt p \\<prec>\\<^sub>t v\"\n  shows \"lookup (monom_mult (c::'b::semiring_no_zero_divisors) s p) v = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (monom_mult c s p) v = (0::'b)", "by (metis assms aux lt_gr lt_monom_mult monom_mult_zero_left monom_mult_zero_right\n      ord_term_lin.order.strict_implies_not_eq)"], ["", "lemma in_keys_monom_mult_le:\n  assumes \"v \\<in> keys (monom_mult c t p)\"\n  shows \"v \\<preceq>\\<^sub>t t \\<oplus> lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t t \\<oplus> lt p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t t \\<oplus> lt p", "from keys_monom_mult_subset assms"], ["proof (chain)\npicking this:\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n  v \\<in> keys (monom_mult c t p)", "have \"v \\<in> (\\<oplus>) t ` (keys p)\""], ["proof (prove)\nusing this:\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n  v \\<in> keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. v \\<in> (\\<oplus>) t ` keys p", ".."], ["proof (state)\nthis:\n  v \\<in> (\\<oplus>) t ` keys p\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t t \\<oplus> lt p", "then"], ["proof (chain)\npicking this:\n  v \\<in> (\\<oplus>) t ` keys p", "obtain u where \"u \\<in> keys p\" and \"v = t \\<oplus> u\""], ["proof (prove)\nusing this:\n  v \\<in> (\\<oplus>) t ` keys p\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> keys p; v = t \\<oplus> u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n  v = t \\<oplus> u\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t t \\<oplus> lt p", "from \\<open>u \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> keys p", "have \"u \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt p", "by (rule lt_max_keys)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t t \\<oplus> lt p", "thus \"v \\<preceq>\\<^sub>t t \\<oplus> lt p\""], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t t \\<oplus> lt p", "unfolding \\<open>v = t \\<oplus> u\\<close>"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. t \\<oplus> u \\<preceq>\\<^sub>t t \\<oplus> lt p", "by (rule splus_mono)"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t t \\<oplus> lt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_monom_mult_le: \"lt (monom_mult c t p) \\<preceq>\\<^sub>t t \\<oplus> lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (monom_mult c t p) \\<preceq>\\<^sub>t t \\<oplus> lt p", "by (metis aux in_keys_monom_mult_le lt_in_keys lt_le_iff)"], ["", "lemma monom_mult_inj_2:\n  assumes \"monom_mult c t1 p = monom_mult c t2 p\"\n    and \"c \\<noteq> 0\" and \"(p::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors) \\<noteq> 0\"\n  shows \"t1 = t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t1 = t2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t1 = t2", "from assms(1)"], ["proof (chain)\npicking this:\n  monom_mult c t1 p = monom_mult c t2 p", "have \"lt (monom_mult c t1 p) = lt (monom_mult c t2 p)\""], ["proof (prove)\nusing this:\n  monom_mult c t1 p = monom_mult c t2 p\n\ngoal (1 subgoal):\n 1. lt (monom_mult c t1 p) = lt (monom_mult c t2 p)", "by simp"], ["proof (state)\nthis:\n  lt (monom_mult c t1 p) = lt (monom_mult c t2 p)\n\ngoal (1 subgoal):\n 1. t1 = t2", "with \\<open>c \\<noteq> 0\\<close> \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0\n  lt (monom_mult c t1 p) = lt (monom_mult c t2 p)", "have \"t1 \\<oplus> lt p = t2 \\<oplus> lt p\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0\n  lt (monom_mult c t1 p) = lt (monom_mult c t2 p)\n\ngoal (1 subgoal):\n 1. t1 \\<oplus> lt p = t2 \\<oplus> lt p", "by (simp add: lt_monom_mult)"], ["proof (state)\nthis:\n  t1 \\<oplus> lt p = t2 \\<oplus> lt p\n\ngoal (1 subgoal):\n 1. t1 = t2", "thus ?thesis"], ["proof (prove)\nusing this:\n  t1 \\<oplus> lt p = t2 \\<oplus> lt p\n\ngoal (1 subgoal):\n 1. t1 = t2", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  t1 = t2\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Trailing Term and Trailing Coefficient: @{const tt} and @{const tc}\\<close>"], ["", "lemma tt_zero [simp]: \"tt 0 = min_term\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt 0 = min_term", "by (simp add: tt_def)"], ["", "lemma tc_zero [simp]: \"tc 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc 0 = (0::'b)", "by (simp add: tc_def)"], ["", "lemma tt_alt:\n  assumes \"p \\<noteq> 0\"\n  shows \"tt p = ord_term_lin.Min (keys p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p = ord_term_lin.Min (keys p)", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tt p = ord_term_lin.Min (keys p)", "unfolding tt_def"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (if p = 0 then min_term else ord_term_lin.Min (keys p)) =\n    ord_term_lin.Min (keys p)", "by simp"], ["", "lemma tt_min_keys:\n  assumes \"v \\<in> keys p\"\n  shows \"tt p \\<preceq>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t v", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> keys p", "have \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t v", "hence \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t v", "from tt_alt[OF this] ord_term_lin.Min_le[OF finite_keys assms]"], ["proof (chain)\npicking this:\n  tt p = ord_term_lin.Min (keys p)\n  ord_term_lin.Min (keys p) \\<preceq>\\<^sub>t v", "show ?thesis"], ["proof (prove)\nusing this:\n  tt p = ord_term_lin.Min (keys p)\n  ord_term_lin.Min (keys p) \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_min:\n  assumes \"lookup p v \\<noteq> 0\"\n  shows \"tt p \\<preceq>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t v", "from assms"], ["proof (chain)\npicking this:\n  lookup p v \\<noteq> (0::'b)", "have \"v \\<in> keys p\""], ["proof (prove)\nusing this:\n  lookup p v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<in> keys p", "unfolding keys_def"], ["proof (prove)\nusing this:\n  lookup p v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<in> map_fun lookup id (\\<lambda>f. {k. f k \\<noteq> (0::'b)}) p", "by simp"], ["proof (state)\nthis:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t v", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t v", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_in_keys:\n  assumes \"p \\<noteq> 0\"\n  shows \"tt p \\<in> keys p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<in> keys p", "unfolding tt_alt[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_term_lin.Min (keys p) \\<in> keys p", "by (rule ord_term_lin.Min_in, fact finite_keys, simp add: assms)"], ["", "lemma tt_eqI:\n  assumes \"v \\<in> keys p\" and \"\\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<preceq>\\<^sub>t u\"\n  shows \"tt p = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p = v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tt p = v", "from assms(1)"], ["proof (chain)\npicking this:\n  v \\<in> keys p", "have \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. tt p = v", "hence \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tt p = v", "from assms(1)"], ["proof (chain)\npicking this:\n  v \\<in> keys p", "have \"tt p \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t v", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. tt p = v", "moreover"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. tt p = v", "have \"v \\<preceq>\\<^sub>t tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t tt p", "by (rule assms(2), rule tt_in_keys, fact \\<open>p \\<noteq> 0\\<close>)"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. tt p = v", "ultimately"], ["proof (chain)\npicking this:\n  tt p \\<preceq>\\<^sub>t v\n  v \\<preceq>\\<^sub>t tt p", "show ?thesis"], ["proof (prove)\nusing this:\n  tt p \\<preceq>\\<^sub>t v\n  v \\<preceq>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. tt p = v", "by simp"], ["proof (state)\nthis:\n  tt p = v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_gr:\n  assumes \"\\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<prec>\\<^sub>t u\" and \"p \\<noteq> 0\"\n  shows \"v \\<prec>\\<^sub>t tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t tt p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t tt p", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t tt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t tt p", "by (rule assms(1), rule tt_in_keys, fact \\<open>p \\<noteq> 0\\<close>)"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t tt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_less:\n  assumes \"u \\<in> keys p\" and \"u \\<prec>\\<^sub>t v\"\n  shows \"tt p \\<prec>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t v", "from \\<open>u \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> keys p", "have \"tt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t u", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t v", "also"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t v", "have \"... \\<prec>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "by fact"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t v", "finally"], ["proof (chain)\npicking this:\n  tt p \\<prec>\\<^sub>t v", "show \"tt p \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  tt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t v", "."], ["proof (state)\nthis:\n  tt p \\<prec>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_ge:\n  assumes \"\\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = 0\" and \"p \\<noteq> 0\"\n  shows \"v \\<preceq>\\<^sub>t tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t tt p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t tt p", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t tt p", "have \"\\<forall>u\\<in>keys p. v \\<preceq>\\<^sub>t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>keys p. v \\<preceq>\\<^sub>t u", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<preceq>\\<^sub>t u", "fix u::'t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<preceq>\\<^sub>t u", "assume \"u \\<in> keys p\""], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<preceq>\\<^sub>t u", "hence \"lookup p u \\<noteq> 0\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b)", "unfolding keys_def"], ["proof (prove)\nusing this:\n  u \\<in> map_fun lookup id (\\<lambda>f. {k. f k \\<noteq> (0::'b)}) p\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<preceq>\\<^sub>t u", "hence \"\\<not> u \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> u \\<prec>\\<^sub>t v", "using assms(1)[of u]"], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n  u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> u \\<prec>\\<^sub>t v", "by auto"], ["proof (state)\nthis:\n  \\<not> u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<preceq>\\<^sub>t u", "thus \"v \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  \\<not> u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u\\<in>keys p. v \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t tt p", "with tt_alt[OF \\<open>p \\<noteq> 0\\<close>] ord_term_lin.Min_ge_iff[OF finite_keys[of p] \\<open>keys p \\<noteq> {}\\<close>]"], ["proof (chain)\npicking this:\n  tt p = ord_term_lin.Min (keys p)\n  (?x \\<preceq>\\<^sub>t ord_term_lin.Min (keys p)) =\n  (\\<forall>a\\<in>keys p. ?x \\<preceq>\\<^sub>t a)\n  \\<forall>u\\<in>keys p. v \\<preceq>\\<^sub>t u", "show ?thesis"], ["proof (prove)\nusing this:\n  tt p = ord_term_lin.Min (keys p)\n  (?x \\<preceq>\\<^sub>t ord_term_lin.Min (keys p)) =\n  (\\<forall>a\\<in>keys p. ?x \\<preceq>\\<^sub>t a)\n  \\<forall>u\\<in>keys p. v \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t tt p", "by simp"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t tt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_ge_keys:\n  assumes \"\\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<preceq>\\<^sub>t u\" and \"p \\<noteq> 0\"\n  shows \"v \\<preceq>\\<^sub>t tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t tt p", "by (rule assms(1), rule tt_in_keys, fact)"], ["", "lemma tt_ge_iff: \"v \\<preceq>\\<^sub>t tt p \\<longleftrightarrow> ((p \\<noteq> 0 \\<or> v = min_term) \\<and> (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = 0))\"\n  (is \"?L \\<longleftrightarrow> (?A \\<and> ?B)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<preceq>\\<^sub>t tt p) =\n    ((p \\<noteq> 0 \\<or> v = min_term) \\<and>\n     (\\<forall>u.\n         u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<preceq>\\<^sub>t tt p \\<Longrightarrow>\n    (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n    (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b))\n 2. (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n    (\\<forall>u.\n        u \\<prec>\\<^sub>t v \\<longrightarrow>\n        lookup p u = (0::'b)) \\<Longrightarrow>\n    v \\<preceq>\\<^sub>t tt p", "assume ?L"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t tt p\n\ngoal (2 subgoals):\n 1. v \\<preceq>\\<^sub>t tt p \\<Longrightarrow>\n    (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n    (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b))\n 2. (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n    (\\<forall>u.\n        u \\<prec>\\<^sub>t v \\<longrightarrow>\n        lookup p u = (0::'b)) \\<Longrightarrow>\n    v \\<preceq>\\<^sub>t tt p", "show \"?A \\<and> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n    (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b))", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<noteq> 0 \\<or> v = min_term\n 2. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = (0::'b)", "show \"p \\<noteq> 0 \\<or> v = min_term\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<or> v = min_term", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p \\<noteq> 0 \\<or> v = min_term\n 2. p \\<noteq> 0 \\<Longrightarrow> p \\<noteq> 0 \\<or> v = min_term", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p \\<noteq> 0 \\<or> v = min_term\n 2. p \\<noteq> 0 \\<Longrightarrow> p \\<noteq> 0 \\<or> v = min_term", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<or> v = min_term", "proof (rule disjI2)"], ["proof (state)\ngoal (1 subgoal):\n 1. v = min_term", "from \\<open>?L\\<close> True"], ["proof (chain)\npicking this:\n  v \\<preceq>\\<^sub>t tt p\n  p = 0", "have \"v \\<preceq>\\<^sub>t min_term\""], ["proof (prove)\nusing this:\n  v \\<preceq>\\<^sub>t tt p\n  p = 0\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t min_term", "by (simp add: tt_def)"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t min_term\n\ngoal (1 subgoal):\n 1. v = min_term", "with min_term_min[of v]"], ["proof (chain)\npicking this:\n  min_term \\<preceq>\\<^sub>t v\n  v \\<preceq>\\<^sub>t min_term", "show \"v = min_term\""], ["proof (prove)\nusing this:\n  min_term \\<preceq>\\<^sub>t v\n  v \\<preceq>\\<^sub>t min_term\n\ngoal (1 subgoal):\n 1. v = min_term", "by simp"], ["proof (state)\nthis:\n  v = min_term\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<noteq> 0 \\<or> v = min_term\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<noteq> 0 \\<or> v = min_term", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<noteq> 0 \\<or> v = min_term", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<noteq> 0 \\<or> v = min_term", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<or> v = min_term", ".."], ["proof (state)\nthis:\n  p \\<noteq> 0 \\<or> v = min_term\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<noteq> 0 \\<or> v = min_term\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = (0::'b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = (0::'b)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = (0::'b)", "assume \"u \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = (0::'b)", "also"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = (0::'b)", "note \\<open>v \\<preceq>\\<^sub>t tt p\\<close>"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = (0::'b)", "finally"], ["proof (chain)\npicking this:\n  u \\<prec>\\<^sub>t tt p", "have \"u \\<prec>\\<^sub>t tt p\""], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t tt p", "."], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = (0::'b)", "hence \"\\<not> tt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  \\<not> tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = (0::'b)", "with tt_min[of p u]"], ["proof (chain)\npicking this:\n  lookup p u \\<noteq> (0::'b) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u\n  \\<not> tt p \\<preceq>\\<^sub>t u", "show \"lookup p u = 0\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u\n  \\<not> tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n  (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b))\n\ngoal (1 subgoal):\n 1. (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n    (\\<forall>u.\n        u \\<prec>\\<^sub>t v \\<longrightarrow>\n        lookup p u = (0::'b)) \\<Longrightarrow>\n    v \\<preceq>\\<^sub>t tt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n    (\\<forall>u.\n        u \\<prec>\\<^sub>t v \\<longrightarrow>\n        lookup p u = (0::'b)) \\<Longrightarrow>\n    v \\<preceq>\\<^sub>t tt p", "assume \"?A \\<and> ?B\""], ["proof (state)\nthis:\n  (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n  (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b))\n\ngoal (1 subgoal):\n 1. (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n    (\\<forall>u.\n        u \\<prec>\\<^sub>t v \\<longrightarrow>\n        lookup p u = (0::'b)) \\<Longrightarrow>\n    v \\<preceq>\\<^sub>t tt p", "hence ?A and ?B"], ["proof (prove)\nusing this:\n  (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n  (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b))\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<or> v = min_term &&&\n    \\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b)", "by simp_all"], ["proof (state)\nthis:\n  p \\<noteq> 0 \\<or> v = min_term\n  \\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. (p \\<noteq> 0 \\<or> v = min_term) \\<and>\n    (\\<forall>u.\n        u \\<prec>\\<^sub>t v \\<longrightarrow>\n        lookup p u = (0::'b)) \\<Longrightarrow>\n    v \\<preceq>\\<^sub>t tt p", "show ?L"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t tt p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> v \\<preceq>\\<^sub>t tt p\n 2. p \\<noteq> 0 \\<Longrightarrow> v \\<preceq>\\<^sub>t tt p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> v \\<preceq>\\<^sub>t tt p\n 2. p \\<noteq> 0 \\<Longrightarrow> v \\<preceq>\\<^sub>t tt p", "with \\<open>?A\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0 \\<or> v = min_term\n  p = 0", "have \"v = min_term\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0 \\<or> v = min_term\n  p = 0\n\ngoal (1 subgoal):\n 1. v = min_term", "by simp"], ["proof (state)\nthis:\n  v = min_term\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> v \\<preceq>\\<^sub>t tt p\n 2. p \\<noteq> 0 \\<Longrightarrow> v \\<preceq>\\<^sub>t tt p", "with True"], ["proof (chain)\npicking this:\n  p = 0\n  v = min_term", "show ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n  v = min_term\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t tt p", "by (simp add: tt_def)"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> v \\<preceq>\\<^sub>t tt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> v \\<preceq>\\<^sub>t tt p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> v \\<preceq>\\<^sub>t tt p", "from \\<open>?B\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t tt p", "using tt_ge[OF _ False]"], ["proof (prove)\nusing this:\n  \\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b)\n  (\\<And>u.\n      u \\<prec>\\<^sub>t ?v \\<Longrightarrow>\n      lookup p u = (0::'b)) \\<Longrightarrow>\n  ?v \\<preceq>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t tt p", "by auto"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t tt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t tt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tc_not_0:\n  assumes \"p \\<noteq> 0\"\n  shows \"tc p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc p \\<noteq> (0::'b)", "unfolding tc_def in_keys_iff[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<in> keys p", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tt p \\<in> keys p", "by (rule tt_in_keys)"], ["", "lemma tt_monomial:\n  assumes \"c \\<noteq> 0\"\n  shows \"tt (monomial c v) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (monomial c v) = v", "proof (rule tt_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> keys (monomial c v)\n 2. \\<And>u.\n       u \\<in> keys (monomial c v) \\<Longrightarrow> v \\<preceq>\\<^sub>t u", "from keys_of_monomial[OF assms, of v]"], ["proof (chain)\npicking this:\n  keys (monomial c v) = {v}", "show \"v \\<in> keys (monomial c v)\""], ["proof (prove)\nusing this:\n  keys (monomial c v) = {v}\n\ngoal (1 subgoal):\n 1. v \\<in> keys (monomial c v)", "by simp"], ["proof (state)\nthis:\n  v \\<in> keys (monomial c v)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (monomial c v) \\<Longrightarrow> v \\<preceq>\\<^sub>t u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (monomial c v) \\<Longrightarrow> v \\<preceq>\\<^sub>t u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (monomial c v) \\<Longrightarrow> v \\<preceq>\\<^sub>t u", "assume \"u \\<in> keys (monomial c v)\""], ["proof (state)\nthis:\n  u \\<in> keys (monomial c v)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (monomial c v) \\<Longrightarrow> v \\<preceq>\\<^sub>t u", "with keys_of_monomial[OF assms, of v]"], ["proof (chain)\npicking this:\n  keys (monomial c v) = {v}\n  u \\<in> keys (monomial c v)", "have \"u = v\""], ["proof (prove)\nusing this:\n  keys (monomial c v) = {v}\n  u \\<in> keys (monomial c v)\n\ngoal (1 subgoal):\n 1. u = v", "by simp"], ["proof (state)\nthis:\n  u = v\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (monomial c v) \\<Longrightarrow> v \\<preceq>\\<^sub>t u", "thus \"v \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u = v\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tc_monomial [simp]: \"tc (monomial c t) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (monomial c t) = c", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow> tc (monomial c t) = c\n 2. c \\<noteq> (0::'b) \\<Longrightarrow> tc (monomial c t) = c", "case True"], ["proof (state)\nthis:\n  c = (0::'b)\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow> tc (monomial c t) = c\n 2. c \\<noteq> (0::'b) \\<Longrightarrow> tc (monomial c t) = c", "thus ?thesis"], ["proof (prove)\nusing this:\n  c = (0::'b)\n\ngoal (1 subgoal):\n 1. tc (monomial c t) = c", "by simp"], ["proof (state)\nthis:\n  tc (monomial c t) = c\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tc (monomial c t) = c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tc (monomial c t) = c", "case False"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tc (monomial c t) = c", "thus ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. tc (monomial c t) = c", "by (simp add: tc_def tt_monomial)"], ["proof (state)\nthis:\n  tc (monomial c t) = c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_plus_eqI:\n  assumes \"p \\<noteq> 0\" and \"tt p \\<prec>\\<^sub>t tt q\"\n  shows \"tt (p + q) = tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (p + q) = tt p", "proof (intro tt_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. tt p \\<in> keys (p + q)\n 2. \\<And>u. u \\<in> keys (p + q) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u", "from tt_less[of \"tt p\" q \"tt q\"] \\<open>tt p \\<prec>\\<^sub>t tt q\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>tt p \\<in> keys q; tt p \\<prec>\\<^sub>t tt q\\<rbrakk>\n  \\<Longrightarrow> tt q \\<prec>\\<^sub>t tt q\n  tt p \\<prec>\\<^sub>t tt q", "have \"tt p \\<notin> keys q\""], ["proof (prove)\nusing this:\n  \\<lbrakk>tt p \\<in> keys q; tt p \\<prec>\\<^sub>t tt q\\<rbrakk>\n  \\<Longrightarrow> tt q \\<prec>\\<^sub>t tt q\n  tt p \\<prec>\\<^sub>t tt q\n\ngoal (1 subgoal):\n 1. tt p \\<notin> keys q", "by blast"], ["proof (state)\nthis:\n  tt p \\<notin> keys q\n\ngoal (2 subgoals):\n 1. tt p \\<in> keys (p + q)\n 2. \\<And>u. u \\<in> keys (p + q) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u", "with lookup_add[of p q \"tt p\"] tc_not_0[OF \\<open>p \\<noteq> 0\\<close>]"], ["proof (chain)\npicking this:\n  lookup (p + q) (tt p) = lookup p (tt p) + lookup q (tt p)\n  tc p \\<noteq> (0::'b)\n  tt p \\<notin> keys q", "show \"tt p \\<in> keys (p + q)\""], ["proof (prove)\nusing this:\n  lookup (p + q) (tt p) = lookup p (tt p) + lookup q (tt p)\n  tc p \\<noteq> (0::'b)\n  tt p \\<notin> keys q\n\ngoal (1 subgoal):\n 1. tt p \\<in> keys (p + q)", "unfolding in_keys_iff tc_def"], ["proof (prove)\nusing this:\n  lookup (p + q) (tt p) = lookup p (tt p) + lookup q (tt p)\n  lookup p (tt p) \\<noteq> (0::'b)\n  \\<not> lookup q (tt p) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + q) (tt p) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  tt p \\<in> keys (p + q)\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys (p + q) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys (p + q) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys (p + q) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u", "assume \"u \\<in> keys (p + q)\""], ["proof (state)\nthis:\n  u \\<in> keys (p + q)\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> keys (p + q) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u", "show \"tt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t u", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t u \\<Longrightarrow> False", "assume \"\\<not> tt p \\<preceq>\\<^sub>t u\""], ["proof (state)\nthis:\n  \\<not> tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t u \\<Longrightarrow> False", "hence sp: \"u \\<prec>\\<^sub>t tt p\""], ["proof (prove)\nusing this:\n  \\<not> tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t tt p", "by simp"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t u \\<Longrightarrow> False", "hence \"u \\<prec>\\<^sub>t tt q\""], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t tt q", "using \\<open>tt p \\<prec>\\<^sub>t tt q\\<close>"], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t tt p\n  tt p \\<prec>\\<^sub>t tt q\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t tt q", "by simp"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t tt q\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t u \\<Longrightarrow> False", "with tt_less[of u q \"tt q\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>u \\<in> keys q; u \\<prec>\\<^sub>t tt q\\<rbrakk>\n  \\<Longrightarrow> tt q \\<prec>\\<^sub>t tt q\n  u \\<prec>\\<^sub>t tt q", "have \"u \\<notin> keys q\""], ["proof (prove)\nusing this:\n  \\<lbrakk>u \\<in> keys q; u \\<prec>\\<^sub>t tt q\\<rbrakk>\n  \\<Longrightarrow> tt q \\<prec>\\<^sub>t tt q\n  u \\<prec>\\<^sub>t tt q\n\ngoal (1 subgoal):\n 1. u \\<notin> keys q", "by blast"], ["proof (state)\nthis:\n  u \\<notin> keys q\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t u \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  u \\<notin> keys q\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t u \\<Longrightarrow> False", "from sp tt_less[of u p \"tt p\"]"], ["proof (chain)\npicking this:\n  u \\<prec>\\<^sub>t tt p\n  \\<lbrakk>u \\<in> keys p; u \\<prec>\\<^sub>t tt p\\<rbrakk>\n  \\<Longrightarrow> tt p \\<prec>\\<^sub>t tt p", "have \"u \\<notin> keys p\""], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t tt p\n  \\<lbrakk>u \\<in> keys p; u \\<prec>\\<^sub>t tt p\\<rbrakk>\n  \\<Longrightarrow> tt p \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. u \\<notin> keys p", "by blast"], ["proof (state)\nthis:\n  u \\<notin> keys p\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t u \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  u \\<notin> keys q\n  u \\<notin> keys p", "show False"], ["proof (prove)\nusing this:\n  u \\<notin> keys q\n  u \\<notin> keys p\n\ngoal (1 subgoal):\n 1. False", "using \\<open>u \\<in> keys (p + q)\\<close> Poly_Mapping.keys_add[of p q]"], ["proof (prove)\nusing this:\n  u \\<notin> keys q\n  u \\<notin> keys p\n  u \\<in> keys (p + q)\n  keys (p + q) \\<subseteq> keys p \\<union> keys q\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_plus_lessE:\n  fixes p q\n  assumes \"p + q \\<noteq> 0\" and tt: \"tt (p + q) \\<prec>\\<^sub>t tt p\"\n  shows \"tt q \\<prec>\\<^sub>t tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt q \\<prec>\\<^sub>t tt p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> tt q \\<prec>\\<^sub>t tt p\n 2. p \\<noteq> 0 \\<Longrightarrow> tt q \\<prec>\\<^sub>t tt p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> tt q \\<prec>\\<^sub>t tt p\n 2. p \\<noteq> 0 \\<Longrightarrow> tt q \\<prec>\\<^sub>t tt p", "with tt"], ["proof (chain)\npicking this:\n  tt (p + q) \\<prec>\\<^sub>t tt p\n  p = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  tt (p + q) \\<prec>\\<^sub>t tt p\n  p = 0\n\ngoal (1 subgoal):\n 1. tt q \\<prec>\\<^sub>t tt p", "by simp"], ["proof (state)\nthis:\n  tt q \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tt q \\<prec>\\<^sub>t tt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tt q \\<prec>\\<^sub>t tt p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tt q \\<prec>\\<^sub>t tt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tt q \\<prec>\\<^sub>t tt p", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> tt q \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "assume \"\\<not> tt q \\<prec>\\<^sub>t tt p\""], ["proof (state)\nthis:\n  \\<not> tt q \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. \\<not> tt q \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "hence \"tt p = tt q \\<or> tt p \\<prec>\\<^sub>t tt q\""], ["proof (prove)\nusing this:\n  \\<not> tt q \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. tt p = tt q \\<or> tt p \\<prec>\\<^sub>t tt q", "by auto"], ["proof (state)\nthis:\n  tt p = tt q \\<or> tt p \\<prec>\\<^sub>t tt q\n\ngoal (1 subgoal):\n 1. \\<not> tt q \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  tt p = tt q \\<or> tt p \\<prec>\\<^sub>t tt q\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. tt p = tt q \\<Longrightarrow> False\n 2. tt p \\<prec>\\<^sub>t tt q \\<Longrightarrow> False", "assume tt_eq: \"tt p = tt q\""], ["proof (state)\nthis:\n  tt p = tt q\n\ngoal (2 subgoals):\n 1. tt p = tt q \\<Longrightarrow> False\n 2. tt p \\<prec>\\<^sub>t tt q \\<Longrightarrow> False", "have \"tt p \\<preceq>\\<^sub>t tt (p + q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t tt (p + q)", "proof (rule tt_ge_keys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> keys (p + q) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u\n 2. p + q \\<noteq> 0", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> keys (p + q) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u\n 2. p + q \\<noteq> 0", "assume \"u \\<in> keys (p + q)\""], ["proof (state)\nthis:\n  u \\<in> keys (p + q)\n\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> keys (p + q) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u\n 2. p + q \\<noteq> 0", "hence \"u \\<in> keys p \\<union> keys q\""], ["proof (prove)\nusing this:\n  u \\<in> keys (p + q)\n\ngoal (1 subgoal):\n 1. u \\<in> keys p \\<union> keys q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. keys (p + q) \\<subseteq> keys p \\<union> keys q", "show \"keys (p + q) \\<subseteq> keys p \\<union> keys q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (p + q) \\<subseteq> keys p \\<union> keys q", "by (fact Poly_Mapping.keys_add)"], ["proof (state)\nthis:\n  keys (p + q) \\<subseteq> keys p \\<union> keys q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<in> keys p \\<union> keys q\n\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> keys (p + q) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u\n 2. p + q \\<noteq> 0", "thus \"tt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u \\<in> keys p \\<union> keys q\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t u", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. u \\<in> keys p \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u\n 2. u \\<in> keys q \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u", "assume \"u \\<in> keys p\""], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (2 subgoals):\n 1. u \\<in> keys p \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u\n 2. u \\<in> keys q \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u", "thus ?thesis"], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t u", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. u \\<in> keys q \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> keys q \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u", "assume \"u \\<in> keys q\""], ["proof (state)\nthis:\n  u \\<in> keys q\n\ngoal (1 subgoal):\n 1. u \\<in> keys q \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u", "thus ?thesis"], ["proof (prove)\nusing this:\n  u \\<in> keys q\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t u", "unfolding tt_eq"], ["proof (prove)\nusing this:\n  u \\<in> keys q\n\ngoal (1 subgoal):\n 1. tt q \\<preceq>\\<^sub>t u", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. p + q \\<noteq> 0", "qed (fact \\<open>p + q \\<noteq> 0\\<close>)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t tt (p + q)\n\ngoal (2 subgoals):\n 1. tt p = tt q \\<Longrightarrow> False\n 2. tt p \\<prec>\\<^sub>t tt q \\<Longrightarrow> False", "with tt"], ["proof (chain)\npicking this:\n  tt (p + q) \\<prec>\\<^sub>t tt p\n  tt p \\<preceq>\\<^sub>t tt (p + q)", "show False"], ["proof (prove)\nusing this:\n  tt (p + q) \\<prec>\\<^sub>t tt p\n  tt p \\<preceq>\\<^sub>t tt (p + q)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t tt q \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t tt q \\<Longrightarrow> False", "assume \"tt p \\<prec>\\<^sub>t tt q\""], ["proof (state)\nthis:\n  tt p \\<prec>\\<^sub>t tt q\n\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t tt q \\<Longrightarrow> False", "from tt_plus_eqI[OF False this] tt"], ["proof (chain)\npicking this:\n  tt (p + q) = tt p\n  tt (p + q) \\<prec>\\<^sub>t tt p", "show False"], ["proof (prove)\nusing this:\n  tt (p + q) = tt p\n  tt (p + q) \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. False", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tt q \\<prec>\\<^sub>t tt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_plus_lessI:\n  fixes p q :: \"_ \\<Rightarrow>\\<^sub>0 'b::ring\"\n  assumes \"p + q \\<noteq> 0\" and tt_eq: \"tt q = tt p\" and tc_eq: \"tc q = - tc p\"\n  shows \"tt p \\<prec>\\<^sub>t tt (p + q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t tt (p + q)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> tt p \\<prec>\\<^sub>t tt (p + q) \\<Longrightarrow> False", "assume \"\\<not> tt p \\<prec>\\<^sub>t tt (p + q)\""], ["proof (state)\nthis:\n  \\<not> tt p \\<prec>\\<^sub>t tt (p + q)\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<prec>\\<^sub>t tt (p + q) \\<Longrightarrow> False", "hence \"tt p = tt (p + q) \\<or> tt (p + q) \\<prec>\\<^sub>t tt p\""], ["proof (prove)\nusing this:\n  \\<not> tt p \\<prec>\\<^sub>t tt (p + q)\n\ngoal (1 subgoal):\n 1. tt p = tt (p + q) \\<or> tt (p + q) \\<prec>\\<^sub>t tt p", "by auto"], ["proof (state)\nthis:\n  tt p = tt (p + q) \\<or> tt (p + q) \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<prec>\\<^sub>t tt (p + q) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  tt p = tt (p + q) \\<or> tt (p + q) \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. tt p = tt (p + q) \\<Longrightarrow> False\n 2. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "assume \"tt p = tt (p + q)\""], ["proof (state)\nthis:\n  tt p = tt (p + q)\n\ngoal (2 subgoals):\n 1. tt p = tt (p + q) \\<Longrightarrow> False\n 2. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "have \"lookup (p + q) (tt p) = (lookup p (tt p)) + (lookup q (tt q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (p + q) (tt p) = lookup p (tt p) + lookup q (tt q)", "unfolding tt_eq lookup_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p (tt p) + lookup q (tt p) = lookup p (tt p) + lookup q (tt p)", ".."], ["proof (state)\nthis:\n  lookup (p + q) (tt p) = lookup p (tt p) + lookup q (tt q)\n\ngoal (2 subgoals):\n 1. tt p = tt (p + q) \\<Longrightarrow> False\n 2. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lookup (p + q) (tt p) = lookup p (tt p) + lookup q (tt q)\n\ngoal (2 subgoals):\n 1. tt p = tt (p + q) \\<Longrightarrow> False\n 2. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "have \"... = tc p + tc q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p (tt p) + lookup q (tt q) = tc p + tc q", "unfolding tc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p (tt p) + lookup q (tt q) = lookup p (tt p) + lookup q (tt q)", ".."], ["proof (state)\nthis:\n  lookup p (tt p) + lookup q (tt q) = tc p + tc q\n\ngoal (2 subgoals):\n 1. tt p = tt (p + q) \\<Longrightarrow> False\n 2. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lookup p (tt p) + lookup q (tt q) = tc p + tc q\n\ngoal (2 subgoals):\n 1. tt p = tt (p + q) \\<Longrightarrow> False\n 2. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc p + tc q = (0::'b)", "unfolding tc_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. tc p + - tc p = (0::'b)", "by simp"], ["proof (state)\nthis:\n  tc p + tc q = (0::'b)\n\ngoal (2 subgoals):\n 1. tt p = tt (p + q) \\<Longrightarrow> False\n 2. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  lookup (p + q) (tt p) = (0::'b)", "have \"lookup (p + q) (tt p) = 0\""], ["proof (prove)\nusing this:\n  lookup (p + q) (tt p) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + q) (tt p) = (0::'b)", "."], ["proof (state)\nthis:\n  lookup (p + q) (tt p) = (0::'b)\n\ngoal (2 subgoals):\n 1. tt p = tt (p + q) \\<Longrightarrow> False\n 2. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "hence \"tt (p + q) \\<noteq> tt p\""], ["proof (prove)\nusing this:\n  lookup (p + q) (tt p) = (0::'b)\n\ngoal (1 subgoal):\n 1. tt (p + q) \\<noteq> tt p", "using tc_not_0[OF \\<open>p + q \\<noteq> 0\\<close>]"], ["proof (prove)\nusing this:\n  lookup (p + q) (tt p) = (0::'b)\n  tc (p + q) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. tt (p + q) \\<noteq> tt p", "unfolding tc_def"], ["proof (prove)\nusing this:\n  lookup (p + q) (tt p) = (0::'b)\n  lookup (p + q) (tt (p + q)) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. tt (p + q) \\<noteq> tt p", "by auto"], ["proof (state)\nthis:\n  tt (p + q) \\<noteq> tt p\n\ngoal (2 subgoals):\n 1. tt p = tt (p + q) \\<Longrightarrow> False\n 2. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "with \\<open>tt p = tt (p + q)\\<close>"], ["proof (chain)\npicking this:\n  tt p = tt (p + q)\n  tt (p + q) \\<noteq> tt p", "show False"], ["proof (prove)\nusing this:\n  tt p = tt (p + q)\n  tt (p + q) \\<noteq> tt p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "assume \"tt (p + q) \\<prec>\\<^sub>t tt p\""], ["proof (state)\nthis:\n  tt (p + q) \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "have \"tt q \\<prec>\\<^sub>t tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt q \\<prec>\\<^sub>t tt p", "by (rule tt_plus_lessE, fact+)"], ["proof (state)\nthis:\n  tt q \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "hence \"tt q \\<noteq> tt p\""], ["proof (prove)\nusing this:\n  tt q \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. tt q \\<noteq> tt p", "by simp"], ["proof (state)\nthis:\n  tt q \\<noteq> tt p\n\ngoal (1 subgoal):\n 1. tt (p + q) \\<prec>\\<^sub>t tt p \\<Longrightarrow> False", "with tt_eq"], ["proof (chain)\npicking this:\n  tt q = tt p\n  tt q \\<noteq> tt p", "show False"], ["proof (prove)\nusing this:\n  tt q = tt p\n  tt q \\<noteq> tt p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_uminus [simp]: \"tt (- p) = tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (- p) = tt p", "by (simp add: tt_def keys_uminus)"], ["", "lemma tc_uminus [simp]: \"tc (- p) = - tc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (- p) = - tc p", "by (simp add: tc_def)"], ["", "lemma tt_monom_mult:\n  assumes \"c \\<noteq> (0::'b::semiring_no_zero_divisors)\" and \"p \\<noteq> 0\"\n  shows \"tt (monom_mult c t p) = t \\<oplus> tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (monom_mult c t p) = t \\<oplus> tt p", "proof (intro tt_eqI, rule keys_monom_multI, rule tt_in_keys, fact, fact)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (monom_mult c t p) \\<Longrightarrow>\n       t \\<oplus> tt p \\<preceq>\\<^sub>t u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (monom_mult c t p) \\<Longrightarrow>\n       t \\<oplus> tt p \\<preceq>\\<^sub>t u", "assume \"u \\<in> keys (monom_mult c t p)\""], ["proof (state)\nthis:\n  u \\<in> keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (monom_mult c t p) \\<Longrightarrow>\n       t \\<oplus> tt p \\<preceq>\\<^sub>t u", "then"], ["proof (chain)\npicking this:\n  u \\<in> keys (monom_mult c t p)", "obtain v where \"v \\<in> keys p\" and u: \"u = t \\<oplus> v\""], ["proof (prove)\nusing this:\n  u \\<in> keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p; u = t \\<oplus> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule keys_monom_multE)"], ["proof (state)\nthis:\n  v \\<in> keys p\n  u = t \\<oplus> v\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (monom_mult c t p) \\<Longrightarrow>\n       t \\<oplus> tt p \\<preceq>\\<^sub>t u", "show \"t \\<oplus> tt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<oplus> tt p \\<preceq>\\<^sub>t u", "unfolding u add.commute[of t]"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<oplus> tt p \\<preceq>\\<^sub>t t \\<oplus> v", "by (rule splus_mono, rule tt_min_keys, fact)"], ["proof (state)\nthis:\n  t \\<oplus> tt p \\<preceq>\\<^sub>t u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_map_scale: \"c \\<noteq> (0::'b::semiring_no_zero_divisors) \\<Longrightarrow> tt (c \\<cdot> p) = tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tt (c \\<cdot> p) = tt p", "by (cases \"p = 0\") (simp_all add: map_scale_eq_monom_mult tt_monom_mult term_simps)"], ["", "lemma tc_monom_mult [simp]: \"tc (monom_mult c t p) = (c::'b::semiring_no_zero_divisors) * tc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (monom_mult c t p) = c * tc p", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow> tc (monom_mult c t p) = c * tc p\n 2. c \\<noteq> (0::'b) \\<Longrightarrow> tc (monom_mult c t p) = c * tc p", "case True"], ["proof (state)\nthis:\n  c = (0::'b)\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow> tc (monom_mult c t p) = c * tc p\n 2. c \\<noteq> (0::'b) \\<Longrightarrow> tc (monom_mult c t p) = c * tc p", "thus ?thesis"], ["proof (prove)\nusing this:\n  c = (0::'b)\n\ngoal (1 subgoal):\n 1. tc (monom_mult c t p) = c * tc p", "by simp"], ["proof (state)\nthis:\n  tc (monom_mult c t p) = c * tc p\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tc (monom_mult c t p) = c * tc p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tc (monom_mult c t p) = c * tc p", "case False"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tc (monom_mult c t p) = c * tc p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (monom_mult c t p) = c * tc p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> tc (monom_mult c t p) = c * tc p\n 2. p \\<noteq> 0 \\<Longrightarrow> tc (monom_mult c t p) = c * tc p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> tc (monom_mult c t p) = c * tc p\n 2. p \\<noteq> 0 \\<Longrightarrow> tc (monom_mult c t p) = c * tc p", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. tc (monom_mult c t p) = c * tc p", "by simp"], ["proof (state)\nthis:\n  tc (monom_mult c t p) = c * tc p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tc (monom_mult c t p) = c * tc p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tc (monom_mult c t p) = c * tc p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tc (monom_mult c t p) = c * tc p", "with \\<open>c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tc (monom_mult c t p) = c * tc p", "by (simp add: tc_def tt_monom_mult lookup_monom_mult_plus)"], ["proof (state)\nthis:\n  tc (monom_mult c t p) = c * tc p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tc (monom_mult c t p) = c * tc p\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary tc_map_scale [simp]: \"tc (c \\<cdot> p) = (c::'b::semiring_no_zero_divisors) * tc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (c \\<cdot> p) = c * tc p", "by (simp add: map_scale_eq_monom_mult)"], ["", "lemma in_keys_monom_mult_ge:\n  assumes \"v \\<in> keys (monom_mult c t p)\"\n  shows \"t \\<oplus> tt p \\<preceq>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<oplus> tt p \\<preceq>\\<^sub>t v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<oplus> tt p \\<preceq>\\<^sub>t v", "from keys_monom_mult_subset assms"], ["proof (chain)\npicking this:\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n  v \\<in> keys (monom_mult c t p)", "have \"v \\<in> (\\<oplus>) t ` (keys p)\""], ["proof (prove)\nusing this:\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n  v \\<in> keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. v \\<in> (\\<oplus>) t ` keys p", ".."], ["proof (state)\nthis:\n  v \\<in> (\\<oplus>) t ` keys p\n\ngoal (1 subgoal):\n 1. t \\<oplus> tt p \\<preceq>\\<^sub>t v", "then"], ["proof (chain)\npicking this:\n  v \\<in> (\\<oplus>) t ` keys p", "obtain u where \"u \\<in> keys p\" and \"v = t \\<oplus> u\""], ["proof (prove)\nusing this:\n  v \\<in> (\\<oplus>) t ` keys p\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> keys p; v = t \\<oplus> u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n  v = t \\<oplus> u\n\ngoal (1 subgoal):\n 1. t \\<oplus> tt p \\<preceq>\\<^sub>t v", "from \\<open>u \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> keys p", "have \"tt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t u", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. t \\<oplus> tt p \\<preceq>\\<^sub>t v", "thus \"t \\<oplus> tt p \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. t \\<oplus> tt p \\<preceq>\\<^sub>t v", "unfolding \\<open>v = t \\<oplus> u\\<close>"], ["proof (prove)\nusing this:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. t \\<oplus> tt p \\<preceq>\\<^sub>t t \\<oplus> u", "by (rule splus_mono)"], ["proof (state)\nthis:\n  t \\<oplus> tt p \\<preceq>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_ge_tt: \"tt p \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t lt p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> tt p \\<preceq>\\<^sub>t lt p\n 2. p \\<noteq> 0 \\<Longrightarrow> tt p \\<preceq>\\<^sub>t lt p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> tt p \\<preceq>\\<^sub>t lt p\n 2. p \\<noteq> 0 \\<Longrightarrow> tt p \\<preceq>\\<^sub>t lt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t lt p", "unfolding True lt_def tt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if 0 = 0 then min_term\n     else ord_term_lin.Min (keys 0)) \\<preceq>\\<^sub>t\n    (if 0 = 0 then min_term else ord_term_lin.Max (keys 0))", "by simp"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tt p \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tt p \\<preceq>\\<^sub>t lt p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tt p \\<preceq>\\<^sub>t lt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t lt p", "by (rule lt_max_keys, rule tt_in_keys, fact False)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_eq_tt_monomial:\n  assumes \"is_monomial p\"\n  shows \"lt p = tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p = tt p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p = tt p", "from assms"], ["proof (chain)\npicking this:\n  is_monomial p", "obtain c v where \"c \\<noteq> 0\" and p: \"p = monomial c v\""], ["proof (prove)\nusing this:\n  is_monomial p\n\ngoal (1 subgoal):\n 1. (\\<And>c v.\n        \\<lbrakk>c \\<noteq> (0::'b); p = monomial c v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_monomial_monomial)"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n  p = monomial c v\n\ngoal (1 subgoal):\n 1. lt p = tt p", "from \\<open>c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)", "have \"lt p = v\" and \"tt p = v\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt p = v &&& tt p = v", "unfolding p"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt (monomial c v) = v &&& tt (monomial c v) = v", "by (rule lt_monomial, rule tt_monomial)"], ["proof (state)\nthis:\n  lt p = v\n  tt p = v\n\ngoal (1 subgoal):\n 1. lt p = tt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  lt p = v\n  tt p = v\n\ngoal (1 subgoal):\n 1. lt p = tt p", "by simp"], ["proof (state)\nthis:\n  lt p = tt p\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>@{const higher} and @{const lower}\\<close>"], ["", "lemma lookup_higher: \"lookup (higher p u) v = (if u \\<prec>\\<^sub>t v then lookup p v else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (higher p u) v =\n    (if u \\<prec>\\<^sub>t v then lookup p v else (0::'b))", "by (auto simp add: higher_def lookup_except)"], ["", "lemma lookup_higher_when: \"lookup (higher p u) v = (lookup p v when u \\<prec>\\<^sub>t v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (higher p u) v = (lookup p v when u \\<prec>\\<^sub>t v)", "by (auto simp add: lookup_higher when_def)"], ["", "lemma higher_plus: \"higher (p + q) v = higher p v + higher q v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. higher (p + q) v = higher p v + higher q v", "by (rule poly_mapping_eqI, simp add: lookup_add lookup_higher)"], ["", "lemma higher_uminus [simp]: \"higher (- p) v = -(higher p v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. higher (- p) v = - higher p v", "by (rule poly_mapping_eqI, simp add: lookup_higher)"], ["", "lemma higher_minus: \"higher (p - q) v = higher p v - higher q v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. higher (p - q) v = higher p v - higher q v", "by (auto intro!: poly_mapping_eqI simp: lookup_minus lookup_higher)"], ["", "lemma higher_zero [simp]: \"higher 0 t = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. higher 0 t = 0", "by (rule poly_mapping_eqI, simp add: lookup_higher)"], ["", "lemma higher_eq_iff: \"higher p v = higher q v \\<longleftrightarrow> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (higher p v = higher q v) =\n    (\\<forall>u.\n        v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. higher p v = higher q v \\<Longrightarrow>\n    \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\n 2. \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow>\n       lookup p u = lookup q u \\<Longrightarrow>\n    higher p v = higher q v", "assume ?L"], ["proof (state)\nthis:\n  higher p v = higher q v\n\ngoal (2 subgoals):\n 1. higher p v = higher q v \\<Longrightarrow>\n    \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\n 2. \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow>\n       lookup p u = lookup q u \\<Longrightarrow>\n    higher p v = higher q v", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "assume \"v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "moreover"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "from \\<open>?L\\<close>"], ["proof (chain)\npicking this:\n  higher p v = higher q v", "have \"lookup (higher p v) u = lookup (higher q v) u\""], ["proof (prove)\nusing this:\n  higher p v = higher q v\n\ngoal (1 subgoal):\n 1. lookup (higher p v) u = lookup (higher q v) u", "by simp"], ["proof (state)\nthis:\n  lookup (higher p v) u = lookup (higher q v) u\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "ultimately"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t u\n  lookup (higher p v) u = lookup (higher q v) u", "show \"lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t u\n  lookup (higher p v) u = lookup (higher q v) u\n\ngoal (1 subgoal):\n 1. lookup p u = lookup q u", "by (simp add: lookup_higher)"], ["proof (state)\nthis:\n  lookup p u = lookup q u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow>\n       lookup p u = lookup q u \\<Longrightarrow>\n    higher p v = higher q v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow>\n       lookup p u = lookup q u \\<Longrightarrow>\n    higher p v = higher q v", "assume ?R"], ["proof (state)\nthis:\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       v \\<prec>\\<^sub>t u \\<longrightarrow>\n       lookup p u = lookup q u \\<Longrightarrow>\n    higher p v = higher q v", "show ?L"], ["proof (prove)\ngoal (1 subgoal):\n 1. higher p v = higher q v", "proof (rule poly_mapping_eqI, simp add: lookup_higher, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. v \\<prec>\\<^sub>t k \\<Longrightarrow> lookup p k = lookup q k", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. v \\<prec>\\<^sub>t k \\<Longrightarrow> lookup p k = lookup q k", "assume \"v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>k. v \\<prec>\\<^sub>t k \\<Longrightarrow> lookup p k = lookup q k", "with \\<open>?R\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\n  v \\<prec>\\<^sub>t u", "show \"lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup p u = lookup q u", "by simp"], ["proof (state)\nthis:\n  lookup p u = lookup q u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  higher p v = higher q v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma higher_eq_zero_iff: \"higher p v = 0 \\<longleftrightarrow> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (higher p v = 0) =\n    (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (higher p v = 0) =\n    (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b))", "have \"higher p v = higher 0 v \\<longleftrightarrow> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup 0 u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (higher p v = higher 0 v) =\n    (\\<forall>u.\n        v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup 0 u)", "by (rule higher_eq_iff)"], ["proof (state)\nthis:\n  (higher p v = higher 0 v) =\n  (\\<forall>u.\n      v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup 0 u)\n\ngoal (1 subgoal):\n 1. (higher p v = 0) =\n    (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (higher p v = higher 0 v) =\n  (\\<forall>u.\n      v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup 0 u)\n\ngoal (1 subgoal):\n 1. (higher p v = 0) =\n    (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b))", "by simp"], ["proof (state)\nthis:\n  (higher p v = 0) =\n  (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma keys_higher: \"keys (higher p v) = {u\\<in>keys p. v \\<prec>\\<^sub>t u}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (higher p v) = {u \\<in> keys p. v \\<prec>\\<^sub>t u}", "by (rule set_eqI, simp only: in_keys_iff, simp add: lookup_higher)"], ["", "lemma higher_higher: \"higher (higher p u) v = higher p (ord_term_lin.max u v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. higher (higher p u) v = higher p (ord_term_lin.max u v)", "by (rule poly_mapping_eqI, simp add: lookup_higher)"], ["", "lemma lookup_lower: \"lookup (lower p u) v = (if v \\<prec>\\<^sub>t u then lookup p v else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (lower p u) v =\n    (if v \\<prec>\\<^sub>t u then lookup p v else (0::'b))", "by (auto simp add: lower_def lookup_except)"], ["", "lemma lookup_lower_when: \"lookup (lower p u) v = (lookup p v when v \\<prec>\\<^sub>t u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (lower p u) v = (lookup p v when v \\<prec>\\<^sub>t u)", "by (auto simp add: lookup_lower when_def)"], ["", "lemma lower_plus: \"lower (p + q) v = lower p v + lower q v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower (p + q) v = lower p v + lower q v", "by (rule poly_mapping_eqI, simp add: lookup_add lookup_lower)"], ["", "lemma lower_uminus [simp]: \"lower (- p) v = - lower p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower (- p) v = - lower p v", "by (rule poly_mapping_eqI, simp add: lookup_lower)"], ["", "lemma lower_minus:  \"lower (p - (q::_ \\<Rightarrow>\\<^sub>0 'b::ab_group_add)) v = lower p v - lower q v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower (p - q) v = lower p v - lower q v", "by (auto intro!: poly_mapping_eqI simp: lookup_minus lookup_lower)"], ["", "lemma lower_zero [simp]: \"lower 0 v = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower 0 v = 0", "by (rule poly_mapping_eqI, simp add: lookup_lower)"], ["", "lemma lower_eq_iff: \"lower p v = lower q v \\<longleftrightarrow> (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup q u)\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (lower p v = lower q v) =\n    (\\<forall>u.\n        u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup q u)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lower p v = lower q v \\<Longrightarrow>\n    \\<forall>u.\n       u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup q u\n 2. \\<forall>u.\n       u \\<prec>\\<^sub>t v \\<longrightarrow>\n       lookup p u = lookup q u \\<Longrightarrow>\n    lower p v = lower q v", "assume ?L"], ["proof (state)\nthis:\n  lower p v = lower q v\n\ngoal (2 subgoals):\n 1. lower p v = lower q v \\<Longrightarrow>\n    \\<forall>u.\n       u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup q u\n 2. \\<forall>u.\n       u \\<prec>\\<^sub>t v \\<longrightarrow>\n       lookup p u = lookup q u \\<Longrightarrow>\n    lower p v = lower q v", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup q u", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = lookup q u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = lookup q u", "assume \"u \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = lookup q u", "moreover"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = lookup q u", "from \\<open>?L\\<close>"], ["proof (chain)\npicking this:\n  lower p v = lower q v", "have \"lookup (lower p v) u = lookup (lower q v) u\""], ["proof (prove)\nusing this:\n  lower p v = lower q v\n\ngoal (1 subgoal):\n 1. lookup (lower p v) u = lookup (lower q v) u", "by simp"], ["proof (state)\nthis:\n  lookup (lower p v) u = lookup (lower q v) u\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p u = lookup q u", "ultimately"], ["proof (chain)\npicking this:\n  u \\<prec>\\<^sub>t v\n  lookup (lower p v) u = lookup (lower q v) u", "show \"lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t v\n  lookup (lower p v) u = lookup (lower q v) u\n\ngoal (1 subgoal):\n 1. lookup p u = lookup q u", "by (simp add: lookup_lower)"], ["proof (state)\nthis:\n  lookup p u = lookup q u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup q u\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<prec>\\<^sub>t v \\<longrightarrow>\n       lookup p u = lookup q u \\<Longrightarrow>\n    lower p v = lower q v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<prec>\\<^sub>t v \\<longrightarrow>\n       lookup p u = lookup q u \\<Longrightarrow>\n    lower p v = lower q v", "assume ?R"], ["proof (state)\nthis:\n  \\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup q u\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<prec>\\<^sub>t v \\<longrightarrow>\n       lookup p u = lookup q u \\<Longrightarrow>\n    lower p v = lower q v", "show ?L"], ["proof (prove)\ngoal (1 subgoal):\n 1. lower p v = lower q v", "proof (rule poly_mapping_eqI, simp add: lookup_lower, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. k \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p k = lookup q k", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. k \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p k = lookup q k", "assume \"u \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>k. k \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p k = lookup q k", "with \\<open>?R\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup q u\n  u \\<prec>\\<^sub>t v", "show \"lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  \\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup q u\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lookup p u = lookup q u", "by simp"], ["proof (state)\nthis:\n  lookup p u = lookup q u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lower p v = lower q v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lower_eq_zero_iff: \"lower p v = 0 \\<longleftrightarrow> (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lower p v = 0) =\n    (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (lower p v = 0) =\n    (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b))", "have \"lower p v = lower 0 v \\<longleftrightarrow> (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup 0 u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lower p v = lower 0 v) =\n    (\\<forall>u.\n        u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup 0 u)", "by (rule lower_eq_iff)"], ["proof (state)\nthis:\n  (lower p v = lower 0 v) =\n  (\\<forall>u.\n      u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup 0 u)\n\ngoal (1 subgoal):\n 1. (lower p v = 0) =\n    (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (lower p v = lower 0 v) =\n  (\\<forall>u.\n      u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = lookup 0 u)\n\ngoal (1 subgoal):\n 1. (lower p v = 0) =\n    (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b))", "by simp"], ["proof (state)\nthis:\n  (lower p v = 0) =\n  (\\<forall>u. u \\<prec>\\<^sub>t v \\<longrightarrow> lookup p u = (0::'b))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma keys_lower: \"keys (lower p v) = {u\\<in>keys p. u \\<prec>\\<^sub>t v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (lower p v) = {u \\<in> keys p. u \\<prec>\\<^sub>t v}", "by (rule set_eqI, simp only: in_keys_iff, simp add: lookup_lower)"], ["", "lemma lower_lower: \"lower (lower p u) v = lower p (ord_term_lin.min u v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower (lower p u) v = lower p (ord_term_lin.min u v)", "by (rule poly_mapping_eqI, simp add: lookup_lower)"], ["", "lemma lt_higher:\n  assumes \"v \\<prec>\\<^sub>t lt p\"\n  shows \"lt (higher p v) = lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (higher p v) = lt p", "proof (rule lt_eqI_keys, simp_all add: keys_higher, rule conjI, rule lt_in_keys, rule)"], ["proof (state)\ngoal (3 subgoals):\n 1. p = 0 \\<Longrightarrow> False\n 2. v \\<prec>\\<^sub>t lt p\n 3. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "assume \"p = 0\""], ["proof (state)\nthis:\n  p = 0\n\ngoal (3 subgoals):\n 1. p = 0 \\<Longrightarrow> False\n 2. v \\<prec>\\<^sub>t lt p\n 3. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "hence \"lt p = min_term\""], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. lt p = min_term", "by (simp add: lt_def)"], ["proof (state)\nthis:\n  lt p = min_term\n\ngoal (3 subgoals):\n 1. p = 0 \\<Longrightarrow> False\n 2. v \\<prec>\\<^sub>t lt p\n 3. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "with min_term_min[of v] assms"], ["proof (chain)\npicking this:\n  min_term \\<preceq>\\<^sub>t v\n  v \\<prec>\\<^sub>t lt p\n  lt p = min_term", "show False"], ["proof (prove)\nusing this:\n  min_term \\<preceq>\\<^sub>t v\n  v \\<prec>\\<^sub>t lt p\n  lt p = min_term\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t lt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t lt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t lt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "assume \"u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u\n\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t lt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "hence \"u \\<in> keys p\""], ["proof (prove)\nusing this:\n  u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. u \\<in> keys p", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t lt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "thus \"u \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt p", "by (rule lt_max_keys)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "qed fact"], ["", "lemma lc_higher:\n  assumes \"v \\<prec>\\<^sub>t lt p\"\n  shows \"lc (higher p v) = lc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (higher p v) = lc p", "by (simp add: lc_def lt_higher assms lookup_higher)"], ["", "lemma higher_eq_zero_iff': \"higher p v = 0 \\<longleftrightarrow> lt p \\<preceq>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (higher p v = 0) = (lt p \\<preceq>\\<^sub>t v)", "by (simp add: higher_eq_zero_iff lt_le_iff)"], ["", "lemma higher_id_iff: \"higher p v = p \\<longleftrightarrow> (p = 0 \\<or> v \\<prec>\\<^sub>t tt p)\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (higher p v = p) = (p = 0 \\<or> v \\<prec>\\<^sub>t tt p)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. higher p v = p \\<Longrightarrow> p = 0 \\<or> v \\<prec>\\<^sub>t tt p\n 2. p = 0 \\<or> v \\<prec>\\<^sub>t tt p \\<Longrightarrow> higher p v = p", "assume ?L"], ["proof (state)\nthis:\n  higher p v = p\n\ngoal (2 subgoals):\n 1. higher p v = p \\<Longrightarrow> p = 0 \\<or> v \\<prec>\\<^sub>t tt p\n 2. p = 0 \\<or> v \\<prec>\\<^sub>t tt p \\<Longrightarrow> higher p v = p", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = 0 \\<or> v \\<prec>\\<^sub>t tt p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p = 0 \\<or> v \\<prec>\\<^sub>t tt p\n 2. p \\<noteq> 0 \\<Longrightarrow> p = 0 \\<or> v \\<prec>\\<^sub>t tt p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p = 0 \\<or> v \\<prec>\\<^sub>t tt p\n 2. p \\<noteq> 0 \\<Longrightarrow> p = 0 \\<or> v \\<prec>\\<^sub>t tt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. p = 0 \\<or> v \\<prec>\\<^sub>t tt p", ".."], ["proof (state)\nthis:\n  p = 0 \\<or> v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p = 0 \\<or> v \\<prec>\\<^sub>t tt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p = 0 \\<or> v \\<prec>\\<^sub>t tt p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p = 0 \\<or> v \\<prec>\\<^sub>t tt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = 0 \\<or> v \\<prec>\\<^sub>t tt p", "proof (rule disjI2, rule tt_gr)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<prec>\\<^sub>t u\n 2. p \\<noteq> 0", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<prec>\\<^sub>t u\n 2. p \\<noteq> 0", "assume \"u \\<in> keys p\""], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<prec>\\<^sub>t u\n 2. p \\<noteq> 0", "hence \"lookup p u \\<noteq> 0\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<prec>\\<^sub>t u\n 2. p \\<noteq> 0", "from \\<open>?L\\<close>"], ["proof (chain)\npicking this:\n  higher p v = p", "have \"lookup (higher p v) u = lookup p u\""], ["proof (prove)\nusing this:\n  higher p v = p\n\ngoal (1 subgoal):\n 1. lookup (higher p v) u = lookup p u", "by simp"], ["proof (state)\nthis:\n  lookup (higher p v) u = lookup p u\n\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<prec>\\<^sub>t u\n 2. p \\<noteq> 0", "hence \"lookup p u = (if v \\<prec>\\<^sub>t u then lookup p u else 0)\""], ["proof (prove)\nusing this:\n  lookup (higher p v) u = lookup p u\n\ngoal (1 subgoal):\n 1. lookup p u = (if v \\<prec>\\<^sub>t u then lookup p u else (0::'b))", "by (simp only: lookup_higher)"], ["proof (state)\nthis:\n  lookup p u = (if v \\<prec>\\<^sub>t u then lookup p u else (0::'b))\n\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<prec>\\<^sub>t u\n 2. p \\<noteq> 0", "hence \"\\<not> v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = 0\""], ["proof (prove)\nusing this:\n  lookup p u = (if v \\<prec>\\<^sub>t u then lookup p u else (0::'b))\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "by simp"], ["proof (state)\nthis:\n  \\<not> v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)\n\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> keys p \\<Longrightarrow> v \\<prec>\\<^sub>t u\n 2. p \\<noteq> 0", "with \\<open>lookup p u \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  lookup p u \\<noteq> (0::'b)\n  \\<not> v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "show \"v \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n  \\<not> v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t u", "by auto"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "qed fact"], ["proof (state)\nthis:\n  p = 0 \\<or> v \\<prec>\\<^sub>t tt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p = 0 \\<or> v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. p = 0 \\<or> v \\<prec>\\<^sub>t tt p \\<Longrightarrow> higher p v = p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p = 0 \\<or> v \\<prec>\\<^sub>t tt p \\<Longrightarrow> higher p v = p", "assume ?R"], ["proof (state)\nthis:\n  p = 0 \\<or> v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. p = 0 \\<or> v \\<prec>\\<^sub>t tt p \\<Longrightarrow> higher p v = p", "show ?L"], ["proof (prove)\ngoal (1 subgoal):\n 1. higher p v = p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> higher p v = p\n 2. p \\<noteq> 0 \\<Longrightarrow> higher p v = p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> higher p v = p\n 2. p \\<noteq> 0 \\<Longrightarrow> higher p v = p", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. higher p v = p", "by simp"], ["proof (state)\nthis:\n  higher p v = p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> higher p v = p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> higher p v = p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> higher p v = p", "with \\<open>?R\\<close>"], ["proof (chain)\npicking this:\n  p = 0 \\<or> v \\<prec>\\<^sub>t tt p\n  p \\<noteq> 0", "have \"v \\<prec>\\<^sub>t tt p\""], ["proof (prove)\nusing this:\n  p = 0 \\<or> v \\<prec>\\<^sub>t tt p\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t tt p", "by simp"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> higher p v = p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. higher p v = p", "proof (rule poly_mapping_eqI, simp add: lookup_higher, intro impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> v \\<prec>\\<^sub>t k \\<Longrightarrow> lookup p k = (0::'b)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> v \\<prec>\\<^sub>t k \\<Longrightarrow> lookup p k = (0::'b)", "assume \"\\<not> v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  \\<not> v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> v \\<prec>\\<^sub>t k \\<Longrightarrow> lookup p k = (0::'b)", "hence \"u \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  \\<not> v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> v \\<prec>\\<^sub>t k \\<Longrightarrow> lookup p k = (0::'b)", "from this \\<open>v \\<prec>\\<^sub>t tt p\\<close>"], ["proof (chain)\npicking this:\n  u \\<preceq>\\<^sub>t v\n  v \\<prec>\\<^sub>t tt p", "have \"u \\<prec>\\<^sub>t tt p\""], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>t v\n  v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t tt p", "by simp"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> v \\<prec>\\<^sub>t k \\<Longrightarrow> lookup p k = (0::'b)", "hence \"\\<not> tt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  \\<not> tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> v \\<prec>\\<^sub>t k \\<Longrightarrow> lookup p k = (0::'b)", "with tt_min[of p u]"], ["proof (chain)\npicking this:\n  lookup p u \\<noteq> (0::'b) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u\n  \\<not> tt p \\<preceq>\\<^sub>t u", "show \"lookup p u = 0\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b) \\<Longrightarrow> tt p \\<preceq>\\<^sub>t u\n  \\<not> tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  higher p v = p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  higher p v = p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_lower:\n  assumes \"tt p \\<prec>\\<^sub>t v\"\n  shows \"tt (lower p v) = tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (lower p v) = tt p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> tt (lower p v) = tt p\n 2. p \\<noteq> 0 \\<Longrightarrow> tt (lower p v) = tt p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> tt (lower p v) = tt p\n 2. p \\<noteq> 0 \\<Longrightarrow> tt (lower p v) = tt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. tt (lower p v) = tt p", "by simp"], ["proof (state)\nthis:\n  tt (lower p v) = tt p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tt (lower p v) = tt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tt (lower p v) = tt p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tt (lower p v) = tt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (lower p v) = tt p", "proof (rule tt_eqI, simp_all add: keys_lower, rule, rule tt_in_keys)"], ["proof (state)\ngoal (3 subgoals):\n 1. p \\<noteq> 0\n 2. tt p \\<prec>\\<^sub>t v\n 3. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "fix u"], ["proof (state)\ngoal (3 subgoals):\n 1. p \\<noteq> 0\n 2. tt p \\<prec>\\<^sub>t v\n 3. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "assume \"u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v\n\ngoal (3 subgoals):\n 1. p \\<noteq> 0\n 2. tt p \\<prec>\\<^sub>t v\n 3. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "hence \"u \\<in> keys p\""], ["proof (prove)\nusing this:\n  u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. u \\<in> keys p", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (3 subgoals):\n 1. p \\<noteq> 0\n 2. tt p \\<prec>\\<^sub>t v\n 3. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "thus \"tt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t u", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal (2 subgoals):\n 1. p \\<noteq> 0\n 2. tt p \\<prec>\\<^sub>t v", "qed fact+"], ["proof (state)\nthis:\n  tt (lower p v) = tt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tc_lower:\n  assumes \"tt p \\<prec>\\<^sub>t v\"\n  shows \"tc (lower p v) = tc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (lower p v) = tc p", "by (simp add: tc_def tt_lower assms lookup_lower)"], ["", "lemma lt_lower: \"lt (lower p v) \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (lower p v) \\<preceq>\\<^sub>t lt p", "proof (cases \"lower p v = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lower p v = 0 \\<Longrightarrow> lt (lower p v) \\<preceq>\\<^sub>t lt p\n 2. lower p v \\<noteq> 0 \\<Longrightarrow>\n    lt (lower p v) \\<preceq>\\<^sub>t lt p", "case True"], ["proof (state)\nthis:\n  lower p v = 0\n\ngoal (2 subgoals):\n 1. lower p v = 0 \\<Longrightarrow> lt (lower p v) \\<preceq>\\<^sub>t lt p\n 2. lower p v \\<noteq> 0 \\<Longrightarrow>\n    lt (lower p v) \\<preceq>\\<^sub>t lt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  lower p v = 0\n\ngoal (1 subgoal):\n 1. lt (lower p v) \\<preceq>\\<^sub>t lt p", "by (simp add: lt_def min_term_min)"], ["proof (state)\nthis:\n  lt (lower p v) \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lower p v \\<noteq> 0 \\<Longrightarrow>\n    lt (lower p v) \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lower p v \\<noteq> 0 \\<Longrightarrow>\n    lt (lower p v) \\<preceq>\\<^sub>t lt p", "case False"], ["proof (state)\nthis:\n  lower p v \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lower p v \\<noteq> 0 \\<Longrightarrow>\n    lt (lower p v) \\<preceq>\\<^sub>t lt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (lower p v) \\<preceq>\\<^sub>t lt p", "proof (rule lt_le, simp add: lookup_lower, rule impI, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>lt p \\<prec>\\<^sub>t u; u \\<prec>\\<^sub>t v;\n        lookup p u \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> False", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>lt p \\<prec>\\<^sub>t u; u \\<prec>\\<^sub>t v;\n        lookup p u \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"lookup p u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>lt p \\<prec>\\<^sub>t u; u \\<prec>\\<^sub>t v;\n        lookup p u \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"u \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt p", "by (rule lt_max)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>lt p \\<prec>\\<^sub>t u; u \\<prec>\\<^sub>t v;\n        lookup p u \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>lt p \\<prec>\\<^sub>t u; u \\<prec>\\<^sub>t v;\n        lookup p u \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"lt p \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>lt p \\<prec>\\<^sub>t u; u \\<prec>\\<^sub>t v;\n        lookup p u \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  u \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u", "show False"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (lower p v) \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_lower_less:\n  assumes \"lower p v \\<noteq> 0\"\n  shows \"lt (lower p v) \\<prec>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (lower p v) \\<prec>\\<^sub>t v", "using assms"], ["proof (prove)\nusing this:\n  lower p v \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt (lower p v) \\<prec>\\<^sub>t v", "proof (rule lt_less)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<preceq>\\<^sub>t u \\<Longrightarrow>\n       lookup (lower p v) u = (0::'b)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<preceq>\\<^sub>t u \\<Longrightarrow>\n       lookup (lower p v) u = (0::'b)", "assume \"v \\<preceq>\\<^sub>t u\""], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<preceq>\\<^sub>t u \\<Longrightarrow>\n       lookup (lower p v) u = (0::'b)", "thus \"lookup (lower p v) u = 0\""], ["proof (prove)\nusing this:\n  v \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup (lower p v) u = (0::'b)", "by (simp add: lookup_lower_when)"], ["proof (state)\nthis:\n  lookup (lower p v) u = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_lower_eq_iff: \"lt (lower p v) = lt p \\<longleftrightarrow> (lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v)\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (lt (lower p v) = lt p) = (lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lt (lower p v) = lt p \\<Longrightarrow>\n    lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v\n 2. lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lt (lower p v) = lt p", "assume ?L"], ["proof (state)\nthis:\n  lt (lower p v) = lt p\n\ngoal (2 subgoals):\n 1. lt (lower p v) = lt p \\<Longrightarrow>\n    lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v\n 2. lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lt (lower p v) = lt p", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v", "proof (rule ccontr, simp, elim conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>lt p \\<noteq> min_term; \\<not> lt p \\<prec>\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"lt p \\<noteq> min_term\""], ["proof (state)\nthis:\n  lt p \\<noteq> min_term\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lt p \\<noteq> min_term; \\<not> lt p \\<prec>\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"min_term \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt p \\<noteq> min_term\n\ngoal (1 subgoal):\n 1. min_term \\<prec>\\<^sub>t lt p", "using min_term_min ord_term_lin.dual_order.not_eq_order_implies_strict"], ["proof (prove)\nusing this:\n  lt p \\<noteq> min_term\n  min_term \\<preceq>\\<^sub>t ?v\n  \\<lbrakk>?a \\<noteq> ?b; ?b \\<preceq>\\<^sub>t ?a\\<rbrakk>\n  \\<Longrightarrow> ?b \\<prec>\\<^sub>t ?a\n\ngoal (1 subgoal):\n 1. min_term \\<prec>\\<^sub>t lt p", "by blast"], ["proof (state)\nthis:\n  min_term \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lt p \\<noteq> min_term; \\<not> lt p \\<prec>\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"\\<not> lt p \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  \\<not> lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lt p \\<noteq> min_term; \\<not> lt p \\<prec>\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"v \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  \\<not> lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lt p \\<noteq> min_term; \\<not> lt p \\<prec>\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> False", "have \"lt (lower p v) \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (lower p v) \\<prec>\\<^sub>t lt p", "proof (cases \"lower p v = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lower p v = 0 \\<Longrightarrow> lt (lower p v) \\<prec>\\<^sub>t lt p\n 2. lower p v \\<noteq> 0 \\<Longrightarrow>\n    lt (lower p v) \\<prec>\\<^sub>t lt p", "case True"], ["proof (state)\nthis:\n  lower p v = 0\n\ngoal (2 subgoals):\n 1. lower p v = 0 \\<Longrightarrow> lt (lower p v) \\<prec>\\<^sub>t lt p\n 2. lower p v \\<noteq> 0 \\<Longrightarrow>\n    lt (lower p v) \\<prec>\\<^sub>t lt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  lower p v = 0\n\ngoal (1 subgoal):\n 1. lt (lower p v) \\<prec>\\<^sub>t lt p", "using \\<open>min_term \\<prec>\\<^sub>t lt p\\<close>"], ["proof (prove)\nusing this:\n  lower p v = 0\n  min_term \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt (lower p v) \\<prec>\\<^sub>t lt p", "by (simp add: lt_def)"], ["proof (state)\nthis:\n  lt (lower p v) \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lower p v \\<noteq> 0 \\<Longrightarrow>\n    lt (lower p v) \\<prec>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lower p v \\<noteq> 0 \\<Longrightarrow>\n    lt (lower p v) \\<prec>\\<^sub>t lt p", "case False"], ["proof (state)\nthis:\n  lower p v \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lower p v \\<noteq> 0 \\<Longrightarrow>\n    lt (lower p v) \\<prec>\\<^sub>t lt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (lower p v) \\<prec>\\<^sub>t lt p", "proof (rule lt_less)"], ["proof (state)\ngoal (2 subgoals):\n 1. lower p v \\<noteq> 0\n 2. \\<And>u.\n       lt p \\<preceq>\\<^sub>t u \\<Longrightarrow>\n       lookup (lower p v) u = (0::'b)", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. lower p v \\<noteq> 0\n 2. \\<And>u.\n       lt p \\<preceq>\\<^sub>t u \\<Longrightarrow>\n       lookup (lower p v) u = (0::'b)", "assume \"lt p \\<preceq>\\<^sub>t u\""], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t u\n\ngoal (2 subgoals):\n 1. lower p v \\<noteq> 0\n 2. \\<And>u.\n       lt p \\<preceq>\\<^sub>t u \\<Longrightarrow>\n       lookup (lower p v) u = (0::'b)", "with \\<open>v \\<preceq>\\<^sub>t lt p\\<close>"], ["proof (chain)\npicking this:\n  v \\<preceq>\\<^sub>t lt p\n  lt p \\<preceq>\\<^sub>t u", "have \"\\<not> u \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  v \\<preceq>\\<^sub>t lt p\n  lt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<not> u \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  \\<not> u \\<prec>\\<^sub>t v\n\ngoal (2 subgoals):\n 1. lower p v \\<noteq> 0\n 2. \\<And>u.\n       lt p \\<preceq>\\<^sub>t u \\<Longrightarrow>\n       lookup (lower p v) u = (0::'b)", "thus \"lookup (lower p v) u = 0\""], ["proof (prove)\nusing this:\n  \\<not> u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lookup (lower p v) u = (0::'b)", "by (simp add: lookup_lower)"], ["proof (state)\nthis:\n  lookup (lower p v) u = (0::'b)\n\ngoal (1 subgoal):\n 1. lower p v \\<noteq> 0", "qed fact"], ["proof (state)\nthis:\n  lt (lower p v) \\<prec>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (lower p v) \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lt p \\<noteq> min_term; \\<not> lt p \\<prec>\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> False", "with \\<open>?L\\<close>"], ["proof (chain)\npicking this:\n  lt (lower p v) = lt p\n  lt (lower p v) \\<prec>\\<^sub>t lt p", "show False"], ["proof (prove)\nusing this:\n  lt (lower p v) = lt p\n  lt (lower p v) \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lt (lower p v) = lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lt (lower p v) = lt p", "assume ?R"], ["proof (state)\nthis:\n  lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lt (lower p v) = lt p", "show ?L"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (lower p v) = lt p", "proof (cases \"lt p = min_term\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p = min_term \\<Longrightarrow> lt (lower p v) = lt p\n 2. lt p \\<noteq> min_term \\<Longrightarrow> lt (lower p v) = lt p", "case True"], ["proof (state)\nthis:\n  lt p = min_term\n\ngoal (2 subgoals):\n 1. lt p = min_term \\<Longrightarrow> lt (lower p v) = lt p\n 2. lt p \\<noteq> min_term \\<Longrightarrow> lt (lower p v) = lt p", "hence \"lt p \\<preceq>\\<^sub>t lt (lower p v)\""], ["proof (prove)\nusing this:\n  lt p = min_term\n\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t lt (lower p v)", "by (simp add: min_term_min)"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t lt (lower p v)\n\ngoal (2 subgoals):\n 1. lt p = min_term \\<Longrightarrow> lt (lower p v) = lt p\n 2. lt p \\<noteq> min_term \\<Longrightarrow> lt (lower p v) = lt p", "with lt_lower[of p v]"], ["proof (chain)\npicking this:\n  lt (lower p v) \\<preceq>\\<^sub>t lt p\n  lt p \\<preceq>\\<^sub>t lt (lower p v)", "show ?thesis"], ["proof (prove)\nusing this:\n  lt (lower p v) \\<preceq>\\<^sub>t lt p\n  lt p \\<preceq>\\<^sub>t lt (lower p v)\n\ngoal (1 subgoal):\n 1. lt (lower p v) = lt p", "by simp"], ["proof (state)\nthis:\n  lt (lower p v) = lt p\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> min_term \\<Longrightarrow> lt (lower p v) = lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<noteq> min_term \\<Longrightarrow> lt (lower p v) = lt p", "case False"], ["proof (state)\nthis:\n  lt p \\<noteq> min_term\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> min_term \\<Longrightarrow> lt (lower p v) = lt p", "with \\<open>?R\\<close>"], ["proof (chain)\npicking this:\n  lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v\n  lt p \\<noteq> min_term", "have \"lt p \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  lt p = min_term \\<or> lt p \\<prec>\\<^sub>t v\n  lt p \\<noteq> min_term\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> min_term \\<Longrightarrow> lt (lower p v) = lt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (lower p v) = lt p", "proof (rule lt_eqI_keys, simp_all add: keys_lower, rule conjI, rule lt_in_keys, rule)"], ["proof (state)\ngoal (3 subgoals):\n 1. p = 0 \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t v\n 3. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "assume \"p = 0\""], ["proof (state)\nthis:\n  p = 0\n\ngoal (3 subgoals):\n 1. p = 0 \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t v\n 3. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "hence \"lt p = min_term\""], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. lt p = min_term", "by (simp add: lt_def)"], ["proof (state)\nthis:\n  lt p = min_term\n\ngoal (3 subgoals):\n 1. p = 0 \\<Longrightarrow> False\n 2. lt p \\<prec>\\<^sub>t v\n 3. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "with False"], ["proof (chain)\npicking this:\n  lt p \\<noteq> min_term\n  lt p = min_term", "show False"], ["proof (prove)\nusing this:\n  lt p \\<noteq> min_term\n  lt p = min_term\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. lt p \\<prec>\\<^sub>t v\n 2. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p \\<prec>\\<^sub>t v\n 2. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p \\<prec>\\<^sub>t v\n 2. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "assume \"u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v\n\ngoal (2 subgoals):\n 1. lt p \\<prec>\\<^sub>t v\n 2. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "hence \"u \\<in> keys p\""], ["proof (prove)\nusing this:\n  u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. u \\<in> keys p", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (2 subgoals):\n 1. lt p \\<prec>\\<^sub>t v\n 2. \\<And>u.\n       u \\<in> keys p \\<and> u \\<prec>\\<^sub>t v \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t lt p", "thus \"u \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt p", "by (rule lt_max_keys)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v", "qed fact"], ["proof (state)\nthis:\n  lt (lower p v) = lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (lower p v) = lt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_higher:\n  assumes \"v \\<prec>\\<^sub>t lt p\"\n  shows \"tt p \\<preceq>\\<^sub>t tt (higher p v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t tt (higher p v)", "proof (rule tt_ge_keys, simp add: keys_higher)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u\n 2. higher p v \\<noteq> 0", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u\n 2. higher p v \\<noteq> 0", "assume \"u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u\n 2. higher p v \\<noteq> 0", "hence \"u \\<in> keys p\""], ["proof (prove)\nusing this:\n  u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. u \\<in> keys p", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u\n 2. higher p v \\<noteq> 0", "thus \"tt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t u", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. higher p v \\<noteq> 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. higher p v \\<noteq> 0", "show \"higher p v \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. higher p v \\<noteq> 0", "proof (simp add: higher_eq_zero_iff, intro exI conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t ?u\n 2. lookup p ?u \\<noteq> (0::'b)", "have \"p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow> False", "assume \"p = 0\""], ["proof (state)\nthis:\n  p = 0\n\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow> False", "hence \"lt p \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v", "by (simp add: lt_def min_term_min)"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t lt p\n  lt p \\<preceq>\\<^sub>t v", "show False"], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p\n  lt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t ?u\n 2. lookup p ?u \\<noteq> (0::'b)", "thus \"lookup p (lt p) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lookup p (lt p) \\<noteq> (0::'b)", "using lt_in_keys"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  ?p \\<noteq> 0 \\<Longrightarrow> lt ?p \\<in> keys ?p\n\ngoal (1 subgoal):\n 1. lookup p (lt p) \\<noteq> (0::'b)", "by auto"], ["proof (state)\nthis:\n  lookup p (lt p) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "qed fact"], ["proof (state)\nthis:\n  higher p v \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_higher_eq_iff:\n  \"tt (higher p v) = tt p \\<longleftrightarrow> ((lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term) \\<or> v \\<prec>\\<^sub>t tt p)\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (tt (higher p v) = tt p) =\n    (lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n     v \\<prec>\\<^sub>t tt p)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. tt (higher p v) = tt p \\<Longrightarrow>\n    lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n    v \\<prec>\\<^sub>t tt p\n 2. lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n    v \\<prec>\\<^sub>t tt p \\<Longrightarrow>\n    tt (higher p v) = tt p", "assume ?L"], ["proof (state)\nthis:\n  tt (higher p v) = tt p\n\ngoal (2 subgoals):\n 1. tt (higher p v) = tt p \\<Longrightarrow>\n    lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n    v \\<prec>\\<^sub>t tt p\n 2. lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n    v \\<prec>\\<^sub>t tt p \\<Longrightarrow>\n    tt (higher p v) = tt p", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n    v \\<prec>\\<^sub>t tt p", "proof (rule ccontr, simp, elim conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>lt p \\<preceq>\\<^sub>t v \\<longrightarrow>\n             tt p \\<noteq> min_term;\n     \\<not> v \\<prec>\\<^sub>t tt p\\<rbrakk>\n    \\<Longrightarrow> False", "assume a: \"lt p \\<preceq>\\<^sub>t v \\<longrightarrow> tt p \\<noteq> min_term\""], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v \\<longrightarrow> tt p \\<noteq> min_term\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lt p \\<preceq>\\<^sub>t v \\<longrightarrow>\n             tt p \\<noteq> min_term;\n     \\<not> v \\<prec>\\<^sub>t tt p\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"\\<not> v \\<prec>\\<^sub>t tt p\""], ["proof (state)\nthis:\n  \\<not> v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lt p \\<preceq>\\<^sub>t v \\<longrightarrow>\n             tt p \\<noteq> min_term;\n     \\<not> v \\<prec>\\<^sub>t tt p\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"tt p \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  \\<not> v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lt p \\<preceq>\\<^sub>t v \\<longrightarrow>\n             tt p \\<noteq> min_term;\n     \\<not> v \\<prec>\\<^sub>t tt p\\<rbrakk>\n    \\<Longrightarrow> False", "have \"tt p \\<prec>\\<^sub>t tt (higher p v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t tt (higher p v)", "proof (cases \"higher p v = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. higher p v = 0 \\<Longrightarrow> tt p \\<prec>\\<^sub>t tt (higher p v)\n 2. higher p v \\<noteq> 0 \\<Longrightarrow>\n    tt p \\<prec>\\<^sub>t tt (higher p v)", "case True"], ["proof (state)\nthis:\n  higher p v = 0\n\ngoal (2 subgoals):\n 1. higher p v = 0 \\<Longrightarrow> tt p \\<prec>\\<^sub>t tt (higher p v)\n 2. higher p v \\<noteq> 0 \\<Longrightarrow>\n    tt p \\<prec>\\<^sub>t tt (higher p v)", "with \\<open>?L\\<close>"], ["proof (chain)\npicking this:\n  tt (higher p v) = tt p\n  higher p v = 0", "have \"tt p = min_term\""], ["proof (prove)\nusing this:\n  tt (higher p v) = tt p\n  higher p v = 0\n\ngoal (1 subgoal):\n 1. tt p = min_term", "by (simp add: tt_def)"], ["proof (state)\nthis:\n  tt p = min_term\n\ngoal (2 subgoals):\n 1. higher p v = 0 \\<Longrightarrow> tt p \\<prec>\\<^sub>t tt (higher p v)\n 2. higher p v \\<noteq> 0 \\<Longrightarrow>\n    tt p \\<prec>\\<^sub>t tt (higher p v)", "with a"], ["proof (chain)\npicking this:\n  lt p \\<preceq>\\<^sub>t v \\<longrightarrow> tt p \\<noteq> min_term\n  tt p = min_term", "have \"v \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt p \\<preceq>\\<^sub>t v \\<longrightarrow> tt p \\<noteq> min_term\n  tt p = min_term\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "by auto"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. higher p v = 0 \\<Longrightarrow> tt p \\<prec>\\<^sub>t tt (higher p v)\n 2. higher p v \\<noteq> 0 \\<Longrightarrow>\n    tt p \\<prec>\\<^sub>t tt (higher p v)", "have \"lt p \\<noteq> min_term\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<noteq> min_term", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p = min_term \\<Longrightarrow> False", "assume \"lt p = min_term\""], ["proof (state)\nthis:\n  lt p = min_term\n\ngoal (1 subgoal):\n 1. lt p = min_term \\<Longrightarrow> False", "with \\<open>v \\<prec>\\<^sub>t lt p\\<close>"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t lt p\n  lt p = min_term", "show False"], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p\n  lt p = min_term\n\ngoal (1 subgoal):\n 1. False", "using min_term_min[of v]"], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p\n  lt p = min_term\n  min_term \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt p \\<noteq> min_term\n\ngoal (2 subgoals):\n 1. higher p v = 0 \\<Longrightarrow> tt p \\<prec>\\<^sub>t tt (higher p v)\n 2. higher p v \\<noteq> 0 \\<Longrightarrow>\n    tt p \\<prec>\\<^sub>t tt (higher p v)", "hence \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lt p \\<noteq> min_term\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by (auto simp add: lt_def)"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. higher p v = 0 \\<Longrightarrow> tt p \\<prec>\\<^sub>t tt (higher p v)\n 2. higher p v \\<noteq> 0 \\<Longrightarrow>\n    tt p \\<prec>\\<^sub>t tt (higher p v)", "from \\<open>v \\<prec>\\<^sub>t lt p\\<close>"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t lt p", "have \"higher p v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. higher p v \\<noteq> 0", "by (simp add: higher_eq_zero_iff')"], ["proof (state)\nthis:\n  higher p v \\<noteq> 0\n\ngoal (2 subgoals):\n 1. higher p v = 0 \\<Longrightarrow> tt p \\<prec>\\<^sub>t tt (higher p v)\n 2. higher p v \\<noteq> 0 \\<Longrightarrow>\n    tt p \\<prec>\\<^sub>t tt (higher p v)", "from this True"], ["proof (chain)\npicking this:\n  higher p v \\<noteq> 0\n  higher p v = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  higher p v \\<noteq> 0\n  higher p v = 0\n\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t tt (higher p v)", ".."], ["proof (state)\nthis:\n  tt p \\<prec>\\<^sub>t tt (higher p v)\n\ngoal (1 subgoal):\n 1. higher p v \\<noteq> 0 \\<Longrightarrow>\n    tt p \\<prec>\\<^sub>t tt (higher p v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. higher p v \\<noteq> 0 \\<Longrightarrow>\n    tt p \\<prec>\\<^sub>t tt (higher p v)", "case False"], ["proof (state)\nthis:\n  higher p v \\<noteq> 0\n\ngoal (1 subgoal):\n 1. higher p v \\<noteq> 0 \\<Longrightarrow>\n    tt p \\<prec>\\<^sub>t tt (higher p v)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t tt (higher p v)", "proof (rule tt_gr)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> keys (higher p v) \\<Longrightarrow> tt p \\<prec>\\<^sub>t u\n 2. higher p v \\<noteq> 0", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> keys (higher p v) \\<Longrightarrow> tt p \\<prec>\\<^sub>t u\n 2. higher p v \\<noteq> 0", "assume \"u \\<in> keys (higher p v)\""], ["proof (state)\nthis:\n  u \\<in> keys (higher p v)\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> keys (higher p v) \\<Longrightarrow> tt p \\<prec>\\<^sub>t u\n 2. higher p v \\<noteq> 0", "hence \"v \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u \\<in> keys (higher p v)\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t u", "by (simp add: keys_higher)"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> keys (higher p v) \\<Longrightarrow> tt p \\<prec>\\<^sub>t u\n 2. higher p v \\<noteq> 0", "with \\<open>tt p \\<preceq>\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  tt p \\<preceq>\\<^sub>t v\n  v \\<prec>\\<^sub>t u", "show \"tt p \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  tt p \\<preceq>\\<^sub>t v\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  tt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. higher p v \\<noteq> 0", "qed fact"], ["proof (state)\nthis:\n  tt p \\<prec>\\<^sub>t tt (higher p v)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tt p \\<prec>\\<^sub>t tt (higher p v)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lt p \\<preceq>\\<^sub>t v \\<longrightarrow>\n             tt p \\<noteq> min_term;\n     \\<not> v \\<prec>\\<^sub>t tt p\\<rbrakk>\n    \\<Longrightarrow> False", "with \\<open>?L\\<close>"], ["proof (chain)\npicking this:\n  tt (higher p v) = tt p\n  tt p \\<prec>\\<^sub>t tt (higher p v)", "show False"], ["proof (prove)\nusing this:\n  tt (higher p v) = tt p\n  tt p \\<prec>\\<^sub>t tt (higher p v)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n  v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n    v \\<prec>\\<^sub>t tt p \\<Longrightarrow>\n    tt (higher p v) = tt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n    v \\<prec>\\<^sub>t tt p \\<Longrightarrow>\n    tt (higher p v) = tt p", "assume ?R"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n  v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n    v \\<prec>\\<^sub>t tt p \\<Longrightarrow>\n    tt (higher p v) = tt p", "show ?L"], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (higher p v) = tt p", "proof (cases \"lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<Longrightarrow>\n    tt (higher p v) = tt p\n 2. \\<not> (lt p \\<preceq>\\<^sub>t v \\<and>\n            tt p = min_term) \\<Longrightarrow>\n    tt (higher p v) = tt p", "case True"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term\n\ngoal (2 subgoals):\n 1. lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<Longrightarrow>\n    tt (higher p v) = tt p\n 2. \\<not> (lt p \\<preceq>\\<^sub>t v \\<and>\n            tt p = min_term) \\<Longrightarrow>\n    tt (higher p v) = tt p", "hence \"lt p \\<preceq>\\<^sub>t v\" and \"tt p = min_term\""], ["proof (prove)\nusing this:\n  lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term\n\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v &&& tt p = min_term", "by simp_all"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v\n  tt p = min_term\n\ngoal (2 subgoals):\n 1. lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<Longrightarrow>\n    tt (higher p v) = tt p\n 2. \\<not> (lt p \\<preceq>\\<^sub>t v \\<and>\n            tt p = min_term) \\<Longrightarrow>\n    tt (higher p v) = tt p", "from \\<open>lt p \\<preceq>\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  lt p \\<preceq>\\<^sub>t v", "have \"higher p v = 0\""], ["proof (prove)\nusing this:\n  lt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. higher p v = 0", "by (simp add: higher_eq_zero_iff')"], ["proof (state)\nthis:\n  higher p v = 0\n\ngoal (2 subgoals):\n 1. lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<Longrightarrow>\n    tt (higher p v) = tt p\n 2. \\<not> (lt p \\<preceq>\\<^sub>t v \\<and>\n            tt p = min_term) \\<Longrightarrow>\n    tt (higher p v) = tt p", "with \\<open>tt p = min_term\\<close>"], ["proof (chain)\npicking this:\n  tt p = min_term\n  higher p v = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  tt p = min_term\n  higher p v = 0\n\ngoal (1 subgoal):\n 1. tt (higher p v) = tt p", "by (simp add: tt_def)"], ["proof (state)\nthis:\n  tt (higher p v) = tt p\n\ngoal (1 subgoal):\n 1. \\<not> (lt p \\<preceq>\\<^sub>t v \\<and>\n            tt p = min_term) \\<Longrightarrow>\n    tt (higher p v) = tt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (lt p \\<preceq>\\<^sub>t v \\<and>\n            tt p = min_term) \\<Longrightarrow>\n    tt (higher p v) = tt p", "case False"], ["proof (state)\nthis:\n  \\<not> (lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term)\n\ngoal (1 subgoal):\n 1. \\<not> (lt p \\<preceq>\\<^sub>t v \\<and>\n            tt p = min_term) \\<Longrightarrow>\n    tt (higher p v) = tt p", "with \\<open>?R\\<close>"], ["proof (chain)\npicking this:\n  lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n  v \\<prec>\\<^sub>t tt p\n  \\<not> (lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term)", "have \"v \\<prec>\\<^sub>t tt p\""], ["proof (prove)\nusing this:\n  lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term \\<or>\n  v \\<prec>\\<^sub>t tt p\n  \\<not> (lt p \\<preceq>\\<^sub>t v \\<and> tt p = min_term)\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t tt p", "by simp"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. \\<not> (lt p \\<preceq>\\<^sub>t v \\<and>\n            tt p = min_term) \\<Longrightarrow>\n    tt (higher p v) = tt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (higher p v) = tt p", "proof (rule tt_eqI, simp_all add: keys_higher, rule conjI, rule tt_in_keys, rule)"], ["proof (state)\ngoal (3 subgoals):\n 1. p = 0 \\<Longrightarrow> False\n 2. v \\<prec>\\<^sub>t tt p\n 3. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "assume \"p = 0\""], ["proof (state)\nthis:\n  p = 0\n\ngoal (3 subgoals):\n 1. p = 0 \\<Longrightarrow> False\n 2. v \\<prec>\\<^sub>t tt p\n 3. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "hence \"tt p = min_term\""], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. tt p = min_term", "by (simp add: tt_def)"], ["proof (state)\nthis:\n  tt p = min_term\n\ngoal (3 subgoals):\n 1. p = 0 \\<Longrightarrow> False\n 2. v \\<prec>\\<^sub>t tt p\n 3. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "with \\<open>v \\<prec>\\<^sub>t tt p\\<close> min_term_min[of v]"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t tt p\n  min_term \\<preceq>\\<^sub>t v\n  tt p = min_term", "show False"], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t tt p\n  min_term \\<preceq>\\<^sub>t v\n  tt p = min_term\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t tt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t tt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t tt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "assume \"u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u\n\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t tt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "hence \"u \\<in> keys p\""], ["proof (prove)\nusing this:\n  u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. u \\<in> keys p", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t tt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "thus \"tt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t u", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t tt p", "qed fact"], ["proof (state)\nthis:\n  tt (higher p v) = tt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tt (higher p v) = tt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lower_eq_zero_iff': \"lower p v = 0 \\<longleftrightarrow> (p = 0 \\<or> v \\<preceq>\\<^sub>t tt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lower p v = 0) = (p = 0 \\<or> v \\<preceq>\\<^sub>t tt p)", "by (auto simp add: lower_eq_zero_iff tt_ge_iff)"], ["", "lemma lower_id_iff: \"lower p v = p \\<longleftrightarrow> (p = 0 \\<or> lt p \\<prec>\\<^sub>t v)\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (lower p v = p) = (p = 0 \\<or> lt p \\<prec>\\<^sub>t v)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lower p v = p \\<Longrightarrow> p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n 2. p = 0 \\<or> lt p \\<prec>\\<^sub>t v \\<Longrightarrow> lower p v = p", "assume ?L"], ["proof (state)\nthis:\n  lower p v = p\n\ngoal (2 subgoals):\n 1. lower p v = p \\<Longrightarrow> p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n 2. p = 0 \\<or> lt p \\<prec>\\<^sub>t v \\<Longrightarrow> lower p v = p", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = 0 \\<or> lt p \\<prec>\\<^sub>t v", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n 2. p \\<noteq> 0 \\<Longrightarrow> p = 0 \\<or> lt p \\<prec>\\<^sub>t v", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n 2. p \\<noteq> 0 \\<Longrightarrow> p = 0 \\<or> lt p \\<prec>\\<^sub>t v", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. p = 0 \\<or> lt p \\<prec>\\<^sub>t v", ".."], ["proof (state)\nthis:\n  p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p = 0 \\<or> lt p \\<prec>\\<^sub>t v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p = 0 \\<or> lt p \\<prec>\\<^sub>t v", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p = 0 \\<or> lt p \\<prec>\\<^sub>t v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = 0 \\<or> lt p \\<prec>\\<^sub>t v", "proof (rule disjI2, rule lt_less)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<noteq> 0\n 2. \\<And>u. v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<noteq> 0\n 2. \\<And>u. v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "assume \"v \\<preceq>\\<^sub>t u\""], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t u\n\ngoal (2 subgoals):\n 1. p \\<noteq> 0\n 2. \\<And>u. v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "from \\<open>?L\\<close>"], ["proof (chain)\npicking this:\n  lower p v = p", "have \"lookup (lower p v) u = lookup p u\""], ["proof (prove)\nusing this:\n  lower p v = p\n\ngoal (1 subgoal):\n 1. lookup (lower p v) u = lookup p u", "by simp"], ["proof (state)\nthis:\n  lookup (lower p v) u = lookup p u\n\ngoal (2 subgoals):\n 1. p \\<noteq> 0\n 2. \\<And>u. v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "hence \"lookup p u = (if u \\<prec>\\<^sub>t v then lookup p u else 0)\""], ["proof (prove)\nusing this:\n  lookup (lower p v) u = lookup p u\n\ngoal (1 subgoal):\n 1. lookup p u = (if u \\<prec>\\<^sub>t v then lookup p u else (0::'b))", "by (simp only: lookup_lower)"], ["proof (state)\nthis:\n  lookup p u = (if u \\<prec>\\<^sub>t v then lookup p u else (0::'b))\n\ngoal (2 subgoals):\n 1. p \\<noteq> 0\n 2. \\<And>u. v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "hence \"v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = 0\""], ["proof (prove)\nusing this:\n  lookup p u = (if u \\<prec>\\<^sub>t v then lookup p u else (0::'b))\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "by (meson ord_term_lin.leD)"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)\n\ngoal (2 subgoals):\n 1. p \\<noteq> 0\n 2. \\<And>u. v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "with \\<open>v \\<preceq>\\<^sub>t u\\<close>"], ["proof (chain)\npicking this:\n  v \\<preceq>\\<^sub>t u\n  v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)", "show \"lookup p u = 0\""], ["proof (prove)\nusing this:\n  v \\<preceq>\\<^sub>t u\n  v \\<preceq>\\<^sub>t u \\<Longrightarrow> lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "qed fact"], ["proof (state)\nthis:\n  p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. p = 0 \\<or> lt p \\<prec>\\<^sub>t v \\<Longrightarrow> lower p v = p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p = 0 \\<or> lt p \\<prec>\\<^sub>t v \\<Longrightarrow> lower p v = p", "assume ?R"], ["proof (state)\nthis:\n  p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. p = 0 \\<or> lt p \\<prec>\\<^sub>t v \\<Longrightarrow> lower p v = p", "show ?L"], ["proof (prove)\ngoal (1 subgoal):\n 1. lower p v = p", "proof (cases \"p = 0\", simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lower p v = p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lower p v = p", "with \\<open>?R\\<close>"], ["proof (chain)\npicking this:\n  p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n  p \\<noteq> 0", "have \"lt p \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lower p v = p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lower p v = p", "proof (rule poly_mapping_eqI, simp add: lookup_lower, intro impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p k = (0::'b)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p k = (0::'b)", "assume \"\\<not> u \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  \\<not> u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p k = (0::'b)", "hence \"v \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  \\<not> u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p k = (0::'b)", "with \\<open>lt p \\<prec>\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t v\n  v \\<preceq>\\<^sub>t u", "have \"lt p \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t v\n  v \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p k = (0::'b)", "hence \"\\<not> u \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  \\<not> u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t v \\<Longrightarrow> lookup p k = (0::'b)", "with lt_max[of p u]"], ["proof (chain)\npicking this:\n  lookup p u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p\n  \\<not> u \\<preceq>\\<^sub>t lt p", "show \"lookup p u = 0\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p\n  \\<not> u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lower p v = p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lower p v = p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lower_higher_commute: \"higher (lower p s) t = lower (higher p t) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. higher (lower p s) t = lower (higher p t) s", "by (rule poly_mapping_eqI, simp add: lookup_higher lookup_lower)"], ["", "lemma lt_lower_higher:\n  assumes \"v \\<prec>\\<^sub>t lt (lower p u)\"\n  shows \"lt (lower (higher p v) u) = lt (lower p u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (lower (higher p v) u) = lt (lower p u)", "by (simp add: lower_higher_commute[symmetric] lt_higher[OF assms])"], ["", "lemma lc_lower_higher:\n  assumes \"v \\<prec>\\<^sub>t lt (lower p u)\"\n  shows \"lc (lower (higher p v) u) = lc (lower p u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (lower (higher p v) u) = lc (lower p u)", "using assms"], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt (lower p u)\n\ngoal (1 subgoal):\n 1. lc (lower (higher p v) u) = lc (lower p u)", "by (simp add: lc_def lt_lower_higher lookup_lower lookup_higher)"], ["", "lemma trailing_monomial_higher:\n  assumes \"p \\<noteq> 0\"\n  shows \"p = (higher p (tt p)) + monomial (tc p) (tt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = higher p (tt p) + monomial (tc p) (tt p)", "proof (rule poly_mapping_eqI, simp only: lookup_add)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       lookup p k =\n       lookup (higher p (tt p)) k + lookup (monomial (tc p) (tt p)) k", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       lookup p k =\n       lookup (higher p (tt p)) k + lookup (monomial (tc p) (tt p)) k", "show \"lookup p v = lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "proof (cases \"tt p \\<preceq>\\<^sub>t v\")"], ["proof (state)\ngoal (2 subgoals):\n 1. tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n 2. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "case True"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t v\n\ngoal (2 subgoals):\n 1. tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n 2. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "proof (cases \"v = tt p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n 2. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "assume \"v = tt p\""], ["proof (state)\nthis:\n  v = tt p\n\ngoal (2 subgoals):\n 1. v = tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n 2. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "hence \"\\<not> tt p \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  v = tt p\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  \\<not> tt p \\<prec>\\<^sub>t v\n\ngoal (2 subgoals):\n 1. v = tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n 2. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "hence \"lookup (higher p (tt p)) v = 0\""], ["proof (prove)\nusing this:\n  \\<not> tt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lookup (higher p (tt p)) v = (0::'b)", "by (simp add: lookup_higher)"], ["proof (state)\nthis:\n  lookup (higher p (tt p)) v = (0::'b)\n\ngoal (2 subgoals):\n 1. v = tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n 2. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "moreover"], ["proof (state)\nthis:\n  lookup (higher p (tt p)) v = (0::'b)\n\ngoal (2 subgoals):\n 1. v = tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n 2. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "from \\<open>v = tt p\\<close>"], ["proof (chain)\npicking this:\n  v = tt p", "have \"lookup (monomial (tc p) (tt p)) v = tc p\""], ["proof (prove)\nusing this:\n  v = tt p\n\ngoal (1 subgoal):\n 1. lookup (monomial (tc p) (tt p)) v = tc p", "by (simp add: lookup_single)"], ["proof (state)\nthis:\n  lookup (monomial (tc p) (tt p)) v = tc p\n\ngoal (2 subgoals):\n 1. v = tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n 2. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "moreover"], ["proof (state)\nthis:\n  lookup (monomial (tc p) (tt p)) v = tc p\n\ngoal (2 subgoals):\n 1. v = tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n 2. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "from \\<open>v = tt p\\<close>"], ["proof (chain)\npicking this:\n  v = tt p", "have \"lookup p v = tc p\""], ["proof (prove)\nusing this:\n  v = tt p\n\ngoal (1 subgoal):\n 1. lookup p v = tc p", "by (simp add: tc_def)"], ["proof (state)\nthis:\n  lookup p v = tc p\n\ngoal (2 subgoals):\n 1. v = tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n 2. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "ultimately"], ["proof (chain)\npicking this:\n  lookup (higher p (tt p)) v = (0::'b)\n  lookup (monomial (tc p) (tt p)) v = tc p\n  lookup p v = tc p", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup (higher p (tt p)) v = (0::'b)\n  lookup (monomial (tc p) (tt p)) v = tc p\n  lookup p v = tc p\n\ngoal (1 subgoal):\n 1. lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "by simp"], ["proof (state)\nthis:\n  lookup p v =\n  lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n\ngoal (1 subgoal):\n 1. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "assume \"v \\<noteq> tt p\""], ["proof (state)\nthis:\n  v \\<noteq> tt p\n\ngoal (1 subgoal):\n 1. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "from this True"], ["proof (chain)\npicking this:\n  v \\<noteq> tt p\n  tt p \\<preceq>\\<^sub>t v", "have \"tt p \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  v \\<noteq> tt p\n  tt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  tt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "hence \"lookup (higher p (tt p)) v = lookup p v\""], ["proof (prove)\nusing this:\n  tt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lookup (higher p (tt p)) v = lookup p v", "by (simp add: lookup_higher)"], ["proof (state)\nthis:\n  lookup (higher p (tt p)) v = lookup p v\n\ngoal (1 subgoal):\n 1. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "moreover"], ["proof (state)\nthis:\n  lookup (higher p (tt p)) v = lookup p v\n\ngoal (1 subgoal):\n 1. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "from \\<open>v \\<noteq> tt p\\<close>"], ["proof (chain)\npicking this:\n  v \\<noteq> tt p", "have \"lookup (monomial (tc p) (tt p)) v = 0\""], ["proof (prove)\nusing this:\n  v \\<noteq> tt p\n\ngoal (1 subgoal):\n 1. lookup (monomial (tc p) (tt p)) v = (0::'b)", "by (simp add: lookup_single)"], ["proof (state)\nthis:\n  lookup (monomial (tc p) (tt p)) v = (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<noteq> tt p \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "ultimately"], ["proof (chain)\npicking this:\n  lookup (higher p (tt p)) v = lookup p v\n  lookup (monomial (tc p) (tt p)) v = (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup (higher p (tt p)) v = lookup p v\n  lookup (monomial (tc p) (tt p)) v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "by simp"], ["proof (state)\nthis:\n  lookup p v =\n  lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup p v =\n  lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "case False"], ["proof (state)\nthis:\n  \\<not> tt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "hence \"v \\<prec>\\<^sub>t tt p\""], ["proof (prove)\nusing this:\n  \\<not> tt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t tt p", "by simp"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "hence \"tt p \\<noteq> v\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. tt p \\<noteq> v", "by simp"], ["proof (state)\nthis:\n  tt p \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "from False"], ["proof (chain)\npicking this:\n  \\<not> tt p \\<preceq>\\<^sub>t v", "have \"\\<not> tt p \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  \\<not> tt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  \\<not> tt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "have \"lookup p v = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p v = (0::'b)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup p v \\<noteq> (0::'b) \\<Longrightarrow> False", "assume \"lookup p v \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup p v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p v \\<noteq> (0::'b) \\<Longrightarrow> False", "from tt_min[OF this] False"], ["proof (chain)\npicking this:\n  tt p \\<preceq>\\<^sub>t v\n  \\<not> tt p \\<preceq>\\<^sub>t v", "show False"], ["proof (prove)\nusing this:\n  tt p \\<preceq>\\<^sub>t v\n  \\<not> tt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "moreover"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "from \\<open>tt p \\<noteq> v\\<close>"], ["proof (chain)\npicking this:\n  tt p \\<noteq> v", "have \"lookup (monomial (tc p) (tt p)) v = 0\""], ["proof (prove)\nusing this:\n  tt p \\<noteq> v\n\ngoal (1 subgoal):\n 1. lookup (monomial (tc p) (tt p)) v = (0::'b)", "by (simp add: lookup_single)"], ["proof (state)\nthis:\n  lookup (monomial (tc p) (tt p)) v = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "moreover"], ["proof (state)\nthis:\n  lookup (monomial (tc p) (tt p)) v = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "from \\<open>\\<not> tt p \\<prec>\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  \\<not> tt p \\<prec>\\<^sub>t v", "have \"lookup (higher p (tt p)) v = 0\""], ["proof (prove)\nusing this:\n  \\<not> tt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lookup (higher p (tt p)) v = (0::'b)", "by (simp add: lookup_higher)"], ["proof (state)\nthis:\n  lookup (higher p (tt p)) v = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> tt p \\<preceq>\\<^sub>t v \\<Longrightarrow>\n    lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "ultimately"], ["proof (chain)\npicking this:\n  lookup p v = (0::'b)\n  lookup (monomial (tc p) (tt p)) v = (0::'b)\n  lookup (higher p (tt p)) v = (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup p v = (0::'b)\n  lookup (monomial (tc p) (tt p)) v = (0::'b)\n  lookup (higher p (tt p)) v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p v =\n    lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v", "by simp"], ["proof (state)\nthis:\n  lookup p v =\n  lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup p v =\n  lookup (higher p (tt p)) v + lookup (monomial (tc p) (tt p)) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma higher_lower_decomp: \"higher p v + monomial (lookup p v) v + lower p v = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. higher p v + monomial (lookup p v) v + lower p v = p", "proof (rule poly_mapping_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       lookup (higher p v + monomial (lookup p v) v + lower p v) k =\n       lookup p k", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       lookup (higher p v + monomial (lookup p v) v + lower p v) k =\n       lookup p k", "show \"lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "proof (rule ord_term_lin.linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\n 2. ?x = ?y \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "assume \"u \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\n 2. ?x = ?y \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "thus ?thesis"], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "by (simp add: lookup_add lookup_higher_when lookup_single lookup_lower_when)"], ["proof (state)\nthis:\n  lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\n\ngoal (2 subgoals):\n 1. u = v \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\n 2. v \\<prec>\\<^sub>t u \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. u = v \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\n 2. v \\<prec>\\<^sub>t u \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "assume \"u = v\""], ["proof (state)\nthis:\n  u = v\n\ngoal (2 subgoals):\n 1. u = v \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\n 2. v \\<prec>\\<^sub>t u \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "thus ?thesis"], ["proof (prove)\nusing this:\n  u = v\n\ngoal (1 subgoal):\n 1. lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "by (simp add: lookup_add lookup_higher_when lookup_single lookup_lower_when)"], ["proof (state)\nthis:\n  lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t u \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t u \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "assume \"v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t u \\<Longrightarrow>\n    lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u", "by (simp add: lookup_add lookup_higher_when lookup_single lookup_lower_when)"], ["proof (state)\nthis:\n  lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (higher p v + monomial (lookup p v) v + lower p v) u = lookup p u\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>@{const tail}\\<close>"], ["", "lemma lookup_tail: \"lookup (tail p) v = (if v \\<prec>\\<^sub>t lt p then lookup p v else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tail p) v =\n    (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b))", "by (simp add: lookup_lower tail_def)"], ["", "lemma lookup_tail_when: \"lookup (tail p) v = (lookup p v when v \\<prec>\\<^sub>t lt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tail p) v = (lookup p v when v \\<prec>\\<^sub>t lt p)", "by (simp add: lookup_lower_when tail_def)"], ["", "lemma lookup_tail_2: \"lookup (tail p) v = (if v = lt p then 0 else lookup p v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "proof (rule ord_term_lin.linorder_cases[of v \"lt p\"])"], ["proof (state)\ngoal (3 subgoals):\n 1. v \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n 2. v = lt p \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n 3. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "assume \"v \\<prec>\\<^sub>t lt p\""], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (3 subgoals):\n 1. v \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n 2. v = lt p \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n 3. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "hence \"v \\<noteq> lt p\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v \\<noteq> lt p", "by simp"], ["proof (state)\nthis:\n  v \\<noteq> lt p\n\ngoal (3 subgoals):\n 1. v \\<prec>\\<^sub>t lt p \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n 2. v = lt p \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n 3. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "from this \\<open>v \\<prec>\\<^sub>t lt p\\<close> lookup_tail[of p v]"], ["proof (chain)\npicking this:\n  v \\<noteq> lt p\n  v \\<prec>\\<^sub>t lt p\n  lookup (tail p) v =\n  (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b))", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<noteq> lt p\n  v \\<prec>\\<^sub>t lt p\n  lookup (tail p) v =\n  (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b))\n\ngoal (1 subgoal):\n 1. lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n 2. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n 2. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "assume \"v = lt p\""], ["proof (state)\nthis:\n  v = lt p\n\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n 2. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "hence \"\\<not> v \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  v = lt p\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  \\<not> v \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n 2. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "from \\<open>v = lt p\\<close> this lookup_tail[of p v]"], ["proof (chain)\npicking this:\n  v = lt p\n  \\<not> v \\<prec>\\<^sub>t lt p\n  lookup (tail p) v =\n  (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b))", "show ?thesis"], ["proof (prove)\nusing this:\n  v = lt p\n  \\<not> v \\<prec>\\<^sub>t lt p\n  lookup (tail p) v =\n  (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b))\n\ngoal (1 subgoal):\n 1. lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "assume \"lt p \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "hence \"\\<not> v \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  \\<not> v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "hence cp: \"lookup p v = 0\""], ["proof (prove)\nusing this:\n  \\<not> v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup p v = (0::'b)", "using lt_max"], ["proof (prove)\nusing this:\n  \\<not> v \\<preceq>\\<^sub>t lt p\n  lookup ?p ?v \\<noteq> (0::?'b) \\<Longrightarrow>\n  ?v \\<preceq>\\<^sub>t lt ?p\n\ngoal (1 subgoal):\n 1. lookup p v = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "from \\<open>\\<not> v \\<preceq>\\<^sub>t lt p\\<close>"], ["proof (chain)\npicking this:\n  \\<not> v \\<preceq>\\<^sub>t lt p", "have \"\\<not> v = lt p\" and \"\\<not> v \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  \\<not> v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v \\<noteq> lt p &&& \\<not> v \\<prec>\\<^sub>t lt p", "by simp_all"], ["proof (state)\nthis:\n  v \\<noteq> lt p\n  \\<not> v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<noteq> lt p\n  \\<not> v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "using cp lookup_tail[of p v]"], ["proof (prove)\nusing this:\n  v \\<noteq> lt p\n  \\<not> v \\<prec>\\<^sub>t lt p\n  lookup p v = (0::'b)\n  lookup (tail p) v =\n  (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b))\n\ngoal (1 subgoal):\n 1. lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) v = (if v = lt p then 0::'b else lookup p v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma leading_monomial_tail: \"p = monomial (lc p) (lt p) + tail p\" for p::\"_ \\<Rightarrow>\\<^sub>0 'b::comm_monoid_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = monomial (lc p) (lt p) + tail p", "proof (rule poly_mapping_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. lookup p k = lookup (monomial (lc p) (lt p) + tail p) k", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. lookup p k = lookup (monomial (lc p) (lt p) + tail p) k", "have \"lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "proof (cases \"v \\<preceq>\\<^sub>t lt p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n 2. \\<not> v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "case True"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n 2. \\<not> v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "proof (cases \"v = lt p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n 2. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "assume \"v = lt p\""], ["proof (state)\nthis:\n  v = lt p\n\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n 2. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "hence \"\\<not> v \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  v = lt p\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  \\<not> v \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n 2. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "hence c3: \"lookup (tail p) v = 0\""], ["proof (prove)\nusing this:\n  \\<not> v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup (tail p) v = (0::'b)", "unfolding lookup_tail[of p v]"], ["proof (prove)\nusing this:\n  \\<not> v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b)) = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) v = (0::'b)\n\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n 2. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "from \\<open>v = lt p\\<close>"], ["proof (chain)\npicking this:\n  v = lt p", "have c2: \"lookup (monomial (lc p) (lt p)) v = lc p\""], ["proof (prove)\nusing this:\n  v = lt p\n\ngoal (1 subgoal):\n 1. lookup (monomial (lc p) (lt p)) v = lc p", "by simp"], ["proof (state)\nthis:\n  lookup (monomial (lc p) (lt p)) v = lc p\n\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n 2. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "from \\<open>v = lt p\\<close>"], ["proof (chain)\npicking this:\n  v = lt p", "have c1: \"lookup p v = lc p\""], ["proof (prove)\nusing this:\n  v = lt p\n\ngoal (1 subgoal):\n 1. lookup p v = lc p", "by (simp add: lc_def)"], ["proof (state)\nthis:\n  lookup p v = lc p\n\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n 2. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "from c1 c2 c3"], ["proof (chain)\npicking this:\n  lookup p v = lc p\n  lookup (monomial (lc p) (lt p)) v = lc p\n  lookup (tail p) v = (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup p v = lc p\n  lookup (monomial (lc p) (lt p)) v = lc p\n  lookup (tail p) v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "by simp"], ["proof (state)\nthis:\n  lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n\ngoal (1 subgoal):\n 1. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "assume \"v \\<noteq> lt p\""], ["proof (state)\nthis:\n  v \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "from this True"], ["proof (chain)\npicking this:\n  v \\<noteq> lt p\n  v \\<preceq>\\<^sub>t lt p", "have \"v \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  v \\<noteq> lt p\n  v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "hence c2: \"lookup (tail p) v = lookup p v\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup (tail p) v = lookup p v", "unfolding lookup_tail[of p v]"], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b)) = lookup p v", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) v = lookup p v\n\ngoal (1 subgoal):\n 1. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "from \\<open>v \\<noteq> lt p\\<close>"], ["proof (chain)\npicking this:\n  v \\<noteq> lt p", "have c1: \"lookup (monomial (lc p) (lt p)) v = 0\""], ["proof (prove)\nusing this:\n  v \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. lookup (monomial (lc p) (lt p)) v = (0::'b)", "by (simp add: lookup_single)"], ["proof (state)\nthis:\n  lookup (monomial (lc p) (lt p)) v = (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<noteq> lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "from c1 c2"], ["proof (chain)\npicking this:\n  lookup (monomial (lc p) (lt p)) v = (0::'b)\n  lookup (tail p) v = lookup p v", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup (monomial (lc p) (lt p)) v = (0::'b)\n  lookup (tail p) v = lookup p v\n\ngoal (1 subgoal):\n 1. lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "by simp"], ["proof (state)\nthis:\n  lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "case False"], ["proof (state)\nthis:\n  \\<not> v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "hence \"lt p \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  \\<not> v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "hence \"lt p \\<noteq> v\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> v", "by simp"], ["proof (state)\nthis:\n  lt p \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "from False"], ["proof (chain)\npicking this:\n  \\<not> v \\<preceq>\\<^sub>t lt p", "have \"\\<not> v \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  \\<not> v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  \\<not> v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "have c1: \"lookup p v = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p v = (0::'b)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup p v \\<noteq> (0::'b) \\<Longrightarrow> False", "assume \"lookup p v \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup p v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p v \\<noteq> (0::'b) \\<Longrightarrow> False", "from lt_max[OF this] False"], ["proof (chain)\npicking this:\n  v \\<preceq>\\<^sub>t lt p\n  \\<not> v \\<preceq>\\<^sub>t lt p", "show False"], ["proof (prove)\nusing this:\n  v \\<preceq>\\<^sub>t lt p\n  \\<not> v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "from \\<open>lt p \\<noteq> v\\<close>"], ["proof (chain)\npicking this:\n  lt p \\<noteq> v", "have c2: \"lookup (monomial (lc p) (lt p)) v = 0\""], ["proof (prove)\nusing this:\n  lt p \\<noteq> v\n\ngoal (1 subgoal):\n 1. lookup (monomial (lc p) (lt p)) v = (0::'b)", "by (simp add: lookup_single)"], ["proof (state)\nthis:\n  lookup (monomial (lc p) (lt p)) v = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "from \\<open>\\<not> v \\<prec>\\<^sub>t lt p\\<close> lookup_tail[of p v]"], ["proof (chain)\npicking this:\n  \\<not> v \\<prec>\\<^sub>t lt p\n  lookup (tail p) v =\n  (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b))", "have c3: \"lookup (tail p) v = 0\""], ["proof (prove)\nusing this:\n  \\<not> v \\<prec>\\<^sub>t lt p\n  lookup (tail p) v =\n  (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b))\n\ngoal (1 subgoal):\n 1. lookup (tail p) v = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) v = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p \\<Longrightarrow>\n    lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "from c1 c2 c3"], ["proof (chain)\npicking this:\n  lookup p v = (0::'b)\n  lookup (monomial (lc p) (lt p)) v = (0::'b)\n  lookup (tail p) v = (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup p v = (0::'b)\n  lookup (monomial (lc p) (lt p)) v = (0::'b)\n  lookup (tail p) v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v", "by simp"], ["proof (state)\nthis:\n  lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n\ngoal (1 subgoal):\n 1. \\<And>k. lookup p k = lookup (monomial (lc p) (lt p) + tail p) k", "thus \"lookup p v = lookup (monomial (lc p) (lt p) + tail p) v\""], ["proof (prove)\nusing this:\n  lookup p v = lookup (monomial (lc p) (lt p)) v + lookup (tail p) v\n\ngoal (1 subgoal):\n 1. lookup p v = lookup (monomial (lc p) (lt p) + tail p) v", "by (simp add: lookup_add)"], ["proof (state)\nthis:\n  lookup p v = lookup (monomial (lc p) (lt p) + tail p) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tail_alt: \"tail p = except p {lt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail p = except p {lt p}", "by (rule poly_mapping_eqI, simp add: lookup_tail_2 lookup_except)"], ["", "corollary tail_alt_2: \"tail p = p - monomial (lc p) (lt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail p = p - monomial (lc p) (lt p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tail p = p - monomial (lc p) (lt p)", "have \"p = monomial (lc p) (lt p) + tail p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = monomial (lc p) (lt p) + tail p", "by (fact leading_monomial_tail)"], ["proof (state)\nthis:\n  p = monomial (lc p) (lt p) + tail p\n\ngoal (1 subgoal):\n 1. tail p = p - monomial (lc p) (lt p)", "also"], ["proof (state)\nthis:\n  p = monomial (lc p) (lt p) + tail p\n\ngoal (1 subgoal):\n 1. tail p = p - monomial (lc p) (lt p)", "have \"... = tail p + monomial (lc p) (lt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial (lc p) (lt p) + tail p = tail p + monomial (lc p) (lt p)", "by (simp only: add.commute)"], ["proof (state)\nthis:\n  monomial (lc p) (lt p) + tail p = tail p + monomial (lc p) (lt p)\n\ngoal (1 subgoal):\n 1. tail p = p - monomial (lc p) (lt p)", "finally"], ["proof (chain)\npicking this:\n  p = tail p + monomial (lc p) (lt p)", "have \"p - monomial (lc p) (lt p) = (tail p + monomial (lc p) (lt p)) - monomial (lc p) (lt p)\""], ["proof (prove)\nusing this:\n  p = tail p + monomial (lc p) (lt p)\n\ngoal (1 subgoal):\n 1. p - monomial (lc p) (lt p) =\n    tail p + monomial (lc p) (lt p) - monomial (lc p) (lt p)", "by simp"], ["proof (state)\nthis:\n  p - monomial (lc p) (lt p) =\n  tail p + monomial (lc p) (lt p) - monomial (lc p) (lt p)\n\ngoal (1 subgoal):\n 1. tail p = p - monomial (lc p) (lt p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  p - monomial (lc p) (lt p) =\n  tail p + monomial (lc p) (lt p) - monomial (lc p) (lt p)\n\ngoal (1 subgoal):\n 1. tail p = p - monomial (lc p) (lt p)", "by simp"], ["proof (state)\nthis:\n  tail p = p - monomial (lc p) (lt p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tail_zero [simp]: \"tail 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail 0 = 0", "by (simp only: tail_alt except_zero)"], ["", "lemma lt_tail:\n  assumes \"tail p \\<noteq> 0\"\n  shows \"lt (tail p) \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (tail p) \\<prec>\\<^sub>t lt p", "proof (intro lt_less)"], ["proof (state)\ngoal (2 subgoals):\n 1. tail p \\<noteq> 0\n 2. \\<And>u.\n       lt p \\<preceq>\\<^sub>t u \\<Longrightarrow>\n       lookup (tail p) u = (0::'b)", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. tail p \\<noteq> 0\n 2. \\<And>u.\n       lt p \\<preceq>\\<^sub>t u \\<Longrightarrow>\n       lookup (tail p) u = (0::'b)", "assume \"lt p \\<preceq>\\<^sub>t u\""], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t u\n\ngoal (2 subgoals):\n 1. tail p \\<noteq> 0\n 2. \\<And>u.\n       lt p \\<preceq>\\<^sub>t u \\<Longrightarrow>\n       lookup (tail p) u = (0::'b)", "hence \"\\<not> u \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<not> u \\<prec>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  \\<not> u \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. tail p \\<noteq> 0\n 2. \\<And>u.\n       lt p \\<preceq>\\<^sub>t u \\<Longrightarrow>\n       lookup (tail p) u = (0::'b)", "thus \"lookup (tail p) u = 0\""], ["proof (prove)\nusing this:\n  \\<not> u \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup (tail p) u = (0::'b)", "unfolding lookup_tail[of p u]"], ["proof (prove)\nusing this:\n  \\<not> u \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. (if u \\<prec>\\<^sub>t lt p then lookup p u else (0::'b)) = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) u = (0::'b)\n\ngoal (1 subgoal):\n 1. tail p \\<noteq> 0", "qed fact"], ["", "lemma keys_tail: \"keys (tail p) = keys p - {lt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (tail p) = keys p - {lt p}", "by (simp add: tail_alt keys_except)"], ["", "lemma tail_monomial: \"tail (monomial c v) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail (monomial c v) = 0", "by (metis (no_types, lifting) lookup_tail_2 lookup_single_not_eq lt_less lt_monomial\n      ord_term_lin.dual_order.strict_implies_not_eq single_zero tail_zero)"], ["", "lemma (in ordered_term) mult_scalar_tail_rec_left:\n  \"p \\<odot> q = monom_mult (punit.lc p) (punit.lt p) q + (punit.tail p) \\<odot> q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<odot> q =\n    monom_mult (punit.lc p) (punit.lt p) q + punit.tail p \\<odot> q", "unfolding punit.lc_def punit.tail_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<odot> q =\n    monom_mult (lookup p (punit.lt p)) (punit.lt p) q +\n    except p {punit.lt p} \\<odot> q", "by (fact mult_scalar_rec_left)"], ["", "lemma mult_scalar_tail_rec_right: \"p \\<odot> q = p \\<odot> monomial (lc q) (lt q) + p \\<odot> tail q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<odot> q = p \\<odot> monomial (lc q) (lt q) + p \\<odot> tail q", "unfolding tail_alt lc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<odot> q =\n    p \\<odot> monomial (lookup q (lt q)) (lt q) + p \\<odot> except q {lt q}", "by (rule mult_scalar_rec_right)"], ["", "lemma lt_tail_max:\n  assumes \"tail p \\<noteq> 0\" and \"v \\<in> keys p\" and \"v \\<prec>\\<^sub>t lt p\"\n  shows \"v \\<preceq>\\<^sub>t lt (tail p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt (tail p)", "proof (rule lt_max_keys, simp add: keys_tail assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> lt p", "from assms(3)"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t lt p", "show \"v \\<noteq> lt p\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v \\<noteq> lt p", "by auto"], ["proof (state)\nthis:\n  v \\<noteq> lt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma keys_tail_less_lt:\n  assumes \"v \\<in> keys (tail p)\"\n  shows \"v \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> keys (tail p)\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "by (meson in_keys_iff lookup_tail)"], ["", "lemma tt_tail:\n  assumes \"tail p \\<noteq> 0\"\n  shows \"tt (tail p) = tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (tail p) = tt p", "proof (rule tt_eqI, simp_all add: keys_tail)"], ["proof (state)\ngoal (2 subgoals):\n 1. tt p \\<in> keys p \\<and> tt p \\<noteq> lt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> u \\<noteq> lt p \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "from assms"], ["proof (chain)\npicking this:\n  tail p \\<noteq> 0", "have \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  tail p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "using tail_zero"], ["proof (prove)\nusing this:\n  tail p \\<noteq> 0\n  tail 0 = 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. tt p \\<in> keys p \\<and> tt p \\<noteq> lt p\n 2. \\<And>u.\n       u \\<in> keys p \\<and> u \\<noteq> lt p \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "show \"tt p \\<in> keys p \\<and> tt p \\<noteq> lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<in> keys p \\<and> tt p \\<noteq> lt p", "proof (rule conjI, rule tt_in_keys, fact)"], ["proof (state)\ngoal (1 subgoal):\n 1. tt p \\<noteq> lt p", "have \"tt p \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t lt p", "by (metis assms lower_eq_zero_iff' tail_def ord_term_lin.le_less_linear)"], ["proof (state)\nthis:\n  tt p \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. tt p \\<noteq> lt p", "thus \"tt p \\<noteq> lt p\""], ["proof (prove)\nusing this:\n  tt p \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. tt p \\<noteq> lt p", "by simp"], ["proof (state)\nthis:\n  tt p \\<noteq> lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tt p \\<in> keys p \\<and> tt p \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys p \\<and> u \\<noteq> lt p \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys p \\<and> u \\<noteq> lt p \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys p \\<and> u \\<noteq> lt p \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "assume \"u \\<in> keys p \\<and> u \\<noteq> lt p\""], ["proof (state)\nthis:\n  u \\<in> keys p \\<and> u \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys p \\<and> u \\<noteq> lt p \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "hence \"u \\<in> keys p\""], ["proof (prove)\nusing this:\n  u \\<in> keys p \\<and> u \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. u \\<in> keys p", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys p \\<and> u \\<noteq> lt p \\<Longrightarrow>\n       tt p \\<preceq>\\<^sub>t u", "thus \"tt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t u", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tc_tail:\n  assumes \"tail p \\<noteq> 0\"\n  shows \"tc (tail p) = tc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (tail p) = tc p", "proof (simp add: tc_def tt_tail[OF assms] lookup_tail_2, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. tt p = lt p \\<Longrightarrow> lookup p (lt p) = (0::'b)", "assume \"tt p = lt p\""], ["proof (state)\nthis:\n  tt p = lt p\n\ngoal (1 subgoal):\n 1. tt p = lt p \\<Longrightarrow> lookup p (lt p) = (0::'b)", "moreover"], ["proof (state)\nthis:\n  tt p = lt p\n\ngoal (1 subgoal):\n 1. tt p = lt p \\<Longrightarrow> lookup p (lt p) = (0::'b)", "have \"tt p \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t lt p", "by (metis assms lower_eq_zero_iff' tail_def ord_term_lin.le_less_linear)"], ["proof (state)\nthis:\n  tt p \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. tt p = lt p \\<Longrightarrow> lookup p (lt p) = (0::'b)", "ultimately"], ["proof (chain)\npicking this:\n  tt p = lt p\n  tt p \\<prec>\\<^sub>t lt p", "show \"lookup p (lt p) = 0\""], ["proof (prove)\nusing this:\n  tt p = lt p\n  tt p \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup p (lt p) = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup p (lt p) = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_tail_min:\n  assumes \"s \\<in> keys p\"\n  shows \"tt (tail p) \\<preceq>\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (tail p) \\<preceq>\\<^sub>t s", "proof (cases \"tail p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. tail p = 0 \\<Longrightarrow> tt (tail p) \\<preceq>\\<^sub>t s\n 2. tail p \\<noteq> 0 \\<Longrightarrow> tt (tail p) \\<preceq>\\<^sub>t s", "case True"], ["proof (state)\nthis:\n  tail p = 0\n\ngoal (2 subgoals):\n 1. tail p = 0 \\<Longrightarrow> tt (tail p) \\<preceq>\\<^sub>t s\n 2. tail p \\<noteq> 0 \\<Longrightarrow> tt (tail p) \\<preceq>\\<^sub>t s", "hence \"tt (tail p) = min_term\""], ["proof (prove)\nusing this:\n  tail p = 0\n\ngoal (1 subgoal):\n 1. tt (tail p) = min_term", "by (simp add: tt_def)"], ["proof (state)\nthis:\n  tt (tail p) = min_term\n\ngoal (2 subgoals):\n 1. tail p = 0 \\<Longrightarrow> tt (tail p) \\<preceq>\\<^sub>t s\n 2. tail p \\<noteq> 0 \\<Longrightarrow> tt (tail p) \\<preceq>\\<^sub>t s", "thus ?thesis"], ["proof (prove)\nusing this:\n  tt (tail p) = min_term\n\ngoal (1 subgoal):\n 1. tt (tail p) \\<preceq>\\<^sub>t s", "by (simp add: min_term_min)"], ["proof (state)\nthis:\n  tt (tail p) \\<preceq>\\<^sub>t s\n\ngoal (1 subgoal):\n 1. tail p \\<noteq> 0 \\<Longrightarrow> tt (tail p) \\<preceq>\\<^sub>t s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. tail p \\<noteq> 0 \\<Longrightarrow> tt (tail p) \\<preceq>\\<^sub>t s", "case False"], ["proof (state)\nthis:\n  tail p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tail p \\<noteq> 0 \\<Longrightarrow> tt (tail p) \\<preceq>\\<^sub>t s", "from assms"], ["proof (chain)\npicking this:\n  s \\<in> keys p", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt (tail p) \\<preceq>\\<^sub>t s", "by (simp add: tt_tail[OF False], rule tt_min_keys)"], ["proof (state)\nthis:\n  tt (tail p) \\<preceq>\\<^sub>t s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tail_monom_mult:\n  \"tail (monom_mult c t p) = monom_mult (c::'b::semiring_no_zero_divisors) t (tail p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail (monom_mult c t p) = monom_mult c t (tail p)", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "hence \"tail p = 0\" and \"monom_mult c t p = 0\""], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. tail p = 0 &&& monom_mult c t p = 0", "by simp_all"], ["proof (state)\nthis:\n  tail p = 0\n  monom_mult c t p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  tail p = 0\n  monom_mult c t p = 0\n\ngoal (1 subgoal):\n 1. tail (monom_mult c t p) = monom_mult c t (tail p)", "by simp"], ["proof (state)\nthis:\n  tail (monom_mult c t p) = monom_mult c t (tail p)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tail (monom_mult c t p) = monom_mult c t (tail p)", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "case True"], ["proof (state)\nthis:\n  c = (0::'b)\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "hence \"monom_mult c t p = 0\" and \"monom_mult c t (tail p) = 0\""], ["proof (prove)\nusing this:\n  c = (0::'b)\n\ngoal (1 subgoal):\n 1. monom_mult c t p = 0 &&& monom_mult c t (tail p) = 0", "by simp_all"], ["proof (state)\nthis:\n  monom_mult c t p = 0\n  monom_mult c t (tail p) = 0\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  monom_mult c t p = 0\n  monom_mult c t (tail p) = 0\n\ngoal (1 subgoal):\n 1. tail (monom_mult c t p) = monom_mult c t (tail p)", "by simp"], ["proof (state)\nthis:\n  tail (monom_mult c t p) = monom_mult c t (tail p)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "case False"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "let ?a = \"monom_mult c t p\""], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "let ?b = \"monom_mult c t (tail p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "from \\<open>p \\<noteq> 0\\<close> False"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  c \\<noteq> (0::'b)", "have \"?a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. monom_mult c t p \\<noteq> 0", "by (simp add: monom_mult_eq_zero_iff)"], ["proof (state)\nthis:\n  monom_mult c t p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "from False \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0", "have lt_a: \"lt ?a = t \\<oplus> lt p\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt (monom_mult c t p) = t \\<oplus> lt p", "by (rule lt_monom_mult)"], ["proof (state)\nthis:\n  lt (monom_mult c t p) = t \\<oplus> lt p\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    tail (monom_mult c t p) = monom_mult c t (tail p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tail (monom_mult c t p) = monom_mult c t (tail p)", "proof (rule poly_mapping_eqI, simp add: lookup_tail lt_a, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<prec>\\<^sub>t t \\<oplus> lt p \\<Longrightarrow>\n       lookup (monom_mult c t p) k = lookup (monom_mult c t (tail p)) k\n 2. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t t \\<oplus> lt p \\<Longrightarrow>\n       lookup (monom_mult c t (tail p)) k = (0::'b)", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<prec>\\<^sub>t t \\<oplus> lt p \\<Longrightarrow>\n       lookup (monom_mult c t p) k = lookup (monom_mult c t (tail p)) k\n 2. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t t \\<oplus> lt p \\<Longrightarrow>\n       lookup (monom_mult c t (tail p)) k = (0::'b)", "assume \"u \\<prec>\\<^sub>t t \\<oplus> lt p\""], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t t \\<oplus> lt p\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<prec>\\<^sub>t t \\<oplus> lt p \\<Longrightarrow>\n       lookup (monom_mult c t p) k = lookup (monom_mult c t (tail p)) k\n 2. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t t \\<oplus> lt p \\<Longrightarrow>\n       lookup (monom_mult c t (tail p)) k = (0::'b)", "show \"lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "proof (cases \"t adds\\<^sub>p u\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u\n 2. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "case True"], ["proof (state)\nthis:\n  t adds\\<^sub>p u\n\ngoal (2 subgoals):\n 1. t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u\n 2. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "then"], ["proof (chain)\npicking this:\n  t adds\\<^sub>p u", "obtain v where \"u = t \\<oplus> v\""], ["proof (prove)\nusing this:\n  t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. (\\<And>v. u = t \\<oplus> v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule adds_ppE)"], ["proof (state)\nthis:\n  u = t \\<oplus> v\n\ngoal (2 subgoals):\n 1. t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u\n 2. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "from \\<open>u \\<prec>\\<^sub>t t \\<oplus> lt p\\<close>"], ["proof (chain)\npicking this:\n  u \\<prec>\\<^sub>t t \\<oplus> lt p", "have \"v \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t t \\<oplus> lt p\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "unfolding \\<open>u = t \\<oplus> v\\<close>"], ["proof (prove)\nusing this:\n  t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> lt p\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "by (rule ord_term_strict_canc)"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u\n 2. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "hence \"lookup p v = lookup (tail p) v\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup p v = lookup (tail p) v", "by (simp add: lookup_tail)"], ["proof (state)\nthis:\n  lookup p v = lookup (tail p) v\n\ngoal (2 subgoals):\n 1. t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u\n 2. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "thus ?thesis"], ["proof (prove)\nusing this:\n  lookup p v = lookup (tail p) v\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "by (simp add: \\<open>u = t \\<oplus> v\\<close> lookup_monom_mult_plus)"], ["proof (state)\nthis:\n  lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u\n\ngoal (1 subgoal):\n 1. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "case False"], ["proof (state)\nthis:\n  \\<not> t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "hence \"lookup ?a u = 0\""], ["proof (prove)\nusing this:\n  \\<not> t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c t p) u = (0::'b)", "by (simp add: lookup_monom_mult)"], ["proof (state)\nthis:\n  lookup (monom_mult c t p) u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "moreover"], ["proof (state)\nthis:\n  lookup (monom_mult c t p) u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "have \"lookup ?b u = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (monom_mult c t (tail p)) u = (0::'b)", "proof (rule ccontr, simp only: in_keys_iff[symmetric] keys_monom_mult[OF \\<open>c \\<noteq> 0\\<close>])"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> (\\<oplus>) t ` keys (tail p) \\<Longrightarrow> False", "assume \"u \\<in> (\\<oplus>) t ` keys (tail p)\""], ["proof (state)\nthis:\n  u \\<in> (\\<oplus>) t ` keys (tail p)\n\ngoal (1 subgoal):\n 1. u \\<in> (\\<oplus>) t ` keys (tail p) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  u \\<in> (\\<oplus>) t ` keys (tail p)", "obtain v where \"u = t \\<oplus> v\""], ["proof (prove)\nusing this:\n  u \\<in> (\\<oplus>) t ` keys (tail p)\n\ngoal (1 subgoal):\n 1. (\\<And>v. u = t \\<oplus> v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  u = t \\<oplus> v\n\ngoal (1 subgoal):\n 1. u \\<in> (\\<oplus>) t ` keys (tail p) \\<Longrightarrow> False", "hence \"t adds\\<^sub>p u\""], ["proof (prove)\nusing this:\n  u = t \\<oplus> v\n\ngoal (1 subgoal):\n 1. t adds\\<^sub>p u", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. u \\<in> (\\<oplus>) t ` keys (tail p) \\<Longrightarrow> False", "with False"], ["proof (chain)\npicking this:\n  \\<not> t adds\\<^sub>p u\n  t adds\\<^sub>p u", "show False"], ["proof (prove)\nusing this:\n  \\<not> t adds\\<^sub>p u\n  t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (monom_mult c t (tail p)) u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "ultimately"], ["proof (chain)\npicking this:\n  lookup (monom_mult c t p) u = (0::'b)\n  lookup (monom_mult c t (tail p)) u = (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup (monom_mult c t p) u = (0::'b)\n  lookup (monom_mult c t (tail p)) u = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u", "by simp"], ["proof (state)\nthis:\n  lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (monom_mult c t p) u = lookup (monom_mult c t (tail p)) u\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t t \\<oplus> lt p \\<Longrightarrow>\n       lookup (monom_mult c t (tail p)) k = (0::'b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t t \\<oplus> lt p \\<Longrightarrow>\n       lookup (monom_mult c t (tail p)) k = (0::'b)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t t \\<oplus> lt p \\<Longrightarrow>\n       lookup (monom_mult c t (tail p)) k = (0::'b)", "assume \"\\<not> u \\<prec>\\<^sub>t t \\<oplus> lt p\""], ["proof (state)\nthis:\n  \\<not> u \\<prec>\\<^sub>t t \\<oplus> lt p\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t t \\<oplus> lt p \\<Longrightarrow>\n       lookup (monom_mult c t (tail p)) k = (0::'b)", "hence \"t \\<oplus> lt p \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  \\<not> u \\<prec>\\<^sub>t t \\<oplus> lt p\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt p \\<preceq>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  t \\<oplus> lt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> k \\<prec>\\<^sub>t t \\<oplus> lt p \\<Longrightarrow>\n       lookup (monom_mult c t (tail p)) k = (0::'b)", "show \"lookup (monom_mult c t (tail p)) u = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (monom_mult c t (tail p)) u = (0::'b)", "proof (rule ccontr, simp only: in_keys_iff[symmetric] keys_monom_mult[OF False])"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> (\\<oplus>) t ` keys (tail p) \\<Longrightarrow> False", "assume \"u \\<in> (\\<oplus>) t ` keys (tail p)\""], ["proof (state)\nthis:\n  u \\<in> (\\<oplus>) t ` keys (tail p)\n\ngoal (1 subgoal):\n 1. u \\<in> (\\<oplus>) t ` keys (tail p) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  u \\<in> (\\<oplus>) t ` keys (tail p)", "obtain v where \"v \\<in> keys (tail p)\" and \"u = t \\<oplus> v\""], ["proof (prove)\nusing this:\n  u \\<in> (\\<oplus>) t ` keys (tail p)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys (tail p); u = t \\<oplus> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v \\<in> keys (tail p)\n  u = t \\<oplus> v\n\ngoal (1 subgoal):\n 1. u \\<in> (\\<oplus>) t ` keys (tail p) \\<Longrightarrow> False", "from \\<open>t \\<oplus> lt p \\<preceq>\\<^sub>t u\\<close>"], ["proof (chain)\npicking this:\n  t \\<oplus> lt p \\<preceq>\\<^sub>t u", "have \"lt p \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  t \\<oplus> lt p \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v", "unfolding \\<open>u = t \\<oplus> v\\<close>"], ["proof (prove)\nusing this:\n  t \\<oplus> lt p \\<preceq>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t v", "by (rule ord_term_canc)"], ["proof (state)\nthis:\n  lt p \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. u \\<in> (\\<oplus>) t ` keys (tail p) \\<Longrightarrow> False", "from \\<open>v \\<in> keys (tail p)\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> keys (tail p)", "have \"v \\<in> keys p\" and \"v \\<noteq> lt p\""], ["proof (prove)\nusing this:\n  v \\<in> keys (tail p)\n\ngoal (1 subgoal):\n 1. v \\<in> keys p &&& v \\<noteq> lt p", "by (simp_all add: keys_tail)"], ["proof (state)\nthis:\n  v \\<in> keys p\n  v \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. u \\<in> (\\<oplus>) t ` keys (tail p) \\<Longrightarrow> False", "from \\<open>v \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> keys p", "have \"v \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "by (rule lt_max_keys)"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. u \\<in> (\\<oplus>) t ` keys (tail p) \\<Longrightarrow> False", "with \\<open>lt p \\<preceq>\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  lt p \\<preceq>\\<^sub>t v\n  v \\<preceq>\\<^sub>t lt p", "have \"v = lt p \""], ["proof (prove)\nusing this:\n  lt p \\<preceq>\\<^sub>t v\n  v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v = lt p", "by simp"], ["proof (state)\nthis:\n  v = lt p\n\ngoal (1 subgoal):\n 1. u \\<in> (\\<oplus>) t ` keys (tail p) \\<Longrightarrow> False", "with \\<open>v \\<noteq> lt p\\<close>"], ["proof (chain)\npicking this:\n  v \\<noteq> lt p\n  v = lt p", "show False"], ["proof (prove)\nusing this:\n  v \\<noteq> lt p\n  v = lt p\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (monom_mult c t (tail p)) u = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tail (monom_mult c t p) = monom_mult c t (tail p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tail (monom_mult c t p) = monom_mult c t (tail p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma keys_plus_eq_lt_tt_D:\n  assumes \"keys (p + q) = {lt p, tt q}\" and \"lt q \\<prec>\\<^sub>t lt p\" and \"tt q \\<prec>\\<^sub>t tt (p::_ \\<Rightarrow>\\<^sub>0 'b::comm_monoid_add)\"\n  shows \"tail p + higher q (tt q) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "note assms(3)"], ["proof (state)\nthis:\n  tt q \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "also"], ["proof (state)\nthis:\n  tt q \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "have \"... \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t lt p", "by (rule lt_ge_tt)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "finally"], ["proof (chain)\npicking this:\n  tt q \\<prec>\\<^sub>t lt p", "have \"tt q \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  tt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. tt q \\<prec>\\<^sub>t lt p", "."], ["proof (state)\nthis:\n  tt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "hence \"lt p \\<noteq> tt q\""], ["proof (prove)\nusing this:\n  tt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> tt q", "by simp"], ["proof (state)\nthis:\n  lt p \\<noteq> tt q\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "have \"q \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "assume \"q = 0\""], ["proof (state)\nthis:\n  q = 0\n\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "hence \"tt q = min_term\""], ["proof (prove)\nusing this:\n  q = 0\n\ngoal (1 subgoal):\n 1. tt q = min_term", "by (simp add: tt_def)"], ["proof (state)\nthis:\n  tt q = min_term\n\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "with \\<open>q = 0\\<close> assms(1)"], ["proof (chain)\npicking this:\n  q = 0\n  keys (p + q) = {lt p, tt q}\n  tt q = min_term", "have \"keys p = {lt p, min_term}\""], ["proof (prove)\nusing this:\n  q = 0\n  keys (p + q) = {lt p, tt q}\n  tt q = min_term\n\ngoal (1 subgoal):\n 1. keys p = {lt p, min_term}", "by simp"], ["proof (state)\nthis:\n  keys p = {lt p, min_term}\n\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "hence \"min_term \\<in> keys p\""], ["proof (prove)\nusing this:\n  keys p = {lt p, min_term}\n\ngoal (1 subgoal):\n 1. min_term \\<in> keys p", "by simp"], ["proof (state)\nthis:\n  min_term \\<in> keys p\n\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "hence \"tt p \\<preceq>\\<^sub>t tt q\""], ["proof (prove)\nusing this:\n  min_term \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t tt q", "unfolding \\<open>tt q = min_term\\<close>"], ["proof (prove)\nusing this:\n  min_term \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t min_term", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t tt q\n\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "with assms(3)"], ["proof (chain)\npicking this:\n  tt q \\<prec>\\<^sub>t tt p\n  tt p \\<preceq>\\<^sub>t tt q", "show False"], ["proof (prove)\nusing this:\n  tt q \\<prec>\\<^sub>t tt p\n  tt p \\<preceq>\\<^sub>t tt q\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "hence \"tc q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tc q \\<noteq> (0::'b)", "by (rule tc_not_0)"], ["proof (state)\nthis:\n  tc q \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "have \"p = monomial (lc p) (lt p) + tail p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = monomial (lc p) (lt p) + tail p", "by (rule leading_monomial_tail)"], ["proof (state)\nthis:\n  p = monomial (lc p) (lt p) + tail p\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "moreover"], ["proof (state)\nthis:\n  p = monomial (lc p) (lt p) + tail p\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "from \\<open>q \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  q \\<noteq> 0", "have \"q = higher q (tt q) + monomial (tc q) (tt q)\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q = higher q (tt q) + monomial (tc q) (tt q)", "by (rule trailing_monomial_higher)"], ["proof (state)\nthis:\n  q = higher q (tt q) + monomial (tc q) (tt q)\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "ultimately"], ["proof (chain)\npicking this:\n  p = monomial (lc p) (lt p) + tail p\n  q = higher q (tt q) + monomial (tc q) (tt q)", "have pq: \"p + q = (monomial (lc p) (lt p) + monomial (tc q) (tt q)) + (tail p + higher q (tt q))\"\n    (is \"_ = (?m1 + ?m2) + ?b\")"], ["proof (prove)\nusing this:\n  p = monomial (lc p) (lt p) + tail p\n  q = higher q (tt q) + monomial (tc q) (tt q)\n\ngoal (1 subgoal):\n 1. p + q =\n    monomial (lc p) (lt p) + monomial (tc q) (tt q) +\n    (tail p + higher q (tt q))", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  p + q =\n  monomial (lc p) (lt p) + monomial (tc q) (tt q) +\n  (tail p + higher q (tt q))\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "have keys_m1: \"keys ?m1 = {lt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (monomial (lc p) (lt p)) = {lt p}", "proof (rule keys_of_monomial, rule lc_not_0, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow> False", "assume \"p = 0\""], ["proof (state)\nthis:\n  p = 0\n\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow> False", "with assms(2)"], ["proof (chain)\npicking this:\n  lt q \\<prec>\\<^sub>t lt p\n  p = 0", "have \"lt q \\<prec>\\<^sub>t min_term\""], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t lt p\n  p = 0\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t min_term", "by (simp add: lt_def)"], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t min_term\n\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow> False", "with min_term_min[of \"lt q\"]"], ["proof (chain)\npicking this:\n  min_term \\<preceq>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t min_term", "show False"], ["proof (prove)\nusing this:\n  min_term \\<preceq>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t min_term\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  keys (monomial (lc p) (lt p)) = {lt p}\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "moreover"], ["proof (state)\nthis:\n  keys (monomial (lc p) (lt p)) = {lt p}\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "from \\<open>tc q \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  tc q \\<noteq> (0::'b)", "have keys_m2: \"keys ?m2 = {tt q}\""], ["proof (prove)\nusing this:\n  tc q \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. keys (monomial (tc q) (tt q)) = {tt q}", "by (rule keys_of_monomial)"], ["proof (state)\nthis:\n  keys (monomial (tc q) (tt q)) = {tt q}\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "ultimately"], ["proof (chain)\npicking this:\n  keys (monomial (lc p) (lt p)) = {lt p}\n  keys (monomial (tc q) (tt q)) = {tt q}", "have keys_m1_m2: \"keys (?m1 + ?m2) = {lt p, tt q}\""], ["proof (prove)\nusing this:\n  keys (monomial (lc p) (lt p)) = {lt p}\n  keys (monomial (tc q) (tt q)) = {tt q}\n\ngoal (1 subgoal):\n 1. keys (monomial (lc p) (lt p) + monomial (tc q) (tt q)) = {lt p, tt q}", "using \\<open>lt p \\<noteq> tt q\\<close> keys_plus_eqI[of ?m1 ?m2]"], ["proof (prove)\nusing this:\n  keys (monomial (lc p) (lt p)) = {lt p}\n  keys (monomial (tc q) (tt q)) = {tt q}\n  lt p \\<noteq> tt q\n  keys (monomial (lc p) (lt p)) \\<inter> keys (monomial (tc q) (tt q)) =\n  {} \\<Longrightarrow>\n  keys (monomial (lc p) (lt p) + monomial (tc q) (tt q)) =\n  keys (monomial (lc p) (lt p)) \\<union> keys (monomial (tc q) (tt q))\n\ngoal (1 subgoal):\n 1. keys (monomial (lc p) (lt p) + monomial (tc q) (tt q)) = {lt p, tt q}", "by auto"], ["proof (state)\nthis:\n  keys (monomial (lc p) (lt p) + monomial (tc q) (tt q)) = {lt p, tt q}\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) = 0", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) \\<noteq> 0 \\<Longrightarrow> False", "assume \"?b \\<noteq> 0\""], ["proof (state)\nthis:\n  tail p + higher q (tt q) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) \\<noteq> 0 \\<Longrightarrow> False", "hence \"keys ?b \\<noteq> {}\""], ["proof (prove)\nusing this:\n  tail p + higher q (tt q) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys (tail p + higher q (tt q)) \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  keys (tail p + higher q (tt q)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) \\<noteq> 0 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  keys (tail p + higher q (tt q)) \\<noteq> {}", "obtain t where \"t \\<in> keys ?b\""], ["proof (prove)\nusing this:\n  keys (tail p + higher q (tt q)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        t \\<in> keys (tail p + higher q (tt q)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t \\<in> keys (tail p + higher q (tt q))\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) \\<noteq> 0 \\<Longrightarrow> False", "hence t_in: \"t \\<in> keys (tail p) \\<union> keys (higher q (tt q))\""], ["proof (prove)\nusing this:\n  t \\<in> keys (tail p + higher q (tt q))\n\ngoal (1 subgoal):\n 1. t \\<in> keys (tail p) \\<union> keys (higher q (tt q))", "using Poly_Mapping.keys_add[of \"tail p\" \"higher q (tt q)\"]"], ["proof (prove)\nusing this:\n  t \\<in> keys (tail p + higher q (tt q))\n  keys (tail p + higher q (tt q))\n  \\<subseteq> keys (tail p) \\<union> keys (higher q (tt q))\n\ngoal (1 subgoal):\n 1. t \\<in> keys (tail p) \\<union> keys (higher q (tt q))", "by blast"], ["proof (state)\nthis:\n  t \\<in> keys (tail p) \\<union> keys (higher q (tt q))\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) \\<noteq> 0 \\<Longrightarrow> False", "hence \"t \\<noteq> lt p\""], ["proof (prove)\nusing this:\n  t \\<in> keys (tail p) \\<union> keys (higher q (tt q))\n\ngoal (1 subgoal):\n 1. t \\<noteq> lt p", "proof (rule, simp add: keys_tail, simp add: keys_higher, elim conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> keys (tail p) \\<union> keys (higher q (tt q));\n     t \\<in> keys q; tt q \\<prec>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> t \\<noteq> lt p", "assume \"t \\<in> keys q\""], ["proof (state)\nthis:\n  t \\<in> keys q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> keys (tail p) \\<union> keys (higher q (tt q));\n     t \\<in> keys q; tt q \\<prec>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> t \\<noteq> lt p", "hence \"t \\<preceq>\\<^sub>t lt q\""], ["proof (prove)\nusing this:\n  t \\<in> keys q\n\ngoal (1 subgoal):\n 1. t \\<preceq>\\<^sub>t lt q", "by (rule lt_max_keys)"], ["proof (state)\nthis:\n  t \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> keys (tail p) \\<union> keys (higher q (tt q));\n     t \\<in> keys q; tt q \\<prec>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> t \\<noteq> lt p", "from this assms(2)"], ["proof (chain)\npicking this:\n  t \\<preceq>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t lt p", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<preceq>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. t \\<noteq> lt p", "by simp"], ["proof (state)\nthis:\n  t \\<noteq> lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) \\<noteq> 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  t \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) \\<noteq> 0 \\<Longrightarrow> False", "from t_in"], ["proof (chain)\npicking this:\n  t \\<in> keys (tail p) \\<union> keys (higher q (tt q))", "have \"t \\<noteq> tt q\""], ["proof (prove)\nusing this:\n  t \\<in> keys (tail p) \\<union> keys (higher q (tt q))\n\ngoal (1 subgoal):\n 1. t \\<noteq> tt q", "proof (rule, simp add: keys_tail, elim conjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> keys (tail p) \\<union> keys (higher q (tt q));\n     t \\<in> keys p; t \\<noteq> lt p\\<rbrakk>\n    \\<Longrightarrow> t \\<noteq> tt q\n 2. t \\<in> keys (higher q (tt q)) \\<Longrightarrow> t \\<noteq> tt q", "assume \"t \\<in> keys p\""], ["proof (state)\nthis:\n  t \\<in> keys p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> keys (tail p) \\<union> keys (higher q (tt q));\n     t \\<in> keys p; t \\<noteq> lt p\\<rbrakk>\n    \\<Longrightarrow> t \\<noteq> tt q\n 2. t \\<in> keys (higher q (tt q)) \\<Longrightarrow> t \\<noteq> tt q", "hence \"tt p \\<preceq>\\<^sub>t t\""], ["proof (prove)\nusing this:\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. tt p \\<preceq>\\<^sub>t t", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt p \\<preceq>\\<^sub>t t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> keys (tail p) \\<union> keys (higher q (tt q));\n     t \\<in> keys p; t \\<noteq> lt p\\<rbrakk>\n    \\<Longrightarrow> t \\<noteq> tt q\n 2. t \\<in> keys (higher q (tt q)) \\<Longrightarrow> t \\<noteq> tt q", "with assms(3)"], ["proof (chain)\npicking this:\n  tt q \\<prec>\\<^sub>t tt p\n  tt p \\<preceq>\\<^sub>t t", "show ?thesis"], ["proof (prove)\nusing this:\n  tt q \\<prec>\\<^sub>t tt p\n  tt p \\<preceq>\\<^sub>t t\n\ngoal (1 subgoal):\n 1. t \\<noteq> tt q", "by simp"], ["proof (state)\nthis:\n  t \\<noteq> tt q\n\ngoal (1 subgoal):\n 1. t \\<in> keys (higher q (tt q)) \\<Longrightarrow> t \\<noteq> tt q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> keys (higher q (tt q)) \\<Longrightarrow> t \\<noteq> tt q", "assume \"t \\<in> keys (higher q (tt q))\""], ["proof (state)\nthis:\n  t \\<in> keys (higher q (tt q))\n\ngoal (1 subgoal):\n 1. t \\<in> keys (higher q (tt q)) \\<Longrightarrow> t \\<noteq> tt q", "thus ?thesis"], ["proof (prove)\nusing this:\n  t \\<in> keys (higher q (tt q))\n\ngoal (1 subgoal):\n 1. t \\<noteq> tt q", "by (auto simp only: keys_higher)"], ["proof (state)\nthis:\n  t \\<noteq> tt q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<noteq> tt q\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) \\<noteq> 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  t \\<noteq> lt p\n  t \\<noteq> tt q", "have \"t \\<notin> keys (?m1 + ?m2)\""], ["proof (prove)\nusing this:\n  t \\<noteq> lt p\n  t \\<noteq> tt q\n\ngoal (1 subgoal):\n 1. t \\<notin> keys (monomial (lc p) (lt p) + monomial (tc q) (tt q))", "by (simp add: keys_m1_m2)"], ["proof (state)\nthis:\n  t \\<notin> keys (monomial (lc p) (lt p) + monomial (tc q) (tt q))\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) \\<noteq> 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  t \\<notin> keys (monomial (lc p) (lt p) + monomial (tc q) (tt q))\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) \\<noteq> 0 \\<Longrightarrow> False", "from in_keys_plusI2[OF \\<open>t \\<in> keys ?b\\<close> this]"], ["proof (chain)\npicking this:\n  t \\<in> keys\n           (monomial (lc p) (lt p) + monomial (tc q) (tt q) +\n            (tail p + higher q (tt q)))", "have \"t \\<in> keys (?m1 + ?m2)\""], ["proof (prove)\nusing this:\n  t \\<in> keys\n           (monomial (lc p) (lt p) + monomial (tc q) (tt q) +\n            (tail p + higher q (tt q)))\n\ngoal (1 subgoal):\n 1. t \\<in> keys (monomial (lc p) (lt p) + monomial (tc q) (tt q))", "by (simp only: keys_m1_m2 pq[symmetric] assms(1))"], ["proof (state)\nthis:\n  t \\<in> keys (monomial (lc p) (lt p) + monomial (tc q) (tt q))\n\ngoal (1 subgoal):\n 1. tail p + higher q (tt q) \\<noteq> 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  t \\<notin> keys (monomial (lc p) (lt p) + monomial (tc q) (tt q))\n  t \\<in> keys (monomial (lc p) (lt p) + monomial (tc q) (tt q))", "show False"], ["proof (prove)\nusing this:\n  t \\<notin> keys (monomial (lc p) (lt p) + monomial (tc q) (tt q))\n  t \\<in> keys (monomial (lc p) (lt p) + monomial (tc q) (tt q))\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tail p + higher q (tt q) = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Order Relation on Polynomials\\<close>"], ["", "definition ord_strict_p :: \"('t \\<Rightarrow>\\<^sub>0 'b::zero) \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> bool\" (infixl \"\\<prec>\\<^sub>p\" 50) where\n  \"p \\<prec>\\<^sub>p q \\<longleftrightarrow> (\\<exists>v. lookup p v = 0 \\<and> lookup q v \\<noteq> 0 \\<and> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u))\""], ["", "definition ord_p :: \"('t \\<Rightarrow>\\<^sub>0 'b::zero) \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> bool\" (infixl \"\\<preceq>\\<^sub>p\" 50) where\n  \"ord_p p q \\<equiv> (p \\<prec>\\<^sub>p q \\<or> p = q)\""], ["", "lemma ord_strict_pI:\n  assumes \"lookup p v = 0\" and \"lookup q v \\<noteq> 0\" and \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\"\n  shows \"p \\<prec>\\<^sub>p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "unfolding ord_strict_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup p v = (0::'b) \\<and>\n       lookup q v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)", "using assms"], ["proof (prove)\nusing this:\n  lookup p v = (0::'b)\n  lookup q v \\<noteq> (0::'b)\n  v \\<prec>\\<^sub>t ?u22 \\<Longrightarrow> lookup p ?u22 = lookup q ?u22\n\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup p v = (0::'b) \\<and>\n       lookup q v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)", "by blast"], ["", "lemma ord_strict_pE:\n  assumes \"p \\<prec>\\<^sub>p q\"\n  obtains v where \"lookup p v = 0\" and \"lookup q v \\<noteq> 0\" and \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup p v = (0::'b); lookup q v \\<noteq> (0::'b);\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup p v = (0::'b); lookup q v \\<noteq> (0::'b);\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ord_strict_p_def"], ["proof (prove)\nusing this:\n  \\<exists>v.\n     lookup p v = (0::'b) \\<and>\n     lookup q v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup p v = (0::'b); lookup q v \\<noteq> (0::'b);\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma not_ord_pI:\n  assumes \"lookup p v \\<noteq> lookup q v\" and \"lookup p v \\<noteq> 0\" and \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\"\n  shows \"\\<not> p \\<preceq>\\<^sub>p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p \\<preceq>\\<^sub>p q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<preceq>\\<^sub>p q \\<Longrightarrow> False", "assume \"p \\<preceq>\\<^sub>p q\""], ["proof (state)\nthis:\n  p \\<preceq>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. p \\<preceq>\\<^sub>p q \\<Longrightarrow> False", "hence \"p \\<prec>\\<^sub>p q \\<or> p = q\""], ["proof (prove)\nusing this:\n  p \\<preceq>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q \\<or> p = q", "by (simp only: ord_p_def)"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p q \\<or> p = q\n\ngoal (1 subgoal):\n 1. p \\<preceq>\\<^sub>p q \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p q \\<or> p = q\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<prec>\\<^sub>p q \\<Longrightarrow> False\n 2. p = q \\<Longrightarrow> False", "assume \"p \\<prec>\\<^sub>p q\""], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p q\n\ngoal (2 subgoals):\n 1. p \\<prec>\\<^sub>p q \\<Longrightarrow> False\n 2. p = q \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  p \\<prec>\\<^sub>p q", "obtain v' where 1: \"lookup p v' = 0\" and 2: \"lookup q v' \\<noteq> 0\"\n      and 3: \"\\<And>u. v' \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>lookup p v' = (0::'b); lookup q v' \\<noteq> (0::'b);\n         \\<And>u.\n            v' \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule ord_strict_pE, blast)"], ["proof (state)\nthis:\n  lookup p v' = (0::'b)\n  lookup q v' \\<noteq> (0::'b)\n  v' \\<prec>\\<^sub>t ?u22 \\<Longrightarrow> lookup p ?u22 = lookup q ?u22\n\ngoal (2 subgoals):\n 1. p \\<prec>\\<^sub>p q \\<Longrightarrow> False\n 2. p = q \\<Longrightarrow> False", "from 1 2"], ["proof (chain)\npicking this:\n  lookup p v' = (0::'b)\n  lookup q v' \\<noteq> (0::'b)", "have \"lookup p v' \\<noteq> lookup q v'\""], ["proof (prove)\nusing this:\n  lookup p v' = (0::'b)\n  lookup q v' \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p v' \\<noteq> lookup q v'", "by simp"], ["proof (state)\nthis:\n  lookup p v' \\<noteq> lookup q v'\n\ngoal (2 subgoals):\n 1. p \\<prec>\\<^sub>p q \\<Longrightarrow> False\n 2. p = q \\<Longrightarrow> False", "hence \"\\<not> v \\<prec>\\<^sub>t v'\""], ["proof (prove)\nusing this:\n  lookup p v' \\<noteq> lookup q v'\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t v'", "using assms(3)"], ["proof (prove)\nusing this:\n  lookup p v' \\<noteq> lookup q v'\n  v \\<prec>\\<^sub>t ?u22 \\<Longrightarrow> lookup p ?u22 = lookup q ?u22\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t v'", "by blast"], ["proof (state)\nthis:\n  \\<not> v \\<prec>\\<^sub>t v'\n\ngoal (2 subgoals):\n 1. p \\<prec>\\<^sub>p q \\<Longrightarrow> False\n 2. p = q \\<Longrightarrow> False", "hence \"v' \\<prec>\\<^sub>t v \\<or> v' = v\""], ["proof (prove)\nusing this:\n  \\<not> v \\<prec>\\<^sub>t v'\n\ngoal (1 subgoal):\n 1. v' \\<prec>\\<^sub>t v \\<or> v' = v", "by auto"], ["proof (state)\nthis:\n  v' \\<prec>\\<^sub>t v \\<or> v' = v\n\ngoal (2 subgoals):\n 1. p \\<prec>\\<^sub>p q \\<Longrightarrow> False\n 2. p = q \\<Longrightarrow> False", "thus ?thesis"], ["proof (prove)\nusing this:\n  v' \\<prec>\\<^sub>t v \\<or> v' = v\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. v' \\<prec>\\<^sub>t v \\<Longrightarrow> False\n 2. v' = v \\<Longrightarrow> False", "assume \"v' \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  v' \\<prec>\\<^sub>t v\n\ngoal (2 subgoals):\n 1. v' \\<prec>\\<^sub>t v \\<Longrightarrow> False\n 2. v' = v \\<Longrightarrow> False", "hence \"lookup p v = lookup q v\""], ["proof (prove)\nusing this:\n  v' \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lookup p v = lookup q v", "by (rule 3)"], ["proof (state)\nthis:\n  lookup p v = lookup q v\n\ngoal (2 subgoals):\n 1. v' \\<prec>\\<^sub>t v \\<Longrightarrow> False\n 2. v' = v \\<Longrightarrow> False", "with assms(1)"], ["proof (chain)\npicking this:\n  lookup p v \\<noteq> lookup q v\n  lookup p v = lookup q v", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup p v \\<noteq> lookup q v\n  lookup p v = lookup q v\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. v' = v \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v' = v \\<Longrightarrow> False", "assume \"v' = v\""], ["proof (state)\nthis:\n  v' = v\n\ngoal (1 subgoal):\n 1. v' = v \\<Longrightarrow> False", "with assms(2) 1"], ["proof (chain)\npicking this:\n  lookup p v \\<noteq> (0::'b)\n  lookup p v' = (0::'b)\n  v' = v", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup p v \\<noteq> (0::'b)\n  lookup p v' = (0::'b)\n  v' = v\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow> False", "assume \"p = q\""], ["proof (state)\nthis:\n  p = q\n\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow> False", "hence \"lookup p v = lookup q v\""], ["proof (prove)\nusing this:\n  p = q\n\ngoal (1 subgoal):\n 1. lookup p v = lookup q v", "by simp"], ["proof (state)\nthis:\n  lookup p v = lookup q v\n\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow> False", "with assms(1)"], ["proof (chain)\npicking this:\n  lookup p v \\<noteq> lookup q v\n  lookup p v = lookup q v", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup p v \\<noteq> lookup q v\n  lookup p v = lookup q v\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary not_ord_strict_pI:\n  assumes \"lookup p v \\<noteq> lookup q v\" and \"lookup p v \\<noteq> 0\" and \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\"\n  shows \"\\<not> p \\<prec>\\<^sub>p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>\\<^sub>p q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>\\<^sub>p q", "from assms"], ["proof (chain)\npicking this:\n  lookup p v \\<noteq> lookup q v\n  lookup p v \\<noteq> (0::'b)\n  v \\<prec>\\<^sub>t ?u22 \\<Longrightarrow> lookup p ?u22 = lookup q ?u22", "have \"\\<not> p \\<preceq>\\<^sub>p q\""], ["proof (prove)\nusing this:\n  lookup p v \\<noteq> lookup q v\n  lookup p v \\<noteq> (0::'b)\n  v \\<prec>\\<^sub>t ?u22 \\<Longrightarrow> lookup p ?u22 = lookup q ?u22\n\ngoal (1 subgoal):\n 1. \\<not> p \\<preceq>\\<^sub>p q", "by (rule not_ord_pI)"], ["proof (state)\nthis:\n  \\<not> p \\<preceq>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>\\<^sub>p q", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> p \\<preceq>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>\\<^sub>p q", "by (simp add: ord_p_def)"], ["proof (state)\nthis:\n  \\<not> p \\<prec>\\<^sub>p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_strict_higher: \"p \\<prec>\\<^sub>p q \\<longleftrightarrow> (\\<exists>v. lookup p v = 0 \\<and> lookup q v \\<noteq> 0 \\<and> higher p v = higher q v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<prec>\\<^sub>p q) =\n    (\\<exists>v.\n        lookup p v = (0::'b) \\<and>\n        lookup q v \\<noteq> (0::'b) \\<and> higher p v = higher q v)", "unfolding ord_strict_p_def higher_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>v.\n        lookup p v = (0::'b) \\<and>\n        lookup q v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u)) =\n    (\\<exists>v.\n        lookup p v = (0::'b) \\<and>\n        lookup q v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u))", ".."], ["", "lemma ord_strict_p_asymmetric:\n  assumes \"p \\<prec>\\<^sub>p q\"\n  shows \"\\<not> q \\<prec>\\<^sub>p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> q \\<prec>\\<^sub>p p", "using assms"], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. \\<not> q \\<prec>\\<^sub>p p", "unfolding ord_strict_p_def"], ["proof (prove)\nusing this:\n  \\<exists>v.\n     lookup p v = (0::'b) \\<and>\n     lookup q v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\n\ngoal (1 subgoal):\n 1. \\<nexists>v.\n       lookup q v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup p x = (0::'b) \\<and>\n       lookup q x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup p u = lookup q u) \\<Longrightarrow>\n       \\<nexists>v.\n          lookup q v = (0::'b) \\<and>\n          lookup p v \\<noteq> (0::'b) \\<and>\n          (\\<forall>u.\n              v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)", "fix v1::'t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup p x = (0::'b) \\<and>\n       lookup q x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup p u = lookup q u) \\<Longrightarrow>\n       \\<nexists>v.\n          lookup q v = (0::'b) \\<and>\n          lookup p v \\<noteq> (0::'b) \\<and>\n          (\\<forall>u.\n              v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)", "assume \"lookup p v1 = 0 \\<and> lookup q v1 \\<noteq> 0 \\<and> (\\<forall>u. v1 \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\""], ["proof (state)\nthis:\n  lookup p v1 = (0::'b) \\<and>\n  lookup q v1 \\<noteq> (0::'b) \\<and>\n  (\\<forall>u.\n      v1 \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup p x = (0::'b) \\<and>\n       lookup q x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup p u = lookup q u) \\<Longrightarrow>\n       \\<nexists>v.\n          lookup q v = (0::'b) \\<and>\n          lookup p v \\<noteq> (0::'b) \\<and>\n          (\\<forall>u.\n              v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)", "hence \"lookup p v1 = 0\" and \"lookup q v1 \\<noteq> 0\" and v1: \"\\<forall>u. v1 \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  lookup p v1 = (0::'b) \\<and>\n  lookup q v1 \\<noteq> (0::'b) \\<and>\n  (\\<forall>u.\n      v1 \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\n\ngoal (1 subgoal):\n 1. lookup p v1 = (0::'b) &&&\n    lookup q v1 \\<noteq> (0::'b) &&&\n    \\<forall>u.\n       v1 \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u", "by auto"], ["proof (state)\nthis:\n  lookup p v1 = (0::'b)\n  lookup q v1 \\<noteq> (0::'b)\n  \\<forall>u. v1 \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup p x = (0::'b) \\<and>\n       lookup q x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup p u = lookup q u) \\<Longrightarrow>\n       \\<nexists>v.\n          lookup q v = (0::'b) \\<and>\n          lookup p v \\<noteq> (0::'b) \\<and>\n          (\\<forall>u.\n              v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)", "show \"\\<not> (\\<exists>v. lookup q v = 0 \\<and> lookup p v \\<noteq> 0 \\<and> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>v.\n       lookup q v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)", "proof (intro notI, erule exE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       lookup q v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       False", "fix v2::'t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       lookup q v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       False", "assume \"lookup q v2 = 0 \\<and> lookup p v2 \\<noteq> 0 \\<and> (\\<forall>u. v2 \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)\""], ["proof (state)\nthis:\n  lookup q v2 = (0::'b) \\<and>\n  lookup p v2 \\<noteq> (0::'b) \\<and>\n  (\\<forall>u.\n      v2 \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       lookup q v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       False", "hence \"lookup q v2 = 0\" and \"lookup p v2 \\<noteq> 0\" and v2: \"\\<forall>u. v2 \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u\""], ["proof (prove)\nusing this:\n  lookup q v2 = (0::'b) \\<and>\n  lookup p v2 \\<noteq> (0::'b) \\<and>\n  (\\<forall>u.\n      v2 \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)\n\ngoal (1 subgoal):\n 1. lookup q v2 = (0::'b) &&&\n    lookup p v2 \\<noteq> (0::'b) &&&\n    \\<forall>u.\n       v2 \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u", "by auto"], ["proof (state)\nthis:\n  lookup q v2 = (0::'b)\n  lookup p v2 \\<noteq> (0::'b)\n  \\<forall>u. v2 \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       lookup q v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (rule ord_term_lin.linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow> False\n 2. ?x = ?y \\<Longrightarrow> False\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow> False", "assume \"v1 \\<prec>\\<^sub>t v2\""], ["proof (state)\nthis:\n  v1 \\<prec>\\<^sub>t v2\n\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow> False\n 2. ?x = ?y \\<Longrightarrow> False\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow> False", "from v1[rule_format, OF this] \\<open>lookup q v2 = 0\\<close> \\<open>lookup p v2 \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  lookup p v2 = lookup q v2\n  lookup q v2 = (0::'b)\n  lookup p v2 \\<noteq> (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup p v2 = lookup q v2\n  lookup q v2 = (0::'b)\n  lookup p v2 \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. v1 = v2 \\<Longrightarrow> False\n 2. v2 \\<prec>\\<^sub>t v1 \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. v1 = v2 \\<Longrightarrow> False\n 2. v2 \\<prec>\\<^sub>t v1 \\<Longrightarrow> False", "assume \"v1 = v2\""], ["proof (state)\nthis:\n  v1 = v2\n\ngoal (2 subgoals):\n 1. v1 = v2 \\<Longrightarrow> False\n 2. v2 \\<prec>\\<^sub>t v1 \\<Longrightarrow> False", "thus ?thesis"], ["proof (prove)\nusing this:\n  v1 = v2\n\ngoal (1 subgoal):\n 1. False", "using \\<open>lookup p v1 = 0\\<close> \\<open>lookup p v2 \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  v1 = v2\n  lookup p v1 = (0::'b)\n  lookup p v2 \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. v2 \\<prec>\\<^sub>t v1 \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v2 \\<prec>\\<^sub>t v1 \\<Longrightarrow> False", "assume \"v2 \\<prec>\\<^sub>t v1\""], ["proof (state)\nthis:\n  v2 \\<prec>\\<^sub>t v1\n\ngoal (1 subgoal):\n 1. v2 \\<prec>\\<^sub>t v1 \\<Longrightarrow> False", "from v2[rule_format, OF this] \\<open>lookup p v1 = 0\\<close> \\<open>lookup q v1 \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  lookup q v1 = lookup p v1\n  lookup p v1 = (0::'b)\n  lookup q v1 \\<noteq> (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup q v1 = lookup p v1\n  lookup p v1 = (0::'b)\n  lookup q v1 \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>v.\n     lookup q v = (0::'b) \\<and>\n     lookup p v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_strict_p_irreflexive: \"\\<not> p \\<prec>\\<^sub>p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>\\<^sub>p p", "unfolding ord_strict_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>v.\n       lookup p v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup p u)", "proof (intro notI, erule exE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       lookup p v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup p u = lookup p u) \\<Longrightarrow>\n       False", "fix v::'t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       lookup p v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup p u = lookup p u) \\<Longrightarrow>\n       False", "assume \"lookup p v = 0 \\<and> lookup p v \\<noteq> 0 \\<and> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup p u)\""], ["proof (state)\nthis:\n  lookup p v = (0::'b) \\<and>\n  lookup p v \\<noteq> (0::'b) \\<and>\n  (\\<forall>u.\n      v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup p u)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       lookup p v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup p u = lookup p u) \\<Longrightarrow>\n       False", "hence \"lookup p v = 0\" and \"lookup p v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup p v = (0::'b) \\<and>\n  lookup p v \\<noteq> (0::'b) \\<and>\n  (\\<forall>u.\n      v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup p u)\n\ngoal (1 subgoal):\n 1. lookup p v = (0::'b) &&& lookup p v \\<noteq> (0::'b)", "by auto"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n  lookup p v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       lookup p v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup p u = lookup p u) \\<Longrightarrow>\n       False", "thus False"], ["proof (prove)\nusing this:\n  lookup p v = (0::'b)\n  lookup p v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_strict_p_transitive:\n  assumes \"a \\<prec>\\<^sub>p b\" and \"b \\<prec>\\<^sub>p c\"\n  shows \"a \\<prec>\\<^sub>p c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<prec>\\<^sub>p c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<prec>\\<^sub>p c", "from \\<open>a \\<prec>\\<^sub>p b\\<close>"], ["proof (chain)\npicking this:\n  a \\<prec>\\<^sub>p b", "obtain v1 where \"lookup a v1 = 0\"\n                            and \"lookup b v1 \\<noteq> 0\"\n                            and v1[rule_format]: \"(\\<forall>u. v1 \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup b u)\""], ["proof (prove)\nusing this:\n  a \\<prec>\\<^sub>p b\n\ngoal (1 subgoal):\n 1. (\\<And>v1.\n        \\<lbrakk>lookup a v1 = (0::'b); lookup b v1 \\<noteq> (0::'b);\n         \\<forall>u.\n            v1 \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup a u = lookup b u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ord_strict_p_def"], ["proof (prove)\nusing this:\n  \\<exists>v.\n     lookup a v = (0::'b) \\<and>\n     lookup b v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup b u)\n\ngoal (1 subgoal):\n 1. (\\<And>v1.\n        \\<lbrakk>lookup a v1 = (0::'b); lookup b v1 \\<noteq> (0::'b);\n         \\<forall>u.\n            v1 \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup a u = lookup b u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lookup a v1 = (0::'b)\n  lookup b v1 \\<noteq> (0::'b)\n  v1 \\<prec>\\<^sub>t ?u \\<Longrightarrow> lookup a ?u = lookup b ?u\n\ngoal (1 subgoal):\n 1. a \\<prec>\\<^sub>p c", "from \\<open>b \\<prec>\\<^sub>p c\\<close>"], ["proof (chain)\npicking this:\n  b \\<prec>\\<^sub>p c", "obtain v2 where \"lookup b v2 = 0\"\n                            and \"lookup c v2 \\<noteq> 0\"\n                            and v2[rule_format]: \"(\\<forall>u. v2 \\<prec>\\<^sub>t u \\<longrightarrow> lookup b u = lookup c u)\""], ["proof (prove)\nusing this:\n  b \\<prec>\\<^sub>p c\n\ngoal (1 subgoal):\n 1. (\\<And>v2.\n        \\<lbrakk>lookup b v2 = (0::'b); lookup c v2 \\<noteq> (0::'b);\n         \\<forall>u.\n            v2 \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup b u = lookup c u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ord_strict_p_def"], ["proof (prove)\nusing this:\n  \\<exists>v.\n     lookup b v = (0::'b) \\<and>\n     lookup c v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup b u = lookup c u)\n\ngoal (1 subgoal):\n 1. (\\<And>v2.\n        \\<lbrakk>lookup b v2 = (0::'b); lookup c v2 \\<noteq> (0::'b);\n         \\<forall>u.\n            v2 \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup b u = lookup c u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lookup b v2 = (0::'b)\n  lookup c v2 \\<noteq> (0::'b)\n  v2 \\<prec>\\<^sub>t ?u \\<Longrightarrow> lookup b ?u = lookup c ?u\n\ngoal (1 subgoal):\n 1. a \\<prec>\\<^sub>p c", "show \"a \\<prec>\\<^sub>p c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<prec>\\<^sub>p c", "proof (rule ord_term_lin.linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow> a \\<prec>\\<^sub>p c\n 2. ?x = ?y \\<Longrightarrow> a \\<prec>\\<^sub>p c\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow> a \\<prec>\\<^sub>p c", "assume \"v1 \\<prec>\\<^sub>t v2\""], ["proof (state)\nthis:\n  v1 \\<prec>\\<^sub>t v2\n\ngoal (3 subgoals):\n 1. ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow> a \\<prec>\\<^sub>p c\n 2. ?x = ?y \\<Longrightarrow> a \\<prec>\\<^sub>p c\n 3. ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow> a \\<prec>\\<^sub>p c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<prec>\\<^sub>p c", "unfolding ord_strict_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup a v = (0::'b) \\<and>\n       lookup c v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup c u)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup a ?v = (0::'b) \\<and>\n    lookup c ?v \\<noteq> (0::'b) \\<and>\n    (\\<forall>u.\n        ?v \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup c u)", "show \"lookup a v2 = 0 \\<and> lookup c v2 \\<noteq> 0 \\<and> (\\<forall>u. v2 \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup c u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup a v2 = (0::'b) \\<and>\n    lookup c v2 \\<noteq> (0::'b) \\<and>\n    (\\<forall>u.\n        v2 \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup c u)", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. lookup a v2 = (0::'b)\n 2. lookup c v2 \\<noteq> (0::'b)\n 3. \\<And>u. v2 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "from \\<open>lookup b v2 = 0\\<close> v1[OF \\<open>v1 \\<prec>\\<^sub>t v2\\<close>]"], ["proof (chain)\npicking this:\n  lookup b v2 = (0::'b)\n  lookup a v2 = lookup b v2", "show \"lookup a v2 = 0\""], ["proof (prove)\nusing this:\n  lookup b v2 = (0::'b)\n  lookup a v2 = lookup b v2\n\ngoal (1 subgoal):\n 1. lookup a v2 = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup a v2 = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup c v2 \\<noteq> (0::'b)\n 2. \\<And>u. v2 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup c v2 \\<noteq> (0::'b)\n 2. \\<And>u. v2 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "from \\<open>lookup c v2 \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  lookup c v2 \\<noteq> (0::'b)", "show \"lookup c v2 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup c v2 \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup c v2 \\<noteq> (0::'b)", "."], ["proof (state)\nthis:\n  lookup c v2 \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u. v2 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v2 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v2 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "assume \"v2 \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  v2 \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v2 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "from ord_term_lin.less_trans[OF \\<open>v1 \\<prec>\\<^sub>t v2\\<close> this]"], ["proof (chain)\npicking this:\n  v1 \\<prec>\\<^sub>t u", "have \"v1 \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  v1 \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. v1 \\<prec>\\<^sub>t u", "."], ["proof (state)\nthis:\n  v1 \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v2 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "from v2[OF \\<open>v2 \\<prec>\\<^sub>t u\\<close>] v1[OF this]"], ["proof (chain)\npicking this:\n  lookup b u = lookup c u\n  lookup a u = lookup b u", "show \"lookup a u = lookup c u\""], ["proof (prove)\nusing this:\n  lookup b u = lookup c u\n  lookup a u = lookup b u\n\ngoal (1 subgoal):\n 1. lookup a u = lookup c u", "by simp"], ["proof (state)\nthis:\n  lookup a u = lookup c u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup a v2 = (0::'b) \\<and>\n  lookup c v2 \\<noteq> (0::'b) \\<and>\n  (\\<forall>u.\n      v2 \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup c u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<prec>\\<^sub>p c\n\ngoal (2 subgoals):\n 1. v1 = v2 \\<Longrightarrow> a \\<prec>\\<^sub>p c\n 2. v2 \\<prec>\\<^sub>t v1 \\<Longrightarrow> a \\<prec>\\<^sub>p c", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. v1 = v2 \\<Longrightarrow> a \\<prec>\\<^sub>p c\n 2. v2 \\<prec>\\<^sub>t v1 \\<Longrightarrow> a \\<prec>\\<^sub>p c", "assume \"v2 \\<prec>\\<^sub>t v1\""], ["proof (state)\nthis:\n  v2 \\<prec>\\<^sub>t v1\n\ngoal (2 subgoals):\n 1. v1 = v2 \\<Longrightarrow> a \\<prec>\\<^sub>p c\n 2. v2 \\<prec>\\<^sub>t v1 \\<Longrightarrow> a \\<prec>\\<^sub>p c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<prec>\\<^sub>p c", "unfolding ord_strict_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup a v = (0::'b) \\<and>\n       lookup c v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup c u)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup a ?v = (0::'b) \\<and>\n    lookup c ?v \\<noteq> (0::'b) \\<and>\n    (\\<forall>u.\n        ?v \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup c u)", "show \"lookup a v1 = 0 \\<and> lookup c v1 \\<noteq> 0 \\<and> (\\<forall>u. v1 \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup c u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup a v1 = (0::'b) \\<and>\n    lookup c v1 \\<noteq> (0::'b) \\<and>\n    (\\<forall>u.\n        v1 \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup c u)", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. lookup a v1 = (0::'b)\n 2. lookup c v1 \\<noteq> (0::'b)\n 3. \\<And>u. v1 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "from \\<open>lookup a v1 = 0\\<close>"], ["proof (chain)\npicking this:\n  lookup a v1 = (0::'b)", "show \"lookup a v1 = 0\""], ["proof (prove)\nusing this:\n  lookup a v1 = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup a v1 = (0::'b)", "."], ["proof (state)\nthis:\n  lookup a v1 = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup c v1 \\<noteq> (0::'b)\n 2. \\<And>u. v1 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup c v1 \\<noteq> (0::'b)\n 2. \\<And>u. v1 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "from \\<open>lookup b v1 \\<noteq> 0\\<close> v2[OF \\<open>v2 \\<prec>\\<^sub>t v1\\<close>]"], ["proof (chain)\npicking this:\n  lookup b v1 \\<noteq> (0::'b)\n  lookup b v1 = lookup c v1", "show \"lookup c v1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup b v1 \\<noteq> (0::'b)\n  lookup b v1 = lookup c v1\n\ngoal (1 subgoal):\n 1. lookup c v1 \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup c v1 \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u. v1 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v1 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v1 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "assume \"v1 \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  v1 \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v1 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "from ord_term_lin.less_trans[OF \\<open>v2 \\<prec>\\<^sub>t v1\\<close> this]"], ["proof (chain)\npicking this:\n  v2 \\<prec>\\<^sub>t u", "have \"v2 \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  v2 \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. v2 \\<prec>\\<^sub>t u", "."], ["proof (state)\nthis:\n  v2 \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v1 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup a u = lookup c u", "from v1[OF \\<open>v1 \\<prec>\\<^sub>t u\\<close>] v2[OF this]"], ["proof (chain)\npicking this:\n  lookup a u = lookup b u\n  lookup b u = lookup c u", "show \"lookup a u = lookup c u\""], ["proof (prove)\nusing this:\n  lookup a u = lookup b u\n  lookup b u = lookup c u\n\ngoal (1 subgoal):\n 1. lookup a u = lookup c u", "by simp"], ["proof (state)\nthis:\n  lookup a u = lookup c u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup a v1 = (0::'b) \\<and>\n  lookup c v1 \\<noteq> (0::'b) \\<and>\n  (\\<forall>u.\n      v1 \\<prec>\\<^sub>t u \\<longrightarrow> lookup a u = lookup c u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<prec>\\<^sub>p c\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<Longrightarrow> a \\<prec>\\<^sub>p c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v1 = v2 \\<Longrightarrow> a \\<prec>\\<^sub>p c", "assume \"v1 = v2\""], ["proof (state)\nthis:\n  v1 = v2\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<Longrightarrow> a \\<prec>\\<^sub>p c", "thus ?thesis"], ["proof (prove)\nusing this:\n  v1 = v2\n\ngoal (1 subgoal):\n 1. a \\<prec>\\<^sub>p c", "using \\<open>lookup b v1 \\<noteq> 0\\<close> \\<open>lookup b v2 = 0\\<close>"], ["proof (prove)\nusing this:\n  v1 = v2\n  lookup b v1 \\<noteq> (0::'b)\n  lookup b v2 = (0::'b)\n\ngoal (1 subgoal):\n 1. a \\<prec>\\<^sub>p c", "by simp"], ["proof (state)\nthis:\n  a \\<prec>\\<^sub>p c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<prec>\\<^sub>p c\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale order ord_p ord_strict_p"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.order (\\<preceq>\\<^sub>p) (\\<prec>\\<^sub>p)", "proof (intro order_strictI)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b. (a \\<preceq>\\<^sub>p b) = (a \\<prec>\\<^sub>p b \\<or> a = b)\n 2. \\<And>a b.\n       a \\<prec>\\<^sub>p b \\<Longrightarrow> \\<not> b \\<prec>\\<^sub>p a\n 3. \\<And>a. \\<not> a \\<prec>\\<^sub>p a\n 4. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "fix p q :: \"'t \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b. (a \\<preceq>\\<^sub>p b) = (a \\<prec>\\<^sub>p b \\<or> a = b)\n 2. \\<And>a b.\n       a \\<prec>\\<^sub>p b \\<Longrightarrow> \\<not> b \\<prec>\\<^sub>p a\n 3. \\<And>a. \\<not> a \\<prec>\\<^sub>p a\n 4. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "show \"(p \\<preceq>\\<^sub>p q) = (p \\<prec>\\<^sub>p q \\<or> p = q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<preceq>\\<^sub>p q) = (p \\<prec>\\<^sub>p q \\<or> p = q)", "unfolding ord_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<prec>\\<^sub>p q \\<or> p = q) = (p \\<prec>\\<^sub>p q \\<or> p = q)", ".."], ["proof (state)\nthis:\n  (p \\<preceq>\\<^sub>p q) = (p \\<prec>\\<^sub>p q \\<or> p = q)\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       a \\<prec>\\<^sub>p b \\<Longrightarrow> \\<not> b \\<prec>\\<^sub>p a\n 2. \\<And>a. \\<not> a \\<prec>\\<^sub>p a\n 3. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       a \\<prec>\\<^sub>p b \\<Longrightarrow> \\<not> b \\<prec>\\<^sub>p a\n 2. \\<And>a. \\<not> a \\<prec>\\<^sub>p a\n 3. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "fix p q :: \"'t \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       a \\<prec>\\<^sub>p b \\<Longrightarrow> \\<not> b \\<prec>\\<^sub>p a\n 2. \\<And>a. \\<not> a \\<prec>\\<^sub>p a\n 3. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "assume \"p \\<prec>\\<^sub>p q\""], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p q\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       a \\<prec>\\<^sub>p b \\<Longrightarrow> \\<not> b \\<prec>\\<^sub>p a\n 2. \\<And>a. \\<not> a \\<prec>\\<^sub>p a\n 3. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "thus \"\\<not> q \\<prec>\\<^sub>p p\""], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. \\<not> q \\<prec>\\<^sub>p p", "by (rule ord_strict_p_asymmetric)"], ["proof (state)\nthis:\n  \\<not> q \\<prec>\\<^sub>p p\n\ngoal (2 subgoals):\n 1. \\<And>a. \\<not> a \\<prec>\\<^sub>p a\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. \\<not> a \\<prec>\\<^sub>p a\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "fix p::\"'t \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. \\<not> a \\<prec>\\<^sub>p a\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "show \"\\<not> p \\<prec>\\<^sub>p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>\\<^sub>p p", "by (fact ord_strict_p_irreflexive)"], ["proof (state)\nthis:\n  \\<not> p \\<prec>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "fix a b c :: \"'t \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "assume \"a \\<prec>\\<^sub>p b\" and \"b \\<prec>\\<^sub>p c\""], ["proof (state)\nthis:\n  a \\<prec>\\<^sub>p b\n  b \\<prec>\\<^sub>p c\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<prec>\\<^sub>p b; b \\<prec>\\<^sub>p c\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^sub>p c", "thus \"a \\<prec>\\<^sub>p c\""], ["proof (prove)\nusing this:\n  a \\<prec>\\<^sub>p b\n  b \\<prec>\\<^sub>p c\n\ngoal (1 subgoal):\n 1. a \\<prec>\\<^sub>p c", "by (rule ord_strict_p_transitive)"], ["proof (state)\nthis:\n  a \\<prec>\\<^sub>p c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_p_zero_min: \"0 \\<preceq>\\<^sub>p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<preceq>\\<^sub>p p", "unfolding ord_p_def ord_strict_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>v.\n        lookup 0 v = (0::'b) \\<and>\n        lookup p v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup 0 u = lookup p u)) \\<or>\n    0 = p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    (\\<exists>v.\n        lookup 0 v = (0::'b) \\<and>\n        lookup p v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup 0 u = lookup p u)) \\<or>\n    0 = p\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>v.\n        lookup 0 v = (0::'b) \\<and>\n        lookup p v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup 0 u = lookup p u)) \\<or>\n    0 = p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    (\\<exists>v.\n        lookup 0 v = (0::'b) \\<and>\n        lookup p v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup 0 u = lookup p u)) \\<or>\n    0 = p\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>v.\n        lookup 0 v = (0::'b) \\<and>\n        lookup p v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup 0 u = lookup p u)) \\<or>\n    0 = p", "thus \"(\\<exists>v. lookup 0 v = 0 \\<and> lookup p v \\<noteq> 0 \\<and> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup 0 u = lookup p u)) \\<or> 0 = p\""], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. (\\<exists>v.\n        lookup 0 v = (0::'c) \\<and>\n        lookup p v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup 0 u = lookup p u)) \\<or>\n    0 = p", "by auto"], ["proof (state)\nthis:\n  (\\<exists>v.\n      lookup 0 v = (0::?'c23) \\<and>\n      lookup p v \\<noteq> (0::'b) \\<and>\n      (\\<forall>u.\n          v \\<prec>\\<^sub>t u \\<longrightarrow>\n          lookup 0 u = lookup p u)) \\<or>\n  0 = p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>v.\n        lookup 0 v = (0::'b) \\<and>\n        lookup p v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup 0 u = lookup p u)) \\<or>\n    0 = p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>v.\n        lookup 0 v = (0::'b) \\<and>\n        lookup p v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup 0 u = lookup p u)) \\<or>\n    0 = p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>v.\n        lookup 0 v = (0::'b) \\<and>\n        lookup p v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup 0 u = lookup p u)) \\<or>\n    0 = p", "show \"(\\<exists>v. lookup 0 v = 0 \\<and> lookup p v \\<noteq> 0 \\<and> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup 0 u = lookup p u)) \\<or> 0 = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>v.\n        lookup 0 v = (0::'c) \\<and>\n        lookup p v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup 0 u = lookup p u)) \\<or>\n    0 = p", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup 0 v = (0::'c) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow> lookup 0 u = lookup p u)", "show \"(\\<exists>v. lookup 0 v = 0 \\<and> lookup p v \\<noteq> 0 \\<and> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup 0 u = lookup p u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup 0 v = (0::'d) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow> lookup 0 u = lookup p u)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup 0 ?v = (0::'d) \\<and>\n    lookup p ?v \\<noteq> (0::'b) \\<and>\n    (\\<forall>u.\n        ?v \\<prec>\\<^sub>t u \\<longrightarrow> lookup 0 u = lookup p u)", "show \"lookup 0 (lt p) = 0 \\<and> lookup p (lt p) \\<noteq> 0 \\<and> (\\<forall>u. (lt p) \\<prec>\\<^sub>t u \\<longrightarrow> lookup 0 u = lookup p u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup 0 (lt p) = (0::'e) \\<and>\n    lookup p (lt p) \\<noteq> (0::'b) \\<and>\n    (\\<forall>u.\n        lt p \\<prec>\\<^sub>t u \\<longrightarrow> lookup 0 u = lookup p u)", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. lookup 0 (lt p) = (0::'e)\n 2. lookup p (lt p) \\<noteq> (0::'b)\n 3. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup 0 u = lookup p u", "show \"lookup 0 (lt p) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup 0 (lt p) = (0::'f)", "by (transfer, simp)"], ["proof (state)\nthis:\n  lookup 0 (lt p) = (0::?'f23)\n\ngoal (2 subgoals):\n 1. lookup p (lt p) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup 0 u = lookup p u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup p (lt p) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup 0 u = lookup p u", "from lc_not_0[OF False]"], ["proof (chain)\npicking this:\n  lc p \\<noteq> (0::'b)", "show \"lookup p (lt p) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p (lt p) \\<noteq> (0::'b)", "unfolding lc_def"], ["proof (prove)\nusing this:\n  lookup p (lt p) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p (lt p) \\<noteq> (0::'b)", "."], ["proof (state)\nthis:\n  lookup p (lt p) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup 0 u = lookup p u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup 0 u = lookup p u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup 0 u = lookup p u", "assume \"lt p \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup 0 u = lookup p u", "hence \"\\<not> u \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  \\<not> u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup 0 u = lookup p u", "hence \"lookup p u = 0\""], ["proof (prove)\nusing this:\n  \\<not> u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "using lt_max[of p u]"], ["proof (prove)\nusing this:\n  \\<not> u \\<preceq>\\<^sub>t lt p\n  lookup p u \\<noteq> (0::'b) \\<Longrightarrow> u \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "by metis"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt p \\<prec>\\<^sub>t u \\<Longrightarrow> lookup 0 u = lookup p u", "thus \"lookup 0 u = lookup p u\""], ["proof (prove)\nusing this:\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup 0 u = lookup p u", "by simp"], ["proof (state)\nthis:\n  lookup 0 u = lookup p u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup 0 (lt p) = (0::?'e23) \\<and>\n  lookup p (lt p) \\<noteq> (0::'b) \\<and>\n  (\\<forall>u.\n      lt p \\<prec>\\<^sub>t u \\<longrightarrow> lookup 0 u = lookup p u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>v.\n     lookup 0 v = (0::?'d23) \\<and>\n     lookup p v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup 0 u = lookup p u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>v.\n      lookup 0 v = (0::?'c23) \\<and>\n      lookup p v \\<noteq> (0::'b) \\<and>\n      (\\<forall>u.\n          v \\<prec>\\<^sub>t u \\<longrightarrow>\n          lookup 0 u = lookup p u)) \\<or>\n  0 = p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_ord_p:\n  assumes \"lt p \\<prec>\\<^sub>t lt q\"\n  shows \"p \\<prec>\\<^sub>p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "have \"q \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "assume \"q = 0\""], ["proof (state)\nthis:\n  q = 0\n\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t lt q\n  q = 0", "have \"lt p \\<prec>\\<^sub>t min_term\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t lt q\n  q = 0\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t min_term", "by (simp add: lt_def)"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t min_term\n\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "with min_term_min[of \"lt p\"]"], ["proof (chain)\npicking this:\n  min_term \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t min_term", "show False"], ["proof (prove)\nusing this:\n  min_term \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t min_term\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "unfolding ord_strict_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup p v = (0::'b) \\<and>\n       lookup q v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)", "proof (intro exI conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. lookup p ?v = (0::'b)\n 2. lookup q ?v \\<noteq> (0::'b)\n 3. \\<And>u. ?v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "show \"lookup p (lt q) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p (lt q) = (0::'b)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup p (lt q) \\<noteq> (0::'b) \\<Longrightarrow> False", "assume \"lookup p (lt q) \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup p (lt q) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p (lt q) \\<noteq> (0::'b) \\<Longrightarrow> False", "from lt_max[OF this] \\<open>lt p \\<prec>\\<^sub>t lt q\\<close>"], ["proof (chain)\npicking this:\n  lt q \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t lt q", "show False"], ["proof (prove)\nusing this:\n  lt q \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup p (lt q) = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup q (lt q) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup q (lt q) \\<noteq> (0::'b)\n 2. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "from lc_not_0[OF \\<open>q \\<noteq> 0\\<close>]"], ["proof (chain)\npicking this:\n  lc q \\<noteq> (0::'b)", "show \"lookup q (lt q) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc q \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q (lt q) \\<noteq> (0::'b)", "unfolding lc_def"], ["proof (prove)\nusing this:\n  lookup q (lt q) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q (lt q) \\<noteq> (0::'b)", "."], ["proof (state)\nthis:\n  lookup q (lt q) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "assume \"lt q \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "hence \"lt p \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t u", "using \\<open>lt p \\<prec>\\<^sub>t lt q\\<close>"], ["proof (prove)\nusing this:\n  lt q \\<prec>\\<^sub>t u\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "have c1: \"lookup q u = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup q u = (0::'b)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> False", "assume \"lookup q u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup q u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q u \\<noteq> (0::'b) \\<Longrightarrow> False", "from lt_max[OF this] \\<open>lt q \\<prec>\\<^sub>t u\\<close>"], ["proof (chain)\npicking this:\n  u \\<preceq>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t u", "show False"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>t lt q\n  lt q \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "have c2: \"lookup p u = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p u = (0::'b)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b) \\<Longrightarrow> False", "assume \"lookup p u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b) \\<Longrightarrow> False", "from lt_max[OF this] \\<open>lt p \\<prec>\\<^sub>t u\\<close>"], ["proof (chain)\npicking this:\n  u \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u", "show False"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lt q \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "from c1 c2"], ["proof (chain)\npicking this:\n  lookup q u = (0::'b)\n  lookup p u = (0::'b)", "show \"lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  lookup q u = (0::'b)\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p u = lookup q u", "by simp"], ["proof (state)\nthis:\n  lookup p u = lookup q u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_p_lt:\n  assumes \"p \\<preceq>\\<^sub>p q\"\n  shows \"lt p \\<preceq>\\<^sub>t lt q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<preceq>\\<^sub>t lt q", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lt p \\<preceq>\\<^sub>t lt q \\<Longrightarrow> False", "assume \"\\<not> lt p \\<preceq>\\<^sub>t lt q\""], ["proof (state)\nthis:\n  \\<not> lt p \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. \\<not> lt p \\<preceq>\\<^sub>t lt q \\<Longrightarrow> False", "hence \"lt q \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  \\<not> lt p \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<not> lt p \\<preceq>\\<^sub>t lt q \\<Longrightarrow> False", "from lt_ord_p[OF this] \\<open>p \\<preceq>\\<^sub>p q\\<close>"], ["proof (chain)\npicking this:\n  q \\<prec>\\<^sub>p p\n  p \\<preceq>\\<^sub>p q", "show False"], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p p\n  p \\<preceq>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_p_tail:\n  assumes \"p \\<noteq> 0\" and \"lt p = lt q\" and \"p \\<prec>\\<^sub>p q\"\n  shows \"tail p \\<prec>\\<^sub>p tail q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail p \\<prec>\\<^sub>p tail q", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  lt p = lt q\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. tail p \\<prec>\\<^sub>p tail q", "unfolding ord_strict_p_def"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  lt p = lt q\n  \\<exists>v.\n     lookup p v = (0::'b) \\<and>\n     lookup q v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\n\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup (tail p) v = (0::'b) \\<and>\n       lookup (tail q) v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup (tail p) u = lookup (tail q) u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; lt p = lt q;\n     \\<exists>v.\n        lookup p v = (0::'b) \\<and>\n        lookup q v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v.\n                         lookup (tail p) v = (0::'b) \\<and>\n                         lookup (tail q) v \\<noteq> (0::'b) \\<and>\n                         (\\<forall>u.\n                             v \\<prec>\\<^sub>t u \\<longrightarrow>\n                             lookup (tail p) u = lookup (tail q) u)", "assume \"p \\<noteq> 0\" and \"lt p = lt q\"\n    and \"\\<exists>v. lookup p v = 0 \\<and> lookup q v \\<noteq> 0 \\<and> (\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n  lt p = lt q\n  \\<exists>v.\n     lookup p v = (0::'b) \\<and>\n     lookup q v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; lt p = lt q;\n     \\<exists>v.\n        lookup p v = (0::'b) \\<and>\n        lookup q v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v.\n                         lookup (tail p) v = (0::'b) \\<and>\n                         lookup (tail q) v \\<noteq> (0::'b) \\<and>\n                         (\\<forall>u.\n                             v \\<prec>\\<^sub>t u \\<longrightarrow>\n                             lookup (tail p) u = lookup (tail q) u)", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  lt p = lt q\n  \\<exists>v.\n     lookup p v = (0::'b) \\<and>\n     lookup q v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)", "obtain v where \"lookup p v = 0\"\n                  and \"lookup q v \\<noteq> 0\"\n                  and a: \"\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  lt p = lt q\n  \\<exists>v.\n     lookup p v = (0::'b) \\<and>\n     lookup q v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup p v = (0::'b); lookup q v \\<noteq> (0::'b);\n         \\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n  lookup q v \\<noteq> (0::'b)\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; lt p = lt q;\n     \\<exists>v.\n        lookup p v = (0::'b) \\<and>\n        lookup q v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v.\n                         lookup (tail p) v = (0::'b) \\<and>\n                         lookup (tail q) v \\<noteq> (0::'b) \\<and>\n                         (\\<forall>u.\n                             v \\<prec>\\<^sub>t u \\<longrightarrow>\n                             lookup (tail p) u = lookup (tail q) u)", "from lt_max[OF \\<open>lookup q v \\<noteq> 0\\<close>] \\<open>lt p = lt q\\<close>"], ["proof (chain)\npicking this:\n  v \\<preceq>\\<^sub>t lt q\n  lt p = lt q", "have \"v \\<prec>\\<^sub>t lt p \\<or> v = lt p\""], ["proof (prove)\nusing this:\n  v \\<preceq>\\<^sub>t lt q\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p \\<or> v = lt p", "by auto"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt p \\<or> v = lt p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; lt p = lt q;\n     \\<exists>v.\n        lookup p v = (0::'b) \\<and>\n        lookup q v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v.\n                         lookup (tail p) v = (0::'b) \\<and>\n                         lookup (tail q) v \\<noteq> (0::'b) \\<and>\n                         (\\<forall>u.\n                             v \\<prec>\\<^sub>t u \\<longrightarrow>\n                             lookup (tail p) u = lookup (tail q) u)", "hence \"v \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p \\<or> v = lt p\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t lt p \\<Longrightarrow> v \\<prec>\\<^sub>t lt p\n 2. v = lt p \\<Longrightarrow> v \\<prec>\\<^sub>t lt p", "assume \"v \\<prec>\\<^sub>t lt p\""], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t lt p \\<Longrightarrow> v \\<prec>\\<^sub>t lt p\n 2. v = lt p \\<Longrightarrow> v \\<prec>\\<^sub>t lt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "."], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v = lt p \\<Longrightarrow> v \\<prec>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v = lt p \\<Longrightarrow> v \\<prec>\\<^sub>t lt p", "assume \"v = lt p\""], ["proof (state)\nthis:\n  v = lt p\n\ngoal (1 subgoal):\n 1. v = lt p \\<Longrightarrow> v \\<prec>\\<^sub>t lt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  v = lt p\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "using lc_not_0[OF \\<open>p \\<noteq> 0\\<close>] \\<open>lookup p v = 0\\<close>"], ["proof (prove)\nusing this:\n  v = lt p\n  lc p \\<noteq> (0::'b)\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "unfolding lc_def"], ["proof (prove)\nusing this:\n  v = lt p\n  lookup p (lt p) \\<noteq> (0::'b)\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "by auto"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; lt p = lt q;\n     \\<exists>v.\n        lookup p v = (0::'b) \\<and>\n        lookup q v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v.\n                         lookup (tail p) v = (0::'b) \\<and>\n                         lookup (tail q) v \\<noteq> (0::'b) \\<and>\n                         (\\<forall>u.\n                             v \\<prec>\\<^sub>t u \\<longrightarrow>\n                             lookup (tail p) u = lookup (tail q) u)", "have pt: \"lookup (tail p) v = lookup p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tail p) v = lookup p v", "using lookup_tail[of p v] \\<open>v \\<prec>\\<^sub>t lt p\\<close>"], ["proof (prove)\nusing this:\n  lookup (tail p) v =\n  (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b))\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup (tail p) v = lookup p v", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) v = lookup p v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; lt p = lt q;\n     \\<exists>v.\n        lookup p v = (0::'b) \\<and>\n        lookup q v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v.\n                         lookup (tail p) v = (0::'b) \\<and>\n                         lookup (tail q) v \\<noteq> (0::'b) \\<and>\n                         (\\<forall>u.\n                             v \\<prec>\\<^sub>t u \\<longrightarrow>\n                             lookup (tail p) u = lookup (tail q) u)", "have \"q \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "assume \"q = 0\""], ["proof (state)\nthis:\n  q = 0\n\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "hence  \"p \\<prec>\\<^sub>p 0\""], ["proof (prove)\nusing this:\n  q = 0\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p 0", "using \\<open>p \\<prec>\\<^sub>p q\\<close>"], ["proof (prove)\nusing this:\n  q = 0\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p 0", "by simp"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p 0\n\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "hence \"\\<not> 0 \\<preceq>\\<^sub>p p\""], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 \\<preceq>\\<^sub>p p", "by auto"], ["proof (state)\nthis:\n  \\<not> 0 \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<not> 0 \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. False", "using ord_p_zero_min[of p]"], ["proof (prove)\nusing this:\n  \\<not> 0 \\<preceq>\\<^sub>p p\n  0 \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; lt p = lt q;\n     \\<exists>v.\n        lookup p v = (0::'b) \\<and>\n        lookup q v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v.\n                         lookup (tail p) v = (0::'b) \\<and>\n                         lookup (tail q) v \\<noteq> (0::'b) \\<and>\n                         (\\<forall>u.\n                             v \\<prec>\\<^sub>t u \\<longrightarrow>\n                             lookup (tail p) u = lookup (tail q) u)", "have qt: \"lookup (tail q) v = lookup q v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tail q) v = lookup q v", "using lookup_tail[of q v] \\<open>v \\<prec>\\<^sub>t lt p\\<close> \\<open>lt p = lt q\\<close>"], ["proof (prove)\nusing this:\n  lookup (tail q) v =\n  (if v \\<prec>\\<^sub>t lt q then lookup q v else (0::'b))\n  v \\<prec>\\<^sub>t lt p\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lookup (tail q) v = lookup q v", "by simp"], ["proof (state)\nthis:\n  lookup (tail q) v = lookup q v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; lt p = lt q;\n     \\<exists>v.\n        lookup p v = (0::'b) \\<and>\n        lookup q v \\<noteq> (0::'b) \\<and>\n        (\\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v.\n                         lookup (tail p) v = (0::'b) \\<and>\n                         lookup (tail q) v \\<noteq> (0::'b) \\<and>\n                         (\\<forall>u.\n                             v \\<prec>\\<^sub>t u \\<longrightarrow>\n                             lookup (tail p) u = lookup (tail q) u)", "show \"\\<exists>w. lookup (tail p) w = 0 \\<and> lookup (tail q) w \\<noteq> 0 \\<and>\n        (\\<forall>u. w \\<prec>\\<^sub>t u \\<longrightarrow> lookup (tail p) u = lookup (tail q) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w.\n       lookup (tail p) w = (0::'b) \\<and>\n       lookup (tail q) w \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           w \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup (tail p) u = lookup (tail q) u)", "proof (intro exI conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. lookup (tail p) ?w = (0::'b)\n 2. lookup (tail q) ?w \\<noteq> (0::'b)\n 3. \\<And>u.\n       ?w \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (tail p) u = lookup (tail q) u", "from pt \\<open>lookup p v = 0\\<close>"], ["proof (chain)\npicking this:\n  lookup (tail p) v = lookup p v\n  lookup p v = (0::'b)", "show \"lookup (tail p) v = 0\""], ["proof (prove)\nusing this:\n  lookup (tail p) v = lookup p v\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (tail p) v = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) v = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup (tail q) v \\<noteq> (0::'b)\n 2. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (tail p) u = lookup (tail q) u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (tail q) v \\<noteq> (0::'b)\n 2. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (tail p) u = lookup (tail q) u", "from qt \\<open>lookup q v \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  lookup (tail q) v = lookup q v\n  lookup q v \\<noteq> (0::'b)", "show \"lookup (tail q) v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup (tail q) v = lookup q v\n  lookup q v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (tail q) v \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup (tail q) v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (tail p) u = lookup (tail q) u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (tail p) u = lookup (tail q) u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (tail p) u = lookup (tail q) u", "assume \"v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (tail p) u = lookup (tail q) u", "from a[rule_format, OF \\<open>v \\<prec>\\<^sub>t u\\<close>] lookup_tail[of p u] lookup_tail[of q u]\n      \\<open>lt p = lt q\\<close>"], ["proof (chain)\npicking this:\n  lookup p u = lookup q u\n  lookup (tail p) u =\n  (if u \\<prec>\\<^sub>t lt p then lookup p u else (0::'b))\n  lookup (tail q) u =\n  (if u \\<prec>\\<^sub>t lt q then lookup q u else (0::'b))\n  lt p = lt q", "show \"lookup (tail p) u = lookup (tail q) u\""], ["proof (prove)\nusing this:\n  lookup p u = lookup q u\n  lookup (tail p) u =\n  (if u \\<prec>\\<^sub>t lt p then lookup p u else (0::'b))\n  lookup (tail q) u =\n  (if u \\<prec>\\<^sub>t lt q then lookup q u else (0::'b))\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lookup (tail p) u = lookup (tail q) u", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) u = lookup (tail q) u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>w.\n     lookup (tail p) w = (0::'b) \\<and>\n     lookup (tail q) w \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         w \\<prec>\\<^sub>t u \\<longrightarrow>\n         lookup (tail p) u = lookup (tail q) u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tail_ord_p:\n  assumes \"p \\<noteq> 0\"\n  shows \"tail p \\<prec>\\<^sub>p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail p \\<prec>\\<^sub>p p", "proof (cases \"tail p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. tail p = 0 \\<Longrightarrow> tail p \\<prec>\\<^sub>p p\n 2. tail p \\<noteq> 0 \\<Longrightarrow> tail p \\<prec>\\<^sub>p p", "case True"], ["proof (state)\nthis:\n  tail p = 0\n\ngoal (2 subgoals):\n 1. tail p = 0 \\<Longrightarrow> tail p \\<prec>\\<^sub>p p\n 2. tail p \\<noteq> 0 \\<Longrightarrow> tail p \\<prec>\\<^sub>p p", "with ord_p_zero_min[of p] \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  0 \\<preceq>\\<^sub>p p\n  p \\<noteq> 0\n  tail p = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<preceq>\\<^sub>p p\n  p \\<noteq> 0\n  tail p = 0\n\ngoal (1 subgoal):\n 1. tail p \\<prec>\\<^sub>p p", "by simp"], ["proof (state)\nthis:\n  tail p \\<prec>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. tail p \\<noteq> 0 \\<Longrightarrow> tail p \\<prec>\\<^sub>p p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. tail p \\<noteq> 0 \\<Longrightarrow> tail p \\<prec>\\<^sub>p p", "case False"], ["proof (state)\nthis:\n  tail p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tail p \\<noteq> 0 \\<Longrightarrow> tail p \\<prec>\\<^sub>p p", "from lt_tail[OF False]"], ["proof (chain)\npicking this:\n  lt (tail p) \\<prec>\\<^sub>t lt p", "show ?thesis"], ["proof (prove)\nusing this:\n  lt (tail p) \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. tail p \\<prec>\\<^sub>p p", "by (rule lt_ord_p)"], ["proof (state)\nthis:\n  tail p \\<prec>\\<^sub>p p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma higher_lookup_eq_zero:\n  assumes pt: \"lookup p v = 0\" and hp: \"higher p v = 0\" and le: \"q \\<preceq>\\<^sub>p p\"\n  shows \"(lookup q v = 0) \\<and> (higher q v) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup q v = (0::'b) \\<and> higher q v = 0", "using le"], ["proof (prove)\nusing this:\n  q \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. lookup q v = (0::'b) \\<and> higher q v = 0", "unfolding ord_p_def"], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p p \\<or> q = p\n\ngoal (1 subgoal):\n 1. lookup q v = (0::'b) \\<and> higher q v = 0", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. q \\<prec>\\<^sub>p p \\<Longrightarrow>\n    lookup q v = (0::'b) \\<and> higher q v = 0\n 2. q = p \\<Longrightarrow> lookup q v = (0::'b) \\<and> higher q v = 0", "assume \"q \\<prec>\\<^sub>p p\""], ["proof (state)\nthis:\n  q \\<prec>\\<^sub>p p\n\ngoal (2 subgoals):\n 1. q \\<prec>\\<^sub>p p \\<Longrightarrow>\n    lookup q v = (0::'b) \\<and> higher q v = 0\n 2. q = p \\<Longrightarrow> lookup q v = (0::'b) \\<and> higher q v = 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. lookup q v = (0::'b) \\<and> higher q v = 0", "unfolding ord_strict_p_def"], ["proof (prove)\nusing this:\n  \\<exists>v.\n     lookup q v = (0::'b) \\<and>\n     lookup p v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)\n\ngoal (1 subgoal):\n 1. lookup q v = (0::'b) \\<and> higher q v = 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup q x = (0::'b) \\<and>\n       lookup p x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       lookup q v = (0::'b) \\<and> higher q v = 0", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup q x = (0::'b) \\<and>\n       lookup p x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       lookup q v = (0::'b) \\<and> higher q v = 0", "assume \"lookup q w = 0 \\<and> lookup p w \\<noteq> 0 \\<and> (\\<forall>u. w \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)\""], ["proof (state)\nthis:\n  lookup q w = (0::'b) \\<and>\n  lookup p w \\<noteq> (0::'b) \\<and>\n  (\\<forall>u.\n      w \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup q x = (0::'b) \\<and>\n       lookup p x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       lookup q v = (0::'b) \\<and> higher q v = 0", "hence qs: \"lookup q w = 0\" and ps: \"lookup p w \\<noteq> 0\" and u: \"\\<forall>u. w \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u\""], ["proof (prove)\nusing this:\n  lookup q w = (0::'b) \\<and>\n  lookup p w \\<noteq> (0::'b) \\<and>\n  (\\<forall>u.\n      w \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u)\n\ngoal (1 subgoal):\n 1. lookup q w = (0::'b) &&&\n    lookup p w \\<noteq> (0::'b) &&&\n    \\<forall>u.\n       w \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u", "by auto"], ["proof (state)\nthis:\n  lookup q w = (0::'b)\n  lookup p w \\<noteq> (0::'b)\n  \\<forall>u. w \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = lookup p u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup q x = (0::'b) \\<and>\n       lookup p x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       lookup q v = (0::'b) \\<and> higher q v = 0", "from hp"], ["proof (chain)\npicking this:\n  higher p v = 0", "have pu: \"\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = 0\""], ["proof (prove)\nusing this:\n  higher p v = 0\n\ngoal (1 subgoal):\n 1. \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b)", "by (simp only: higher_eq_zero_iff)"], ["proof (state)\nthis:\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup q x = (0::'b) \\<and>\n       lookup p x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       lookup q v = (0::'b) \\<and> higher q v = 0", "from pu[rule_format, of w] ps"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t w \\<Longrightarrow> lookup p w = (0::'b)\n  lookup p w \\<noteq> (0::'b)", "have \"\\<not> v \\<prec>\\<^sub>t w\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t w \\<Longrightarrow> lookup p w = (0::'b)\n  lookup p w \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t w", "by auto"], ["proof (state)\nthis:\n  \\<not> v \\<prec>\\<^sub>t w\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup q x = (0::'b) \\<and>\n       lookup p x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       lookup q v = (0::'b) \\<and> higher q v = 0", "hence \"w \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  \\<not> v \\<prec>\\<^sub>t w\n\ngoal (1 subgoal):\n 1. w \\<preceq>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  w \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup q x = (0::'b) \\<and>\n       lookup p x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       lookup q v = (0::'b) \\<and> higher q v = 0", "hence \"w \\<prec>\\<^sub>t v \\<or> w = v\""], ["proof (prove)\nusing this:\n  w \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. w \\<prec>\\<^sub>t v \\<or> w = v", "by auto"], ["proof (state)\nthis:\n  w \\<prec>\\<^sub>t v \\<or> w = v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup q x = (0::'b) \\<and>\n       lookup p x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       lookup q v = (0::'b) \\<and> higher q v = 0", "hence st: \"w \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  w \\<prec>\\<^sub>t v \\<or> w = v\n\ngoal (1 subgoal):\n 1. w \\<prec>\\<^sub>t v", "proof (rule disjE, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. w = v \\<Longrightarrow> False", "assume \"w = v\""], ["proof (state)\nthis:\n  w = v\n\ngoal (1 subgoal):\n 1. w = v \\<Longrightarrow> False", "from this pt ps"], ["proof (chain)\npicking this:\n  w = v\n  lookup p v = (0::'b)\n  lookup p w \\<noteq> (0::'b)", "show False"], ["proof (prove)\nusing this:\n  w = v\n  lookup p v = (0::'b)\n  lookup p w \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       lookup q x = (0::'b) \\<and>\n       lookup p x \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           x \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup q u = lookup p u) \\<Longrightarrow>\n       lookup q v = (0::'b) \\<and> higher q v = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup q v = (0::'b) \\<and> higher q v = 0", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup q v = (0::'b)\n 2. higher q v = 0", "from u[rule_format, OF st] pt"], ["proof (chain)\npicking this:\n  lookup q v = lookup p v\n  lookup p v = (0::'b)", "show \"lookup q v = 0\""], ["proof (prove)\nusing this:\n  lookup q v = lookup p v\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q v = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup q v = (0::'b)\n\ngoal (1 subgoal):\n 1. higher q v = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. higher q v = 0", "have \"\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = (0::'b)", "proof (intro allI, intro impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup q u = (0::'b)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup q u = (0::'b)", "assume \"v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup q u = (0::'b)", "from this st"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t u\n  w \\<prec>\\<^sub>t v", "have \"w \\<prec>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t u\n  w \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. w \\<prec>\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  w \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup q u = (0::'b)", "from u[rule_format, OF this] pu[rule_format, OF \\<open>v \\<prec>\\<^sub>t u\\<close>]"], ["proof (chain)\npicking this:\n  lookup q u = lookup p u\n  lookup p u = (0::'b)", "show \"lookup q u = 0\""], ["proof (prove)\nusing this:\n  lookup q u = lookup p u\n  lookup p u = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q u = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup q u = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. higher q v = 0", "thus \"higher q v = 0\""], ["proof (prove)\nusing this:\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup q u = (0::'b)\n\ngoal (1 subgoal):\n 1. higher q v = 0", "by (simp only: higher_eq_zero_iff)"], ["proof (state)\nthis:\n  higher q v = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup q v = (0::'b) \\<and> higher q v = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup q v = (0::'b) \\<and> higher q v = 0\n\ngoal (1 subgoal):\n 1. q = p \\<Longrightarrow> lookup q v = (0::'b) \\<and> higher q v = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q = p \\<Longrightarrow> lookup q v = (0::'b) \\<and> higher q v = 0", "assume \"q = p\""], ["proof (state)\nthis:\n  q = p\n\ngoal (1 subgoal):\n 1. q = p \\<Longrightarrow> lookup q v = (0::'b) \\<and> higher q v = 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  q = p\n\ngoal (1 subgoal):\n 1. lookup q v = (0::'b) \\<and> higher q v = 0", "using assms"], ["proof (prove)\nusing this:\n  q = p\n  lookup p v = (0::'b)\n  higher p v = 0\n  q \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. lookup q v = (0::'b) \\<and> higher q v = 0", "by simp"], ["proof (state)\nthis:\n  lookup q v = (0::'b) \\<and> higher q v = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_strict_p_recI:\n  assumes \"lt p = lt q\" and \"lc p = lc q\" and tail: \"tail p \\<prec>\\<^sub>p tail q\"\n  shows \"p \\<prec>\\<^sub>p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "from tail"], ["proof (chain)\npicking this:\n  tail p \\<prec>\\<^sub>p tail q", "obtain v where pt: \"lookup (tail p) v = 0\"\n                      and qt: \"lookup (tail q) v \\<noteq> 0\"\n                      and a: \"\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup (tail p) u = lookup (tail q) u\""], ["proof (prove)\nusing this:\n  tail p \\<prec>\\<^sub>p tail q\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup (tail p) v = (0::'b);\n         lookup (tail q) v \\<noteq> (0::'b);\n         \\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup (tail p) u = lookup (tail q) u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ord_strict_p_def"], ["proof (prove)\nusing this:\n  \\<exists>v.\n     lookup (tail p) v = (0::'b) \\<and>\n     lookup (tail q) v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow>\n         lookup (tail p) u = lookup (tail q) u)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup (tail p) v = (0::'b);\n         lookup (tail q) v \\<noteq> (0::'b);\n         \\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup (tail p) u = lookup (tail q) u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lookup (tail p) v = (0::'b)\n  lookup (tail q) v \\<noteq> (0::'b)\n  \\<forall>u.\n     v \\<prec>\\<^sub>t u \\<longrightarrow>\n     lookup (tail p) u = lookup (tail q) u\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "from qt lookup_zero[of v]"], ["proof (chain)\npicking this:\n  lookup (tail q) v \\<noteq> (0::'b)\n  lookup 0 v = (0::?'a)", "have \"tail q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup (tail q) v \\<noteq> (0::'b)\n  lookup 0 v = (0::?'a)\n\ngoal (1 subgoal):\n 1. tail q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  tail q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "from lt_max[OF qt] lt_tail[OF this]"], ["proof (chain)\npicking this:\n  v \\<preceq>\\<^sub>t lt (tail q)\n  lt (tail q) \\<prec>\\<^sub>t lt q", "have \"v \\<prec>\\<^sub>t lt q\""], ["proof (prove)\nusing this:\n  v \\<preceq>\\<^sub>t lt (tail q)\n  lt (tail q) \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt q", "by simp"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "hence \"v \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "using \\<open>lt p = lt q\\<close>"], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt q\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "unfolding ord_strict_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup p v = (0::'b) \\<and>\n       lookup q v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)", "proof (rule exI[of _ v], intro conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. lookup p v = (0::'b)\n 2. lookup q v \\<noteq> (0::'b)\n 3. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "from lookup_tail[of p v] \\<open>v \\<prec>\\<^sub>t lt p\\<close> pt"], ["proof (chain)\npicking this:\n  lookup (tail p) v =\n  (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b))\n  v \\<prec>\\<^sub>t lt p\n  lookup (tail p) v = (0::'b)", "show \"lookup p v = 0\""], ["proof (prove)\nusing this:\n  lookup (tail p) v =\n  (if v \\<prec>\\<^sub>t lt p then lookup p v else (0::'b))\n  v \\<prec>\\<^sub>t lt p\n  lookup (tail p) v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p v = (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup q v \\<noteq> (0::'b)\n 2. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup q v \\<noteq> (0::'b)\n 2. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "from lookup_tail[of q v] \\<open>v \\<prec>\\<^sub>t lt q\\<close> qt"], ["proof (chain)\npicking this:\n  lookup (tail q) v =\n  (if v \\<prec>\\<^sub>t lt q then lookup q v else (0::'b))\n  v \\<prec>\\<^sub>t lt q\n  lookup (tail q) v \\<noteq> (0::'b)", "show \"lookup q v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup (tail q) v =\n  (if v \\<prec>\\<^sub>t lt q then lookup q v else (0::'b))\n  v \\<prec>\\<^sub>t lt q\n  lookup (tail q) v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q v \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup q v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "assume \"v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "from this a"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t u\n  \\<forall>u.\n     v \\<prec>\\<^sub>t u \\<longrightarrow>\n     lookup (tail p) u = lookup (tail q) u", "have s: \"lookup (tail p) u = lookup (tail q) u\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t u\n  \\<forall>u.\n     v \\<prec>\\<^sub>t u \\<longrightarrow>\n     lookup (tail p) u = lookup (tail q) u\n\ngoal (1 subgoal):\n 1. lookup (tail p) u = lookup (tail q) u", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) u = lookup (tail q) u\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "show \"lookup p u = lookup q u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p u = lookup q u", "proof (cases \"u = lt p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. u = lt p \\<Longrightarrow> lookup p u = lookup q u\n 2. u \\<noteq> lt p \\<Longrightarrow> lookup p u = lookup q u", "case True"], ["proof (state)\nthis:\n  u = lt p\n\ngoal (2 subgoals):\n 1. u = lt p \\<Longrightarrow> lookup p u = lookup q u\n 2. u \\<noteq> lt p \\<Longrightarrow> lookup p u = lookup q u", "from True \\<open>lc p = lc q\\<close> \\<open>lt p = lt q\\<close>"], ["proof (chain)\npicking this:\n  u = lt p\n  lc p = lc q\n  lt p = lt q", "show ?thesis"], ["proof (prove)\nusing this:\n  u = lt p\n  lc p = lc q\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lookup p u = lookup q u", "unfolding lc_def"], ["proof (prove)\nusing this:\n  u = lt p\n  lookup p (lt p) = lookup q (lt q)\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lookup p u = lookup q u", "by simp"], ["proof (state)\nthis:\n  lookup p u = lookup q u\n\ngoal (1 subgoal):\n 1. u \\<noteq> lt p \\<Longrightarrow> lookup p u = lookup q u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<noteq> lt p \\<Longrightarrow> lookup p u = lookup q u", "case False"], ["proof (state)\nthis:\n  u \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. u \\<noteq> lt p \\<Longrightarrow> lookup p u = lookup q u", "from False s lookup_tail_2[of p u] lookup_tail_2[of q u] \\<open>lt p = lt q\\<close>"], ["proof (chain)\npicking this:\n  u \\<noteq> lt p\n  lookup (tail p) u = lookup (tail q) u\n  lookup (tail p) u = (if u = lt p then 0::'b else lookup p u)\n  lookup (tail q) u = (if u = lt q then 0::'b else lookup q u)\n  lt p = lt q", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<noteq> lt p\n  lookup (tail p) u = lookup (tail q) u\n  lookup (tail p) u = (if u = lt p then 0::'b else lookup p u)\n  lookup (tail q) u = (if u = lt q then 0::'b else lookup q u)\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lookup p u = lookup q u", "by simp"], ["proof (state)\nthis:\n  lookup p u = lookup q u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup p u = lookup q u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_strict_p_recE1:\n  assumes \"p \\<prec>\\<^sub>p q\"\n  shows \"q \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "assume \"q = 0\""], ["proof (state)\nthis:\n  q = 0\n\ngoal (1 subgoal):\n 1. q = 0 \\<Longrightarrow> False", "from this assms ord_p_zero_min[of p]"], ["proof (chain)\npicking this:\n  q = 0\n  p \\<prec>\\<^sub>p q\n  0 \\<preceq>\\<^sub>p p", "show False"], ["proof (prove)\nusing this:\n  q = 0\n  p \\<prec>\\<^sub>p q\n  0 \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_strict_p_recE2:\n  assumes \"p \\<noteq> 0\" and \"p \\<prec>\\<^sub>p q\" and \"lt p = lt q\"\n  shows \"lc p = lc q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc p = lc q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lc p = lc q", "from \\<open>p \\<prec>\\<^sub>p q\\<close>"], ["proof (chain)\npicking this:\n  p \\<prec>\\<^sub>p q", "obtain v where pt: \"lookup p v = 0\"\n                          and qt: \"lookup q v \\<noteq> 0\"\n                          and a: \"\\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup p v = (0::'b); lookup q v \\<noteq> (0::'b);\n         \\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ord_strict_p_def"], ["proof (prove)\nusing this:\n  \\<exists>v.\n     lookup p v = (0::'b) \\<and>\n     lookup q v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup p v = (0::'b); lookup q v \\<noteq> (0::'b);\n         \\<forall>u.\n            v \\<prec>\\<^sub>t u \\<longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n  lookup q v \\<noteq> (0::'b)\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\n\ngoal (1 subgoal):\n 1. lc p = lc q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lc p = lc q", "proof (cases \"v \\<prec>\\<^sub>t lt p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t lt p \\<Longrightarrow> lc p = lc q\n 2. \\<not> v \\<prec>\\<^sub>t lt p \\<Longrightarrow> lc p = lc q", "case True"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t lt p \\<Longrightarrow> lc p = lc q\n 2. \\<not> v \\<prec>\\<^sub>t lt p \\<Longrightarrow> lc p = lc q", "from this a"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t lt p\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u", "have \"lookup p (lt p) = lookup q (lt p)\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t lt p\n  \\<forall>u. v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u\n\ngoal (1 subgoal):\n 1. lookup p (lt p) = lookup q (lt p)", "by simp"], ["proof (state)\nthis:\n  lookup p (lt p) = lookup q (lt p)\n\ngoal (2 subgoals):\n 1. v \\<prec>\\<^sub>t lt p \\<Longrightarrow> lc p = lc q\n 2. \\<not> v \\<prec>\\<^sub>t lt p \\<Longrightarrow> lc p = lc q", "thus ?thesis"], ["proof (prove)\nusing this:\n  lookup p (lt p) = lookup q (lt p)\n\ngoal (1 subgoal):\n 1. lc p = lc q", "using \\<open>lt p = lt q\\<close>"], ["proof (prove)\nusing this:\n  lookup p (lt p) = lookup q (lt p)\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lc p = lc q", "unfolding lc_def"], ["proof (prove)\nusing this:\n  lookup p (lt p) = lookup q (lt p)\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. lookup p (lt p) = lookup q (lt q)", "by simp"], ["proof (state)\nthis:\n  lc p = lc q\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t lt p \\<Longrightarrow> lc p = lc q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t lt p \\<Longrightarrow> lc p = lc q", "case False"], ["proof (state)\nthis:\n  \\<not> v \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t lt p \\<Longrightarrow> lc p = lc q", "from this lt_max[OF qt] \\<open>lt p = lt q\\<close>"], ["proof (chain)\npicking this:\n  \\<not> v \\<prec>\\<^sub>t lt p\n  v \\<preceq>\\<^sub>t lt q\n  lt p = lt q", "have \"v = lt p\""], ["proof (prove)\nusing this:\n  \\<not> v \\<prec>\\<^sub>t lt p\n  v \\<preceq>\\<^sub>t lt q\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. v = lt p", "by simp"], ["proof (state)\nthis:\n  v = lt p\n\ngoal (1 subgoal):\n 1. \\<not> v \\<prec>\\<^sub>t lt p \\<Longrightarrow> lc p = lc q", "from this lc_not_0[OF \\<open>p \\<noteq> 0\\<close>] pt"], ["proof (chain)\npicking this:\n  v = lt p\n  lc p \\<noteq> (0::'b)\n  lookup p v = (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  v = lt p\n  lc p \\<noteq> (0::'b)\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. lc p = lc q", "unfolding lc_def"], ["proof (prove)\nusing this:\n  v = lt p\n  lookup p (lt p) \\<noteq> (0::'b)\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p (lt p) = lookup q (lt q)", "by auto"], ["proof (state)\nthis:\n  lc p = lc q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lc p = lc q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_strict_p_rec [code]:\n  \"p \\<prec>\\<^sub>p q =\n  (q \\<noteq> 0 \\<and>\n    (p = 0 \\<or>\n      (let v1 = lt p; v2 = lt q in\n        (v1 \\<prec>\\<^sub>t v2 \\<or> (v1 = v2 \\<and> lookup p v1 = lookup q v2 \\<and> lower p v1 \\<prec>\\<^sub>p lower q v2))\n      )\n    )\n   )\"\n  (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<prec>\\<^sub>p q) =\n    (q \\<noteq> 0 \\<and>\n     (p = 0 \\<or>\n      (let v1 = lt p; v2 = lt q\n       in v1 \\<prec>\\<^sub>t v2 \\<or>\n          v1 = v2 \\<and>\n          lookup p v1 = lookup q v2 \\<and>\n          lower p v1 \\<prec>\\<^sub>p lower q v2)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<prec>\\<^sub>p q \\<Longrightarrow>\n    q \\<noteq> 0 \\<and>\n    (p = 0 \\<or>\n     (let v1 = lt p; v2 = lt q\n      in v1 \\<prec>\\<^sub>t v2 \\<or>\n         v1 = v2 \\<and>\n         lookup p v1 = lookup q v2 \\<and>\n         lower p v1 \\<prec>\\<^sub>p lower q v2))\n 2. q \\<noteq> 0 \\<and>\n    (p = 0 \\<or>\n     (let v1 = lt p; v2 = lt q\n      in v1 \\<prec>\\<^sub>t v2 \\<or>\n         v1 = v2 \\<and>\n         lookup p v1 = lookup q v2 \\<and>\n         lower p v1 \\<prec>\\<^sub>p lower q v2)) \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "assume ?L"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p q\n\ngoal (2 subgoals):\n 1. p \\<prec>\\<^sub>p q \\<Longrightarrow>\n    q \\<noteq> 0 \\<and>\n    (p = 0 \\<or>\n     (let v1 = lt p; v2 = lt q\n      in v1 \\<prec>\\<^sub>t v2 \\<or>\n         v1 = v2 \\<and>\n         lookup p v1 = lookup q v2 \\<and>\n         lower p v1 \\<prec>\\<^sub>p lower q v2))\n 2. q \\<noteq> 0 \\<and>\n    (p = 0 \\<or>\n     (let v1 = lt p; v2 = lt q\n      in v1 \\<prec>\\<^sub>t v2 \\<or>\n         v1 = v2 \\<and>\n         lookup p v1 = lookup q v2 \\<and>\n         lower p v1 \\<prec>\\<^sub>p lower q v2)) \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<and>\n    (p = 0 \\<or>\n     (let v1 = lt p; v2 = lt q\n      in v1 \\<prec>\\<^sub>t v2 \\<or>\n         v1 = v2 \\<and>\n         lookup p v1 = lookup q v2 \\<and>\n         lower p v1 \\<prec>\\<^sub>p lower q v2))", "proof (intro conjI, rule ord_strict_p_recE1, fact)"], ["proof (state)\ngoal (1 subgoal):\n 1. p = 0 \\<or>\n    (let v1 = lt p; v2 = lt q\n     in v1 \\<prec>\\<^sub>t v2 \\<or>\n        v1 = v2 \\<and>\n        lookup p v1 = lookup q v2 \\<and>\n        lower p v1 \\<prec>\\<^sub>p lower q v2)", "have \"((lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q) \\<or> lt p \\<prec>\\<^sub>t lt q) \\<or> p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lt p = lt q \\<and>\n     lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q \\<or>\n     lt p \\<prec>\\<^sub>t lt q) \\<or>\n    p = 0", "proof (intro disjCI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; \\<not> lt p \\<prec>\\<^sub>t lt q\\<rbrakk>\n    \\<Longrightarrow> lt p = lt q \\<and>\n                      lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q", "assume \"p \\<noteq> 0\" and nl: \"\\<not> lt p \\<prec>\\<^sub>t lt q\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n  \\<not> lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; \\<not> lt p \\<prec>\\<^sub>t lt q\\<rbrakk>\n    \\<Longrightarrow> lt p = lt q \\<and>\n                      lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q", "from \\<open>?L\\<close>"], ["proof (chain)\npicking this:\n  p \\<prec>\\<^sub>p q", "have \"p \\<preceq>\\<^sub>p q\""], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. p \\<preceq>\\<^sub>p q", "by simp"], ["proof (state)\nthis:\n  p \\<preceq>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; \\<not> lt p \\<prec>\\<^sub>t lt q\\<rbrakk>\n    \\<Longrightarrow> lt p = lt q \\<and>\n                      lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q", "from ord_p_lt[OF this] nl"], ["proof (chain)\npicking this:\n  lt p \\<preceq>\\<^sub>t lt q\n  \\<not> lt p \\<prec>\\<^sub>t lt q", "have \"lt p = lt q\""], ["proof (prove)\nusing this:\n  lt p \\<preceq>\\<^sub>t lt q\n  \\<not> lt p \\<prec>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. lt p = lt q", "by simp"], ["proof (state)\nthis:\n  lt p = lt q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; \\<not> lt p \\<prec>\\<^sub>t lt q\\<rbrakk>\n    \\<Longrightarrow> lt p = lt q \\<and>\n                      lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q", "show \"lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q", "by (intro conjI, fact, rule ord_strict_p_recE2, fact+, rule ord_p_tail, fact+)"], ["proof (state)\nthis:\n  lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q \\<or>\n   lt p \\<prec>\\<^sub>t lt q) \\<or>\n  p = 0\n\ngoal (1 subgoal):\n 1. p = 0 \\<or>\n    (let v1 = lt p; v2 = lt q\n     in v1 \\<prec>\\<^sub>t v2 \\<or>\n        v1 = v2 \\<and>\n        lookup p v1 = lookup q v2 \\<and>\n        lower p v1 \\<prec>\\<^sub>p lower q v2)", "thus \"p = 0 \\<or>\n            (let v1 = lt p; v2 = lt q in\n              (v1 \\<prec>\\<^sub>t v2 \\<or> v1 = v2 \\<and> lookup p v1 = lookup q v2 \\<and> lower p v1 \\<prec>\\<^sub>p lower q v2)\n            )\""], ["proof (prove)\nusing this:\n  (lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q \\<or>\n   lt p \\<prec>\\<^sub>t lt q) \\<or>\n  p = 0\n\ngoal (1 subgoal):\n 1. p = 0 \\<or>\n    (let v1 = lt p; v2 = lt q\n     in v1 \\<prec>\\<^sub>t v2 \\<or>\n        v1 = v2 \\<and>\n        lookup p v1 = lookup q v2 \\<and>\n        lower p v1 \\<prec>\\<^sub>p lower q v2)", "unfolding lc_def tail_def"], ["proof (prove)\nusing this:\n  (lt p = lt q \\<and>\n   lookup p (lt p) = lookup q (lt q) \\<and>\n   lower p (lt p) \\<prec>\\<^sub>p lower q (lt q) \\<or>\n   lt p \\<prec>\\<^sub>t lt q) \\<or>\n  p = 0\n\ngoal (1 subgoal):\n 1. p = 0 \\<or>\n    (let v1 = lt p; v2 = lt q\n     in v1 \\<prec>\\<^sub>t v2 \\<or>\n        v1 = v2 \\<and>\n        lookup p v1 = lookup q v2 \\<and>\n        lower p v1 \\<prec>\\<^sub>p lower q v2)", "by auto"], ["proof (state)\nthis:\n  p = 0 \\<or>\n  (let v1 = lt p; v2 = lt q\n   in v1 \\<prec>\\<^sub>t v2 \\<or>\n      v1 = v2 \\<and>\n      lookup p v1 = lookup q v2 \\<and>\n      lower p v1 \\<prec>\\<^sub>p lower q v2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q \\<noteq> 0 \\<and>\n  (p = 0 \\<or>\n   (let v1 = lt p; v2 = lt q\n    in v1 \\<prec>\\<^sub>t v2 \\<or>\n       v1 = v2 \\<and>\n       lookup p v1 = lookup q v2 \\<and>\n       lower p v1 \\<prec>\\<^sub>p lower q v2))\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<and>\n    (p = 0 \\<or>\n     (let v1 = lt p; v2 = lt q\n      in v1 \\<prec>\\<^sub>t v2 \\<or>\n         v1 = v2 \\<and>\n         lookup p v1 = lookup q v2 \\<and>\n         lower p v1 \\<prec>\\<^sub>p lower q v2)) \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<and>\n    (p = 0 \\<or>\n     (let v1 = lt p; v2 = lt q\n      in v1 \\<prec>\\<^sub>t v2 \\<or>\n         v1 = v2 \\<and>\n         lookup p v1 = lookup q v2 \\<and>\n         lower p v1 \\<prec>\\<^sub>p lower q v2)) \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "assume ?R"], ["proof (state)\nthis:\n  q \\<noteq> 0 \\<and>\n  (p = 0 \\<or>\n   (let v1 = lt p; v2 = lt q\n    in v1 \\<prec>\\<^sub>t v2 \\<or>\n       v1 = v2 \\<and>\n       lookup p v1 = lookup q v2 \\<and>\n       lower p v1 \\<prec>\\<^sub>p lower q v2))\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<and>\n    (p = 0 \\<or>\n     (let v1 = lt p; v2 = lt q\n      in v1 \\<prec>\\<^sub>t v2 \\<or>\n         v1 = v2 \\<and>\n         lookup p v1 = lookup q v2 \\<and>\n         lower p v1 \\<prec>\\<^sub>p lower q v2)) \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "hence \"q \\<noteq> 0\"\n    and dis: \"p = 0 \\<or>\n                (let v1 = lt p; v2 = lt q in\n                  (v1 \\<prec>\\<^sub>t v2 \\<or> v1 = v2 \\<and> lookup p v1 = lookup q v2 \\<and> lower p v1 \\<prec>\\<^sub>p lower q v2)\n                )\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0 \\<and>\n  (p = 0 \\<or>\n   (let v1 = lt p; v2 = lt q\n    in v1 \\<prec>\\<^sub>t v2 \\<or>\n       v1 = v2 \\<and>\n       lookup p v1 = lookup q v2 \\<and>\n       lower p v1 \\<prec>\\<^sub>p lower q v2))\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 &&&\n    p = 0 \\<or>\n    (let v1 = lt p; v2 = lt q\n     in v1 \\<prec>\\<^sub>t v2 \\<or>\n        v1 = v2 \\<and>\n        lookup p v1 = lookup q v2 \\<and>\n        lower p v1 \\<prec>\\<^sub>p lower q v2)", "by simp_all"], ["proof (state)\nthis:\n  q \\<noteq> 0\n  p = 0 \\<or>\n  (let v1 = lt p; v2 = lt q\n   in v1 \\<prec>\\<^sub>t v2 \\<or>\n      v1 = v2 \\<and>\n      lookup p v1 = lookup q v2 \\<and>\n      lower p v1 \\<prec>\\<^sub>p lower q v2)\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<and>\n    (p = 0 \\<or>\n     (let v1 = lt p; v2 = lt q\n      in v1 \\<prec>\\<^sub>t v2 \\<or>\n         v1 = v2 \\<and>\n         lookup p v1 = lookup q v2 \\<and>\n         lower p v1 \\<prec>\\<^sub>p lower q v2)) \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "show ?L"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p \\<prec>\\<^sub>p q\n 2. p \\<noteq> 0 \\<Longrightarrow> p \\<prec>\\<^sub>p q", "assume \"p = 0\""], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p \\<prec>\\<^sub>p q\n 2. p \\<noteq> 0 \\<Longrightarrow> p \\<prec>\\<^sub>p q", "hence \"p \\<preceq>\\<^sub>p q\""], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. p \\<preceq>\\<^sub>p q", "using ord_p_zero_min[of q]"], ["proof (prove)\nusing this:\n  p = 0\n  0 \\<preceq>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. p \\<preceq>\\<^sub>p q", "by simp"], ["proof (state)\nthis:\n  p \\<preceq>\\<^sub>p q\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p \\<prec>\\<^sub>p q\n 2. p \\<noteq> 0 \\<Longrightarrow> p \\<prec>\\<^sub>p q", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<preceq>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "using \\<open>p = 0\\<close> \\<open>q \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  p \\<preceq>\\<^sub>p q\n  p = 0\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "by simp"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<prec>\\<^sub>p q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<prec>\\<^sub>p q", "assume \"p \\<noteq> 0\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<prec>\\<^sub>p q", "hence \"let v1 = lt p; v2 = lt q in\n            (v1 \\<prec>\\<^sub>t v2 \\<or> v1 = v2 \\<and> lookup p v1 = lookup q v2 \\<and> lower p v1 \\<prec>\\<^sub>p lower q v2)\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. let v1 = lt p; v2 = lt q\n    in v1 \\<prec>\\<^sub>t v2 \\<or>\n       v1 = v2 \\<and>\n       lookup p v1 = lookup q v2 \\<and>\n       lower p v1 \\<prec>\\<^sub>p lower q v2", "using dis"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  p = 0 \\<or>\n  (let v1 = lt p; v2 = lt q\n   in v1 \\<prec>\\<^sub>t v2 \\<or>\n      v1 = v2 \\<and>\n      lookup p v1 = lookup q v2 \\<and>\n      lower p v1 \\<prec>\\<^sub>p lower q v2)\n\ngoal (1 subgoal):\n 1. let v1 = lt p; v2 = lt q\n    in v1 \\<prec>\\<^sub>t v2 \\<or>\n       v1 = v2 \\<and>\n       lookup p v1 = lookup q v2 \\<and>\n       lower p v1 \\<prec>\\<^sub>p lower q v2", "by simp"], ["proof (state)\nthis:\n  let v1 = lt p; v2 = lt q\n  in v1 \\<prec>\\<^sub>t v2 \\<or>\n     v1 = v2 \\<and>\n     lookup p v1 = lookup q v2 \\<and> lower p v1 \\<prec>\\<^sub>p lower q v2\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<prec>\\<^sub>p q", "hence \"lt p \\<prec>\\<^sub>t lt q \\<or> (lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q)\""], ["proof (prove)\nusing this:\n  let v1 = lt p; v2 = lt q\n  in v1 \\<prec>\\<^sub>t v2 \\<or>\n     v1 = v2 \\<and>\n     lookup p v1 = lookup q v2 \\<and> lower p v1 \\<prec>\\<^sub>p lower q v2\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt q \\<or>\n    lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q", "unfolding lc_def tail_def"], ["proof (prove)\nusing this:\n  let v1 = lt p; v2 = lt q\n  in v1 \\<prec>\\<^sub>t v2 \\<or>\n     v1 = v2 \\<and>\n     lookup p v1 = lookup q v2 \\<and> lower p v1 \\<prec>\\<^sub>p lower q v2\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t lt q \\<or>\n    lt p = lt q \\<and>\n    lookup p (lt p) = lookup q (lt q) \\<and>\n    lower p (lt p) \\<prec>\\<^sub>p lower q (lt q)", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t lt q \\<or>\n  lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<prec>\\<^sub>p q", "thus ?thesis"], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t lt q \\<or>\n  lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> p \\<prec>\\<^sub>p q\n 2. lt p = lt q \\<and>\n    lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "assume \"lt p \\<prec>\\<^sub>t lt q\""], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t lt q\n\ngoal (2 subgoals):\n 1. lt p \\<prec>\\<^sub>t lt q \\<Longrightarrow> p \\<prec>\\<^sub>p q\n 2. lt p = lt q \\<and>\n    lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "from lt_ord_p[OF this]"], ["proof (chain)\npicking this:\n  p \\<prec>\\<^sub>p q", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "."], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. lt p = lt q \\<and>\n    lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p = lt q \\<and>\n    lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "assume \"lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q\""], ["proof (state)\nthis:\n  lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q\n\ngoal (1 subgoal):\n 1. lt p = lt q \\<and>\n    lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "hence \"lt p = lt q\" and \"lc p = lc q\" and \"tail p \\<prec>\\<^sub>p tail q\""], ["proof (prove)\nusing this:\n  lt p = lt q \\<and> lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q\n\ngoal (1 subgoal):\n 1. lt p = lt q &&& lc p = lc q &&& tail p \\<prec>\\<^sub>p tail q", "by simp_all"], ["proof (state)\nthis:\n  lt p = lt q\n  lc p = lc q\n  tail p \\<prec>\\<^sub>p tail q\n\ngoal (1 subgoal):\n 1. lt p = lt q \\<and>\n    lc p = lc q \\<and> tail p \\<prec>\\<^sub>p tail q \\<Longrightarrow>\n    p \\<prec>\\<^sub>p q", "thus ?thesis"], ["proof (prove)\nusing this:\n  lt p = lt q\n  lc p = lc q\n  tail p \\<prec>\\<^sub>p tail q\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "by (rule ord_strict_p_recI)"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_strict_p_monomial_iff: \"p \\<prec>\\<^sub>p monomial c v \\<longleftrightarrow> (c \\<noteq> 0 \\<and> (p = 0 \\<or> lt p \\<prec>\\<^sub>t v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<prec>\\<^sub>p monomial c v) =\n    (c \\<noteq> (0::'b) \\<and> (p = 0 \\<or> lt p \\<prec>\\<^sub>t v))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (p \\<prec>\\<^sub>p monomial c v) =\n    (c \\<noteq> (0::'b) \\<and> (p = 0 \\<or> lt p \\<prec>\\<^sub>t v))", "from ord_p_zero_min[of \"tail p\"]"], ["proof (chain)\npicking this:\n  0 \\<preceq>\\<^sub>p tail p", "have *: \"\\<not> tail p \\<prec>\\<^sub>p 0\""], ["proof (prove)\nusing this:\n  0 \\<preceq>\\<^sub>p tail p\n\ngoal (1 subgoal):\n 1. \\<not> tail p \\<prec>\\<^sub>p 0", "by auto"], ["proof (state)\nthis:\n  \\<not> tail p \\<prec>\\<^sub>p 0\n\ngoal (1 subgoal):\n 1. (p \\<prec>\\<^sub>p monomial c v) =\n    (c \\<noteq> (0::'b) \\<and> (p = 0 \\<or> lt p \\<prec>\\<^sub>t v))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<prec>\\<^sub>p monomial c v) =\n    (c \\<noteq> (0::'b) \\<and> (p = 0 \\<or> lt p \\<prec>\\<^sub>t v))", "by (simp add: ord_strict_p_rec[of p] Let_def tail_def[symmetric] lc_def[symmetric]\n        monomial_0_iff tail_monomial *, simp add: lt_monomial cong: conj_cong)"], ["proof (state)\nthis:\n  (p \\<prec>\\<^sub>p monomial c v) =\n  (c \\<noteq> (0::'b) \\<and> (p = 0 \\<or> lt p \\<prec>\\<^sub>t v))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary ord_strict_p_monomial_plus:\n  assumes \"p \\<prec>\\<^sub>p monomial c v\" and \"q \\<prec>\\<^sub>p monomial c v\"\n  shows \"p + q \\<prec>\\<^sub>p monomial c v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p + q \\<prec>\\<^sub>p monomial c v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p + q \\<prec>\\<^sub>p monomial c v", "from assms(1)"], ["proof (chain)\npicking this:\n  p \\<prec>\\<^sub>p monomial c v", "have \"c \\<noteq> 0\" and \"p = 0 \\<or> lt p \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p monomial c v\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) &&& p = 0 \\<or> lt p \\<prec>\\<^sub>t v", "by (simp_all add: ord_strict_p_monomial_iff)"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n  p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. p + q \\<prec>\\<^sub>p monomial c v", "from this(2)"], ["proof (chain)\npicking this:\n  p = 0 \\<or> lt p \\<prec>\\<^sub>t v", "show ?thesis"], ["proof (prove)\nusing this:\n  p = 0 \\<or> lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. p + q \\<prec>\\<^sub>p monomial c v", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p + q \\<prec>\\<^sub>p monomial c v\n 2. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "assume \"p = 0\""], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p + q \\<prec>\\<^sub>p monomial c v\n 2. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "with assms(2)"], ["proof (chain)\npicking this:\n  q \\<prec>\\<^sub>p monomial c v\n  p = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p monomial c v\n  p = 0\n\ngoal (1 subgoal):\n 1. p + q \\<prec>\\<^sub>p monomial c v", "by simp"], ["proof (state)\nthis:\n  p + q \\<prec>\\<^sub>p monomial c v\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "assume \"lt p \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "from assms(2)"], ["proof (chain)\npicking this:\n  q \\<prec>\\<^sub>p monomial c v", "have \"q = 0 \\<or> lt q \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p monomial c v\n\ngoal (1 subgoal):\n 1. q = 0 \\<or> lt q \\<prec>\\<^sub>t v", "by (simp add: ord_strict_p_monomial_iff)"], ["proof (state)\nthis:\n  q = 0 \\<or> lt q \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "thus ?thesis"], ["proof (prove)\nusing this:\n  q = 0 \\<or> lt q \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. p + q \\<prec>\\<^sub>p monomial c v", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. q = 0 \\<Longrightarrow> p + q \\<prec>\\<^sub>p monomial c v\n 2. lt q \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "assume \"q = 0\""], ["proof (state)\nthis:\n  q = 0\n\ngoal (2 subgoals):\n 1. q = 0 \\<Longrightarrow> p + q \\<prec>\\<^sub>p monomial c v\n 2. lt q \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "with assms(1)"], ["proof (chain)\npicking this:\n  p \\<prec>\\<^sub>p monomial c v\n  q = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p monomial c v\n  q = 0\n\ngoal (1 subgoal):\n 1. p + q \\<prec>\\<^sub>p monomial c v", "by simp"], ["proof (state)\nthis:\n  p + q \\<prec>\\<^sub>p monomial c v\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "assume \"lt q \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "with \\<open>lt p \\<prec>\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t v\n  lt q \\<prec>\\<^sub>t v", "have \"lt (p + q) \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t v\n  lt q \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt (p + q) \\<prec>\\<^sub>t v", "using lt_plus_le_max ord_term_lin.dual_order.strict_trans2 ord_term_lin.max_less_iff_conj"], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t v\n  lt q \\<prec>\\<^sub>t v\n  lt (?p + ?q) \\<preceq>\\<^sub>t ord_term_lin.max (lt ?p) (lt ?q)\n  \\<lbrakk>?b \\<prec>\\<^sub>t ?a; ?c \\<preceq>\\<^sub>t ?b\\<rbrakk>\n  \\<Longrightarrow> ?c \\<prec>\\<^sub>t ?a\n  (ord_term_lin.max ?x ?y \\<prec>\\<^sub>t ?z) =\n  (?x \\<prec>\\<^sub>t ?z \\<and> ?y \\<prec>\\<^sub>t ?z)\n\ngoal (1 subgoal):\n 1. lt (p + q) \\<prec>\\<^sub>t v", "by blast"], ["proof (state)\nthis:\n  lt (p + q) \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t v \\<Longrightarrow>\n    p + q \\<prec>\\<^sub>p monomial c v", "with \\<open>c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)\n  lt (p + q) \\<prec>\\<^sub>t v", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  lt (p + q) \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. p + q \\<prec>\\<^sub>p monomial c v", "by (simp add: ord_strict_p_monomial_iff)"], ["proof (state)\nthis:\n  p + q \\<prec>\\<^sub>p monomial c v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p + q \\<prec>\\<^sub>p monomial c v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p + q \\<prec>\\<^sub>p monomial c v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_strict_p_monom_mult:\n  assumes \"p \\<prec>\\<^sub>p q\" and \"c \\<noteq> (0::'b::semiring_no_zero_divisors)\"\n  shows \"monom_mult c t p \\<prec>\\<^sub>p monom_mult c t q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult c t p \\<prec>\\<^sub>p monom_mult c t q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. monom_mult c t p \\<prec>\\<^sub>p monom_mult c t q", "from assms(1)"], ["proof (chain)\npicking this:\n  p \\<prec>\\<^sub>p q", "obtain v where 1: \"lookup p v = 0\" and 2: \"lookup q v \\<noteq> 0\"\n    and 3: \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup p v = (0::'b); lookup q v \\<noteq> (0::'b);\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ord_strict_p_def"], ["proof (prove)\nusing this:\n  \\<exists>v.\n     lookup p v = (0::'b) \\<and>\n     lookup q v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup p v = (0::'b); lookup q v \\<noteq> (0::'b);\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n  lookup q v \\<noteq> (0::'b)\n  v \\<prec>\\<^sub>t ?u22 \\<Longrightarrow> lookup p ?u22 = lookup q ?u22\n\ngoal (1 subgoal):\n 1. monom_mult c t p \\<prec>\\<^sub>p monom_mult c t q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult c t p \\<prec>\\<^sub>p monom_mult c t q", "unfolding ord_strict_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup (monom_mult c t p) v = (0::'b) \\<and>\n       lookup (monom_mult c t q) v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup (monom_mult c t p) u = lookup (monom_mult c t q) u)", "proof (intro exI conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. lookup (monom_mult c t p) ?v = (0::'b)\n 2. lookup (monom_mult c t q) ?v \\<noteq> (0::'b)\n 3. \\<And>u.\n       ?v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "from 1"], ["proof (chain)\npicking this:\n  lookup p v = (0::'b)", "show \"lookup (monom_mult c t p) (t \\<oplus> v) = 0\""], ["proof (prove)\nusing this:\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c t p) (t \\<oplus> v) = (0::'b)", "by (simp add: lookup_monom_mult_plus)"], ["proof (state)\nthis:\n  lookup (monom_mult c t p) (t \\<oplus> v) = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup (monom_mult c t q) (t \\<oplus> v) \\<noteq> (0::'b)\n 2. \\<And>u.\n       t \\<oplus> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (monom_mult c t q) (t \\<oplus> v) \\<noteq> (0::'b)\n 2. \\<And>u.\n       t \\<oplus> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "from 2 assms(2)"], ["proof (chain)\npicking this:\n  lookup q v \\<noteq> (0::'b)\n  c \\<noteq> (0::'b)", "show \"lookup (monom_mult c t q) (t \\<oplus> v) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup q v \\<noteq> (0::'b)\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c t q) (t \\<oplus> v) \\<noteq> (0::'b)", "by (simp add: lookup_monom_mult_plus)"], ["proof (state)\nthis:\n  lookup (monom_mult c t q) (t \\<oplus> v) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       t \\<oplus> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       t \\<oplus> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       t \\<oplus> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "assume \"t \\<oplus> v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  t \\<oplus> v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       t \\<oplus> v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "show \"lookup (monom_mult c t p) u = lookup (monom_mult c t q) u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "proof (cases \"t adds\\<^sub>p u\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u\n 2. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "case True"], ["proof (state)\nthis:\n  t adds\\<^sub>p u\n\ngoal (2 subgoals):\n 1. t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u\n 2. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "then"], ["proof (chain)\npicking this:\n  t adds\\<^sub>p u", "obtain w where u: \"u = t \\<oplus> w\""], ["proof (prove)\nusing this:\n  t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. (\\<And>w. u = t \\<oplus> w \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u = t \\<oplus> w\n\ngoal (2 subgoals):\n 1. t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u\n 2. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "from \\<open>t \\<oplus> v \\<prec>\\<^sub>t u\\<close>"], ["proof (chain)\npicking this:\n  t \\<oplus> v \\<prec>\\<^sub>t u", "have \"v \\<prec>\\<^sub>t w\""], ["proof (prove)\nusing this:\n  t \\<oplus> v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t w", "unfolding u"], ["proof (prove)\nusing this:\n  t \\<oplus> v \\<prec>\\<^sub>t t \\<oplus> w\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t w", "by (rule ord_term_strict_canc)"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t w\n\ngoal (2 subgoals):\n 1. t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u\n 2. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "hence \"lookup p w = lookup q w\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t w\n\ngoal (1 subgoal):\n 1. lookup p w = lookup q w", "by (rule 3)"], ["proof (state)\nthis:\n  lookup p w = lookup q w\n\ngoal (2 subgoals):\n 1. t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u\n 2. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "thus ?thesis"], ["proof (prove)\nusing this:\n  lookup p w = lookup q w\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "by (simp add: u lookup_monom_mult_plus)"], ["proof (state)\nthis:\n  lookup (monom_mult c t p) u = lookup (monom_mult c t q) u\n\ngoal (1 subgoal):\n 1. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "case False"], ["proof (state)\nthis:\n  \\<not> t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. \\<not> t adds\\<^sub>p u \\<Longrightarrow>\n    lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c t p) u = lookup (monom_mult c t q) u", "by (simp add: lookup_monom_mult)"], ["proof (state)\nthis:\n  lookup (monom_mult c t p) u = lookup (monom_mult c t q) u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (monom_mult c t p) u = lookup (monom_mult c t q) u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom_mult c t p \\<prec>\\<^sub>p monom_mult c t q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_strict_p_plus:\n  assumes \"p \\<prec>\\<^sub>p q\" and \"keys r \\<inter> keys q = {}\"\n  shows \"p + r \\<prec>\\<^sub>p q + r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p + r \\<prec>\\<^sub>p q + r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p + r \\<prec>\\<^sub>p q + r", "from assms(1)"], ["proof (chain)\npicking this:\n  p \\<prec>\\<^sub>p q", "obtain v where 1: \"lookup p v = 0\" and 2: \"lookup q v \\<noteq> 0\"\n    and 3: \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup p v = (0::'b); lookup q v \\<noteq> (0::'b);\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ord_strict_p_def"], ["proof (prove)\nusing this:\n  \\<exists>v.\n     lookup p v = (0::'b) \\<and>\n     lookup q v \\<noteq> (0::'b) \\<and>\n     (\\<forall>u.\n         v \\<prec>\\<^sub>t u \\<longrightarrow> lookup p u = lookup q u)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>lookup p v = (0::'b); lookup q v \\<noteq> (0::'b);\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n  lookup q v \\<noteq> (0::'b)\n  v \\<prec>\\<^sub>t ?u22 \\<Longrightarrow> lookup p ?u22 = lookup q ?u22\n\ngoal (1 subgoal):\n 1. p + r \\<prec>\\<^sub>p q + r", "have eq: \"lookup r v = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup r v = (0::'b)", "by (meson \"2\" assms(2) disjoint_iff_not_equal in_keys_iff)"], ["proof (state)\nthis:\n  lookup r v = (0::'b)\n\ngoal (1 subgoal):\n 1. p + r \\<prec>\\<^sub>p q + r", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p + r \\<prec>\\<^sub>p q + r", "unfolding ord_strict_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup (p + r) v = (0::'b) \\<and>\n       lookup (q + r) v \\<noteq> (0::'b) \\<and>\n       (\\<forall>u.\n           v \\<prec>\\<^sub>t u \\<longrightarrow>\n           lookup (p + r) u = lookup (q + r) u)", "proof (intro exI conjI allI impI, simp_all add: lookup_add)"], ["proof (state)\ngoal (3 subgoals):\n 1. lookup p ?v + lookup r ?v = (0::'b)\n 2. lookup q ?v + lookup r ?v \\<noteq> (0::'b)\n 3. \\<And>u.\n       ?v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup p u + lookup r u = lookup q u + lookup r u", "from 1"], ["proof (chain)\npicking this:\n  lookup p v = (0::'b)", "show \"lookup p v + lookup r v = 0\""], ["proof (prove)\nusing this:\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p v + lookup r v = (0::'b)", "by (simp add: eq)"], ["proof (state)\nthis:\n  lookup p v + lookup r v = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup q v + lookup r v \\<noteq> (0::'b)\n 2. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup p u + lookup r u = lookup q u + lookup r u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup q v + lookup r v \\<noteq> (0::'b)\n 2. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup p u + lookup r u = lookup q u + lookup r u", "from 2"], ["proof (chain)\npicking this:\n  lookup q v \\<noteq> (0::'b)", "show \"lookup q v + lookup r v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup q v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q v + lookup r v \\<noteq> (0::'b)", "by (simp add: eq)"], ["proof (state)\nthis:\n  lookup q v + lookup r v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup p u + lookup r u = lookup q u + lookup r u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup p u + lookup r u = lookup q u + lookup r u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup p u + lookup r u = lookup q u + lookup r u", "assume \"v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup p u + lookup r u = lookup q u + lookup r u", "hence \"lookup p u = lookup q u\""], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. lookup p u = lookup q u", "by (rule 3)"], ["proof (state)\nthis:\n  lookup p u = lookup q u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       v \\<prec>\\<^sub>t u \\<Longrightarrow>\n       lookup p u + lookup r u = lookup q u + lookup r u", "thus \"lookup p u + lookup r u = lookup q u + lookup r u\""], ["proof (prove)\nusing this:\n  lookup p u = lookup q u\n\ngoal (1 subgoal):\n 1. lookup p u + lookup r u = lookup q u + lookup r u", "by simp"], ["proof (state)\nthis:\n  lookup p u + lookup r u = lookup q u + lookup r u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p + r \\<prec>\\<^sub>p q + r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma poly_mapping_tail_induct [case_names 0 tail]:\n  assumes \"P 0\" and \"\\<And>p. p \\<noteq> 0 \\<Longrightarrow> P (tail p) \\<Longrightarrow> P p\"\n  shows \"P p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P p", "proof (induct \"card (keys p)\" arbitrary: p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p. 0 = card (keys p) \\<Longrightarrow> P p\n 2. \\<And>x p.\n       \\<lbrakk>\\<And>p. x = card (keys p) \\<Longrightarrow> P p;\n        Suc x = card (keys p)\\<rbrakk>\n       \\<Longrightarrow> P p", "case 0"], ["proof (state)\nthis:\n  0 = card (keys p)\n\ngoal (2 subgoals):\n 1. \\<And>p. 0 = card (keys p) \\<Longrightarrow> P p\n 2. \\<And>x p.\n       \\<lbrakk>\\<And>p. x = card (keys p) \\<Longrightarrow> P p;\n        Suc x = card (keys p)\\<rbrakk>\n       \\<Longrightarrow> P p", "with finite_keys[of p]"], ["proof (chain)\npicking this:\n  finite (keys p)\n  0 = card (keys p)", "have \"keys p = {}\""], ["proof (prove)\nusing this:\n  finite (keys p)\n  0 = card (keys p)\n\ngoal (1 subgoal):\n 1. keys p = {}", "by simp"], ["proof (state)\nthis:\n  keys p = {}\n\ngoal (2 subgoals):\n 1. \\<And>p. 0 = card (keys p) \\<Longrightarrow> P p\n 2. \\<And>x p.\n       \\<lbrakk>\\<And>p. x = card (keys p) \\<Longrightarrow> P p;\n        Suc x = card (keys p)\\<rbrakk>\n       \\<Longrightarrow> P p", "hence \"p = 0\""], ["proof (prove)\nusing this:\n  keys p = {}\n\ngoal (1 subgoal):\n 1. p = 0", "by simp"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. \\<And>p. 0 = card (keys p) \\<Longrightarrow> P p\n 2. \\<And>x p.\n       \\<lbrakk>\\<And>p. x = card (keys p) \\<Longrightarrow> P p;\n        Suc x = card (keys p)\\<rbrakk>\n       \\<Longrightarrow> P p", "from \\<open>P 0\\<close>"], ["proof (chain)\npicking this:\n  P 0", "show ?case"], ["proof (prove)\nusing this:\n  P 0\n\ngoal (1 subgoal):\n 1. P p", "unfolding \\<open>p = 0\\<close>"], ["proof (prove)\nusing this:\n  P 0\n\ngoal (1 subgoal):\n 1. P 0", "."], ["proof (state)\nthis:\n  P p\n\ngoal (1 subgoal):\n 1. \\<And>x p.\n       \\<lbrakk>\\<And>p. x = card (keys p) \\<Longrightarrow> P p;\n        Suc x = card (keys p)\\<rbrakk>\n       \\<Longrightarrow> P p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x p.\n       \\<lbrakk>\\<And>p. x = card (keys p) \\<Longrightarrow> P p;\n        Suc x = card (keys p)\\<rbrakk>\n       \\<Longrightarrow> P p", "case ind: (Suc n)"], ["proof (state)\nthis:\n  n = card (keys ?p22) \\<Longrightarrow> P ?p22\n  Suc n = card (keys p)\n\ngoal (1 subgoal):\n 1. \\<And>x p.\n       \\<lbrakk>\\<And>p. x = card (keys p) \\<Longrightarrow> P p;\n        Suc x = card (keys p)\\<rbrakk>\n       \\<Longrightarrow> P p", "from ind(2)"], ["proof (chain)\npicking this:\n  Suc n = card (keys p)", "have \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  Suc n = card (keys p)\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x p.\n       \\<lbrakk>\\<And>p. x = card (keys p) \\<Longrightarrow> P p;\n        Suc x = card (keys p)\\<rbrakk>\n       \\<Longrightarrow> P p", "hence \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x p.\n       \\<lbrakk>\\<And>p. x = card (keys p) \\<Longrightarrow> P p;\n        Suc x = card (keys p)\\<rbrakk>\n       \\<Longrightarrow> P p", "thus ?case"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. P p", "proof (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. P (tail p)", "show \"P (tail p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (tail p)", "proof (rule ind(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. n = card (keys (tail p))", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"lt p \\<in> keys p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt p \\<in> keys p", "by (rule lt_in_keys)"], ["proof (state)\nthis:\n  lt p \\<in> keys p\n\ngoal (1 subgoal):\n 1. n = card (keys (tail p))", "hence \"card (keys (tail p)) = card (keys p) - 1\""], ["proof (prove)\nusing this:\n  lt p \\<in> keys p\n\ngoal (1 subgoal):\n 1. card (keys (tail p)) = card (keys p) - 1", "by (simp add: keys_tail)"], ["proof (state)\nthis:\n  card (keys (tail p)) = card (keys p) - 1\n\ngoal (1 subgoal):\n 1. n = card (keys (tail p))", "also"], ["proof (state)\nthis:\n  card (keys (tail p)) = card (keys p) - 1\n\ngoal (1 subgoal):\n 1. n = card (keys (tail p))", "have \"... = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (keys p) - 1 = n", "unfolding ind(2)[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n - 1 = n", "by simp"], ["proof (state)\nthis:\n  card (keys p) - 1 = n\n\ngoal (1 subgoal):\n 1. n = card (keys (tail p))", "finally"], ["proof (chain)\npicking this:\n  card (keys (tail p)) = n", "show \"n = card (keys (tail p))\""], ["proof (prove)\nusing this:\n  card (keys (tail p)) = n\n\ngoal (1 subgoal):\n 1. n = card (keys (tail p))", "by simp"], ["proof (state)\nthis:\n  n = card (keys (tail p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (tail p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma poly_mapping_neqE:\n  assumes \"p \\<noteq> q\"\n  obtains v where \"v \\<in> keys p \\<union> keys q\" and \"lookup p v \\<noteq> lookup q v\"\n    and \"\\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p \\<union> keys q;\n         lookup p v \\<noteq> lookup q v;\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p \\<union> keys q;\n         lookup p v \\<noteq> lookup q v;\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?A = \"{v. lookup p v \\<noteq> lookup q v}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p \\<union> keys q;\n         lookup p v \\<noteq> lookup q v;\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define v where \"v = ord_term_lin.Max ?A\""], ["proof (state)\nthis:\n  v = ord_term_lin.Max {v. lookup p v \\<noteq> lookup q v}\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p \\<union> keys q;\n         lookup p v \\<noteq> lookup q v;\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?A \\<subseteq> keys p \\<union> keys q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {v. lookup p v \\<noteq> lookup q v} \\<subseteq> keys p \\<union> keys q", "using UnI2 in_keys_iff"], ["proof (prove)\nusing this:\n  ?c \\<in> ?B \\<Longrightarrow> ?c \\<in> ?A \\<union> ?B\n  (?x \\<in> keys ?s) = (lookup ?s ?x \\<noteq> (0::?'b))\n\ngoal (1 subgoal):\n 1. {v. lookup p v \\<noteq> lookup q v} \\<subseteq> keys p \\<union> keys q", "by fastforce"], ["proof (state)\nthis:\n  {v. lookup p v \\<noteq> lookup q v} \\<subseteq> keys p \\<union> keys q\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p \\<union> keys q;\n         lookup p v \\<noteq> lookup q v;\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  {v. lookup p v \\<noteq> lookup q v} \\<subseteq> keys p \\<union> keys q\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p \\<union> keys q;\n         lookup p v \\<noteq> lookup q v;\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"finite ...\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (keys p \\<union> keys q)", "by (rule finite_UnI) (fact finite_keys)+"], ["proof (state)\nthis:\n  finite (keys p \\<union> keys q)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p \\<union> keys q;\n         lookup p v \\<noteq> lookup q v;\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally(finite_subset)"], ["proof (chain)\npicking this:\n  finite {v. lookup p v \\<noteq> lookup q v}", "have fin: \"finite ?A\""], ["proof (prove)\nusing this:\n  finite {v. lookup p v \\<noteq> lookup q v}\n\ngoal (1 subgoal):\n 1. finite {v. lookup p v \\<noteq> lookup q v}", "."], ["proof (state)\nthis:\n  finite {v. lookup p v \\<noteq> lookup q v}\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p \\<union> keys q;\n         lookup p v \\<noteq> lookup q v;\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  finite {v. lookup p v \\<noteq> lookup q v}\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p \\<union> keys q;\n         lookup p v \\<noteq> lookup q v;\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {v. lookup p v \\<noteq> lookup q v} \\<noteq> {}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. {v. lookup p v \\<noteq> lookup q v} = {} \\<Longrightarrow> False", "assume \"?A = {}\""], ["proof (state)\nthis:\n  {v. lookup p v \\<noteq> lookup q v} = {}\n\ngoal (1 subgoal):\n 1. {v. lookup p v \\<noteq> lookup q v} = {} \\<Longrightarrow> False", "hence \"p = q\""], ["proof (prove)\nusing this:\n  {v. lookup p v \\<noteq> lookup q v} = {}\n\ngoal (1 subgoal):\n 1. p = q", "using poly_mapping_eqI"], ["proof (prove)\nusing this:\n  {v. lookup p v \\<noteq> lookup q v} = {}\n  (\\<And>k. lookup ?f k = lookup ?g k) \\<Longrightarrow> ?f = ?g\n\ngoal (1 subgoal):\n 1. p = q", "by fastforce"], ["proof (state)\nthis:\n  p = q\n\ngoal (1 subgoal):\n 1. {v. lookup p v \\<noteq> lookup q v} = {} \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  p \\<noteq> q\n  p = q", "show False"], ["proof (prove)\nusing this:\n  p \\<noteq> q\n  p = q\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {v. lookup p v \\<noteq> lookup q v} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p \\<union> keys q;\n         lookup p v \\<noteq> lookup q v;\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  finite {v. lookup p v \\<noteq> lookup q v}\n  {v. lookup p v \\<noteq> lookup q v} \\<noteq> {}", "have \"v \\<in> ?A\""], ["proof (prove)\nusing this:\n  finite {v. lookup p v \\<noteq> lookup q v}\n  {v. lookup p v \\<noteq> lookup q v} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. v \\<in> {v. lookup p v \\<noteq> lookup q v}", "unfolding v_def"], ["proof (prove)\nusing this:\n  finite {v. lookup p v \\<noteq> lookup q v}\n  {v. lookup p v \\<noteq> lookup q v} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. ord_term_lin.Max {v. lookup p v \\<noteq> lookup q v}\n    \\<in> {v. lookup p v \\<noteq> lookup q v}", "by (rule ord_term_lin.Max_in)"], ["proof (state)\nthis:\n  v \\<in> {v. lookup p v \\<noteq> lookup q v}\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p \\<union> keys q;\n         lookup p v \\<noteq> lookup q v;\n         \\<And>u.\n            v \\<prec>\\<^sub>t u \\<Longrightarrow>\n            lookup p u = lookup q u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. ?v22 \\<in> keys p \\<union> keys q\n 2. lookup p ?v22 \\<noteq> lookup q ?v22\n 3. \\<And>u.\n       ?v22 \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "from \\<open>?A \\<subseteq> keys p \\<union> keys q\\<close> \\<open>v \\<in> ?A\\<close>"], ["proof (chain)\npicking this:\n  {v. lookup p v \\<noteq> lookup q v} \\<subseteq> keys p \\<union> keys q\n  v \\<in> {v. lookup p v \\<noteq> lookup q v}", "show \"v \\<in> keys p \\<union> keys q\""], ["proof (prove)\nusing this:\n  {v. lookup p v \\<noteq> lookup q v} \\<subseteq> keys p \\<union> keys q\n  v \\<in> {v. lookup p v \\<noteq> lookup q v}\n\ngoal (1 subgoal):\n 1. v \\<in> keys p \\<union> keys q", ".."], ["proof (state)\nthis:\n  v \\<in> keys p \\<union> keys q\n\ngoal (2 subgoals):\n 1. lookup p v \\<noteq> lookup q v\n 2. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup p v \\<noteq> lookup q v\n 2. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "from \\<open>v \\<in> ?A\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> {v. lookup p v \\<noteq> lookup q v}", "show \"lookup p v \\<noteq> lookup q v\""], ["proof (prove)\nusing this:\n  v \\<in> {v. lookup p v \\<noteq> lookup q v}\n\ngoal (1 subgoal):\n 1. lookup p v \\<noteq> lookup q v", "by simp"], ["proof (state)\nthis:\n  lookup p v \\<noteq> lookup q v\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "assume \"v \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>u. v \\<prec>\\<^sub>t u \\<Longrightarrow> lookup p u = lookup q u", "show \"lookup p u = lookup q u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p u = lookup q u", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> lookup q u \\<Longrightarrow> False", "assume \"lookup p u \\<noteq> lookup q u\""], ["proof (state)\nthis:\n  lookup p u \\<noteq> lookup q u\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> lookup q u \\<Longrightarrow> False", "hence \"u \\<in> ?A\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> lookup q u\n\ngoal (1 subgoal):\n 1. u \\<in> {v. lookup p v \\<noteq> lookup q v}", "by simp"], ["proof (state)\nthis:\n  u \\<in> {v. lookup p v \\<noteq> lookup q v}\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> lookup q u \\<Longrightarrow> False", "with fin"], ["proof (chain)\npicking this:\n  finite {v. lookup p v \\<noteq> lookup q v}\n  u \\<in> {v. lookup p v \\<noteq> lookup q v}", "have \"u \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  finite {v. lookup p v \\<noteq> lookup q v}\n  u \\<in> {v. lookup p v \\<noteq> lookup q v}\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t v", "unfolding v_def"], ["proof (prove)\nusing this:\n  finite {v. lookup p v \\<noteq> lookup q v}\n  u \\<in> {v. lookup p v \\<noteq> lookup q v}\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t ord_term_lin.Max {v. lookup p v \\<noteq> lookup q v}", "by (rule ord_term_lin.Max_ge)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> lookup q u \\<Longrightarrow> False", "with \\<open>v \\<prec>\\<^sub>t u\\<close>"], ["proof (chain)\npicking this:\n  v \\<prec>\\<^sub>t u\n  u \\<preceq>\\<^sub>t v", "show False"], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t u\n  u \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup p u = lookup q u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Monomials\\<close>"], ["", "lemma keys_monomial:\n  assumes \"is_monomial p\"\n  shows \"keys p = {lt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys p = {lt p}", "using assms"], ["proof (prove)\nusing this:\n  is_monomial p\n\ngoal (1 subgoal):\n 1. keys p = {lt p}", "by (metis is_monomial_monomial lt_monomial keys_of_monomial)"], ["", "lemma monomial_eq_itself:\n  assumes \"is_monomial p\"\n  shows \"monomial (lc p) (lt p) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial (lc p) (lt p) = p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. monomial (lc p) (lt p) = p", "from assms"], ["proof (chain)\npicking this:\n  is_monomial p", "have \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  is_monomial p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by (rule monomial_not_0)"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. monomial (lc p) (lt p) = p", "hence \"lc p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc p \\<noteq> (0::'b)", "by (rule lc_not_0)"], ["proof (state)\nthis:\n  lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. monomial (lc p) (lt p) = p", "hence keys1: \"keys (monomial (lc p) (lt p)) = {lt p}\""], ["proof (prove)\nusing this:\n  lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. keys (monomial (lc p) (lt p)) = {lt p}", "by (rule keys_of_monomial)"], ["proof (state)\nthis:\n  keys (monomial (lc p) (lt p)) = {lt p}\n\ngoal (1 subgoal):\n 1. monomial (lc p) (lt p) = p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial (lc p) (lt p) = p", "by (rule poly_mapping_keys_eqI, simp only: keys_monomial[OF assms] keys1,\n        simp only: keys1 lookup_single Poly_Mapping.when_def, auto simp add: lc_def)"], ["proof (state)\nthis:\n  monomial (lc p) (lt p) = p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_eq_min_term_monomial:\n  assumes \"lt p = min_term\"\n  shows \"monomial (lc p) min_term = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial (lc p) min_term = p", "proof (rule poly_mapping_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. lookup (monomial (lc p) min_term) k = lookup p k", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. lookup (monomial (lc p) min_term) k = lookup p k", "from min_term_min[of v]"], ["proof (chain)\npicking this:\n  min_term \\<preceq>\\<^sub>t v", "have \"v = min_term \\<or> min_term \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  min_term \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. v = min_term \\<or> min_term \\<prec>\\<^sub>t v", "by auto"], ["proof (state)\nthis:\n  v = min_term \\<or> min_term \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>k. lookup (monomial (lc p) min_term) k = lookup p k", "thus \"lookup (monomial (lc p) min_term) v = lookup p v\""], ["proof (prove)\nusing this:\n  v = min_term \\<or> min_term \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lookup (monomial (lc p) min_term) v = lookup p v", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. v = min_term \\<Longrightarrow>\n    lookup (monomial (lc p) min_term) v = lookup p v\n 2. min_term \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (monomial (lc p) min_term) v = lookup p v", "assume \"v = min_term\""], ["proof (state)\nthis:\n  v = min_term\n\ngoal (2 subgoals):\n 1. v = min_term \\<Longrightarrow>\n    lookup (monomial (lc p) min_term) v = lookup p v\n 2. min_term \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (monomial (lc p) min_term) v = lookup p v", "thus ?thesis"], ["proof (prove)\nusing this:\n  v = min_term\n\ngoal (1 subgoal):\n 1. lookup (monomial (lc p) min_term) v = lookup p v", "by (simp add: lookup_single lc_def assms)"], ["proof (state)\nthis:\n  lookup (monomial (lc p) min_term) v = lookup p v\n\ngoal (1 subgoal):\n 1. min_term \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (monomial (lc p) min_term) v = lookup p v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. min_term \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (monomial (lc p) min_term) v = lookup p v", "assume \"min_term \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  min_term \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. min_term \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (monomial (lc p) min_term) v = lookup p v", "moreover"], ["proof (state)\nthis:\n  min_term \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. min_term \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (monomial (lc p) min_term) v = lookup p v", "have \"v \\<notin> keys p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> keys p", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> keys p \\<Longrightarrow> False", "assume \"v \\<in> keys p\""], ["proof (state)\nthis:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. v \\<in> keys p \\<Longrightarrow> False", "hence \"v \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt p", "by (rule lt_max_keys)"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. v \\<in> keys p \\<Longrightarrow> False", "with \\<open>min_term \\<prec>\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  min_term \\<prec>\\<^sub>t v\n  v \\<preceq>\\<^sub>t lt p", "show False"], ["proof (prove)\nusing this:\n  min_term \\<prec>\\<^sub>t v\n  v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. False", "by (simp add: assms)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<notin> keys p\n\ngoal (1 subgoal):\n 1. min_term \\<prec>\\<^sub>t v \\<Longrightarrow>\n    lookup (monomial (lc p) min_term) v = lookup p v", "ultimately"], ["proof (chain)\npicking this:\n  min_term \\<prec>\\<^sub>t v\n  v \\<notin> keys p", "show ?thesis"], ["proof (prove)\nusing this:\n  min_term \\<prec>\\<^sub>t v\n  v \\<notin> keys p\n\ngoal (1 subgoal):\n 1. lookup (monomial (lc p) min_term) v = lookup p v", "by (simp add: lookup_single in_keys_iff)"], ["proof (state)\nthis:\n  lookup (monomial (lc p) min_term) v = lookup p v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (monomial (lc p) min_term) v = lookup p v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_monomial_monomial_ordered:\n  assumes \"is_monomial p\"\n  obtains c v where \"c \\<noteq> 0\" and \"lc p = c\" and \"lt p = v\" and \"p = monomial c v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c v.\n        \\<lbrakk>c \\<noteq> (0::'b); lc p = c; lt p = v;\n         p = monomial c v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>c v.\n        \\<lbrakk>c \\<noteq> (0::'b); lc p = c; lt p = v;\n         p = monomial c v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  is_monomial p", "obtain c v where \"c \\<noteq> 0\" and p_eq: \"p = monomial c v\""], ["proof (prove)\nusing this:\n  is_monomial p\n\ngoal (1 subgoal):\n 1. (\\<And>c v.\n        \\<lbrakk>c \\<noteq> (0::'b); p = monomial c v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_monomial_monomial)"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n  p = monomial c v\n\ngoal (1 subgoal):\n 1. (\\<And>c v.\n        \\<lbrakk>c \\<noteq> (0::'b); lc p = c; lt p = v;\n         p = monomial c v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note this(1)"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. (\\<And>c v.\n        \\<lbrakk>c \\<noteq> (0::'b); lc p = c; lt p = v;\n         p = monomial c v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. (\\<And>c v.\n        \\<lbrakk>c \\<noteq> (0::'b); lc p = c; lt p = v;\n         p = monomial c v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"lc p = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc p = c", "unfolding p_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (monomial c v) = c", "by (rule lc_monomial)"], ["proof (state)\nthis:\n  lc p = c\n\ngoal (1 subgoal):\n 1. (\\<And>c v.\n        \\<lbrakk>c \\<noteq> (0::'b); lc p = c; lt p = v;\n         p = monomial c v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  lc p = c\n\ngoal (1 subgoal):\n 1. (\\<And>c v.\n        \\<lbrakk>c \\<noteq> (0::'b); lc p = c; lt p = v;\n         p = monomial c v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)", "have \"lt p = v\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt p = v", "unfolding p_eq"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt (monomial c v) = v", "by (rule lt_monomial)"], ["proof (state)\nthis:\n  lt p = v\n\ngoal (1 subgoal):\n 1. (\\<And>c v.\n        \\<lbrakk>c \\<noteq> (0::'b); lc p = c; lt p = v;\n         p = monomial c v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)\n  lc p = c\n  lt p = v", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  lc p = c\n  lt p = v\n\ngoal (1 subgoal):\n 1. thesis", "using p_eq"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  lc p = c\n  lt p = v\n  p = monomial c v\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma monomial_plus_not_0:\n  assumes \"c \\<noteq> 0\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"monomial c v + p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial c v + p \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. monomial c v + p = 0 \\<Longrightarrow> False", "assume \"monomial c v + p = 0\""], ["proof (state)\nthis:\n  monomial c v + p = 0\n\ngoal (1 subgoal):\n 1. monomial c v + p = 0 \\<Longrightarrow> False", "hence \"0 = lookup (monomial c v + p) v\""], ["proof (prove)\nusing this:\n  monomial c v + p = 0\n\ngoal (1 subgoal):\n 1. (0::'b) = lookup (monomial c v + p) v", "by simp"], ["proof (state)\nthis:\n  (0::'b) = lookup (monomial c v + p) v\n\ngoal (1 subgoal):\n 1. monomial c v + p = 0 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (0::'b) = lookup (monomial c v + p) v\n\ngoal (1 subgoal):\n 1. monomial c v + p = 0 \\<Longrightarrow> False", "have \"... = c + lookup p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (monomial c v + p) v = c + lookup p v", "by (simp add: lookup_add)"], ["proof (state)\nthis:\n  lookup (monomial c v + p) v = c + lookup p v\n\ngoal (1 subgoal):\n 1. monomial c v + p = 0 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lookup (monomial c v + p) v = c + lookup p v\n\ngoal (1 subgoal):\n 1. monomial c v + p = 0 \\<Longrightarrow> False", "have \"... = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c + lookup p v = c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c + lookup p v = c", "from assms(2)"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t v", "have \"\\<not> v \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  \\<not> v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. c + lookup p v = c", "with lt_max[of p v]"], ["proof (chain)\npicking this:\n  lookup p v \\<noteq> (0::'b) \\<Longrightarrow> v \\<preceq>\\<^sub>t lt p\n  \\<not> v \\<preceq>\\<^sub>t lt p", "have \"lookup p v = 0\""], ["proof (prove)\nusing this:\n  lookup p v \\<noteq> (0::'b) \\<Longrightarrow> v \\<preceq>\\<^sub>t lt p\n  \\<not> v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup p v = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. c + lookup p v = c", "thus ?thesis"], ["proof (prove)\nusing this:\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. c + lookup p v = c", "by simp"], ["proof (state)\nthis:\n  c + lookup p v = c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c + lookup p v = c\n\ngoal (1 subgoal):\n 1. monomial c v + p = 0 \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  (0::'b) = c", "show False"], ["proof (prove)\nusing this:\n  (0::'b) = c\n\ngoal (1 subgoal):\n 1. False", "using \\<open>c \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  (0::'b) = c\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_monomial_plus:\n  assumes \"c \\<noteq> (0::'b::comm_monoid_add)\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"lt (monomial c v + p) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (monomial c v + p) = v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lt (monomial c v + p) = v", "have eq: \"lt (monomial c v) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (monomial c v) = v", "by (simp only: lt_monomial[OF \\<open>c \\<noteq> 0\\<close>])"], ["proof (state)\nthis:\n  lt (monomial c v) = v\n\ngoal (1 subgoal):\n 1. lt (monomial c v + p) = v", "moreover"], ["proof (state)\nthis:\n  lt (monomial c v) = v\n\ngoal (1 subgoal):\n 1. lt (monomial c v + p) = v", "have \"lt (p + monomial c v) = lt (monomial c v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p + monomial c v) = lt (monomial c v)", "by (rule lt_plus_eqI, simp only: eq, fact)"], ["proof (state)\nthis:\n  lt (p + monomial c v) = lt (monomial c v)\n\ngoal (1 subgoal):\n 1. lt (monomial c v + p) = v", "ultimately"], ["proof (chain)\npicking this:\n  lt (monomial c v) = v\n  lt (p + monomial c v) = lt (monomial c v)", "show ?thesis"], ["proof (prove)\nusing this:\n  lt (monomial c v) = v\n  lt (p + monomial c v) = lt (monomial c v)\n\ngoal (1 subgoal):\n 1. lt (monomial c v + p) = v", "by (simp add: add.commute)"], ["proof (state)\nthis:\n  lt (monomial c v + p) = v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lc_monomial_plus:\n  assumes \"c \\<noteq> (0::'b::comm_monoid_add)\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"lc (monomial c v + p) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (monomial c v + p) = c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lc (monomial c v + p) = c", "from assms(2)"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t v", "have \"\\<not> v \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<not> v \\<preceq>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  \\<not> v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lc (monomial c v + p) = c", "with lt_max[of p v]"], ["proof (chain)\npicking this:\n  lookup p v \\<noteq> (0::'b) \\<Longrightarrow> v \\<preceq>\\<^sub>t lt p\n  \\<not> v \\<preceq>\\<^sub>t lt p", "have \"lookup p v = 0\""], ["proof (prove)\nusing this:\n  lookup p v \\<noteq> (0::'b) \\<Longrightarrow> v \\<preceq>\\<^sub>t lt p\n  \\<not> v \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup p v = (0::'b)", "by blast"], ["proof (state)\nthis:\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. lc (monomial c v + p) = c", "thus ?thesis"], ["proof (prove)\nusing this:\n  lookup p v = (0::'b)\n\ngoal (1 subgoal):\n 1. lc (monomial c v + p) = c", "by (simp add: lc_def lt_monomial_plus[OF assms] lookup_add)"], ["proof (state)\nthis:\n  lc (monomial c v + p) = c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tt_monomial_plus:\n  assumes \"p \\<noteq> (0::_ \\<Rightarrow>\\<^sub>0 'b::comm_monoid_add)\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"tt (monomial c v + p) = tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (monomial c v + p) = tt p", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow> tt (monomial c v + p) = tt p\n 2. c \\<noteq> (0::'b) \\<Longrightarrow> tt (monomial c v + p) = tt p", "case True"], ["proof (state)\nthis:\n  c = (0::'b)\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow> tt (monomial c v + p) = tt p\n 2. c \\<noteq> (0::'b) \\<Longrightarrow> tt (monomial c v + p) = tt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  c = (0::'b)\n\ngoal (1 subgoal):\n 1. tt (monomial c v + p) = tt p", "by (simp add: monomial_0I)"], ["proof (state)\nthis:\n  tt (monomial c v + p) = tt p\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tt (monomial c v + p) = tt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tt (monomial c v + p) = tt p", "case False"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tt (monomial c v + p) = tt p", "have eq: \"tt (monomial c v) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (monomial c v) = v", "by (simp only: tt_monomial[OF \\<open>c \\<noteq> 0\\<close>])"], ["proof (state)\nthis:\n  tt (monomial c v) = v\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tt (monomial c v + p) = tt p", "moreover"], ["proof (state)\nthis:\n  tt (monomial c v) = v\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tt (monomial c v + p) = tt p", "have \"tt (p + monomial c v) = tt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (p + monomial c v) = tt p", "proof (rule tt_plus_eqI, fact, simp only: eq)"], ["proof (state)\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t v", "from lt_ge_tt[of p] assms(2)"], ["proof (chain)\npicking this:\n  tt p \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t v", "show \"tt p \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  tt p \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. tt p \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  tt p \\<prec>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tt (p + monomial c v) = tt p\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow> tt (monomial c v + p) = tt p", "ultimately"], ["proof (chain)\npicking this:\n  tt (monomial c v) = v\n  tt (p + monomial c v) = tt p", "show ?thesis"], ["proof (prove)\nusing this:\n  tt (monomial c v) = v\n  tt (p + monomial c v) = tt p\n\ngoal (1 subgoal):\n 1. tt (monomial c v + p) = tt p", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  tt (monomial c v + p) = tt p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tc_monomial_plus:\n  assumes \"p \\<noteq> (0::_ \\<Rightarrow>\\<^sub>0 'b::comm_monoid_add)\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"tc (monomial c v + p) = tc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (monomial c v + p) = tc p", "proof (simp add: tc_def tt_monomial_plus[OF assms] lookup_add lookup_single Poly_Mapping.when_def,\n    rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. v = tt p \\<Longrightarrow> c + lookup p (tt p) = lookup p (tt p)", "assume \"v = tt p\""], ["proof (state)\nthis:\n  v = tt p\n\ngoal (1 subgoal):\n 1. v = tt p \\<Longrightarrow> c + lookup p (tt p) = lookup p (tt p)", "with assms(2)"], ["proof (chain)\npicking this:\n  lt p \\<prec>\\<^sub>t v\n  v = tt p", "have \"lt p \\<prec>\\<^sub>t tt p\""], ["proof (prove)\nusing this:\n  lt p \\<prec>\\<^sub>t v\n  v = tt p\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t tt p", "by simp"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. v = tt p \\<Longrightarrow> c + lookup p (tt p) = lookup p (tt p)", "with lt_ge_tt[of p]"], ["proof (chain)\npicking this:\n  tt p \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t tt p", "show \"c + lookup p (tt p) = lookup p (tt p)\""], ["proof (prove)\nusing this:\n  tt p \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t tt p\n\ngoal (1 subgoal):\n 1. c + lookup p (tt p) = lookup p (tt p)", "by simp"], ["proof (state)\nthis:\n  c + lookup p (tt p) = lookup p (tt p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tail_monomial_plus:\n  assumes \"c \\<noteq> (0::'b::comm_monoid_add)\" and \"lt p \\<prec>\\<^sub>t v\"\n  shows \"tail (monomial c v + p) = p\" (is \"tail ?q = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. tail (monomial c v + p) = p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tail (monomial c v + p) = p", "from assms"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)\n  lt p \\<prec>\\<^sub>t v", "have \"lt ?q = v\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt (monomial c v + p) = v", "by (rule lt_monomial_plus)"], ["proof (state)\nthis:\n  lt (monomial c v + p) = v\n\ngoal (1 subgoal):\n 1. tail (monomial c v + p) = p", "moreover"], ["proof (state)\nthis:\n  lt (monomial c v + p) = v\n\ngoal (1 subgoal):\n 1. tail (monomial c v + p) = p", "have \"lower (monomial c v) v = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower (monomial c v) v = 0", "by (simp add: lower_eq_zero_iff', rule disjI2, simp add: tt_monomial[OF \\<open>c \\<noteq> 0\\<close>])"], ["proof (state)\nthis:\n  lower (monomial c v) v = 0\n\ngoal (1 subgoal):\n 1. tail (monomial c v + p) = p", "ultimately"], ["proof (chain)\npicking this:\n  lt (monomial c v + p) = v\n  lower (monomial c v) v = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  lt (monomial c v + p) = v\n  lower (monomial c v) v = 0\n\ngoal (1 subgoal):\n 1. tail (monomial c v + p) = p", "by (simp add: tail_def lower_plus lower_id_iff, intro disjI2 assms(2))"], ["proof (state)\nthis:\n  tail (monomial c v + p) = p\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Lists of Keys\\<close>"], ["", "text \\<open>In algorithms one very often needs to compute the sorted list of all terms appearing\n  in a list of polynomials.\\<close>"], ["", "definition pps_to_list :: \"'t set \\<Rightarrow> 't list\" where\n  \"pps_to_list S = rev (ord_term_lin.sorted_list_of_set S)\""], ["", "definition keys_to_list :: \"('t \\<Rightarrow>\\<^sub>0 'b::zero) \\<Rightarrow> 't list\"\n  where \"keys_to_list p = pps_to_list (keys p)\""], ["", "definition Keys_to_list :: \"('t \\<Rightarrow>\\<^sub>0 'b::zero) list \\<Rightarrow> 't list\"\n  where \"Keys_to_list ps = fold (\\<lambda>p ts. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p) ts) ps []\""], ["", "text \\<open>Function @{const pps_to_list} turns finite sets of terms into sorted lists, where the\n  lists are sorted descending (i.\\,e. greater elements come before smaller ones).\\<close>"], ["", "lemma distinct_pps_to_list: \"distinct (pps_to_list S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (pps_to_list S)", "unfolding pps_to_list_def distinct_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (ord_term_lin.sorted_list_of_set S)", "by (rule ord_term_lin.distinct_sorted_list_of_set)"], ["", "lemma set_pps_to_list:\n  assumes \"finite S\"\n  shows \"set (pps_to_list S) = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pps_to_list S) = S", "unfolding pps_to_list_def set_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ord_term_lin.sorted_list_of_set S) = S", "using assms"], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. set (ord_term_lin.sorted_list_of_set S) = S", "by simp"], ["", "lemma length_pps_to_list: \"length (pps_to_list S) = card S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (pps_to_list S) = card S", "proof (cases \"finite S\")"], ["proof (state)\ngoal (2 subgoals):\n 1. finite S \\<Longrightarrow> length (pps_to_list S) = card S\n 2. infinite S \\<Longrightarrow> length (pps_to_list S) = card S", "case True"], ["proof (state)\nthis:\n  finite S\n\ngoal (2 subgoals):\n 1. finite S \\<Longrightarrow> length (pps_to_list S) = card S\n 2. infinite S \\<Longrightarrow> length (pps_to_list S) = card S", "from distinct_card[OF distinct_pps_to_list]"], ["proof (chain)\npicking this:\n  card (set (pps_to_list ?S1)) = length (pps_to_list ?S1)", "have \"length (pps_to_list S) = card (set (pps_to_list S))\""], ["proof (prove)\nusing this:\n  card (set (pps_to_list ?S1)) = length (pps_to_list ?S1)\n\ngoal (1 subgoal):\n 1. length (pps_to_list S) = card (set (pps_to_list S))", "by simp"], ["proof (state)\nthis:\n  length (pps_to_list S) = card (set (pps_to_list S))\n\ngoal (2 subgoals):\n 1. finite S \\<Longrightarrow> length (pps_to_list S) = card S\n 2. infinite S \\<Longrightarrow> length (pps_to_list S) = card S", "also"], ["proof (state)\nthis:\n  length (pps_to_list S) = card (set (pps_to_list S))\n\ngoal (2 subgoals):\n 1. finite S \\<Longrightarrow> length (pps_to_list S) = card S\n 2. infinite S \\<Longrightarrow> length (pps_to_list S) = card S", "from True"], ["proof (chain)\npicking this:\n  finite S", "have \"... = card S\""], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. card (set (pps_to_list S)) = card S", "by (simp only: set_pps_to_list)"], ["proof (state)\nthis:\n  card (set (pps_to_list S)) = card S\n\ngoal (2 subgoals):\n 1. finite S \\<Longrightarrow> length (pps_to_list S) = card S\n 2. infinite S \\<Longrightarrow> length (pps_to_list S) = card S", "finally"], ["proof (chain)\npicking this:\n  length (pps_to_list S) = card S", "show ?thesis"], ["proof (prove)\nusing this:\n  length (pps_to_list S) = card S\n\ngoal (1 subgoal):\n 1. length (pps_to_list S) = card S", "."], ["proof (state)\nthis:\n  length (pps_to_list S) = card S\n\ngoal (1 subgoal):\n 1. infinite S \\<Longrightarrow> length (pps_to_list S) = card S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite S \\<Longrightarrow> length (pps_to_list S) = card S", "case False"], ["proof (state)\nthis:\n  infinite S\n\ngoal (1 subgoal):\n 1. infinite S \\<Longrightarrow> length (pps_to_list S) = card S", "thus ?thesis"], ["proof (prove)\nusing this:\n  infinite S\n\ngoal (1 subgoal):\n 1. length (pps_to_list S) = card S", "by (simp add: pps_to_list_def)"], ["proof (state)\nthis:\n  length (pps_to_list S) = card S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pps_to_list_sorted_wrt: \"sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list S)", "have \"sorted_wrt (\\<succeq>\\<^sub>t) (pps_to_list S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succeq>\\<^sub>t) (pps_to_list S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succeq>\\<^sub>t) (pps_to_list S)", "have tr: \"transp (\\<preceq>\\<^sub>t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp (\\<preceq>\\<^sub>t)", "using transp_def"], ["proof (prove)\nusing this:\n  transp ?r =\n  (\\<forall>x y z. ?r x y \\<longrightarrow> ?r y z \\<longrightarrow> ?r x z)\n\ngoal (1 subgoal):\n 1. transp (\\<preceq>\\<^sub>t)", "by fastforce"], ["proof (state)\nthis:\n  transp (\\<preceq>\\<^sub>t)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succeq>\\<^sub>t) (pps_to_list S)", "have *: \"(\\<lambda>x y. y \\<succeq>\\<^sub>t x) = (\\<preceq>\\<^sub>t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y. y \\<succeq>\\<^sub>t x) = (\\<preceq>\\<^sub>t)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x y. y \\<succeq>\\<^sub>t x) = (\\<preceq>\\<^sub>t)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succeq>\\<^sub>t) (pps_to_list S)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succeq>\\<^sub>t) (pps_to_list S)", "by (simp only: * pps_to_list_def sorted_wrt_rev ord_term_lin.sorted_sorted_wrt[symmetric],\n          rule ord_term_lin.sorted_sorted_list_of_set)"], ["proof (state)\nthis:\n  sorted_wrt (\\<succeq>\\<^sub>t) (pps_to_list S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sorted_wrt (\\<succeq>\\<^sub>t) (pps_to_list S)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list S)", "with distinct_pps_to_list"], ["proof (chain)\npicking this:\n  distinct (pps_to_list ?S)\n  sorted_wrt (\\<succeq>\\<^sub>t) (pps_to_list S)", "have \"sorted_wrt (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y) (pps_to_list S)\""], ["proof (prove)\nusing this:\n  distinct (pps_to_list ?S)\n  sorted_wrt (\\<succeq>\\<^sub>t) (pps_to_list S)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y)\n     (pps_to_list S)", "by (rule distinct_sorted_wrt_imp_sorted_wrt_strict)"], ["proof (state)\nthis:\n  sorted_wrt (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y)\n   (pps_to_list S)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list S)", "moreover"], ["proof (state)\nthis:\n  sorted_wrt (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y)\n   (pps_to_list S)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list S)", "have \"(\\<succ>\\<^sub>t) = (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<succ>\\<^sub>t) =\n    (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y)", "using ord_term_lin.dual_order.order_iff_strict"], ["proof (prove)\nusing this:\n  (?b \\<preceq>\\<^sub>t ?a) = (?b \\<prec>\\<^sub>t ?a \\<or> ?a = ?b)\n\ngoal (1 subgoal):\n 1. (\\<succ>\\<^sub>t) =\n    (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y)", "by auto"], ["proof (state)\nthis:\n  (\\<succ>\\<^sub>t) =\n  (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list S)", "ultimately"], ["proof (chain)\npicking this:\n  sorted_wrt (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y)\n   (pps_to_list S)\n  (\\<succ>\\<^sub>t) =\n  (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y)", "show ?thesis"], ["proof (prove)\nusing this:\n  sorted_wrt (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y)\n   (pps_to_list S)\n  (\\<succ>\\<^sub>t) =\n  (\\<lambda>x y. x \\<succeq>\\<^sub>t y \\<and> x \\<noteq> y)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list S)", "by simp"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list S)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pps_to_list_nth_leI:\n  assumes \"j \\<le> i\" and \"i < card S\"\n  shows \"(pps_to_list S) ! i \\<preceq>\\<^sub>t (pps_to_list S) ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "proof (cases \"j = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j = i \\<Longrightarrow>\n    pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j\n 2. j \\<noteq> i \\<Longrightarrow>\n    pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "case True"], ["proof (state)\nthis:\n  j = i\n\ngoal (2 subgoals):\n 1. j = i \\<Longrightarrow>\n    pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j\n 2. j \\<noteq> i \\<Longrightarrow>\n    pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "by (simp add: True)"], ["proof (state)\nthis:\n  pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j\n\ngoal (1 subgoal):\n 1. j \\<noteq> i \\<Longrightarrow>\n    pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> i \\<Longrightarrow>\n    pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "case False"], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. j \\<noteq> i \\<Longrightarrow>\n    pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "with assms(1)"], ["proof (chain)\npicking this:\n  j \\<le> i\n  j \\<noteq> i", "have \"j < i\""], ["proof (prove)\nusing this:\n  j \\<le> i\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. j < i", "by simp"], ["proof (state)\nthis:\n  j < i\n\ngoal (1 subgoal):\n 1. j \\<noteq> i \\<Longrightarrow>\n    pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "let ?ts = \"pps_to_list S\""], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> i \\<Longrightarrow>\n    pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "from pps_to_list_sorted_wrt \\<open>j < i\\<close>"], ["proof (chain)\npicking this:\n  sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list ?S)\n  j < i", "have \"(\\<prec>\\<^sub>t)\\<inverse>\\<inverse> (?ts ! j) (?ts ! i)\""], ["proof (prove)\nusing this:\n  sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list ?S)\n  j < i\n\ngoal (1 subgoal):\n 1. pps_to_list S ! j \\<succ>\\<^sub>t pps_to_list S ! i", "proof (rule sorted_wrt_nth_less)"], ["proof (state)\ngoal (1 subgoal):\n 1. i < length (pps_to_list S)", "from assms(2)"], ["proof (chain)\npicking this:\n  i < card S", "show \"i < length ?ts\""], ["proof (prove)\nusing this:\n  i < card S\n\ngoal (1 subgoal):\n 1. i < length (pps_to_list S)", "by (simp only: length_pps_to_list)"], ["proof (state)\nthis:\n  i < length (pps_to_list S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pps_to_list S ! j \\<succ>\\<^sub>t pps_to_list S ! i\n\ngoal (1 subgoal):\n 1. j \\<noteq> i \\<Longrightarrow>\n    pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "thus ?thesis"], ["proof (prove)\nusing this:\n  pps_to_list S ! j \\<succ>\\<^sub>t pps_to_list S ! i\n\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "by simp"], ["proof (state)\nthis:\n  pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pps_to_list_nth_lessI:\n  assumes \"j < i\" and \"i < card S\"\n  shows \"(pps_to_list S) ! i \\<prec>\\<^sub>t (pps_to_list S) ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<prec>\\<^sub>t pps_to_list S ! j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<prec>\\<^sub>t pps_to_list S ! j", "let ?ts = \"pps_to_list S\""], ["proof (state)\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<prec>\\<^sub>t pps_to_list S ! j", "from assms(1)"], ["proof (chain)\npicking this:\n  j < i", "have \"j \\<le> i\" and \"i \\<noteq> j\""], ["proof (prove)\nusing this:\n  j < i\n\ngoal (1 subgoal):\n 1. j \\<le> i &&& i \\<noteq> j", "by simp_all"], ["proof (state)\nthis:\n  j \\<le> i\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<prec>\\<^sub>t pps_to_list S ! j", "with assms(2)"], ["proof (chain)\npicking this:\n  i < card S\n  j \\<le> i\n  i \\<noteq> j", "have \"i < length ?ts\" and \"j < length ?ts\""], ["proof (prove)\nusing this:\n  i < card S\n  j \\<le> i\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. i < length (pps_to_list S) &&& j < length (pps_to_list S)", "by (simp_all only: length_pps_to_list)"], ["proof (state)\nthis:\n  i < length (pps_to_list S)\n  j < length (pps_to_list S)\n\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<prec>\\<^sub>t pps_to_list S ! j", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<prec>\\<^sub>t pps_to_list S ! j", "proof (rule ord_term_lin.neq_le_trans)"], ["proof (state)\ngoal (2 subgoals):\n 1. pps_to_list S ! i \\<noteq> pps_to_list S ! j\n 2. pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "from \\<open>i \\<noteq> j\\<close>"], ["proof (chain)\npicking this:\n  i \\<noteq> j", "show \"?ts ! i \\<noteq> ?ts ! j\""], ["proof (prove)\nusing this:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<noteq> pps_to_list S ! j", "by (simp add: nth_eq_iff_index_eq[OF distinct_pps_to_list \\<open>i < length ?ts\\<close> \\<open>j < length ?ts\\<close>])"], ["proof (state)\nthis:\n  pps_to_list S ! i \\<noteq> pps_to_list S ! j\n\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "from \\<open>j \\<le> i\\<close> assms(2)"], ["proof (chain)\npicking this:\n  j \\<le> i\n  i < card S", "show \"?ts ! i \\<preceq>\\<^sub>t ?ts ! j\""], ["proof (prove)\nusing this:\n  j \\<le> i\n  i < card S\n\ngoal (1 subgoal):\n 1. pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j", "by (rule pps_to_list_nth_leI)"], ["proof (state)\nthis:\n  pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pps_to_list S ! i \\<prec>\\<^sub>t pps_to_list S ! j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pps_to_list_nth_leD:\n  assumes \"(pps_to_list S) ! i \\<preceq>\\<^sub>t (pps_to_list S) ! j\" and \"j < card S\"\n  shows \"j \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<le> i", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j \\<le> i \\<Longrightarrow> False", "assume \"\\<not> j \\<le> i\""], ["proof (state)\nthis:\n  \\<not> j \\<le> i\n\ngoal (1 subgoal):\n 1. \\<not> j \\<le> i \\<Longrightarrow> False", "hence \"i < j\""], ["proof (prove)\nusing this:\n  \\<not> j \\<le> i\n\ngoal (1 subgoal):\n 1. i < j", "by simp"], ["proof (state)\nthis:\n  i < j\n\ngoal (1 subgoal):\n 1. \\<not> j \\<le> i \\<Longrightarrow> False", "from this \\<open>j < card S\\<close>"], ["proof (chain)\npicking this:\n  i < j\n  j < card S", "have \"(pps_to_list S) ! j \\<prec>\\<^sub>t (pps_to_list S) ! i\""], ["proof (prove)\nusing this:\n  i < j\n  j < card S\n\ngoal (1 subgoal):\n 1. pps_to_list S ! j \\<prec>\\<^sub>t pps_to_list S ! i", "by (rule pps_to_list_nth_lessI)"], ["proof (state)\nthis:\n  pps_to_list S ! j \\<prec>\\<^sub>t pps_to_list S ! i\n\ngoal (1 subgoal):\n 1. \\<not> j \\<le> i \\<Longrightarrow> False", "with assms(1)"], ["proof (chain)\npicking this:\n  pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j\n  pps_to_list S ! j \\<prec>\\<^sub>t pps_to_list S ! i", "show False"], ["proof (prove)\nusing this:\n  pps_to_list S ! i \\<preceq>\\<^sub>t pps_to_list S ! j\n  pps_to_list S ! j \\<prec>\\<^sub>t pps_to_list S ! i\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pps_to_list_nth_lessD:\n  assumes \"(pps_to_list S) ! i \\<prec>\\<^sub>t (pps_to_list S) ! j\" and \"j < card S\"\n  shows \"j < i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < i", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j < i \\<Longrightarrow> False", "assume \"\\<not> j < i\""], ["proof (state)\nthis:\n  \\<not> j < i\n\ngoal (1 subgoal):\n 1. \\<not> j < i \\<Longrightarrow> False", "hence \"i \\<le> j\""], ["proof (prove)\nusing this:\n  \\<not> j < i\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by simp"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<not> j < i \\<Longrightarrow> False", "from this \\<open>j < card S\\<close>"], ["proof (chain)\npicking this:\n  i \\<le> j\n  j < card S", "have \"(pps_to_list S) ! j \\<preceq>\\<^sub>t (pps_to_list S) ! i\""], ["proof (prove)\nusing this:\n  i \\<le> j\n  j < card S\n\ngoal (1 subgoal):\n 1. pps_to_list S ! j \\<preceq>\\<^sub>t pps_to_list S ! i", "by (rule pps_to_list_nth_leI)"], ["proof (state)\nthis:\n  pps_to_list S ! j \\<preceq>\\<^sub>t pps_to_list S ! i\n\ngoal (1 subgoal):\n 1. \\<not> j < i \\<Longrightarrow> False", "with assms(1)"], ["proof (chain)\npicking this:\n  pps_to_list S ! i \\<prec>\\<^sub>t pps_to_list S ! j\n  pps_to_list S ! j \\<preceq>\\<^sub>t pps_to_list S ! i", "show False"], ["proof (prove)\nusing this:\n  pps_to_list S ! i \\<prec>\\<^sub>t pps_to_list S ! j\n  pps_to_list S ! j \\<preceq>\\<^sub>t pps_to_list S ! i\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_keys_to_list: \"set (keys_to_list p) = keys p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (keys_to_list p) = keys p", "by (simp add: keys_to_list_def set_pps_to_list)"], ["", "lemma length_keys_to_list: \"length (keys_to_list p) = card (keys p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (keys_to_list p) = card (keys p)", "by (simp only: keys_to_list_def length_pps_to_list)"], ["", "lemma keys_to_list_zero [simp]: \"keys_to_list 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys_to_list 0 = []", "by (simp add: keys_to_list_def pps_to_list_def)"], ["", "lemma Keys_to_list_Nil [simp]: \"Keys_to_list [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys_to_list [] = []", "by (simp add: Keys_to_list_def)"], ["", "lemma set_Keys_to_list: \"set (Keys_to_list ps) = Keys (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) = Keys (set ps)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) = Keys (set ps)", "have \"set (Keys_to_list ps) = (\\<Union>p\\<in>set ps. set (keys_to_list p)) \\<union> set []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) =\n    (\\<Union>p\\<in>set ps. set (keys_to_list p)) \\<union> set []", "unfolding Keys_to_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (fold (\\<lambda>p. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p)) ps\n          []) =\n    (\\<Union>p\\<in>set ps. set (keys_to_list p)) \\<union> set []", "by (rule set_fold, simp only: set_merge_wrt)"], ["proof (state)\nthis:\n  set (Keys_to_list ps) =\n  (\\<Union>p\\<in>set ps. set (keys_to_list p)) \\<union> set []\n\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) = Keys (set ps)", "also"], ["proof (state)\nthis:\n  set (Keys_to_list ps) =\n  (\\<Union>p\\<in>set ps. set (keys_to_list p)) \\<union> set []\n\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) = Keys (set ps)", "have \"... = Keys (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>p\\<in>set ps. set (keys_to_list p)) \\<union> set [] =\n    Keys (set ps)", "by (simp add: Keys_def set_keys_to_list)"], ["proof (state)\nthis:\n  (\\<Union>p\\<in>set ps. set (keys_to_list p)) \\<union> set [] =\n  Keys (set ps)\n\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) = Keys (set ps)", "finally"], ["proof (chain)\npicking this:\n  set (Keys_to_list ps) = Keys (set ps)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (Keys_to_list ps) = Keys (set ps)\n\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) = Keys (set ps)", "."], ["proof (state)\nthis:\n  set (Keys_to_list ps) = Keys (set ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Keys_to_list_sorted_wrt_aux:\n  assumes \"sorted_wrt (\\<succ>\\<^sub>t) ts\"\n  shows \"sorted_wrt (\\<succ>\\<^sub>t) (fold (\\<lambda>p ts. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p) ts) ps ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t)\n     (fold (\\<lambda>p. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p)) ps ts)", "using assms"], ["proof (prove)\nusing this:\n  sorted_wrt (\\<succ>\\<^sub>t) ts\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t)\n     (fold (\\<lambda>p. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p)) ps ts)", "proof (induct ps arbitrary: ts)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ts.\n       sorted_wrt (\\<succ>\\<^sub>t) ts \\<Longrightarrow>\n       sorted_wrt (\\<succ>\\<^sub>t)\n        (fold (\\<lambda>p. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p)) []\n          ts)\n 2. \\<And>a ps ts.\n       \\<lbrakk>\\<And>ts.\n                   sorted_wrt (\\<succ>\\<^sub>t) ts \\<Longrightarrow>\n                   sorted_wrt (\\<succ>\\<^sub>t)\n                    (fold\n                      (\\<lambda>p.\n                          merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p))\n                      ps ts);\n        sorted_wrt (\\<succ>\\<^sub>t) ts\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fold\n                            (\\<lambda>p.\n                                merge_wrt (\\<succ>\\<^sub>t)\n                                 (keys_to_list p))\n                            (a # ps) ts)", "case Nil"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t) ts\n\ngoal (2 subgoals):\n 1. \\<And>ts.\n       sorted_wrt (\\<succ>\\<^sub>t) ts \\<Longrightarrow>\n       sorted_wrt (\\<succ>\\<^sub>t)\n        (fold (\\<lambda>p. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p)) []\n          ts)\n 2. \\<And>a ps ts.\n       \\<lbrakk>\\<And>ts.\n                   sorted_wrt (\\<succ>\\<^sub>t) ts \\<Longrightarrow>\n                   sorted_wrt (\\<succ>\\<^sub>t)\n                    (fold\n                      (\\<lambda>p.\n                          merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p))\n                      ps ts);\n        sorted_wrt (\\<succ>\\<^sub>t) ts\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fold\n                            (\\<lambda>p.\n                                merge_wrt (\\<succ>\\<^sub>t)\n                                 (keys_to_list p))\n                            (a # ps) ts)", "thus ?case"], ["proof (prove)\nusing this:\n  sorted_wrt (\\<succ>\\<^sub>t) ts\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t)\n     (fold (\\<lambda>p. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p)) [] ts)", "by simp"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t)\n   (fold (\\<lambda>p. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p)) [] ts)\n\ngoal (1 subgoal):\n 1. \\<And>a ps ts.\n       \\<lbrakk>\\<And>ts.\n                   sorted_wrt (\\<succ>\\<^sub>t) ts \\<Longrightarrow>\n                   sorted_wrt (\\<succ>\\<^sub>t)\n                    (fold\n                      (\\<lambda>p.\n                          merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p))\n                      ps ts);\n        sorted_wrt (\\<succ>\\<^sub>t) ts\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fold\n                            (\\<lambda>p.\n                                merge_wrt (\\<succ>\\<^sub>t)\n                                 (keys_to_list p))\n                            (a # ps) ts)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps ts.\n       \\<lbrakk>\\<And>ts.\n                   sorted_wrt (\\<succ>\\<^sub>t) ts \\<Longrightarrow>\n                   sorted_wrt (\\<succ>\\<^sub>t)\n                    (fold\n                      (\\<lambda>p.\n                          merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p))\n                      ps ts);\n        sorted_wrt (\\<succ>\\<^sub>t) ts\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fold\n                            (\\<lambda>p.\n                                merge_wrt (\\<succ>\\<^sub>t)\n                                 (keys_to_list p))\n                            (a # ps) ts)", "case (Cons p ps)"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t) ?ts24 \\<Longrightarrow>\n  sorted_wrt (\\<succ>\\<^sub>t)\n   (fold (\\<lambda>p. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p)) ps\n     ?ts24)\n  sorted_wrt (\\<succ>\\<^sub>t) ts\n\ngoal (1 subgoal):\n 1. \\<And>a ps ts.\n       \\<lbrakk>\\<And>ts.\n                   sorted_wrt (\\<succ>\\<^sub>t) ts \\<Longrightarrow>\n                   sorted_wrt (\\<succ>\\<^sub>t)\n                    (fold\n                      (\\<lambda>p.\n                          merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p))\n                      ps ts);\n        sorted_wrt (\\<succ>\\<^sub>t) ts\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fold\n                            (\\<lambda>p.\n                                merge_wrt (\\<succ>\\<^sub>t)\n                                 (keys_to_list p))\n                            (a # ps) ts)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t)\n     (fold (\\<lambda>p. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p))\n       (p # ps) ts)", "proof (simp only: fold.simps o_def, rule Cons(1), rule sorted_merge_wrt)"], ["proof (state)\ngoal (4 subgoals):\n 1. transp (\\<succ>\\<^sub>t)\n 2. \\<And>x y.\n       x \\<noteq> y \\<Longrightarrow>\n       x \\<succ>\\<^sub>t y \\<or> y \\<succ>\\<^sub>t x\n 3. sorted_wrt (\\<succ>\\<^sub>t) (keys_to_list p)\n 4. sorted_wrt (\\<succ>\\<^sub>t) ts", "show \"transp (\\<succ>\\<^sub>t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp (\\<succ>\\<^sub>t)", "unfolding transp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       x \\<succ>\\<^sub>t y \\<longrightarrow>\n       y \\<succ>\\<^sub>t z \\<longrightarrow> x \\<succ>\\<^sub>t z", "by fastforce"], ["proof (state)\nthis:\n  transp (\\<succ>\\<^sub>t)\n\ngoal (3 subgoals):\n 1. \\<And>x y.\n       x \\<noteq> y \\<Longrightarrow>\n       x \\<succ>\\<^sub>t y \\<or> y \\<succ>\\<^sub>t x\n 2. sorted_wrt (\\<succ>\\<^sub>t) (keys_to_list p)\n 3. sorted_wrt (\\<succ>\\<^sub>t) ts", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       x \\<noteq> y \\<Longrightarrow>\n       x \\<succ>\\<^sub>t y \\<or> y \\<succ>\\<^sub>t x\n 2. sorted_wrt (\\<succ>\\<^sub>t) (keys_to_list p)\n 3. sorted_wrt (\\<succ>\\<^sub>t) ts", "fix x y :: 't"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       x \\<noteq> y \\<Longrightarrow>\n       x \\<succ>\\<^sub>t y \\<or> y \\<succ>\\<^sub>t x\n 2. sorted_wrt (\\<succ>\\<^sub>t) (keys_to_list p)\n 3. sorted_wrt (\\<succ>\\<^sub>t) ts", "assume \"x \\<noteq> y\""], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (3 subgoals):\n 1. \\<And>x y.\n       x \\<noteq> y \\<Longrightarrow>\n       x \\<succ>\\<^sub>t y \\<or> y \\<succ>\\<^sub>t x\n 2. sorted_wrt (\\<succ>\\<^sub>t) (keys_to_list p)\n 3. sorted_wrt (\\<succ>\\<^sub>t) ts", "thus \"x \\<succ>\\<^sub>t y \\<or> y \\<succ>\\<^sub>t x\""], ["proof (prove)\nusing this:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<succ>\\<^sub>t y \\<or> y \\<succ>\\<^sub>t x", "by auto"], ["proof (state)\nthis:\n  x \\<succ>\\<^sub>t y \\<or> y \\<succ>\\<^sub>t x\n\ngoal (2 subgoals):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (keys_to_list p)\n 2. sorted_wrt (\\<succ>\\<^sub>t) ts", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (keys_to_list p)\n 2. sorted_wrt (\\<succ>\\<^sub>t) ts", "show \"sorted_wrt (\\<succ>\\<^sub>t) (keys_to_list p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (keys_to_list p)", "unfolding keys_to_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list (keys p))", "by (fact pps_to_list_sorted_wrt)"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t) (keys_to_list p)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) ts", "qed fact"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t)\n   (fold (\\<lambda>p. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p)) (p # ps)\n     ts)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary Keys_to_list_sorted_wrt: \"sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list ps)", "unfolding Keys_to_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t)\n     (fold (\\<lambda>p. merge_wrt (\\<succ>\\<^sub>t) (keys_to_list p)) ps [])", "proof (rule Keys_to_list_sorted_wrt_aux)"], ["proof (state)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) []", "show \"sorted_wrt (\\<succ>\\<^sub>t) []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) []", "by simp"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t) []\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary distinct_Keys_to_list: \"distinct (Keys_to_list ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (Keys_to_list ps)", "proof (rule distinct_sorted_wrt_irrefl)"], ["proof (state)\ngoal (3 subgoals):\n 1. irreflp ?rel\n 2. transp ?rel\n 3. sorted_wrt ?rel (Keys_to_list ps)", "show \"irreflp (\\<succ>\\<^sub>t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflp (\\<succ>\\<^sub>t)", "by (simp add: irreflp_def)"], ["proof (state)\nthis:\n  irreflp (\\<succ>\\<^sub>t)\n\ngoal (2 subgoals):\n 1. transp (\\<succ>\\<^sub>t)\n 2. sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list ps)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. transp (\\<succ>\\<^sub>t)\n 2. sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list ps)", "show \"transp (\\<succ>\\<^sub>t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp (\\<succ>\\<^sub>t)", "unfolding transp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       x \\<succ>\\<^sub>t y \\<longrightarrow>\n       y \\<succ>\\<^sub>t z \\<longrightarrow> x \\<succ>\\<^sub>t z", "by fastforce"], ["proof (state)\nthis:\n  transp (\\<succ>\\<^sub>t)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list ps)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list ps)", "show \"sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list ps)", "by (fact Keys_to_list_sorted_wrt)"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_Keys_to_list: \"length (Keys_to_list ps) = card (Keys (set ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (Keys_to_list ps) = card (Keys (set ps))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (Keys_to_list ps) = card (Keys (set ps))", "from distinct_Keys_to_list"], ["proof (chain)\npicking this:\n  distinct (Keys_to_list ?ps)", "have \"card (set (Keys_to_list ps)) = length (Keys_to_list ps)\""], ["proof (prove)\nusing this:\n  distinct (Keys_to_list ?ps)\n\ngoal (1 subgoal):\n 1. card (set (Keys_to_list ps)) = length (Keys_to_list ps)", "by (rule distinct_card)"], ["proof (state)\nthis:\n  card (set (Keys_to_list ps)) = length (Keys_to_list ps)\n\ngoal (1 subgoal):\n 1. length (Keys_to_list ps) = card (Keys (set ps))", "thus ?thesis"], ["proof (prove)\nusing this:\n  card (set (Keys_to_list ps)) = length (Keys_to_list ps)\n\ngoal (1 subgoal):\n 1. length (Keys_to_list ps) = card (Keys (set ps))", "by (simp only: set_Keys_to_list)"], ["proof (state)\nthis:\n  length (Keys_to_list ps) = card (Keys (set ps))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Keys_to_list_eq_pps_to_list: \"Keys_to_list ps = pps_to_list (Keys (set ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys_to_list ps = pps_to_list (Keys (set ps))", "using _ Keys_to_list_sorted_wrt distinct_Keys_to_list pps_to_list_sorted_wrt distinct_pps_to_list"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list ?ps)\n  distinct (Keys_to_list ?ps)\n  sorted_wrt (\\<succ>\\<^sub>t) (pps_to_list ?S)\n  distinct (pps_to_list ?S)\n\ngoal (1 subgoal):\n 1. Keys_to_list ps = pps_to_list (Keys (set ps))", "proof (rule sorted_wrt_distinct_set_unique)"], ["proof (state)\ngoal (2 subgoals):\n 1. antisymp (\\<succ>\\<^sub>t)\n 2. set (Keys_to_list ps) = set (pps_to_list (Keys (set ps)))", "show \"antisymp (\\<succ>\\<^sub>t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymp (\\<succ>\\<^sub>t)", "unfolding antisymp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       x \\<succ>\\<^sub>t y \\<longrightarrow>\n       y \\<succ>\\<^sub>t x \\<longrightarrow> x = y", "by fastforce"], ["proof (state)\nthis:\n  antisymp (\\<succ>\\<^sub>t)\n\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) = set (pps_to_list (Keys (set ps)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) = set (pps_to_list (Keys (set ps)))", "from finite_set"], ["proof (chain)\npicking this:\n  finite (set ?xs)", "have fin: \"finite (Keys (set ps))\""], ["proof (prove)\nusing this:\n  finite (set ?xs)\n\ngoal (1 subgoal):\n 1. finite (Keys (set ps))", "by (rule finite_Keys)"], ["proof (state)\nthis:\n  finite (Keys (set ps))\n\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) = set (pps_to_list (Keys (set ps)))", "show \"set (Keys_to_list ps) = set (pps_to_list (Keys (set ps)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) = set (pps_to_list (Keys (set ps)))", "by (simp add: set_Keys_to_list set_pps_to_list[OF fin])"], ["proof (state)\nthis:\n  set (Keys_to_list ps) = set (pps_to_list (Keys (set ps)))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Multiplication\\<close>"], ["", "lemma in_keys_mult_scalar_le:\n  assumes \"v \\<in> keys (p \\<odot> q)\"\n  shows \"v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> keys (p \\<odot> q)", "obtain t u where \"t \\<in> keys p\" and \"u \\<in> keys q\" and \"v = t \\<oplus> u\""], ["proof (prove)\nusing this:\n  v \\<in> keys (p \\<odot> q)\n\ngoal (1 subgoal):\n 1. (\\<And>t u.\n        \\<lbrakk>t \\<in> keys p; u \\<in> keys q; v = t \\<oplus> u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_keys_mult_scalarE)"], ["proof (state)\nthis:\n  t \\<in> keys p\n  u \\<in> keys q\n  v = t \\<oplus> u\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "from \\<open>t \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> keys p", "have \"t \\<preceq> punit.lt p\""], ["proof (prove)\nusing this:\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. t \\<preceq> punit.lt p", "by (rule punit.lt_max_keys)"], ["proof (state)\nthis:\n  t \\<preceq> punit.lt p\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "from \\<open>u \\<in> keys q\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> keys q", "have \"u \\<preceq>\\<^sub>t lt q\""], ["proof (prove)\nusing this:\n  u \\<in> keys q\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t lt q", "by (rule lt_max_keys)"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "hence \"v \\<preceq>\\<^sub>t t \\<oplus> lt q\""], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t t \\<oplus> lt q", "unfolding \\<open>v = t \\<oplus> u\\<close>"], ["proof (prove)\nusing this:\n  u \\<preceq>\\<^sub>t lt q\n\ngoal (1 subgoal):\n 1. t \\<oplus> u \\<preceq>\\<^sub>t t \\<oplus> lt q", "by (rule splus_mono)"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t t \\<oplus> lt q\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "also"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t t \\<oplus> lt q\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "from \\<open>t \\<preceq> punit.lt p\\<close>"], ["proof (chain)\npicking this:\n  t \\<preceq> punit.lt p", "have \"... \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q\""], ["proof (prove)\nusing this:\n  t \\<preceq> punit.lt p\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt q \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "by (rule splus_mono_left)"], ["proof (state)\nthis:\n  t \\<oplus> lt q \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "finally"], ["proof (chain)\npicking this:\n  v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "."], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_keys_mult_scalar_ge:\n  assumes \"v \\<in> keys (p \\<odot> q)\"\n  shows \"punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> keys (p \\<odot> q)", "obtain t u where \"t \\<in> keys p\" and \"u \\<in> keys q\" and \"v = t \\<oplus> u\""], ["proof (prove)\nusing this:\n  v \\<in> keys (p \\<odot> q)\n\ngoal (1 subgoal):\n 1. (\\<And>t u.\n        \\<lbrakk>t \\<in> keys p; u \\<in> keys q; v = t \\<oplus> u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_keys_mult_scalarE)"], ["proof (state)\nthis:\n  t \\<in> keys p\n  u \\<in> keys q\n  v = t \\<oplus> u\n\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v", "from \\<open>t \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> keys p", "have \"punit.tt p \\<preceq> t\""], ["proof (prove)\nusing this:\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. punit.tt p \\<preceq> t", "by (rule punit.tt_min_keys)"], ["proof (state)\nthis:\n  punit.tt p \\<preceq> t\n\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v", "from \\<open>u \\<in> keys q\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> keys q", "have \"tt q \\<preceq>\\<^sub>t u\""], ["proof (prove)\nusing this:\n  u \\<in> keys q\n\ngoal (1 subgoal):\n 1. tt q \\<preceq>\\<^sub>t u", "by (rule tt_min_keys)"], ["proof (state)\nthis:\n  tt q \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v", "hence \"punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t punit.tt p \\<oplus> u\""], ["proof (prove)\nusing this:\n  tt q \\<preceq>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t punit.tt p \\<oplus> u", "by (rule splus_mono)"], ["proof (state)\nthis:\n  punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t punit.tt p \\<oplus> u\n\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v", "also"], ["proof (state)\nthis:\n  punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t punit.tt p \\<oplus> u\n\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v", "from \\<open>punit.tt p \\<preceq> t\\<close>"], ["proof (chain)\npicking this:\n  punit.tt p \\<preceq> t", "have \"... \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  punit.tt p \\<preceq> t\n\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> u \\<preceq>\\<^sub>t v", "unfolding \\<open>v = t \\<oplus> u\\<close>"], ["proof (prove)\nusing this:\n  punit.tt p \\<preceq> t\n\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> u \\<preceq>\\<^sub>t t \\<oplus> u", "by (rule splus_mono_left)"], ["proof (state)\nthis:\n  punit.tt p \\<oplus> u \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v", "finally"], ["proof (chain)\npicking this:\n  punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v", "show ?thesis"], ["proof (prove)\nusing this:\n  punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v", "."], ["proof (state)\nthis:\n  punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in ordered_term) lookup_mult_scalar_lt_lt:\n  \"lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "proof (induct p rule: punit.poly_mapping_tail_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (0 \\<odot> q) (punit.lt 0 \\<oplus> lt q) = punit.lc 0 * lc q\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.lt (punit.tail p) \\<oplus> lt q) =\n        punit.lc (punit.tail p) * lc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) =\n                         punit.lc p * lc q", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. lookup (0 \\<odot> q) (punit.lt 0 \\<oplus> lt q) = punit.lc 0 * lc q\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.lt (punit.tail p) \\<oplus> lt q) =\n        punit.lc (punit.tail p) * lc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) =\n                         punit.lc p * lc q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (0 \\<odot> q) (punit.lt 0 \\<oplus> lt q) = punit.lc 0 * lc q", "by simp"], ["proof (state)\nthis:\n  lookup (0 \\<odot> q) (punit.lt 0 \\<oplus> lt q) = punit.lc 0 * lc q\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.lt (punit.tail p) \\<oplus> lt q) =\n        punit.lc (punit.tail p) * lc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) =\n                         punit.lc p * lc q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.lt (punit.tail p) \\<oplus> lt q) =\n        punit.lc (punit.tail p) * lc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) =\n                         punit.lc p * lc q", "case step: (tail p)"], ["proof (state)\nthis:\n  p \\<noteq> 0\n  lookup (punit.tail p \\<odot> q) (punit.lt (punit.tail p) \\<oplus> lt q) =\n  punit.lc (punit.tail p) * lc q\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.lt (punit.tail p) \\<oplus> lt q) =\n        punit.lc (punit.tail p) * lc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) =\n                         punit.lc p * lc q", "from step(1)"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"punit.lc p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. punit.lc p \\<noteq> (0::'b)", "by (rule punit.lc_not_0)"], ["proof (state)\nthis:\n  punit.lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.lt (punit.tail p) \\<oplus> lt q) =\n        punit.lc (punit.tail p) * lc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) =\n                         punit.lc p * lc q", "let ?t = \"punit.lt p \\<oplus> lt q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.lt (punit.tail p) \\<oplus> lt q) =\n        punit.lc (punit.tail p) * lc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) =\n                         punit.lc p * lc q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "proof (cases \"is_monomial p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q\n 2. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "case True"], ["proof (state)\nthis:\n  is_monomial p\n\ngoal (2 subgoals):\n 1. is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q\n 2. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "then"], ["proof (chain)\npicking this:\n  is_monomial p", "obtain c t where \"c \\<noteq> 0\" and \"punit.lt p = t\" and \"punit.lc p = c\" and p_eq: \"p = monomial c t\""], ["proof (prove)\nusing this:\n  is_monomial p\n\ngoal (1 subgoal):\n 1. (\\<And>c t.\n        \\<lbrakk>c \\<noteq> (0::'b); punit.lt p = t; punit.lc p = c;\n         p = monomial c t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule punit.is_monomial_monomial_ordered)"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n  punit.lt p = t\n  punit.lc p = c\n  p = monomial c t\n\ngoal (2 subgoals):\n 1. is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q\n 2. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "hence \"p \\<odot> q = monom_mult (punit.lc p) (punit.lt p) q\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  punit.lt p = t\n  punit.lc p = c\n  p = monomial c t\n\ngoal (1 subgoal):\n 1. p \\<odot> q = monom_mult (punit.lc p) (punit.lt p) q", "by (simp add: mult_scalar_monomial)"], ["proof (state)\nthis:\n  p \\<odot> q = monom_mult (punit.lc p) (punit.lt p) q\n\ngoal (2 subgoals):\n 1. is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q\n 2. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<odot> q = monom_mult (punit.lc p) (punit.lt p) q\n\ngoal (1 subgoal):\n 1. lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "by (simp add: lookup_monom_mult_plus lc_def)"], ["proof (state)\nthis:\n  lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "case False"], ["proof (state)\nthis:\n  \\<not> is_monomial p\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "have \"punit.lt (punit.tail p) \\<noteq> punit.lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.lt (punit.tail p) \\<noteq> punit.lt p", "proof (simp add: punit.tail_def punit.lt_lower_eq_iff, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. punit.lt p = (0::'a) \\<Longrightarrow> False", "assume \"punit.lt p = 0\""], ["proof (state)\nthis:\n  punit.lt p = (0::'a)\n\ngoal (1 subgoal):\n 1. punit.lt p = (0::'a) \\<Longrightarrow> False", "have \"keys p \\<subseteq> {punit.lt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys p \\<subseteq> {punit.lt p}", "proof (rule, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> keys p \\<Longrightarrow> x = punit.lt p", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> keys p \\<Longrightarrow> x = punit.lt p", "assume \"s \\<in> keys p\""], ["proof (state)\nthis:\n  s \\<in> keys p\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> keys p \\<Longrightarrow> x = punit.lt p", "hence \"s \\<preceq> punit.lt p\""], ["proof (prove)\nusing this:\n  s \\<in> keys p\n\ngoal (1 subgoal):\n 1. s \\<preceq> punit.lt p", "by (rule punit.lt_max_keys)"], ["proof (state)\nthis:\n  s \\<preceq> punit.lt p\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> keys p \\<Longrightarrow> x = punit.lt p", "moreover"], ["proof (state)\nthis:\n  s \\<preceq> punit.lt p\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> keys p \\<Longrightarrow> x = punit.lt p", "have \"punit.lt p \\<preceq> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.lt p \\<preceq> s", "unfolding \\<open>punit.lt p = 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<preceq> s", "by (rule zero_min)"], ["proof (state)\nthis:\n  punit.lt p \\<preceq> s\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> keys p \\<Longrightarrow> x = punit.lt p", "ultimately"], ["proof (chain)\npicking this:\n  s \\<preceq> punit.lt p\n  punit.lt p \\<preceq> s", "show \"s = punit.lt p\""], ["proof (prove)\nusing this:\n  s \\<preceq> punit.lt p\n  punit.lt p \\<preceq> s\n\ngoal (1 subgoal):\n 1. s = punit.lt p", "by simp"], ["proof (state)\nthis:\n  s = punit.lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  keys p \\<subseteq> {punit.lt p}\n\ngoal (1 subgoal):\n 1. punit.lt p = (0::'a) \\<Longrightarrow> False", "hence \"card (keys p) = 0 \\<or> card (keys p) = 1\""], ["proof (prove)\nusing this:\n  keys p \\<subseteq> {punit.lt p}\n\ngoal (1 subgoal):\n 1. card (keys p) = 0 \\<or> card (keys p) = 1", "using subset_singletonD"], ["proof (prove)\nusing this:\n  keys p \\<subseteq> {punit.lt p}\n  ?A \\<subseteq> {?x} \\<Longrightarrow> ?A = {} \\<or> ?A = {?x}\n\ngoal (1 subgoal):\n 1. card (keys p) = 0 \\<or> card (keys p) = 1", "by fastforce"], ["proof (state)\nthis:\n  card (keys p) = 0 \\<or> card (keys p) = 1\n\ngoal (1 subgoal):\n 1. punit.lt p = (0::'a) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  card (keys p) = 0 \\<or> card (keys p) = 1\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. card (keys p) = 0 \\<Longrightarrow> False\n 2. card (keys p) = 1 \\<Longrightarrow> False", "assume \"card (keys p) = 0\""], ["proof (state)\nthis:\n  card (keys p) = 0\n\ngoal (2 subgoals):\n 1. card (keys p) = 0 \\<Longrightarrow> False\n 2. card (keys p) = 1 \\<Longrightarrow> False", "hence \"p = 0\""], ["proof (prove)\nusing this:\n  card (keys p) = 0\n\ngoal (1 subgoal):\n 1. p = 0", "by (meson card_0_eq keys_eq_empty finite_keys)"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. card (keys p) = 0 \\<Longrightarrow> False\n 2. card (keys p) = 1 \\<Longrightarrow> False", "with step(1)"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  p = 0", "show False"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  p = 0\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. card (keys p) = 1 \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. card (keys p) = 1 \\<Longrightarrow> False", "assume \"card (keys p) = 1\""], ["proof (state)\nthis:\n  card (keys p) = 1\n\ngoal (1 subgoal):\n 1. card (keys p) = 1 \\<Longrightarrow> False", "with False"], ["proof (chain)\npicking this:\n  \\<not> is_monomial p\n  card (keys p) = 1", "show False"], ["proof (prove)\nusing this:\n  \\<not> is_monomial p\n  card (keys p) = 1\n\ngoal (1 subgoal):\n 1. False", "unfolding is_monomial_def"], ["proof (prove)\nusing this:\n  card (keys p) \\<noteq> 1\n  card (keys p) = 1\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  punit.lt (punit.tail p) \\<noteq> punit.lt p\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "with punit.lt_lower[of p \"punit.lt p\"]"], ["proof (chain)\npicking this:\n  punit.lt (punit.lower p (punit.lt p)) \\<preceq> punit.lt p\n  punit.lt (punit.tail p) \\<noteq> punit.lt p", "have \"punit.lt (punit.tail p) \\<prec> punit.lt p\""], ["proof (prove)\nusing this:\n  punit.lt (punit.lower p (punit.lt p)) \\<preceq> punit.lt p\n  punit.lt (punit.tail p) \\<noteq> punit.lt p\n\ngoal (1 subgoal):\n 1. punit.lt (punit.tail p) \\<prec> punit.lt p", "by (simp add: punit.tail_def)"], ["proof (state)\nthis:\n  punit.lt (punit.tail p) \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "have eq: \"lookup ((punit.tail p) \\<odot> q) ?t = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (punit.tail p \\<odot> q) (punit.lt p \\<oplus> lt q) = (0::'b)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup (punit.tail p \\<odot> q) (punit.lt p \\<oplus> lt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "assume \"lookup ((punit.tail p) \\<odot> q) ?t \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup (punit.tail p \\<odot> q) (punit.lt p \\<oplus> lt q) \\<noteq>\n  (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (punit.tail p \\<odot> q) (punit.lt p \\<oplus> lt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "hence \"?t \\<preceq>\\<^sub>t punit.lt (punit.tail p) \\<oplus> lt q\""], ["proof (prove)\nusing this:\n  lookup (punit.tail p \\<odot> q) (punit.lt p \\<oplus> lt q) \\<noteq>\n  (0::'b)\n\ngoal (1 subgoal):\n 1. punit.lt p \\<oplus> lt q \\<preceq>\\<^sub>t\n    punit.lt (punit.tail p) \\<oplus> lt q", "by (meson in_keys_mult_scalar_le lookup_not_eq_zero_eq_in_keys)"], ["proof (state)\nthis:\n  punit.lt p \\<oplus> lt q \\<preceq>\\<^sub>t\n  punit.lt (punit.tail p) \\<oplus> lt q\n\ngoal (1 subgoal):\n 1. lookup (punit.tail p \\<odot> q) (punit.lt p \\<oplus> lt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "hence \"punit.lt p \\<preceq> punit.lt (punit.tail p)\""], ["proof (prove)\nusing this:\n  punit.lt p \\<oplus> lt q \\<preceq>\\<^sub>t\n  punit.lt (punit.tail p) \\<oplus> lt q\n\ngoal (1 subgoal):\n 1. punit.lt p \\<preceq> punit.lt (punit.tail p)", "by (rule ord_term_canc_left)"], ["proof (state)\nthis:\n  punit.lt p \\<preceq> punit.lt (punit.tail p)\n\ngoal (1 subgoal):\n 1. lookup (punit.tail p \\<odot> q) (punit.lt p \\<oplus> lt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  punit.lt p \\<preceq> punit.lt (punit.tail p)\n\ngoal (1 subgoal):\n 1. lookup (punit.tail p \\<odot> q) (punit.lt p \\<oplus> lt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "have \"... \\<prec> punit.lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.lt (punit.tail p) \\<prec> punit.lt p", "by fact"], ["proof (state)\nthis:\n  punit.lt (punit.tail p) \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. lookup (punit.tail p \\<odot> q) (punit.lt p \\<oplus> lt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "finally"], ["proof (chain)\npicking this:\n  punit.lt p \\<prec> punit.lt p", "show False"], ["proof (prove)\nusing this:\n  punit.lt p \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (punit.tail p \\<odot> q) (punit.lt p \\<oplus> lt q) = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "from step(2)"], ["proof (chain)\npicking this:\n  lookup (punit.tail p \\<odot> q) (punit.lt (punit.tail p) \\<oplus> lt q) =\n  punit.lc (punit.tail p) * lc q", "have \"lookup (monom_mult (punit.lc p) (punit.lt p) q) ?t = punit.lc p * lc q\""], ["proof (prove)\nusing this:\n  lookup (punit.tail p \\<odot> q) (punit.lt (punit.tail p) \\<oplus> lt q) =\n  punit.lc (punit.tail p) * lc q\n\ngoal (1 subgoal):\n 1. lookup (monom_mult (punit.lc p) (punit.lt p) q)\n     (punit.lt p \\<oplus> lt q) =\n    punit.lc p * lc q", "by (simp only: lookup_monom_mult_plus lc_def)"], ["proof (state)\nthis:\n  lookup (monom_mult (punit.lc p) (punit.lt p) q)\n   (punit.lt p \\<oplus> lt q) =\n  punit.lc p * lc q\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "thus ?thesis"], ["proof (prove)\nusing this:\n  lookup (monom_mult (punit.lc p) (punit.lt p) q)\n   (punit.lt p \\<oplus> lt q) =\n  punit.lc p * lc q\n\ngoal (1 subgoal):\n 1. lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q", "by (simp add: mult_scalar_tail_rec_left[of p q] lookup_add eq)"], ["proof (state)\nthis:\n  lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (p \\<odot> q) (punit.lt p \\<oplus> lt q) = punit.lc p * lc q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_mult_scalar_tt_tt: \"lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "proof (induct p rule: punit.poly_mapping_tail_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (0 \\<odot> q) (punit.tt 0 \\<oplus> tt q) = punit.tc 0 * tc q\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.tt (punit.tail p) \\<oplus> tt q) =\n        punit.tc (punit.tail p) * tc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) =\n                         punit.tc p * tc q", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. lookup (0 \\<odot> q) (punit.tt 0 \\<oplus> tt q) = punit.tc 0 * tc q\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.tt (punit.tail p) \\<oplus> tt q) =\n        punit.tc (punit.tail p) * tc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) =\n                         punit.tc p * tc q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (0 \\<odot> q) (punit.tt 0 \\<oplus> tt q) = punit.tc 0 * tc q", "by simp"], ["proof (state)\nthis:\n  lookup (0 \\<odot> q) (punit.tt 0 \\<oplus> tt q) = punit.tc 0 * tc q\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.tt (punit.tail p) \\<oplus> tt q) =\n        punit.tc (punit.tail p) * tc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) =\n                         punit.tc p * tc q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.tt (punit.tail p) \\<oplus> tt q) =\n        punit.tc (punit.tail p) * tc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) =\n                         punit.tc p * tc q", "case step: (tail p)"], ["proof (state)\nthis:\n  p \\<noteq> 0\n  lookup (punit.tail p \\<odot> q) (punit.tt (punit.tail p) \\<oplus> tt q) =\n  punit.tc (punit.tail p) * tc q\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.tt (punit.tail p) \\<oplus> tt q) =\n        punit.tc (punit.tail p) * tc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) =\n                         punit.tc p * tc q", "from step(1)"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"punit.lc p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. punit.lc p \\<noteq> (0::'b)", "by (rule punit.lc_not_0)"], ["proof (state)\nthis:\n  punit.lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.tt (punit.tail p) \\<oplus> tt q) =\n        punit.tc (punit.tail p) * tc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) =\n                         punit.tc p * tc q", "let ?t = \"punit.tt p \\<oplus> tt q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        lookup (punit.tail p \\<odot> q)\n         (punit.tt (punit.tail p) \\<oplus> tt q) =\n        punit.tc (punit.tail p) * tc q\\<rbrakk>\n       \\<Longrightarrow> lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) =\n                         punit.tc p * tc q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "proof (cases \"is_monomial p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q\n 2. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "case True"], ["proof (state)\nthis:\n  is_monomial p\n\ngoal (2 subgoals):\n 1. is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q\n 2. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "then"], ["proof (chain)\npicking this:\n  is_monomial p", "obtain c t where \"c \\<noteq> 0\" and \"punit.lt p = t\" and \"punit.lc p = c\" and p_eq: \"p = monomial c t\""], ["proof (prove)\nusing this:\n  is_monomial p\n\ngoal (1 subgoal):\n 1. (\\<And>c t.\n        \\<lbrakk>c \\<noteq> (0::'b); punit.lt p = t; punit.lc p = c;\n         p = monomial c t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule punit.is_monomial_monomial_ordered)"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n  punit.lt p = t\n  punit.lc p = c\n  p = monomial c t\n\ngoal (2 subgoals):\n 1. is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q\n 2. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "from \\<open>c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)", "have \"punit.tt p = t\" and \"punit.tc p = c\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. punit.tt p = t &&& punit.tc p = c", "by (simp_all add: p_eq punit.tt_monomial)"], ["proof (state)\nthis:\n  punit.tt p = t\n  punit.tc p = c\n\ngoal (2 subgoals):\n 1. is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q\n 2. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "with p_eq"], ["proof (chain)\npicking this:\n  p = monomial c t\n  punit.tt p = t\n  punit.tc p = c", "have \"p \\<odot> q = monom_mult (punit.tc p) (punit.tt p) q\""], ["proof (prove)\nusing this:\n  p = monomial c t\n  punit.tt p = t\n  punit.tc p = c\n\ngoal (1 subgoal):\n 1. p \\<odot> q = monom_mult (punit.tc p) (punit.tt p) q", "by (simp add: mult_scalar_monomial)"], ["proof (state)\nthis:\n  p \\<odot> q = monom_mult (punit.tc p) (punit.tt p) q\n\ngoal (2 subgoals):\n 1. is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q\n 2. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<odot> q = monom_mult (punit.tc p) (punit.tt p) q\n\ngoal (1 subgoal):\n 1. lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "by (simp add: lookup_monom_mult_plus tc_def)"], ["proof (state)\nthis:\n  lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "case False"], ["proof (state)\nthis:\n  \\<not> is_monomial p\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "from step(1)"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "with finite_keys"], ["proof (chain)\npicking this:\n  finite (keys ?f)\n  keys p \\<noteq> {}", "have \"card (keys p) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  finite (keys ?f)\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. card (keys p) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  card (keys p) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "with False"], ["proof (chain)\npicking this:\n  \\<not> is_monomial p\n  card (keys p) \\<noteq> 0", "have \"2 \\<le> card (keys p)\""], ["proof (prove)\nusing this:\n  \\<not> is_monomial p\n  card (keys p) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (keys p)", "unfolding is_monomial_def"], ["proof (prove)\nusing this:\n  card (keys p) \\<noteq> 1\n  card (keys p) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (keys p)", "by linarith"], ["proof (state)\nthis:\n  2 \\<le> card (keys p)\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "then"], ["proof (chain)\npicking this:\n  2 \\<le> card (keys p)", "obtain s t where \"s \\<in> keys p\" and \"t \\<in> keys p\" and \"s \\<prec> t\""], ["proof (prove)\nusing this:\n  2 \\<le> card (keys p)\n\ngoal (1 subgoal):\n 1. (\\<And>s t.\n        \\<lbrakk>s \\<in> keys p; t \\<in> keys p; s \\<prec> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (mono_tags, lifting) card.empty card.infinite card_insert_disjoint card_mono empty_iff\n          finite.emptyI insertCI lessI not_less numeral_2_eq_2 ordered_powerprod_lin.infinite_growing\n          ordered_powerprod_lin.neqE preorder_class.less_le_trans subsetI)"], ["proof (state)\nthis:\n  s \\<in> keys p\n  t \\<in> keys p\n  s \\<prec> t\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "from this(1) this(3)"], ["proof (chain)\npicking this:\n  s \\<in> keys p\n  s \\<prec> t", "have \"punit.tt p \\<prec> t\""], ["proof (prove)\nusing this:\n  s \\<in> keys p\n  s \\<prec> t\n\ngoal (1 subgoal):\n 1. punit.tt p \\<prec> t", "by (rule punit.tt_less)"], ["proof (state)\nthis:\n  punit.tt p \\<prec> t\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "also"], ["proof (state)\nthis:\n  punit.tt p \\<prec> t\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "from \\<open>t \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> keys p", "have \"t \\<preceq> punit.lt p\""], ["proof (prove)\nusing this:\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. t \\<preceq> punit.lt p", "by (rule punit.lt_max_keys)"], ["proof (state)\nthis:\n  t \\<preceq> punit.lt p\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "finally"], ["proof (chain)\npicking this:\n  punit.tt p \\<prec> punit.lt p", "have \"punit.tt p \\<prec> punit.lt p\""], ["proof (prove)\nusing this:\n  punit.tt p \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. punit.tt p \\<prec> punit.lt p", "."], ["proof (state)\nthis:\n  punit.tt p \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "hence tt_tail: \"punit.tt (punit.tail p) = punit.tt p\" and tc_tail: \"punit.tc (punit.tail p) = punit.tc p\""], ["proof (prove)\nusing this:\n  punit.tt p \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. punit.tt (punit.tail p) = punit.tt p &&&\n    punit.tc (punit.tail p) = punit.tc p", "unfolding punit.tail_def"], ["proof (prove)\nusing this:\n  punit.tt p \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. punit.tt (punit.lower p (punit.lt p)) = punit.tt p &&&\n    punit.tc (punit.lower p (punit.lt p)) = punit.tc p", "by (rule punit.tt_lower, rule punit.tc_lower)"], ["proof (state)\nthis:\n  punit.tt (punit.tail p) = punit.tt p\n  punit.tc (punit.tail p) = punit.tc p\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "have eq: \"lookup (monom_mult (punit.lc p) (punit.lt p) q) ?t = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (monom_mult (punit.lc p) (punit.lt p) q)\n     (punit.tt p \\<oplus> tt q) =\n    (0::'b)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup (monom_mult (punit.lc p) (punit.lt p) q)\n     (punit.tt p \\<oplus> tt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "assume \"lookup (monom_mult (punit.lc p) (punit.lt p) q) ?t \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup (monom_mult (punit.lc p) (punit.lt p) q)\n   (punit.tt p \\<oplus> tt q) \\<noteq>\n  (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (monom_mult (punit.lc p) (punit.lt p) q)\n     (punit.tt p \\<oplus> tt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "hence \"punit.lt p \\<oplus> tt q \\<preceq>\\<^sub>t ?t\""], ["proof (prove)\nusing this:\n  lookup (monom_mult (punit.lc p) (punit.lt p) q)\n   (punit.tt p \\<oplus> tt q) \\<noteq>\n  (0::'b)\n\ngoal (1 subgoal):\n 1. punit.lt p \\<oplus> tt q \\<preceq>\\<^sub>t punit.tt p \\<oplus> tt q", "by (meson in_keys_iff in_keys_monom_mult_ge)"], ["proof (state)\nthis:\n  punit.lt p \\<oplus> tt q \\<preceq>\\<^sub>t punit.tt p \\<oplus> tt q\n\ngoal (1 subgoal):\n 1. lookup (monom_mult (punit.lc p) (punit.lt p) q)\n     (punit.tt p \\<oplus> tt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "hence \"punit.lt p \\<preceq> punit.tt p\""], ["proof (prove)\nusing this:\n  punit.lt p \\<oplus> tt q \\<preceq>\\<^sub>t punit.tt p \\<oplus> tt q\n\ngoal (1 subgoal):\n 1. punit.lt p \\<preceq> punit.tt p", "by (rule ord_term_canc_left)"], ["proof (state)\nthis:\n  punit.lt p \\<preceq> punit.tt p\n\ngoal (1 subgoal):\n 1. lookup (monom_mult (punit.lc p) (punit.lt p) q)\n     (punit.tt p \\<oplus> tt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  punit.lt p \\<preceq> punit.tt p\n\ngoal (1 subgoal):\n 1. lookup (monom_mult (punit.lc p) (punit.lt p) q)\n     (punit.tt p \\<oplus> tt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "have \"... \\<prec> punit.lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.tt p \\<prec> punit.lt p", "by fact"], ["proof (state)\nthis:\n  punit.tt p \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. lookup (monom_mult (punit.lc p) (punit.lt p) q)\n     (punit.tt p \\<oplus> tt q) \\<noteq>\n    (0::'b) \\<Longrightarrow>\n    False", "finally"], ["proof (chain)\npicking this:\n  punit.lt p \\<prec> punit.lt p", "show False"], ["proof (prove)\nusing this:\n  punit.lt p \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (monom_mult (punit.lc p) (punit.lt p) q)\n   (punit.tt p \\<oplus> tt q) =\n  (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "from step(2)"], ["proof (chain)\npicking this:\n  lookup (punit.tail p \\<odot> q) (punit.tt (punit.tail p) \\<oplus> tt q) =\n  punit.tc (punit.tail p) * tc q", "have \"lookup (punit.tail p \\<odot> q) ?t = punit.tc p * tc q\""], ["proof (prove)\nusing this:\n  lookup (punit.tail p \\<odot> q) (punit.tt (punit.tail p) \\<oplus> tt q) =\n  punit.tc (punit.tail p) * tc q\n\ngoal (1 subgoal):\n 1. lookup (punit.tail p \\<odot> q) (punit.tt p \\<oplus> tt q) =\n    punit.tc p * tc q", "by (simp only: tt_tail tc_tail)"], ["proof (state)\nthis:\n  lookup (punit.tail p \\<odot> q) (punit.tt p \\<oplus> tt q) =\n  punit.tc p * tc q\n\ngoal (1 subgoal):\n 1. \\<not> is_monomial p \\<Longrightarrow>\n    lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "thus ?thesis"], ["proof (prove)\nusing this:\n  lookup (punit.tail p \\<odot> q) (punit.tt p \\<oplus> tt q) =\n  punit.tc p * tc q\n\ngoal (1 subgoal):\n 1. lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q", "by (simp add: mult_scalar_tail_rec_left[of p q] lookup_add eq)"], ["proof (state)\nthis:\n  lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (p \\<odot> q) (punit.tt p \\<oplus> tt q) = punit.tc p * tc q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_mult_scalar:\n  assumes \"p \\<noteq> 0\" and \"q \\<noteq> (0::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors)\"\n  shows \"lt (p \\<odot> q) = punit.lt p \\<oplus> lt q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (p \\<odot> q) = punit.lt p \\<oplus> lt q", "proof (rule lt_eqI_keys, simp only: in_keys_iff lookup_mult_scalar_lt_lt)"], ["proof (state)\ngoal (2 subgoals):\n 1. punit.lc p * lc q \\<noteq> (0::'b)\n 2. \\<And>u.\n       u \\<in> keys (p \\<odot> q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "from assms(1)"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"punit.lc p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. punit.lc p \\<noteq> (0::'b)", "by (rule punit.lc_not_0)"], ["proof (state)\nthis:\n  punit.lc p \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. punit.lc p * lc q \\<noteq> (0::'b)\n 2. \\<And>u.\n       u \\<in> keys (p \\<odot> q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "moreover"], ["proof (state)\nthis:\n  punit.lc p \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. punit.lc p * lc q \\<noteq> (0::'b)\n 2. \\<And>u.\n       u \\<in> keys (p \\<odot> q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "from assms(2)"], ["proof (chain)\npicking this:\n  q \\<noteq> 0", "have \"lc q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc q \\<noteq> (0::'b)", "by (rule lc_not_0)"], ["proof (state)\nthis:\n  lc q \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. punit.lc p * lc q \\<noteq> (0::'b)\n 2. \\<And>u.\n       u \\<in> keys (p \\<odot> q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "ultimately"], ["proof (chain)\npicking this:\n  punit.lc p \\<noteq> (0::'b)\n  lc q \\<noteq> (0::'b)", "show \"punit.lc p * lc q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  punit.lc p \\<noteq> (0::'b)\n  lc q \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. punit.lc p * lc q \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  punit.lc p * lc q \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (p \\<odot> q) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t punit.lt p \\<oplus> lt q", "qed (rule in_keys_mult_scalar_le)"], ["", "lemma tt_mult_scalar:\n  assumes \"p \\<noteq> 0\" and \"q \\<noteq> (0::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors)\"\n  shows \"tt (p \\<odot> q) = punit.tt p \\<oplus> tt q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tt (p \\<odot> q) = punit.tt p \\<oplus> tt q", "proof (rule tt_eqI, simp only: in_keys_iff lookup_mult_scalar_tt_tt)"], ["proof (state)\ngoal (2 subgoals):\n 1. punit.tc p * tc q \\<noteq> (0::'b)\n 2. \\<And>u.\n       u \\<in> keys (p \\<odot> q) \\<Longrightarrow>\n       punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t u", "from assms(1)"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"punit.tc p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. punit.tc p \\<noteq> (0::'b)", "by (rule punit.tc_not_0)"], ["proof (state)\nthis:\n  punit.tc p \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. punit.tc p * tc q \\<noteq> (0::'b)\n 2. \\<And>u.\n       u \\<in> keys (p \\<odot> q) \\<Longrightarrow>\n       punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t u", "moreover"], ["proof (state)\nthis:\n  punit.tc p \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. punit.tc p * tc q \\<noteq> (0::'b)\n 2. \\<And>u.\n       u \\<in> keys (p \\<odot> q) \\<Longrightarrow>\n       punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t u", "from assms(2)"], ["proof (chain)\npicking this:\n  q \\<noteq> 0", "have \"tc q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tc q \\<noteq> (0::'b)", "by (rule tc_not_0)"], ["proof (state)\nthis:\n  tc q \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. punit.tc p * tc q \\<noteq> (0::'b)\n 2. \\<And>u.\n       u \\<in> keys (p \\<odot> q) \\<Longrightarrow>\n       punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t u", "ultimately"], ["proof (chain)\npicking this:\n  punit.tc p \\<noteq> (0::'b)\n  tc q \\<noteq> (0::'b)", "show \"punit.tc p * tc q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  punit.tc p \\<noteq> (0::'b)\n  tc q \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. punit.tc p * tc q \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  punit.tc p * tc q \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (p \\<odot> q) \\<Longrightarrow>\n       punit.tt p \\<oplus> tt q \\<preceq>\\<^sub>t u", "qed (rule in_keys_mult_scalar_ge)"], ["", "lemma lc_mult_scalar: \"lc (p \\<odot> q) = punit.lc p * lc (q::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (p \\<odot> q) = punit.lc p * lc q", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q\n 2. p \\<noteq> 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q\n 2. p \\<noteq> 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. lc (p \\<odot> q) = punit.lc p * lc q", "by (simp add: lc_def)"], ["proof (state)\nthis:\n  lc (p \\<odot> q) = punit.lc p * lc q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (p \\<odot> q) = punit.lc p * lc q", "proof (cases \"q = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. q = 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q\n 2. q \\<noteq> 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q", "case True"], ["proof (state)\nthis:\n  q = 0\n\ngoal (2 subgoals):\n 1. q = 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q\n 2. q \\<noteq> 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q", "thus ?thesis"], ["proof (prove)\nusing this:\n  q = 0\n\ngoal (1 subgoal):\n 1. lc (p \\<odot> q) = punit.lc p * lc q", "by (simp add: lc_def)"], ["proof (state)\nthis:\n  lc (p \\<odot> q) = punit.lc p * lc q\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q", "case False"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> lc (p \\<odot> q) = punit.lc p * lc q", "with \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  q \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc (p \\<odot> q) = punit.lc p * lc q", "by (simp add: lc_def lt_mult_scalar lookup_mult_scalar_lt_lt)"], ["proof (state)\nthis:\n  lc (p \\<odot> q) = punit.lc p * lc q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lc (p \\<odot> q) = punit.lc p * lc q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tc_mult_scalar: \"tc (p \\<odot> q) = punit.tc p * tc (q::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (p \\<odot> q) = punit.tc p * tc q", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q\n 2. p \\<noteq> 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q\n 2. p \\<noteq> 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. tc (p \\<odot> q) = punit.tc p * tc q", "by (simp add: tc_def)"], ["proof (state)\nthis:\n  tc (p \\<odot> q) = punit.tc p * tc q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (p \\<odot> q) = punit.tc p * tc q", "proof (cases \"q = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. q = 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q\n 2. q \\<noteq> 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q", "case True"], ["proof (state)\nthis:\n  q = 0\n\ngoal (2 subgoals):\n 1. q = 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q\n 2. q \\<noteq> 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q", "thus ?thesis"], ["proof (prove)\nusing this:\n  q = 0\n\ngoal (1 subgoal):\n 1. tc (p \\<odot> q) = punit.tc p * tc q", "by (simp add: tc_def)"], ["proof (state)\nthis:\n  tc (p \\<odot> q) = punit.tc p * tc q\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q", "case False"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> tc (p \\<odot> q) = punit.tc p * tc q", "with \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  q \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tc (p \\<odot> q) = punit.tc p * tc q", "by (simp add: tc_def tt_mult_scalar lookup_mult_scalar_tt_tt)"], ["proof (state)\nthis:\n  tc (p \\<odot> q) = punit.tc p * tc q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tc (p \\<odot> q) = punit.tc p * tc q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_scalar_not_zero:\n  assumes \"p \\<noteq> 0\" and \"q \\<noteq> (0::'t \\<Rightarrow>\\<^sub>0 'b::semiring_no_zero_divisors)\"\n  shows \"p \\<odot> q \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<odot> q \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<odot> q = 0 \\<Longrightarrow> False", "assume \"p \\<odot> q = 0\""], ["proof (state)\nthis:\n  p \\<odot> q = 0\n\ngoal (1 subgoal):\n 1. p \\<odot> q = 0 \\<Longrightarrow> False", "hence \"0 = lc (p \\<odot> q)\""], ["proof (prove)\nusing this:\n  p \\<odot> q = 0\n\ngoal (1 subgoal):\n 1. (0::'b) = lc (p \\<odot> q)", "by (simp add: lc_def)"], ["proof (state)\nthis:\n  (0::'b) = lc (p \\<odot> q)\n\ngoal (1 subgoal):\n 1. p \\<odot> q = 0 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (0::'b) = lc (p \\<odot> q)\n\ngoal (1 subgoal):\n 1. p \\<odot> q = 0 \\<Longrightarrow> False", "have \"... = punit.lc p * lc q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (p \\<odot> q) = punit.lc p * lc q", "by (rule lc_mult_scalar)"], ["proof (state)\nthis:\n  lc (p \\<odot> q) = punit.lc p * lc q\n\ngoal (1 subgoal):\n 1. p \\<odot> q = 0 \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  (0::'b) = punit.lc p * lc q", "have \"punit.lc p * lc q = 0\""], ["proof (prove)\nusing this:\n  (0::'b) = punit.lc p * lc q\n\ngoal (1 subgoal):\n 1. punit.lc p * lc q = (0::'b)", "by simp"], ["proof (state)\nthis:\n  punit.lc p * lc q = (0::'b)\n\ngoal (1 subgoal):\n 1. p \\<odot> q = 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  punit.lc p * lc q = (0::'b)\n\ngoal (1 subgoal):\n 1. p \\<odot> q = 0 \\<Longrightarrow> False", "from assms(1)"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"punit.lc p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. punit.lc p \\<noteq> (0::'b)", "by (rule punit.lc_not_0)"], ["proof (state)\nthis:\n  punit.lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. p \\<odot> q = 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  punit.lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. p \\<odot> q = 0 \\<Longrightarrow> False", "from assms(2)"], ["proof (chain)\npicking this:\n  q \\<noteq> 0", "have \"lc q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc q \\<noteq> (0::'b)", "by (rule lc_not_0)"], ["proof (state)\nthis:\n  lc q \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. p \\<odot> q = 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  punit.lc p * lc q = (0::'b)\n  punit.lc p \\<noteq> (0::'b)\n  lc q \\<noteq> (0::'b)", "show False"], ["proof (prove)\nusing this:\n  punit.lc p * lc q = (0::'b)\n  punit.lc p \\<noteq> (0::'b)\n  lc q \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* ordered_term_powerprod *)"], ["", "context ordered_powerprod\nbegin"], ["", "lemmas in_keys_times_le = punit.in_keys_mult_scalar_le[simplified]"], ["", "lemmas in_keys_times_ge = punit.in_keys_mult_scalar_ge[simplified]"], ["", "lemmas lookup_times_lp_lp = punit.lookup_mult_scalar_lt_lt[simplified]"], ["", "lemmas lookup_times_tp_tp = punit.lookup_mult_scalar_tt_tt[simplified]"], ["", "lemmas lookup_times_monomial_right_plus = punit.lookup_mult_scalar_monomial_right_plus[simplified]"], ["", "lemmas lookup_times_monomial_right = punit.lookup_mult_scalar_monomial_right[simplified]"], ["", "lemmas lp_times = punit.lt_mult_scalar[simplified]"], ["", "lemmas tp_times = punit.tt_mult_scalar[simplified]"], ["", "lemmas lc_times = punit.lc_mult_scalar[simplified]"], ["", "lemmas tc_times = punit.tc_mult_scalar[simplified]"], ["", "lemmas times_not_zero = punit.mult_scalar_not_zero[simplified]"], ["", "lemmas times_tail_rec_left = punit.mult_scalar_tail_rec_left[simplified]"], ["", "lemmas times_tail_rec_right = punit.mult_scalar_tail_rec_right[simplified]"], ["", "lemmas punit_in_keys_monom_mult_le = punit.in_keys_monom_mult_le[simplified]"], ["", "lemmas punit_in_keys_monom_mult_ge = punit.in_keys_monom_mult_ge[simplified]"], ["", "lemmas lp_monom_mult = punit.lt_monom_mult[simplified]"], ["", "lemmas tp_monom_mult = punit.tt_monom_mult[simplified]"], ["", "end"], ["", "subsection \\<open>@{term dgrad_p_set} and @{term dgrad_p_set_le}\\<close>"], ["", "locale gd_term =\n    ordered_term pair_of_term term_of_pair ord ord_strict ord_term ord_term_strict\n      for pair_of_term::\"'t \\<Rightarrow> ('a::graded_dickson_powerprod \\<times> 'k::{the_min,wellorder})\"\n      and term_of_pair::\"('a \\<times> 'k) \\<Rightarrow> 't\"\n      and ord::\"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infixl \"\\<preceq>\" 50)\n      and ord_strict (infixl \"\\<prec>\" 50)\n      and ord_term::\"'t \\<Rightarrow> 't \\<Rightarrow> bool\" (infixl \"\\<preceq>\\<^sub>t\" 50)\n      and ord_term_strict::\"'t \\<Rightarrow> 't \\<Rightarrow> bool\" (infixl \"\\<prec>\\<^sub>t\" 50)\nbegin"], ["", "sublocale gd_powerprod"], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_powerprod (\\<preceq>) (\\<prec>)", ".."], ["", "lemma adds_term_antisym:\n  assumes \"u adds\\<^sub>t v\" and \"v adds\\<^sub>t u\"\n  shows \"u = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = v", "using assms"], ["proof (prove)\nusing this:\n  u adds\\<^sub>t v\n  v adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. u = v", "unfolding adds_term_def"], ["proof (prove)\nusing this:\n  component_of_term u = component_of_term v \\<and>\n  pp_of_term u adds pp_of_term v\n  component_of_term v = component_of_term u \\<and>\n  pp_of_term v adds pp_of_term u\n\ngoal (1 subgoal):\n 1. u = v", "using adds_antisym"], ["proof (prove)\nusing this:\n  component_of_term u = component_of_term v \\<and>\n  pp_of_term u adds pp_of_term v\n  component_of_term v = component_of_term u \\<and>\n  pp_of_term v adds pp_of_term u\n  \\<lbrakk>?s adds ?t; ?t adds ?s\\<rbrakk> \\<Longrightarrow> ?s = ?t\n\ngoal (1 subgoal):\n 1. u = v", "by (metis term_of_pair_pair)"], ["", "definition dgrad_p_set :: \"('a \\<Rightarrow> nat) \\<Rightarrow> nat \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b::zero) set\"\n  where \"dgrad_p_set d m = {p. pp_of_term ` keys p \\<subseteq> dgrad_set d m}\""], ["", "definition dgrad_p_set_le :: \"('a \\<Rightarrow> nat) \\<Rightarrow> (('t \\<Rightarrow>\\<^sub>0 'b) set) \\<Rightarrow> (('t \\<Rightarrow>\\<^sub>0 'b::zero) set) \\<Rightarrow> bool\"\n  where \"dgrad_p_set_le d F G \\<longleftrightarrow> (dgrad_set_le d (pp_of_term ` Keys F) (pp_of_term ` Keys G))\""], ["", "lemma in_dgrad_p_set_iff: \"p \\<in> dgrad_p_set d m \\<longleftrightarrow> (\\<forall>v\\<in>keys p. d (pp_of_term v) \\<le> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<in> dgrad_p_set d m) =\n    (\\<forall>v\\<in>keys p. d (pp_of_term v) \\<le> m)", "by (auto simp add: dgrad_p_set_def dgrad_set_def)"], ["", "lemma dgrad_p_setI [intro]:\n  assumes \"\\<And>v. v \\<in> keys p \\<Longrightarrow> d (pp_of_term v) \\<le> m\"\n  shows \"p \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d m", "using assms"], ["proof (prove)\nusing this:\n  ?v26 \\<in> keys p \\<Longrightarrow> d (pp_of_term ?v26) \\<le> m\n\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d m", "by (auto simp: in_dgrad_p_set_iff)"], ["", "lemma dgrad_p_setD:\n  assumes \"p \\<in> dgrad_p_set d m\" and \"v \\<in> keys p\"\n  shows \"d (pp_of_term v) \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "by (simp only: in_dgrad_p_set_iff)"], ["", "lemma zero_in_dgrad_p_set: \"0 \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> dgrad_p_set d m", "by (rule, simp)"], ["", "lemma dgrad_p_set_zero [simp]: \"dgrad_p_set (\\<lambda>_. 0) m = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set (\\<lambda>_. 0) m = UNIV", "by auto"], ["", "lemma subset_dgrad_p_set_zero: \"F \\<subseteq> dgrad_p_set (\\<lambda>_. 0) m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<subseteq> dgrad_p_set (\\<lambda>_. 0) m", "by simp"], ["", "lemma dgrad_p_set_subset:\n  assumes \"m \\<le> n\"\n  shows \"dgrad_p_set d m \\<subseteq> dgrad_p_set d n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set d m \\<subseteq> dgrad_p_set d n", "using assms"], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. dgrad_p_set d m \\<subseteq> dgrad_p_set d n", "by (auto simp: dgrad_p_set_def dgrad_set_def)"], ["", "lemma dgrad_p_setD_lp:\n  assumes \"p \\<in> dgrad_p_set d m\" and \"p \\<noteq> 0\"\n  shows \"d (lp p) \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (lp p) \\<le> m", "by (rule dgrad_p_setD, fact, rule lt_in_keys, fact)"], ["", "lemma dgrad_p_set_exhaust_expl:\n  assumes \"finite F\"\n  shows \"F \\<subseteq> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<subseteq> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> F \\<Longrightarrow>\n       x \\<in> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> F \\<Longrightarrow>\n       x \\<in> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))", "assume \"f \\<in> F\""], ["proof (state)\nthis:\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> F \\<Longrightarrow>\n       x \\<in> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))", "from assms"], ["proof (chain)\npicking this:\n  finite F", "have \"finite (Keys F)\""], ["proof (prove)\nusing this:\n  finite F\n\ngoal (1 subgoal):\n 1. finite (Keys F)", "by (rule finite_Keys)"], ["proof (state)\nthis:\n  finite (Keys F)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> F \\<Longrightarrow>\n       x \\<in> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))", "have fin: \"finite (d ` pp_of_term ` Keys F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (d ` pp_of_term ` Keys F)", "by (intro finite_imageI, fact)"], ["proof (state)\nthis:\n  finite (d ` pp_of_term ` Keys F)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> F \\<Longrightarrow>\n       x \\<in> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))", "show \"f \\<in> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))", "proof (rule dgrad_p_setI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys f \\<Longrightarrow>\n       d (pp_of_term v) \\<le> Max (d ` pp_of_term ` Keys F)", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys f \\<Longrightarrow>\n       d (pp_of_term v) \\<le> Max (d ` pp_of_term ` Keys F)", "assume \"v \\<in> keys f\""], ["proof (state)\nthis:\n  v \\<in> keys f\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys f \\<Longrightarrow>\n       d (pp_of_term v) \\<le> Max (d ` pp_of_term ` Keys F)", "from this \\<open>f \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> keys f\n  f \\<in> F", "have \"v \\<in> Keys F\""], ["proof (prove)\nusing this:\n  v \\<in> keys f\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. v \\<in> Keys F", "by (rule in_KeysI)"], ["proof (state)\nthis:\n  v \\<in> Keys F\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys f \\<Longrightarrow>\n       d (pp_of_term v) \\<le> Max (d ` pp_of_term ` Keys F)", "hence \"d (pp_of_term v) \\<in> d ` pp_of_term ` Keys F\""], ["proof (prove)\nusing this:\n  v \\<in> Keys F\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<in> d ` pp_of_term ` Keys F", "by simp"], ["proof (state)\nthis:\n  d (pp_of_term v) \\<in> d ` pp_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys f \\<Longrightarrow>\n       d (pp_of_term v) \\<le> Max (d ` pp_of_term ` Keys F)", "with fin"], ["proof (chain)\npicking this:\n  finite (d ` pp_of_term ` Keys F)\n  d (pp_of_term v) \\<in> d ` pp_of_term ` Keys F", "show \"d (pp_of_term v) \\<le> Max (d ` pp_of_term ` Keys F)\""], ["proof (prove)\nusing this:\n  finite (d ` pp_of_term ` Keys F)\n  d (pp_of_term v) \\<in> d ` pp_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> Max (d ` pp_of_term ` Keys F)", "by (rule Max_ge)"], ["proof (state)\nthis:\n  d (pp_of_term v) \\<le> Max (d ` pp_of_term ` Keys F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<in> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_exhaust:\n  assumes \"finite F\"\n  obtains m where \"F \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        F \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        F \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    F \\<subseteq> dgrad_p_set d ?m54", "from assms"], ["proof (chain)\npicking this:\n  finite F", "show \"F \\<subseteq> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))\""], ["proof (prove)\nusing this:\n  finite F\n\ngoal (1 subgoal):\n 1. F \\<subseteq> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))", "by (rule dgrad_p_set_exhaust_expl)"], ["proof (state)\nthis:\n  F \\<subseteq> dgrad_p_set d (Max (d ` pp_of_term ` Keys F))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_insert:\n  assumes \"F \\<subseteq> dgrad_p_set d m\"\n  obtains n where \"m \\<le> n\" and \"f \\<in> dgrad_p_set d n\" and \"F \\<subseteq> dgrad_p_set d n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>m \\<le> n; f \\<in> dgrad_p_set d n;\n         F \\<subseteq> dgrad_p_set d n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>m \\<le> n; f \\<in> dgrad_p_set d n;\n         F \\<subseteq> dgrad_p_set d n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"finite {f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {f}", "by simp"], ["proof (state)\nthis:\n  finite {f}\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>m \\<le> n; f \\<in> dgrad_p_set d n;\n         F \\<subseteq> dgrad_p_set d n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  finite {f}", "obtain m1 where \"{f} \\<subseteq> dgrad_p_set d m1\""], ["proof (prove)\nusing this:\n  finite {f}\n\ngoal (1 subgoal):\n 1. (\\<And>m1.\n        {f} \\<subseteq> dgrad_p_set d m1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule dgrad_p_set_exhaust)"], ["proof (state)\nthis:\n  {f} \\<subseteq> dgrad_p_set d m1\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>m \\<le> n; f \\<in> dgrad_p_set d n;\n         F \\<subseteq> dgrad_p_set d n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"f \\<in> dgrad_p_set d m1\""], ["proof (prove)\nusing this:\n  {f} \\<subseteq> dgrad_p_set d m1\n\ngoal (1 subgoal):\n 1. f \\<in> dgrad_p_set d m1", "by simp"], ["proof (state)\nthis:\n  f \\<in> dgrad_p_set d m1\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>m \\<le> n; f \\<in> dgrad_p_set d n;\n         F \\<subseteq> dgrad_p_set d n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define n where \"n = ord_class.max m m1\""], ["proof (state)\nthis:\n  n = ord_class.max m m1\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>m \\<le> n; f \\<in> dgrad_p_set d n;\n         F \\<subseteq> dgrad_p_set d n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"m \\<le> n\" and \"m1 \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n &&& m1 \\<le> n", "by (simp_all add: n_def)"], ["proof (state)\nthis:\n  m \\<le> n\n  m1 \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>m \\<le> n; f \\<in> dgrad_p_set d n;\n         F \\<subseteq> dgrad_p_set d n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this(1)"], ["proof (chain)\npicking this:\n  m \\<le> n", "show ?thesis"], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<in> dgrad_p_set d n\n 2. F \\<subseteq> dgrad_p_set d n", "from \\<open>m1 \\<le> n\\<close>"], ["proof (chain)\npicking this:\n  m1 \\<le> n", "have \"dgrad_p_set d m1 \\<subseteq> dgrad_p_set d n\""], ["proof (prove)\nusing this:\n  m1 \\<le> n\n\ngoal (1 subgoal):\n 1. dgrad_p_set d m1 \\<subseteq> dgrad_p_set d n", "by (rule dgrad_p_set_subset)"], ["proof (state)\nthis:\n  dgrad_p_set d m1 \\<subseteq> dgrad_p_set d n\n\ngoal (2 subgoals):\n 1. f \\<in> dgrad_p_set d n\n 2. F \\<subseteq> dgrad_p_set d n", "with \\<open>f \\<in> dgrad_p_set d m1\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> dgrad_p_set d m1\n  dgrad_p_set d m1 \\<subseteq> dgrad_p_set d n", "show \"f \\<in> dgrad_p_set d n\""], ["proof (prove)\nusing this:\n  f \\<in> dgrad_p_set d m1\n  dgrad_p_set d m1 \\<subseteq> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. f \\<in> dgrad_p_set d n", ".."], ["proof (state)\nthis:\n  f \\<in> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. F \\<subseteq> dgrad_p_set d n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. F \\<subseteq> dgrad_p_set d n", "from \\<open>m \\<le> n\\<close>"], ["proof (chain)\npicking this:\n  m \\<le> n", "have \"dgrad_p_set d m \\<subseteq> dgrad_p_set d n\""], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. dgrad_p_set d m \\<subseteq> dgrad_p_set d n", "by (rule dgrad_p_set_subset)"], ["proof (state)\nthis:\n  dgrad_p_set d m \\<subseteq> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. F \\<subseteq> dgrad_p_set d n", "with assms"], ["proof (chain)\npicking this:\n  F \\<subseteq> dgrad_p_set d m\n  dgrad_p_set d m \\<subseteq> dgrad_p_set d n", "show \"F \\<subseteq> dgrad_p_set d n\""], ["proof (prove)\nusing this:\n  F \\<subseteq> dgrad_p_set d m\n  dgrad_p_set d m \\<subseteq> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. F \\<subseteq> dgrad_p_set d n", "by (rule subset_trans)"], ["proof (state)\nthis:\n  F \\<subseteq> dgrad_p_set d n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_leI:\n  assumes \"\\<And>f. f \\<in> F \\<Longrightarrow> dgrad_p_set_le d {f} G\"\n  shows \"dgrad_p_set_le d F G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d F G", "unfolding dgrad_p_set_le_def dgrad_set_le_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>pp_of_term ` Keys F.\n       \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys F \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys F \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t", "assume \"s \\<in> pp_of_term ` Keys F\""], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys F \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t", "then"], ["proof (chain)\npicking this:\n  s \\<in> pp_of_term ` Keys F", "obtain v where \"v \\<in> Keys F\" and \"s = pp_of_term v\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> Keys F; s = pp_of_term v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  v \\<in> Keys F\n  s = pp_of_term v\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys F \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t", "from this(1)"], ["proof (chain)\npicking this:\n  v \\<in> Keys F", "obtain f where \"f \\<in> F\" and \"v \\<in> keys f\""], ["proof (prove)\nusing this:\n  v \\<in> Keys F\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; v \\<in> keys f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_KeysE)"], ["proof (state)\nthis:\n  f \\<in> F\n  v \\<in> keys f\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys F \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t", "from this(2)"], ["proof (chain)\npicking this:\n  v \\<in> keys f", "have \"s \\<in> pp_of_term ` Keys {f}\""], ["proof (prove)\nusing this:\n  v \\<in> keys f\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` Keys {f}", "by (simp add: \\<open>s = pp_of_term v\\<close> Keys_insert)"], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` Keys {f}\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys F \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t", "from \\<open>f \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> F", "have \"dgrad_p_set_le d {f} G\""], ["proof (prove)\nusing this:\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {f} G", "by (rule assms)"], ["proof (state)\nthis:\n  dgrad_p_set_le d {f} G\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys F \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t", "from this \\<open>s \\<in> pp_of_term ` Keys {f}\\<close>"], ["proof (chain)\npicking this:\n  dgrad_p_set_le d {f} G\n  s \\<in> pp_of_term ` Keys {f}", "show \"\\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t\""], ["proof (prove)\nusing this:\n  dgrad_p_set_le d {f} G\n  s \\<in> pp_of_term ` Keys {f}\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t", "unfolding dgrad_p_set_le_def dgrad_set_le_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>pp_of_term ` Keys {f}.\n     \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t\n  s \\<in> pp_of_term ` Keys {f}\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t", ".."], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term ` Keys G. d s \\<le> d t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_le_trans [trans]:\n  assumes \"dgrad_p_set_le d F G\" and \"dgrad_p_set_le d G H\"\n  shows \"dgrad_p_set_le d F H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d F H", "using assms"], ["proof (prove)\nusing this:\n  dgrad_p_set_le d F G\n  dgrad_p_set_le d G H\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d F H", "unfolding dgrad_p_set_le_def"], ["proof (prove)\nusing this:\n  dgrad_set_le d (pp_of_term ` Keys F) (pp_of_term ` Keys G)\n  dgrad_set_le d (pp_of_term ` Keys G) (pp_of_term ` Keys H)\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` Keys F) (pp_of_term ` Keys H)", "by (rule dgrad_set_le_trans)"], ["", "lemma dgrad_p_set_le_subset:\n  assumes \"F \\<subseteq> G\"\n  shows \"dgrad_p_set_le d F G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d F G", "unfolding dgrad_p_set_le_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` Keys F) (pp_of_term ` Keys G)", "by (rule dgrad_set_le_subset, rule image_mono, rule Keys_mono, fact)"], ["", "lemma dgrad_p_set_leI_insert_keys:\n  assumes \"dgrad_p_set_le d F G\" and \"dgrad_set_le d (pp_of_term ` keys f) (pp_of_term ` Keys G)\"\n  shows \"dgrad_p_set_le d (insert f F) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (insert f F) G", "using assms"], ["proof (prove)\nusing this:\n  dgrad_p_set_le d F G\n  dgrad_set_le d (pp_of_term ` keys f) (pp_of_term ` Keys G)\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (insert f F) G", "by (simp add: dgrad_p_set_le_def Keys_insert dgrad_set_le_Un image_Un)"], ["", "lemma dgrad_p_set_leI_insert:\n  assumes \"dgrad_p_set_le d F G\" and \"dgrad_p_set_le d {f} G\"\n  shows \"dgrad_p_set_le d (insert f F) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (insert f F) G", "using assms"], ["proof (prove)\nusing this:\n  dgrad_p_set_le d F G\n  dgrad_p_set_le d {f} G\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (insert f F) G", "by (simp add: dgrad_p_set_le_def Keys_insert dgrad_set_le_Un image_Un)"], ["", "lemma dgrad_p_set_leI_Un:\n  assumes \"dgrad_p_set_le d F1 G\" and \"dgrad_p_set_le d F2 G\"\n  shows \"dgrad_p_set_le d (F1 \\<union> F2) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (F1 \\<union> F2) G", "using assms"], ["proof (prove)\nusing this:\n  dgrad_p_set_le d F1 G\n  dgrad_p_set_le d F2 G\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (F1 \\<union> F2) G", "by (auto simp: dgrad_p_set_le_def dgrad_set_le_def Keys_Un)"], ["", "lemma dgrad_p_set_le_dgrad_p_set:\n  assumes \"dgrad_p_set_le d F G\" and \"G \\<subseteq> dgrad_p_set d m\"\n  shows \"F \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<subseteq> dgrad_p_set d m", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> dgrad_p_set d m", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> dgrad_p_set d m", "assume \"f \\<in> F\""], ["proof (state)\nthis:\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> dgrad_p_set d m", "show \"f \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> dgrad_p_set d m", "proof (rule dgrad_p_setI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> keys f \\<Longrightarrow> d (pp_of_term v) \\<le> m", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> keys f \\<Longrightarrow> d (pp_of_term v) \\<le> m", "assume \"v \\<in> keys f\""], ["proof (state)\nthis:\n  v \\<in> keys f\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> keys f \\<Longrightarrow> d (pp_of_term v) \\<le> m", "from this \\<open>f \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> keys f\n  f \\<in> F", "have \"v \\<in> Keys F\""], ["proof (prove)\nusing this:\n  v \\<in> keys f\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. v \\<in> Keys F", "by (rule in_KeysI)"], ["proof (state)\nthis:\n  v \\<in> Keys F\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> keys f \\<Longrightarrow> d (pp_of_term v) \\<le> m", "hence \"pp_of_term v \\<in> pp_of_term ` Keys F\""], ["proof (prove)\nusing this:\n  v \\<in> Keys F\n\ngoal (1 subgoal):\n 1. pp_of_term v \\<in> pp_of_term ` Keys F", "by simp"], ["proof (state)\nthis:\n  pp_of_term v \\<in> pp_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> keys f \\<Longrightarrow> d (pp_of_term v) \\<le> m", "with assms(1)"], ["proof (chain)\npicking this:\n  dgrad_p_set_le d F G\n  pp_of_term v \\<in> pp_of_term ` Keys F", "obtain s where \"s \\<in> pp_of_term ` Keys G\" and \"d (pp_of_term v) \\<le> d s\""], ["proof (prove)\nusing this:\n  dgrad_p_set_le d F G\n  pp_of_term v \\<in> pp_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> pp_of_term ` Keys G;\n         d (pp_of_term v) \\<le> d s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dgrad_p_set_le_def"], ["proof (prove)\nusing this:\n  dgrad_set_le d (pp_of_term ` Keys F) (pp_of_term ` Keys G)\n  pp_of_term v \\<in> pp_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> pp_of_term ` Keys G;\n         d (pp_of_term v) \\<le> d s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule dgrad_set_leE)"], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` Keys G\n  d (pp_of_term v) \\<le> d s\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> keys f \\<Longrightarrow> d (pp_of_term v) \\<le> m", "from this(1)"], ["proof (chain)\npicking this:\n  s \\<in> pp_of_term ` Keys G", "obtain u where \"u \\<in> Keys G\" and s: \"s = pp_of_term u\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term ` Keys G\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> Keys G; s = pp_of_term u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u \\<in> Keys G\n  s = pp_of_term u\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> keys f \\<Longrightarrow> d (pp_of_term v) \\<le> m", "from this(1)"], ["proof (chain)\npicking this:\n  u \\<in> Keys G", "obtain g where \"g \\<in> G\" and \"u \\<in> keys g\""], ["proof (prove)\nusing this:\n  u \\<in> Keys G\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> G; u \\<in> keys g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_KeysE)"], ["proof (state)\nthis:\n  g \\<in> G\n  u \\<in> keys g\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> keys f \\<Longrightarrow> d (pp_of_term v) \\<le> m", "from this(1) assms(2)"], ["proof (chain)\npicking this:\n  g \\<in> G\n  G \\<subseteq> dgrad_p_set d m", "have \"g \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  g \\<in> G\n  G \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. g \\<in> dgrad_p_set d m", ".."], ["proof (state)\nthis:\n  g \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> keys f \\<Longrightarrow> d (pp_of_term v) \\<le> m", "from this \\<open>u \\<in> keys g\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> dgrad_p_set d m\n  u \\<in> keys g", "have \"d s \\<le> m\""], ["proof (prove)\nusing this:\n  g \\<in> dgrad_p_set d m\n  u \\<in> keys g\n\ngoal (1 subgoal):\n 1. d s \\<le> m", "unfolding s"], ["proof (prove)\nusing this:\n  g \\<in> dgrad_p_set d m\n  u \\<in> keys g\n\ngoal (1 subgoal):\n 1. d (pp_of_term u) \\<le> m", "by (rule dgrad_p_setD)"], ["proof (state)\nthis:\n  d s \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> keys f \\<Longrightarrow> d (pp_of_term v) \\<le> m", "with \\<open>d (pp_of_term v) \\<le> d s\\<close>"], ["proof (chain)\npicking this:\n  d (pp_of_term v) \\<le> d s\n  d s \\<le> m", "show \"d (pp_of_term v) \\<le> m\""], ["proof (prove)\nusing this:\n  d (pp_of_term v) \\<le> d s\n  d s \\<le> m\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "by (rule le_trans)"], ["proof (state)\nthis:\n  d (pp_of_term v) \\<le> m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<in> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_le_except: \"dgrad_p_set_le d {except p S} {p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {except p S} {p}", "by (auto simp add: dgrad_p_set_le_def Keys_insert keys_except intro: dgrad_set_le_subset)"], ["", "lemma dgrad_p_set_le_tail: \"dgrad_p_set_le d {tail p} {p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {tail p} {p}", "by (simp only: tail_def lower_def, fact dgrad_p_set_le_except)"], ["", "lemma dgrad_p_set_le_plus: \"dgrad_p_set_le d {p + q} {p, q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {p + q} {p, q}", "by (simp add: dgrad_p_set_le_def Keys_insert, rule dgrad_set_le_subset, rule image_mono, fact Poly_Mapping.keys_add)"], ["", "lemma dgrad_p_set_le_uminus: \"dgrad_p_set_le d {-p} {p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {- p} {p}", "by (simp add: dgrad_p_set_le_def Keys_insert keys_uminus, fact dgrad_set_le_refl)"], ["", "lemma dgrad_p_set_le_minus: \"dgrad_p_set_le d {p - q} {p, q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {p - q} {p, q}", "by (simp add: dgrad_p_set_le_def Keys_insert, rule dgrad_set_le_subset, rule image_mono, fact keys_minus)"], ["", "lemma dgrad_set_le_monom_mult:\n  assumes \"dickson_grading d\"\n  shows \"dgrad_set_le d (pp_of_term ` keys (monom_mult c t p)) (insert t (pp_of_term ` keys p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` keys (monom_mult c t p))\n     (insert t (pp_of_term ` keys p))", "proof (rule dgrad_set_leI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` keys (monom_mult c t p) \\<Longrightarrow>\n       \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` keys (monom_mult c t p) \\<Longrightarrow>\n       \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "assume \"s \\<in> pp_of_term ` keys (monom_mult c t p)\""], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` keys (monom_mult c t p) \\<Longrightarrow>\n       \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "with keys_monom_mult_subset"], ["proof (chain)\npicking this:\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n  s \\<in> pp_of_term ` keys (monom_mult c t p)", "have \"s \\<in> pp_of_term ` ((\\<oplus>) t ` keys p)\""], ["proof (prove)\nusing this:\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n  s \\<in> pp_of_term ` keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` (\\<oplus>) t ` keys p", "by fastforce"], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` (\\<oplus>) t ` keys p\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` keys (monom_mult c t p) \\<Longrightarrow>\n       \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "then"], ["proof (chain)\npicking this:\n  s \\<in> pp_of_term ` (\\<oplus>) t ` keys p", "obtain v where \"v \\<in> keys p\" and s: \"s = pp_of_term (t \\<oplus> v)\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term ` (\\<oplus>) t ` keys p\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys p; s = pp_of_term (t \\<oplus> v)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  v \\<in> keys p\n  s = pp_of_term (t \\<oplus> v)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` keys (monom_mult c t p) \\<Longrightarrow>\n       \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "have \"d s = ord_class.max (d t) (d (pp_of_term v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d s = ord_class.max (d t) (d (pp_of_term v))", "by (simp only: s pp_of_term_splus dickson_gradingD1[OF assms(1)])"], ["proof (state)\nthis:\n  d s = ord_class.max (d t) (d (pp_of_term v))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` keys (monom_mult c t p) \\<Longrightarrow>\n       \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "hence \"d s = d t \\<or> d s = d (pp_of_term v)\""], ["proof (prove)\nusing this:\n  d s = ord_class.max (d t) (d (pp_of_term v))\n\ngoal (1 subgoal):\n 1. d s = d t \\<or> d s = d (pp_of_term v)", "by auto"], ["proof (state)\nthis:\n  d s = d t \\<or> d s = d (pp_of_term v)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` keys (monom_mult c t p) \\<Longrightarrow>\n       \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "thus \"\\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t\""], ["proof (prove)\nusing this:\n  d s = d t \\<or> d s = d (pp_of_term v)\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. d s = d t \\<Longrightarrow>\n    \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t\n 2. d s = d (pp_of_term v) \\<Longrightarrow>\n    \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "assume \"d s = d t\""], ["proof (state)\nthis:\n  d s = d t\n\ngoal (2 subgoals):\n 1. d s = d t \\<Longrightarrow>\n    \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t\n 2. d s = d (pp_of_term v) \\<Longrightarrow>\n    \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "thus ?thesis"], ["proof (prove)\nusing this:\n  d s = d t\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "by simp"], ["proof (state)\nthis:\n  \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t\n\ngoal (1 subgoal):\n 1. d s = d (pp_of_term v) \\<Longrightarrow>\n    \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d s = d (pp_of_term v) \\<Longrightarrow>\n    \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "assume \"d s = d (pp_of_term v)\""], ["proof (state)\nthis:\n  d s = d (pp_of_term v)\n\ngoal (1 subgoal):\n 1. d s = d (pp_of_term v) \\<Longrightarrow>\n    \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. d s \\<le> d ?t\n 2. ?t \\<in> insert t (pp_of_term ` keys p)", "from \\<open>d s = d (pp_of_term v)\\<close>"], ["proof (chain)\npicking this:\n  d s = d (pp_of_term v)", "show \"d s \\<le> d (pp_of_term v)\""], ["proof (prove)\nusing this:\n  d s = d (pp_of_term v)\n\ngoal (1 subgoal):\n 1. d s \\<le> d (pp_of_term v)", "by simp"], ["proof (state)\nthis:\n  d s \\<le> d (pp_of_term v)\n\ngoal (1 subgoal):\n 1. pp_of_term v \\<in> insert t (pp_of_term ` keys p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pp_of_term v \\<in> insert t (pp_of_term ` keys p)", "from \\<open>v \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> keys p", "show \"pp_of_term v \\<in> insert t (pp_of_term ` keys p)\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. pp_of_term v \\<in> insert t (pp_of_term ` keys p)", "by simp"], ["proof (state)\nthis:\n  pp_of_term v \\<in> insert t (pp_of_term ` keys p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t\\<in>insert t (pp_of_term ` keys p). d s \\<le> d t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_closed_plus:\n  assumes \"p \\<in> dgrad_p_set d m\" and \"q \\<in> dgrad_p_set d m\"\n  shows \"p + q \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p + q \\<in> dgrad_p_set d m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p + q \\<in> dgrad_p_set d m", "from dgrad_p_set_le_plus"], ["proof (chain)\npicking this:\n  dgrad_p_set_le ?d {?p + ?q} {?p, ?q}", "have \"{p + q} \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  dgrad_p_set_le ?d {?p + ?q} {?p, ?q}\n\ngoal (1 subgoal):\n 1. {p + q} \\<subseteq> dgrad_p_set d m", "proof (rule dgrad_p_set_le_dgrad_p_set)"], ["proof (state)\ngoal (1 subgoal):\n 1. {p, q} \\<subseteq> dgrad_p_set d m", "from assms"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m", "show \"{p, q} \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. {p, q} \\<subseteq> dgrad_p_set d m", "by simp"], ["proof (state)\nthis:\n  {p, q} \\<subseteq> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {p + q} \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. p + q \\<in> dgrad_p_set d m", "thus ?thesis"], ["proof (prove)\nusing this:\n  {p + q} \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. p + q \\<in> dgrad_p_set d m", "by simp"], ["proof (state)\nthis:\n  p + q \\<in> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_closed_uminus:\n  assumes \"p \\<in> dgrad_p_set d m\"\n  shows \"-p \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<in> dgrad_p_set d m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - p \\<in> dgrad_p_set d m", "from dgrad_p_set_le_uminus"], ["proof (chain)\npicking this:\n  dgrad_p_set_le ?d {- ?p} {?p}", "have \"{-p} \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  dgrad_p_set_le ?d {- ?p} {?p}\n\ngoal (1 subgoal):\n 1. {- p} \\<subseteq> dgrad_p_set d m", "proof (rule dgrad_p_set_le_dgrad_p_set)"], ["proof (state)\ngoal (1 subgoal):\n 1. {p} \\<subseteq> dgrad_p_set d m", "from assms"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m", "show \"{p} \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. {p} \\<subseteq> dgrad_p_set d m", "by simp"], ["proof (state)\nthis:\n  {p} \\<subseteq> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {- p} \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. - p \\<in> dgrad_p_set d m", "thus ?thesis"], ["proof (prove)\nusing this:\n  {- p} \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. - p \\<in> dgrad_p_set d m", "by simp"], ["proof (state)\nthis:\n  - p \\<in> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_closed_minus:\n  assumes \"p \\<in> dgrad_p_set d m\" and \"q \\<in> dgrad_p_set d m\"\n  shows \"p - q \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - q \\<in> dgrad_p_set d m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p - q \\<in> dgrad_p_set d m", "from dgrad_p_set_le_minus"], ["proof (chain)\npicking this:\n  dgrad_p_set_le ?d {?p - ?q} {?p, ?q}", "have \"{p - q} \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  dgrad_p_set_le ?d {?p - ?q} {?p, ?q}\n\ngoal (1 subgoal):\n 1. {p - q} \\<subseteq> dgrad_p_set d m", "proof (rule dgrad_p_set_le_dgrad_p_set)"], ["proof (state)\ngoal (1 subgoal):\n 1. {p, q} \\<subseteq> dgrad_p_set d m", "from assms"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m", "show \"{p, q} \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. {p, q} \\<subseteq> dgrad_p_set d m", "by simp"], ["proof (state)\nthis:\n  {p, q} \\<subseteq> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {p - q} \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. p - q \\<in> dgrad_p_set d m", "thus ?thesis"], ["proof (prove)\nusing this:\n  {p - q} \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. p - q \\<in> dgrad_p_set d m", "by simp"], ["proof (state)\nthis:\n  p - q \\<in> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_closed_monom_mult:\n  assumes \"dickson_grading d\" and \"d t \\<le> m\" and \"p \\<in> dgrad_p_set d m\"\n  shows \"monom_mult c t p \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult c t p \\<in> dgrad_p_set d m", "proof (rule dgrad_p_setI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c t p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c t p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "assume \"v \\<in> keys (monom_mult c t p)\""], ["proof (state)\nthis:\n  v \\<in> keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c t p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "hence \"pp_of_term v \\<in> pp_of_term ` keys (monom_mult c t p)\""], ["proof (prove)\nusing this:\n  v \\<in> keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. pp_of_term v \\<in> pp_of_term ` keys (monom_mult c t p)", "by simp"], ["proof (state)\nthis:\n  pp_of_term v \\<in> pp_of_term ` keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c t p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "with dgrad_set_le_monom_mult[OF assms(1)]"], ["proof (chain)\npicking this:\n  dgrad_set_le d (pp_of_term ` keys (monom_mult ?c ?t ?p))\n   (insert ?t (pp_of_term ` keys ?p))\n  pp_of_term v \\<in> pp_of_term ` keys (monom_mult c t p)", "obtain s where \"s \\<in> insert t (pp_of_term ` keys p)\"\n    and \"d (pp_of_term v) \\<le> d s\""], ["proof (prove)\nusing this:\n  dgrad_set_le d (pp_of_term ` keys (monom_mult ?c ?t ?p))\n   (insert ?t (pp_of_term ` keys ?p))\n  pp_of_term v \\<in> pp_of_term ` keys (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> insert t (pp_of_term ` keys p);\n         d (pp_of_term v) \\<le> d s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule dgrad_set_leE)"], ["proof (state)\nthis:\n  s \\<in> insert t (pp_of_term ` keys p)\n  d (pp_of_term v) \\<le> d s\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c t p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "from this(1)"], ["proof (chain)\npicking this:\n  s \\<in> insert t (pp_of_term ` keys p)", "have \"s = t \\<or> s \\<in> pp_of_term ` keys p\""], ["proof (prove)\nusing this:\n  s \\<in> insert t (pp_of_term ` keys p)\n\ngoal (1 subgoal):\n 1. s = t \\<or> s \\<in> pp_of_term ` keys p", "by simp"], ["proof (state)\nthis:\n  s = t \\<or> s \\<in> pp_of_term ` keys p\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c t p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "thus \"d (pp_of_term v) \\<le> m\""], ["proof (prove)\nusing this:\n  s = t \\<or> s \\<in> pp_of_term ` keys p\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow> d (pp_of_term v) \\<le> m\n 2. s \\<in> pp_of_term ` keys p \\<Longrightarrow> d (pp_of_term v) \\<le> m", "assume \"s = t\""], ["proof (state)\nthis:\n  s = t\n\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow> d (pp_of_term v) \\<le> m\n 2. s \\<in> pp_of_term ` keys p \\<Longrightarrow> d (pp_of_term v) \\<le> m", "with \\<open>d (pp_of_term v) \\<le> d s\\<close> assms(2)"], ["proof (chain)\npicking this:\n  d (pp_of_term v) \\<le> d s\n  d t \\<le> m\n  s = t", "show ?thesis"], ["proof (prove)\nusing this:\n  d (pp_of_term v) \\<le> d s\n  d t \\<le> m\n  s = t\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "by simp"], ["proof (state)\nthis:\n  d (pp_of_term v) \\<le> m\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys p \\<Longrightarrow> d (pp_of_term v) \\<le> m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys p \\<Longrightarrow> d (pp_of_term v) \\<le> m", "assume \"s \\<in> pp_of_term ` keys p\""], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` keys p\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys p \\<Longrightarrow> d (pp_of_term v) \\<le> m", "then"], ["proof (chain)\npicking this:\n  s \\<in> pp_of_term ` keys p", "obtain u where \"u \\<in> keys p\" and \"s = pp_of_term u\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term ` keys p\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> keys p; s = pp_of_term u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n  s = pp_of_term u\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys p \\<Longrightarrow> d (pp_of_term v) \\<le> m", "from assms(3) this(1)"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m\n  u \\<in> keys p", "have \"d s \\<le> m\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. d s \\<le> m", "unfolding \\<open>s = pp_of_term u\\<close>"], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. d (pp_of_term u) \\<le> m", "by (rule dgrad_p_setD)"], ["proof (state)\nthis:\n  d s \\<le> m\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys p \\<Longrightarrow> d (pp_of_term v) \\<le> m", "with \\<open>d (pp_of_term v) \\<le> d s\\<close>"], ["proof (chain)\npicking this:\n  d (pp_of_term v) \\<le> d s\n  d s \\<le> m", "show ?thesis"], ["proof (prove)\nusing this:\n  d (pp_of_term v) \\<le> d s\n  d s \\<le> m\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "by (rule le_trans)"], ["proof (state)\nthis:\n  d (pp_of_term v) \\<le> m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  d (pp_of_term v) \\<le> m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_closed_monom_mult_zero:\n  assumes \"p \\<in> dgrad_p_set d m\"\n  shows \"monom_mult c 0 p \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult c (0::'a) p \\<in> dgrad_p_set d m", "proof (rule dgrad_p_setI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c (0::'a) p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c (0::'a) p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "assume \"v \\<in> keys (monom_mult c 0 p)\""], ["proof (state)\nthis:\n  v \\<in> keys (monom_mult c (0::'a) p)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c (0::'a) p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "hence \"pp_of_term v \\<in> pp_of_term ` keys (monom_mult c 0 p)\""], ["proof (prove)\nusing this:\n  v \\<in> keys (monom_mult c (0::'a) p)\n\ngoal (1 subgoal):\n 1. pp_of_term v \\<in> pp_of_term ` keys (monom_mult c (0::'a) p)", "by simp"], ["proof (state)\nthis:\n  pp_of_term v \\<in> pp_of_term ` keys (monom_mult c (0::'a) p)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c (0::'a) p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "then"], ["proof (chain)\npicking this:\n  pp_of_term v \\<in> pp_of_term ` keys (monom_mult c (0::'a) p)", "obtain u where \"u \\<in> keys (monom_mult c 0 p)\" and eq: \"pp_of_term v = pp_of_term u\""], ["proof (prove)\nusing this:\n  pp_of_term v \\<in> pp_of_term ` keys (monom_mult c (0::'a) p)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> keys (monom_mult c (0::'a) p);\n         pp_of_term v = pp_of_term u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u \\<in> keys (monom_mult c (0::'a) p)\n  pp_of_term v = pp_of_term u\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c (0::'a) p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "from this(1)"], ["proof (chain)\npicking this:\n  u \\<in> keys (monom_mult c (0::'a) p)", "have \"u \\<in> keys p\""], ["proof (prove)\nusing this:\n  u \\<in> keys (monom_mult c (0::'a) p)\n\ngoal (1 subgoal):\n 1. u \\<in> keys p", "by (metis keys_monom_multE splus_zero)"], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c (0::'a) p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "with assms"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m\n  u \\<in> keys p", "have \"d (pp_of_term u) \\<le> m\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. d (pp_of_term u) \\<le> m", "by (rule dgrad_p_setD)"], ["proof (state)\nthis:\n  d (pp_of_term u) \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (monom_mult c (0::'a) p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "thus \"d (pp_of_term v) \\<le> m\""], ["proof (prove)\nusing this:\n  d (pp_of_term u) \\<le> m\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "by (simp only: eq)"], ["proof (state)\nthis:\n  d (pp_of_term v) \\<le> m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_closed_except:\n  assumes \"p \\<in> dgrad_p_set d m\"\n  shows \"except p S \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. except p S \\<in> dgrad_p_set d m", "by (rule dgrad_p_setI, rule dgrad_p_setD, rule assms, simp add: keys_except)"], ["", "lemma dgrad_p_set_closed_tail:\n  assumes \"p \\<in> dgrad_p_set d m\"\n  shows \"tail p \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail p \\<in> dgrad_p_set d m", "unfolding tail_def lower_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. except p (Collect ((\\<preceq>\\<^sub>t) (lt p))) \\<in> dgrad_p_set d m", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. except p (Collect ((\\<preceq>\\<^sub>t) (lt p))) \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_except)"], ["", "subsection \\<open>Dickson's Lemma for Sequences of Terms\\<close>"], ["", "lemma Dickson_term:\n  assumes \"dickson_grading d\" and \"finite K\"\n  shows \"almost_full_on (adds\\<^sub>t) {t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> K}\"\n    (is \"almost_full_on _ ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_full_on (adds\\<^sub>t)\n     {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n         component_of_term t \\<in> K}", "proof (rule almost_full_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "fix seq :: \"nat \\<Rightarrow> 't\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "assume *: \"\\<forall>i. seq i \\<in> ?A\""], ["proof (state)\nthis:\n  \\<forall>i.\n     seq i\n     \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n               component_of_term t \\<in> K}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "define seq' where \"seq' = (\\<lambda>i. (pp_of_term (seq i), component_of_term (seq i)))\""], ["proof (state)\nthis:\n  seq' = (\\<lambda>i. (pp_of_term (seq i), component_of_term (seq i)))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "have \"pp_of_term ` ?A \\<subseteq> {x. d x \\<le> m}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pp_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> K}\n    \\<subseteq> {x. d x \\<le> m}", "by (auto dest: dgrad_setD)"], ["proof (state)\nthis:\n  pp_of_term `\n  {t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> K}\n  \\<subseteq> {x. d x \\<le> m}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "moreover"], ["proof (state)\nthis:\n  pp_of_term `\n  {t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> K}\n  \\<subseteq> {x. d x \\<le> m}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "from assms(1)"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"almost_full_on (adds) {x. d x \\<le> m}\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. almost_full_on (adds) {x. d x \\<le> m}", "by (rule dickson_gradingD2)"], ["proof (state)\nthis:\n  almost_full_on (adds) {x. d x \\<le> m}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "ultimately"], ["proof (chain)\npicking this:\n  pp_of_term `\n  {t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> K}\n  \\<subseteq> {x. d x \\<le> m}\n  almost_full_on (adds) {x. d x \\<le> m}", "have \"almost_full_on (adds) (pp_of_term ` ?A)\""], ["proof (prove)\nusing this:\n  pp_of_term `\n  {t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> K}\n  \\<subseteq> {x. d x \\<le> m}\n  almost_full_on (adds) {x. d x \\<le> m}\n\ngoal (1 subgoal):\n 1. almost_full_on (adds)\n     (pp_of_term `\n      {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n          component_of_term t \\<in> K})", "by (rule almost_full_on_subset)"], ["proof (state)\nthis:\n  almost_full_on (adds)\n   (pp_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "moreover"], ["proof (state)\nthis:\n  almost_full_on (adds)\n   (pp_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "have \"almost_full_on (=) (component_of_term ` ?A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_full_on (=)\n     (component_of_term `\n      {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n          component_of_term t \\<in> K})", "proof (rule eq_almost_full_on_finite_set)"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     (component_of_term `\n      {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n          component_of_term t \\<in> K})", "have \"component_of_term ` ?A \\<subseteq> K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> K}\n    \\<subseteq> K", "by blast"], ["proof (state)\nthis:\n  component_of_term `\n  {t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> K}\n  \\<subseteq> K\n\ngoal (1 subgoal):\n 1. finite\n     (component_of_term `\n      {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n          component_of_term t \\<in> K})", "thus \"finite (component_of_term ` ?A)\""], ["proof (prove)\nusing this:\n  component_of_term `\n  {t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> K}\n  \\<subseteq> K\n\ngoal (1 subgoal):\n 1. finite\n     (component_of_term `\n      {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n          component_of_term t \\<in> K})", "using assms(2)"], ["proof (prove)\nusing this:\n  component_of_term `\n  {t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> K}\n  \\<subseteq> K\n  finite K\n\ngoal (1 subgoal):\n 1. finite\n     (component_of_term `\n      {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n          component_of_term t \\<in> K})", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite\n   (component_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  almost_full_on (=)\n   (component_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "ultimately"], ["proof (chain)\npicking this:\n  almost_full_on (adds)\n   (pp_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})\n  almost_full_on (=)\n   (component_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})", "have \"almost_full_on (prod_le (adds) (=)) (pp_of_term ` ?A \\<times> component_of_term ` ?A)\""], ["proof (prove)\nusing this:\n  almost_full_on (adds)\n   (pp_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})\n  almost_full_on (=)\n   (component_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})\n\ngoal (1 subgoal):\n 1. almost_full_on (prod_le (adds) (=))\n     (pp_of_term `\n      {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n          component_of_term t \\<in> K} \\<times>\n      component_of_term `\n      {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n          component_of_term t \\<in> K})", "by (rule almost_full_on_Sigma)"], ["proof (state)\nthis:\n  almost_full_on (prod_le (adds) (=))\n   (pp_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K} \\<times>\n    component_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "moreover"], ["proof (state)\nthis:\n  almost_full_on (prod_le (adds) (=))\n   (pp_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K} \\<times>\n    component_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "from *"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     seq i\n     \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n               component_of_term t \\<in> K}", "have \"\\<And>i. seq' i \\<in> pp_of_term ` ?A \\<times> component_of_term ` ?A\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     seq i\n     \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n               component_of_term t \\<in> K}\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       seq' i\n       \\<in> pp_of_term `\n             {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                 component_of_term t \\<in> K} \\<times>\n             component_of_term `\n             {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                 component_of_term t \\<in> K}", "by (simp add: seq'_def)"], ["proof (state)\nthis:\n  seq' ?i26\n  \\<in> pp_of_term `\n        {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n            component_of_term t \\<in> K} \\<times>\n        component_of_term `\n        {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n            component_of_term t \\<in> K}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "ultimately"], ["proof (chain)\npicking this:\n  almost_full_on (prod_le (adds) (=))\n   (pp_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K} \\<times>\n    component_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})\n  seq' ?i26\n  \\<in> pp_of_term `\n        {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n            component_of_term t \\<in> K} \\<times>\n        component_of_term `\n        {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n            component_of_term t \\<in> K}", "obtain i j where \"i < j\" and \"prod_le (adds) (=) (seq' i) (seq' j)\""], ["proof (prove)\nusing this:\n  almost_full_on (prod_le (adds) (=))\n   (pp_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K} \\<times>\n    component_of_term `\n    {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n        component_of_term t \\<in> K})\n  seq' ?i26\n  \\<in> pp_of_term `\n        {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n            component_of_term t \\<in> K} \\<times>\n        component_of_term `\n        {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n            component_of_term t \\<in> K}\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; prod_le (adds) (=) (seq' i) (seq' j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule almost_full_onD)"], ["proof (state)\nthis:\n  i < j\n  prod_le (adds) (=) (seq' i) (seq' j)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "from this(2)"], ["proof (chain)\npicking this:\n  prod_le (adds) (=) (seq' i) (seq' j)", "have \"seq i adds\\<^sub>t seq j\""], ["proof (prove)\nusing this:\n  prod_le (adds) (=) (seq' i) (seq' j)\n\ngoal (1 subgoal):\n 1. seq i adds\\<^sub>t seq j", "by (simp add: seq'_def prod_le_def adds_term_def)"], ["proof (state)\nthis:\n  seq i adds\\<^sub>t seq j\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          f i\n          \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> K} \\<Longrightarrow>\n       good (adds\\<^sub>t) f", "with \\<open>i < j\\<close>"], ["proof (chain)\npicking this:\n  i < j\n  seq i adds\\<^sub>t seq j", "show \"good (adds\\<^sub>t) seq\""], ["proof (prove)\nusing this:\n  i < j\n  seq i adds\\<^sub>t seq j\n\ngoal (1 subgoal):\n 1. good (adds\\<^sub>t) seq", "by (rule goodI)"], ["proof (state)\nthis:\n  good (adds\\<^sub>t) seq\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary Dickson_termE:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` range (f::nat \\<Rightarrow> 't))\"\n    and \"pp_of_term ` range f \\<subseteq> dgrad_set d m\"\n  obtains i j where \"i < j\" and \"f i adds\\<^sub>t f j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; f i adds\\<^sub>t f j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; f i adds\\<^sub>t f j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?A = \"{t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> component_of_term ` range f}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; f i adds\\<^sub>t f j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(1, 2)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` range f)", "have \"almost_full_on (adds\\<^sub>t) ?A\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` range f)\n\ngoal (1 subgoal):\n 1. almost_full_on (adds\\<^sub>t)\n     {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n         component_of_term t \\<in> component_of_term ` range f}", "by (rule Dickson_term)"], ["proof (state)\nthis:\n  almost_full_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` range f}\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; f i adds\\<^sub>t f j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  almost_full_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` range f}\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; f i adds\\<^sub>t f j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(3)"], ["proof (chain)\npicking this:\n  pp_of_term ` range f \\<subseteq> dgrad_set d m", "have \"\\<And>i. f i \\<in> ?A\""], ["proof (prove)\nusing this:\n  pp_of_term ` range f \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       f i\n       \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                 component_of_term t \\<in> component_of_term ` range f}", "by blast"], ["proof (state)\nthis:\n  f ?i26\n  \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n            component_of_term t \\<in> component_of_term ` range f}\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; f i adds\\<^sub>t f j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  almost_full_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` range f}\n  f ?i26\n  \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n            component_of_term t \\<in> component_of_term ` range f}", "obtain i j where \"i < j\" and \"f i adds\\<^sub>t f j\""], ["proof (prove)\nusing this:\n  almost_full_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` range f}\n  f ?i26\n  \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n            component_of_term t \\<in> component_of_term ` range f}\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; f i adds\\<^sub>t f j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule almost_full_onD)"], ["proof (state)\nthis:\n  i < j\n  f i adds\\<^sub>t f j\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; f i adds\\<^sub>t f j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  i < j\n  f i adds\\<^sub>t f j\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ex_finite_adds_term:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` S)\" and \"pp_of_term ` S \\<subseteq> dgrad_set d m\"\n  obtains T where \"finite T\" and \"T \\<subseteq> S\" and \"\\<And>s. s \\<in> S \\<Longrightarrow> (\\<exists>t\\<in>T. t adds\\<^sub>t s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>finite T; T \\<subseteq> S;\n         \\<And>s.\n            s \\<in> S \\<Longrightarrow>\n            \\<exists>t\\<in>T. t adds\\<^sub>t s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>finite T; T \\<subseteq> S;\n         \\<And>s.\n            s \\<in> S \\<Longrightarrow>\n            \\<exists>t\\<in>T. t adds\\<^sub>t s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?A = \"{t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> component_of_term ` S}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>finite T; T \\<subseteq> S;\n         \\<And>s.\n            s \\<in> S \\<Longrightarrow>\n            \\<exists>t\\<in>T. t adds\\<^sub>t s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"reflp ((adds\\<^sub>t)::'t \\<Rightarrow> _)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflp (adds\\<^sub>t)", "by (simp add: reflp_def adds_term_refl)"], ["proof (state)\nthis:\n  reflp (adds\\<^sub>t)\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>finite T; T \\<subseteq> S;\n         \\<And>s.\n            s \\<in> S \\<Longrightarrow>\n            \\<exists>t\\<in>T. t adds\\<^sub>t s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  reflp (adds\\<^sub>t)\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>finite T; T \\<subseteq> S;\n         \\<And>s.\n            s \\<in> S \\<Longrightarrow>\n            \\<exists>t\\<in>T. t adds\\<^sub>t s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"almost_full_on (adds\\<^sub>t) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_full_on (adds\\<^sub>t) S", "proof (rule almost_full_on_subset)"], ["proof (state)\ngoal (2 subgoals):\n 1. S \\<subseteq> ?B\n 2. almost_full_on (adds\\<^sub>t) ?B", "from assms(3)"], ["proof (chain)\npicking this:\n  pp_of_term ` S \\<subseteq> dgrad_set d m", "show \"S \\<subseteq> ?A\""], ["proof (prove)\nusing this:\n  pp_of_term ` S \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. S \\<subseteq> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                      component_of_term t \\<in> component_of_term ` S}", "by blast"], ["proof (state)\nthis:\n  S \\<subseteq> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> component_of_term ` S}\n\ngoal (1 subgoal):\n 1. almost_full_on (adds\\<^sub>t)\n     {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n         component_of_term t \\<in> component_of_term ` S}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. almost_full_on (adds\\<^sub>t)\n     {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n         component_of_term t \\<in> component_of_term ` S}", "from assms(1, 2)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` S)", "show \"almost_full_on (adds\\<^sub>t) ?A\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` S)\n\ngoal (1 subgoal):\n 1. almost_full_on (adds\\<^sub>t)\n     {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n         component_of_term t \\<in> component_of_term ` S}", "by (rule Dickson_term)"], ["proof (state)\nthis:\n  almost_full_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` S}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  almost_full_on (adds\\<^sub>t) S\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>finite T; T \\<subseteq> S;\n         \\<And>s.\n            s \\<in> S \\<Longrightarrow>\n            \\<exists>t\\<in>T. t adds\\<^sub>t s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  reflp (adds\\<^sub>t)\n  almost_full_on (adds\\<^sub>t) S", "obtain T where \"finite T\" and \"T \\<subseteq> S\" and \"\\<And>s. s \\<in> S \\<Longrightarrow> (\\<exists>t\\<in>T. t adds\\<^sub>t s)\""], ["proof (prove)\nusing this:\n  reflp (adds\\<^sub>t)\n  almost_full_on (adds\\<^sub>t) S\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>finite T; T \\<subseteq> S;\n         \\<And>s.\n            s \\<in> S \\<Longrightarrow>\n            \\<exists>t\\<in>T. t adds\\<^sub>t s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule almost_full_on_finite_subsetE, blast)"], ["proof (state)\nthis:\n  finite T\n  T \\<subseteq> S\n  ?s26 \\<in> S \\<Longrightarrow> \\<exists>t\\<in>T. t adds\\<^sub>t ?s26\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>finite T; T \\<subseteq> S;\n         \\<And>s.\n            s \\<in> S \\<Longrightarrow>\n            \\<exists>t\\<in>T. t adds\\<^sub>t s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite T\n  T \\<subseteq> S\n  ?s26 \\<in> S \\<Longrightarrow> \\<exists>t\\<in>T. t adds\\<^sub>t ?s26\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Well-foundedness\\<close>"], ["", "definition dickson_less_v :: \"('a \\<Rightarrow> nat) \\<Rightarrow> nat \\<Rightarrow> 't \\<Rightarrow> 't \\<Rightarrow> bool\"\n  where \"dickson_less_v d m v u \\<longleftrightarrow> (d (pp_of_term v) \\<le> m \\<and> d (pp_of_term u) \\<le> m \\<and> v \\<prec>\\<^sub>t u)\""], ["", "definition dickson_less_p :: \"('a \\<Rightarrow> nat) \\<Rightarrow> nat \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b::zero) \\<Rightarrow> bool\"\n  where \"dickson_less_p d m p q \\<longleftrightarrow> ({p, q} \\<subseteq> dgrad_p_set d m \\<and> p \\<prec>\\<^sub>p q)\""], ["", "lemma dickson_less_vI:\n  assumes \"d (pp_of_term v) \\<le> m\" and \"d (pp_of_term u) \\<le> m\" and \"v \\<prec>\\<^sub>t u\"\n  shows \"dickson_less_v d m v u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_v d m v u", "using assms"], ["proof (prove)\nusing this:\n  d (pp_of_term v) \\<le> m\n  d (pp_of_term u) \\<le> m\n  v \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. dickson_less_v d m v u", "by (simp add: dickson_less_v_def)"], ["", "lemma dickson_less_vD1:\n  assumes \"dickson_less_v d m v u\"\n  shows \"d (pp_of_term v) \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "using assms"], ["proof (prove)\nusing this:\n  dickson_less_v d m v u\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "by (simp add: dickson_less_v_def)"], ["", "lemma dickson_less_vD2:\n  assumes \"dickson_less_v d m v u\"\n  shows \"d (pp_of_term u) \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (pp_of_term u) \\<le> m", "using assms"], ["proof (prove)\nusing this:\n  dickson_less_v d m v u\n\ngoal (1 subgoal):\n 1. d (pp_of_term u) \\<le> m", "by (simp add: dickson_less_v_def)"], ["", "lemma dickson_less_vD3:\n  assumes \"dickson_less_v d m v u\"\n  shows \"v \\<prec>\\<^sub>t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t u", "using assms"], ["proof (prove)\nusing this:\n  dickson_less_v d m v u\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t u", "by (simp add: dickson_less_v_def)"], ["", "lemma dickson_less_v_irrefl: \"\\<not> dickson_less_v d m v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> dickson_less_v d m v v", "by (simp add: dickson_less_v_def)"], ["", "lemma dickson_less_v_trans:\n  assumes \"dickson_less_v d m v u\" and \"dickson_less_v d m u w\"\n  shows \"dickson_less_v d m v w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_v d m v w", "using assms"], ["proof (prove)\nusing this:\n  dickson_less_v d m v u\n  dickson_less_v d m u w\n\ngoal (1 subgoal):\n 1. dickson_less_v d m v w", "by (auto simp add: dickson_less_v_def)"], ["", "lemma wf_dickson_less_v_aux1:\n  assumes \"dickson_grading d\" and \"\\<And>i::nat. dickson_less_v d m (seq (Suc i)) (seq i)\"\n  obtains i where \"\\<And>j. j > i \\<Longrightarrow> component_of_term (seq j) < component_of_term (seq i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>j.\n            i < j \\<Longrightarrow>\n            component_of_term (seq j)\n            < component_of_term (seq i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>j.\n            i < j \\<Longrightarrow>\n            component_of_term (seq j)\n            < component_of_term (seq i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "let ?Q = \"pp_of_term ` range seq\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>j.\n            i < j \\<Longrightarrow>\n            component_of_term (seq j)\n            < component_of_term (seq i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"pp_of_term (seq 0) \\<in> ?Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pp_of_term (seq 0) \\<in> pp_of_term ` range seq", "by simp"], ["proof (state)\nthis:\n  pp_of_term (seq 0) \\<in> pp_of_term ` range seq\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>j.\n            i < j \\<Longrightarrow>\n            component_of_term (seq j)\n            < component_of_term (seq i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "with wf_dickson_less[OF assms(1)]"], ["proof (chain)\npicking this:\n  wfP (dickson_less d ?m)\n  pp_of_term (seq 0) \\<in> pp_of_term ` range seq", "obtain t where \"t \\<in> ?Q\" and *: \"\\<And>s. dickson_less d m s t \\<Longrightarrow> s \\<notin> ?Q\""], ["proof (prove)\nusing this:\n  wfP (dickson_less d ?m)\n  pp_of_term (seq 0) \\<in> pp_of_term ` range seq\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> pp_of_term ` range seq;\n         \\<And>s.\n            dickson_less d m s t \\<Longrightarrow>\n            s \\<notin> pp_of_term ` range seq\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule wfE_min[to_pred], blast)"], ["proof (state)\nthis:\n  t \\<in> pp_of_term ` range seq\n  dickson_less d m ?s27 t \\<Longrightarrow>\n  ?s27 \\<notin> pp_of_term ` range seq\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>j.\n            i < j \\<Longrightarrow>\n            component_of_term (seq j)\n            < component_of_term (seq i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "from this(1)"], ["proof (chain)\npicking this:\n  t \\<in> pp_of_term ` range seq", "obtain i where t: \"t = pp_of_term (seq i)\""], ["proof (prove)\nusing this:\n  t \\<in> pp_of_term ` range seq\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        t = pp_of_term (seq i) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  t = pp_of_term (seq i)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>j.\n            i < j \\<Longrightarrow>\n            component_of_term (seq j)\n            < component_of_term (seq i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       ?i27 < j \\<Longrightarrow>\n       component_of_term (seq j) < component_of_term (seq ?i27)", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       ?i27 < j \\<Longrightarrow>\n       component_of_term (seq j) < component_of_term (seq ?i27)", "assume \"i < j\""], ["proof (state)\nthis:\n  i < j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       ?i27 < j \\<Longrightarrow>\n       component_of_term (seq j) < component_of_term (seq ?i27)", "with _ assms(2)"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  dickson_less_v d m (seq (Suc ?i27)) (seq ?i27)\n  i < j", "have dlv: \"dickson_less_v d m (seq j) (seq i)\""], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  dickson_less_v d m (seq (Suc ?i27)) (seq ?i27)\n  i < j\n\ngoal (1 subgoal):\n 1. dickson_less_v d m (seq j) (seq i)", "proof (rule transp_sequence)"], ["proof (state)\ngoal (1 subgoal):\n 1. transp (dickson_less_v d m)", "from dickson_less_v_trans"], ["proof (chain)\npicking this:\n  \\<lbrakk>dickson_less_v ?d ?m ?v ?u; dickson_less_v ?d ?m ?u ?w\\<rbrakk>\n  \\<Longrightarrow> dickson_less_v ?d ?m ?v ?w", "show \"transp (dickson_less_v d m)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>dickson_less_v ?d ?m ?v ?u; dickson_less_v ?d ?m ?u ?w\\<rbrakk>\n  \\<Longrightarrow> dickson_less_v ?d ?m ?v ?w\n\ngoal (1 subgoal):\n 1. transp (dickson_less_v d m)", "by (rule transpI)"], ["proof (state)\nthis:\n  transp (dickson_less_v d m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dickson_less_v d m (seq j) (seq i)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       ?i27 < j \\<Longrightarrow>\n       component_of_term (seq j) < component_of_term (seq ?i27)", "hence \"seq j \\<prec>\\<^sub>t seq i\""], ["proof (prove)\nusing this:\n  dickson_less_v d m (seq j) (seq i)\n\ngoal (1 subgoal):\n 1. seq j \\<prec>\\<^sub>t seq i", "by (rule dickson_less_vD3)"], ["proof (state)\nthis:\n  seq j \\<prec>\\<^sub>t seq i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       ?i27 < j \\<Longrightarrow>\n       component_of_term (seq j) < component_of_term (seq ?i27)", "define s where \"s = pp_of_term (seq j)\""], ["proof (state)\nthis:\n  s = pp_of_term (seq j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       ?i27 < j \\<Longrightarrow>\n       component_of_term (seq j) < component_of_term (seq ?i27)", "have \"pp_of_term (seq j) \\<in> ?Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pp_of_term (seq j) \\<in> pp_of_term ` range seq", "by simp"], ["proof (state)\nthis:\n  pp_of_term (seq j) \\<in> pp_of_term ` range seq\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       ?i27 < j \\<Longrightarrow>\n       component_of_term (seq j) < component_of_term (seq ?i27)", "hence \"\\<not> dickson_less d m s t\""], ["proof (prove)\nusing this:\n  pp_of_term (seq j) \\<in> pp_of_term ` range seq\n\ngoal (1 subgoal):\n 1. \\<not> dickson_less d m s t", "unfolding s_def"], ["proof (prove)\nusing this:\n  pp_of_term (seq j) \\<in> pp_of_term ` range seq\n\ngoal (1 subgoal):\n 1. \\<not> dickson_less d m (pp_of_term (seq j)) t", "using *"], ["proof (prove)\nusing this:\n  pp_of_term (seq j) \\<in> pp_of_term ` range seq\n  dickson_less d m ?s27 t \\<Longrightarrow>\n  ?s27 \\<notin> pp_of_term ` range seq\n\ngoal (1 subgoal):\n 1. \\<not> dickson_less d m (pp_of_term (seq j)) t", "by blast"], ["proof (state)\nthis:\n  \\<not> dickson_less d m s t\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       ?i27 < j \\<Longrightarrow>\n       component_of_term (seq j) < component_of_term (seq ?i27)", "moreover"], ["proof (state)\nthis:\n  \\<not> dickson_less d m s t\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       ?i27 < j \\<Longrightarrow>\n       component_of_term (seq j) < component_of_term (seq ?i27)", "from dlv"], ["proof (chain)\npicking this:\n  dickson_less_v d m (seq j) (seq i)", "have \"d s \\<le> m\" and \"d t \\<le> m\""], ["proof (prove)\nusing this:\n  dickson_less_v d m (seq j) (seq i)\n\ngoal (1 subgoal):\n 1. d s \\<le> m &&& d t \\<le> m", "unfolding s_def t"], ["proof (prove)\nusing this:\n  dickson_less_v d m (seq j) (seq i)\n\ngoal (1 subgoal):\n 1. d (pp_of_term (seq j)) \\<le> m &&& d (pp_of_term (seq i)) \\<le> m", "by (rule dickson_less_vD1, rule dickson_less_vD2)"], ["proof (state)\nthis:\n  d s \\<le> m\n  d t \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       ?i27 < j \\<Longrightarrow>\n       component_of_term (seq j) < component_of_term (seq ?i27)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> dickson_less d m s t\n  d s \\<le> m\n  d t \\<le> m", "have \"t \\<preceq> s\""], ["proof (prove)\nusing this:\n  \\<not> dickson_less d m s t\n  d s \\<le> m\n  d t \\<le> m\n\ngoal (1 subgoal):\n 1. t \\<preceq> s", "by (simp add: dickson_less_def)"], ["proof (state)\nthis:\n  t \\<preceq> s\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       ?i27 < j \\<Longrightarrow>\n       component_of_term (seq j) < component_of_term (seq ?i27)", "show \"component_of_term (seq j) < component_of_term (seq i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term (seq j) < component_of_term (seq i)", "proof (rule ccontr, simp only: not_less)"], ["proof (state)\ngoal (1 subgoal):\n 1. component_of_term (seq i)\n    \\<le> component_of_term (seq j) \\<Longrightarrow>\n    False", "assume \"component_of_term (seq i) \\<le> component_of_term (seq j)\""], ["proof (state)\nthis:\n  component_of_term (seq i) \\<le> component_of_term (seq j)\n\ngoal (1 subgoal):\n 1. component_of_term (seq i)\n    \\<le> component_of_term (seq j) \\<Longrightarrow>\n    False", "with \\<open>t \\<preceq> s\\<close>"], ["proof (chain)\npicking this:\n  t \\<preceq> s\n  component_of_term (seq i) \\<le> component_of_term (seq j)", "have \"seq i \\<preceq>\\<^sub>t seq j\""], ["proof (prove)\nusing this:\n  t \\<preceq> s\n  component_of_term (seq i) \\<le> component_of_term (seq j)\n\ngoal (1 subgoal):\n 1. seq i \\<preceq>\\<^sub>t seq j", "unfolding s_def t"], ["proof (prove)\nusing this:\n  pp_of_term (seq i) \\<preceq> pp_of_term (seq j)\n  component_of_term (seq i) \\<le> component_of_term (seq j)\n\ngoal (1 subgoal):\n 1. seq i \\<preceq>\\<^sub>t seq j", "by (rule ord_termI)"], ["proof (state)\nthis:\n  seq i \\<preceq>\\<^sub>t seq j\n\ngoal (1 subgoal):\n 1. component_of_term (seq i)\n    \\<le> component_of_term (seq j) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  seq i \\<preceq>\\<^sub>t seq j\n\ngoal (1 subgoal):\n 1. component_of_term (seq i)\n    \\<le> component_of_term (seq j) \\<Longrightarrow>\n    False", "from dlv"], ["proof (chain)\npicking this:\n  dickson_less_v d m (seq j) (seq i)", "have \"seq j \\<prec>\\<^sub>t seq i\""], ["proof (prove)\nusing this:\n  dickson_less_v d m (seq j) (seq i)\n\ngoal (1 subgoal):\n 1. seq j \\<prec>\\<^sub>t seq i", "by (rule dickson_less_vD3)"], ["proof (state)\nthis:\n  seq j \\<prec>\\<^sub>t seq i\n\ngoal (1 subgoal):\n 1. component_of_term (seq i)\n    \\<le> component_of_term (seq j) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  seq i \\<preceq>\\<^sub>t seq j\n  seq j \\<prec>\\<^sub>t seq i", "show False"], ["proof (prove)\nusing this:\n  seq i \\<preceq>\\<^sub>t seq j\n  seq j \\<prec>\\<^sub>t seq i\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  component_of_term (seq j) < component_of_term (seq i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_dickson_less_v_aux2:\n  assumes \"dickson_grading d\" and \"\\<And>i::nat. dickson_less_v d m (seq (Suc i)) (seq i)\"\n    and \"\\<And>i::nat. component_of_term (seq i) < k\"\n  shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms(2, 3)"], ["proof (prove)\nusing this:\n  dickson_less_v d m (seq (Suc ?i27)) (seq ?i27)\n  component_of_term (seq ?i27) < k\n\ngoal (1 subgoal):\n 1. thesis", "proof (induct k arbitrary: seq thesis rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x seq xa.\n       \\<lbrakk>\\<And>y seq xa.\n                   \\<lbrakk>y < x;\n                    \\<And>i. dickson_less_v d m (seq (Suc i)) (seq i);\n                    \\<And>i. component_of_term (seq i) < y\\<rbrakk>\n                   \\<Longrightarrow> xa;\n        \\<And>i. dickson_less_v d m (seq (Suc i)) (seq i);\n        \\<And>i. component_of_term (seq i) < x\\<rbrakk>\n       \\<Longrightarrow> xa", "case (less k)"], ["proof (state)\nthis:\n  \\<lbrakk>?y27 < k;\n   \\<And>i. dickson_less_v d m (?seq27 (Suc i)) (?seq27 i);\n   \\<And>i. component_of_term (?seq27 i) < ?y27\\<rbrakk>\n  \\<Longrightarrow> ?x27\n  dickson_less_v d m (seq (Suc ?i27)) (seq ?i27)\n  component_of_term (seq ?i27) < k\n\ngoal (1 subgoal):\n 1. \\<And>x seq xa.\n       \\<lbrakk>\\<And>y seq xa.\n                   \\<lbrakk>y < x;\n                    \\<And>i. dickson_less_v d m (seq (Suc i)) (seq i);\n                    \\<And>i. component_of_term (seq i) < y\\<rbrakk>\n                   \\<Longrightarrow> xa;\n        \\<And>i. dickson_less_v d m (seq (Suc i)) (seq i);\n        \\<And>i. component_of_term (seq i) < x\\<rbrakk>\n       \\<Longrightarrow> xa", "from assms(1) less(2)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  dickson_less_v d m (seq (Suc ?i27)) (seq ?i27)", "obtain i where *: \"\\<And>j. j > i \\<Longrightarrow> component_of_term (seq j) < component_of_term (seq i)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  dickson_less_v d m (seq (Suc ?i27)) (seq ?i27)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>j.\n            i < j \\<Longrightarrow>\n            component_of_term (seq j)\n            < component_of_term (seq i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule wf_dickson_less_v_aux1, blast)"], ["proof (state)\nthis:\n  i < ?j27 \\<Longrightarrow>\n  component_of_term (seq ?j27) < component_of_term (seq i)\n\ngoal (1 subgoal):\n 1. \\<And>x seq xa.\n       \\<lbrakk>\\<And>y seq xa.\n                   \\<lbrakk>y < x;\n                    \\<And>i. dickson_less_v d m (seq (Suc i)) (seq i);\n                    \\<And>i. component_of_term (seq i) < y\\<rbrakk>\n                   \\<Longrightarrow> xa;\n        \\<And>i. dickson_less_v d m (seq (Suc i)) (seq i);\n        \\<And>i. component_of_term (seq i) < x\\<rbrakk>\n       \\<Longrightarrow> xa", "define seq1 where \"seq1 = (\\<lambda>j. seq (Suc (i + j)))\""], ["proof (state)\nthis:\n  seq1 = (\\<lambda>j. seq (Suc (i + j)))\n\ngoal (1 subgoal):\n 1. \\<And>x seq xa.\n       \\<lbrakk>\\<And>y seq xa.\n                   \\<lbrakk>y < x;\n                    \\<And>i. dickson_less_v d m (seq (Suc i)) (seq i);\n                    \\<And>i. component_of_term (seq i) < y\\<rbrakk>\n                   \\<Longrightarrow> xa;\n        \\<And>i. dickson_less_v d m (seq (Suc i)) (seq i);\n        \\<And>i. component_of_term (seq i) < x\\<rbrakk>\n       \\<Longrightarrow> xa", "from less(3)"], ["proof (chain)\npicking this:\n  component_of_term (seq ?i27) < k", "show ?case"], ["proof (prove)\nusing this:\n  component_of_term (seq ?i27) < k\n\ngoal (1 subgoal):\n 1. x", "proof (rule less(1))"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i. dickson_less_v d m (?seq27 (Suc i)) (?seq27 i)\n 2. \\<And>i. component_of_term (?seq27 i) < component_of_term (seq ?i55)", "fix j"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i. dickson_less_v d m (?seq27 (Suc i)) (?seq27 i)\n 2. \\<And>i. component_of_term (?seq27 i) < component_of_term (seq ?i55)", "show \"dickson_less_v d m (seq1 (Suc j)) (seq1 j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_v d m (seq1 (Suc j)) (seq1 j)", "by (simp add: seq1_def, fact less(2))"], ["proof (state)\nthis:\n  dickson_less_v d m (seq1 (Suc j)) (seq1 j)\n\ngoal (1 subgoal):\n 1. \\<And>i. component_of_term (seq1 i) < component_of_term (seq ?i55)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. component_of_term (seq1 i) < component_of_term (seq ?i55)", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. component_of_term (seq1 i) < component_of_term (seq ?i55)", "show \"component_of_term (seq1 j) < component_of_term (seq i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term (seq1 j) < component_of_term (seq i)", "by (simp add: seq1_def *)"], ["proof (state)\nthis:\n  component_of_term (seq1 j) < component_of_term (seq i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_dickson_less_v:\n  assumes \"dickson_grading d\"\n  shows \"wfP (dickson_less_v d m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (dickson_less_v d m)", "proof (rule wfP_chain, rule, elim exE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i. dickson_less_v d m (f (Suc i)) (f i) \\<Longrightarrow>\n       False", "fix seq::\"nat \\<Rightarrow> 't\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i. dickson_less_v d m (f (Suc i)) (f i) \\<Longrightarrow>\n       False", "assume \"\\<forall>i. dickson_less_v d m (seq (Suc i)) (seq i)\""], ["proof (state)\nthis:\n  \\<forall>i. dickson_less_v d m (seq (Suc i)) (seq i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i. dickson_less_v d m (f (Suc i)) (f i) \\<Longrightarrow>\n       False", "hence *: \"\\<And>i. dickson_less_v d m (seq (Suc i)) (seq i)\""], ["proof (prove)\nusing this:\n  \\<forall>i. dickson_less_v d m (seq (Suc i)) (seq i)\n\ngoal (1 subgoal):\n 1. \\<And>i. dickson_less_v d m (seq (Suc i)) (seq i)", ".."], ["proof (state)\nthis:\n  dickson_less_v d m (seq (Suc ?i27)) (seq ?i27)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i. dickson_less_v d m (f (Suc i)) (f i) \\<Longrightarrow>\n       False", "with assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  dickson_less_v d m (seq (Suc ?i27)) (seq ?i27)", "obtain i where **: \"\\<And>j. j > i \\<Longrightarrow> component_of_term (seq j) < component_of_term (seq i)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  dickson_less_v d m (seq (Suc ?i27)) (seq ?i27)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>j.\n            i < j \\<Longrightarrow>\n            component_of_term (seq j)\n            < component_of_term (seq i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule wf_dickson_less_v_aux1, blast)"], ["proof (state)\nthis:\n  i < ?j27 \\<Longrightarrow>\n  component_of_term (seq ?j27) < component_of_term (seq i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i. dickson_less_v d m (f (Suc i)) (f i) \\<Longrightarrow>\n       False", "define seq1 where \"seq1 = (\\<lambda>j. seq (Suc (i + j)))\""], ["proof (state)\nthis:\n  seq1 = (\\<lambda>j. seq (Suc (i + j)))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i. dickson_less_v d m (f (Suc i)) (f i) \\<Longrightarrow>\n       False", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d", "show False"], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. False", "proof (rule wf_dickson_less_v_aux2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i. dickson_less_v d ?m (?seq (Suc i)) (?seq i)\n 2. \\<And>i. component_of_term (?seq i) < ?k", "fix j"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i. dickson_less_v d ?m (?seq (Suc i)) (?seq i)\n 2. \\<And>i. component_of_term (?seq i) < ?k", "show \"dickson_less_v d m (seq1 (Suc j)) (seq1 j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_v d m (seq1 (Suc j)) (seq1 j)", "by (simp add: seq1_def, fact *)"], ["proof (state)\nthis:\n  dickson_less_v d m (seq1 (Suc j)) (seq1 j)\n\ngoal (1 subgoal):\n 1. \\<And>i. component_of_term (seq1 i) < ?k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. component_of_term (seq1 i) < ?k", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. component_of_term (seq1 i) < ?k", "show \"component_of_term (seq1 j) < component_of_term (seq i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term (seq1 j) < component_of_term (seq i)", "by (simp add: seq1_def **)"], ["proof (state)\nthis:\n  component_of_term (seq1 j) < component_of_term (seq i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dickson_less_v_zero: \"dickson_less_v (\\<lambda>_. 0) m = (\\<prec>\\<^sub>t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_v (\\<lambda>_. 0) m = (\\<prec>\\<^sub>t)", "by (rule, rule, simp add: dickson_less_v_def)"], ["", "lemma dickson_less_pI:\n  assumes \"p \\<in> dgrad_p_set d m\" and \"q \\<in> dgrad_p_set d m\" and \"p \\<prec>\\<^sub>p q\"\n  shows \"dickson_less_p d m p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_p d m p q", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. dickson_less_p d m p q", "by (simp add: dickson_less_p_def)"], ["", "lemma dickson_less_pD1:\n  assumes \"dickson_less_p d m p q\"\n  shows \"p \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d m", "using assms"], ["proof (prove)\nusing this:\n  dickson_less_p d m p q\n\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d m", "by (simp add: dickson_less_p_def)"], ["", "lemma dickson_less_pD2:\n  assumes \"dickson_less_p d m p q\"\n  shows \"q \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "using assms"], ["proof (prove)\nusing this:\n  dickson_less_p d m p q\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "by (simp add: dickson_less_p_def)"], ["", "lemma dickson_less_pD3:\n  assumes \"dickson_less_p d m p q\"\n  shows \"p \\<prec>\\<^sub>p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "using assms"], ["proof (prove)\nusing this:\n  dickson_less_p d m p q\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p q", "by (simp add: dickson_less_p_def)"], ["", "lemma dickson_less_p_irrefl: \"\\<not> dickson_less_p d m p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> dickson_less_p d m p p", "by (simp add: dickson_less_p_def)"], ["", "lemma dickson_less_p_trans:\n  assumes \"dickson_less_p d m p q\" and \"dickson_less_p d m q r\"\n  shows \"dickson_less_p d m p r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_p d m p r", "using assms"], ["proof (prove)\nusing this:\n  dickson_less_p d m p q\n  dickson_less_p d m q r\n\ngoal (1 subgoal):\n 1. dickson_less_p d m p r", "by (auto simp add: dickson_less_p_def)"], ["", "lemma dickson_less_p_mono:\n  assumes \"dickson_less_p d m p q\" and \"m \\<le> n\"\n  shows \"dickson_less_p d n p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_p d n p q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dickson_less_p d n p q", "from assms(2)"], ["proof (chain)\npicking this:\n  m \\<le> n", "have \"dgrad_p_set d m \\<subseteq> dgrad_p_set d n\""], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. dgrad_p_set d m \\<subseteq> dgrad_p_set d n", "by (rule dgrad_p_set_subset)"], ["proof (state)\nthis:\n  dgrad_p_set d m \\<subseteq> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. dickson_less_p d n p q", "moreover"], ["proof (state)\nthis:\n  dgrad_p_set d m \\<subseteq> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. dickson_less_p d n p q", "from assms(1)"], ["proof (chain)\npicking this:\n  dickson_less_p d m p q", "have \"p \\<in> dgrad_p_set d m\" and \"q \\<in> dgrad_p_set d m\" and \"p \\<prec>\\<^sub>p q\""], ["proof (prove)\nusing this:\n  dickson_less_p d m p q\n\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d m &&&\n    q \\<in> dgrad_p_set d m &&& p \\<prec>\\<^sub>p q", "by (rule dickson_less_pD1, rule dickson_less_pD2, rule dickson_less_pD3)"], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. dickson_less_p d n p q", "ultimately"], ["proof (chain)\npicking this:\n  dgrad_p_set d m \\<subseteq> dgrad_p_set d n\n  p \\<in> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m\n  p \\<prec>\\<^sub>p q", "have \"p \\<in> dgrad_p_set d n\" and \"q \\<in> dgrad_p_set d n\""], ["proof (prove)\nusing this:\n  dgrad_p_set d m \\<subseteq> dgrad_p_set d n\n  p \\<in> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d n &&& q \\<in> dgrad_p_set d n", "by auto"], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d n\n  q \\<in> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. dickson_less_p d n p q", "from this \\<open>p \\<prec>\\<^sub>p q\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d n\n  q \\<in> dgrad_p_set d n\n  p \\<prec>\\<^sub>p q", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d n\n  q \\<in> dgrad_p_set d n\n  p \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. dickson_less_p d n p q", "by (rule dickson_less_pI)"], ["proof (state)\nthis:\n  dickson_less_p d n p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dickson_less_p_zero: \"dickson_less_p (\\<lambda>_. 0) m = (\\<prec>\\<^sub>p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_p (\\<lambda>_. 0) m = (\\<prec>\\<^sub>p)", "by (rule, rule, simp add: dickson_less_p_def)"], ["", "lemma wf_dickson_less_p_aux:\n  assumes \"dickson_grading d\"\n  assumes \"x \\<in> Q\" and \"\\<forall>y\\<in>Q. y \\<noteq> 0 \\<longrightarrow> (y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) u)\"\n  shows \"\\<exists>p\\<in>Q. (\\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "using assms(2) assms(3)"], ["proof (prove)\nusing this:\n  x \\<in> Q\n  \\<forall>y\\<in>Q.\n     y \\<noteq> 0 \\<longrightarrow>\n     y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) u\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "proof (induct u arbitrary: x Q rule: wfP_induct[OF wf_dickson_less_v, OF assms(1)])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa Q.\n       \\<lbrakk>\\<forall>y.\n                   dickson_less_v d ?m9 y x \\<longrightarrow>\n                   (\\<forall>x xa.\n                       x \\<in> xa \\<longrightarrow>\n                       (\\<forall>ya\\<in>xa.\n                           ya \\<noteq> 0 \\<longrightarrow>\n                           ya \\<in> dgrad_p_set d m \\<and>\n                           dickson_less_v d m (lt ya) y) \\<longrightarrow>\n                       (\\<exists>p\\<in>xa.\n                           \\<forall>q\\<in>xa.\n                              \\<not> dickson_less_p d m q p));\n        xa \\<in> Q;\n        \\<forall>y\\<in>Q.\n           y \\<noteq> 0 \\<longrightarrow>\n           y \\<in> dgrad_p_set d m \\<and>\n           dickson_less_v d m (lt y) x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p\\<in>Q.\n                            \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "fix u::'t and x::\"'t \\<Rightarrow>\\<^sub>0 'b\" and Q::\"('t \\<Rightarrow>\\<^sub>0 'b) set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa Q.\n       \\<lbrakk>\\<forall>y.\n                   dickson_less_v d ?m9 y x \\<longrightarrow>\n                   (\\<forall>x xa.\n                       x \\<in> xa \\<longrightarrow>\n                       (\\<forall>ya\\<in>xa.\n                           ya \\<noteq> 0 \\<longrightarrow>\n                           ya \\<in> dgrad_p_set d m \\<and>\n                           dickson_less_v d m (lt ya) y) \\<longrightarrow>\n                       (\\<exists>p\\<in>xa.\n                           \\<forall>q\\<in>xa.\n                              \\<not> dickson_less_p d m q p));\n        xa \\<in> Q;\n        \\<forall>y\\<in>Q.\n           y \\<noteq> 0 \\<longrightarrow>\n           y \\<in> dgrad_p_set d m \\<and>\n           dickson_less_v d m (lt y) x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p\\<in>Q.\n                            \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "assume hyp: \"\\<forall>u0. dickson_less_v d m u0 u \\<longrightarrow> (\\<forall>x0 Q0::('t \\<Rightarrow>\\<^sub>0 'b) set. x0 \\<in> Q0 \\<longrightarrow>\n                            (\\<forall>y\\<in>Q0. y \\<noteq> 0 \\<longrightarrow> (y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) u0)) \\<longrightarrow>\n                            (\\<exists>p\\<in>Q0. \\<forall>q\\<in>Q0. \\<not> dickson_less_p d m q p))\""], ["proof (state)\nthis:\n  \\<forall>u0.\n     dickson_less_v d m u0 u \\<longrightarrow>\n     (\\<forall>x0 Q0.\n         x0 \\<in> Q0 \\<longrightarrow>\n         (\\<forall>y\\<in>Q0.\n             y \\<noteq> 0 \\<longrightarrow>\n             y \\<in> dgrad_p_set d m \\<and>\n             dickson_less_v d m (lt y) u0) \\<longrightarrow>\n         (\\<exists>p\\<in>Q0.\n             \\<forall>q\\<in>Q0. \\<not> dickson_less_p d m q p))\n\ngoal (1 subgoal):\n 1. \\<And>x xa Q.\n       \\<lbrakk>\\<forall>y.\n                   dickson_less_v d ?m9 y x \\<longrightarrow>\n                   (\\<forall>x xa.\n                       x \\<in> xa \\<longrightarrow>\n                       (\\<forall>ya\\<in>xa.\n                           ya \\<noteq> 0 \\<longrightarrow>\n                           ya \\<in> dgrad_p_set d m \\<and>\n                           dickson_less_v d m (lt ya) y) \\<longrightarrow>\n                       (\\<exists>p\\<in>xa.\n                           \\<forall>q\\<in>xa.\n                              \\<not> dickson_less_p d m q p));\n        xa \\<in> Q;\n        \\<forall>y\\<in>Q.\n           y \\<noteq> 0 \\<longrightarrow>\n           y \\<in> dgrad_p_set d m \\<and>\n           dickson_less_v d m (lt y) x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p\\<in>Q.\n                            \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "assume \"x \\<in> Q\""], ["proof (state)\nthis:\n  x \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<And>x xa Q.\n       \\<lbrakk>\\<forall>y.\n                   dickson_less_v d ?m9 y x \\<longrightarrow>\n                   (\\<forall>x xa.\n                       x \\<in> xa \\<longrightarrow>\n                       (\\<forall>ya\\<in>xa.\n                           ya \\<noteq> 0 \\<longrightarrow>\n                           ya \\<in> dgrad_p_set d m \\<and>\n                           dickson_less_v d m (lt ya) y) \\<longrightarrow>\n                       (\\<exists>p\\<in>xa.\n                           \\<forall>q\\<in>xa.\n                              \\<not> dickson_less_p d m q p));\n        xa \\<in> Q;\n        \\<forall>y\\<in>Q.\n           y \\<noteq> 0 \\<longrightarrow>\n           y \\<in> dgrad_p_set d m \\<and>\n           dickson_less_v d m (lt y) x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p\\<in>Q.\n                            \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "assume \"\\<forall>y\\<in>Q. y \\<noteq> 0 \\<longrightarrow> (y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) u)\""], ["proof (state)\nthis:\n  \\<forall>y\\<in>Q.\n     y \\<noteq> 0 \\<longrightarrow>\n     y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) u\n\ngoal (1 subgoal):\n 1. \\<And>x xa Q.\n       \\<lbrakk>\\<forall>y.\n                   dickson_less_v d ?m9 y x \\<longrightarrow>\n                   (\\<forall>x xa.\n                       x \\<in> xa \\<longrightarrow>\n                       (\\<forall>ya\\<in>xa.\n                           ya \\<noteq> 0 \\<longrightarrow>\n                           ya \\<in> dgrad_p_set d m \\<and>\n                           dickson_less_v d m (lt ya) y) \\<longrightarrow>\n                       (\\<exists>p\\<in>xa.\n                           \\<forall>q\\<in>xa.\n                              \\<not> dickson_less_p d m q p));\n        xa \\<in> Q;\n        \\<forall>y\\<in>Q.\n           y \\<noteq> 0 \\<longrightarrow>\n           y \\<in> dgrad_p_set d m \\<and>\n           dickson_less_v d m (lt y) x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p\\<in>Q.\n                            \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "hence bounded: \"\\<And>y. y \\<in> Q \\<Longrightarrow> y \\<noteq> 0 \\<Longrightarrow> (y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) u)\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>Q.\n     y \\<noteq> 0 \\<longrightarrow>\n     y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) u\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> Q; y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> y \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt y) u", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?y27 \\<in> Q; ?y27 \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ?y27 \\<in> dgrad_p_set d m \\<and>\n                    dickson_less_v d m (lt ?y27) u\n\ngoal (1 subgoal):\n 1. \\<And>x xa Q.\n       \\<lbrakk>\\<forall>y.\n                   dickson_less_v d ?m9 y x \\<longrightarrow>\n                   (\\<forall>x xa.\n                       x \\<in> xa \\<longrightarrow>\n                       (\\<forall>ya\\<in>xa.\n                           ya \\<noteq> 0 \\<longrightarrow>\n                           ya \\<in> dgrad_p_set d m \\<and>\n                           dickson_less_v d m (lt ya) y) \\<longrightarrow>\n                       (\\<exists>p\\<in>xa.\n                           \\<forall>q\\<in>xa.\n                              \\<not> dickson_less_p d m q p));\n        xa \\<in> Q;\n        \\<forall>y\\<in>Q.\n           y \\<noteq> 0 \\<longrightarrow>\n           y \\<in> dgrad_p_set d m \\<and>\n           dickson_less_v d m (lt y) x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p\\<in>Q.\n                            \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "show \"\\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "proof (cases \"0 \\<in> Q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<in> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p\n 2. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "case True"], ["proof (state)\nthis:\n  0 \\<in> Q\n\ngoal (2 subgoals):\n 1. 0 \\<in> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p\n 2. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "proof (rule, rule, rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q; dickson_less_p d m q ?p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?p \\<in> Q", "fix q::\"'t \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q; dickson_less_p d m q ?p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?p \\<in> Q", "assume \"dickson_less_p d m q 0\""], ["proof (state)\nthis:\n  dickson_less_p d m q 0\n\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q; dickson_less_p d m q ?p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?p \\<in> Q", "hence \"q \\<prec>\\<^sub>p 0\""], ["proof (prove)\nusing this:\n  dickson_less_p d m q 0\n\ngoal (1 subgoal):\n 1. q \\<prec>\\<^sub>p 0", "by (rule dickson_less_pD3)"], ["proof (state)\nthis:\n  q \\<prec>\\<^sub>p 0\n\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q; dickson_less_p d m q ?p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?p \\<in> Q", "thus False"], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p 0\n\ngoal (1 subgoal):\n 1. False", "using ord_p_zero_min[of q]"], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p 0\n  0 \\<preceq>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. 0 \\<in> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<in> Q", "from True"], ["proof (chain)\npicking this:\n  0 \\<in> Q", "show \"0 \\<in> Q\""], ["proof (prove)\nusing this:\n  0 \\<in> Q\n\ngoal (1 subgoal):\n 1. 0 \\<in> Q", "."], ["proof (state)\nthis:\n  0 \\<in> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "case False"], ["proof (state)\nthis:\n  0 \\<notin> Q\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "define Q1 where \"Q1 = {lt p | p. p \\<in> Q}\""], ["proof (state)\nthis:\n  Q1 = {lt p |p. p \\<in> Q}\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "from \\<open>x \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> Q", "have \"lt x \\<in> Q1\""], ["proof (prove)\nusing this:\n  x \\<in> Q\n\ngoal (1 subgoal):\n 1. lt x \\<in> Q1", "unfolding Q1_def"], ["proof (prove)\nusing this:\n  x \\<in> Q\n\ngoal (1 subgoal):\n 1. lt x \\<in> {lt p |p. p \\<in> Q}", "by auto"], ["proof (state)\nthis:\n  lt x \\<in> Q1\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "with wf_dickson_less_v[OF assms(1)]"], ["proof (chain)\npicking this:\n  wfP (dickson_less_v d ?m)\n  lt x \\<in> Q1", "obtain v\n      where \"v \\<in> Q1\" and v_min_1: \"\\<And>q. dickson_less_v d m q v \\<Longrightarrow> q \\<notin> Q1\""], ["proof (prove)\nusing this:\n  wfP (dickson_less_v d ?m)\n  lt x \\<in> Q1\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> Q1;\n         \\<And>q.\n            dickson_less_v d m q v \\<Longrightarrow> q \\<notin> Q1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule wfE_min[to_pred], auto)"], ["proof (state)\nthis:\n  v \\<in> Q1\n  dickson_less_v d m ?q27 v \\<Longrightarrow> ?q27 \\<notin> Q1\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "have v_min: \"\\<And>q. q \\<in> Q \\<Longrightarrow> \\<not> dickson_less_v d m (lt q) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q. q \\<in> Q \\<Longrightarrow> \\<not> dickson_less_v d m (lt q) v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q. q \\<in> Q \\<Longrightarrow> \\<not> dickson_less_v d m (lt q) v", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q. q \\<in> Q \\<Longrightarrow> \\<not> dickson_less_v d m (lt q) v", "assume \"q \\<in> Q\""], ["proof (state)\nthis:\n  q \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<And>q. q \\<in> Q \\<Longrightarrow> \\<not> dickson_less_v d m (lt q) v", "hence \"lt q \\<in> Q1\""], ["proof (prove)\nusing this:\n  q \\<in> Q\n\ngoal (1 subgoal):\n 1. lt q \\<in> Q1", "unfolding Q1_def"], ["proof (prove)\nusing this:\n  q \\<in> Q\n\ngoal (1 subgoal):\n 1. lt q \\<in> {lt p |p. p \\<in> Q}", "by auto"], ["proof (state)\nthis:\n  lt q \\<in> Q1\n\ngoal (1 subgoal):\n 1. \\<And>q. q \\<in> Q \\<Longrightarrow> \\<not> dickson_less_v d m (lt q) v", "thus \"\\<not> dickson_less_v d m (lt q) v\""], ["proof (prove)\nusing this:\n  lt q \\<in> Q1\n\ngoal (1 subgoal):\n 1. \\<not> dickson_less_v d m (lt q) v", "using v_min_1"], ["proof (prove)\nusing this:\n  lt q \\<in> Q1\n  dickson_less_v d m ?q27 v \\<Longrightarrow> ?q27 \\<notin> Q1\n\ngoal (1 subgoal):\n 1. \\<not> dickson_less_v d m (lt q) v", "by auto"], ["proof (state)\nthis:\n  \\<not> dickson_less_v d m (lt q) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?q27 \\<in> Q \\<Longrightarrow> \\<not> dickson_less_v d m (lt ?q27) v\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "from \\<open>v \\<in> Q1\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> Q1", "obtain p where \"lt p = v\" and \"p \\<in> Q\""], ["proof (prove)\nusing this:\n  v \\<in> Q1\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>lt p = v; p \\<in> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Q1_def"], ["proof (prove)\nusing this:\n  v \\<in> {lt p |p. p \\<in> Q}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>lt p = v; p \\<in> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lt p = v\n  p \\<in> Q\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "hence \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lt p = v\n  p \\<in> Q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "using False"], ["proof (prove)\nusing this:\n  lt p = v\n  p \\<in> Q\n  0 \\<notin> Q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "with \\<open>p \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> Q\n  p \\<noteq> 0", "have \"p \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt p) u\""], ["proof (prove)\nusing this:\n  p \\<in> Q\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt p) u", "by (rule bounded)"], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt p) u\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "hence \"p \\<in> dgrad_p_set d m\" and \"dickson_less_v d m (lt p) u\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt p) u\n\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d m &&& dickson_less_v d m (lt p) u", "by simp_all"], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d m\n  dickson_less_v d m (lt p) u\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "moreover"], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d m\n  dickson_less_v d m (lt p) u\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "from this(1) \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m\n  p \\<noteq> 0", "have \"d (pp_of_term (lt p)) \\<le> m\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d (lp p) \\<le> m", "by (rule dgrad_p_setD_lp)"], ["proof (state)\nthis:\n  d (lp p) \\<le> m\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "ultimately"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m\n  dickson_less_v d m (lt p) u\n  d (lp p) \\<le> m", "have \"d (pp_of_term v) \\<le> m\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  dickson_less_v d m (lt p) u\n  d (lp p) \\<le> m\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "by (simp only: \\<open>lt p = v\\<close>)"], ["proof (state)\nthis:\n  d (pp_of_term v) \\<le> m\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "define Q2 where \"Q2 = {tail p | p. p \\<in> Q \\<and> lt p = v}\""], ["proof (state)\nthis:\n  Q2 = {tail p |p. p \\<in> Q \\<and> lt p = v}\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "from \\<open>p \\<in> Q\\<close> \\<open>lt p = v\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> Q\n  lt p = v", "have \"tail p \\<in> Q2\""], ["proof (prove)\nusing this:\n  p \\<in> Q\n  lt p = v\n\ngoal (1 subgoal):\n 1. tail p \\<in> Q2", "unfolding Q2_def"], ["proof (prove)\nusing this:\n  p \\<in> Q\n  lt p = v\n\ngoal (1 subgoal):\n 1. tail p \\<in> {tail p |p. p \\<in> Q \\<and> lt p = v}", "by auto"], ["proof (state)\nthis:\n  tail p \\<in> Q2\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "have \"\\<forall>q\\<in>Q2. q \\<noteq> 0 \\<longrightarrow> (q \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q) (lt p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>Q2.\n       q \\<noteq> 0 \\<longrightarrow>\n       q \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q) (lt p)", "proof (intro ballI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q2; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> q \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt q) (lt p)", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q2; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> q \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt q) (lt p)", "assume \"q \\<in> Q2\""], ["proof (state)\nthis:\n  q \\<in> Q2\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q2; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> q \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt q) (lt p)", "then"], ["proof (chain)\npicking this:\n  q \\<in> Q2", "obtain q0 where q: \"q = tail q0\" and \"lt q0 = lt p\" and \"q0 \\<in> Q\""], ["proof (prove)\nusing this:\n  q \\<in> Q2\n\ngoal (1 subgoal):\n 1. (\\<And>q0.\n        \\<lbrakk>q = tail q0; lt q0 = lt p; q0 \\<in> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>lt p = v\\<close>"], ["proof (prove)\nusing this:\n  q \\<in> Q2\n  lt p = v\n\ngoal (1 subgoal):\n 1. (\\<And>q0.\n        \\<lbrakk>q = tail q0; lt q0 = lt p; q0 \\<in> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: Q2_def)"], ["proof (state)\nthis:\n  q = tail q0\n  lt q0 = lt p\n  q0 \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q2; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> q \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt q) (lt p)", "assume \"q \\<noteq> 0\""], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q2; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> q \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt q) (lt p)", "hence \"tail q0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tail q0 \\<noteq> 0", "using \\<open>q = tail q0\\<close>"], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  q = tail q0\n\ngoal (1 subgoal):\n 1. tail q0 \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  tail q0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q2; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> q \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt q) (lt p)", "hence \"q0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  tail q0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q0 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q2; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> q \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt q) (lt p)", "with \\<open>q0 \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  q0 \\<in> Q\n  q0 \\<noteq> 0", "have \"q0 \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q0) u\""], ["proof (prove)\nusing this:\n  q0 \\<in> Q\n  q0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q0 \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q0) u", "by (rule bounded)"], ["proof (state)\nthis:\n  q0 \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q0) u\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q2; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> q \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt q) (lt p)", "hence \"q0 \\<in> dgrad_p_set d m\" and \"dickson_less_v d m (lt q0) u\""], ["proof (prove)\nusing this:\n  q0 \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q0) u\n\ngoal (1 subgoal):\n 1. q0 \\<in> dgrad_p_set d m &&& dickson_less_v d m (lt q0) u", "by simp_all"], ["proof (state)\nthis:\n  q0 \\<in> dgrad_p_set d m\n  dickson_less_v d m (lt q0) u\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q2; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> q \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt q) (lt p)", "from this(1)"], ["proof (chain)\npicking this:\n  q0 \\<in> dgrad_p_set d m", "have \"q \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  q0 \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "unfolding q"], ["proof (prove)\nusing this:\n  q0 \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. tail q0 \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_tail)"], ["proof (state)\nthis:\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> Q2; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> q \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt q) (lt p)", "show \"q \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q) (lt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q) (lt p)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. q \\<in> dgrad_p_set d m\n 2. dickson_less_v d m (lt q) (lt p)", "show \"dickson_less_v d m (lt q) (lt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_v d m (lt q) (lt p)", "proof (rule dickson_less_vI)"], ["proof (state)\ngoal (3 subgoals):\n 1. d (lp q) \\<le> m\n 2. d (lp p) \\<le> m\n 3. lt q \\<prec>\\<^sub>t lt p", "from \\<open>q \\<in> dgrad_p_set d m\\<close> \\<open>q \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  q \\<in> dgrad_p_set d m\n  q \\<noteq> 0", "show \"d (pp_of_term (lt q)) \\<le> m\""], ["proof (prove)\nusing this:\n  q \\<in> dgrad_p_set d m\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d (lp q) \\<le> m", "by (rule dgrad_p_setD_lp)"], ["proof (state)\nthis:\n  d (lp q) \\<le> m\n\ngoal (2 subgoals):\n 1. d (lp p) \\<le> m\n 2. lt q \\<prec>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. d (lp p) \\<le> m\n 2. lt q \\<prec>\\<^sub>t lt p", "from \\<open>dickson_less_v d m (lt p) u\\<close>"], ["proof (chain)\npicking this:\n  dickson_less_v d m (lt p) u", "show \"d (pp_of_term (lt p)) \\<le> m\""], ["proof (prove)\nusing this:\n  dickson_less_v d m (lt p) u\n\ngoal (1 subgoal):\n 1. d (lp p) \\<le> m", "by (rule dickson_less_vD1)"], ["proof (state)\nthis:\n  d (lp p) \\<le> m\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t lt p", "from lt_tail[OF \\<open>tail q0 \\<noteq> 0\\<close>] \\<open>q = tail q0\\<close> \\<open>lt q0 = lt p\\<close>"], ["proof (chain)\npicking this:\n  lt (tail q0) \\<prec>\\<^sub>t lt q0\n  q = tail q0\n  lt q0 = lt p", "show \"lt q \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt (tail q0) \\<prec>\\<^sub>t lt q0\n  q = tail q0\n  lt q0 = lt p\n\ngoal (1 subgoal):\n 1. lt q \\<prec>\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  lt q \\<prec>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dickson_less_v d m (lt q) (lt p)\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "qed fact"], ["proof (state)\nthis:\n  q \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q) (lt p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>q\\<in>Q2.\n     q \\<noteq> 0 \\<longrightarrow>\n     q \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q) (lt p)\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "with hyp \\<open>dickson_less_v d m (lt p) u\\<close> \\<open>tail p \\<in> Q2\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>u0.\n     dickson_less_v d m u0 u \\<longrightarrow>\n     (\\<forall>x0 Q0.\n         x0 \\<in> Q0 \\<longrightarrow>\n         (\\<forall>y\\<in>Q0.\n             y \\<noteq> 0 \\<longrightarrow>\n             y \\<in> dgrad_p_set d m \\<and>\n             dickson_less_v d m (lt y) u0) \\<longrightarrow>\n         (\\<exists>p\\<in>Q0.\n             \\<forall>q\\<in>Q0. \\<not> dickson_less_p d m q p))\n  dickson_less_v d m (lt p) u\n  tail p \\<in> Q2\n  \\<forall>q\\<in>Q2.\n     q \\<noteq> 0 \\<longrightarrow>\n     q \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q) (lt p)", "have \"\\<exists>p\\<in>Q2. \\<forall>q\\<in>Q2. \\<not> dickson_less_p d m q p\""], ["proof (prove)\nusing this:\n  \\<forall>u0.\n     dickson_less_v d m u0 u \\<longrightarrow>\n     (\\<forall>x0 Q0.\n         x0 \\<in> Q0 \\<longrightarrow>\n         (\\<forall>y\\<in>Q0.\n             y \\<noteq> 0 \\<longrightarrow>\n             y \\<in> dgrad_p_set d m \\<and>\n             dickson_less_v d m (lt y) u0) \\<longrightarrow>\n         (\\<exists>p\\<in>Q0.\n             \\<forall>q\\<in>Q0. \\<not> dickson_less_p d m q p))\n  dickson_less_v d m (lt p) u\n  tail p \\<in> Q2\n  \\<forall>q\\<in>Q2.\n     q \\<noteq> 0 \\<longrightarrow>\n     q \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt q) (lt p)\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>Q2. \\<forall>q\\<in>Q2. \\<not> dickson_less_p d m q p", "by blast"], ["proof (state)\nthis:\n  \\<exists>p\\<in>Q2. \\<forall>q\\<in>Q2. \\<not> dickson_less_p d m q p\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>Q2. \\<forall>q\\<in>Q2. \\<not> dickson_less_p d m q p", "obtain q where \"q \\<in> Q2\" and q_min: \"\\<forall>r\\<in>Q2. \\<not> dickson_less_p d m r q\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>Q2. \\<forall>q\\<in>Q2. \\<not> dickson_less_p d m q p\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> Q2;\n         \\<forall>r\\<in>Q2. \\<not> dickson_less_p d m r q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  q \\<in> Q2\n  \\<forall>r\\<in>Q2. \\<not> dickson_less_p d m r q\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "from \\<open>q \\<in> Q2\\<close>"], ["proof (chain)\npicking this:\n  q \\<in> Q2", "obtain q0 where \"q = tail q0\" and \"q0 \\<in> Q\" and \"lt q0 = v\""], ["proof (prove)\nusing this:\n  q \\<in> Q2\n\ngoal (1 subgoal):\n 1. (\\<And>q0.\n        \\<lbrakk>q = tail q0; q0 \\<in> Q; lt q0 = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Q2_def"], ["proof (prove)\nusing this:\n  q \\<in> {tail p |p. p \\<in> Q \\<and> lt p = v}\n\ngoal (1 subgoal):\n 1. (\\<And>q0.\n        \\<lbrakk>q = tail q0; q0 \\<in> Q; lt q0 = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  q = tail q0\n  q0 \\<in> Q\n  lt q0 = v\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "from q_min \\<open>q = tail q0\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>Q2. \\<not> dickson_less_p d m r q\n  q = tail q0", "have q0_tail_min: \"\\<And>r. r \\<in> Q2 \\<Longrightarrow> \\<not> dickson_less_p d m r (tail q0)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>Q2. \\<not> dickson_less_p d m r q\n  q = tail q0\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> Q2 \\<Longrightarrow> \\<not> dickson_less_p d m r (tail q0)", "by simp"], ["proof (state)\nthis:\n  ?r27 \\<in> Q2 \\<Longrightarrow> \\<not> dickson_less_p d m ?r27 (tail q0)\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "from \\<open>q0 \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  q0 \\<in> Q", "show ?thesis"], ["proof (prove)\nusing this:\n  q0 \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q q0", "show \"\\<forall>r\\<in>Q. \\<not> dickson_less_p d m r q0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Q. \\<not> dickson_less_p d m r q0", "proof (intro ballI notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"dickson_less_p d m r q0\""], ["proof (state)\nthis:\n  dickson_less_p d m r q0\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"r \\<in> dgrad_p_set d m\" and \"q0 \\<in> dgrad_p_set d m\" and \"r \\<prec>\\<^sub>p q0\""], ["proof (prove)\nusing this:\n  dickson_less_p d m r q0\n\ngoal (1 subgoal):\n 1. r \\<in> dgrad_p_set d m &&&\n    q0 \\<in> dgrad_p_set d m &&& r \\<prec>\\<^sub>p q0", "by (rule dickson_less_pD1, rule dickson_less_pD2, rule dickson_less_pD3)"], ["proof (state)\nthis:\n  r \\<in> dgrad_p_set d m\n  q0 \\<in> dgrad_p_set d m\n  r \\<prec>\\<^sub>p q0\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "from this(3)"], ["proof (chain)\npicking this:\n  r \\<prec>\\<^sub>p q0", "have \"lt r \\<preceq>\\<^sub>t lt q0\""], ["proof (prove)\nusing this:\n  r \\<prec>\\<^sub>p q0\n\ngoal (1 subgoal):\n 1. lt r \\<preceq>\\<^sub>t lt q0", "by (simp add: ord_p_lt)"], ["proof (state)\nthis:\n  lt r \\<preceq>\\<^sub>t lt q0\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>lt q0 = v\\<close>"], ["proof (chain)\npicking this:\n  lt q0 = v\n  lt r \\<preceq>\\<^sub>t lt q0", "have \"lt r \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  lt q0 = v\n  lt r \\<preceq>\\<^sub>t lt q0\n\ngoal (1 subgoal):\n 1. lt r \\<preceq>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  lt r \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"r \\<in> Q\""], ["proof (state)\nthis:\n  r \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"\\<not> dickson_less_v d m (lt r) v\""], ["proof (prove)\nusing this:\n  r \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<not> dickson_less_v d m (lt r) v", "by (rule v_min)"], ["proof (state)\nthis:\n  \\<not> dickson_less_v d m (lt r) v\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "from False \\<open>r \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  0 \\<notin> Q\n  r \\<in> Q", "have \"r \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 \\<notin> Q\n  r \\<in> Q\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0", "using False"], ["proof (prove)\nusing this:\n  0 \\<notin> Q\n  r \\<in> Q\n  0 \\<notin> Q\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>r \\<in> dgrad_p_set d m\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> dgrad_p_set d m\n  r \\<noteq> 0", "have \"d (pp_of_term (lt r)) \\<le> m\""], ["proof (prove)\nusing this:\n  r \\<in> dgrad_p_set d m\n  r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d (lp r) \\<le> m", "by (rule dgrad_p_setD_lp)"], ["proof (state)\nthis:\n  d (lp r) \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<not> lt r \\<prec>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lt r \\<prec>\\<^sub>t v", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lt r \\<prec>\\<^sub>t v \\<Longrightarrow> False", "assume \"lt r \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  lt r \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt r \\<prec>\\<^sub>t v \\<Longrightarrow> False", "with \\<open>d (pp_of_term (lt r)) \\<le> m\\<close> \\<open>d (pp_of_term v) \\<le> m\\<close>"], ["proof (chain)\npicking this:\n  d (lp r) \\<le> m\n  d (pp_of_term v) \\<le> m\n  lt r \\<prec>\\<^sub>t v", "have \"dickson_less_v d m (lt r) v\""], ["proof (prove)\nusing this:\n  d (lp r) \\<le> m\n  d (pp_of_term v) \\<le> m\n  lt r \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. dickson_less_v d m (lt r) v", "by (rule dickson_less_vI)"], ["proof (state)\nthis:\n  dickson_less_v d m (lt r) v\n\ngoal (1 subgoal):\n 1. lt r \\<prec>\\<^sub>t v \\<Longrightarrow> False", "with \\<open>\\<not> dickson_less_v d m (lt r) v\\<close>"], ["proof (chain)\npicking this:\n  \\<not> dickson_less_v d m (lt r) v\n  dickson_less_v d m (lt r) v", "show False"], ["proof (prove)\nusing this:\n  \\<not> dickson_less_v d m (lt r) v\n  dickson_less_v d m (lt r) v\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> lt r \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>lt r \\<preceq>\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  lt r \\<preceq>\\<^sub>t v\n  \\<not> lt r \\<prec>\\<^sub>t v", "have \"lt r = v\""], ["proof (prove)\nusing this:\n  lt r \\<preceq>\\<^sub>t v\n  \\<not> lt r \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt r = v", "by simp"], ["proof (state)\nthis:\n  lt r = v\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>r \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> Q\n  lt r = v", "have \"tail r \\<in> Q2\""], ["proof (prove)\nusing this:\n  r \\<in> Q\n  lt r = v\n\ngoal (1 subgoal):\n 1. tail r \\<in> Q2", "by (auto simp add: Q2_def)"], ["proof (state)\nthis:\n  tail r \\<in> Q2\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "have \"dickson_less_p d m (tail r) (tail q0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_p d m (tail r) (tail q0)", "proof (rule dickson_less_pI)"], ["proof (state)\ngoal (3 subgoals):\n 1. tail r \\<in> dgrad_p_set d m\n 2. tail q0 \\<in> dgrad_p_set d m\n 3. tail r \\<prec>\\<^sub>p tail q0", "show \"tail r \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail r \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_tail, fact)"], ["proof (state)\nthis:\n  tail r \\<in> dgrad_p_set d m\n\ngoal (2 subgoals):\n 1. tail q0 \\<in> dgrad_p_set d m\n 2. tail r \\<prec>\\<^sub>p tail q0", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. tail q0 \\<in> dgrad_p_set d m\n 2. tail r \\<prec>\\<^sub>p tail q0", "show \"tail q0 \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail q0 \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_tail, fact)"], ["proof (state)\nthis:\n  tail q0 \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. tail r \\<prec>\\<^sub>p tail q0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. tail r \\<prec>\\<^sub>p tail q0", "have \"lt r = lt q0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt r = lt q0", "by (simp only: \\<open>lt r = v\\<close> \\<open>lt q0 = v\\<close>)"], ["proof (state)\nthis:\n  lt r = lt q0\n\ngoal (1 subgoal):\n 1. tail r \\<prec>\\<^sub>p tail q0", "from \\<open>r \\<noteq> 0\\<close> this \\<open>r \\<prec>\\<^sub>p q0\\<close>"], ["proof (chain)\npicking this:\n  r \\<noteq> 0\n  lt r = lt q0\n  r \\<prec>\\<^sub>p q0", "show \"tail r \\<prec>\\<^sub>p tail q0\""], ["proof (prove)\nusing this:\n  r \\<noteq> 0\n  lt r = lt q0\n  r \\<prec>\\<^sub>p q0\n\ngoal (1 subgoal):\n 1. tail r \\<prec>\\<^sub>p tail q0", "by (rule ord_p_tail)"], ["proof (state)\nthis:\n  tail r \\<prec>\\<^sub>p tail q0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dickson_less_p d m (tail r) (tail q0)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> Q; dickson_less_p d m r q0\\<rbrakk>\n       \\<Longrightarrow> False", "with q0_tail_min[OF \\<open>tail r \\<in> Q2\\<close>]"], ["proof (chain)\npicking this:\n  \\<not> dickson_less_p d m (tail r) (tail q0)\n  dickson_less_p d m (tail r) (tail q0)", "show False"], ["proof (prove)\nusing this:\n  \\<not> dickson_less_p d m (tail r) (tail q0)\n  dickson_less_p d m (tail r) (tail q0)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>r\\<in>Q. \\<not> dickson_less_p d m r q0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p\\<in>Q. \\<forall>q\\<in>Q. \\<not> dickson_less_p d m q p\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wf_dickson_less_p:\n  assumes \"dickson_grading d\"\n  shows \"wfP (dickson_less_p d m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (dickson_less_p d m)", "proof (rule wfI_min[to_pred])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "fix Q::\"('t \\<Rightarrow>\\<^sub>0 'b) set\" and x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "assume \"x \\<in> Q\""], ["proof (state)\nthis:\n  x \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "show \"\\<exists>z\\<in>Q. \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "proof (cases \"0 \\<in> Q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<in> Q \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "case True"], ["proof (state)\nthis:\n  0 \\<in> Q\n\ngoal (2 subgoals):\n 1. 0 \\<in> Q \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "proof (rule, rule, rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y. dickson_less_p d m y ?z \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "from True"], ["proof (chain)\npicking this:\n  0 \\<in> Q", "show \"0 \\<in> Q\""], ["proof (prove)\nusing this:\n  0 \\<in> Q\n\ngoal (1 subgoal):\n 1. 0 \\<in> Q", "."], ["proof (state)\nthis:\n  0 \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<And>y. dickson_less_p d m y 0 \\<Longrightarrow> y \\<notin> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. dickson_less_p d m y 0 \\<Longrightarrow> y \\<notin> Q", "fix q::\"'t \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. dickson_less_p d m y 0 \\<Longrightarrow> y \\<notin> Q", "assume \"dickson_less_p d m q 0\""], ["proof (state)\nthis:\n  dickson_less_p d m q 0\n\ngoal (1 subgoal):\n 1. \\<And>y. dickson_less_p d m y 0 \\<Longrightarrow> y \\<notin> Q", "hence \"q \\<prec>\\<^sub>p 0\""], ["proof (prove)\nusing this:\n  dickson_less_p d m q 0\n\ngoal (1 subgoal):\n 1. q \\<prec>\\<^sub>p 0", "by (rule dickson_less_pD3)"], ["proof (state)\nthis:\n  q \\<prec>\\<^sub>p 0\n\ngoal (1 subgoal):\n 1. \\<And>y. dickson_less_p d m y 0 \\<Longrightarrow> y \\<notin> Q", "thus \"q \\<notin> Q\""], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p 0\n\ngoal (1 subgoal):\n 1. q \\<notin> Q", "using ord_p_zero_min[of q]"], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p 0\n  0 \\<preceq>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. q \\<notin> Q", "by simp"], ["proof (state)\nthis:\n  q \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "case False"], ["proof (state)\nthis:\n  0 \\<notin> Q\n\ngoal (1 subgoal):\n 1. 0 \\<notin> Q \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "proof (cases \"Q \\<subseteq> dgrad_p_set d m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "case True"], ["proof (state)\nthis:\n  Q \\<subseteq> dgrad_p_set d m\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "let ?L = \"lt ` Q\""], ["proof (state)\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "from \\<open>x \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> Q", "have \"lt x \\<in> ?L\""], ["proof (prove)\nusing this:\n  x \\<in> Q\n\ngoal (1 subgoal):\n 1. lt x \\<in> lt ` Q", "by simp"], ["proof (state)\nthis:\n  lt x \\<in> lt ` Q\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "with wf_dickson_less_v[OF assms]"], ["proof (chain)\npicking this:\n  wfP (dickson_less_v d ?m)\n  lt x \\<in> lt ` Q", "obtain v where \"v \\<in> ?L\"\n        and v_min: \"\\<And>u. dickson_less_v d m u v \\<Longrightarrow> u \\<notin> ?L\""], ["proof (prove)\nusing this:\n  wfP (dickson_less_v d ?m)\n  lt x \\<in> lt ` Q\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> lt ` Q;\n         \\<And>u.\n            dickson_less_v d m u v \\<Longrightarrow>\n            u \\<notin> lt ` Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule wfE_min[to_pred], blast)"], ["proof (state)\nthis:\n  v \\<in> lt ` Q\n  dickson_less_v d m ?u27 v \\<Longrightarrow> ?u27 \\<notin> lt ` Q\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  v \\<in> lt ` Q", "obtain x1 where \"x1 \\<in> Q\" and \"v = lt x1\""], ["proof (prove)\nusing this:\n  v \\<in> lt ` Q\n\ngoal (1 subgoal):\n 1. (\\<And>x1.\n        \\<lbrakk>x1 \\<in> Q; v = lt x1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  x1 \\<in> Q\n  v = lt x1\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "from this(1) True False"], ["proof (chain)\npicking this:\n  x1 \\<in> Q\n  Q \\<subseteq> dgrad_p_set d m\n  0 \\<notin> Q", "have \"x1 \\<in> dgrad_p_set d m\" and \"x1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x1 \\<in> Q\n  Q \\<subseteq> dgrad_p_set d m\n  0 \\<notin> Q\n\ngoal (1 subgoal):\n 1. x1 \\<in> dgrad_p_set d m &&& x1 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  x1 \\<in> dgrad_p_set d m\n  x1 \\<noteq> 0\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "hence \"d (pp_of_term v) \\<le> m\""], ["proof (prove)\nusing this:\n  x1 \\<in> dgrad_p_set d m\n  x1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "unfolding \\<open>v = lt x1\\<close>"], ["proof (prove)\nusing this:\n  x1 \\<in> dgrad_p_set d m\n  x1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d (lp x1) \\<le> m", "by (rule dgrad_p_setD_lp)"], ["proof (state)\nthis:\n  d (pp_of_term v) \\<le> m\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "define Q1 where \"Q1 = {tail p | p. p \\<in> Q \\<and> lt p = v}\""], ["proof (state)\nthis:\n  Q1 = {tail p |p. p \\<in> Q \\<and> lt p = v}\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "from \\<open>x1 \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  x1 \\<in> Q", "have \"tail x1 \\<in> Q1\""], ["proof (prove)\nusing this:\n  x1 \\<in> Q\n\ngoal (1 subgoal):\n 1. tail x1 \\<in> Q1", "by (auto simp add: Q1_def \\<open>v = lt x1\\<close>)"], ["proof (state)\nthis:\n  tail x1 \\<in> Q1\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "with assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  tail x1 \\<in> Q1", "have \"\\<exists>p\\<in>Q1. \\<forall>q\\<in>Q1. \\<not> dickson_less_p d m q p\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  tail x1 \\<in> Q1\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>Q1. \\<forall>q\\<in>Q1. \\<not> dickson_less_p d m q p", "proof (rule wf_dickson_less_p_aux)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>Q1.\n       y \\<noteq> 0 \\<longrightarrow>\n       y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) ?u", "show \"\\<forall>y\\<in>Q1. y \\<noteq> 0 \\<longrightarrow> y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>Q1.\n       y \\<noteq> 0 \\<longrightarrow>\n       y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) v", "proof (intro ballI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> Q1; y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> y \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt y) v", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> Q1; y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> y \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt y) v", "assume \"y \\<in> Q1\" and \"y \\<noteq> 0\""], ["proof (state)\nthis:\n  y \\<in> Q1\n  y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> Q1; y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> y \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt y) v", "from this(1)"], ["proof (chain)\npicking this:\n  y \\<in> Q1", "obtain y1 where \"y1 \\<in> Q\" and \"v = lt y1\" and \"y = tail y1\""], ["proof (prove)\nusing this:\n  y \\<in> Q1\n\ngoal (1 subgoal):\n 1. (\\<And>y1.\n        \\<lbrakk>y1 \\<in> Q; v = lt y1; y = tail y1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Q1_def"], ["proof (prove)\nusing this:\n  y \\<in> {tail p |p. p \\<in> Q \\<and> lt p = v}\n\ngoal (1 subgoal):\n 1. (\\<And>y1.\n        \\<lbrakk>y1 \\<in> Q; v = lt y1; y = tail y1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  y1 \\<in> Q\n  v = lt y1\n  y = tail y1\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> Q1; y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> y \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt y) v", "from this(1) True"], ["proof (chain)\npicking this:\n  y1 \\<in> Q\n  Q \\<subseteq> dgrad_p_set d m", "have \"y1 \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  y1 \\<in> Q\n  Q \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. y1 \\<in> dgrad_p_set d m", ".."], ["proof (state)\nthis:\n  y1 \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> Q1; y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> y \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt y) v", "hence \"y \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  y1 \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. y \\<in> dgrad_p_set d m", "unfolding \\<open>y = tail y1\\<close>"], ["proof (prove)\nusing this:\n  y1 \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. tail y1 \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_tail)"], ["proof (state)\nthis:\n  y \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> Q1; y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> y \\<in> dgrad_p_set d m \\<and>\n                         dickson_less_v d m (lt y) v", "thus \"y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) v\""], ["proof (prove)\nusing this:\n  y \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) v", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. dickson_less_v d m (lt y) v", "show \"dickson_less_v d m (lt y) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_v d m (lt y) v", "proof (rule dickson_less_vI)"], ["proof (state)\ngoal (3 subgoals):\n 1. d (lp y) \\<le> m\n 2. d (pp_of_term v) \\<le> m\n 3. lt y \\<prec>\\<^sub>t v", "from \\<open>y \\<in> dgrad_p_set d m\\<close> \\<open>y \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> dgrad_p_set d m\n  y \\<noteq> 0", "show \"d (pp_of_term (lt y)) \\<le> m\""], ["proof (prove)\nusing this:\n  y \\<in> dgrad_p_set d m\n  y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d (lp y) \\<le> m", "by (rule dgrad_p_setD_lp)"], ["proof (state)\nthis:\n  d (lp y) \\<le> m\n\ngoal (2 subgoals):\n 1. d (pp_of_term v) \\<le> m\n 2. lt y \\<prec>\\<^sub>t v", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. d (pp_of_term v) \\<le> m\n 2. lt y \\<prec>\\<^sub>t v", "from \\<open>y \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  y \\<noteq> 0", "show \"lt y \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt y \\<prec>\\<^sub>t v", "unfolding \\<open>v = lt y1\\<close> \\<open>y = tail y1\\<close>"], ["proof (prove)\nusing this:\n  tail y1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt (tail y1) \\<prec>\\<^sub>t lt y1", "by (rule lt_tail)"], ["proof (state)\nthis:\n  lt y \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "qed fact"], ["proof (state)\nthis:\n  dickson_less_v d m (lt y) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>y\\<in>Q1.\n     y \\<noteq> 0 \\<longrightarrow>\n     y \\<in> dgrad_p_set d m \\<and> dickson_less_v d m (lt y) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p\\<in>Q1. \\<forall>q\\<in>Q1. \\<not> dickson_less_p d m q p\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>Q1. \\<forall>q\\<in>Q1. \\<not> dickson_less_p d m q p", "obtain p0 where \"p0 \\<in> Q1\" and p0_min: \"\\<And>q. q \\<in> Q1 \\<Longrightarrow> \\<not> dickson_less_p d m q p0\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>Q1. \\<forall>q\\<in>Q1. \\<not> dickson_less_p d m q p\n\ngoal (1 subgoal):\n 1. (\\<And>p0.\n        \\<lbrakk>p0 \\<in> Q1;\n         \\<And>q.\n            q \\<in> Q1 \\<Longrightarrow>\n            \\<not> dickson_less_p d m q p0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p0 \\<in> Q1\n  ?q27 \\<in> Q1 \\<Longrightarrow> \\<not> dickson_less_p d m ?q27 p0\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  p0 \\<in> Q1", "obtain p where \"p \\<in> Q\" and \"v = lt p\" and \"p0 = tail p\""], ["proof (prove)\nusing this:\n  p0 \\<in> Q1\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> Q; v = lt p; p0 = tail p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Q1_def"], ["proof (prove)\nusing this:\n  p0 \\<in> {tail p |p. p \\<in> Q \\<and> lt p = v}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> Q; v = lt p; p0 = tail p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p \\<in> Q\n  v = lt p\n  p0 = tail p\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "from this(1) False"], ["proof (chain)\npicking this:\n  p \\<in> Q\n  0 \\<notin> Q", "have \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<in> Q\n  0 \\<notin> Q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n 2. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "proof (intro bexI allI impI notI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "assume \"y \\<in> Q\""], ["proof (state)\nthis:\n  y \\<in> Q\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "hence \"y \\<noteq> 0\""], ["proof (prove)\nusing this:\n  y \\<in> Q\n\ngoal (1 subgoal):\n 1. y \\<noteq> 0", "using False"], ["proof (prove)\nusing this:\n  y \\<in> Q\n  0 \\<notin> Q\n\ngoal (1 subgoal):\n 1. y \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  y \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "assume \"dickson_less_p d m y p\""], ["proof (state)\nthis:\n  dickson_less_p d m y p\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "hence \"y \\<in> dgrad_p_set d m\" and \"p \\<in> dgrad_p_set d m\" and \"y \\<prec>\\<^sub>p p\""], ["proof (prove)\nusing this:\n  dickson_less_p d m y p\n\ngoal (1 subgoal):\n 1. y \\<in> dgrad_p_set d m &&&\n    p \\<in> dgrad_p_set d m &&& y \\<prec>\\<^sub>p p", "by (rule dickson_less_pD1, rule dickson_less_pD2, rule dickson_less_pD3)"], ["proof (state)\nthis:\n  y \\<in> dgrad_p_set d m\n  p \\<in> dgrad_p_set d m\n  y \\<prec>\\<^sub>p p\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "from this(3)"], ["proof (chain)\npicking this:\n  y \\<prec>\\<^sub>p p", "have \"y \\<preceq>\\<^sub>p p\""], ["proof (prove)\nusing this:\n  y \\<prec>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. y \\<preceq>\\<^sub>p p", "by simp"], ["proof (state)\nthis:\n  y \\<preceq>\\<^sub>p p\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "hence \"lt y \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  y \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. lt y \\<preceq>\\<^sub>t lt p", "by (rule ord_p_lt)"], ["proof (state)\nthis:\n  lt y \\<preceq>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "moreover"], ["proof (state)\nthis:\n  lt y \\<preceq>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "have \"\\<not> lt y \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lt y \\<prec>\\<^sub>t lt p", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lt y \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "assume \"lt y \\<prec>\\<^sub>t lt p\""], ["proof (state)\nthis:\n  lt y \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt y \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "have \"dickson_less_v d m (lt y) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_v d m (lt y) v", "unfolding \\<open>v = lt p\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_v d m (lt y) (lt p)", "by (rule dickson_less_vI, rule dgrad_p_setD_lp, fact+, rule dgrad_p_setD_lp, fact+)"], ["proof (state)\nthis:\n  dickson_less_v d m (lt y) v\n\ngoal (1 subgoal):\n 1. lt y \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "hence \"lt y \\<notin> ?L\""], ["proof (prove)\nusing this:\n  dickson_less_v d m (lt y) v\n\ngoal (1 subgoal):\n 1. lt y \\<notin> lt ` Q", "by (rule v_min)"], ["proof (state)\nthis:\n  lt y \\<notin> lt ` Q\n\ngoal (1 subgoal):\n 1. lt y \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "hence \"y \\<notin> Q\""], ["proof (prove)\nusing this:\n  lt y \\<notin> lt ` Q\n\ngoal (1 subgoal):\n 1. y \\<notin> Q", "by fastforce"], ["proof (state)\nthis:\n  y \\<notin> Q\n\ngoal (1 subgoal):\n 1. lt y \\<prec>\\<^sub>t lt p \\<Longrightarrow> False", "from this \\<open>y \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  y \\<notin> Q\n  y \\<in> Q", "show False"], ["proof (prove)\nusing this:\n  y \\<notin> Q\n  y \\<in> Q\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> lt y \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "ultimately"], ["proof (chain)\npicking this:\n  lt y \\<preceq>\\<^sub>t lt p\n  \\<not> lt y \\<prec>\\<^sub>t lt p", "have \"lt y = lt p\""], ["proof (prove)\nusing this:\n  lt y \\<preceq>\\<^sub>t lt p\n  \\<not> lt y \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt y = lt p", "by simp"], ["proof (state)\nthis:\n  lt y = lt p\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "from \\<open>y \\<noteq> 0\\<close> this \\<open>y \\<prec>\\<^sub>p p\\<close>"], ["proof (chain)\npicking this:\n  y \\<noteq> 0\n  lt y = lt p\n  y \\<prec>\\<^sub>p p", "have \"tail y \\<prec>\\<^sub>p tail p\""], ["proof (prove)\nusing this:\n  y \\<noteq> 0\n  lt y = lt p\n  y \\<prec>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. tail y \\<prec>\\<^sub>p tail p", "by (rule ord_p_tail)"], ["proof (state)\nthis:\n  tail y \\<prec>\\<^sub>p tail p\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "from \\<open>y \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> Q", "have \"tail y \\<in> Q1\""], ["proof (prove)\nusing this:\n  y \\<in> Q\n\ngoal (1 subgoal):\n 1. tail y \\<in> Q1", "by (auto simp add: Q1_def \\<open>v = lt p\\<close> \\<open>lt y = lt p\\<close>[symmetric])"], ["proof (state)\nthis:\n  tail y \\<in> Q1\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "hence \"\\<not> dickson_less_p d m (tail y) p0\""], ["proof (prove)\nusing this:\n  tail y \\<in> Q1\n\ngoal (1 subgoal):\n 1. \\<not> dickson_less_p d m (tail y) p0", "by (rule p0_min)"], ["proof (state)\nthis:\n  \\<not> dickson_less_p d m (tail y) p0\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "moreover"], ["proof (state)\nthis:\n  \\<not> dickson_less_p d m (tail y) p0\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "have \"dickson_less_p d m (tail y) p0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_p d m (tail y) p0", "unfolding \\<open>p0 = tail p\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dickson_less_p d m (tail y) (tail p)", "by (rule dickson_less_pI, rule dgrad_p_set_closed_tail, fact, rule dgrad_p_set_closed_tail, fact+)"], ["proof (state)\nthis:\n  dickson_less_p d m (tail y) p0\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>dickson_less_p d m y ?z; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> dickson_less_p d m (tail y) p0\n  dickson_less_p d m (tail y) p0", "show False"], ["proof (prove)\nusing this:\n  \\<not> dickson_less_p d m (tail y) p0\n  dickson_less_p d m (tail y) p0\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. p \\<in> Q", "qed fact"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "case False"], ["proof (state)\nthis:\n  \\<not> Q \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "then"], ["proof (chain)\npicking this:\n  \\<not> Q \\<subseteq> dgrad_p_set d m", "obtain q where \"q \\<in> Q\" and \"q \\<notin> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  \\<not> Q \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> Q; q \\<notin> dgrad_p_set d m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q \\<in> Q\n  q \\<notin> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<not> Q \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  q \\<in> Q", "show ?thesis"], ["proof (prove)\nusing this:\n  q \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>y. dickson_less_p d m y q \\<longrightarrow> y \\<notin> Q", "show \"\\<forall>y. dickson_less_p d m y q \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y. dickson_less_p d m y q \\<longrightarrow> y \\<notin> Q", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. dickson_less_p d m y q \\<Longrightarrow> y \\<notin> Q", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. dickson_less_p d m y q \\<Longrightarrow> y \\<notin> Q", "assume \"dickson_less_p d m y q\""], ["proof (state)\nthis:\n  dickson_less_p d m y q\n\ngoal (1 subgoal):\n 1. \\<And>y. dickson_less_p d m y q \\<Longrightarrow> y \\<notin> Q", "hence \"q \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  dickson_less_p d m y q\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "by (rule dickson_less_pD2)"], ["proof (state)\nthis:\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>y. dickson_less_p d m y q \\<Longrightarrow> y \\<notin> Q", "with \\<open>q \\<notin> dgrad_p_set d m\\<close>"], ["proof (chain)\npicking this:\n  q \\<notin> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m", "show \"y \\<notin> Q\""], ["proof (prove)\nusing this:\n  q \\<notin> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. y \\<notin> Q", ".."], ["proof (state)\nthis:\n  y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>y. dickson_less_p d m y q \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y. dickson_less_p d m y z \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary ord_p_minimum_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"x \\<in> Q\" and \"Q \\<subseteq> dgrad_p_set d m\"\n  obtains q where \"q \\<in> Q\" and \"\\<And>y. y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> Q;\n         \\<And>y.\n            y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> Q;\n         \\<And>y.\n            y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(1)"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"wfP (dickson_less_p d m)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. wfP (dickson_less_p d m)", "by (rule wf_dickson_less_p)"], ["proof (state)\nthis:\n  wfP (dickson_less_p d m)\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> Q;\n         \\<And>y.\n            y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this assms(2)"], ["proof (chain)\npicking this:\n  wfP (dickson_less_p d m)\n  x \\<in> Q", "obtain q where \"q \\<in> Q\" and *: \"\\<And>y. dickson_less_p d m y q \\<Longrightarrow> y \\<notin> Q\""], ["proof (prove)\nusing this:\n  wfP (dickson_less_p d m)\n  x \\<in> Q\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> Q;\n         \\<And>y.\n            dickson_less_p d m y q \\<Longrightarrow> y \\<notin> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule wfE_min[to_pred], auto)"], ["proof (state)\nthis:\n  q \\<in> Q\n  dickson_less_p d m ?y28 q \\<Longrightarrow> ?y28 \\<notin> Q\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> Q;\n         \\<And>y.\n            y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(3) \\<open>q \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  Q \\<subseteq> dgrad_p_set d m\n  q \\<in> Q", "have \"q \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  Q \\<subseteq> dgrad_p_set d m\n  q \\<in> Q\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", ".."], ["proof (state)\nthis:\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> Q;\n         \\<And>y.\n            y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>q \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  q \\<in> Q", "show ?thesis"], ["proof (prove)\nusing this:\n  q \\<in> Q\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q", "assume \"y \\<prec>\\<^sub>p q\""], ["proof (state)\nthis:\n  y \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q", "show \"y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "assume \"y \\<in> Q\""], ["proof (state)\nthis:\n  y \\<in> Q\n\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "with assms(3)"], ["proof (chain)\npicking this:\n  Q \\<subseteq> dgrad_p_set d m\n  y \\<in> Q", "have \"y \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  Q \\<subseteq> dgrad_p_set d m\n  y \\<in> Q\n\ngoal (1 subgoal):\n 1. y \\<in> dgrad_p_set d m", ".."], ["proof (state)\nthis:\n  y \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "from this \\<open>q \\<in> dgrad_p_set d m\\<close> \\<open>y \\<prec>\\<^sub>p q\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m\n  y \\<prec>\\<^sub>p q", "have \"dickson_less_p d m y q\""], ["proof (prove)\nusing this:\n  y \\<in> dgrad_p_set d m\n  q \\<in> dgrad_p_set d m\n  y \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. dickson_less_p d m y q", "by (rule dickson_less_pI)"], ["proof (state)\nthis:\n  dickson_less_p d m y q\n\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "hence \"y \\<notin> Q\""], ["proof (prove)\nusing this:\n  dickson_less_p d m y q\n\ngoal (1 subgoal):\n 1. y \\<notin> Q", "by (rule *)"], ["proof (state)\nthis:\n  y \\<notin> Q\n\ngoal (1 subgoal):\n 1. y \\<in> Q \\<Longrightarrow> False", "from this \\<open>y \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  y \\<notin> Q\n  y \\<in> Q", "show False"], ["proof (prove)\nusing this:\n  y \\<notin> Q\n  y \\<in> Q\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_term_minimum_dgrad_set:\n  assumes \"dickson_grading d\" and \"v \\<in> V\" and \"pp_of_term ` V \\<subseteq> dgrad_set d m\"\n  obtains u where \"u \\<in> V\" and \"\\<And>w. w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> V;\n         \\<And>w.\n            w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> V;\n         \\<And>w.\n            w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(1)"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"wfP (dickson_less_v d m)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. wfP (dickson_less_v d m)", "by (rule wf_dickson_less_v)"], ["proof (state)\nthis:\n  wfP (dickson_less_v d m)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> V;\n         \\<And>w.\n            w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  wfP (dickson_less_v d m)", "obtain u where \"u \\<in> V\" and *: \"\\<And>w. dickson_less_v d m w u \\<Longrightarrow> w \\<notin> V\""], ["proof (prove)\nusing this:\n  wfP (dickson_less_v d m)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> V;\n         \\<And>w.\n            dickson_less_v d m w u \\<Longrightarrow> w \\<notin> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2)"], ["proof (prove)\nusing this:\n  wfP (dickson_less_v d m)\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> V;\n         \\<And>w.\n            dickson_less_v d m w u \\<Longrightarrow> w \\<notin> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule wfE_min[to_pred]) blast"], ["proof (state)\nthis:\n  u \\<in> V\n  dickson_less_v d m ?w27 u \\<Longrightarrow> ?w27 \\<notin> V\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> V;\n         \\<And>w.\n            w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this(1)"], ["proof (chain)\npicking this:\n  u \\<in> V", "have \"pp_of_term u \\<in> pp_of_term ` V\""], ["proof (prove)\nusing this:\n  u \\<in> V\n\ngoal (1 subgoal):\n 1. pp_of_term u \\<in> pp_of_term ` V", "by (rule imageI)"], ["proof (state)\nthis:\n  pp_of_term u \\<in> pp_of_term ` V\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> V;\n         \\<And>w.\n            w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms(3)"], ["proof (chain)\npicking this:\n  pp_of_term ` V \\<subseteq> dgrad_set d m\n  pp_of_term u \\<in> pp_of_term ` V", "have \"pp_of_term u \\<in> dgrad_set d m\""], ["proof (prove)\nusing this:\n  pp_of_term ` V \\<subseteq> dgrad_set d m\n  pp_of_term u \\<in> pp_of_term ` V\n\ngoal (1 subgoal):\n 1. pp_of_term u \\<in> dgrad_set d m", ".."], ["proof (state)\nthis:\n  pp_of_term u \\<in> dgrad_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> V;\n         \\<And>w.\n            w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"d (pp_of_term u) \\<le> m\""], ["proof (prove)\nusing this:\n  pp_of_term u \\<in> dgrad_set d m\n\ngoal (1 subgoal):\n 1. d (pp_of_term u) \\<le> m", "by (rule dgrad_setD)"], ["proof (state)\nthis:\n  d (pp_of_term u) \\<le> m\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> V;\n         \\<And>w.\n            w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>u \\<in> V\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> V", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<in> V\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w. w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w. w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V", "assume \"w \\<prec>\\<^sub>t u\""], ["proof (state)\nthis:\n  w \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>w. w \\<prec>\\<^sub>t u \\<Longrightarrow> w \\<notin> V", "show \"w \\<notin> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<notin> V", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<in> V \\<Longrightarrow> False", "assume \"w \\<in> V\""], ["proof (state)\nthis:\n  w \\<in> V\n\ngoal (1 subgoal):\n 1. w \\<in> V \\<Longrightarrow> False", "hence \"pp_of_term w \\<in> pp_of_term ` V\""], ["proof (prove)\nusing this:\n  w \\<in> V\n\ngoal (1 subgoal):\n 1. pp_of_term w \\<in> pp_of_term ` V", "by (rule imageI)"], ["proof (state)\nthis:\n  pp_of_term w \\<in> pp_of_term ` V\n\ngoal (1 subgoal):\n 1. w \\<in> V \\<Longrightarrow> False", "with assms(3)"], ["proof (chain)\npicking this:\n  pp_of_term ` V \\<subseteq> dgrad_set d m\n  pp_of_term w \\<in> pp_of_term ` V", "have \"pp_of_term w \\<in> dgrad_set d m\""], ["proof (prove)\nusing this:\n  pp_of_term ` V \\<subseteq> dgrad_set d m\n  pp_of_term w \\<in> pp_of_term ` V\n\ngoal (1 subgoal):\n 1. pp_of_term w \\<in> dgrad_set d m", ".."], ["proof (state)\nthis:\n  pp_of_term w \\<in> dgrad_set d m\n\ngoal (1 subgoal):\n 1. w \\<in> V \\<Longrightarrow> False", "hence \"d (pp_of_term w) \\<le> m\""], ["proof (prove)\nusing this:\n  pp_of_term w \\<in> dgrad_set d m\n\ngoal (1 subgoal):\n 1. d (pp_of_term w) \\<le> m", "by (rule dgrad_setD)"], ["proof (state)\nthis:\n  d (pp_of_term w) \\<le> m\n\ngoal (1 subgoal):\n 1. w \\<in> V \\<Longrightarrow> False", "from this \\<open>d (pp_of_term u) \\<le> m\\<close> \\<open>w \\<prec>\\<^sub>t u\\<close>"], ["proof (chain)\npicking this:\n  d (pp_of_term w) \\<le> m\n  d (pp_of_term u) \\<le> m\n  w \\<prec>\\<^sub>t u", "have \"dickson_less_v d m w u\""], ["proof (prove)\nusing this:\n  d (pp_of_term w) \\<le> m\n  d (pp_of_term u) \\<le> m\n  w \\<prec>\\<^sub>t u\n\ngoal (1 subgoal):\n 1. dickson_less_v d m w u", "by (rule dickson_less_vI)"], ["proof (state)\nthis:\n  dickson_less_v d m w u\n\ngoal (1 subgoal):\n 1. w \\<in> V \\<Longrightarrow> False", "hence \"w \\<notin> V\""], ["proof (prove)\nusing this:\n  dickson_less_v d m w u\n\ngoal (1 subgoal):\n 1. w \\<notin> V", "by (rule *)"], ["proof (state)\nthis:\n  w \\<notin> V\n\ngoal (1 subgoal):\n 1. w \\<in> V \\<Longrightarrow> False", "from this \\<open>w \\<in> V\\<close>"], ["proof (chain)\npicking this:\n  w \\<notin> V\n  w \\<in> V", "show False"], ["proof (prove)\nusing this:\n  w \\<notin> V\n  w \\<in> V\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<notin> V\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* gd_term *)"], ["", "subsection \\<open>More Interpretations\\<close>"], ["", "context gd_powerprod\nbegin"], ["", "sublocale punit: gd_term to_pair_unit fst \"(\\<preceq>)\" \"(\\<prec>)\" \"(\\<preceq>)\" \"(\\<prec>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_term to_pair_unit fst (\\<preceq>) (\\<prec>) (\\<preceq>) (\\<prec>)", ".."], ["", "end"], ["", "locale od_term =\n    ordered_term pair_of_term term_of_pair ord ord_strict ord_term ord_term_strict\n      for pair_of_term::\"'t \\<Rightarrow> ('a::dickson_powerprod \\<times> 'k::{the_min,wellorder})\"\n      and term_of_pair::\"('a \\<times> 'k) \\<Rightarrow> 't\"\n      and ord::\"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infixl \"\\<preceq>\" 50)\n      and ord_strict (infixl \"\\<prec>\" 50)\n      and ord_term::\"'t \\<Rightarrow> 't \\<Rightarrow> bool\" (infixl \"\\<preceq>\\<^sub>t\" 50)\n      and ord_term_strict::\"'t \\<Rightarrow> 't \\<Rightarrow> bool\" (infixl \"\\<prec>\\<^sub>t\" 50)\nbegin"], ["", "sublocale gd_term"], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_term pair_of_term term_of_pair (\\<preceq>) (\\<prec>)\n     (\\<preceq>\\<^sub>t) (\\<prec>\\<^sub>t)", ".."], ["", "lemma ord_p_wf: \"wfP (\\<prec>\\<^sub>p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<prec>\\<^sub>p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wfP (\\<prec>\\<^sub>p)", "from dickson_grading_zero"], ["proof (chain)\npicking this:\n  dickson_grading (\\<lambda>_. 0)", "have \"wfP (dickson_less_p (\\<lambda>_. 0) 0)\""], ["proof (prove)\nusing this:\n  dickson_grading (\\<lambda>_. 0)\n\ngoal (1 subgoal):\n 1. wfP (dickson_less_p (\\<lambda>_. 0) 0)", "by (rule wf_dickson_less_p)"], ["proof (state)\nthis:\n  wfP (dickson_less_p (\\<lambda>_. 0) 0)\n\ngoal (1 subgoal):\n 1. wfP (\\<prec>\\<^sub>p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  wfP (dickson_less_p (\\<lambda>_. 0) 0)\n\ngoal (1 subgoal):\n 1. wfP (\\<prec>\\<^sub>p)", "by (simp only: dickson_less_p_zero)"], ["proof (state)\nthis:\n  wfP (\\<prec>\\<^sub>p)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* od_term *)"], ["", "end"], ["", "(* theory *)"]]}