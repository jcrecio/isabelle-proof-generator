{"file_name": "/home/qj213/afp-2021-10-22/thys/Polynomials/NZM.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Polynomials", "problem_names": ["lemma var_monom_x_x [simp]: \"var_monom x * var_monom x \\<noteq> 1\"", "lemma monom_list_x_x[simp]: \"monom_list (var_monom x * var_monom x) = [(x,2)]\"", "lemma assumes b: \"b + a > 0\" and a: \"(a :: int) \\<ge> 0\"\n  shows \"check_poly_strict_mono_discrete (>) (poly_of (PSum [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]])) x\"", "lemma assumes b: \"b + a \\<ge> 0\" and a: \"(a :: int) \\<ge> 0\" \n  shows \"check_poly_weak_mono_discrete (poly_of (PSum [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]])) x\""], "translations": [["", "lemma var_monom_x_x [simp]: \"var_monom x * var_monom x \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_monom x * var_monom x \\<noteq> 1", "by (unfold eq_monom_sum_var, auto simp: sum_var_monom_mult sum_var_monom_var)"], ["", "lemma monom_list_x_x[simp]: \"monom_list (var_monom x * var_monom x) = [(x,2)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_list (var_monom x * var_monom x) = [(x, 2)]", "by (transfer, auto simp: monom_mult_list.simps)"], ["", "lemma assumes b: \"b + a > 0\" and a: \"(a :: int) \\<ge> 0\"\n  shows \"check_poly_strict_mono_discrete (>) (poly_of (PSum [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]])) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "note [simp] = poly_add.simps poly_mult.simps monom_mult_poly.simps zero_poly_def one_poly_def \n    extract_def check_poly_strict_mono_discrete_def poly_subst.simps monom_subst_def poly_power.simps\n    check_poly_gt_def poly_split_def check_poly_ge.simps"], ["proof (state)\nthis:\n  poly_add [] ?q = ?q\n  poly_add ((?m, ?c) # ?p) ?q =\n  (case List.extract (\\<lambda>mc. fst mc = ?m) ?q of\n   None \\<Rightarrow> (?m, ?c) # poly_add ?p ?q\n   | Some (q1, (x, d), q2) \\<Rightarrow>\n       if ?c + d = (0::?'a) then poly_add ?p (q1 @ q2)\n       else (?m, ?c + d) # poly_add ?p (q1 @ q2))\n  poly_mult [] ?q = []\n  poly_mult (?mc # ?p) ?q =\n  poly_add (monom_mult_poly ?mc ?q) (poly_mult ?p ?q)\n  monom_mult_poly ?uu [] = []\n  monom_mult_poly (?m, ?c) ((?m', ?d) # ?p) =\n  (if ?c * ?d = (0::?'a) then monom_mult_poly (?m, ?c) ?p\n   else (?m * ?m', ?c * ?d) # monom_mult_poly (?m, ?c) ?p)\n  zero_poly \\<equiv> []\n  one_poly \\<equiv> [(1, 1::?'a)]\n  List.extract ?P ?xs =\n  (case dropWhile (Not \\<circ> ?P) ?xs of [] \\<Rightarrow> None\n   | y # ys \\<Rightarrow> Some (takeWhile (Not \\<circ> ?P) ?xs, y, ys))\n  check_poly_strict_mono_discrete ?gt ?p ?v \\<equiv>\n  check_poly_gt ?gt\n   (poly_subst\n     (\\<lambda>w.\n         poly_of (if w = ?v then PSum [PNum (1::?'a), PVar ?v] else PVar w))\n     ?p)\n   ?p\n  poly_subst ?\\<sigma> [] = zero_poly\n  poly_subst ?\\<sigma> ((?m, ?c) # ?p) =\n  poly_add (poly_mult [(1, ?c)] (monom_subst ?\\<sigma> ?m))\n   (poly_subst ?\\<sigma> ?p)\n  monom_subst ?\\<sigma> ?m = monom_list_subst ?\\<sigma> (monom_list ?m)\n  poly_power ?uu 0 = one_poly\n  poly_power ?p (Suc ?n) = poly_mult ?p (poly_power ?p ?n)\n  check_poly_gt ?gt ?p ?q \\<equiv>\n  let (a1, p1) = poly_split 1 ?p; (b1, q1) = poly_split 1 ?q\n  in ?gt a1 b1 \\<and> check_poly_ge p1 q1\n  poly_split ?m ?p \\<equiv>\n  case List.extract (\\<lambda>(n, uu_). ?m = n) ?p of\n  None \\<Rightarrow> (0::?'a, ?p)\n  | Some (p1, (x, c), p2) \\<Rightarrow> (c, p1 @ p2)\n  check_poly_ge [] ?q = list_all (\\<lambda>(uu_, d). d \\<le> (0::?'a)) ?q\n  check_poly_ge ((?m, ?c) # ?p) ?q =\n  (case List.extract (\\<lambda>nd. fst nd = ?m) ?q of\n   None \\<Rightarrow> (0::?'a) \\<le> ?c \\<and> check_poly_ge ?p ?q\n   | Some (q1, (x, d), q2) \\<Rightarrow>\n       d \\<le> ?c \\<and> check_poly_ge ?p (q1 @ q2))\n\ngoal (1 subgoal):\n 1. check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "proof (cases \"a = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "case True"], ["proof (state)\nthis:\n  a = 0\n\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "with b"], ["proof (chain)\npicking this:\n  0 < b + a\n  a = 0", "have b: \"b > 0 \\<and> b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < b + a\n  a = 0\n\ngoal (1 subgoal):\n 1. 0 < b \\<and> b \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  0 < b \\<and> b \\<noteq> 0\n\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "using b True"], ["proof (prove)\nusing this:\n  0 < b \\<and> b \\<noteq> 0\n  a = 0\n\ngoal (1 subgoal):\n 1. check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "by simp"], ["proof (state)\nthis:\n  check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n   (poly_of\n     (PSum\n       [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n   x\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "case False"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "have [simp]: \"2 = Suc (Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 = Suc (Suc 0)", "by simp"], ["proof (state)\nthis:\n  2 = Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "using False a b"], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n  0 \\<le> a\n  0 < b + a\n\ngoal (1 subgoal):\n 1. check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "by simp"], ["proof (state)\nthis:\n  check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n   (poly_of\n     (PSum\n       [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n   x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  check_poly_strict_mono_discrete (\\<lambda>x y. y < x)\n   (poly_of\n     (PSum\n       [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n   x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes b: \"b + a \\<ge> 0\" and a: \"(a :: int) \\<ge> 0\" \n  shows \"check_poly_weak_mono_discrete (poly_of (PSum [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]])) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "note [simp] = poly_add.simps poly_mult.simps monom_mult_poly.simps zero_poly_def one_poly_def \n    extract_def check_poly_weak_mono_discrete_def poly_subst.simps monom_subst_def poly_power.simps\n    check_poly_gt_def poly_split_def check_poly_ge.simps"], ["proof (state)\nthis:\n  poly_add [] ?q = ?q\n  poly_add ((?m, ?c) # ?p) ?q =\n  (case List.extract (\\<lambda>mc. fst mc = ?m) ?q of\n   None \\<Rightarrow> (?m, ?c) # poly_add ?p ?q\n   | Some (q1, (x, d), q2) \\<Rightarrow>\n       if ?c + d = (0::?'a) then poly_add ?p (q1 @ q2)\n       else (?m, ?c + d) # poly_add ?p (q1 @ q2))\n  poly_mult [] ?q = []\n  poly_mult (?mc # ?p) ?q =\n  poly_add (monom_mult_poly ?mc ?q) (poly_mult ?p ?q)\n  monom_mult_poly ?uu [] = []\n  monom_mult_poly (?m, ?c) ((?m', ?d) # ?p) =\n  (if ?c * ?d = (0::?'a) then monom_mult_poly (?m, ?c) ?p\n   else (?m * ?m', ?c * ?d) # monom_mult_poly (?m, ?c) ?p)\n  zero_poly \\<equiv> []\n  one_poly \\<equiv> [(1, 1::?'a)]\n  List.extract ?P ?xs =\n  (case dropWhile (Not \\<circ> ?P) ?xs of [] \\<Rightarrow> None\n   | y # ys \\<Rightarrow> Some (takeWhile (Not \\<circ> ?P) ?xs, y, ys))\n  check_poly_weak_mono_discrete ?p ?v \\<equiv>\n  check_poly_ge\n   (poly_subst\n     (\\<lambda>w.\n         poly_of (if w = ?v then PSum [PNum (1::?'a), PVar ?v] else PVar w))\n     ?p)\n   ?p\n  poly_subst ?\\<sigma> [] = zero_poly\n  poly_subst ?\\<sigma> ((?m, ?c) # ?p) =\n  poly_add (poly_mult [(1, ?c)] (monom_subst ?\\<sigma> ?m))\n   (poly_subst ?\\<sigma> ?p)\n  monom_subst ?\\<sigma> ?m = monom_list_subst ?\\<sigma> (monom_list ?m)\n  poly_power ?uu 0 = one_poly\n  poly_power ?p (Suc ?n) = poly_mult ?p (poly_power ?p ?n)\n  check_poly_gt ?gt ?p ?q \\<equiv>\n  let (a1, p1) = poly_split 1 ?p; (b1, q1) = poly_split 1 ?q\n  in ?gt a1 b1 \\<and> check_poly_ge p1 q1\n  poly_split ?m ?p \\<equiv>\n  case List.extract (\\<lambda>(n, uu_). ?m = n) ?p of\n  None \\<Rightarrow> (0::?'a, ?p)\n  | Some (p1, (x, c), p2) \\<Rightarrow> (c, p1 @ p2)\n  check_poly_ge [] ?q = list_all (\\<lambda>(uu_, d). d \\<le> (0::?'a)) ?q\n  check_poly_ge ((?m, ?c) # ?p) ?q =\n  (case List.extract (\\<lambda>nd. fst nd = ?m) ?q of\n   None \\<Rightarrow> (0::?'a) \\<le> ?c \\<and> check_poly_ge ?p ?q\n   | Some (q1, (x, d), q2) \\<Rightarrow>\n       d \\<le> ?c \\<and> check_poly_ge ?p (q1 @ q2))\n\ngoal (1 subgoal):\n 1. check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "proof (cases \"a = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "case True"], ["proof (state)\nthis:\n  a = 0\n\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "with b"], ["proof (chain)\npicking this:\n  0 \\<le> b + a\n  a = 0", "have b: \"0 \\<le> b\""], ["proof (prove)\nusing this:\n  0 \\<le> b + a\n  a = 0\n\ngoal (1 subgoal):\n 1. 0 \\<le> b", "by auto"], ["proof (state)\nthis:\n  0 \\<le> b\n\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "using b True"], ["proof (prove)\nusing this:\n  0 \\<le> b\n  a = 0\n\ngoal (1 subgoal):\n 1. check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "by simp"], ["proof (state)\nthis:\n  check_poly_weak_mono_discrete\n   (poly_of\n     (PSum\n       [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n   x\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "case False"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "have [simp]: \"2 = Suc (Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 = Suc (Suc 0)", "by simp"], ["proof (state)\nthis:\n  2 = Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "using False a b"], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n  0 \\<le> a\n  0 \\<le> b + a\n\ngoal (1 subgoal):\n 1. check_poly_weak_mono_discrete\n     (poly_of\n       (PSum\n         [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n     x", "by simp"], ["proof (state)\nthis:\n  check_poly_weak_mono_discrete\n   (poly_of\n     (PSum\n       [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n   x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  check_poly_weak_mono_discrete\n   (poly_of\n     (PSum\n       [PNum c, PMult [PNum b, PVar x], PMult [PNum a, PVar x, PVar x]]))\n   x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}