{"file_name": "/home/qj213/afp-2021-10-22/thys/Polynomials/MPoly_Type_Class_OAlist.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Polynomials", "problem_names": ["lemma lookup_PP_oalist [simp, code]: \"lookup_pp (PP_oalist xs) = OAlist_tc_lookup xs\"", "lemma keys_PP_oalist [code]: \"keys_pp (PP_oalist xs) = set (OAlist_tc_sorted_domain xs)\"", "lemma lex_comp_PP_oalist [code]:\n  \"lex_comp' (PP_oalist xs) (PP_oalist ys) =\n         the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)\"\n  for xs ys::\"('a::nat, 'b::nat) oalist_tc\"", "lemma zero_PP_oalist [code]: \"(0::('a::linorder, 'b::zero) pp) = PP_oalist OAlist_tc_empty\"", "lemma plus_PP_oalist [code]:\n  \"PP_oalist xs + PP_oalist ys = PP_oalist (OAlist_tc_map2_val_neutr (\\<lambda>_. (+)) xs ys)\"", "lemma minus_PP_oalist [code]:\n  \"PP_oalist xs - PP_oalist ys = PP_oalist (OAlist_tc_map2_val_rneutr (\\<lambda>_. (-)) xs ys)\"", "lemma equal_PP_oalist [code]: \"equal_class.equal (PP_oalist xs) (PP_oalist ys) = (xs = ys)\"", "lemma lcs_PP_oalist [code]:\n  \"lcs (PP_oalist xs) (PP_oalist ys) = PP_oalist (OAlist_tc_map2_val_neutr (\\<lambda>_. max) xs ys)\"\n  for xs ys :: \"('a::linorder, 'b::add_linorder_min) oalist_tc\"", "lemma deg_pp_PP_oalist [code]: \"deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))\"", "lemma single_PP_oalist [code]: \"single_pp x e = PP_oalist (oalist_tc_of_list [(x, e)])\"", "lemma adds_pp_PP_oalist [code]:\n  \"adds_pp_add_linorder (PP_oalist xs) (PP_oalist ys) = OAlist_tc_prod_ord (\\<lambda>_. less_eq) xs ys\"\n  for xs ys::\"('a::linorder, 'b::add_linorder_min) oalist_tc\"", "lemma\n  \"sparse\\<^sub>0 [(X, 2::nat), (Z, 7)] - sparse\\<^sub>0 [(X, 2), (Z, 2)] = sparse\\<^sub>0 [(Z, 5)]\"", "lemma\n  \"lcs (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 7)]) (sparse\\<^sub>0 [(Y, 3), (Z, 2)]) = sparse\\<^sub>0 [(X, 2), (Y, 3), (Z, 7)]\"", "lemma\n  \"(sparse\\<^sub>0 [(X, 2::nat), (Z, 1)]) adds (sparse\\<^sub>0 [(X, 3), (Y, 2), (Z, 1)])\"", "lemma\n  \"lookup_pp (sparse\\<^sub>0 [(X, 2::nat), (Z, 3)]) X = 2\"", "lemma\n  \"deg_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3), (X, 1)]) = 6\"", "lemma\n  \"lex_comp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3)]) (sparse\\<^sub>0 [(X, 4)]) = Lt\"", "lemma\n  \"lex_comp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3)], 3::nat) (sparse\\<^sub>0 [(X, 4)], 2) = Lt\"", "lemma\n  \"lex_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3)]) (sparse\\<^sub>0 [(X, 4)])\"", "lemma\n  \"lex_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3)]) (sparse\\<^sub>0 [(X, 4)])\"", "lemma\n  \"\\<not> dlex_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3)]) (sparse\\<^sub>0 [(X, 4)])\"", "lemma\n  \"dlex_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 2)]) (sparse\\<^sub>0 [(X, 5)])\"", "lemma\n  \"\\<not> drlex_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 2)]) (sparse\\<^sub>0 [(X, 5)])\"", "lemmas [simp, code] = MP_oalist.rep_eq", "lemma keys_MP_oalist [code]: \"keys (MP_oalist xs) = set (map fst (fst (list_of_oalist_ntm xs)))\"", "lemma MP_oalist_empty [simp]: \"MP_oalist (OAlist_empty_ntm ko) = 0\"", "lemma zero_MP_oalist [code]: \"(0::('a::{linorder,nat_term} \\<Rightarrow>\\<^sub>0 'b::zero)) = MP_oalist (OAlist_empty_ntm nat_term_order_of_le)\"", "lemma is_zero_MP_oalist [code]: \"is_zero (MP_oalist xs) = List.null (fst (list_of_oalist_ntm xs))\"", "lemma plus_MP_oalist [code]: \"MP_oalist xs + MP_oalist ys = MP_oalist (OAlist_map2_val_neutr_ntm (\\<lambda>_. (+)) xs ys)\"", "lemma minus_MP_oalist [code]: \"MP_oalist xs - MP_oalist ys = MP_oalist (OAlist_map2_val_rneutr_ntm (\\<lambda>_. (-)) xs ys)\"", "lemma uminus_MP_oalist [code]: \"- MP_oalist xs = MP_oalist (OAlist_map_val_ntm (\\<lambda>_. uminus) xs)\"", "lemma equal_MP_oalist [code]: \"equal_class.equal (MP_oalist xs) (MP_oalist ys) = (OAlist_eq_ntm xs ys)\"", "lemma map_MP_oalist [code]: \"Poly_Mapping.map f (MP_oalist xs) = MP_oalist (OAlist_map_val_ntm (\\<lambda>_. f) xs)\"", "lemma range_MP_oalist [code]: \"Poly_Mapping.range (MP_oalist xs) = set (map snd (fst (list_of_oalist_ntm xs)))\"", "lemma if_poly_mapping_eq_iff:\n  \"(if x = y then a else b) = (if (\\<forall>i\\<in>keys x \\<union> keys y. lookup x i = lookup y i) then a else b)\"", "lemma keys_add_eq: \"keys (a + b) = keys a \\<union> keys b - {x \\<in> keys a \\<inter> keys b. lookup a x + lookup b x = 0}\"", "lemma list_of_oalist_shift_keys:\n  \"list_of_oalist_ntm (shift_map_keys t f xs) = (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, f (snd kv))) (list_of_oalist_ntm xs))\"", "lemma lookup_shift_map_keys_plus:\n  \"lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) = c * lookup (MP_oalist xs) u\" (is \"?l = ?r\")", "lemma keys_shift_map_keys_subset:\n  \"keys (MP_oalist (shift_map_keys t ((*) c) xs)) \\<subseteq> ((\\<oplus>) t) ` keys (MP_oalist xs)\" (is \"?l \\<subseteq> ?r\")", "lemma monom_mult_MP_oalist [code]:\n  \"monom_mult c t (MP_oalist xs) =\n    MP_oalist (if c = 0 then OAlist_empty_ntm (snd (list_of_oalist_ntm xs)) else shift_map_keys t ((*) c) xs)\"", "lemma mult_scalar_MP_oalist [code]:\n  \"(MP_oalist xs) \\<odot> (MP_oalist ys) =\n      (if is_zero (MP_oalist xs) then\n        MP_oalist (OAlist_empty_ntm (snd (list_of_oalist_ntm ys)))\n      else\n        let ct = OAlist_hd_ntm xs in\n        monom_mult (snd ct) (fst ct) (MP_oalist ys) + (MP_oalist (OAlist_tl_ntm xs)) \\<odot> (MP_oalist ys))\"", "lemma plus_monomial_less_MP_oalist [code]:\n  \"plus_monomial_less (MP_oalist xs) c u = MP_oalist (OAlist_update_by_fun_gr_ntm u (\\<lambda>c0. c0 + c) xs)\"", "lemma C\\<^sub>0_one: \"C\\<^sub>0 1 = 1\"", "lemma C\\<^sub>0_numeral: \"C\\<^sub>0 (numeral x) = numeral x\"", "lemma C\\<^sub>0_minus: \"C\\<^sub>0 (- x) = - C\\<^sub>0 x\"", "lemma C\\<^sub>0_zero: \"C\\<^sub>0 0 = 0\"", "lemma V\\<^sub>0_power: \"V\\<^sub>0 v ^ n = monomial 1 (single_pp v n)\"", "lemma single_MP_oalist [code]: \"Poly_Mapping.single k v = distr\\<^sub>0 nat_term_order_of_le [(k, v)]\"", "lemma one_MP_oalist [code]: \"1 = distr\\<^sub>0 nat_term_order_of_le [(0, 1)]\"", "lemma except_MP_oalist [code]: \"except (MP_oalist xs) S = MP_oalist (OAlist_filter_ntm (\\<lambda>kv. fst kv \\<notin> S) xs)\"", "lemma change_ord_MP_oalist [code]: \"change_ord to (MP_oalist xs) = MP_oalist (OAlist_reorder_ntm to xs)\"", "lemma foldl_assoc:\n  assumes \"\\<And>x y z. f (f x y) z = f x (f y z)\"\n  shows \"foldl f (f a b) xs = f a (foldl f b xs)\"", "lemma lt_MP_oalist [code]:\n  \"lt (MP_oalist xs) = (if is_zero (MP_oalist xs) then min_term else fst (OAlist_min_key_val_ntm cmp_term xs))\"", "lemma lc_MP_oalist [code]:\n  \"lc (MP_oalist xs) = (if is_zero (MP_oalist xs) then 0 else snd (OAlist_min_key_val_ntm cmp_term xs))\"", "lemma tail_MP_oalist [code]: \"tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)\"", "lemma comp_opt_p_MP_oalist [code]:\n  \"comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term (\\<lambda>_ x y. if x = y then Some Eq else if x = 0 then Some Lt else if y = 0 then Some Gt else None) xs ys\"", "lemma compute_ord_p [code]: \"ord_p p q = (let aux = comp_opt_p p q in aux = Some Lt \\<or> aux = Some Eq)\"", "lemma compute_ord_p_strict [code]: \"ord_strict_p p q = (comp_opt_p p q = Some Lt)\"", "lemma keys_to_list_MP_oalist [code]: \"keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs\"", "lemma term_powerprod_gd_term:\n  fixes pair_of_term :: \"'t::nat_term \\<Rightarrow> ('a::{graded_dickson_powerprod,nat_pp_compare} \\<times> 'k::{the_min,wellorder})\"\n  assumes \"term_powerprod pair_of_term term_of_pair\"\n    and \"\\<And>v. fst (rep_nat_term v) = rep_nat_pp (fst (pair_of_term v))\"\n    and \"\\<And>t. snd (rep_nat_term (term_of_pair (t, the_min))) = 0\"\n    and \"\\<And>v w. snd (pair_of_term v) \\<le> snd (pair_of_term w) \\<Longrightarrow> snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\"\n    and \"\\<And>s t k. term_of_pair (s + t, k) = splus (term_of_pair (s, k)) (term_of_pair (t, k))\"\n    and \"\\<And>t v. term_powerprod.splus pair_of_term term_of_pair t v = splus (term_of_pair (t, the_min)) v\"\n  shows \"gd_term pair_of_term term_of_pair\n        (\\<lambda>s t. le_of_nat_term_order cmp_term (term_of_pair (s, the_min)) (term_of_pair (t, the_min)))\n        (\\<lambda>s t. lt_of_nat_term_order cmp_term (term_of_pair (s, the_min)) (term_of_pair (t, the_min)))\n        (le_of_nat_term_order cmp_term)\n        (lt_of_nat_term_order cmp_term)\"", "lemma gd_term_to_pair_unit:\n  \"gd_term (to_pair_unit::'a::{nat_term_compare,nat_pp_term,graded_dickson_powerprod} \\<Rightarrow> _) fst\n        (\\<lambda>s t. le_of_nat_term_order cmp_term (fst (s, the_min)) (fst (t, the_min)))\n        (\\<lambda>s t. lt_of_nat_term_order cmp_term (fst (s, the_min)) (fst (t, the_min)))\n        (le_of_nat_term_order cmp_term)\n        (lt_of_nat_term_order cmp_term)\"", "lemma gd_term_id:\n  \"gd_term (\\<lambda>x::('a::{nat_term_compare,nat_pp_compare,nat_pp_term,graded_dickson_powerprod} \\<times> 'b::{nat,the_min}). x) (\\<lambda>x. x)\n        (\\<lambda>s t. le_of_nat_term_order cmp_term (s, the_min) (t, the_min))\n        (\\<lambda>s t. lt_of_nat_term_order cmp_term (s, the_min) (t, the_min))\n        (le_of_nat_term_order cmp_term)\n        (lt_of_nat_term_order cmp_term)\"", "lemma shift_map_keys_punit_MP_oalist [code abstract]:\n  \"list_of_oalist_ntm (shift_map_keys_punit t f xs) = map_raw (\\<lambda>(k, v). (t + k, f v)) (list_of_oalist_ntm xs)\"", "lemmas [code] = punit0.mult_scalar_MP_oalist[unfolded mult_scalar_punit_def punit_mult_scalar]\n                punit0.punit_min_term", "lemma ord_pp_punit_alt [code_unfold]: \"ord_pp_punit = le_of_nat_term_order\"", "lemma ord_pp_strict_punit_alt [code_unfold]: \"ord_pp_strict_punit = lt_of_nat_term_order\"", "lemma gd_powerprod_ord_pp_punit: \"gd_powerprod (ord_pp_punit cmp_term) (ord_pp_strict_punit cmp_term)\"", "lemma\n  \"ord_strict_p_punit DRLEX (X\\<^sup>2 * Z + 2 * Y ^ 3 * Z\\<^sup>2) (X\\<^sup>2 * Z\\<^sup>2 + 2 * Y ^ 3 * Z\\<^sup>2)\"", "lemma\n  \"tail_punit DLEX (X\\<^sup>2 * Z + 2 * Y ^ 3 * Z\\<^sup>2) = X\\<^sup>2 * Z\"", "lemma\n  \"lt_punit DRLEX (X\\<^sup>2 * Z + 2 * Y ^ 3 * Z\\<^sup>2) = sparse\\<^sub>0 [(1, 3), (2, 2)]\"", "lemma\n  \"lt_punit DRLEX (X + Y + Z) = sparse\\<^sub>0 [(2, 1)]\"", "lemma\n  \"keys (X\\<^sup>2 * Z ^ 3 + 2 * Y ^ 3 * Z\\<^sup>2) =\n    {sparse\\<^sub>0 [(0, 2), (2, 3)], sparse\\<^sub>0 [(1, 3), (2, 2)]}\"", "lemma\n  \"- 1 * X\\<^sup>2 * Z ^ 7 + - 2 * Y ^ 3 * Z\\<^sup>2 = - X\\<^sup>2 * Z ^ 7 + - 2 * Y ^ 3 * Z\\<^sup>2\"", "lemma\n  \"X\\<^sup>2 * Z ^ 7 + 2 * Y ^ 3 * Z\\<^sup>2 + X\\<^sup>2 * Z ^ 4 + - 2 * Y ^ 3 * Z\\<^sup>2 = X\\<^sup>2 * Z ^ 7 + X\\<^sup>2 * Z ^ 4\"", "lemma\n  \"X\\<^sup>2 * Z ^ 7 + 2 * Y ^ 3 * Z\\<^sup>2 - X\\<^sup>2 * Z ^ 4 + - 2 * Y ^ 3 * Z\\<^sup>2 =\n    X\\<^sup>2 * Z ^ 7 - X\\<^sup>2 * Z ^ 4\"", "lemma\n  \"lookup (X\\<^sup>2 * Z ^ 7 + 2 * Y ^ 3 * Z\\<^sup>2 + 2) (sparse\\<^sub>0 [(0, 2), (2, 7)]) = 1\"", "lemma\n  \"X\\<^sup>2 * Z ^ 7 + 2 * Y ^ 3 * Z\\<^sup>2 \\<noteq>\n   X\\<^sup>2 * Z ^ 4 + - 2 * Y ^ 3 * Z\\<^sup>2\"", "lemma\n  \"0 * X^2 * Z^7 + 0 * Y^3*Z\\<^sup>2 = 0\"", "lemma\n  \"monom_mult_punit 3 (sparse\\<^sub>0 [(1, 2::nat)]) (X\\<^sup>2 * Z + 2 * Y ^ 3 * Z\\<^sup>2) =\n    3 * Y\\<^sup>2 * Z * X\\<^sup>2 + 6 * Y ^ 5 * Z\\<^sup>2\"", "lemma\n  \"monomial (-4) (sparse\\<^sub>0 [(0, 2::nat)]) = - 4 * X\\<^sup>2\"", "lemma \"monomial (0::rat) (sparse\\<^sub>0 [(0::nat, 2::nat)]) = 0\"", "lemma\n  \"(X\\<^sup>2 * Z + 2 * Y ^ 3 * Z\\<^sup>2) * (X\\<^sup>2 * Z ^ 3 + - 2 * Y ^ 3 * Z\\<^sup>2) =\n    X ^ 4 * Z ^ 4 + - 2 * X\\<^sup>2 * Z ^ 3 * Y ^ 3 +\n - 4 * Y ^ 6 * Z ^ 4 + 2 * Y ^ 3 * Z ^ 5 * X\\<^sup>2\"", "lemmas [code_post] =\n  plus_mpoly.abs_eq[symmetric]\n  times_mpoly.abs_eq[symmetric]\n  one_mpoly_def[symmetric]\n  Var.abs_eq[symmetric]\n  Const.abs_eq[symmetric]"], "translations": [["", "lemma lookup_PP_oalist [simp, code]: \"lookup_pp (PP_oalist xs) = OAlist_tc_lookup xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup_pp (PP_oalist xs) = OAlist_tc_lookup xs", "unfolding PP_oalist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup_pp (pp_of_fun (OAlist_tc_lookup xs)) = OAlist_tc_lookup xs", "proof (rule lookup_pp_of_fun)"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {x. OAlist_tc_lookup xs x \\<noteq> (0::'b)}", "have \"{x. OAlist_tc_lookup xs x \\<noteq> 0} \\<subseteq> fst ` set (list_of_oalist_tc xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. OAlist_tc_lookup xs x \\<noteq> (0::'b)}\n    \\<subseteq> fst ` set (list_of_oalist_tc xs)", "proof (rule, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OAlist_tc_lookup xs x \\<noteq> (0::'b) \\<Longrightarrow>\n       x \\<in> fst ` set (list_of_oalist_tc xs)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OAlist_tc_lookup xs x \\<noteq> (0::'b) \\<Longrightarrow>\n       x \\<in> fst ` set (list_of_oalist_tc xs)", "assume \"OAlist_tc_lookup xs x \\<noteq> 0\""], ["proof (state)\nthis:\n  OAlist_tc_lookup xs x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       OAlist_tc_lookup xs x \\<noteq> (0::'b) \\<Longrightarrow>\n       x \\<in> fst ` set (list_of_oalist_tc xs)", "thus \"x \\<in> fst ` set (list_of_oalist_tc xs)\""], ["proof (prove)\nusing this:\n  OAlist_tc_lookup xs x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` set (list_of_oalist_tc xs)", "using in_OAlist_tc_sorted_domain_iff_lookup set_OAlist_tc_sorted_domain"], ["proof (prove)\nusing this:\n  OAlist_tc_lookup xs x \\<noteq> (0::'b)\n  (?k \\<in> set (OAlist_tc_sorted_domain ?xs)) =\n  (OAlist_tc_lookup ?xs ?k \\<noteq> (0::?'b))\n  set (OAlist_tc_sorted_domain ?xs) = fst ` set (list_of_oalist_tc ?xs)\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` set (list_of_oalist_tc xs)", "by blast"], ["proof (state)\nthis:\n  x \\<in> fst ` set (list_of_oalist_tc xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x. OAlist_tc_lookup xs x \\<noteq> (0::'b)}\n  \\<subseteq> fst ` set (list_of_oalist_tc xs)\n\ngoal (1 subgoal):\n 1. finite {x. OAlist_tc_lookup xs x \\<noteq> (0::'b)}", "also"], ["proof (state)\nthis:\n  {x. OAlist_tc_lookup xs x \\<noteq> (0::'b)}\n  \\<subseteq> fst ` set (list_of_oalist_tc xs)\n\ngoal (1 subgoal):\n 1. finite {x. OAlist_tc_lookup xs x \\<noteq> (0::'b)}", "have \"finite ...\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fst ` set (list_of_oalist_tc xs))", "by simp"], ["proof (state)\nthis:\n  finite (fst ` set (list_of_oalist_tc xs))\n\ngoal (1 subgoal):\n 1. finite {x. OAlist_tc_lookup xs x \\<noteq> (0::'b)}", "finally (finite_subset)"], ["proof (chain)\npicking this:\n  finite {x. OAlist_tc_lookup xs x \\<noteq> (0::'b)}", "show \"finite {x. OAlist_tc_lookup xs x \\<noteq> 0}\""], ["proof (prove)\nusing this:\n  finite {x. OAlist_tc_lookup xs x \\<noteq> (0::'b)}\n\ngoal (1 subgoal):\n 1. finite {x. OAlist_tc_lookup xs x \\<noteq> (0::'b)}", "."], ["proof (state)\nthis:\n  finite {x. OAlist_tc_lookup xs x \\<noteq> (0::'b)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma keys_PP_oalist [code]: \"keys_pp (PP_oalist xs) = set (OAlist_tc_sorted_domain xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys_pp (PP_oalist xs) = set (OAlist_tc_sorted_domain xs)", "by (rule set_eqI, simp add: keys_pp_iff in_OAlist_tc_sorted_domain_iff_lookup)"], ["", "lemma lex_comp_PP_oalist [code]:\n  \"lex_comp' (PP_oalist xs) (PP_oalist ys) =\n         the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)\"\n  for xs ys::\"('a::nat, 'b::nat) oalist_tc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "proof (cases \"lex_comp' (PP_oalist xs) (PP_oalist ys) = Eq\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) = Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)\n 2. lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "case True"], ["proof (state)\nthis:\n  lex_comp' (PP_oalist xs) (PP_oalist ys) = Eq\n\ngoal (2 subgoals):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) = Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)\n 2. lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "hence \"PP_oalist xs = PP_oalist ys\""], ["proof (prove)\nusing this:\n  lex_comp' (PP_oalist xs) (PP_oalist ys) = Eq\n\ngoal (1 subgoal):\n 1. PP_oalist xs = PP_oalist ys", "by (rule lex_comp'_EqD)"], ["proof (state)\nthis:\n  PP_oalist xs = PP_oalist ys\n\ngoal (2 subgoals):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) = Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)\n 2. lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "hence eq: \"OAlist_tc_lookup xs = OAlist_tc_lookup ys\""], ["proof (prove)\nusing this:\n  PP_oalist xs = PP_oalist ys\n\ngoal (1 subgoal):\n 1. OAlist_tc_lookup xs = OAlist_tc_lookup ys", "by (simp add: pp_eq_iff)"], ["proof (state)\nthis:\n  OAlist_tc_lookup xs = OAlist_tc_lookup ys\n\ngoal (2 subgoals):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) = Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)\n 2. lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "have \"OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys = Some Eq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys =\n    Some Eq", "by (rule OAlist_tc_lex_ord_EqI, simp add: eq)"], ["proof (state)\nthis:\n  OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys =\n  Some Eq\n\ngoal (2 subgoals):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) = Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)\n 2. lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "thus ?thesis"], ["proof (prove)\nusing this:\n  OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys =\n  Some Eq\n\ngoal (1 subgoal):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "by (simp add: True)"], ["proof (state)\nthis:\n  lex_comp' (PP_oalist xs) (PP_oalist ys) =\n  the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)\n\ngoal (1 subgoal):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "case False"], ["proof (state)\nthis:\n  lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq\n\ngoal (1 subgoal):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "then"], ["proof (chain)\npicking this:\n  lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq", "obtain x where 1: \"x \\<in> keys_pp (rep_nat_pp (PP_oalist xs)) \\<union> keys_pp (rep_nat_pp (PP_oalist ys))\"\n    and 2: \"comparator_of (lookup_pp (rep_nat_pp (PP_oalist xs)) x) (lookup_pp (rep_nat_pp (PP_oalist ys)) x) =\n          lex_comp' (PP_oalist xs) (PP_oalist ys)\"\n    and 3: \"\\<And>y. y < x \\<Longrightarrow> lookup_pp (rep_nat_pp (PP_oalist xs)) y = lookup_pp (rep_nat_pp (PP_oalist ys)) y\""], ["proof (prove)\nusing this:\n  lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> keys_pp (rep_nat_pp (PP_oalist xs)) \\<union>\n                         keys_pp (rep_nat_pp (PP_oalist ys));\n         comparator_of (lookup_pp (rep_nat_pp (PP_oalist xs)) x)\n          (lookup_pp (rep_nat_pp (PP_oalist ys)) x) =\n         lex_comp' (PP_oalist xs) (PP_oalist ys);\n         \\<And>y.\n            y < x \\<Longrightarrow>\n            lookup_pp (rep_nat_pp (PP_oalist xs)) y =\n            lookup_pp (rep_nat_pp (PP_oalist ys)) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lex_comp'_valE, blast)"], ["proof (state)\nthis:\n  x \\<in> keys_pp (rep_nat_pp (PP_oalist xs)) \\<union>\n          keys_pp (rep_nat_pp (PP_oalist ys))\n  comparator_of (lookup_pp (rep_nat_pp (PP_oalist xs)) x)\n   (lookup_pp (rep_nat_pp (PP_oalist ys)) x) =\n  lex_comp' (PP_oalist xs) (PP_oalist ys)\n  ?y < x \\<Longrightarrow>\n  lookup_pp (rep_nat_pp (PP_oalist xs)) ?y =\n  lookup_pp (rep_nat_pp (PP_oalist ys)) ?y\n\ngoal (1 subgoal):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "have \"OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys = Some (lex_comp' (PP_oalist xs) (PP_oalist ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys =\n    Some (lex_comp' (PP_oalist xs) (PP_oalist ys))", "proof (rule OAlist_tc_lex_ord_valI)"], ["proof (state)\ngoal (4 subgoals):\n 1. Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) \\<noteq> Some Eq\n 2. ?k \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n             fst ` set (list_of_oalist_tc ys)\n 3. Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) =\n    Some (comparator_of (OAlist_tc_lookup xs ?k) (OAlist_tc_lookup ys ?k))\n 4. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < ?k\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "from False"], ["proof (chain)\npicking this:\n  lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq", "show \"Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) \\<noteq> Some Eq\""], ["proof (prove)\nusing this:\n  lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq\n\ngoal (1 subgoal):\n 1. Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) \\<noteq> Some Eq", "by simp"], ["proof (state)\nthis:\n  Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) \\<noteq> Some Eq\n\ngoal (3 subgoals):\n 1. ?k \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n             fst ` set (list_of_oalist_tc ys)\n 2. Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) =\n    Some (comparator_of (OAlist_tc_lookup xs ?k) (OAlist_tc_lookup ys ?k))\n 3. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < ?k\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. ?k \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n             fst ` set (list_of_oalist_tc ys)\n 2. Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) =\n    Some (comparator_of (OAlist_tc_lookup xs ?k) (OAlist_tc_lookup ys ?k))\n 3. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < ?k\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "from 1"], ["proof (chain)\npicking this:\n  x \\<in> keys_pp (rep_nat_pp (PP_oalist xs)) \\<union>\n          keys_pp (rep_nat_pp (PP_oalist ys))", "have \"abs_nat x \\<in> abs_nat ` (keys_pp (rep_nat_pp (PP_oalist xs)) \\<union> keys_pp (rep_nat_pp (PP_oalist ys)))\""], ["proof (prove)\nusing this:\n  x \\<in> keys_pp (rep_nat_pp (PP_oalist xs)) \\<union>\n          keys_pp (rep_nat_pp (PP_oalist ys))\n\ngoal (1 subgoal):\n 1. abs_nat x\n    \\<in> abs_nat `\n          (keys_pp (rep_nat_pp (PP_oalist xs)) \\<union>\n           keys_pp (rep_nat_pp (PP_oalist ys)))", "by (rule imageI)"], ["proof (state)\nthis:\n  abs_nat x\n  \\<in> abs_nat `\n        (keys_pp (rep_nat_pp (PP_oalist xs)) \\<union>\n         keys_pp (rep_nat_pp (PP_oalist ys)))\n\ngoal (3 subgoals):\n 1. ?k \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n             fst ` set (list_of_oalist_tc ys)\n 2. Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) =\n    Some (comparator_of (OAlist_tc_lookup xs ?k) (OAlist_tc_lookup ys ?k))\n 3. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < ?k\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "also"], ["proof (state)\nthis:\n  abs_nat x\n  \\<in> abs_nat `\n        (keys_pp (rep_nat_pp (PP_oalist xs)) \\<union>\n         keys_pp (rep_nat_pp (PP_oalist ys)))\n\ngoal (3 subgoals):\n 1. ?k \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n             fst ` set (list_of_oalist_tc ys)\n 2. Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) =\n    Some (comparator_of (OAlist_tc_lookup xs ?k) (OAlist_tc_lookup ys ?k))\n 3. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < ?k\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "have \"... = fst ` set (list_of_oalist_tc xs) \\<union> fst ` set (list_of_oalist_tc ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_nat `\n    (keys_pp (rep_nat_pp (PP_oalist xs)) \\<union>\n     keys_pp (rep_nat_pp (PP_oalist ys))) =\n    fst ` set (list_of_oalist_tc xs) \\<union>\n    fst ` set (list_of_oalist_tc ys)", "by (simp add: keys_rep_nat_pp_pp keys_PP_oalist OAlist_tc_sorted_domain_def image_Un image_image)"], ["proof (state)\nthis:\n  abs_nat `\n  (keys_pp (rep_nat_pp (PP_oalist xs)) \\<union>\n   keys_pp (rep_nat_pp (PP_oalist ys))) =\n  fst ` set (list_of_oalist_tc xs) \\<union> fst ` set (list_of_oalist_tc ys)\n\ngoal (3 subgoals):\n 1. ?k \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n             fst ` set (list_of_oalist_tc ys)\n 2. Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) =\n    Some (comparator_of (OAlist_tc_lookup xs ?k) (OAlist_tc_lookup ys ?k))\n 3. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < ?k\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "finally"], ["proof (chain)\npicking this:\n  abs_nat x\n  \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n        fst ` set (list_of_oalist_tc ys)", "show \"abs_nat x \\<in> fst ` set (list_of_oalist_tc xs) \\<union> fst ` set (list_of_oalist_tc ys)\""], ["proof (prove)\nusing this:\n  abs_nat x\n  \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n        fst ` set (list_of_oalist_tc ys)\n\ngoal (1 subgoal):\n 1. abs_nat x\n    \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n          fst ` set (list_of_oalist_tc ys)", "."], ["proof (state)\nthis:\n  abs_nat x\n  \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n        fst ` set (list_of_oalist_tc ys)\n\ngoal (2 subgoals):\n 1. Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) =\n    Some\n     (comparator_of (OAlist_tc_lookup xs (abs_nat x))\n       (OAlist_tc_lookup ys (abs_nat x)))\n 2. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < abs_nat x\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) =\n    Some\n     (comparator_of (OAlist_tc_lookup xs (abs_nat x))\n       (OAlist_tc_lookup ys (abs_nat x)))\n 2. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < abs_nat x\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "show \"Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) =\n          Some (comparator_of (OAlist_tc_lookup xs (abs_nat x)) (OAlist_tc_lookup ys (abs_nat x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) =\n    Some\n     (comparator_of (OAlist_tc_lookup xs (abs_nat x))\n       (OAlist_tc_lookup ys (abs_nat x)))", "by (simp add: 2[symmetric] lookup_rep_nat_pp_pp)"], ["proof (state)\nthis:\n  Some (lex_comp' (PP_oalist xs) (PP_oalist ys)) =\n  Some\n   (comparator_of (OAlist_tc_lookup xs (abs_nat x))\n     (OAlist_tc_lookup ys (abs_nat x)))\n\ngoal (1 subgoal):\n 1. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < abs_nat x\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < abs_nat x\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "fix y::'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < abs_nat x\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "assume \"y < abs_nat x\""], ["proof (state)\nthis:\n  y < abs_nat x\n\ngoal (1 subgoal):\n 1. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < abs_nat x\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "hence \"rep_nat y < x\""], ["proof (prove)\nusing this:\n  y < abs_nat x\n\ngoal (1 subgoal):\n 1. rep_nat y < x", "by (metis abs_inverse ord_iff(2))"], ["proof (state)\nthis:\n  rep_nat y < x\n\ngoal (1 subgoal):\n 1. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < abs_nat x\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "hence \"lookup_pp (rep_nat_pp (PP_oalist xs)) (rep_nat y) = lookup_pp (rep_nat_pp (PP_oalist ys)) (rep_nat y)\""], ["proof (prove)\nusing this:\n  rep_nat y < x\n\ngoal (1 subgoal):\n 1. lookup_pp (rep_nat_pp (PP_oalist xs)) (rep_nat y) =\n    lookup_pp (rep_nat_pp (PP_oalist ys)) (rep_nat y)", "by (rule 3)"], ["proof (state)\nthis:\n  lookup_pp (rep_nat_pp (PP_oalist xs)) (rep_nat y) =\n  lookup_pp (rep_nat_pp (PP_oalist ys)) (rep_nat y)\n\ngoal (1 subgoal):\n 1. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < abs_nat x\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "hence \"OAlist_tc_lookup xs y = OAlist_tc_lookup ys y\""], ["proof (prove)\nusing this:\n  lookup_pp (rep_nat_pp (PP_oalist xs)) (rep_nat y) =\n  lookup_pp (rep_nat_pp (PP_oalist ys)) (rep_nat y)\n\ngoal (1 subgoal):\n 1. OAlist_tc_lookup xs y = OAlist_tc_lookup ys y", "by (auto simp: lookup_rep_nat_pp_pp elim: rep_inj)"], ["proof (state)\nthis:\n  OAlist_tc_lookup xs y = OAlist_tc_lookup ys y\n\ngoal (1 subgoal):\n 1. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                         fst ` set (list_of_oalist_tc ys);\n        k' < abs_nat x\\<rbrakk>\n       \\<Longrightarrow> Some\n                          (comparator_of (OAlist_tc_lookup xs k')\n                            (OAlist_tc_lookup ys k')) =\n                         Some Eq", "thus \"Some (comparator_of (OAlist_tc_lookup xs y) (OAlist_tc_lookup ys y)) = Some Eq\""], ["proof (prove)\nusing this:\n  OAlist_tc_lookup xs y = OAlist_tc_lookup ys y\n\ngoal (1 subgoal):\n 1. Some (comparator_of (OAlist_tc_lookup xs y) (OAlist_tc_lookup ys y)) =\n    Some Eq", "by simp"], ["proof (state)\nthis:\n  Some (comparator_of (OAlist_tc_lookup xs y) (OAlist_tc_lookup ys y)) =\n  Some Eq\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys =\n  Some (lex_comp' (PP_oalist xs) (PP_oalist ys))\n\ngoal (1 subgoal):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) \\<noteq> Eq \\<Longrightarrow>\n    lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "thus ?thesis"], ["proof (prove)\nusing this:\n  OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys =\n  Some (lex_comp' (PP_oalist xs) (PP_oalist ys))\n\ngoal (1 subgoal):\n 1. lex_comp' (PP_oalist xs) (PP_oalist ys) =\n    the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)", "by simp"], ["proof (state)\nthis:\n  lex_comp' (PP_oalist xs) (PP_oalist ys) =\n  the (OAlist_tc_lex_ord (\\<lambda>_ x y. Some (comparator_of x y)) xs ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma zero_PP_oalist [code]: \"(0::('a::linorder, 'b::zero) pp) = PP_oalist OAlist_tc_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = PP_oalist OAlist_tc_empty", "by (rule pp_eqI, simp add: lookup_OAlist_tc_empty)"], ["", "lemma plus_PP_oalist [code]:\n  \"PP_oalist xs + PP_oalist ys = PP_oalist (OAlist_tc_map2_val_neutr (\\<lambda>_. (+)) xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PP_oalist xs + PP_oalist ys =\n    PP_oalist (OAlist_tc_map2_val_neutr (\\<lambda>_. (+)) xs ys)", "by (rule pp_eqI, simp add: lookup_plus_pp, rule lookup_OAlist_tc_map2_val_neutr[symmetric], simp_all)"], ["", "lemma minus_PP_oalist [code]:\n  \"PP_oalist xs - PP_oalist ys = PP_oalist (OAlist_tc_map2_val_rneutr (\\<lambda>_. (-)) xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PP_oalist xs - PP_oalist ys =\n    PP_oalist (OAlist_tc_map2_val_rneutr (\\<lambda>_. (-)) xs ys)", "by (rule pp_eqI, simp add: lookup_minus_pp, rule lookup_OAlist_tc_map2_val_rneutr[symmetric], simp)"], ["", "lemma equal_PP_oalist [code]: \"equal_class.equal (PP_oalist xs) (PP_oalist ys) = (xs = ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_class.equal (PP_oalist xs) (PP_oalist ys) = (xs = ys)", "by (simp add: equal_eq pp_eq_iff, auto elim: OAlist_tc_lookup_inj)"], ["", "lemma lcs_PP_oalist [code]:\n  \"lcs (PP_oalist xs) (PP_oalist ys) = PP_oalist (OAlist_tc_map2_val_neutr (\\<lambda>_. max) xs ys)\"\n  for xs ys :: \"('a::linorder, 'b::add_linorder_min) oalist_tc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lcs (PP_oalist xs) (PP_oalist ys) =\n    PP_oalist (OAlist_tc_map2_val_neutr (\\<lambda>_. max) xs ys)", "by (rule pp_eqI, simp add: lookup_lcs_pp, rule lookup_OAlist_tc_map2_val_neutr[symmetric], simp_all add: max_def)"], ["", "lemma deg_pp_PP_oalist [code]: \"deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))", "have \"irreflp ((<)::_::linorder \\<Rightarrow> _)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflp (<)", "by (rule irreflpI, simp)"], ["proof (state)\nthis:\n  irreflp (<)\n\ngoal (1 subgoal):\n 1. deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))", "have \"deg_pp (PP_oalist xs) = sum (OAlist_tc_lookup xs) (set (OAlist_tc_sorted_domain xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deg_pp (PP_oalist xs) =\n    sum (OAlist_tc_lookup xs) (set (OAlist_tc_sorted_domain xs))", "by (simp add: deg_pp_alt keys_PP_oalist)"], ["proof (state)\nthis:\n  deg_pp (PP_oalist xs) =\n  sum (OAlist_tc_lookup xs) (set (OAlist_tc_sorted_domain xs))\n\ngoal (1 subgoal):\n 1. deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))", "also"], ["proof (state)\nthis:\n  deg_pp (PP_oalist xs) =\n  sum (OAlist_tc_lookup xs) (set (OAlist_tc_sorted_domain xs))\n\ngoal (1 subgoal):\n 1. deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))", "have \"... = sum_list (map (OAlist_tc_lookup xs) (OAlist_tc_sorted_domain xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (OAlist_tc_lookup xs) (set (OAlist_tc_sorted_domain xs)) =\n    sum_list (map (OAlist_tc_lookup xs) (OAlist_tc_sorted_domain xs))", "by (rule sum.distinct_set_conv_list, rule distinct_sorted_wrt_irrefl,\n        fact, fact transp_less, fact sorted_OAlist_tc_sorted_domain)"], ["proof (state)\nthis:\n  sum (OAlist_tc_lookup xs) (set (OAlist_tc_sorted_domain xs)) =\n  sum_list (map (OAlist_tc_lookup xs) (OAlist_tc_sorted_domain xs))\n\ngoal (1 subgoal):\n 1. deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))", "also"], ["proof (state)\nthis:\n  sum (OAlist_tc_lookup xs) (set (OAlist_tc_sorted_domain xs)) =\n  sum_list (map (OAlist_tc_lookup xs) (OAlist_tc_sorted_domain xs))\n\ngoal (1 subgoal):\n 1. deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))", "have \"... = sum_list (map snd (list_of_oalist_tc xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map (OAlist_tc_lookup xs) (OAlist_tc_sorted_domain xs)) =\n    sum_list (map snd (list_of_oalist_tc xs))", "by (rule arg_cong[where f=sum_list], simp add: OAlist_tc_sorted_domain_def OAlist_tc_lookup_eq_valueI)"], ["proof (state)\nthis:\n  sum_list (map (OAlist_tc_lookup xs) (OAlist_tc_sorted_domain xs)) =\n  sum_list (map snd (list_of_oalist_tc xs))\n\ngoal (1 subgoal):\n 1. deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))", "finally"], ["proof (chain)\npicking this:\n  deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))", "show ?thesis"], ["proof (prove)\nusing this:\n  deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))\n\ngoal (1 subgoal):\n 1. deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))", "."], ["proof (state)\nthis:\n  deg_pp (PP_oalist xs) = sum_list (map snd (list_of_oalist_tc xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma single_PP_oalist [code]: \"single_pp x e = PP_oalist (oalist_tc_of_list [(x, e)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_pp x e = PP_oalist (oalist_tc_of_list [(x, e)])", "by (rule pp_eqI, simp add: lookup_single_pp OAlist_tc_lookup_single)"], ["", "definition adds_pp_add_linorder :: \"('b, 'a::add_linorder) pp \\<Rightarrow> _ \\<Rightarrow> bool\"\n  where [code_abbrev]: \"adds_pp_add_linorder = (adds)\""], ["", "lemma adds_pp_PP_oalist [code]:\n  \"adds_pp_add_linorder (PP_oalist xs) (PP_oalist ys) = OAlist_tc_prod_ord (\\<lambda>_. less_eq) xs ys\"\n  for xs ys::\"('a::linorder, 'b::add_linorder_min) oalist_tc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adds_pp_add_linorder (PP_oalist xs) (PP_oalist ys) =\n    OAlist_tc_prod_ord (\\<lambda>_. (\\<le>)) xs ys", "proof (simp add: adds_pp_add_linorder_def adds_pp_iff adds_poly_mapping lookup_pp.rep_eq[symmetric] OAlist_tc_prod_ord_alt le_fun_def,\n      intro iffI allI ballI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>x.\n                   OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x;\n        k \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                fst ` set (list_of_oalist_tc ys)\\<rbrakk>\n       \\<Longrightarrow> OAlist_tc_lookup xs k \\<le> OAlist_tc_lookup ys k\n 2. \\<And>x.\n       \\<forall>k\\<in>fst ` set (list_of_oalist_tc xs) \\<union>\n                      fst ` set (list_of_oalist_tc ys).\n          OAlist_tc_lookup xs k\n          \\<le> OAlist_tc_lookup ys k \\<Longrightarrow>\n       OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>x.\n                   OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x;\n        k \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                fst ` set (list_of_oalist_tc ys)\\<rbrakk>\n       \\<Longrightarrow> OAlist_tc_lookup xs k \\<le> OAlist_tc_lookup ys k\n 2. \\<And>x.\n       \\<forall>k\\<in>fst ` set (list_of_oalist_tc xs) \\<union>\n                      fst ` set (list_of_oalist_tc ys).\n          OAlist_tc_lookup xs k\n          \\<le> OAlist_tc_lookup ys k \\<Longrightarrow>\n       OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "assume \"\\<forall>x. OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x\""], ["proof (state)\nthis:\n  \\<forall>x. OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>x.\n                   OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x;\n        k \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n                fst ` set (list_of_oalist_tc ys)\\<rbrakk>\n       \\<Longrightarrow> OAlist_tc_lookup xs k \\<le> OAlist_tc_lookup ys k\n 2. \\<And>x.\n       \\<forall>k\\<in>fst ` set (list_of_oalist_tc xs) \\<union>\n                      fst ` set (list_of_oalist_tc ys).\n          OAlist_tc_lookup xs k\n          \\<le> OAlist_tc_lookup ys k \\<Longrightarrow>\n       OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "thus \"OAlist_tc_lookup xs k \\<le> OAlist_tc_lookup ys k\""], ["proof (prove)\nusing this:\n  \\<forall>x. OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x\n\ngoal (1 subgoal):\n 1. OAlist_tc_lookup xs k \\<le> OAlist_tc_lookup ys k", "by blast"], ["proof (state)\nthis:\n  OAlist_tc_lookup xs k \\<le> OAlist_tc_lookup ys k\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>k\\<in>fst ` set (list_of_oalist_tc xs) \\<union>\n                      fst ` set (list_of_oalist_tc ys).\n          OAlist_tc_lookup xs k\n          \\<le> OAlist_tc_lookup ys k \\<Longrightarrow>\n       OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>k\\<in>fst ` set (list_of_oalist_tc xs) \\<union>\n                      fst ` set (list_of_oalist_tc ys).\n          OAlist_tc_lookup xs k\n          \\<le> OAlist_tc_lookup ys k \\<Longrightarrow>\n       OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>k\\<in>fst ` set (list_of_oalist_tc xs) \\<union>\n                      fst ` set (list_of_oalist_tc ys).\n          OAlist_tc_lookup xs k\n          \\<le> OAlist_tc_lookup ys k \\<Longrightarrow>\n       OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "assume *: \"\\<forall>k\\<in>fst ` set (list_of_oalist_tc xs) \\<union> fst ` set (list_of_oalist_tc ys).\n              OAlist_tc_lookup xs k \\<le> OAlist_tc_lookup ys k\""], ["proof (state)\nthis:\n  \\<forall>k\\<in>fst ` set (list_of_oalist_tc xs) \\<union>\n                 fst ` set (list_of_oalist_tc ys).\n     OAlist_tc_lookup xs k \\<le> OAlist_tc_lookup ys k\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>k\\<in>fst ` set (list_of_oalist_tc xs) \\<union>\n                      fst ` set (list_of_oalist_tc ys).\n          OAlist_tc_lookup xs k\n          \\<le> OAlist_tc_lookup ys k \\<Longrightarrow>\n       OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "show \"OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "proof (cases \"x \\<in> fst ` set (list_of_oalist_tc xs) \\<union> fst ` set (list_of_oalist_tc ys)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n            fst ` set (list_of_oalist_tc ys) \\<Longrightarrow>\n    OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x\n 2. x \\<notin> fst ` set (list_of_oalist_tc xs) \\<union>\n               fst ` set (list_of_oalist_tc ys) \\<Longrightarrow>\n    OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "case True"], ["proof (state)\nthis:\n  x \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n          fst ` set (list_of_oalist_tc ys)\n\ngoal (2 subgoals):\n 1. x \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n            fst ` set (list_of_oalist_tc ys) \\<Longrightarrow>\n    OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x\n 2. x \\<notin> fst ` set (list_of_oalist_tc xs) \\<union>\n               fst ` set (list_of_oalist_tc ys) \\<Longrightarrow>\n    OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "with *"], ["proof (chain)\npicking this:\n  \\<forall>k\\<in>fst ` set (list_of_oalist_tc xs) \\<union>\n                 fst ` set (list_of_oalist_tc ys).\n     OAlist_tc_lookup xs k \\<le> OAlist_tc_lookup ys k\n  x \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n          fst ` set (list_of_oalist_tc ys)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>k\\<in>fst ` set (list_of_oalist_tc xs) \\<union>\n                 fst ` set (list_of_oalist_tc ys).\n     OAlist_tc_lookup xs k \\<le> OAlist_tc_lookup ys k\n  x \\<in> fst ` set (list_of_oalist_tc xs) \\<union>\n          fst ` set (list_of_oalist_tc ys)\n\ngoal (1 subgoal):\n 1. OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", ".."], ["proof (state)\nthis:\n  OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x\n\ngoal (1 subgoal):\n 1. x \\<notin> fst ` set (list_of_oalist_tc xs) \\<union>\n               fst ` set (list_of_oalist_tc ys) \\<Longrightarrow>\n    OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> fst ` set (list_of_oalist_tc xs) \\<union>\n               fst ` set (list_of_oalist_tc ys) \\<Longrightarrow>\n    OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "case False"], ["proof (state)\nthis:\n  x \\<notin> fst ` set (list_of_oalist_tc xs) \\<union>\n             fst ` set (list_of_oalist_tc ys)\n\ngoal (1 subgoal):\n 1. x \\<notin> fst ` set (list_of_oalist_tc xs) \\<union>\n               fst ` set (list_of_oalist_tc ys) \\<Longrightarrow>\n    OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "hence \"x \\<notin> set (OAlist_tc_sorted_domain xs)\" and \"x \\<notin> set (OAlist_tc_sorted_domain ys)\""], ["proof (prove)\nusing this:\n  x \\<notin> fst ` set (list_of_oalist_tc xs) \\<union>\n             fst ` set (list_of_oalist_tc ys)\n\ngoal (1 subgoal):\n 1. x \\<notin> set (OAlist_tc_sorted_domain xs) &&&\n    x \\<notin> set (OAlist_tc_sorted_domain ys)", "by (simp_all add: set_OAlist_tc_sorted_domain)"], ["proof (state)\nthis:\n  x \\<notin> set (OAlist_tc_sorted_domain xs)\n  x \\<notin> set (OAlist_tc_sorted_domain ys)\n\ngoal (1 subgoal):\n 1. x \\<notin> fst ` set (list_of_oalist_tc xs) \\<union>\n               fst ` set (list_of_oalist_tc ys) \\<Longrightarrow>\n    OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> set (OAlist_tc_sorted_domain xs)\n  x \\<notin> set (OAlist_tc_sorted_domain ys)\n\ngoal (1 subgoal):\n 1. OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x", "by (simp add: in_OAlist_tc_sorted_domain_iff_lookup)"], ["proof (state)\nthis:\n  OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  OAlist_tc_lookup xs x \\<le> OAlist_tc_lookup ys x\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Constructor\\<close>"], ["", "definition \"sparse\\<^sub>0 xs = PP_oalist (oalist_tc_of_list xs)\" \\<comment>\\<open>sparse representation\\<close>"], ["", "subsubsection \\<open>Computations\\<close>"], ["", "experiment begin"], ["", "abbreviation \"X \\<equiv> 0::nat\""], ["", "abbreviation \"Y \\<equiv> 1::nat\""], ["", "abbreviation \"Z \\<equiv> 2::nat\""], ["", "value [code] \"sparse\\<^sub>0 [(X, 2::nat), (Z, 7)]\""], ["", "lemma\n  \"sparse\\<^sub>0 [(X, 2::nat), (Z, 7)] - sparse\\<^sub>0 [(X, 2), (Z, 2)] = sparse\\<^sub>0 [(Z, 5)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\\<^sub>0 [(0, 2), (2, 7)] - sparse\\<^sub>0 [(0, 2), (2, 2)] =\n    sparse\\<^sub>0 [(2, 5)]", "by eval"], ["", "lemma\n  \"lcs (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 7)]) (sparse\\<^sub>0 [(Y, 3), (Z, 2)]) = sparse\\<^sub>0 [(X, 2), (Y, 3), (Z, 7)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lcs (sparse\\<^sub>0 [(0, 2), (1, 1), (2, 7)])\n     (sparse\\<^sub>0 [(1, 3), (2, 2)]) =\n    sparse\\<^sub>0 [(0, 2), (1, 3), (2, 7)]", "by eval"], ["", "lemma\n  \"(sparse\\<^sub>0 [(X, 2::nat), (Z, 1)]) adds (sparse\\<^sub>0 [(X, 3), (Y, 2), (Z, 1)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\\<^sub>0 [(0, 2), (2, 1)] adds\n    sparse\\<^sub>0 [(0, 3), (1, 2), (2, 1)]", "by eval"], ["", "lemma\n  \"lookup_pp (sparse\\<^sub>0 [(X, 2::nat), (Z, 3)]) X = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup_pp (sparse\\<^sub>0 [(0, 2), (2, 3)]) 0 = 2", "by eval"], ["", "lemma\n  \"deg_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3), (X, 1)]) = 6\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deg_pp (sparse\\<^sub>0 [(0, 2), (1, 1), (2, 3), (0, 1)]) = 6", "by eval"], ["", "lemma\n  \"lex_comp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3)]) (sparse\\<^sub>0 [(X, 4)]) = Lt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_comp (sparse\\<^sub>0 [(0, 2), (1, 1), (2, 3)])\n     (sparse\\<^sub>0 [(0, 4)]) =\n    Lt", "by eval"], ["", "lemma\n  \"lex_comp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3)], 3::nat) (sparse\\<^sub>0 [(X, 4)], 2) = Lt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_comp (sparse\\<^sub>0 [(0, 2), (1, 1), (2, 3)], 3)\n     (sparse\\<^sub>0 [(0, 4)], 2) =\n    Lt", "by eval"], ["", "lemma\n  \"lex_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3)]) (sparse\\<^sub>0 [(X, 4)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_pp (sparse\\<^sub>0 [(0, 2), (1, 1), (2, 3)])\n     (sparse\\<^sub>0 [(0, 4)])", "by eval"], ["", "lemma\n  \"lex_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3)]) (sparse\\<^sub>0 [(X, 4)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_pp (sparse\\<^sub>0 [(0, 2), (1, 1), (2, 3)])\n     (sparse\\<^sub>0 [(0, 4)])", "by eval"], ["", "lemma\n  \"\\<not> dlex_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 3)]) (sparse\\<^sub>0 [(X, 4)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> dlex_pp (sparse\\<^sub>0 [(0, 2), (1, 1), (2, 3)])\n            (sparse\\<^sub>0 [(0, 4)])", "by eval"], ["", "lemma\n  \"dlex_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 2)]) (sparse\\<^sub>0 [(X, 5)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dlex_pp (sparse\\<^sub>0 [(0, 2), (1, 1), (2, 2)])\n     (sparse\\<^sub>0 [(0, 5)])", "by eval"], ["", "lemma\n  \"\\<not> drlex_pp (sparse\\<^sub>0 [(X, 2::nat), (Y, 1), (Z, 2)]) (sparse\\<^sub>0 [(X, 5)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> drlex_pp (sparse\\<^sub>0 [(0, 2), (1, 1), (2, 2)])\n            (sparse\\<^sub>0 [(0, 5)])", "by eval"], ["", "end"], ["", "subsection \\<open>\\<open>MP_oalist\\<close>\\<close>"], ["", "lift_definition MP_oalist :: \"('a::nat_term, 'b::zero) oalist_ntm \\<Rightarrow> 'a \\<Rightarrow>\\<^sub>0 'b\"\n  is OAlist_lookup_ntm"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>oalist_ntm.\n       finite {x. OAlist_lookup_ntm oalist_ntm x \\<noteq> (0::'b)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>oalist_ntm.\n       finite {x. OAlist_lookup_ntm oalist_ntm x \\<noteq> (0::'b)}", "fix xs :: \"('a, 'b) oalist_ntm\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>oalist_ntm.\n       finite {x. OAlist_lookup_ntm oalist_ntm x \\<noteq> (0::'b)}", "have \"{x. OAlist_lookup_ntm xs x \\<noteq> 0} \\<subseteq> fst ` set (fst (list_of_oalist_ntm xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. OAlist_lookup_ntm xs x \\<noteq> (0::'b)}\n    \\<subseteq> fst ` set (fst (list_of_oalist_ntm xs))", "proof (rule, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OAlist_lookup_ntm xs x \\<noteq> (0::'b) \\<Longrightarrow>\n       x \\<in> fst ` set (fst (list_of_oalist_ntm xs))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OAlist_lookup_ntm xs x \\<noteq> (0::'b) \\<Longrightarrow>\n       x \\<in> fst ` set (fst (list_of_oalist_ntm xs))", "assume \"OAlist_lookup_ntm xs x \\<noteq> 0\""], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       OAlist_lookup_ntm xs x \\<noteq> (0::'b) \\<Longrightarrow>\n       x \\<in> fst ` set (fst (list_of_oalist_ntm xs))", "thus \"x \\<in> fst ` set (fst (list_of_oalist_ntm xs))\""], ["proof (prove)\nusing this:\n  OAlist_lookup_ntm xs x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` set (fst (list_of_oalist_ntm xs))", "using oa_ntm.in_sorted_domain_iff_lookup oa_ntm.set_sorted_domain"], ["proof (prove)\nusing this:\n  OAlist_lookup_ntm xs x \\<noteq> (0::'b)\n  (?k \\<in> set (OAlist_sorted_domain_ntm ?ko ?xs)) =\n  (OAlist_lookup_ntm ?xs ?k \\<noteq> (0::?'b))\n  set (OAlist_sorted_domain_ntm ?ko ?xs) =\n  fst ` set (fst (list_of_oalist_ntm ?xs))\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` set (fst (list_of_oalist_ntm xs))", "by blast"], ["proof (state)\nthis:\n  x \\<in> fst ` set (fst (list_of_oalist_ntm xs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x. OAlist_lookup_ntm xs x \\<noteq> (0::'b)}\n  \\<subseteq> fst ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. \\<And>oalist_ntm.\n       finite {x. OAlist_lookup_ntm oalist_ntm x \\<noteq> (0::'b)}", "also"], ["proof (state)\nthis:\n  {x. OAlist_lookup_ntm xs x \\<noteq> (0::'b)}\n  \\<subseteq> fst ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. \\<And>oalist_ntm.\n       finite {x. OAlist_lookup_ntm oalist_ntm x \\<noteq> (0::'b)}", "have \"finite ...\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fst ` set (fst (list_of_oalist_ntm xs)))", "by simp"], ["proof (state)\nthis:\n  finite (fst ` set (fst (list_of_oalist_ntm xs)))\n\ngoal (1 subgoal):\n 1. \\<And>oalist_ntm.\n       finite {x. OAlist_lookup_ntm oalist_ntm x \\<noteq> (0::'b)}", "finally (finite_subset)"], ["proof (chain)\npicking this:\n  finite {x. OAlist_lookup_ntm xs x \\<noteq> (0::'b)}", "show \"finite {x. OAlist_lookup_ntm xs x \\<noteq> 0}\""], ["proof (prove)\nusing this:\n  finite {x. OAlist_lookup_ntm xs x \\<noteq> (0::'b)}\n\ngoal (1 subgoal):\n 1. finite {x. OAlist_lookup_ntm xs x \\<noteq> (0::'b)}", "."], ["proof (state)\nthis:\n  finite {x. OAlist_lookup_ntm xs x \\<noteq> (0::'b)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [simp, code] = MP_oalist.rep_eq"], ["", "code_datatype MP_oalist"], ["", "lemma keys_MP_oalist [code]: \"keys (MP_oalist xs) = set (map fst (fst (list_of_oalist_ntm xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (MP_oalist xs) = set (map fst (fst (list_of_oalist_ntm xs)))", "by (rule set_eqI, simp add: in_keys_iff oa_ntm.in_sorted_domain_iff_lookup[simplified oa_ntm.set_sorted_domain])"], ["", "lemma MP_oalist_empty [simp]: \"MP_oalist (OAlist_empty_ntm ko) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MP_oalist (OAlist_empty_ntm ko) = 0", "by (rule poly_mapping_eqI, simp add: oa_ntm.lookup_empty)"], ["", "lemma zero_MP_oalist [code]: \"(0::('a::{linorder,nat_term} \\<Rightarrow>\\<^sub>0 'b::zero)) = MP_oalist (OAlist_empty_ntm nat_term_order_of_le)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = MP_oalist (OAlist_empty_ntm nat_term_order_of_le)", "by simp"], ["", "definition is_zero :: \"('a \\<Rightarrow>\\<^sub>0 'b::zero) \\<Rightarrow> bool\"\n  where [code_abbrev]: \"is_zero p \\<longleftrightarrow> (p = 0)\""], ["", "lemma is_zero_MP_oalist [code]: \"is_zero (MP_oalist xs) = List.null (fst (list_of_oalist_ntm xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero (MP_oalist xs) = List.null (fst (list_of_oalist_ntm xs))", "unfolding is_zero_def List.null_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (MP_oalist xs = 0) = (fst (list_of_oalist_ntm xs) = [])", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. MP_oalist xs = 0 \\<Longrightarrow> fst (list_of_oalist_ntm xs) = []\n 2. fst (list_of_oalist_ntm xs) = [] \\<Longrightarrow> MP_oalist xs = 0", "assume \"MP_oalist xs = 0\""], ["proof (state)\nthis:\n  MP_oalist xs = 0\n\ngoal (2 subgoals):\n 1. MP_oalist xs = 0 \\<Longrightarrow> fst (list_of_oalist_ntm xs) = []\n 2. fst (list_of_oalist_ntm xs) = [] \\<Longrightarrow> MP_oalist xs = 0", "hence \"OAlist_lookup_ntm xs k = 0\" for k"], ["proof (prove)\nusing this:\n  MP_oalist xs = 0\n\ngoal (1 subgoal):\n 1. OAlist_lookup_ntm xs k = (0::'b)", "by (simp add: poly_mapping_eq_iff)"], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs ?k = (0::'b)\n\ngoal (2 subgoals):\n 1. MP_oalist xs = 0 \\<Longrightarrow> fst (list_of_oalist_ntm xs) = []\n 2. fst (list_of_oalist_ntm xs) = [] \\<Longrightarrow> MP_oalist xs = 0", "thus \"fst (list_of_oalist_ntm xs) = []\""], ["proof (prove)\nusing this:\n  OAlist_lookup_ntm xs ?k = (0::'b)\n\ngoal (1 subgoal):\n 1. fst (list_of_oalist_ntm xs) = []", "by (metis image_eqI ko_ntm.min_key_val_raw_in oa_ntm.in_sorted_domain_iff_lookup oa_ntm.set_sorted_domain)"], ["proof (state)\nthis:\n  fst (list_of_oalist_ntm xs) = []\n\ngoal (1 subgoal):\n 1. fst (list_of_oalist_ntm xs) = [] \\<Longrightarrow> MP_oalist xs = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fst (list_of_oalist_ntm xs) = [] \\<Longrightarrow> MP_oalist xs = 0", "assume \"fst (list_of_oalist_ntm xs) = []\""], ["proof (state)\nthis:\n  fst (list_of_oalist_ntm xs) = []\n\ngoal (1 subgoal):\n 1. fst (list_of_oalist_ntm xs) = [] \\<Longrightarrow> MP_oalist xs = 0", "hence \"OAlist_lookup_ntm xs k = 0\" for k"], ["proof (prove)\nusing this:\n  fst (list_of_oalist_ntm xs) = []\n\ngoal (1 subgoal):\n 1. OAlist_lookup_ntm xs k = (0::'b)", "by (metis oa_ntm.list_of_oalist_empty oa_ntm.lookup_empty oalist_ntm_eqI surjective_pairing)"], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs ?k = (0::'b)\n\ngoal (1 subgoal):\n 1. fst (list_of_oalist_ntm xs) = [] \\<Longrightarrow> MP_oalist xs = 0", "thus \"MP_oalist xs = 0\""], ["proof (prove)\nusing this:\n  OAlist_lookup_ntm xs ?k = (0::'b)\n\ngoal (1 subgoal):\n 1. MP_oalist xs = 0", "by (simp add: poly_mapping_eq_iff ext)"], ["proof (state)\nthis:\n  MP_oalist xs = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma plus_MP_oalist [code]: \"MP_oalist xs + MP_oalist ys = MP_oalist (OAlist_map2_val_neutr_ntm (\\<lambda>_. (+)) xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MP_oalist xs + MP_oalist ys =\n    MP_oalist (OAlist_map2_val_neutr_ntm (\\<lambda>_. (+)) xs ys)", "by (rule poly_mapping_eqI, simp add: lookup_plus_fun, rule oa_ntm.lookup_map2_val_neutr[symmetric], simp_all)"], ["", "lemma minus_MP_oalist [code]: \"MP_oalist xs - MP_oalist ys = MP_oalist (OAlist_map2_val_rneutr_ntm (\\<lambda>_. (-)) xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MP_oalist xs - MP_oalist ys =\n    MP_oalist (OAlist_map2_val_rneutr_ntm (\\<lambda>_. (-)) xs ys)", "by (rule poly_mapping_eqI, simp add: lookup_minus_fun, rule oa_ntm.lookup_map2_val_rneutr[symmetric], simp)"], ["", "lemma uminus_MP_oalist [code]: \"- MP_oalist xs = MP_oalist (OAlist_map_val_ntm (\\<lambda>_. uminus) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - MP_oalist xs = MP_oalist (OAlist_map_val_ntm (\\<lambda>_. uminus) xs)", "by (rule poly_mapping_eqI, simp, rule oa_ntm.lookup_map_val[symmetric], simp)"], ["", "lemma equal_MP_oalist [code]: \"equal_class.equal (MP_oalist xs) (MP_oalist ys) = (OAlist_eq_ntm xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_class.equal (MP_oalist xs) (MP_oalist ys) = OAlist_eq_ntm xs ys", "by (simp add: oa_ntm.oalist_eq_alt equal_eq poly_mapping_eq_iff)"], ["", "lemma map_MP_oalist [code]: \"Poly_Mapping.map f (MP_oalist xs) = MP_oalist (OAlist_map_val_ntm (\\<lambda>_. f) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Poly_Mapping.map f (MP_oalist xs) =\n    MP_oalist (OAlist_map_val_ntm (\\<lambda>_. f) xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Poly_Mapping.map f (MP_oalist xs) =\n    MP_oalist (OAlist_map_val_ntm (\\<lambda>_. f) xs)", "have eq: \"OAlist_map_val_ntm (\\<lambda>_. f) xs = OAlist_map_val_ntm (\\<lambda>_ c. f c when c \\<noteq> 0) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OAlist_map_val_ntm (\\<lambda>_. f) xs =\n    OAlist_map_val_ntm (\\<lambda>_ c. f c when c \\<noteq> (0::'c)) xs", "proof (rule oa_ntm.map_val_cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k v.\n       (k, v) \\<in> set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       f v = (f v when v \\<noteq> (0::'c))", "fix t c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k v.\n       (k, v) \\<in> set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       f v = (f v when v \\<noteq> (0::'c))", "assume *: \"(t, c) \\<in> set (fst (list_of_oalist_ntm xs))\""], ["proof (state)\nthis:\n  (t, c) \\<in> set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. \\<And>k v.\n       (k, v) \\<in> set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       f v = (f v when v \\<noteq> (0::'c))", "hence \"fst (t, c) \\<in> fst ` set (fst (list_of_oalist_ntm xs))\""], ["proof (prove)\nusing this:\n  (t, c) \\<in> set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. fst (t, c) \\<in> fst ` set (fst (list_of_oalist_ntm xs))", "by (rule imageI)"], ["proof (state)\nthis:\n  fst (t, c) \\<in> fst ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. \\<And>k v.\n       (k, v) \\<in> set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       f v = (f v when v \\<noteq> (0::'c))", "hence \"OAlist_lookup_ntm xs t \\<noteq> 0\""], ["proof (prove)\nusing this:\n  fst (t, c) \\<in> fst ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. OAlist_lookup_ntm xs t \\<noteq> (0::'c)", "by (simp add: oa_ntm.in_sorted_domain_iff_lookup[simplified oa_ntm.set_sorted_domain])"], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs t \\<noteq> (0::'c)\n\ngoal (1 subgoal):\n 1. \\<And>k v.\n       (k, v) \\<in> set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       f v = (f v when v \\<noteq> (0::'c))", "moreover"], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs t \\<noteq> (0::'c)\n\ngoal (1 subgoal):\n 1. \\<And>k v.\n       (k, v) \\<in> set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       f v = (f v when v \\<noteq> (0::'c))", "from *"], ["proof (chain)\npicking this:\n  (t, c) \\<in> set (fst (list_of_oalist_ntm xs))", "have \"OAlist_lookup_ntm xs t = c\""], ["proof (prove)\nusing this:\n  (t, c) \\<in> set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. OAlist_lookup_ntm xs t = c", "by (rule oa_ntm.lookup_eq_valueI)"], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs t = c\n\ngoal (1 subgoal):\n 1. \\<And>k v.\n       (k, v) \\<in> set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       f v = (f v when v \\<noteq> (0::'c))", "ultimately"], ["proof (chain)\npicking this:\n  OAlist_lookup_ntm xs t \\<noteq> (0::'c)\n  OAlist_lookup_ntm xs t = c", "have \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  OAlist_lookup_ntm xs t \\<noteq> (0::'c)\n  OAlist_lookup_ntm xs t = c\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'c)", "by simp"], ["proof (state)\nthis:\n  c \\<noteq> (0::'c)\n\ngoal (1 subgoal):\n 1. \\<And>k v.\n       (k, v) \\<in> set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       f v = (f v when v \\<noteq> (0::'c))", "thus \"f c = (f c when c \\<noteq> 0)\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'c)\n\ngoal (1 subgoal):\n 1. f c = (f c when c \\<noteq> (0::'c))", "by simp"], ["proof (state)\nthis:\n  f c = (f c when c \\<noteq> (0::'c))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  OAlist_map_val_ntm (\\<lambda>_. f) xs =\n  OAlist_map_val_ntm (\\<lambda>_ c. f c when c \\<noteq> (0::'c)) xs\n\ngoal (1 subgoal):\n 1. Poly_Mapping.map f (MP_oalist xs) =\n    MP_oalist (OAlist_map_val_ntm (\\<lambda>_. f) xs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Poly_Mapping.map f (MP_oalist xs) =\n    MP_oalist (OAlist_map_val_ntm (\\<lambda>_. f) xs)", "by (rule poly_mapping_eqI, simp add: Poly_Mapping.map.rep_eq eq, rule oa_ntm.lookup_map_val[symmetric], simp)"], ["proof (state)\nthis:\n  Poly_Mapping.map f (MP_oalist xs) =\n  MP_oalist (OAlist_map_val_ntm (\\<lambda>_. f) xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma range_MP_oalist [code]: \"Poly_Mapping.range (MP_oalist xs) = set (map snd (fst (list_of_oalist_ntm xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Poly_Mapping.range (MP_oalist xs) =\n    set (map snd (fst (list_of_oalist_ntm xs)))", "proof (simp add: Poly_Mapping.range.rep_eq, intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a} \\<Longrightarrow>\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n 2. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "fix c"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a} \\<Longrightarrow>\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n 2. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "assume \"c \\<in> range (OAlist_lookup_ntm xs) - {0}\""], ["proof (state)\nthis:\n  c \\<in> range (OAlist_lookup_ntm xs) - {0::'a}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a} \\<Longrightarrow>\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n 2. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "hence \"c \\<in> range (OAlist_lookup_ntm xs)\" and \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  c \\<in> range (OAlist_lookup_ntm xs) - {0::'a}\n\ngoal (1 subgoal):\n 1. c \\<in> range (OAlist_lookup_ntm xs) &&& c \\<noteq> (0::'a)", "by simp_all"], ["proof (state)\nthis:\n  c \\<in> range (OAlist_lookup_ntm xs)\n  c \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a} \\<Longrightarrow>\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n 2. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "from this(1)"], ["proof (chain)\npicking this:\n  c \\<in> range (OAlist_lookup_ntm xs)", "obtain t where \"OAlist_lookup_ntm xs t = c\""], ["proof (prove)\nusing this:\n  c \\<in> range (OAlist_lookup_ntm xs)\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        OAlist_lookup_ntm xs t = c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs t = c\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a} \\<Longrightarrow>\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n 2. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "with \\<open>c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'a)\n  OAlist_lookup_ntm xs t = c", "have \"(t, c) \\<in> set (fst (list_of_oalist_ntm xs))\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n  OAlist_lookup_ntm xs t = c\n\ngoal (1 subgoal):\n 1. (t, c) \\<in> set (fst (list_of_oalist_ntm xs))", "by (simp add: oa_ntm.lookup_eq_value)"], ["proof (state)\nthis:\n  (t, c) \\<in> set (fst (list_of_oalist_ntm xs))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a} \\<Longrightarrow>\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n 2. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "hence \"snd (t, c) \\<in> snd ` set (fst (list_of_oalist_ntm xs))\""], ["proof (prove)\nusing this:\n  (t, c) \\<in> set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. snd (t, c) \\<in> snd ` set (fst (list_of_oalist_ntm xs))", "by (rule imageI)"], ["proof (state)\nthis:\n  snd (t, c) \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a} \\<Longrightarrow>\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n 2. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "thus \"c \\<in> snd ` set (fst (list_of_oalist_ntm xs))\""], ["proof (prove)\nusing this:\n  snd (t, c) \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. c \\<in> snd ` set (fst (list_of_oalist_ntm xs))", "by simp"], ["proof (state)\nthis:\n  c \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "assume \"c \\<in> snd ` set (fst (list_of_oalist_ntm xs))\""], ["proof (state)\nthis:\n  c \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "then"], ["proof (chain)\npicking this:\n  c \\<in> snd ` set (fst (list_of_oalist_ntm xs))", "obtain t where *: \"(t, c) \\<in> set (fst (list_of_oalist_ntm xs))\""], ["proof (prove)\nusing this:\n  c \\<in> snd ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        (t, c) \\<in> set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (t, c) \\<in> set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "hence \"fst (t, c) \\<in> fst ` set (fst (list_of_oalist_ntm xs))\""], ["proof (prove)\nusing this:\n  (t, c) \\<in> set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. fst (t, c) \\<in> fst ` set (fst (list_of_oalist_ntm xs))", "by (rule imageI)"], ["proof (state)\nthis:\n  fst (t, c) \\<in> fst ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "hence \"OAlist_lookup_ntm xs t \\<noteq> 0\""], ["proof (prove)\nusing this:\n  fst (t, c) \\<in> fst ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. OAlist_lookup_ntm xs t \\<noteq> (0::'a)", "by (simp add: oa_ntm.in_sorted_domain_iff_lookup[simplified oa_ntm.set_sorted_domain])"], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs t \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "moreover"], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs t \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "from *"], ["proof (chain)\npicking this:\n  (t, c) \\<in> set (fst (list_of_oalist_ntm xs))", "have \"OAlist_lookup_ntm xs t = c\""], ["proof (prove)\nusing this:\n  (t, c) \\<in> set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. OAlist_lookup_ntm xs t = c", "by (rule oa_ntm.lookup_eq_valueI)"], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs t = c\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> snd ` set (fst (list_of_oalist_ntm xs)) \\<Longrightarrow>\n       x \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "ultimately"], ["proof (chain)\npicking this:\n  OAlist_lookup_ntm xs t \\<noteq> (0::'a)\n  OAlist_lookup_ntm xs t = c", "show \"c \\<in> range (OAlist_lookup_ntm xs) - {0}\""], ["proof (prove)\nusing this:\n  OAlist_lookup_ntm xs t \\<noteq> (0::'a)\n  OAlist_lookup_ntm xs t = c\n\ngoal (1 subgoal):\n 1. c \\<in> range (OAlist_lookup_ntm xs) - {0::'a}", "by fastforce"], ["proof (state)\nthis:\n  c \\<in> range (OAlist_lookup_ntm xs) - {0::'a}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma if_poly_mapping_eq_iff:\n  \"(if x = y then a else b) = (if (\\<forall>i\\<in>keys x \\<union> keys y. lookup x i = lookup y i) then a else b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if x = y then a else b) =\n    (if \\<forall>i\\<in>keys x \\<union> keys y. lookup x i = lookup y i\n     then a else b)", "by simp (metis UnI1 UnI2 in_keys_iff poly_mapping_eqI)"], ["", "lemma keys_add_eq: \"keys (a + b) = keys a \\<union> keys b - {x \\<in> keys a \\<inter> keys b. lookup a x + lookup b x = 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (a + b) =\n    keys a \\<union> keys b -\n    {x \\<in> keys a \\<inter> keys b. lookup a x + lookup b x = (0::'b)}", "by (auto simp: in_keys_iff lookup_add add_eq_0_iff\n      simp del: lookup_not_eq_zero_eq_in_keys)"], ["", "locale gd_nat_term =\n    gd_term pair_of_term term_of_pair\n        \"\\<lambda>s t. le_of_nat_term_order cmp_term (term_of_pair (s, the_min)) (term_of_pair (t, the_min))\"\n        \"\\<lambda>s t. lt_of_nat_term_order cmp_term (term_of_pair (s, the_min)) (term_of_pair (t, the_min))\"\n        \"le_of_nat_term_order cmp_term\"\n        \"lt_of_nat_term_order cmp_term\"\n      for pair_of_term::\"'t::nat_term \\<Rightarrow> ('a::{nat_term,graded_dickson_powerprod} \\<times> 'k::{countable,the_min,wellorder})\"\n      and term_of_pair::\"('a \\<times> 'k) \\<Rightarrow> 't\"\n      and cmp_term +\n    assumes splus_eq_splus: \"t \\<oplus> u = nat_term_class.splus (term_of_pair (t, the_min)) u\"\nbegin"], ["", "definition shift_map_keys :: \"'a \\<Rightarrow> ('b \\<Rightarrow> 'b) \\<Rightarrow> ('t, 'b) oalist_ntm \\<Rightarrow> ('t, 'b::semiring_0) oalist_ntm\"\n  where \"shift_map_keys t f xs = OAlist_ntm (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, f (snd kv))) (list_of_oalist_ntm xs))\""], ["", "lemma list_of_oalist_shift_keys:\n  \"list_of_oalist_ntm (shift_map_keys t f xs) = (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, f (snd kv))) (list_of_oalist_ntm xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_oalist_ntm (shift_map_keys t f xs) =\n    map_raw (\\<lambda>kv. (t \\<oplus> fst kv, f (snd kv)))\n     (list_of_oalist_ntm xs)", "unfolding shift_map_keys_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_oalist_ntm\n     (OAlist_ntm\n       (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, f (snd kv)))\n         (list_of_oalist_ntm xs))) =\n    map_raw (\\<lambda>kv. (t \\<oplus> fst kv, f (snd kv)))\n     (list_of_oalist_ntm xs)", "by (rule oa_ntm.list_of_oalist_of_list_id, rule ko_ntm.oalist_inv_map_raw, fact oalist_inv_list_of_oalist_ntm,\n      simp add: nat_term_compare_inv_conv[symmetric] nat_term_compare_inv_def splus_eq_splus nat_term_compare_splus)"], ["", "lemma lookup_shift_map_keys_plus:\n  \"lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) = c * lookup (MP_oalist xs) u\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n    c * lookup (MP_oalist xs) u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n    c * lookup (MP_oalist xs) u", "let ?f = \"\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv)\""], ["proof (state)\ngoal (1 subgoal):\n 1. lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n    c * lookup (MP_oalist xs) u", "have \"?l = lookup_ko_ntm (map_raw ?f (list_of_oalist_ntm xs)) (fst (?f (u, c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n    lookup_ko_ntm\n     (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n       (list_of_oalist_ntm xs))\n     (fst (t \\<oplus> fst (u, c), c * snd (u, c)))", "by (simp add: oa_ntm.lookup_def list_of_oalist_shift_keys)"], ["proof (state)\nthis:\n  lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n  lookup_ko_ntm\n   (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n     (list_of_oalist_ntm xs))\n   (fst (t \\<oplus> fst (u, c), c * snd (u, c)))\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n    c * lookup (MP_oalist xs) u", "also"], ["proof (state)\nthis:\n  lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n  lookup_ko_ntm\n   (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n     (list_of_oalist_ntm xs))\n   (fst (t \\<oplus> fst (u, c), c * snd (u, c)))\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n    c * lookup (MP_oalist xs) u", "have \"... = snd (?f (u, lookup_ko_ntm (list_of_oalist_ntm xs) u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup_ko_ntm\n     (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n       (list_of_oalist_ntm xs))\n     (fst (t \\<oplus> fst (u, c), c * snd (u, c))) =\n    snd (t \\<oplus> fst (u, lookup_ko_ntm (list_of_oalist_ntm xs) u),\n         c * snd (u, lookup_ko_ntm (list_of_oalist_ntm xs) u))", "by (rule ko_ntm.lookup_raw_map_raw, fact oalist_inv_list_of_oalist_ntm, simp,\n        simp add: nat_term_compare_inv_conv[symmetric] nat_term_compare_inv_def splus_eq_splus nat_term_compare_splus)"], ["proof (state)\nthis:\n  lookup_ko_ntm\n   (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n     (list_of_oalist_ntm xs))\n   (fst (t \\<oplus> fst (u, c), c * snd (u, c))) =\n  snd (t \\<oplus> fst (u, lookup_ko_ntm (list_of_oalist_ntm xs) u),\n       c * snd (u, lookup_ko_ntm (list_of_oalist_ntm xs) u))\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n    c * lookup (MP_oalist xs) u", "also"], ["proof (state)\nthis:\n  lookup_ko_ntm\n   (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n     (list_of_oalist_ntm xs))\n   (fst (t \\<oplus> fst (u, c), c * snd (u, c))) =\n  snd (t \\<oplus> fst (u, lookup_ko_ntm (list_of_oalist_ntm xs) u),\n       c * snd (u, lookup_ko_ntm (list_of_oalist_ntm xs) u))\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n    c * lookup (MP_oalist xs) u", "have \"... = ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (t \\<oplus> fst (u, lookup_ko_ntm (list_of_oalist_ntm xs) u),\n         c * snd (u, lookup_ko_ntm (list_of_oalist_ntm xs) u)) =\n    c * lookup (MP_oalist xs) u", "by (simp add: oa_ntm.lookup_def)"], ["proof (state)\nthis:\n  snd (t \\<oplus> fst (u, lookup_ko_ntm (list_of_oalist_ntm xs) u),\n       c * snd (u, lookup_ko_ntm (list_of_oalist_ntm xs) u)) =\n  c * lookup (MP_oalist xs) u\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n    c * lookup (MP_oalist xs) u", "finally"], ["proof (chain)\npicking this:\n  lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n  c * lookup (MP_oalist xs) u", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n  c * lookup (MP_oalist xs) u\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n    c * lookup (MP_oalist xs) u", "."], ["proof (state)\nthis:\n  lookup (MP_oalist (shift_map_keys t ((*) c) xs)) (t \\<oplus> u) =\n  c * lookup (MP_oalist xs) u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma keys_shift_map_keys_subset:\n  \"keys (MP_oalist (shift_map_keys t ((*) c) xs)) \\<subseteq> ((\\<oplus>) t) ` keys (MP_oalist xs)\" (is \"?l \\<subseteq> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (MP_oalist (shift_map_keys t ((*) c) xs))\n    \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. keys (MP_oalist (shift_map_keys t ((*) c) xs))\n    \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "let ?f = \"\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv)\""], ["proof (state)\ngoal (1 subgoal):\n 1. keys (MP_oalist (shift_map_keys t ((*) c) xs))\n    \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "have \"?l = fst ` set (fst (map_raw ?f (list_of_oalist_ntm xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (MP_oalist (shift_map_keys t ((*) c) xs)) =\n    fst `\n    set (fst (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n               (list_of_oalist_ntm xs)))", "by (simp add: keys_MP_oalist list_of_oalist_shift_keys)"], ["proof (state)\nthis:\n  keys (MP_oalist (shift_map_keys t ((*) c) xs)) =\n  fst `\n  set (fst (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n             (list_of_oalist_ntm xs)))\n\ngoal (1 subgoal):\n 1. keys (MP_oalist (shift_map_keys t ((*) c) xs))\n    \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "also"], ["proof (state)\nthis:\n  keys (MP_oalist (shift_map_keys t ((*) c) xs)) =\n  fst `\n  set (fst (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n             (list_of_oalist_ntm xs)))\n\ngoal (1 subgoal):\n 1. keys (MP_oalist (shift_map_keys t ((*) c) xs))\n    \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "from ko_ntm.map_raw_subset"], ["proof (chain)\npicking this:\n  set (fst (map_raw ?f ?xs)) \\<subseteq> ?f ` set (fst ?xs)", "have \"... \\<subseteq> fst ` ?f ` set (fst (list_of_oalist_ntm xs))\""], ["proof (prove)\nusing this:\n  set (fst (map_raw ?f ?xs)) \\<subseteq> ?f ` set (fst ?xs)\n\ngoal (1 subgoal):\n 1. fst `\n    set (fst (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n               (list_of_oalist_ntm xs)))\n    \\<subseteq> fst `\n                (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv)) `\n                set (fst (list_of_oalist_ntm xs))", "by (rule image_mono)"], ["proof (state)\nthis:\n  fst `\n  set (fst (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n             (list_of_oalist_ntm xs)))\n  \\<subseteq> fst `\n              (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv)) `\n              set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. keys (MP_oalist (shift_map_keys t ((*) c) xs))\n    \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "also"], ["proof (state)\nthis:\n  fst `\n  set (fst (map_raw (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv))\n             (list_of_oalist_ntm xs)))\n  \\<subseteq> fst `\n              (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv)) `\n              set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. keys (MP_oalist (shift_map_keys t ((*) c) xs))\n    \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "have \"... \\<subseteq> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst `\n    (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv)) `\n    set (fst (list_of_oalist_ntm xs))\n    \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "by (simp add: keys_MP_oalist image_image)"], ["proof (state)\nthis:\n  fst `\n  (\\<lambda>kv. (t \\<oplus> fst kv, c * snd kv)) `\n  set (fst (list_of_oalist_ntm xs))\n  \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. keys (MP_oalist (shift_map_keys t ((*) c) xs))\n    \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "finally"], ["proof (chain)\npicking this:\n  keys (MP_oalist (shift_map_keys t ((*) c) xs))\n  \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  keys (MP_oalist (shift_map_keys t ((*) c) xs))\n  \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. keys (MP_oalist (shift_map_keys t ((*) c) xs))\n    \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "."], ["proof (state)\nthis:\n  keys (MP_oalist (shift_map_keys t ((*) c) xs))\n  \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma monom_mult_MP_oalist [code]:\n  \"monom_mult c t (MP_oalist xs) =\n    MP_oalist (if c = 0 then OAlist_empty_ntm (snd (list_of_oalist_ntm xs)) else shift_map_keys t ((*) c) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)", "case True"], ["proof (state)\nthis:\n  c = (0::'b)\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)", "hence \"monom_mult c t (MP_oalist xs) = 0\""], ["proof (prove)\nusing this:\n  c = (0::'b)\n\ngoal (1 subgoal):\n 1. monom_mult c t (MP_oalist xs) = 0", "using monom_mult_zero_left"], ["proof (prove)\nusing this:\n  c = (0::'b)\n  monom_mult (0::?'b) ?t ?p = 0\n\ngoal (1 subgoal):\n 1. monom_mult c t (MP_oalist xs) = 0", "by simp"], ["proof (state)\nthis:\n  monom_mult c t (MP_oalist xs) = 0\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  monom_mult c t (MP_oalist xs) = 0\n\ngoal (1 subgoal):\n 1. monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)", "using True"], ["proof (prove)\nusing this:\n  monom_mult c t (MP_oalist xs) = 0\n  c = (0::'b)\n\ngoal (1 subgoal):\n 1. monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)", "by simp"], ["proof (state)\nthis:\n  monom_mult c t (MP_oalist xs) =\n  MP_oalist\n   (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n    else shift_map_keys t ((*) c) xs)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)", "case False"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)", "have \"monom_mult c t (MP_oalist xs) = MP_oalist (shift_map_keys t ((*) c) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult c t (MP_oalist xs) = MP_oalist (shift_map_keys t ((*) c) xs)", "proof (rule poly_mapping_eqI, simp add: lookup_monom_mult del: MP_oalist.rep_eq, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       t adds\\<^sub>p k \\<Longrightarrow>\n       c * lookup (MP_oalist xs) (k \\<ominus> t) =\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k\n 2. \\<And>k.\n       \\<not> t adds\\<^sub>p k \\<Longrightarrow>\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k = (0::'b)", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       t adds\\<^sub>p k \\<Longrightarrow>\n       c * lookup (MP_oalist xs) (k \\<ominus> t) =\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k\n 2. \\<And>k.\n       \\<not> t adds\\<^sub>p k \\<Longrightarrow>\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k = (0::'b)", "assume \"t adds\\<^sub>p u\""], ["proof (state)\nthis:\n  t adds\\<^sub>p u\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       t adds\\<^sub>p k \\<Longrightarrow>\n       c * lookup (MP_oalist xs) (k \\<ominus> t) =\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k\n 2. \\<And>k.\n       \\<not> t adds\\<^sub>p k \\<Longrightarrow>\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k = (0::'b)", "then"], ["proof (chain)\npicking this:\n  t adds\\<^sub>p u", "obtain v where \"u = t \\<oplus> v\""], ["proof (prove)\nusing this:\n  t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. (\\<And>v. u = t \\<oplus> v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule adds_ppE)"], ["proof (state)\nthis:\n  u = t \\<oplus> v\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       t adds\\<^sub>p k \\<Longrightarrow>\n       c * lookup (MP_oalist xs) (k \\<ominus> t) =\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k\n 2. \\<And>k.\n       \\<not> t adds\\<^sub>p k \\<Longrightarrow>\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k = (0::'b)", "thus \"c * lookup (MP_oalist xs) (u \\<ominus> t) = lookup (MP_oalist (shift_map_keys t ((*) c) xs)) u\""], ["proof (prove)\nusing this:\n  u = t \\<oplus> v\n\ngoal (1 subgoal):\n 1. c * lookup (MP_oalist xs) (u \\<ominus> t) =\n    lookup (MP_oalist (shift_map_keys t ((*) c) xs)) u", "by (simp add: splus_sminus lookup_shift_map_keys_plus del: MP_oalist.rep_eq)"], ["proof (state)\nthis:\n  c * lookup (MP_oalist xs) (u \\<ominus> t) =\n  lookup (MP_oalist (shift_map_keys t ((*) c) xs)) u\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> t adds\\<^sub>p k \\<Longrightarrow>\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k = (0::'b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> t adds\\<^sub>p k \\<Longrightarrow>\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k = (0::'b)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> t adds\\<^sub>p k \\<Longrightarrow>\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k = (0::'b)", "assume \"\\<not> t adds\\<^sub>p u\""], ["proof (state)\nthis:\n  \\<not> t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> t adds\\<^sub>p k \\<Longrightarrow>\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k = (0::'b)", "have \"u \\<notin> keys (MP_oalist (shift_map_keys t ((*) c) xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<notin> keys (MP_oalist (shift_map_keys t ((*) c) xs))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> keys (MP_oalist (shift_map_keys t ((*) c) xs)) \\<Longrightarrow>\n    False", "assume \"u \\<in> keys (MP_oalist (shift_map_keys t ((*) c) xs))\""], ["proof (state)\nthis:\n  u \\<in> keys (MP_oalist (shift_map_keys t ((*) c) xs))\n\ngoal (1 subgoal):\n 1. u \\<in> keys (MP_oalist (shift_map_keys t ((*) c) xs)) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  u \\<in> keys (MP_oalist (shift_map_keys t ((*) c) xs))\n\ngoal (1 subgoal):\n 1. u \\<in> keys (MP_oalist (shift_map_keys t ((*) c) xs)) \\<Longrightarrow>\n    False", "have \"... \\<subseteq> ((\\<oplus>) t) ` keys (MP_oalist xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (MP_oalist (shift_map_keys t ((*) c) xs))\n    \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)", "by (fact keys_shift_map_keys_subset)"], ["proof (state)\nthis:\n  keys (MP_oalist (shift_map_keys t ((*) c) xs))\n  \\<subseteq> (\\<oplus>) t ` keys (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. u \\<in> keys (MP_oalist (shift_map_keys t ((*) c) xs)) \\<Longrightarrow>\n    False", "finally"], ["proof (chain)\npicking this:\n  u \\<in> (\\<oplus>) t ` keys (MP_oalist xs)", "obtain v where \"u = t \\<oplus> v\""], ["proof (prove)\nusing this:\n  u \\<in> (\\<oplus>) t ` keys (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. (\\<And>v. u = t \\<oplus> v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u = t \\<oplus> v\n\ngoal (1 subgoal):\n 1. u \\<in> keys (MP_oalist (shift_map_keys t ((*) c) xs)) \\<Longrightarrow>\n    False", "hence \"t adds\\<^sub>p u\""], ["proof (prove)\nusing this:\n  u = t \\<oplus> v\n\ngoal (1 subgoal):\n 1. t adds\\<^sub>p u", "by (rule adds_ppI)"], ["proof (state)\nthis:\n  t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. u \\<in> keys (MP_oalist (shift_map_keys t ((*) c) xs)) \\<Longrightarrow>\n    False", "with \\<open>\\<not> t adds\\<^sub>p u\\<close>"], ["proof (chain)\npicking this:\n  \\<not> t adds\\<^sub>p u\n  t adds\\<^sub>p u", "show False"], ["proof (prove)\nusing this:\n  \\<not> t adds\\<^sub>p u\n  t adds\\<^sub>p u\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<notin> keys (MP_oalist (shift_map_keys t ((*) c) xs))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> t adds\\<^sub>p k \\<Longrightarrow>\n       lookup (MP_oalist (shift_map_keys t ((*) c) xs)) k = (0::'b)", "thus \"lookup (MP_oalist (shift_map_keys t ((*) c) xs)) u = 0\""], ["proof (prove)\nusing this:\n  u \\<notin> keys (MP_oalist (shift_map_keys t ((*) c) xs))\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist (shift_map_keys t ((*) c) xs)) u = (0::'b)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup (MP_oalist (shift_map_keys t ((*) c) xs)) u = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom_mult c t (MP_oalist xs) = MP_oalist (shift_map_keys t ((*) c) xs)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  monom_mult c t (MP_oalist xs) = MP_oalist (shift_map_keys t ((*) c) xs)\n\ngoal (1 subgoal):\n 1. monom_mult c t (MP_oalist xs) =\n    MP_oalist\n     (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n      else shift_map_keys t ((*) c) xs)", "by (simp add: False)"], ["proof (state)\nthis:\n  monom_mult c t (MP_oalist xs) =\n  MP_oalist\n   (if c = (0::'b) then OAlist_empty_ntm (snd (list_of_oalist_ntm xs))\n    else shift_map_keys t ((*) c) xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_scalar_MP_oalist [code]:\n  \"(MP_oalist xs) \\<odot> (MP_oalist ys) =\n      (if is_zero (MP_oalist xs) then\n        MP_oalist (OAlist_empty_ntm (snd (list_of_oalist_ntm ys)))\n      else\n        let ct = OAlist_hd_ntm xs in\n        monom_mult (snd ct) (fst ct) (MP_oalist ys) + (MP_oalist (OAlist_tl_ntm xs)) \\<odot> (MP_oalist ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MP_oalist xs \\<odot> MP_oalist ys =\n    (if is_zero (MP_oalist xs)\n     then MP_oalist (OAlist_empty_ntm (snd (list_of_oalist_ntm ys)))\n     else let ct = OAlist_hd_ntm xs\n          in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n             MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "proof (split if_split, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    MP_oalist (OAlist_empty_ntm (snd (list_of_oalist_ntm ys)))\n 2. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "assume \"is_zero (MP_oalist xs)\""], ["proof (state)\nthis:\n  is_zero (MP_oalist xs)\n\ngoal (2 subgoals):\n 1. is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    MP_oalist (OAlist_empty_ntm (snd (list_of_oalist_ntm ys)))\n 2. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "thus \"MP_oalist xs \\<odot> MP_oalist ys = MP_oalist (OAlist_empty_ntm (snd (list_of_oalist_ntm ys)))\""], ["proof (prove)\nusing this:\n  is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. MP_oalist xs \\<odot> MP_oalist ys =\n    MP_oalist (OAlist_empty_ntm (snd (list_of_oalist_ntm ys)))", "by (simp add: is_zero_def)"], ["proof (state)\nthis:\n  MP_oalist xs \\<odot> MP_oalist ys =\n  MP_oalist (OAlist_empty_ntm (snd (list_of_oalist_ntm ys)))\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "assume \"\\<not> is_zero (MP_oalist xs)\""], ["proof (state)\nthis:\n  \\<not> is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "hence *: \"fst (list_of_oalist_ntm xs) \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<not> is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. fst (list_of_oalist_ntm xs) \\<noteq> []", "by (simp add: is_zero_MP_oalist List.null_def)"], ["proof (state)\nthis:\n  fst (list_of_oalist_ntm xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "define ct where \"ct = OAlist_hd_ntm xs\""], ["proof (state)\nthis:\n  ct = OAlist_hd_ntm xs\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "have eq: \"except (MP_oalist xs) {fst ct} = MP_oalist (OAlist_tl_ntm xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. except (MP_oalist xs) {fst ct} = MP_oalist (OAlist_tl_ntm xs)", "by (rule poly_mapping_eqI, simp add: lookup_except ct_def oa_ntm.lookup_tl')"], ["proof (state)\nthis:\n  except (MP_oalist xs) {fst ct} = MP_oalist (OAlist_tl_ntm xs)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "have \"MP_oalist xs \\<odot> MP_oalist ys =\n          monom_mult (lookup (MP_oalist xs) (fst ct)) (fst ct) (MP_oalist ys) +\n          except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MP_oalist xs \\<odot> MP_oalist ys =\n    monom_mult (lookup (MP_oalist xs) (fst ct)) (fst ct) (MP_oalist ys) +\n    except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys", "by (fact mult_scalar_rec_left)"], ["proof (state)\nthis:\n  MP_oalist xs \\<odot> MP_oalist ys =\n  monom_mult (lookup (MP_oalist xs) (fst ct)) (fst ct) (MP_oalist ys) +\n  except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "also"], ["proof (state)\nthis:\n  MP_oalist xs \\<odot> MP_oalist ys =\n  monom_mult (lookup (MP_oalist xs) (fst ct)) (fst ct) (MP_oalist ys) +\n  except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "have \"... = monom_mult (snd ct) (fst ct) (MP_oalist ys) + except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult (lookup (MP_oalist xs) (fst ct)) (fst ct) (MP_oalist ys) +\n    except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys =\n    monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n    except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys", "using *"], ["proof (prove)\nusing this:\n  fst (list_of_oalist_ntm xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. monom_mult (lookup (MP_oalist xs) (fst ct)) (fst ct) (MP_oalist ys) +\n    except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys =\n    monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n    except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys", "by (simp add: ct_def oa_ntm.snd_hd)"], ["proof (state)\nthis:\n  monom_mult (lookup (MP_oalist xs) (fst ct)) (fst ct) (MP_oalist ys) +\n  except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys =\n  monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n  except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "also"], ["proof (state)\nthis:\n  monom_mult (lookup (MP_oalist xs) (fst ct)) (fst ct) (MP_oalist ys) +\n  except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys =\n  monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n  except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "have \"... = monom_mult (snd ct) (fst ct) (MP_oalist ys) + MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n    except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys =\n    monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n    MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys", "by (simp only: eq)"], ["proof (state)\nthis:\n  monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n  except (MP_oalist xs) {fst ct} \\<odot> MP_oalist ys =\n  monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n  MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "finally"], ["proof (chain)\npicking this:\n  MP_oalist xs \\<odot> MP_oalist ys =\n  monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n  MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys", "show \"MP_oalist xs \\<odot> MP_oalist ys =\n                (let ct = OAlist_hd_ntm xs in\n                  monom_mult (snd ct) (fst ct) (MP_oalist ys) + MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)\""], ["proof (prove)\nusing this:\n  MP_oalist xs \\<odot> MP_oalist ys =\n  monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n  MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys\n\ngoal (1 subgoal):\n 1. MP_oalist xs \\<odot> MP_oalist ys =\n    (let ct = OAlist_hd_ntm xs\n     in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n        MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)", "by (simp add: ct_def Let_def)"], ["proof (state)\nthis:\n  MP_oalist xs \\<odot> MP_oalist ys =\n  (let ct = OAlist_hd_ntm xs\n   in monom_mult (snd ct) (fst ct) (MP_oalist ys) +\n      MP_oalist (OAlist_tl_ntm xs) \\<odot> MP_oalist ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* ordered_nat_term *)"], ["", "subsubsection \\<open>Special case of addition: adding monomials\\<close>"], ["", "definition plus_monomial_less :: \"('a \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> 'b \\<Rightarrow> 'a \\<Rightarrow> ('a \\<Rightarrow>\\<^sub>0 'b::monoid_add)\"\n  where \"plus_monomial_less p c u = p + monomial c u\""], ["", "text \\<open>@{const plus_monomial_less} is useful when adding a monomial to a polynomial, where the term\n  of the monomial is known to be smaller than all terms in the polynomial, because it can be\n  implemented more efficiently than general addition.\\<close>"], ["", "lemma plus_monomial_less_MP_oalist [code]:\n  \"plus_monomial_less (MP_oalist xs) c u = MP_oalist (OAlist_update_by_fun_gr_ntm u (\\<lambda>c0. c0 + c) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plus_monomial_less (MP_oalist xs) c u =\n    MP_oalist (OAlist_update_by_fun_gr_ntm u (\\<lambda>c0. c0 + c) xs)", "unfolding plus_monomial_less_def oa_ntm.update_by_fun_gr_eq_update_by_fun"], ["proof (prove)\ngoal (1 subgoal):\n 1. MP_oalist xs + monomial c u =\n    MP_oalist (OAlist_update_by_fun_ntm u (\\<lambda>c0. c0 + c) xs)", "by (rule poly_mapping_eqI, simp add: lookup_plus_fun oa_ntm.lookup_update_by_fun lookup_single)"], ["", "text \\<open>@{const plus_monomial_less} is computed by @{const OAlist_update_by_fun_gr_ntm}, because greater\n  terms come @{emph \\<open>before\\<close>} smaller ones in @{type oalist_ntm}.\\<close>"], ["", "subsubsection \\<open>Constructors\\<close>"], ["", "definition \"distr\\<^sub>0 ko xs = MP_oalist (oalist_of_list_ntm (xs, ko))\" \\<comment>\\<open>sparse representation\\<close>"], ["", "definition V\\<^sub>0 :: \"'a \\<Rightarrow> ('a, nat) pp \\<Rightarrow>\\<^sub>0 'b::{one,zero}\" where\n  \"V\\<^sub>0 n \\<equiv> monomial 1 (single_pp n 1)\""], ["", "definition C\\<^sub>0 :: \"'b \\<Rightarrow> ('a, nat) pp \\<Rightarrow>\\<^sub>0 'b::zero\" where \"C\\<^sub>0 c \\<equiv> monomial c 0\""], ["", "lemma C\\<^sub>0_one: \"C\\<^sub>0 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 (1::'b) = 1", "by (simp add: C\\<^sub>0_def)"], ["", "lemma C\\<^sub>0_numeral: \"C\\<^sub>0 (numeral x) = numeral x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 (numeral x) = numeral x", "by (auto intro!: poly_mapping_eqI simp: C\\<^sub>0_def lookup_numeral)"], ["", "lemma C\\<^sub>0_minus: \"C\\<^sub>0 (- x) = - C\\<^sub>0 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 (- x) = - C\\<^sub>0 x", "by (simp add: C\\<^sub>0_def single_uminus)"], ["", "lemma C\\<^sub>0_zero: \"C\\<^sub>0 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 (0::'b) = 0", "by (auto intro!: poly_mapping_eqI simp: C\\<^sub>0_def)"], ["", "lemma V\\<^sub>0_power: \"V\\<^sub>0 v ^ n = monomial 1 (single_pp v n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V\\<^sub>0 v ^ n = monomial (1::'b) (single_pp v n)", "by (induction n) (auto simp: V\\<^sub>0_def mult_single single_pp_plus)"], ["", "lemma single_MP_oalist [code]: \"Poly_Mapping.single k v = distr\\<^sub>0 nat_term_order_of_le [(k, v)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial v k = distr\\<^sub>0 nat_term_order_of_le [(k, v)]", "unfolding distr\\<^sub>0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial v k =\n    MP_oalist (oalist_of_list_ntm ([(k, v)], nat_term_order_of_le))", "by (rule poly_mapping_eqI, simp add: lookup_single OAlist_lookup_ntm_single)"], ["", "lemma one_MP_oalist [code]: \"1 = distr\\<^sub>0 nat_term_order_of_le [(0, 1)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = distr\\<^sub>0 nat_term_order_of_le [(0::'a, 1::'b)]", "by (metis single_MP_oalist single_one)"], ["", "lemma except_MP_oalist [code]: \"except (MP_oalist xs) S = MP_oalist (OAlist_filter_ntm (\\<lambda>kv. fst kv \\<notin> S) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. except (MP_oalist xs) S =\n    MP_oalist (OAlist_filter_ntm (\\<lambda>kv. fst kv \\<notin> S) xs)", "by (rule poly_mapping_eqI, simp add: lookup_except oa_ntm.lookup_filter)"], ["", "subsubsection \\<open>Changing the Internal Order\\<close>"], ["", "definition change_ord :: \"'a::nat_term_compare nat_term_order \\<Rightarrow> ('a \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> ('a \\<Rightarrow>\\<^sub>0 'b)\"\n  where \"change_ord to = (\\<lambda>x. x)\""], ["", "lemma change_ord_MP_oalist [code]: \"change_ord to (MP_oalist xs) = MP_oalist (OAlist_reorder_ntm to xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. change_ord to (MP_oalist xs) = MP_oalist (OAlist_reorder_ntm to xs)", "by (rule poly_mapping_eqI, simp add: change_ord_def oa_ntm.lookup_reorder)"], ["", "subsubsection \\<open>Ordered Power-Products\\<close>"], ["", "lemma foldl_assoc:\n  assumes \"\\<And>x y z. f (f x y) z = f x (f y z)\"\n  shows \"foldl f (f a b) xs = f a (foldl f b xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl f (f a b) xs = f a (foldl f b xs)", "proof (induct xs arbitrary: a b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b. foldl f (f a b) [] = f a (foldl f b [])\n 2. \\<And>a xs aa b.\n       (\\<And>a b.\n           foldl f (f a b) xs = f a (foldl f b xs)) \\<Longrightarrow>\n       foldl f (f aa b) (a # xs) = f aa (foldl f b (a # xs))", "fix a b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b. foldl f (f a b) [] = f a (foldl f b [])\n 2. \\<And>a xs aa b.\n       (\\<And>a b.\n           foldl f (f a b) xs = f a (foldl f b xs)) \\<Longrightarrow>\n       foldl f (f aa b) (a # xs) = f aa (foldl f b (a # xs))", "show \"foldl f (f a b) [] = f a (foldl f b [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl f (f a b) [] = f a (foldl f b [])", "by simp"], ["proof (state)\nthis:\n  foldl f (f a b) [] = f a (foldl f b [])\n\ngoal (1 subgoal):\n 1. \\<And>a xs aa b.\n       (\\<And>a b.\n           foldl f (f a b) xs = f a (foldl f b xs)) \\<Longrightarrow>\n       foldl f (f aa b) (a # xs) = f aa (foldl f b (a # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs aa b.\n       (\\<And>a b.\n           foldl f (f a b) xs = f a (foldl f b xs)) \\<Longrightarrow>\n       foldl f (f aa b) (a # xs) = f aa (foldl f b (a # xs))", "fix a b x xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs aa b.\n       (\\<And>a b.\n           foldl f (f a b) xs = f a (foldl f b xs)) \\<Longrightarrow>\n       foldl f (f aa b) (a # xs) = f aa (foldl f b (a # xs))", "assume \"\\<And>a b. foldl f (f a b) xs = f a (foldl f b xs)\""], ["proof (state)\nthis:\n  foldl f (f ?a ?b) xs = f ?a (foldl f ?b xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs aa b.\n       (\\<And>a b.\n           foldl f (f a b) xs = f a (foldl f b xs)) \\<Longrightarrow>\n       foldl f (f aa b) (a # xs) = f aa (foldl f b (a # xs))", "from assms[of a b x] this[of a \"f b x\"]"], ["proof (chain)\npicking this:\n  f (f a b) x = f a (f b x)\n  foldl f (f a (f b x)) xs = f a (foldl f (f b x) xs)", "show \"foldl f (f a b) (x # xs) = f a (foldl f b (x # xs))\""], ["proof (prove)\nusing this:\n  f (f a b) x = f a (f b x)\n  foldl f (f a (f b x)) xs = f a (foldl f (f b x) xs)\n\ngoal (1 subgoal):\n 1. foldl f (f a b) (x # xs) = f a (foldl f b (x # xs))", "unfolding foldl_Cons"], ["proof (prove)\nusing this:\n  f (f a b) x = f a (f b x)\n  foldl f (f a (f b x)) xs = f a (foldl f (f b x) xs)\n\ngoal (1 subgoal):\n 1. foldl f (f (f a b) x) xs = f a (foldl f (f b x) xs)", "by simp"], ["proof (state)\nthis:\n  foldl f (f a b) (x # xs) = f a (foldl f b (x # xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "context gd_nat_term\nbegin"], ["", "definition ord_pp :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\n  where \"ord_pp s t = le_of_nat_term_order cmp_term (term_of_pair (s, the_min)) (term_of_pair (t, the_min))\""], ["", "definition ord_pp_strict :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\n  where \"ord_pp_strict s t = lt_of_nat_term_order cmp_term (term_of_pair (s, the_min)) (term_of_pair (t, the_min))\""], ["", "lemma lt_MP_oalist [code]:\n  \"lt (MP_oalist xs) = (if is_zero (MP_oalist xs) then min_term else fst (OAlist_min_key_val_ntm cmp_term xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (MP_oalist xs) =\n    (if is_zero (MP_oalist xs) then min_term\n     else fst (OAlist_min_key_val_ntm cmp_term xs))", "proof (split if_split, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_zero (MP_oalist xs) \\<Longrightarrow> lt (MP_oalist xs) = min_term\n 2. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lt (MP_oalist xs) = fst (OAlist_min_key_val_ntm cmp_term xs)", "assume \"is_zero (MP_oalist xs)\""], ["proof (state)\nthis:\n  is_zero (MP_oalist xs)\n\ngoal (2 subgoals):\n 1. is_zero (MP_oalist xs) \\<Longrightarrow> lt (MP_oalist xs) = min_term\n 2. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lt (MP_oalist xs) = fst (OAlist_min_key_val_ntm cmp_term xs)", "thus \"lt (MP_oalist xs) = min_term\""], ["proof (prove)\nusing this:\n  is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. lt (MP_oalist xs) = min_term", "by (simp add: is_zero_def)"], ["proof (state)\nthis:\n  lt (MP_oalist xs) = min_term\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lt (MP_oalist xs) = fst (OAlist_min_key_val_ntm cmp_term xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lt (MP_oalist xs) = fst (OAlist_min_key_val_ntm cmp_term xs)", "assume \"\\<not> is_zero (MP_oalist xs)\""], ["proof (state)\nthis:\n  \\<not> is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lt (MP_oalist xs) = fst (OAlist_min_key_val_ntm cmp_term xs)", "hence \"fst (list_of_oalist_ntm xs) \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<not> is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. fst (list_of_oalist_ntm xs) \\<noteq> []", "by (simp add: is_zero_MP_oalist List.null_def)"], ["proof (state)\nthis:\n  fst (list_of_oalist_ntm xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lt (MP_oalist xs) = fst (OAlist_min_key_val_ntm cmp_term xs)", "show \"lt (MP_oalist xs) = fst (OAlist_min_key_val_ntm cmp_term xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (MP_oalist xs) = fst (OAlist_min_key_val_ntm cmp_term xs)", "proof (rule lt_eqI_keys)"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (OAlist_min_key_val_ntm cmp_term xs) \\<in> keys (MP_oalist xs)\n 2. \\<And>u.\n       u \\<in> keys (MP_oalist xs) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term u\n        (fst (OAlist_min_key_val_ntm cmp_term xs))", "show \"fst (OAlist_min_key_val_ntm cmp_term xs) \\<in> keys (MP_oalist xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (OAlist_min_key_val_ntm cmp_term xs) \\<in> keys (MP_oalist xs)", "by (simp add: keys_MP_oalist, rule imageI, rule oa_ntm.min_key_val_in, fact)"], ["proof (state)\nthis:\n  fst (OAlist_min_key_val_ntm cmp_term xs) \\<in> keys (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (MP_oalist xs) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term u\n        (fst (OAlist_min_key_val_ntm cmp_term xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (MP_oalist xs) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term u\n        (fst (OAlist_min_key_val_ntm cmp_term xs))", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (MP_oalist xs) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term u\n        (fst (OAlist_min_key_val_ntm cmp_term xs))", "assume \"u \\<in> keys (MP_oalist xs)\""], ["proof (state)\nthis:\n  u \\<in> keys (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (MP_oalist xs) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term u\n        (fst (OAlist_min_key_val_ntm cmp_term xs))", "also"], ["proof (state)\nthis:\n  u \\<in> keys (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (MP_oalist xs) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term u\n        (fst (OAlist_min_key_val_ntm cmp_term xs))", "have \"... = fst ` set (fst (list_of_oalist_ntm xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (MP_oalist xs) = fst ` set (fst (list_of_oalist_ntm xs))", "by (simp add: keys_MP_oalist)"], ["proof (state)\nthis:\n  keys (MP_oalist xs) = fst ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (MP_oalist xs) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term u\n        (fst (OAlist_min_key_val_ntm cmp_term xs))", "finally"], ["proof (chain)\npicking this:\n  u \\<in> fst ` set (fst (list_of_oalist_ntm xs))", "obtain z where \"z \\<in> set (fst (list_of_oalist_ntm xs))\" and \"u = fst z\""], ["proof (prove)\nusing this:\n  u \\<in> fst ` set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> set (fst (list_of_oalist_ntm xs));\n         u = fst z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  z \\<in> set (fst (list_of_oalist_ntm xs))\n  u = fst z\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (MP_oalist xs) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term u\n        (fst (OAlist_min_key_val_ntm cmp_term xs))", "from this(1)"], ["proof (chain)\npicking this:\n  z \\<in> set (fst (list_of_oalist_ntm xs))", "have \"ko.le (key_order_of_nat_term_order_inv cmp_term) (fst (OAlist_min_key_val_ntm cmp_term xs)) u\""], ["proof (prove)\nusing this:\n  z \\<in> set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. ko.le (key_order_of_nat_term_order_inv cmp_term)\n     (fst (OAlist_min_key_val_ntm cmp_term xs)) u", "unfolding \\<open>u = fst z\\<close>"], ["proof (prove)\nusing this:\n  z \\<in> set (fst (list_of_oalist_ntm xs))\n\ngoal (1 subgoal):\n 1. ko.le (key_order_of_nat_term_order_inv cmp_term)\n     (fst (OAlist_min_key_val_ntm cmp_term xs)) (fst z)", "by (rule oa_ntm.min_key_val_minimal)"], ["proof (state)\nthis:\n  ko.le (key_order_of_nat_term_order_inv cmp_term)\n   (fst (OAlist_min_key_val_ntm cmp_term xs)) u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (MP_oalist xs) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term u\n        (fst (OAlist_min_key_val_ntm cmp_term xs))", "thus \"le_of_nat_term_order cmp_term u (fst (OAlist_min_key_val_ntm cmp_term xs))\""], ["proof (prove)\nusing this:\n  ko.le (key_order_of_nat_term_order_inv cmp_term)\n   (fst (OAlist_min_key_val_ntm cmp_term xs)) u\n\ngoal (1 subgoal):\n 1. le_of_nat_term_order cmp_term u\n     (fst (OAlist_min_key_val_ntm cmp_term xs))", "by (simp add: le_of_nat_term_order_alt)"], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term u (fst (OAlist_min_key_val_ntm cmp_term xs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (MP_oalist xs) = fst (OAlist_min_key_val_ntm cmp_term xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lc_MP_oalist [code]:\n  \"lc (MP_oalist xs) = (if is_zero (MP_oalist xs) then 0 else snd (OAlist_min_key_val_ntm cmp_term xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (MP_oalist xs) =\n    (if is_zero (MP_oalist xs) then 0::'b\n     else snd (OAlist_min_key_val_ntm cmp_term xs))", "proof (split if_split, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_zero (MP_oalist xs) \\<Longrightarrow> lc (MP_oalist xs) = (0::'b)\n 2. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lc (MP_oalist xs) = snd (OAlist_min_key_val_ntm cmp_term xs)", "assume \"is_zero (MP_oalist xs)\""], ["proof (state)\nthis:\n  is_zero (MP_oalist xs)\n\ngoal (2 subgoals):\n 1. is_zero (MP_oalist xs) \\<Longrightarrow> lc (MP_oalist xs) = (0::'b)\n 2. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lc (MP_oalist xs) = snd (OAlist_min_key_val_ntm cmp_term xs)", "thus \"lc (MP_oalist xs) = 0\""], ["proof (prove)\nusing this:\n  is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. lc (MP_oalist xs) = (0::'b)", "by (simp add: is_zero_def)"], ["proof (state)\nthis:\n  lc (MP_oalist xs) = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lc (MP_oalist xs) = snd (OAlist_min_key_val_ntm cmp_term xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lc (MP_oalist xs) = snd (OAlist_min_key_val_ntm cmp_term xs)", "assume \"\\<not> is_zero (MP_oalist xs)\""], ["proof (state)\nthis:\n  \\<not> is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lc (MP_oalist xs) = snd (OAlist_min_key_val_ntm cmp_term xs)", "moreover"], ["proof (state)\nthis:\n  \\<not> is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lc (MP_oalist xs) = snd (OAlist_min_key_val_ntm cmp_term xs)", "from this"], ["proof (chain)\npicking this:\n  \\<not> is_zero (MP_oalist xs)", "have \"fst (list_of_oalist_ntm xs) \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<not> is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. fst (list_of_oalist_ntm xs) \\<noteq> []", "by (simp add: is_zero_MP_oalist List.null_def)"], ["proof (state)\nthis:\n  fst (list_of_oalist_ntm xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    lc (MP_oalist xs) = snd (OAlist_min_key_val_ntm cmp_term xs)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> is_zero (MP_oalist xs)\n  fst (list_of_oalist_ntm xs) \\<noteq> []", "show \"lc (MP_oalist xs) = snd (OAlist_min_key_val_ntm cmp_term xs)\""], ["proof (prove)\nusing this:\n  \\<not> is_zero (MP_oalist xs)\n  fst (list_of_oalist_ntm xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. lc (MP_oalist xs) = snd (OAlist_min_key_val_ntm cmp_term xs)", "by (simp add: lc_def lt_MP_oalist oa_ntm.snd_min_key_val)"], ["proof (state)\nthis:\n  lc (MP_oalist xs) = snd (OAlist_min_key_val_ntm cmp_term xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tail_MP_oalist [code]: \"tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)", "proof (cases \"is_zero (MP_oalist xs)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)\n 2. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)", "case True"], ["proof (state)\nthis:\n  is_zero (MP_oalist xs)\n\ngoal (2 subgoals):\n 1. is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)\n 2. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)", "hence \"fst (list_of_oalist_ntm xs) = []\""], ["proof (prove)\nusing this:\n  is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. fst (list_of_oalist_ntm xs) = []", "by (simp add: is_zero_MP_oalist List.null_def)"], ["proof (state)\nthis:\n  fst (list_of_oalist_ntm xs) = []\n\ngoal (2 subgoals):\n 1. is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)\n 2. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)", "hence \"fst (list_of_oalist_ntm (OAlist_except_min_ntm cmp_term xs)) = []\""], ["proof (prove)\nusing this:\n  fst (list_of_oalist_ntm xs) = []\n\ngoal (1 subgoal):\n 1. fst (list_of_oalist_ntm (OAlist_except_min_ntm cmp_term xs)) = []", "by (rule oa_ntm.except_min_Nil)"], ["proof (state)\nthis:\n  fst (list_of_oalist_ntm (OAlist_except_min_ntm cmp_term xs)) = []\n\ngoal (2 subgoals):\n 1. is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)\n 2. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)", "hence \"is_zero (MP_oalist (OAlist_except_min_ntm cmp_term xs))\""], ["proof (prove)\nusing this:\n  fst (list_of_oalist_ntm (OAlist_except_min_ntm cmp_term xs)) = []\n\ngoal (1 subgoal):\n 1. is_zero (MP_oalist (OAlist_except_min_ntm cmp_term xs))", "by (simp add: is_zero_MP_oalist List.null_def)"], ["proof (state)\nthis:\n  is_zero (MP_oalist (OAlist_except_min_ntm cmp_term xs))\n\ngoal (2 subgoals):\n 1. is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)\n 2. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)", "with True"], ["proof (chain)\npicking this:\n  is_zero (MP_oalist xs)\n  is_zero (MP_oalist (OAlist_except_min_ntm cmp_term xs))", "show ?thesis"], ["proof (prove)\nusing this:\n  is_zero (MP_oalist xs)\n  is_zero (MP_oalist (OAlist_except_min_ntm cmp_term xs))\n\ngoal (1 subgoal):\n 1. tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)", "by (simp add: is_zero_def)"], ["proof (state)\nthis:\n  tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)", "case False"], ["proof (state)\nthis:\n  \\<not> is_zero (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero (MP_oalist xs) \\<Longrightarrow>\n    tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)", "by (rule poly_mapping_eqI, simp add: lookup_tail_2 oa_ntm.lookup_except_min' lt_MP_oalist False)"], ["proof (state)\nthis:\n  tail (MP_oalist xs) = MP_oalist (OAlist_except_min_ntm cmp_term xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition comp_opt_p :: \"('t \\<Rightarrow>\\<^sub>0 'c::zero, 't \\<Rightarrow>\\<^sub>0 'c) comp_opt\"\n  where \"comp_opt_p p q =\n              (if p = q then Some Eq else if ord_strict_p p q then Some Lt else if ord_strict_p q p then Some Gt else None)\""], ["", "lemma comp_opt_p_MP_oalist [code]:\n  \"comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term (\\<lambda>_ x y. if x = y then Some Eq else if x = 0 then Some Lt else if y = 0 then Some Gt else None) xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "let ?f = \"\\<lambda>_ x y. if x = y then Some Eq else if x = 0 then Some Lt else if y = 0 then Some Gt else None\""], ["proof (state)\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "proof (cases \"comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Eq\")"], ["proof (state)\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys\n 2. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq>\n    Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "case True"], ["proof (state)\nthis:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Eq\n\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys\n 2. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq>\n    Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "hence \"MP_oalist xs = MP_oalist ys\""], ["proof (prove)\nusing this:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Eq\n\ngoal (1 subgoal):\n 1. MP_oalist xs = MP_oalist ys", "by (simp add: comp_opt_p_def split: if_splits)"], ["proof (state)\nthis:\n  MP_oalist xs = MP_oalist ys\n\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys\n 2. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq>\n    Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "hence \"lookup (MP_oalist xs) = lookup (MP_oalist ys)\""], ["proof (prove)\nusing this:\n  MP_oalist xs = MP_oalist ys\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist xs) = lookup (MP_oalist ys)", "by (rule arg_cong)"], ["proof (state)\nthis:\n  lookup (MP_oalist xs) = lookup (MP_oalist ys)\n\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys\n 2. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq>\n    Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "hence eq: \"OAlist_lookup_ntm xs = OAlist_lookup_ntm ys\""], ["proof (prove)\nusing this:\n  lookup (MP_oalist xs) = lookup (MP_oalist ys)\n\ngoal (1 subgoal):\n 1. OAlist_lookup_ntm xs = OAlist_lookup_ntm ys", "by simp"], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs = OAlist_lookup_ntm ys\n\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys\n 2. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq>\n    Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "have \"OAlist_lex_ord_ntm cmp_term ?f xs ys = Some Eq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys =\n    Some Eq", "by (rule oa_ntm.lex_ord_EqI, simp add: eq)"], ["proof (state)\nthis:\n  OAlist_lex_ord_ntm cmp_term\n   (\\<lambda>_ x y.\n       if x = y then Some Eq\n       else if x = (0::'b) then Some Lt\n            else if y = (0::'b) then Some Gt else None)\n   xs ys =\n  Some Eq\n\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys\n 2. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq>\n    Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "with True"], ["proof (chain)\npicking this:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Eq\n  OAlist_lex_ord_ntm cmp_term\n   (\\<lambda>_ x y.\n       if x = y then Some Eq\n       else if x = (0::'b) then Some Lt\n            else if y = (0::'b) then Some Gt else None)\n   xs ys =\n  Some Eq", "show ?thesis"], ["proof (prove)\nusing this:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Eq\n  OAlist_lex_ord_ntm cmp_term\n   (\\<lambda>_ x y.\n       if x = y then Some Eq\n       else if x = (0::'b) then Some Lt\n            else if y = (0::'b) then Some Gt else None)\n   xs ys =\n  Some Eq\n\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "by simp"], ["proof (state)\nthis:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n  OAlist_lex_ord_ntm cmp_term\n   (\\<lambda>_ x y.\n       if x = y then Some Eq\n       else if x = (0::'b) then Some Lt\n            else if y = (0::'b) then Some Gt else None)\n   xs ys\n\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq>\n    Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq>\n    Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "case False"], ["proof (state)\nthis:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq>\n    Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "hence neq: \"MP_oalist xs \\<noteq> MP_oalist ys\""], ["proof (prove)\nusing this:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n\ngoal (1 subgoal):\n 1. MP_oalist xs \\<noteq> MP_oalist ys", "by (simp add: comp_opt_p_def split: if_splits)"], ["proof (state)\nthis:\n  MP_oalist xs \\<noteq> MP_oalist ys\n\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq>\n    Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "then"], ["proof (chain)\npicking this:\n  MP_oalist xs \\<noteq> MP_oalist ys", "obtain v where 1: \"v \\<in> keys (MP_oalist xs) \\<union> keys (MP_oalist ys)\"\n      and 2: \"lookup (MP_oalist xs) v \\<noteq> lookup (MP_oalist ys) v\"\n      and 3: \"\\<And>u. lt_of_nat_term_order cmp_term v u \\<Longrightarrow> lookup (MP_oalist xs) u = lookup (MP_oalist ys) u\""], ["proof (prove)\nusing this:\n  MP_oalist xs \\<noteq> MP_oalist ys\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys (MP_oalist xs) \\<union> keys (MP_oalist ys);\n         lookup (MP_oalist xs) v \\<noteq> lookup (MP_oalist ys) v;\n         \\<And>u.\n            lt_of_nat_term_order cmp_term v u \\<Longrightarrow>\n            lookup (MP_oalist xs) u = lookup (MP_oalist ys) u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule poly_mapping_neqE, blast)"], ["proof (state)\nthis:\n  v \\<in> keys (MP_oalist xs) \\<union> keys (MP_oalist ys)\n  lookup (MP_oalist xs) v \\<noteq> lookup (MP_oalist ys) v\n  lt_of_nat_term_order cmp_term v ?u30 \\<Longrightarrow>\n  lookup (MP_oalist xs) ?u30 = lookup (MP_oalist ys) ?u30\n\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq>\n    Some Eq \\<Longrightarrow>\n    comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    OAlist_lex_ord_ntm cmp_term\n     (\\<lambda>_ x y.\n         if x = y then Some Eq\n         else if x = (0::'b) then Some Lt\n              else if y = (0::'b) then Some Gt else None)\n     xs ys", "proof (rule HOL.sym, rule oa_ntm.lex_ord_valI)"], ["proof (state)\ngoal (4 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n 2. ?k2\n    \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n          fst ` set (fst (list_of_oalist_ntm ys))\n 3. comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    (if OAlist_lookup_ntm xs ?k2 = OAlist_lookup_ntm ys ?k2 then Some Eq\n     else if OAlist_lookup_ntm xs ?k2 = (0::'b) then Some Lt\n          else if OAlist_lookup_ntm ys ?k2 = (0::'b) then Some Gt else None)\n 4. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n                         fst ` set (fst (list_of_oalist_ntm ys));\n        ko.lt (key_order_of_nat_term_order_inv cmp_term) k' ?k2\\<rbrakk>\n       \\<Longrightarrow> (if OAlist_lookup_ntm xs k' =\n                             OAlist_lookup_ntm ys k'\n                          then Some Eq\n                          else if OAlist_lookup_ntm xs k' = (0::'b)\n                               then Some Lt\n                               else if OAlist_lookup_ntm ys k' = (0::'b)\n                                    then Some Gt else None) =\n                         Some Eq", "from 1"], ["proof (chain)\npicking this:\n  v \\<in> keys (MP_oalist xs) \\<union> keys (MP_oalist ys)", "show \"v \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union> fst ` set (fst (list_of_oalist_ntm ys))\""], ["proof (prove)\nusing this:\n  v \\<in> keys (MP_oalist xs) \\<union> keys (MP_oalist ys)\n\ngoal (1 subgoal):\n 1. v \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n            fst ` set (fst (list_of_oalist_ntm ys))", "by (simp add: keys_MP_oalist)"], ["proof (state)\nthis:\n  v \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n          fst ` set (fst (list_of_oalist_ntm ys))\n\ngoal (3 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n 2. comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    (if OAlist_lookup_ntm xs v = OAlist_lookup_ntm ys v then Some Eq\n     else if OAlist_lookup_ntm xs v = (0::'b) then Some Lt\n          else if OAlist_lookup_ntm ys v = (0::'b) then Some Gt else None)\n 3. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n                         fst ` set (fst (list_of_oalist_ntm ys));\n        ko.lt (key_order_of_nat_term_order_inv cmp_term) k' v\\<rbrakk>\n       \\<Longrightarrow> (if OAlist_lookup_ntm xs k' =\n                             OAlist_lookup_ntm ys k'\n                          then Some Eq\n                          else if OAlist_lookup_ntm xs k' = (0::'b)\n                               then Some Lt\n                               else if OAlist_lookup_ntm ys k' = (0::'b)\n                                    then Some Gt else None) =\n                         Some Eq", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n 2. comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    (if OAlist_lookup_ntm xs v = OAlist_lookup_ntm ys v then Some Eq\n     else if OAlist_lookup_ntm xs v = (0::'b) then Some Lt\n          else if OAlist_lookup_ntm ys v = (0::'b) then Some Gt else None)\n 3. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n                         fst ` set (fst (list_of_oalist_ntm ys));\n        ko.lt (key_order_of_nat_term_order_inv cmp_term) k' v\\<rbrakk>\n       \\<Longrightarrow> (if OAlist_lookup_ntm xs k' =\n                             OAlist_lookup_ntm ys k'\n                          then Some Eq\n                          else if OAlist_lookup_ntm xs k' = (0::'b)\n                               then Some Lt\n                               else if OAlist_lookup_ntm ys k' = (0::'b)\n                                    then Some Gt else None) =\n                         Some Eq", "from 2"], ["proof (chain)\npicking this:\n  lookup (MP_oalist xs) v \\<noteq> lookup (MP_oalist ys) v", "have 4: \"OAlist_lookup_ntm xs v \\<noteq> OAlist_lookup_ntm ys v\""], ["proof (prove)\nusing this:\n  lookup (MP_oalist xs) v \\<noteq> lookup (MP_oalist ys) v\n\ngoal (1 subgoal):\n 1. OAlist_lookup_ntm xs v \\<noteq> OAlist_lookup_ntm ys v", "by simp"], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs v \\<noteq> OAlist_lookup_ntm ys v\n\ngoal (3 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n 2. comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    (if OAlist_lookup_ntm xs v = OAlist_lookup_ntm ys v then Some Eq\n     else if OAlist_lookup_ntm xs v = (0::'b) then Some Lt\n          else if OAlist_lookup_ntm ys v = (0::'b) then Some Gt else None)\n 3. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n                         fst ` set (fst (list_of_oalist_ntm ys));\n        ko.lt (key_order_of_nat_term_order_inv cmp_term) k' v\\<rbrakk>\n       \\<Longrightarrow> (if OAlist_lookup_ntm xs k' =\n                             OAlist_lookup_ntm ys k'\n                          then Some Eq\n                          else if OAlist_lookup_ntm xs k' = (0::'b)\n                               then Some Lt\n                               else if OAlist_lookup_ntm ys k' = (0::'b)\n                                    then Some Gt else None) =\n                         Some Eq", "show \"comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n            (if OAlist_lookup_ntm xs v = OAlist_lookup_ntm ys v then Some Eq\n             else if OAlist_lookup_ntm xs v = 0 then Some Lt\n             else if OAlist_lookup_ntm ys v = 0 then Some Gt else None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n    (if OAlist_lookup_ntm xs v = OAlist_lookup_ntm ys v then Some Eq\n     else if OAlist_lookup_ntm xs v = (0::'b) then Some Lt\n          else if OAlist_lookup_ntm ys v = (0::'b) then Some Gt else None)", "proof (simp add: 4, intro conjI impI)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v = (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v = (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Gt\n 3. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 4. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "assume \"OAlist_lookup_ntm ys v = 0\" and \"OAlist_lookup_ntm xs v = 0\""], ["proof (state)\nthis:\n  OAlist_lookup_ntm ys v = (0::'b)\n  OAlist_lookup_ntm xs v = (0::'b)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v = (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v = (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Gt\n 3. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 4. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "with 4"], ["proof (chain)\npicking this:\n  OAlist_lookup_ntm xs v \\<noteq> OAlist_lookup_ntm ys v\n  OAlist_lookup_ntm ys v = (0::'b)\n  OAlist_lookup_ntm xs v = (0::'b)", "show \"comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\""], ["proof (prove)\nusing this:\n  OAlist_lookup_ntm xs v \\<noteq> OAlist_lookup_ntm ys v\n  OAlist_lookup_ntm ys v = (0::'b)\n  OAlist_lookup_ntm xs v = (0::'b)\n\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt", "by simp"], ["proof (state)\nthis:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n\ngoal (3 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v = (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Gt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 3. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v = (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Gt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 3. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "assume \"OAlist_lookup_ntm xs v \\<noteq> 0\" and \"OAlist_lookup_ntm ys v = 0\""], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs v \\<noteq> (0::'b)\n  OAlist_lookup_ntm ys v = (0::'b)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v = (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Gt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 3. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "hence \"lookup (MP_oalist ys) v = 0\" and \"lookup (MP_oalist xs) v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  OAlist_lookup_ntm xs v \\<noteq> (0::'b)\n  OAlist_lookup_ntm ys v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist ys) v = (0::'b) &&&\n    lookup (MP_oalist xs) v \\<noteq> (0::'b)", "by simp_all"], ["proof (state)\nthis:\n  lookup (MP_oalist ys) v = (0::'b)\n  lookup (MP_oalist xs) v \\<noteq> (0::'b)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v = (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Gt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 3. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "hence \"ord_strict_p (MP_oalist ys) (MP_oalist xs)\""], ["proof (prove)\nusing this:\n  lookup (MP_oalist ys) v = (0::'b)\n  lookup (MP_oalist xs) v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. ord_strict_p (MP_oalist ys) (MP_oalist xs)", "using 3[symmetric]"], ["proof (prove)\nusing this:\n  lookup (MP_oalist ys) v = (0::'b)\n  lookup (MP_oalist xs) v \\<noteq> (0::'b)\n  lt_of_nat_term_order cmp_term v ?u \\<Longrightarrow>\n  lookup (MP_oalist ys) ?u = lookup (MP_oalist xs) ?u\n\ngoal (1 subgoal):\n 1. ord_strict_p (MP_oalist ys) (MP_oalist xs)", "by (rule ord_strict_pI)"], ["proof (state)\nthis:\n  ord_strict_p (MP_oalist ys) (MP_oalist xs)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v = (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Gt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 3. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "with neq"], ["proof (chain)\npicking this:\n  MP_oalist xs \\<noteq> MP_oalist ys\n  ord_strict_p (MP_oalist ys) (MP_oalist xs)", "show \"comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Gt\""], ["proof (prove)\nusing this:\n  MP_oalist xs \\<noteq> MP_oalist ys\n  ord_strict_p (MP_oalist ys) (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Gt", "by (auto simp: comp_opt_p_def)"], ["proof (state)\nthis:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Gt\n\ngoal (2 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "assume \"OAlist_lookup_ntm ys v \\<noteq> 0\" and \"OAlist_lookup_ntm xs v = 0\""], ["proof (state)\nthis:\n  OAlist_lookup_ntm ys v \\<noteq> (0::'b)\n  OAlist_lookup_ntm xs v = (0::'b)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "hence \"lookup (MP_oalist xs) v = 0\" and \"lookup (MP_oalist ys) v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  OAlist_lookup_ntm ys v \\<noteq> (0::'b)\n  OAlist_lookup_ntm xs v = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist xs) v = (0::'b) &&&\n    lookup (MP_oalist ys) v \\<noteq> (0::'b)", "by simp_all"], ["proof (state)\nthis:\n  lookup (MP_oalist xs) v = (0::'b)\n  lookup (MP_oalist ys) v \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "hence \"ord_strict_p (MP_oalist xs) (MP_oalist ys)\""], ["proof (prove)\nusing this:\n  lookup (MP_oalist xs) v = (0::'b)\n  lookup (MP_oalist ys) v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. ord_strict_p (MP_oalist xs) (MP_oalist ys)", "using 3"], ["proof (prove)\nusing this:\n  lookup (MP_oalist xs) v = (0::'b)\n  lookup (MP_oalist ys) v \\<noteq> (0::'b)\n  lt_of_nat_term_order cmp_term v ?u30 \\<Longrightarrow>\n  lookup (MP_oalist xs) ?u30 = lookup (MP_oalist ys) ?u30\n\ngoal (1 subgoal):\n 1. ord_strict_p (MP_oalist xs) (MP_oalist ys)", "by (rule ord_strict_pI)"], ["proof (state)\nthis:\n  ord_strict_p (MP_oalist xs) (MP_oalist ys)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n 2. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "with neq"], ["proof (chain)\npicking this:\n  MP_oalist xs \\<noteq> MP_oalist ys\n  ord_strict_p (MP_oalist xs) (MP_oalist ys)", "show \"comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\""], ["proof (prove)\nusing this:\n  MP_oalist xs \\<noteq> MP_oalist ys\n  ord_strict_p (MP_oalist xs) (MP_oalist ys)\n\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt", "by (auto simp: comp_opt_p_def)"], ["proof (state)\nthis:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) = Some Lt\n\ngoal (1 subgoal):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "assume \"OAlist_lookup_ntm xs v \\<noteq> 0\""], ["proof (state)\nthis:\n  OAlist_lookup_ntm xs v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "hence \"lookup (MP_oalist xs) v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  OAlist_lookup_ntm xs v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist xs) v \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup (MP_oalist xs) v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "with 2"], ["proof (chain)\npicking this:\n  lookup (MP_oalist xs) v \\<noteq> lookup (MP_oalist ys) v\n  lookup (MP_oalist xs) v \\<noteq> (0::'b)", "have a: \"\\<not> ord_strict_p (MP_oalist xs) (MP_oalist ys)\""], ["proof (prove)\nusing this:\n  lookup (MP_oalist xs) v \\<noteq> lookup (MP_oalist ys) v\n  lookup (MP_oalist xs) v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> ord_strict_p (MP_oalist xs) (MP_oalist ys)", "using 3"], ["proof (prove)\nusing this:\n  lookup (MP_oalist xs) v \\<noteq> lookup (MP_oalist ys) v\n  lookup (MP_oalist xs) v \\<noteq> (0::'b)\n  lt_of_nat_term_order cmp_term v ?u30 \\<Longrightarrow>\n  lookup (MP_oalist xs) ?u30 = lookup (MP_oalist ys) ?u30\n\ngoal (1 subgoal):\n 1. \\<not> ord_strict_p (MP_oalist xs) (MP_oalist ys)", "by (rule not_ord_strict_pI)"], ["proof (state)\nthis:\n  \\<not> ord_strict_p (MP_oalist xs) (MP_oalist ys)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "assume \"OAlist_lookup_ntm ys v \\<noteq> 0\""], ["proof (state)\nthis:\n  OAlist_lookup_ntm ys v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "hence \"lookup (MP_oalist ys) v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  OAlist_lookup_ntm ys v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist ys) v \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup (MP_oalist ys) v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "with 2[symmetric]"], ["proof (chain)\npicking this:\n  lookup (MP_oalist ys) v \\<noteq> lookup (MP_oalist xs) v\n  lookup (MP_oalist ys) v \\<noteq> (0::'b)", "have \"\\<not> ord_strict_p (MP_oalist ys) (MP_oalist xs)\""], ["proof (prove)\nusing this:\n  lookup (MP_oalist ys) v \\<noteq> lookup (MP_oalist xs) v\n  lookup (MP_oalist ys) v \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> ord_strict_p (MP_oalist ys) (MP_oalist xs)", "using 3[symmetric]"], ["proof (prove)\nusing this:\n  lookup (MP_oalist ys) v \\<noteq> lookup (MP_oalist xs) v\n  lookup (MP_oalist ys) v \\<noteq> (0::'b)\n  lt_of_nat_term_order cmp_term v ?u \\<Longrightarrow>\n  lookup (MP_oalist ys) ?u = lookup (MP_oalist xs) ?u\n\ngoal (1 subgoal):\n 1. \\<not> ord_strict_p (MP_oalist ys) (MP_oalist xs)", "by (rule not_ord_strict_pI)"], ["proof (state)\nthis:\n  \\<not> ord_strict_p (MP_oalist ys) (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>OAlist_lookup_ntm ys v \\<noteq> (0::'b);\n     OAlist_lookup_ntm xs v \\<noteq> (0::'b)\\<rbrakk>\n    \\<Longrightarrow> comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "with neq a"], ["proof (chain)\npicking this:\n  MP_oalist xs \\<noteq> MP_oalist ys\n  \\<not> ord_strict_p (MP_oalist xs) (MP_oalist ys)\n  \\<not> ord_strict_p (MP_oalist ys) (MP_oalist xs)", "show \"comp_opt_p (MP_oalist xs) (MP_oalist ys) = None\""], ["proof (prove)\nusing this:\n  MP_oalist xs \\<noteq> MP_oalist ys\n  \\<not> ord_strict_p (MP_oalist xs) (MP_oalist ys)\n  \\<not> ord_strict_p (MP_oalist ys) (MP_oalist xs)\n\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) = None", "by (auto simp: comp_opt_p_def)"], ["proof (state)\nthis:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) = None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n  (if OAlist_lookup_ntm xs v = OAlist_lookup_ntm ys v then Some Eq\n   else if OAlist_lookup_ntm xs v = (0::'b) then Some Lt\n        else if OAlist_lookup_ntm ys v = (0::'b) then Some Gt else None)\n\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n 2. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n                         fst ` set (fst (list_of_oalist_ntm ys));\n        ko.lt (key_order_of_nat_term_order_inv cmp_term) k' v\\<rbrakk>\n       \\<Longrightarrow> (if OAlist_lookup_ntm xs k' =\n                             OAlist_lookup_ntm ys k'\n                          then Some Eq\n                          else if OAlist_lookup_ntm xs k' = (0::'b)\n                               then Some Lt\n                               else if OAlist_lookup_ntm ys k' = (0::'b)\n                                    then Some Gt else None) =\n                         Some Eq", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n 2. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n                         fst ` set (fst (list_of_oalist_ntm ys));\n        ko.lt (key_order_of_nat_term_order_inv cmp_term) k' v\\<rbrakk>\n       \\<Longrightarrow> (if OAlist_lookup_ntm xs k' =\n                             OAlist_lookup_ntm ys k'\n                          then Some Eq\n                          else if OAlist_lookup_ntm xs k' = (0::'b)\n                               then Some Lt\n                               else if OAlist_lookup_ntm ys k' = (0::'b)\n                                    then Some Gt else None) =\n                         Some Eq", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n 2. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n                         fst ` set (fst (list_of_oalist_ntm ys));\n        ko.lt (key_order_of_nat_term_order_inv cmp_term) k' v\\<rbrakk>\n       \\<Longrightarrow> (if OAlist_lookup_ntm xs k' =\n                             OAlist_lookup_ntm ys k'\n                          then Some Eq\n                          else if OAlist_lookup_ntm xs k' = (0::'b)\n                               then Some Lt\n                               else if OAlist_lookup_ntm ys k' = (0::'b)\n                                    then Some Gt else None) =\n                         Some Eq", "assume \"ko.lt (key_order_of_nat_term_order_inv cmp_term) u v\""], ["proof (state)\nthis:\n  ko.lt (key_order_of_nat_term_order_inv cmp_term) u v\n\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n 2. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n                         fst ` set (fst (list_of_oalist_ntm ys));\n        ko.lt (key_order_of_nat_term_order_inv cmp_term) k' v\\<rbrakk>\n       \\<Longrightarrow> (if OAlist_lookup_ntm xs k' =\n                             OAlist_lookup_ntm ys k'\n                          then Some Eq\n                          else if OAlist_lookup_ntm xs k' = (0::'b)\n                               then Some Lt\n                               else if OAlist_lookup_ntm ys k' = (0::'b)\n                                    then Some Gt else None) =\n                         Some Eq", "hence \"lt_of_nat_term_order cmp_term v u\""], ["proof (prove)\nusing this:\n  ko.lt (key_order_of_nat_term_order_inv cmp_term) u v\n\ngoal (1 subgoal):\n 1. lt_of_nat_term_order cmp_term v u", "by (simp only: lt_of_nat_term_order_alt)"], ["proof (state)\nthis:\n  lt_of_nat_term_order cmp_term v u\n\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n 2. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n                         fst ` set (fst (list_of_oalist_ntm ys));\n        ko.lt (key_order_of_nat_term_order_inv cmp_term) k' v\\<rbrakk>\n       \\<Longrightarrow> (if OAlist_lookup_ntm xs k' =\n                             OAlist_lookup_ntm ys k'\n                          then Some Eq\n                          else if OAlist_lookup_ntm xs k' = (0::'b)\n                               then Some Lt\n                               else if OAlist_lookup_ntm ys k' = (0::'b)\n                                    then Some Gt else None) =\n                         Some Eq", "hence \"lookup (MP_oalist xs) u = lookup (MP_oalist ys) u\""], ["proof (prove)\nusing this:\n  lt_of_nat_term_order cmp_term v u\n\ngoal (1 subgoal):\n 1. lookup (MP_oalist xs) u = lookup (MP_oalist ys) u", "by (rule 3)"], ["proof (state)\nthis:\n  lookup (MP_oalist xs) u = lookup (MP_oalist ys) u\n\ngoal (2 subgoals):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq\n 2. \\<And>k'.\n       \\<lbrakk>k' \\<in> fst ` set (fst (list_of_oalist_ntm xs)) \\<union>\n                         fst ` set (fst (list_of_oalist_ntm ys));\n        ko.lt (key_order_of_nat_term_order_inv cmp_term) k' v\\<rbrakk>\n       \\<Longrightarrow> (if OAlist_lookup_ntm xs k' =\n                             OAlist_lookup_ntm ys k'\n                          then Some Eq\n                          else if OAlist_lookup_ntm xs k' = (0::'b)\n                               then Some Lt\n                               else if OAlist_lookup_ntm ys k' = (0::'b)\n                                    then Some Gt else None) =\n                         Some Eq", "thus \"(if OAlist_lookup_ntm xs u = OAlist_lookup_ntm ys u then Some Eq\n            else if OAlist_lookup_ntm xs u = 0 then Some Lt\n            else if OAlist_lookup_ntm ys u = 0 then Some Gt else None) = Some Eq\""], ["proof (prove)\nusing this:\n  lookup (MP_oalist xs) u = lookup (MP_oalist ys) u\n\ngoal (1 subgoal):\n 1. (if OAlist_lookup_ntm xs u = OAlist_lookup_ntm ys u then Some Eq\n     else if OAlist_lookup_ntm xs u = (0::'b) then Some Lt\n          else if OAlist_lookup_ntm ys u = (0::'b) then Some Gt else None) =\n    Some Eq", "by simp"], ["proof (state)\nthis:\n  (if OAlist_lookup_ntm xs u = OAlist_lookup_ntm ys u then Some Eq\n   else if OAlist_lookup_ntm xs u = (0::'b) then Some Lt\n        else if OAlist_lookup_ntm ys u = (0::'b) then Some Gt else None) =\n  Some Eq\n\ngoal (1 subgoal):\n 1. comp_opt_p (MP_oalist xs) (MP_oalist ys) \\<noteq> Some Eq", "qed fact"], ["proof (state)\nthis:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n  OAlist_lex_ord_ntm cmp_term\n   (\\<lambda>_ x y.\n       if x = y then Some Eq\n       else if x = (0::'b) then Some Lt\n            else if y = (0::'b) then Some Gt else None)\n   xs ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  comp_opt_p (MP_oalist xs) (MP_oalist ys) =\n  OAlist_lex_ord_ntm cmp_term\n   (\\<lambda>_ x y.\n       if x = y then Some Eq\n       else if x = (0::'b) then Some Lt\n            else if y = (0::'b) then Some Gt else None)\n   xs ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma compute_ord_p [code]: \"ord_p p q = (let aux = comp_opt_p p q in aux = Some Lt \\<or> aux = Some Eq)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_p p q =\n    (let aux = comp_opt_p p q in aux = Some Lt \\<or> aux = Some Eq)", "by (auto simp: ord_p_def comp_opt_p_def)"], ["", "lemma compute_ord_p_strict [code]: \"ord_strict_p p q = (comp_opt_p p q = Some Lt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_strict_p p q = (comp_opt_p p q = Some Lt)", "by (auto simp: comp_opt_p_def)"], ["", "lemma keys_to_list_MP_oalist [code]: \"keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "have eq: \"ko.lt (key_order_of_nat_term_order_inv cmp_term) = ord_term_strict_conv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ko.lt (key_order_of_nat_term_order_inv cmp_term) = ord_term_strict_conv", "by (intro ext, simp add: lt_of_nat_term_order_alt)"], ["proof (state)\nthis:\n  ko.lt (key_order_of_nat_term_order_inv cmp_term) = ord_term_strict_conv\n\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "have 1: \"irreflp ord_term_strict_conv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflp ord_term_strict_conv", "by (rule irreflpI, simp)"], ["proof (state)\nthis:\n  irreflp ord_term_strict_conv\n\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "have 2: \"transp ord_term_strict_conv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp ord_term_strict_conv", "by (rule transpI, simp)"], ["proof (state)\nthis:\n  transp ord_term_strict_conv\n\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "have \"antisymp ord_term_strict_conv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymp ord_term_strict_conv", "by (rule antisympI, simp)"], ["proof (state)\nthis:\n  antisymp ord_term_strict_conv\n\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "moreover"], ["proof (state)\nthis:\n  antisymp ord_term_strict_conv\n\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "have 3: \"sorted_wrt ord_term_strict_conv (keys_to_list (MP_oalist xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt ord_term_strict_conv (keys_to_list (MP_oalist xs))", "unfolding keys_to_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt ord_term_strict_conv (pps_to_list (keys (MP_oalist xs)))", "by (fact pps_to_list_sorted_wrt)"], ["proof (state)\nthis:\n  sorted_wrt ord_term_strict_conv (keys_to_list (MP_oalist xs))\n\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "moreover"], ["proof (state)\nthis:\n  sorted_wrt ord_term_strict_conv (keys_to_list (MP_oalist xs))\n\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "note _"], ["proof (state)\nthis:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "moreover"], ["proof (state)\nthis:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "have 4: \"sorted_wrt ord_term_strict_conv (OAlist_sorted_domain_ntm cmp_term xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt ord_term_strict_conv (OAlist_sorted_domain_ntm cmp_term xs)", "unfolding eq[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (ko.lt (key_order_of_nat_term_order_inv cmp_term))\n     (OAlist_sorted_domain_ntm cmp_term xs)", "by (fact oa_ntm.sorted_sorted_domain)"], ["proof (state)\nthis:\n  sorted_wrt ord_term_strict_conv (OAlist_sorted_domain_ntm cmp_term xs)\n\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "ultimately"], ["proof (chain)\npicking this:\n  antisymp ord_term_strict_conv\n  sorted_wrt ord_term_strict_conv (keys_to_list (MP_oalist xs))\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  sorted_wrt ord_term_strict_conv (OAlist_sorted_domain_ntm cmp_term xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  antisymp ord_term_strict_conv\n  sorted_wrt ord_term_strict_conv (keys_to_list (MP_oalist xs))\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  sorted_wrt ord_term_strict_conv (OAlist_sorted_domain_ntm cmp_term xs)\n\ngoal (1 subgoal):\n 1. keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs", "proof (rule sorted_wrt_distinct_set_unique)"], ["proof (state)\ngoal (3 subgoals):\n 1. distinct (keys_to_list (MP_oalist xs))\n 2. distinct (OAlist_sorted_domain_ntm cmp_term xs)\n 3. set (keys_to_list (MP_oalist xs)) =\n    set (OAlist_sorted_domain_ntm cmp_term xs)", "from 1 2 3"], ["proof (chain)\npicking this:\n  irreflp ord_term_strict_conv\n  transp ord_term_strict_conv\n  sorted_wrt ord_term_strict_conv (keys_to_list (MP_oalist xs))", "show \"distinct (keys_to_list (MP_oalist xs))\""], ["proof (prove)\nusing this:\n  irreflp ord_term_strict_conv\n  transp ord_term_strict_conv\n  sorted_wrt ord_term_strict_conv (keys_to_list (MP_oalist xs))\n\ngoal (1 subgoal):\n 1. distinct (keys_to_list (MP_oalist xs))", "by (rule distinct_sorted_wrt_irrefl)"], ["proof (state)\nthis:\n  distinct (keys_to_list (MP_oalist xs))\n\ngoal (2 subgoals):\n 1. distinct (OAlist_sorted_domain_ntm cmp_term xs)\n 2. set (keys_to_list (MP_oalist xs)) =\n    set (OAlist_sorted_domain_ntm cmp_term xs)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. distinct (OAlist_sorted_domain_ntm cmp_term xs)\n 2. set (keys_to_list (MP_oalist xs)) =\n    set (OAlist_sorted_domain_ntm cmp_term xs)", "from 1 2 4"], ["proof (chain)\npicking this:\n  irreflp ord_term_strict_conv\n  transp ord_term_strict_conv\n  sorted_wrt ord_term_strict_conv (OAlist_sorted_domain_ntm cmp_term xs)", "show \"distinct (OAlist_sorted_domain_ntm cmp_term xs)\""], ["proof (prove)\nusing this:\n  irreflp ord_term_strict_conv\n  transp ord_term_strict_conv\n  sorted_wrt ord_term_strict_conv (OAlist_sorted_domain_ntm cmp_term xs)\n\ngoal (1 subgoal):\n 1. distinct (OAlist_sorted_domain_ntm cmp_term xs)", "by (rule distinct_sorted_wrt_irrefl)"], ["proof (state)\nthis:\n  distinct (OAlist_sorted_domain_ntm cmp_term xs)\n\ngoal (1 subgoal):\n 1. set (keys_to_list (MP_oalist xs)) =\n    set (OAlist_sorted_domain_ntm cmp_term xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set (keys_to_list (MP_oalist xs)) =\n    set (OAlist_sorted_domain_ntm cmp_term xs)", "show \"set (keys_to_list (MP_oalist xs)) = set (OAlist_sorted_domain_ntm cmp_term xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (keys_to_list (MP_oalist xs)) =\n    set (OAlist_sorted_domain_ntm cmp_term xs)", "by (simp add: set_keys_to_list keys_MP_oalist oa_ntm.set_sorted_domain)"], ["proof (state)\nthis:\n  set (keys_to_list (MP_oalist xs)) =\n  set (OAlist_sorted_domain_ntm cmp_term xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  keys_to_list (MP_oalist xs) = OAlist_sorted_domain_ntm cmp_term xs\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* ordered_nat_term *)"], ["", "lifting_update poly_mapping.lifting"], ["", "lifting_forget poly_mapping.lifting"], ["", "subsection \\<open>Interpretations\\<close>"], ["", "lemma term_powerprod_gd_term:\n  fixes pair_of_term :: \"'t::nat_term \\<Rightarrow> ('a::{graded_dickson_powerprod,nat_pp_compare} \\<times> 'k::{the_min,wellorder})\"\n  assumes \"term_powerprod pair_of_term term_of_pair\"\n    and \"\\<And>v. fst (rep_nat_term v) = rep_nat_pp (fst (pair_of_term v))\"\n    and \"\\<And>t. snd (rep_nat_term (term_of_pair (t, the_min))) = 0\"\n    and \"\\<And>v w. snd (pair_of_term v) \\<le> snd (pair_of_term w) \\<Longrightarrow> snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\"\n    and \"\\<And>s t k. term_of_pair (s + t, k) = splus (term_of_pair (s, k)) (term_of_pair (t, k))\"\n    and \"\\<And>t v. term_powerprod.splus pair_of_term term_of_pair t v = splus (term_of_pair (t, the_min)) v\"\n  shows \"gd_term pair_of_term term_of_pair\n        (\\<lambda>s t. le_of_nat_term_order cmp_term (term_of_pair (s, the_min)) (term_of_pair (t, the_min)))\n        (\\<lambda>s t. lt_of_nat_term_order cmp_term (term_of_pair (s, the_min)) (term_of_pair (t, the_min)))\n        (le_of_nat_term_order cmp_term)\n        (lt_of_nat_term_order cmp_term)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_term pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term) (lt_of_nat_term_order cmp_term)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gd_term pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term) (lt_of_nat_term_order cmp_term)", "from assms(1)"], ["proof (chain)\npicking this:\n  term_powerprod pair_of_term term_of_pair", "interpret tp: term_powerprod pair_of_term term_of_pair"], ["proof (prove)\nusing this:\n  term_powerprod pair_of_term term_of_pair\n\ngoal (1 subgoal):\n 1. term_powerprod pair_of_term term_of_pair", "."], ["proof (state)\ngoal (1 subgoal):\n 1. gd_term pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term) (lt_of_nat_term_order cmp_term)", "let ?f = \"\\<lambda>x. term_of_pair (x, the_min)\""], ["proof (state)\ngoal (1 subgoal):\n 1. gd_term pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term) (lt_of_nat_term_order cmp_term)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_term pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term) (lt_of_nat_term_order cmp_term)", "proof (intro gd_term.intro ordered_term.intro)"], ["proof (state)\ngoal (4 subgoals):\n 1. term_powerprod pair_of_term term_of_pair\n 2. ordered_powerprod\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n 3. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)\n 4. ordered_term_axioms pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "from assms(1)"], ["proof (chain)\npicking this:\n  term_powerprod pair_of_term term_of_pair", "show \"term_powerprod pair_of_term term_of_pair\""], ["proof (prove)\nusing this:\n  term_powerprod pair_of_term term_of_pair\n\ngoal (1 subgoal):\n 1. term_powerprod pair_of_term term_of_pair", "."], ["proof (state)\nthis:\n  term_powerprod pair_of_term term_of_pair\n\ngoal (3 subgoals):\n 1. ordered_powerprod\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n 2. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)\n 3. ordered_term_axioms pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. ordered_powerprod\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n 2. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)\n 3. ordered_term_axioms pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "show \"ordered_powerprod (\\<lambda>s t. le_of_nat_term_order cmp_term (?f s) (?f t))\n                        (\\<lambda>s t. lt_of_nat_term_order cmp_term (?f s) (?f t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_powerprod\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))", "proof (intro ordered_powerprod.intro ordered_powerprod_axioms.intro)"], ["proof (state)\ngoal (3 subgoals):\n 1. class.linorder\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n 2. \\<And>t.\n       le_of_nat_term_order cmp_term (term_of_pair (0::'a, the_min))\n        (term_of_pair (t, the_min))\n 3. \\<And>s t u.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (term_of_pair (s + u, the_min))\n        (term_of_pair (t + u, the_min))", "show \"class.linorder (\\<lambda>s t. le_of_nat_term_order cmp_term (?f s) (?f t))\n                        (\\<lambda>s t. lt_of_nat_term_order cmp_term (?f s) (?f t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))", "proof (unfold_locales, simp_all add: lt_of_nat_term_order_alt le_of_nat_term_order_alt ko.linear ko.less_le_not_le)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>ko.le (key_order_of_nat_term_order_inv cmp_term)\n                 (term_of_pair (y, the_min)) (term_of_pair (x, the_min));\n        ko.le (key_order_of_nat_term_order_inv cmp_term)\n         (term_of_pair (x, the_min)) (term_of_pair (y, the_min))\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>ko.le (key_order_of_nat_term_order_inv cmp_term)\n                 (term_of_pair (y, the_min)) (term_of_pair (x, the_min));\n        ko.le (key_order_of_nat_term_order_inv cmp_term)\n         (term_of_pair (x, the_min)) (term_of_pair (y, the_min))\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"ko.le (key_order_of_nat_term_order_inv cmp_term) (term_of_pair (x, the_min)) (term_of_pair (y, the_min))\"\n          and \"ko.le (key_order_of_nat_term_order_inv cmp_term) (term_of_pair (y, the_min)) (term_of_pair (x, the_min))\""], ["proof (state)\nthis:\n  ko.le (key_order_of_nat_term_order_inv cmp_term)\n   (term_of_pair (x, the_min)) (term_of_pair (y, the_min))\n  ko.le (key_order_of_nat_term_order_inv cmp_term)\n   (term_of_pair (y, the_min)) (term_of_pair (x, the_min))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>ko.le (key_order_of_nat_term_order_inv cmp_term)\n                 (term_of_pair (y, the_min)) (term_of_pair (x, the_min));\n        ko.le (key_order_of_nat_term_order_inv cmp_term)\n         (term_of_pair (x, the_min)) (term_of_pair (y, the_min))\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"term_of_pair (x, the_min) = term_of_pair (y, the_min)\""], ["proof (prove)\nusing this:\n  ko.le (key_order_of_nat_term_order_inv cmp_term)\n   (term_of_pair (x, the_min)) (term_of_pair (y, the_min))\n  ko.le (key_order_of_nat_term_order_inv cmp_term)\n   (term_of_pair (y, the_min)) (term_of_pair (x, the_min))\n\ngoal (1 subgoal):\n 1. term_of_pair (x, the_min) = term_of_pair (y, the_min)", "by (rule ko.antisym)"], ["proof (state)\nthis:\n  term_of_pair (x, the_min) = term_of_pair (y, the_min)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>ko.le (key_order_of_nat_term_order_inv cmp_term)\n                 (term_of_pair (y, the_min)) (term_of_pair (x, the_min));\n        ko.le (key_order_of_nat_term_order_inv cmp_term)\n         (term_of_pair (x, the_min)) (term_of_pair (y, the_min))\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"(x, the_min) = (y, the_min::'k)\""], ["proof (prove)\nusing this:\n  term_of_pair (x, the_min) = term_of_pair (y, the_min)\n\ngoal (1 subgoal):\n 1. (x, the_min) = (y, the_min)", "by (rule tp.term_of_pair_injective)"], ["proof (state)\nthis:\n  (x, the_min) = (y, the_min)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>ko.le (key_order_of_nat_term_order_inv cmp_term)\n                 (term_of_pair (y, the_min)) (term_of_pair (x, the_min));\n        ko.le (key_order_of_nat_term_order_inv cmp_term)\n         (term_of_pair (x, the_min)) (term_of_pair (y, the_min))\\<rbrakk>\n       \\<Longrightarrow> x = y", "thus \"x = y\""], ["proof (prove)\nusing this:\n  (x, the_min) = (y, the_min)\n\ngoal (1 subgoal):\n 1. x = y", "by simp"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  class.linorder\n   (\\<lambda>s t.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)))\n   (\\<lambda>s t.\n       lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)))\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       le_of_nat_term_order cmp_term (term_of_pair (0::'a, the_min))\n        (term_of_pair (t, the_min))\n 2. \\<And>s t u.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (term_of_pair (s + u, the_min))\n        (term_of_pair (t + u, the_min))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       le_of_nat_term_order cmp_term (term_of_pair (0::'a, the_min))\n        (term_of_pair (t, the_min))\n 2. \\<And>s t u.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (term_of_pair (s + u, the_min))\n        (term_of_pair (t + u, the_min))", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       le_of_nat_term_order cmp_term (term_of_pair (0::'a, the_min))\n        (term_of_pair (t, the_min))\n 2. \\<And>s t u.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (term_of_pair (s + u, the_min))\n        (term_of_pair (t + u, the_min))", "show \"le_of_nat_term_order cmp_term (?f 0) (?f t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. le_of_nat_term_order cmp_term (term_of_pair (0::'a, the_min))\n     (term_of_pair (t, the_min))", "unfolding le_of_nat_term_order"], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_term_compare cmp_term (term_of_pair (0::'a, the_min))\n     (term_of_pair (t, the_min)) \\<noteq>\n    Gt", "by (rule nat_term_compD1', fact comparator_nat_term_compare, fact nat_term_comp_nat_term_compare,\n            simp add: assms(3), simp add: assms(2) zero_pp tp.pair_term)"], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term (term_of_pair (0::'a, the_min))\n   (term_of_pair (t, the_min))\n\ngoal (1 subgoal):\n 1. \\<And>s t u.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (term_of_pair (s + u, the_min))\n        (term_of_pair (t + u, the_min))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t u.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (term_of_pair (s + u, the_min))\n        (term_of_pair (t + u, the_min))", "fix s t u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t u.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (term_of_pair (s + u, the_min))\n        (term_of_pair (t + u, the_min))", "assume \"le_of_nat_term_order cmp_term (?f s) (?f t)\""], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n   (term_of_pair (t, the_min))\n\ngoal (1 subgoal):\n 1. \\<And>s t u.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (term_of_pair (s + u, the_min))\n        (term_of_pair (t + u, the_min))", "hence \"le_of_nat_term_order cmp_term (?f (u + s)) (?f (u + t))\""], ["proof (prove)\nusing this:\n  le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n   (term_of_pair (t, the_min))\n\ngoal (1 subgoal):\n 1. le_of_nat_term_order cmp_term (term_of_pair (u + s, the_min))\n     (term_of_pair (u + t, the_min))", "by (simp add: le_of_nat_term_order assms(5) nat_term_compare_splus)"], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term (term_of_pair (u + s, the_min))\n   (term_of_pair (u + t, the_min))\n\ngoal (1 subgoal):\n 1. \\<And>s t u.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (term_of_pair (s + u, the_min))\n        (term_of_pair (t + u, the_min))", "thus \"le_of_nat_term_order cmp_term (?f (s + u)) (?f (t + u))\""], ["proof (prove)\nusing this:\n  le_of_nat_term_order cmp_term (term_of_pair (u + s, the_min))\n   (term_of_pair (u + t, the_min))\n\ngoal (1 subgoal):\n 1. le_of_nat_term_order cmp_term (term_of_pair (s + u, the_min))\n     (term_of_pair (t + u, the_min))", "by (simp only: ac_simps)"], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term (term_of_pair (s + u, the_min))\n   (term_of_pair (t + u, the_min))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ordered_powerprod\n   (\\<lambda>s t.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)))\n   (\\<lambda>s t.\n       lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)))\n\ngoal (2 subgoals):\n 1. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)\n 2. ordered_term_axioms pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)\n 2. ordered_term_axioms pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "show \"class.linorder (le_of_nat_term_order cmp_term) (lt_of_nat_term_order cmp_term)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)", "by (fact linorder_le_of_nat_term_order)"], ["proof (state)\nthis:\n  class.linorder (le_of_nat_term_order cmp_term)\n   (lt_of_nat_term_order cmp_term)\n\ngoal (1 subgoal):\n 1. ordered_term_axioms pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ordered_term_axioms pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "show \"ordered_term_axioms pair_of_term term_of_pair (\\<lambda>s t. le_of_nat_term_order cmp_term (?f s) (?f t))\n       (le_of_nat_term_order cmp_term)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_term_axioms pair_of_term term_of_pair\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n          (term_of_pair (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v w t.\n       le_of_nat_term_order cmp_term v w \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (t \\<oplus> v) (t \\<oplus> w)\n 2. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "fix v w t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v w t.\n       le_of_nat_term_order cmp_term v w \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (t \\<oplus> v) (t \\<oplus> w)\n 2. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "assume \"le_of_nat_term_order cmp_term v w\""], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term v w\n\ngoal (2 subgoals):\n 1. \\<And>v w t.\n       le_of_nat_term_order cmp_term v w \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (t \\<oplus> v) (t \\<oplus> w)\n 2. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "thus \"le_of_nat_term_order cmp_term (t \\<oplus> v) (t \\<oplus> w)\""], ["proof (prove)\nusing this:\n  le_of_nat_term_order cmp_term v w\n\ngoal (1 subgoal):\n 1. le_of_nat_term_order cmp_term (t \\<oplus> v) (t \\<oplus> w)", "by (simp add: le_of_nat_term_order assms(6) nat_term_compare_splus)"], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term (t \\<oplus> v) (t \\<oplus> w)\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "fix v w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "assume \"le_of_nat_term_order cmp_term (?f (tp.pp_of_term v)) (?f (tp.pp_of_term w))\""], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term (term_of_pair (tp.pp_of_term v, the_min))\n   (term_of_pair (tp.pp_of_term w, the_min))\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "hence 3: \"nat_term_compare cmp_term (?f (tp.pp_of_term v)) (?f (tp.pp_of_term w)) \\<noteq> Gt\""], ["proof (prove)\nusing this:\n  le_of_nat_term_order cmp_term (term_of_pair (tp.pp_of_term v, the_min))\n   (term_of_pair (tp.pp_of_term w, the_min))\n\ngoal (1 subgoal):\n 1. nat_term_compare cmp_term (term_of_pair (tp.pp_of_term v, the_min))\n     (term_of_pair (tp.pp_of_term w, the_min)) \\<noteq>\n    Gt", "by (simp add: le_of_nat_term_order)"], ["proof (state)\nthis:\n  nat_term_compare cmp_term (term_of_pair (tp.pp_of_term v, the_min))\n   (term_of_pair (tp.pp_of_term w, the_min)) \\<noteq>\n  Gt\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "assume \"tp.component_of_term v \\<le> tp.component_of_term w\""], ["proof (state)\nthis:\n  tp.component_of_term v \\<le> tp.component_of_term w\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "hence 4: \"snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\""], ["proof (prove)\nusing this:\n  tp.component_of_term v \\<le> tp.component_of_term w\n\ngoal (1 subgoal):\n 1. snd (rep_nat_term v) \\<le> snd (rep_nat_term w)", "by (simp add: tp.component_of_term_def assms(4))"], ["proof (state)\nthis:\n  snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "note comparator_nat_term_compare nat_term_comp_nat_term_compare"], ["proof (state)\nthis:\n  comparator (nat_term_compare ?to)\n  nat_term_comp (nat_term_compare ?to)\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "moreover"], ["proof (state)\nthis:\n  comparator (nat_term_compare ?to)\n  nat_term_comp (nat_term_compare ?to)\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "have \"fst (rep_nat_term v) = fst (rep_nat_term (?f (tp.pp_of_term v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (rep_nat_term v) =\n    fst (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min)))", "by (simp add: assms(2) tp.pp_of_term_def tp.pair_term)"], ["proof (state)\nthis:\n  fst (rep_nat_term v) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min)))\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "moreover"], ["proof (state)\nthis:\n  fst (rep_nat_term v) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min)))\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "have \"fst (rep_nat_term w) = fst (rep_nat_term (?f (tp.pp_of_term w)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (rep_nat_term w) =\n    fst (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))", "by (simp add: assms(2) tp.pp_of_term_def tp.pair_term)"], ["proof (state)\nthis:\n  fst (rep_nat_term w) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "moreover"], ["proof (state)\nthis:\n  fst (rep_nat_term w) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "note 4"], ["proof (state)\nthis:\n  snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "moreover"], ["proof (state)\nthis:\n  snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "have \"snd (rep_nat_term (?f (tp.pp_of_term v))) = snd (rep_nat_term (?f (tp.pp_of_term w)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min))) =\n    snd (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))", "by (simp add: assms(3))"], ["proof (state)\nthis:\n  snd (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min))) =\n  snd (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>le_of_nat_term_order cmp_term\n                 (term_of_pair (tp.pp_of_term v, the_min))\n                 (term_of_pair (tp.pp_of_term w, the_min));\n        tp.component_of_term v \\<le> tp.component_of_term w\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term v w", "ultimately"], ["proof (chain)\npicking this:\n  comparator (nat_term_compare ?to)\n  nat_term_comp (nat_term_compare ?to)\n  fst (rep_nat_term v) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min)))\n  fst (rep_nat_term w) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))\n  snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\n  snd (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min))) =\n  snd (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))", "show \"le_of_nat_term_order cmp_term v w\""], ["proof (prove)\nusing this:\n  comparator (nat_term_compare ?to)\n  nat_term_comp (nat_term_compare ?to)\n  fst (rep_nat_term v) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min)))\n  fst (rep_nat_term w) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))\n  snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\n  snd (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min))) =\n  snd (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))\n\ngoal (1 subgoal):\n 1. le_of_nat_term_order cmp_term v w", "unfolding le_of_nat_term_order"], ["proof (prove)\nusing this:\n  comparator (nat_term_compare ?to)\n  nat_term_comp (nat_term_compare ?to)\n  fst (rep_nat_term v) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min)))\n  fst (rep_nat_term w) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))\n  snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\n  snd (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min))) =\n  snd (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))\n\ngoal (1 subgoal):\n 1. nat_term_compare cmp_term v w \\<noteq> Gt", "using 3"], ["proof (prove)\nusing this:\n  comparator (nat_term_compare ?to)\n  nat_term_comp (nat_term_compare ?to)\n  fst (rep_nat_term v) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min)))\n  fst (rep_nat_term w) =\n  fst (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))\n  snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\n  snd (rep_nat_term (term_of_pair (tp.pp_of_term v, the_min))) =\n  snd (rep_nat_term (term_of_pair (tp.pp_of_term w, the_min)))\n  nat_term_compare cmp_term (term_of_pair (tp.pp_of_term v, the_min))\n   (term_of_pair (tp.pp_of_term w, the_min)) \\<noteq>\n  Gt\n\ngoal (1 subgoal):\n 1. nat_term_compare cmp_term v w \\<noteq> Gt", "by (rule nat_term_compD4'')"], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term v w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ordered_term_axioms pair_of_term term_of_pair\n   (\\<lambda>s t.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)))\n   (le_of_nat_term_order cmp_term)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gd_term pair_of_term term_of_pair\n   (\\<lambda>s t.\n       le_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)))\n   (\\<lambda>s t.\n       lt_of_nat_term_order cmp_term (term_of_pair (s, the_min))\n        (term_of_pair (t, the_min)))\n   (le_of_nat_term_order cmp_term) (lt_of_nat_term_order cmp_term)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gd_term_to_pair_unit:\n  \"gd_term (to_pair_unit::'a::{nat_term_compare,nat_pp_term,graded_dickson_powerprod} \\<Rightarrow> _) fst\n        (\\<lambda>s t. le_of_nat_term_order cmp_term (fst (s, the_min)) (fst (t, the_min)))\n        (\\<lambda>s t. lt_of_nat_term_order cmp_term (fst (s, the_min)) (fst (t, the_min)))\n        (le_of_nat_term_order cmp_term)\n        (lt_of_nat_term_order cmp_term)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_term to_pair_unit fst\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (le_of_nat_term_order cmp_term) (lt_of_nat_term_order cmp_term)", "proof (intro gd_term.intro ordered_term.intro)"], ["proof (state)\ngoal (4 subgoals):\n 1. term_powerprod to_pair_unit fst\n 2. ordered_powerprod\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n 3. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)\n 4. ordered_term_axioms to_pair_unit fst\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "show \"term_powerprod to_pair_unit fst\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_powerprod to_pair_unit fst", "by unfold_locales"], ["proof (state)\nthis:\n  term_powerprod to_pair_unit fst\n\ngoal (3 subgoals):\n 1. ordered_powerprod\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n 2. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)\n 3. ordered_term_axioms to_pair_unit fst\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. ordered_powerprod\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n 2. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)\n 3. ordered_term_axioms to_pair_unit fst\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "show \"ordered_powerprod (\\<lambda>s t. le_of_nat_term_order cmp_term (fst (s, the_min)) (fst (t, the_min)))\n                      (\\<lambda>s t. lt_of_nat_term_order cmp_term (fst (s, the_min)) (fst (t, the_min)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_powerprod\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))", "unfolding fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_powerprod (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)", "using linorder_le_of_nat_term_order"], ["proof (prove)\nusing this:\n  class.linorder (le_of_nat_term_order ?to) (lt_of_nat_term_order ?to)\n\ngoal (1 subgoal):\n 1. ordered_powerprod (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)", "proof (intro ordered_powerprod.intro)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>to.\n        class.linorder (le_of_nat_term_order to)\n         (lt_of_nat_term_order to)) \\<Longrightarrow>\n    class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)\n 2. (\\<And>to.\n        class.linorder (le_of_nat_term_order to)\n         (lt_of_nat_term_order to)) \\<Longrightarrow>\n    ordered_powerprod_axioms (le_of_nat_term_order cmp_term)", "from le_of_nat_term_order_zero_min"], ["proof (chain)\npicking this:\n  le_of_nat_term_order ?to (0::?'a) ?t", "show \"ordered_powerprod_axioms (le_of_nat_term_order cmp_term)\""], ["proof (prove)\nusing this:\n  le_of_nat_term_order ?to (0::?'a) ?t\n\ngoal (1 subgoal):\n 1. ordered_powerprod_axioms (le_of_nat_term_order cmp_term)", "proof (unfold_locales)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       (\\<And>to t. le_of_nat_term_order to (0::?'a) t) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (0::'a) t\n 2. \\<And>s t u.\n       \\<lbrakk>\\<And>to t. le_of_nat_term_order to (0::?'a) t;\n        le_of_nat_term_order cmp_term s t\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term (s + u) (t + u)", "fix s t u"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       (\\<And>to t. le_of_nat_term_order to (0::?'a) t) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (0::'a) t\n 2. \\<And>s t u.\n       \\<lbrakk>\\<And>to t. le_of_nat_term_order to (0::?'a) t;\n        le_of_nat_term_order cmp_term s t\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term (s + u) (t + u)", "assume \"le_of_nat_term_order cmp_term s t\""], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term s t\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       (\\<And>to t. le_of_nat_term_order to (0::?'a) t) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (0::'a) t\n 2. \\<And>s t u.\n       \\<lbrakk>\\<And>to t. le_of_nat_term_order to (0::?'a) t;\n        le_of_nat_term_order cmp_term s t\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term (s + u) (t + u)", "hence \"le_of_nat_term_order cmp_term (u + s) (u + t)\""], ["proof (prove)\nusing this:\n  le_of_nat_term_order cmp_term s t\n\ngoal (1 subgoal):\n 1. le_of_nat_term_order cmp_term (u + s) (u + t)", "by (rule le_of_nat_term_order_plus_monotone)"], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term (u + s) (u + t)\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       (\\<And>to t. le_of_nat_term_order to (0::?'a) t) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (0::'a) t\n 2. \\<And>s t u.\n       \\<lbrakk>\\<And>to t. le_of_nat_term_order to (0::?'a) t;\n        le_of_nat_term_order cmp_term s t\\<rbrakk>\n       \\<Longrightarrow> le_of_nat_term_order cmp_term (s + u) (t + u)", "thus \"le_of_nat_term_order cmp_term (s + u) (t + u)\""], ["proof (prove)\nusing this:\n  le_of_nat_term_order cmp_term (u + s) (u + t)\n\ngoal (1 subgoal):\n 1. le_of_nat_term_order cmp_term (s + u) (t + u)", "by (simp only: ac_simps)"], ["proof (state)\nthis:\n  le_of_nat_term_order cmp_term (s + u) (t + u)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       (\\<And>to t. le_of_nat_term_order to (0::?'a) t) \\<Longrightarrow>\n       le_of_nat_term_order cmp_term (0::'a) t", "qed"], ["proof (state)\nthis:\n  ordered_powerprod_axioms (le_of_nat_term_order cmp_term)\n\ngoal (1 subgoal):\n 1. (\\<And>to.\n        class.linorder (le_of_nat_term_order to)\n         (lt_of_nat_term_order to)) \\<Longrightarrow>\n    class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)", "qed"], ["proof (state)\nthis:\n  ordered_powerprod\n   (\\<lambda>s t.\n       le_of_nat_term_order cmp_term (fst (s, the_min)) (fst (t, the_min)))\n   (\\<lambda>s t.\n       lt_of_nat_term_order cmp_term (fst (s, the_min)) (fst (t, the_min)))\n\ngoal (2 subgoals):\n 1. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)\n 2. ordered_term_axioms to_pair_unit fst\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)\n 2. ordered_term_axioms to_pair_unit fst\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "show \"class.linorder (le_of_nat_term_order cmp_term) (lt_of_nat_term_order cmp_term)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (le_of_nat_term_order cmp_term)\n     (lt_of_nat_term_order cmp_term)", "by (fact linorder_le_of_nat_term_order)"], ["proof (state)\nthis:\n  class.linorder (le_of_nat_term_order cmp_term)\n   (lt_of_nat_term_order cmp_term)\n\ngoal (1 subgoal):\n 1. ordered_term_axioms to_pair_unit fst\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ordered_term_axioms to_pair_unit fst\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "show \"ordered_term_axioms to_pair_unit fst (\\<lambda>s t. le_of_nat_term_order cmp_term (fst (s, the_min)) (fst (t, the_min)))\n     (le_of_nat_term_order cmp_term)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_term_axioms to_pair_unit fst\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (le_of_nat_term_order cmp_term)", "by (unfold_locales, auto intro: le_of_nat_term_order_plus_monotone)"], ["proof (state)\nthis:\n  ordered_term_axioms to_pair_unit fst\n   (\\<lambda>s t.\n       le_of_nat_term_order cmp_term (fst (s, the_min)) (fst (t, the_min)))\n   (le_of_nat_term_order cmp_term)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary gd_nat_term_to_pair_unit:\n  \"gd_nat_term (to_pair_unit::'a::{nat_term_compare,nat_pp_term,graded_dickson_powerprod} \\<Rightarrow> _) fst cmp_term\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_nat_term to_pair_unit fst cmp_term", "by (rule gd_nat_term.intro, fact gd_term_to_pair_unit, rule gd_nat_term_axioms.intro, simp add: splus_pp_term)"], ["", "lemma gd_term_id:\n  \"gd_term (\\<lambda>x::('a::{nat_term_compare,nat_pp_compare,nat_pp_term,graded_dickson_powerprod} \\<times> 'b::{nat,the_min}). x) (\\<lambda>x. x)\n        (\\<lambda>s t. le_of_nat_term_order cmp_term (s, the_min) (t, the_min))\n        (\\<lambda>s t. lt_of_nat_term_order cmp_term (s, the_min) (t, the_min))\n        (le_of_nat_term_order cmp_term)\n        (lt_of_nat_term_order cmp_term)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_term (\\<lambda>x. x) (\\<lambda>x. x)\n     (\\<lambda>s t. le_of_nat_term_order cmp_term (s, the_min) (t, the_min))\n     (\\<lambda>s t. lt_of_nat_term_order cmp_term (s, the_min) (t, the_min))\n     (le_of_nat_term_order cmp_term) (lt_of_nat_term_order cmp_term)", "apply (rule term_powerprod_gd_term)"], ["proof (prove)\ngoal (6 subgoals):\n 1. term_powerprod (\\<lambda>x. x) (\\<lambda>x. x)\n 2. \\<And>v. fst (rep_nat_term v) = rep_nat_pp (fst v)\n 3. \\<And>t. snd (rep_nat_term (t, the_min)) = 0\n 4. \\<And>v w.\n       snd v \\<le> snd w \\<Longrightarrow>\n       snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\n 5. \\<And>s t k. (s + t, k) = splus (s, k) (t, k)\n 6. \\<And>t v. pprod.splus t v = splus (t, the_min) v", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. term_powerprod (\\<lambda>x. x) (\\<lambda>x. x)", "by unfold_locales"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>v. fst (rep_nat_term v) = rep_nat_pp (fst v)\n 2. \\<And>t. snd (rep_nat_term (t, the_min)) = 0\n 3. \\<And>v w.\n       snd v \\<le> snd w \\<Longrightarrow>\n       snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\n 4. \\<And>s t k. (s + t, k) = splus (s, k) (t, k)\n 5. \\<And>t v. pprod.splus t v = splus (t, the_min) v", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (rep_nat_term v_) = rep_nat_pp (fst v_)", "by (simp add: rep_nat_term_prod_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t. snd (rep_nat_term (t, the_min)) = 0\n 2. \\<And>v w.\n       snd v \\<le> snd w \\<Longrightarrow>\n       snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\n 3. \\<And>s t k. (s + t, k) = splus (s, k) (t, k)\n 4. \\<And>t v. pprod.splus t v = splus (t, the_min) v", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (rep_nat_term (t_, the_min)) = 0", "by (simp add: rep_nat_term_prod_def the_min_eq_zero)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>v w.\n       snd v \\<le> snd w \\<Longrightarrow>\n       snd (rep_nat_term v) \\<le> snd (rep_nat_term w)\n 2. \\<And>s t k. (s + t, k) = splus (s, k) (t, k)\n 3. \\<And>t v. pprod.splus t v = splus (t, the_min) v", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd v_ \\<le> snd w_ \\<Longrightarrow>\n    snd (rep_nat_term v_) \\<le> snd (rep_nat_term w_)", "by (simp add: rep_nat_term_prod_def ord_iff[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s t k. (s + t, k) = splus (s, k) (t, k)\n 2. \\<And>t v. pprod.splus t v = splus (t, the_min) v", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s_ + t_, k_) = splus (s_, k_) (t_, k_)", "by (simp add: splus_prod_def pprod.splus_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t v. pprod.splus t v = splus (t, the_min) v", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. pprod.splus t_ v_ = splus (t_, the_min) v_", "by (simp add: splus_prod_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary gd_nat_term_id: \"gd_nat_term (\\<lambda>x. x) (\\<lambda>x. x) cmp_term\"\n  for cmp_term :: \"('a::{nat_term_compare,nat_pp_compare,nat_pp_term,graded_dickson_powerprod} \\<times> 'c::{nat,the_min}) nat_term_order\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_nat_term (\\<lambda>x. x) (\\<lambda>x. x) cmp_term", "by (rule gd_nat_term.intro, fact gd_term_id, rule gd_nat_term_axioms.intro, simp add: splus_prod_def)"], ["", "subsection \\<open>Computations\\<close>"], ["", "type_synonym 'a mpoly_tc = \"(nat, nat) pp \\<Rightarrow>\\<^sub>0 'a\""], ["", "global_interpretation punit0: gd_nat_term \"to_pair_unit::'a::{nat_term_compare,nat_pp_term,graded_dickson_powerprod} \\<Rightarrow> _\" fst cmp_term\n  rewrites \"punit.adds_term = (adds)\"\n  and \"punit.pp_of_term = (\\<lambda>x. x)\"\n  and \"punit.component_of_term = (\\<lambda>_. ())\"\n  for cmp_term\n  defines monom_mult_punit = punit.monom_mult\n  and mult_scalar_punit = punit.mult_scalar\n  and shift_map_keys_punit = punit0.shift_map_keys\n  and ord_pp_punit = punit0.ord_pp\n  and ord_pp_strict_punit = punit0.ord_pp_strict\n  and min_term_punit = punit0.min_term\n  and lt_punit = punit0.lt\n  and lc_punit = punit0.lc\n  and tail_punit = punit0.tail\n  and comp_opt_p_punit = punit0.comp_opt_p\n  and ord_p_punit = punit0.ord_p\n  and ord_strict_p_punit = punit0.ord_strict_p\n  and keys_to_list_punit = punit0.keys_to_list"], ["proof (prove)\ngoal (1 subgoal):\n 1. (gd_nat_term to_pair_unit fst cmp_term &&& punit.adds_term = (adds)) &&&\n    punit.pp_of_term = (\\<lambda>x. x) &&&\n    punit.component_of_term = (\\<lambda>_. ())", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_nat_term to_pair_unit fst cmp_term", "by (fact gd_nat_term_to_pair_unit)"], ["proof (prove)\ngoal (3 subgoals):\n 1. punit.adds_term = (adds)\n 2. punit.pp_of_term = (\\<lambda>x. x)\n 3. punit.component_of_term = (\\<lambda>_. ())", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.adds_term = (adds)", "by (fact punit_adds_term)"], ["proof (prove)\ngoal (2 subgoals):\n 1. punit.pp_of_term = (\\<lambda>x. x)\n 2. punit.component_of_term = (\\<lambda>_. ())", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.pp_of_term = (\\<lambda>x. x)", "by (fact punit_pp_of_term)"], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.component_of_term = (\\<lambda>_. ())", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.component_of_term = (\\<lambda>_. ())", "by (fact punit_component_of_term)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma shift_map_keys_punit_MP_oalist [code abstract]:\n  \"list_of_oalist_ntm (shift_map_keys_punit t f xs) = map_raw (\\<lambda>(k, v). (t + k, f v)) (list_of_oalist_ntm xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_oalist_ntm (shift_map_keys_punit t f xs) =\n    map_raw (\\<lambda>(k, v). (t + k, f v)) (list_of_oalist_ntm xs)", "by (simp add: punit0.list_of_oalist_shift_keys case_prod_beta')"], ["", "lemmas [code] = punit0.mult_scalar_MP_oalist[unfolded mult_scalar_punit_def punit_mult_scalar]\n                punit0.punit_min_term"], ["", "lemma ord_pp_punit_alt [code_unfold]: \"ord_pp_punit = le_of_nat_term_order\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_pp_punit = le_of_nat_term_order", "by (intro ext, simp add: punit0.ord_pp_def)"], ["", "lemma ord_pp_strict_punit_alt [code_unfold]: \"ord_pp_strict_punit = lt_of_nat_term_order\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_pp_strict_punit = lt_of_nat_term_order", "by (intro ext, simp add: punit0.ord_pp_strict_def)"], ["", "lemma gd_powerprod_ord_pp_punit: \"gd_powerprod (ord_pp_punit cmp_term) (ord_pp_strict_punit cmp_term)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_powerprod (ord_pp_punit cmp_term) (ord_pp_strict_punit cmp_term)", "unfolding punit0.ord_pp_def punit0.ord_pp_strict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_powerprod\n     (\\<lambda>s t.\n         le_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))\n     (\\<lambda>s t.\n         lt_of_nat_term_order cmp_term (fst (s, the_min))\n          (fst (t, the_min)))", ".."], ["", "locale trivariate\\<^sub>0_rat\nbegin"], ["", "abbreviation X::\"rat mpoly_tc\" where \"X \\<equiv> V\\<^sub>0 (0::nat)\""], ["", "abbreviation Y::\"rat mpoly_tc\" where \"Y \\<equiv> V\\<^sub>0 (1::nat)\""], ["", "abbreviation Z::\"rat mpoly_tc\" where \"Z \\<equiv> V\\<^sub>0 (2::nat)\""], ["", "end"], ["", "experiment begin"], ["", "interpretation trivariate\\<^sub>0_rat"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "value [code] \"X ^ 2\""], ["", "value [code] \"X\\<^sup>2 * Z + 2 * Y ^ 3 * Z\\<^sup>2\""], ["", "value [code] \"distr\\<^sub>0 DRLEX [(sparse\\<^sub>0 [(0::nat, 3::nat)], 1::rat)] = distr\\<^sub>0 DRLEX [(sparse\\<^sub>0 [(0, 3)], 1)]\""], ["", "lemma\n  \"ord_strict_p_punit DRLEX (X\\<^sup>2 * Z + 2 * Y ^ 3 * Z\\<^sup>2) (X\\<^sup>2 * Z\\<^sup>2 + 2 * Y ^ 3 * Z\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_strict_p_punit DRLEX\n     ((V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 +\n      2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2)\n     ((V\\<^sub>0 0)\\<^sup>2 * (V\\<^sub>0 2)\\<^sup>2 +\n      2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2)", "by eval"], ["", "lemma\n  \"tail_punit DLEX (X\\<^sup>2 * Z + 2 * Y ^ 3 * Z\\<^sup>2) = X\\<^sup>2 * Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail_punit DLEX\n     ((V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 +\n      2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2) =\n    (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2", "by eval"], ["", "value [code] \"min_term_punit::(nat, nat) pp\""], ["", "value [code] \"is_zero (distr\\<^sub>0 DRLEX [(sparse\\<^sub>0 [(0::nat, 3::nat)], 1::rat)])\""], ["", "value [code] \"lt_punit DRLEX (distr\\<^sub>0 DRLEX [(sparse\\<^sub>0 [(0::nat, 3::nat)], 1::rat)])\""], ["", "lemma\n  \"lt_punit DRLEX (X\\<^sup>2 * Z + 2 * Y ^ 3 * Z\\<^sup>2) = sparse\\<^sub>0 [(1, 3), (2, 2)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt_punit DRLEX\n     ((V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 +\n      2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2) =\n    sparse\\<^sub>0 [(1, 3), (2, 2)]", "by eval"], ["", "lemma\n  \"lt_punit DRLEX (X + Y + Z) = sparse\\<^sub>0 [(2, 1)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt_punit DRLEX (V\\<^sub>0 0 + V\\<^sub>0 1 + V\\<^sub>0 2) =\n    sparse\\<^sub>0 [(2, 1)]", "by eval"], ["", "lemma\n  \"keys (X\\<^sup>2 * Z ^ 3 + 2 * Y ^ 3 * Z\\<^sup>2) =\n    {sparse\\<^sub>0 [(0, 2), (2, 3)], sparse\\<^sub>0 [(1, 3), (2, 2)]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys\n     ((V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 3 +\n      2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2) =\n    {sparse\\<^sub>0 [(0, 2), (2, 3)], sparse\\<^sub>0 [(1, 3), (2, 2)]}", "by eval"], ["", "lemma\n  \"- 1 * X\\<^sup>2 * Z ^ 7 + - 2 * Y ^ 3 * Z\\<^sup>2 = - X\\<^sup>2 * Z ^ 7 + - 2 * Y ^ 3 * Z\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 * (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 7 +\n    - 2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2 =\n    - (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 7 +\n    - 2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2", "by eval"], ["", "lemma\n  \"X\\<^sup>2 * Z ^ 7 + 2 * Y ^ 3 * Z\\<^sup>2 + X\\<^sup>2 * Z ^ 4 + - 2 * Y ^ 3 * Z\\<^sup>2 = X\\<^sup>2 * Z ^ 7 + X\\<^sup>2 * Z ^ 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 7 +\n    2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2 +\n    (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 4 +\n    - 2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2 =\n    (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 7 +\n    (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 4", "by eval"], ["", "lemma\n  \"X\\<^sup>2 * Z ^ 7 + 2 * Y ^ 3 * Z\\<^sup>2 - X\\<^sup>2 * Z ^ 4 + - 2 * Y ^ 3 * Z\\<^sup>2 =\n    X\\<^sup>2 * Z ^ 7 - X\\<^sup>2 * Z ^ 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 7 +\n    2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2 -\n    (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 4 +\n    - 2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2 =\n    (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 7 -\n    (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 4", "by eval"], ["", "lemma\n  \"lookup (X\\<^sup>2 * Z ^ 7 + 2 * Y ^ 3 * Z\\<^sup>2 + 2) (sparse\\<^sub>0 [(0, 2), (2, 7)]) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup\n     ((V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 7 +\n      2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2 +\n      2)\n     (sparse\\<^sub>0 [(0, 2), (2, 7)]) =\n    1", "by eval"], ["", "lemma\n  \"X\\<^sup>2 * Z ^ 7 + 2 * Y ^ 3 * Z\\<^sup>2 \\<noteq>\n   X\\<^sup>2 * Z ^ 4 + - 2 * Y ^ 3 * Z\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 7 +\n    2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2 \\<noteq>\n    (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 4 +\n    - 2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2", "by eval"], ["", "lemma\n  \"0 * X^2 * Z^7 + 0 * Y^3*Z\\<^sup>2 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 * (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 7 +\n    0 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2 =\n    0", "by eval"], ["", "lemma\n  \"monom_mult_punit 3 (sparse\\<^sub>0 [(1, 2::nat)]) (X\\<^sup>2 * Z + 2 * Y ^ 3 * Z\\<^sup>2) =\n    3 * Y\\<^sup>2 * Z * X\\<^sup>2 + 6 * Y ^ 5 * Z\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult_punit 3 (sparse\\<^sub>0 [(1, 2)])\n     ((V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 +\n      2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2) =\n    3 * (V\\<^sub>0 1)\\<^sup>2 * V\\<^sub>0 2 * (V\\<^sub>0 0)\\<^sup>2 +\n    6 * V\\<^sub>0 1 ^ 5 * (V\\<^sub>0 2)\\<^sup>2", "by eval"], ["", "lemma\n  \"monomial (-4) (sparse\\<^sub>0 [(0, 2::nat)]) = - 4 * X\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial (- 4) (sparse\\<^sub>0 [(0, 2)]) = - 4 * (V\\<^sub>0 0)\\<^sup>2", "by eval"], ["", "lemma \"monomial (0::rat) (sparse\\<^sub>0 [(0::nat, 2::nat)]) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial 0 (sparse\\<^sub>0 [(0, 2)]) = 0", "by eval"], ["", "lemma\n  \"(X\\<^sup>2 * Z + 2 * Y ^ 3 * Z\\<^sup>2) * (X\\<^sup>2 * Z ^ 3 + - 2 * Y ^ 3 * Z\\<^sup>2) =\n    X ^ 4 * Z ^ 4 + - 2 * X\\<^sup>2 * Z ^ 3 * Y ^ 3 +\n - 4 * Y ^ 6 * Z ^ 4 + 2 * Y ^ 3 * Z ^ 5 * X\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 +\n     2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2) *\n    ((V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 3 +\n     - 2 * V\\<^sub>0 1 ^ 3 * (V\\<^sub>0 2)\\<^sup>2) =\n    V\\<^sub>0 0 ^ 4 * V\\<^sub>0 2 ^ 4 +\n    - 2 * (V\\<^sub>0 0)\\<^sup>2 * V\\<^sub>0 2 ^ 3 * V\\<^sub>0 1 ^ 3 +\n    - 4 * V\\<^sub>0 1 ^ 6 * V\\<^sub>0 2 ^ 4 +\n    2 * V\\<^sub>0 1 ^ 3 * V\\<^sub>0 2 ^ 5 * (V\\<^sub>0 0)\\<^sup>2", "by eval"], ["", "end"], ["", "subsection \\<open>Code setup for type MPoly\\<close>"], ["", "text \\<open>postprocessing from \\<open>Var\\<^sub>0, Const\\<^sub>0\\<close> to \\<open>Var, Const\\<close>.\\<close>"], ["", "lemmas [code_post] =\n  plus_mpoly.abs_eq[symmetric]\n  times_mpoly.abs_eq[symmetric]\n  one_mpoly_def[symmetric]\n  Var.abs_eq[symmetric]\n  Const.abs_eq[symmetric]"], ["", "instantiation mpoly::(\"{equal, zero}\")equal begin"], ["", "lift_definition equal_mpoly:: \"'a mpoly \\<Rightarrow> 'a mpoly \\<Rightarrow> bool\" is HOL.equal"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a mpoly, equal_class)", "proof standard"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. equal_class.equal x y = (x = y)", "qed (transfer, rule equal_eq)"], ["", "end"], ["", "end"], ["", "(* theory *)"]]}