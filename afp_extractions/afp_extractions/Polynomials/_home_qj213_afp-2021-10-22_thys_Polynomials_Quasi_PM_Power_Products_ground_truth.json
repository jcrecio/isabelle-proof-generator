{"file_name": "/home/qj213/afp-2021-10-22/thys/Polynomials/Quasi_PM_Power_Products.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Polynomials", "problem_names": ["lemma decr_grading:\n  assumes \"hom_grading d\"\n  shows \"hom_grading_fun d (decr_grading d)\"", "lemma decr_grading_plus:\n  \"hom_grading d \\<Longrightarrow> decr_grading d n (s + t) = decr_grading d n s + decr_grading d n t\"", "lemma decr_grading_zero:\n  assumes \"hom_grading d\"\n  shows \"decr_grading d n 0 = (0::'a::cancel_comm_monoid_add)\"", "lemma decr_grading_le: \"hom_grading d \\<Longrightarrow> d (decr_grading d n t) \\<le> n\"", "lemma decr_grading_idI: \"hom_grading d \\<Longrightarrow> d t \\<le> n \\<Longrightarrow> decr_grading d n t = t\"", "lemma hom_grading_varnum:\n  \"hom_grading ((varnum X)::('x::countable \\<Rightarrow>\\<^sub>0 'b::add_wellorder) \\<Rightarrow> nat)\"", "lemma decr_grading_term_splus:\n  \"hom_grading d \\<Longrightarrow> decr_grading_term d n (t \\<oplus> v) = decr_grading d n t \\<oplus> decr_grading_term d n v\"", "lemma decr_grading_term_le: \"hom_grading d \\<Longrightarrow> d (pp_of_term (decr_grading_term d n v)) \\<le> n\"", "lemma decr_grading_term_idI: \"hom_grading d \\<Longrightarrow> d (pp_of_term v) \\<le> n \\<Longrightarrow> decr_grading_term d n v = v\"", "lemma punit_decr_grading_term: \"punit.decr_grading_term = decr_grading\"", "lemma decr_grading_p_zero: \"decr_grading_p d n 0 = 0\"", "lemma decr_grading_p_monomial: \"decr_grading_p d n (monomial c v) = monomial c (decr_grading_term d n v)\"", "lemma decr_grading_p_plus:\n  \"decr_grading_p d n (p + q) = (decr_grading_p d n p) + (decr_grading_p d n q)\"", "lemma decr_grading_p_monom_mult:\n  assumes \"hom_grading d\"\n  shows \"decr_grading_p d n (monom_mult c t p) = monom_mult c (decr_grading d n t) (decr_grading_p d n p)\"", "lemma decr_grading_p_mult_scalar:\n  assumes \"hom_grading d\"\n  shows \"decr_grading_p d n (p \\<odot> q) = punit.decr_grading_p d n p \\<odot> decr_grading_p d n q\"", "lemma decr_grading_p_keys_subset: \"keys (decr_grading_p d n p) \\<subseteq> decr_grading_term d n ` keys p\"", "lemma decr_grading_p_idI':\n  assumes \"hom_grading d\" and \"\\<And>v. v \\<in> keys p \\<Longrightarrow> d (pp_of_term v) \\<le> n\"\n  shows \"decr_grading_p d n p = p\"", "lemma decr_grading_p_idI:\n  assumes \"hom_grading d\" and \"p \\<in> dgrad_p_set d m\"\n  shows \"decr_grading_p d m p = p\"", "lemma decr_grading_p_dgrad_p_setI:\n  assumes \"hom_grading d\"\n  shows \"decr_grading_p d m p \\<in> dgrad_p_set d m\"", "lemma (in gd_term) in_pmdlE_dgrad_p_set:\n  assumes \"hom_grading d\" and \"B \\<subseteq> dgrad_p_set d m\" and \"p \\<in> dgrad_p_set d m\" and \"p \\<in> pmdl B\"\n  obtains A q where \"finite A\" and \"A \\<subseteq> B\" and \"\\<And>b. q b \\<in> punit.dgrad_p_set d m\"\n    and \"p = (\\<Sum>b\\<in>A. q b \\<odot> b)\""], "translations": [["", "lemma decr_grading:\n  assumes \"hom_grading d\"\n  shows \"hom_grading_fun d (decr_grading d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_grading_fun d (decr_grading d)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hom_grading_fun d (decr_grading d)", "from assms"], ["proof (chain)\npicking this:\n  hom_grading d", "obtain f where \"hom_grading_fun d f\""], ["proof (prove)\nusing this:\n  hom_grading d\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        hom_grading_fun d f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hom_grading_def"], ["proof (prove)\nusing this:\n  Ex (hom_grading_fun d)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        hom_grading_fun d f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  hom_grading_fun d f\n\ngoal (1 subgoal):\n 1. hom_grading_fun d (decr_grading d)", "thus ?thesis"], ["proof (prove)\nusing this:\n  hom_grading_fun d f\n\ngoal (1 subgoal):\n 1. hom_grading_fun d (decr_grading d)", "unfolding decr_grading_def"], ["proof (prove)\nusing this:\n  hom_grading_fun d f\n\ngoal (1 subgoal):\n 1. hom_grading_fun d (Eps (hom_grading_fun d))", "by (metis someI)"], ["proof (state)\nthis:\n  hom_grading_fun d (decr_grading d)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma decr_grading_plus:\n  \"hom_grading d \\<Longrightarrow> decr_grading d n (s + t) = decr_grading d n s + decr_grading d n t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_grading d \\<Longrightarrow>\n    decr_grading d n (s + t) = decr_grading d n s + decr_grading d n t", "using decr_grading"], ["proof (prove)\nusing this:\n  hom_grading ?d \\<Longrightarrow> hom_grading_fun ?d (decr_grading ?d)\n\ngoal (1 subgoal):\n 1. hom_grading d \\<Longrightarrow>\n    decr_grading d n (s + t) = decr_grading d n s + decr_grading d n t", "unfolding hom_grading_fun_def"], ["proof (prove)\nusing this:\n  hom_grading ?d \\<Longrightarrow>\n  \\<forall>n.\n     (\\<forall>s t.\n         decr_grading ?d n (s + t) =\n         decr_grading ?d n s + decr_grading ?d n t) \\<and>\n     (\\<forall>t.\n         ?d (decr_grading ?d n t) \\<le> n \\<and>\n         (?d t \\<le> n \\<longrightarrow> decr_grading ?d n t = t))\n\ngoal (1 subgoal):\n 1. hom_grading d \\<Longrightarrow>\n    decr_grading d n (s + t) = decr_grading d n s + decr_grading d n t", "by blast"], ["", "lemma decr_grading_zero:\n  assumes \"hom_grading d\"\n  shows \"decr_grading d n 0 = (0::'a::cancel_comm_monoid_add)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading d n (0::'a) = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. decr_grading d n (0::'a) = (0::'a)", "have \"decr_grading d n 0 = decr_grading d n (0 + 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading d n (0::'a) = decr_grading d n ((0::'a) + (0::'a))", "by simp"], ["proof (state)\nthis:\n  decr_grading d n (0::'a) = decr_grading d n ((0::'a) + (0::'a))\n\ngoal (1 subgoal):\n 1. decr_grading d n (0::'a) = (0::'a)", "also"], ["proof (state)\nthis:\n  decr_grading d n (0::'a) = decr_grading d n ((0::'a) + (0::'a))\n\ngoal (1 subgoal):\n 1. decr_grading d n (0::'a) = (0::'a)", "from assms"], ["proof (chain)\npicking this:\n  hom_grading d", "have \"... = decr_grading d n 0 + decr_grading d n 0\""], ["proof (prove)\nusing this:\n  hom_grading d\n\ngoal (1 subgoal):\n 1. decr_grading d n ((0::'a) + (0::'a)) =\n    decr_grading d n (0::'a) + decr_grading d n (0::'a)", "by (rule decr_grading_plus)"], ["proof (state)\nthis:\n  decr_grading d n ((0::'a) + (0::'a)) =\n  decr_grading d n (0::'a) + decr_grading d n (0::'a)\n\ngoal (1 subgoal):\n 1. decr_grading d n (0::'a) = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  decr_grading d n (0::'a) =\n  decr_grading d n (0::'a) + decr_grading d n (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  decr_grading d n (0::'a) =\n  decr_grading d n (0::'a) + decr_grading d n (0::'a)\n\ngoal (1 subgoal):\n 1. decr_grading d n (0::'a) = (0::'a)", "by simp"], ["proof (state)\nthis:\n  decr_grading d n (0::'a) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma decr_grading_le: \"hom_grading d \\<Longrightarrow> d (decr_grading d n t) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_grading d \\<Longrightarrow> d (decr_grading d n t) \\<le> n", "using decr_grading"], ["proof (prove)\nusing this:\n  hom_grading ?d \\<Longrightarrow> hom_grading_fun ?d (decr_grading ?d)\n\ngoal (1 subgoal):\n 1. hom_grading d \\<Longrightarrow> d (decr_grading d n t) \\<le> n", "unfolding hom_grading_fun_def"], ["proof (prove)\nusing this:\n  hom_grading ?d \\<Longrightarrow>\n  \\<forall>n.\n     (\\<forall>s t.\n         decr_grading ?d n (s + t) =\n         decr_grading ?d n s + decr_grading ?d n t) \\<and>\n     (\\<forall>t.\n         ?d (decr_grading ?d n t) \\<le> n \\<and>\n         (?d t \\<le> n \\<longrightarrow> decr_grading ?d n t = t))\n\ngoal (1 subgoal):\n 1. hom_grading d \\<Longrightarrow> d (decr_grading d n t) \\<le> n", "by blast"], ["", "lemma decr_grading_idI: \"hom_grading d \\<Longrightarrow> d t \\<le> n \\<Longrightarrow> decr_grading d n t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hom_grading d; d t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> decr_grading d n t = t", "using decr_grading"], ["proof (prove)\nusing this:\n  hom_grading ?d \\<Longrightarrow> hom_grading_fun ?d (decr_grading ?d)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hom_grading d; d t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> decr_grading d n t = t", "unfolding hom_grading_fun_def"], ["proof (prove)\nusing this:\n  hom_grading ?d \\<Longrightarrow>\n  \\<forall>n.\n     (\\<forall>s t.\n         decr_grading ?d n (s + t) =\n         decr_grading ?d n s + decr_grading ?d n t) \\<and>\n     (\\<forall>t.\n         ?d (decr_grading ?d n t) \\<le> n \\<and>\n         (?d t \\<le> n \\<longrightarrow> decr_grading ?d n t = t))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hom_grading d; d t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> decr_grading d n t = t", "by blast"], ["", "class quasi_pm_powerprod = ulcs_powerprod +\n  assumes ex_hgrad: \"\\<exists>d::'a \\<Rightarrow> nat. dickson_grading d \\<and> hom_grading d\"\nbegin"], ["", "subclass graded_dickson_powerprod"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.graded_dickson_powerprod (+) (-) (0::'a) lcs", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>d. dickson_grading d", "from ex_hgrad"], ["proof (chain)\npicking this:\n  \\<exists>d. dickson_grading d \\<and> hom_grading d", "show \"\\<exists>d. dickson_grading d\""], ["proof (prove)\nusing this:\n  \\<exists>d. dickson_grading d \\<and> hom_grading d\n\ngoal (1 subgoal):\n 1. \\<exists>d. dickson_grading d", "by blast"], ["proof (state)\nthis:\n  \\<exists>d. dickson_grading d\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* quasi_pm_powerprod *)"], ["", "lemma hom_grading_varnum:\n  \"hom_grading ((varnum X)::('x::countable \\<Rightarrow>\\<^sub>0 'b::add_wellorder) \\<Rightarrow> nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_grading (varnum X)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hom_grading (varnum X)", "define f where \"f = (\\<lambda>n t. (except t (- (X \\<union> {x. elem_index x < n})))::'x \\<Rightarrow>\\<^sub>0 'b)\""], ["proof (state)\nthis:\n  f = (\\<lambda>n t. except t (- (X \\<union> {x. elem_index x < n})))\n\ngoal (1 subgoal):\n 1. hom_grading (varnum X)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_grading (varnum X)", "unfolding hom_grading_def hom_grading_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>n.\n          (\\<forall>s t. f n (s + t) = f n s + f n t) \\<and>\n          (\\<forall>t.\n              varnum X (f n t) \\<le> n \\<and>\n              (varnum X t \\<le> n \\<longrightarrow> f n t = t))", "proof (intro exI allI conjI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n s t. ?f n (s + t) = ?f n s + ?f n t\n 2. \\<And>n t. varnum X (?f n t) \\<le> n\n 3. \\<And>n t. varnum X t \\<le> n \\<Longrightarrow> ?f n t = t", "fix n s t"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n s t. ?f n (s + t) = ?f n s + ?f n t\n 2. \\<And>n t. varnum X (?f n t) \\<le> n\n 3. \\<And>n t. varnum X t \\<le> n \\<Longrightarrow> ?f n t = t", "show \"f n (s + t) = f n s + f n t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n (s + t) = f n s + f n t", "by (simp only: f_def except_plus)"], ["proof (state)\nthis:\n  f n (s + t) = f n s + f n t\n\ngoal (2 subgoals):\n 1. \\<And>n t. varnum X (f (?n13 n t) t) \\<le> n\n 2. \\<And>n t. varnum X t \\<le> n \\<Longrightarrow> f (?n13 n t) t = t\nflex-flex pairs:\n  \\<lambda>n s. ?n13 n \\<equiv>\\<^sup>? \\<lambda>n s t. ?n13 n (s + t)\n  \\<lambda>n s t. ?n13 n s \\<equiv>\\<^sup>? \\<lambda>n s t. ?n13 n (s + t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n t. varnum X (f (?n13 n t) t) \\<le> n\n 2. \\<And>n t. varnum X t \\<le> n \\<Longrightarrow> f (?n13 n t) t = t\nflex-flex pairs:\n  \\<lambda>n s. ?n13 n \\<equiv>\\<^sup>? \\<lambda>n s t. ?n13 n (s + t)\n  \\<lambda>n s t. ?n13 n s \\<equiv>\\<^sup>? \\<lambda>n s t. ?n13 n (s + t)", "fix n t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n t. varnum X (f (?n13 n t) t) \\<le> n\n 2. \\<And>n t. varnum X t \\<le> n \\<Longrightarrow> f (?n13 n t) t = t\nflex-flex pairs:\n  \\<lambda>n s. ?n13 n \\<equiv>\\<^sup>? \\<lambda>n s t. ?n13 n (s + t)\n  \\<lambda>n s t. ?n13 n s \\<equiv>\\<^sup>? \\<lambda>n s t. ?n13 n (s + t)", "show \"varnum X (f n t) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. varnum X (f n t) \\<le> n", "by (auto simp: varnum_le_iff keys_except f_def)"], ["proof (state)\nthis:\n  varnum X (f n t) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>n t. varnum X t \\<le> n \\<Longrightarrow> f n t = t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n t. varnum X t \\<le> n \\<Longrightarrow> f n t = t", "fix n t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n t. varnum X t \\<le> n \\<Longrightarrow> f n t = t", "show \"varnum X t \\<le> n \\<Longrightarrow> f n t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. varnum X t \\<le> n \\<Longrightarrow> f n t = t", "by (auto simp: f_def except_id_iff varnum_le_iff)"], ["proof (state)\nthis:\n  varnum X t \\<le> n \\<Longrightarrow> f n t = t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hom_grading (varnum X)\n\ngoal:\nNo subgoals!", "qed"], ["", "instance poly_mapping :: (countable, add_wellorder) quasi_pm_powerprod"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a \\<Rightarrow>\\<^sub>0 'b, quasi_pm_powerprod_class)", "by (standard, intro exI conjI, fact dickson_grading_varnum_empty, fact hom_grading_varnum)"], ["", "context term_powerprod\nbegin"], ["", "definition decr_grading_term :: \"('a \\<Rightarrow> nat) \\<Rightarrow> nat \\<Rightarrow> 't \\<Rightarrow> 't\"\n  where \"decr_grading_term d n v = term_of_pair (decr_grading d n (pp_of_term v), component_of_term v)\""], ["", "definition decr_grading_p :: \"('a \\<Rightarrow> nat) \\<Rightarrow> nat \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b::comm_monoid_add)\"\n  where \"decr_grading_p d n p = (\\<Sum>v\\<in>keys p. monomial (lookup p v) (decr_grading_term d n v))\""], ["", "lemma decr_grading_term_splus:\n  \"hom_grading d \\<Longrightarrow> decr_grading_term d n (t \\<oplus> v) = decr_grading d n t \\<oplus> decr_grading_term d n v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_grading d \\<Longrightarrow>\n    decr_grading_term d n (t \\<oplus> v) =\n    decr_grading d n t \\<oplus> decr_grading_term d n v", "by (simp add: decr_grading_term_def term_simps decr_grading_plus splus_def)"], ["", "lemma decr_grading_term_le: \"hom_grading d \\<Longrightarrow> d (pp_of_term (decr_grading_term d n v)) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_grading d \\<Longrightarrow>\n    d (pp_of_term (decr_grading_term d n v)) \\<le> n", "by (simp add: decr_grading_term_def term_simps decr_grading_le)"], ["", "lemma decr_grading_term_idI: \"hom_grading d \\<Longrightarrow> d (pp_of_term v) \\<le> n \\<Longrightarrow> decr_grading_term d n v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hom_grading d; d (pp_of_term v) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> decr_grading_term d n v = v", "by (simp add: decr_grading_term_def term_simps decr_grading_idI)"], ["", "lemma punit_decr_grading_term: \"punit.decr_grading_term = decr_grading\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.decr_grading_term = decr_grading", "by (intro ext, simp add: punit.decr_grading_term_def)"], ["", "lemma decr_grading_p_zero: \"decr_grading_p d n 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d n 0 = 0", "by (simp add: decr_grading_p_def)"], ["", "lemma decr_grading_p_monomial: \"decr_grading_p d n (monomial c v) = monomial c (decr_grading_term d n v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d n (monomial c v) = monomial c (decr_grading_term d n v)", "by (simp add: decr_grading_p_def)"], ["", "lemma decr_grading_p_plus:\n  \"decr_grading_p d n (p + q) = (decr_grading_p d n p) + (decr_grading_p d n q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "from finite_keys finite_keys"], ["proof (chain)\npicking this:\n  finite (keys ?f)\n  finite (keys ?f)", "have fin: \"finite (keys p \\<union> keys q)\""], ["proof (prove)\nusing this:\n  finite (keys ?f)\n  finite (keys ?f)\n\ngoal (1 subgoal):\n 1. finite (keys p \\<union> keys q)", "by (rule finite_UnI)"], ["proof (state)\nthis:\n  finite (keys p \\<union> keys q)\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "hence eq1: \"(\\<Sum>v\\<in>keys p \\<union> keys q. monomial (lookup p v) (decr_grading_term d n v)) =\n              (\\<Sum>v\\<in>keys p. monomial (lookup p v) (decr_grading_term d n v))\""], ["proof (prove)\nusing this:\n  finite (keys p \\<union> keys q)\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>keys p \\<union> keys q.\n       monomial (lookup p v) (decr_grading_term d n v)) =\n    (\\<Sum>v\\<in>keys p. monomial (lookup p v) (decr_grading_term d n v))", "proof (rule sum.mono_neutral_right)"], ["proof (state)\ngoal (2 subgoals):\n 1. keys p \\<subseteq> keys p \\<union> keys q\n 2. \\<forall>i\\<in>keys p \\<union> keys q - keys p.\n       monomial (lookup p i) (decr_grading_term d n i) = 0", "show \"\\<forall>v\\<in>keys p \\<union> keys q - keys p. monomial (lookup p v) (decr_grading_term d n v) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>keys p \\<union> keys q - keys p.\n       monomial (lookup p v) (decr_grading_term d n v) = 0", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  \\<forall>v\\<in>keys p \\<union> keys q - keys p.\n     monomial (lookup p v) (decr_grading_term d n v) = 0\n\ngoal (1 subgoal):\n 1. keys p \\<subseteq> keys p \\<union> keys q", "qed simp"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup p v) (decr_grading_term d n v)) =\n  (\\<Sum>v\\<in>keys p. monomial (lookup p v) (decr_grading_term d n v))\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "from fin"], ["proof (chain)\npicking this:\n  finite (keys p \\<union> keys q)", "have eq2: \"(\\<Sum>v\\<in>keys p \\<union> keys q. monomial (lookup q v) (decr_grading_term d n v)) =\n              (\\<Sum>v\\<in>keys q. monomial (lookup q v) (decr_grading_term d n v))\""], ["proof (prove)\nusing this:\n  finite (keys p \\<union> keys q)\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>keys p \\<union> keys q.\n       monomial (lookup q v) (decr_grading_term d n v)) =\n    (\\<Sum>v\\<in>keys q. monomial (lookup q v) (decr_grading_term d n v))", "proof (rule sum.mono_neutral_right)"], ["proof (state)\ngoal (2 subgoals):\n 1. keys q \\<subseteq> keys p \\<union> keys q\n 2. \\<forall>i\\<in>keys p \\<union> keys q - keys q.\n       monomial (lookup q i) (decr_grading_term d n i) = 0", "show \"\\<forall>v\\<in>keys p \\<union> keys q - keys q. monomial (lookup q v) (decr_grading_term d n v) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>keys p \\<union> keys q - keys q.\n       monomial (lookup q v) (decr_grading_term d n v) = 0", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  \\<forall>v\\<in>keys p \\<union> keys q - keys q.\n     monomial (lookup q v) (decr_grading_term d n v) = 0\n\ngoal (1 subgoal):\n 1. keys q \\<subseteq> keys p \\<union> keys q", "qed simp"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup q v) (decr_grading_term d n v)) =\n  (\\<Sum>v\\<in>keys q. monomial (lookup q v) (decr_grading_term d n v))\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "from fin Poly_Mapping.keys_add"], ["proof (chain)\npicking this:\n  finite (keys p \\<union> keys q)\n  keys (?f + ?g) \\<subseteq> keys ?f \\<union> keys ?g", "have \"decr_grading_p d n (p + q) =\n                (\\<Sum>v\\<in>keys p \\<union> keys q. monomial (lookup (p + q) v) (decr_grading_term d n v))\""], ["proof (prove)\nusing this:\n  finite (keys p \\<union> keys q)\n  keys (?f + ?g) \\<subseteq> keys ?f \\<union> keys ?g\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) =\n    (\\<Sum>v\\<in>keys p \\<union> keys q.\n       monomial (lookup (p + q) v) (decr_grading_term d n v))", "unfolding decr_grading_p_def"], ["proof (prove)\nusing this:\n  finite (keys p \\<union> keys q)\n  keys (?f + ?g) \\<subseteq> keys ?f \\<union> keys ?g\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>keys (p + q).\n       monomial (lookup (p + q) v) (decr_grading_term d n v)) =\n    (\\<Sum>v\\<in>keys p \\<union> keys q.\n       monomial (lookup (p + q) v) (decr_grading_term d n v))", "proof (rule sum.mono_neutral_left)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>keys p \\<union> keys q - keys (p + q).\n       monomial (lookup (p + q) i) (decr_grading_term d n i) = 0", "show \"\\<forall>v\\<in>keys p \\<union> keys q - keys (p + q). monomial (lookup (p + q) v) (decr_grading_term d n v) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>keys p \\<union> keys q - keys (p + q).\n       monomial (lookup (p + q) v) (decr_grading_term d n v) = 0", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  \\<forall>v\\<in>keys p \\<union> keys q - keys (p + q).\n     monomial (lookup (p + q) v) (decr_grading_term d n v) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  decr_grading_p d n (p + q) =\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup (p + q) v) (decr_grading_term d n v))\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "also"], ["proof (state)\nthis:\n  decr_grading_p d n (p + q) =\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup (p + q) v) (decr_grading_term d n v))\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "have \"... = (\\<Sum>v\\<in>keys p \\<union> keys q. monomial (lookup p v) (decr_grading_term d n v)) +\n                   (\\<Sum>v\\<in>keys p \\<union> keys q. monomial (lookup q v) (decr_grading_term d n v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>keys p \\<union> keys q.\n       monomial (lookup (p + q) v) (decr_grading_term d n v)) =\n    (\\<Sum>v\\<in>keys p \\<union> keys q.\n       monomial (lookup p v) (decr_grading_term d n v)) +\n    (\\<Sum>v\\<in>keys p \\<union> keys q.\n       monomial (lookup q v) (decr_grading_term d n v))", "by (simp only: lookup_add single_add sum.distrib)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup (p + q) v) (decr_grading_term d n v)) =\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup p v) (decr_grading_term d n v)) +\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup q v) (decr_grading_term d n v))\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "also"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup (p + q) v) (decr_grading_term d n v)) =\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup p v) (decr_grading_term d n v)) +\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup q v) (decr_grading_term d n v))\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "have \"... = (decr_grading_p d n p) + (decr_grading_p d n q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>keys p \\<union> keys q.\n       monomial (lookup p v) (decr_grading_term d n v)) +\n    (\\<Sum>v\\<in>keys p \\<union> keys q.\n       monomial (lookup q v) (decr_grading_term d n v)) =\n    decr_grading_p d n p + decr_grading_p d n q", "by (simp only: eq1 eq2 decr_grading_p_def)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup p v) (decr_grading_term d n v)) +\n  (\\<Sum>v\\<in>keys p \\<union> keys q.\n     monomial (lookup q v) (decr_grading_term d n v)) =\n  decr_grading_p d n p + decr_grading_p d n q\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "finally"], ["proof (chain)\npicking this:\n  decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "show ?thesis"], ["proof (prove)\nusing this:\n  decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q", "."], ["proof (state)\nthis:\n  decr_grading_p d n (p + q) = decr_grading_p d n p + decr_grading_p d n q\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary decr_grading_p_sum: \"decr_grading_p d n (sum f A) = (\\<Sum>a\\<in>A. decr_grading_p d n (f a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d n (sum f A) = (\\<Sum>a\\<in>A. decr_grading_p d n (f a))", "using decr_grading_p_zero decr_grading_p_plus"], ["proof (prove)\nusing this:\n  decr_grading_p ?d ?n 0 = 0\n  decr_grading_p ?d ?n (?p + ?q) =\n  decr_grading_p ?d ?n ?p + decr_grading_p ?d ?n ?q\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (sum f A) = (\\<Sum>a\\<in>A. decr_grading_p d n (f a))", "by (rule fun_sum_commute)"], ["", "lemma decr_grading_p_monom_mult:\n  assumes \"hom_grading d\"\n  shows \"decr_grading_p d n (monom_mult c t p) = monom_mult c (decr_grading d n t) (decr_grading_p d n p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d n (monom_mult c t p) =\n    monom_mult c (decr_grading d n t) (decr_grading_p d n p)", "proof (induct p rule: poly_mapping_plus_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. decr_grading_p d n (monom_mult c t 0) =\n    monom_mult c (decr_grading d n t) (decr_grading_p d n 0)\n 2. \\<And>p ca ta.\n       \\<lbrakk>ca \\<noteq> (0::'b); ta \\<notin> keys p;\n        decr_grading_p d n (monom_mult c t p) =\n        monom_mult c (decr_grading d n t) (decr_grading_p d n p)\\<rbrakk>\n       \\<Longrightarrow> decr_grading_p d n\n                          (monom_mult c t (monomial ca ta + p)) =\n                         monom_mult c (decr_grading d n t)\n                          (decr_grading_p d n (monomial ca ta + p))", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. decr_grading_p d n (monom_mult c t 0) =\n    monom_mult c (decr_grading d n t) (decr_grading_p d n 0)\n 2. \\<And>p ca ta.\n       \\<lbrakk>ca \\<noteq> (0::'b); ta \\<notin> keys p;\n        decr_grading_p d n (monom_mult c t p) =\n        monom_mult c (decr_grading d n t) (decr_grading_p d n p)\\<rbrakk>\n       \\<Longrightarrow> decr_grading_p d n\n                          (monom_mult c t (monomial ca ta + p)) =\n                         monom_mult c (decr_grading d n t)\n                          (decr_grading_p d n (monomial ca ta + p))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d n (monom_mult c t 0) =\n    monom_mult c (decr_grading d n t) (decr_grading_p d n 0)", "by (simp add: decr_grading_p_zero)"], ["proof (state)\nthis:\n  decr_grading_p d n (monom_mult c t 0) =\n  monom_mult c (decr_grading d n t) (decr_grading_p d n 0)\n\ngoal (1 subgoal):\n 1. \\<And>p ca ta.\n       \\<lbrakk>ca \\<noteq> (0::'b); ta \\<notin> keys p;\n        decr_grading_p d n (monom_mult c t p) =\n        monom_mult c (decr_grading d n t) (decr_grading_p d n p)\\<rbrakk>\n       \\<Longrightarrow> decr_grading_p d n\n                          (monom_mult c t (monomial ca ta + p)) =\n                         monom_mult c (decr_grading d n t)\n                          (decr_grading_p d n (monomial ca ta + p))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p ca ta.\n       \\<lbrakk>ca \\<noteq> (0::'b); ta \\<notin> keys p;\n        decr_grading_p d n (monom_mult c t p) =\n        monom_mult c (decr_grading d n t) (decr_grading_p d n p)\\<rbrakk>\n       \\<Longrightarrow> decr_grading_p d n\n                          (monom_mult c t (monomial ca ta + p)) =\n                         monom_mult c (decr_grading d n t)\n                          (decr_grading_p d n (monomial ca ta + p))", "case (2 p a s)"], ["proof (state)\nthis:\n  a \\<noteq> (0::'b)\n  s \\<notin> keys p\n  decr_grading_p d n (monom_mult c t p) =\n  monom_mult c (decr_grading d n t) (decr_grading_p d n p)\n\ngoal (1 subgoal):\n 1. \\<And>p ca ta.\n       \\<lbrakk>ca \\<noteq> (0::'b); ta \\<notin> keys p;\n        decr_grading_p d n (monom_mult c t p) =\n        monom_mult c (decr_grading d n t) (decr_grading_p d n p)\\<rbrakk>\n       \\<Longrightarrow> decr_grading_p d n\n                          (monom_mult c t (monomial ca ta + p)) =\n                         monom_mult c (decr_grading d n t)\n                          (decr_grading_p d n (monomial ca ta + p))", "from assms"], ["proof (chain)\npicking this:\n  hom_grading d", "show ?case"], ["proof (prove)\nusing this:\n  hom_grading d\n\ngoal (1 subgoal):\n 1. decr_grading_p d n (monom_mult c t (monomial a s + p)) =\n    monom_mult c (decr_grading d n t)\n     (decr_grading_p d n (monomial a s + p))", "by (simp add: monom_mult_dist_right decr_grading_p_plus 2(3) monom_mult_monomial\n        decr_grading_p_monomial decr_grading_term_splus)"], ["proof (state)\nthis:\n  decr_grading_p d n (monom_mult c t (monomial a s + p)) =\n  monom_mult c (decr_grading d n t) (decr_grading_p d n (monomial a s + p))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma decr_grading_p_mult_scalar:\n  assumes \"hom_grading d\"\n  shows \"decr_grading_p d n (p \\<odot> q) = punit.decr_grading_p d n p \\<odot> decr_grading_p d n q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d n (p \\<odot> q) =\n    punit.decr_grading_p d n p \\<odot> decr_grading_p d n q", "proof (induct p rule: poly_mapping_plus_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. decr_grading_p d n (0 \\<odot> q) =\n    punit.decr_grading_p d n 0 \\<odot> decr_grading_p d n q\n 2. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        decr_grading_p d n (p \\<odot> q) =\n        punit.decr_grading_p d n p \\<odot> decr_grading_p d n q\\<rbrakk>\n       \\<Longrightarrow> decr_grading_p d n ((monomial c t + p) \\<odot> q) =\n                         punit.decr_grading_p d n (monomial c t + p) \\<odot>\n                         decr_grading_p d n q", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. decr_grading_p d n (0 \\<odot> q) =\n    punit.decr_grading_p d n 0 \\<odot> decr_grading_p d n q\n 2. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        decr_grading_p d n (p \\<odot> q) =\n        punit.decr_grading_p d n p \\<odot> decr_grading_p d n q\\<rbrakk>\n       \\<Longrightarrow> decr_grading_p d n ((monomial c t + p) \\<odot> q) =\n                         punit.decr_grading_p d n (monomial c t + p) \\<odot>\n                         decr_grading_p d n q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d n (0 \\<odot> q) =\n    punit.decr_grading_p d n 0 \\<odot> decr_grading_p d n q", "by (simp add: punit.decr_grading_p_zero decr_grading_p_zero)"], ["proof (state)\nthis:\n  decr_grading_p d n (0 \\<odot> q) =\n  punit.decr_grading_p d n 0 \\<odot> decr_grading_p d n q\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        decr_grading_p d n (p \\<odot> q) =\n        punit.decr_grading_p d n p \\<odot> decr_grading_p d n q\\<rbrakk>\n       \\<Longrightarrow> decr_grading_p d n ((monomial c t + p) \\<odot> q) =\n                         punit.decr_grading_p d n (monomial c t + p) \\<odot>\n                         decr_grading_p d n q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        decr_grading_p d n (p \\<odot> q) =\n        punit.decr_grading_p d n p \\<odot> decr_grading_p d n q\\<rbrakk>\n       \\<Longrightarrow> decr_grading_p d n ((monomial c t + p) \\<odot> q) =\n                         punit.decr_grading_p d n (monomial c t + p) \\<odot>\n                         decr_grading_p d n q", "case (2 p a s)"], ["proof (state)\nthis:\n  a \\<noteq> (0::'b)\n  s \\<notin> keys p\n  decr_grading_p d n (p \\<odot> q) =\n  punit.decr_grading_p d n p \\<odot> decr_grading_p d n q\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        decr_grading_p d n (p \\<odot> q) =\n        punit.decr_grading_p d n p \\<odot> decr_grading_p d n q\\<rbrakk>\n       \\<Longrightarrow> decr_grading_p d n ((monomial c t + p) \\<odot> q) =\n                         punit.decr_grading_p d n (monomial c t + p) \\<odot>\n                         decr_grading_p d n q", "from assms"], ["proof (chain)\npicking this:\n  hom_grading d", "show ?case"], ["proof (prove)\nusing this:\n  hom_grading d\n\ngoal (1 subgoal):\n 1. decr_grading_p d n ((monomial a s + p) \\<odot> q) =\n    punit.decr_grading_p d n (monomial a s + p) \\<odot> decr_grading_p d n q", "by (simp add: mult_scalar_distrib_right decr_grading_p_plus punit.decr_grading_p_plus 2(3)\n        punit.decr_grading_p_monomial mult_scalar_monomial decr_grading_p_monom_mult punit_decr_grading_term)"], ["proof (state)\nthis:\n  decr_grading_p d n ((monomial a s + p) \\<odot> q) =\n  punit.decr_grading_p d n (monomial a s + p) \\<odot> decr_grading_p d n q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma decr_grading_p_keys_subset: \"keys (decr_grading_p d n p) \\<subseteq> decr_grading_term d n ` keys p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (decr_grading_p d n p) \\<subseteq> decr_grading_term d n ` keys p", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys (decr_grading_p d n p) \\<Longrightarrow>\n       x \\<in> decr_grading_term d n ` keys p", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys (decr_grading_p d n p) \\<Longrightarrow>\n       x \\<in> decr_grading_term d n ` keys p", "assume \"v \\<in> keys (decr_grading_p d n p)\""], ["proof (state)\nthis:\n  v \\<in> keys (decr_grading_p d n p)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys (decr_grading_p d n p) \\<Longrightarrow>\n       x \\<in> decr_grading_term d n ` keys p", "also"], ["proof (state)\nthis:\n  v \\<in> keys (decr_grading_p d n p)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys (decr_grading_p d n p) \\<Longrightarrow>\n       x \\<in> decr_grading_term d n ` keys p", "have \"... \\<subseteq> (\\<Union>u\\<in>keys p. keys (monomial (lookup p u) (decr_grading_term d n u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (decr_grading_p d n p)\n    \\<subseteq> (\\<Union>u\\<in>keys p.\n                    keys (monomial (lookup p u) (decr_grading_term d n u)))", "unfolding decr_grading_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. keys\n     (\\<Sum>v\\<in>keys p. monomial (lookup p v) (decr_grading_term d n v))\n    \\<subseteq> (\\<Union>u\\<in>keys p.\n                    keys (monomial (lookup p u) (decr_grading_term d n u)))", "by (fact keys_sum_subset)"], ["proof (state)\nthis:\n  keys (decr_grading_p d n p)\n  \\<subseteq> (\\<Union>u\\<in>keys p.\n                  keys (monomial (lookup p u) (decr_grading_term d n u)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys (decr_grading_p d n p) \\<Longrightarrow>\n       x \\<in> decr_grading_term d n ` keys p", "finally"], ["proof (chain)\npicking this:\n  v \\<in> (\\<Union>u\\<in>keys p.\n              keys (monomial (lookup p u) (decr_grading_term d n u)))", "obtain u where \"u \\<in> keys p\" and \"v \\<in> keys (monomial (lookup p u) (decr_grading_term d n u))\""], ["proof (prove)\nusing this:\n  v \\<in> (\\<Union>u\\<in>keys p.\n              keys (monomial (lookup p u) (decr_grading_term d n u)))\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> keys p;\n         v \\<in> keys\n                  (monomial (lookup p u) (decr_grading_term d n u))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n  v \\<in> keys (monomial (lookup p u) (decr_grading_term d n u))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys (decr_grading_p d n p) \\<Longrightarrow>\n       x \\<in> decr_grading_term d n ` keys p", "from this(2)"], ["proof (chain)\npicking this:\n  v \\<in> keys (monomial (lookup p u) (decr_grading_term d n u))", "have eq: \"v = decr_grading_term d n u\""], ["proof (prove)\nusing this:\n  v \\<in> keys (monomial (lookup p u) (decr_grading_term d n u))\n\ngoal (1 subgoal):\n 1. v = decr_grading_term d n u", "by (simp split: if_split_asm)"], ["proof (state)\nthis:\n  v = decr_grading_term d n u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys (decr_grading_p d n p) \\<Longrightarrow>\n       x \\<in> decr_grading_term d n ` keys p", "show \"v \\<in> decr_grading_term d n ` keys p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> decr_grading_term d n ` keys p", "unfolding eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_term d n u \\<in> decr_grading_term d n ` keys p", "using \\<open>u \\<in> keys p\\<close>"], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. decr_grading_term d n u \\<in> decr_grading_term d n ` keys p", "by (rule imageI)"], ["proof (state)\nthis:\n  v \\<in> decr_grading_term d n ` keys p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma decr_grading_p_idI':\n  assumes \"hom_grading d\" and \"\\<And>v. v \\<in> keys p \\<Longrightarrow> d (pp_of_term v) \\<le> n\"\n  shows \"decr_grading_p d n p = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d n p = p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. decr_grading_p d n p = p", "have \"decr_grading_p d n p = (\\<Sum>v \\<in> keys p. monomial (lookup p v) v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d n p = (\\<Sum>v\\<in>keys p. monomial (lookup p v) v)", "unfolding decr_grading_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>keys p. monomial (lookup p v) (decr_grading_term d n v)) =\n    (\\<Sum>v\\<in>keys p. monomial (lookup p v) v)", "using refl"], ["proof (prove)\nusing this:\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>keys p. monomial (lookup p v) (decr_grading_term d n v)) =\n    (\\<Sum>v\\<in>keys p. monomial (lookup p v) v)", "proof (rule sum.cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys p \\<Longrightarrow>\n       monomial (lookup p x) (decr_grading_term d n x) =\n       monomial (lookup p x) x", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys p \\<Longrightarrow>\n       monomial (lookup p x) (decr_grading_term d n x) =\n       monomial (lookup p x) x", "assume \"v \\<in> keys p\""], ["proof (state)\nthis:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys p \\<Longrightarrow>\n       monomial (lookup p x) (decr_grading_term d n x) =\n       monomial (lookup p x) x", "hence \"d (pp_of_term v) \\<le> n\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> n", "by (rule assms(2))"], ["proof (state)\nthis:\n  d (pp_of_term v) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys p \\<Longrightarrow>\n       monomial (lookup p x) (decr_grading_term d n x) =\n       monomial (lookup p x) x", "with assms(1)"], ["proof (chain)\npicking this:\n  hom_grading d\n  d (pp_of_term v) \\<le> n", "have \"decr_grading_term d n v = v\""], ["proof (prove)\nusing this:\n  hom_grading d\n  d (pp_of_term v) \\<le> n\n\ngoal (1 subgoal):\n 1. decr_grading_term d n v = v", "by (rule decr_grading_term_idI)"], ["proof (state)\nthis:\n  decr_grading_term d n v = v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys p \\<Longrightarrow>\n       monomial (lookup p x) (decr_grading_term d n x) =\n       monomial (lookup p x) x", "thus \"monomial (lookup p v) (decr_grading_term d n v) = monomial (lookup p v) v\""], ["proof (prove)\nusing this:\n  decr_grading_term d n v = v\n\ngoal (1 subgoal):\n 1. monomial (lookup p v) (decr_grading_term d n v) =\n    monomial (lookup p v) v", "by simp"], ["proof (state)\nthis:\n  monomial (lookup p v) (decr_grading_term d n v) = monomial (lookup p v) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  decr_grading_p d n p = (\\<Sum>v\\<in>keys p. monomial (lookup p v) v)\n\ngoal (1 subgoal):\n 1. decr_grading_p d n p = p", "also"], ["proof (state)\nthis:\n  decr_grading_p d n p = (\\<Sum>v\\<in>keys p. monomial (lookup p v) v)\n\ngoal (1 subgoal):\n 1. decr_grading_p d n p = p", "have \"... = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>keys p. monomial (lookup p v) v) = p", "by (fact poly_mapping_sum_monomials)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>keys p. monomial (lookup p v) v) = p\n\ngoal (1 subgoal):\n 1. decr_grading_p d n p = p", "finally"], ["proof (chain)\npicking this:\n  decr_grading_p d n p = p", "show ?thesis"], ["proof (prove)\nusing this:\n  decr_grading_p d n p = p\n\ngoal (1 subgoal):\n 1. decr_grading_p d n p = p", "."], ["proof (state)\nthis:\n  decr_grading_p d n p = p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* term_powerprod *)"], ["", "context gd_term\nbegin"], ["", "lemma decr_grading_p_idI:\n  assumes \"hom_grading d\" and \"p \\<in> dgrad_p_set d m\"\n  shows \"decr_grading_p d m p = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d m p = p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. decr_grading_p d m p = p", "from assms(2)"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m", "have \"\\<And>v. v \\<in> keys p \\<Longrightarrow> d (pp_of_term v) \\<le> m\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> keys p \\<Longrightarrow> d (pp_of_term v) \\<le> m", "by (auto simp: dgrad_p_set_def dgrad_set_def)"], ["proof (state)\nthis:\n  ?v27 \\<in> keys p \\<Longrightarrow> d (pp_of_term ?v27) \\<le> m\n\ngoal (1 subgoal):\n 1. decr_grading_p d m p = p", "with assms(1)"], ["proof (chain)\npicking this:\n  hom_grading d\n  ?v27 \\<in> keys p \\<Longrightarrow> d (pp_of_term ?v27) \\<le> m", "show ?thesis"], ["proof (prove)\nusing this:\n  hom_grading d\n  ?v27 \\<in> keys p \\<Longrightarrow> d (pp_of_term ?v27) \\<le> m\n\ngoal (1 subgoal):\n 1. decr_grading_p d m p = p", "by (rule decr_grading_p_idI')"], ["proof (state)\nthis:\n  decr_grading_p d m p = p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma decr_grading_p_dgrad_p_setI:\n  assumes \"hom_grading d\"\n  shows \"decr_grading_p d m p \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr_grading_p d m p \\<in> dgrad_p_set d m", "proof (rule dgrad_p_setI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (decr_grading_p d m p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (decr_grading_p d m p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "assume \"v \\<in> keys (decr_grading_p d m p)\""], ["proof (state)\nthis:\n  v \\<in> keys (decr_grading_p d m p)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (decr_grading_p d m p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "hence \"v \\<in> decr_grading_term d m ` keys p\""], ["proof (prove)\nusing this:\n  v \\<in> keys (decr_grading_p d m p)\n\ngoal (1 subgoal):\n 1. v \\<in> decr_grading_term d m ` keys p", "using decr_grading_p_keys_subset"], ["proof (prove)\nusing this:\n  v \\<in> keys (decr_grading_p d m p)\n  keys (decr_grading_p ?d ?n ?p)\n  \\<subseteq> decr_grading_term ?d ?n ` keys ?p\n\ngoal (1 subgoal):\n 1. v \\<in> decr_grading_term d m ` keys p", ".."], ["proof (state)\nthis:\n  v \\<in> decr_grading_term d m ` keys p\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (decr_grading_p d m p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "then"], ["proof (chain)\npicking this:\n  v \\<in> decr_grading_term d m ` keys p", "obtain u where \"v = decr_grading_term d m u\""], ["proof (prove)\nusing this:\n  v \\<in> decr_grading_term d m ` keys p\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        v = decr_grading_term d m u \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  v = decr_grading_term d m u\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> keys (decr_grading_p d m p) \\<Longrightarrow>\n       d (pp_of_term v) \\<le> m", "with assms"], ["proof (chain)\npicking this:\n  hom_grading d\n  v = decr_grading_term d m u", "show \"d (pp_of_term v) \\<le> m\""], ["proof (prove)\nusing this:\n  hom_grading d\n  v = decr_grading_term d m u\n\ngoal (1 subgoal):\n 1. d (pp_of_term v) \\<le> m", "by (simp add: decr_grading_term_le)"], ["proof (state)\nthis:\n  d (pp_of_term v) \\<le> m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in gd_term) in_pmdlE_dgrad_p_set:\n  assumes \"hom_grading d\" and \"B \\<subseteq> dgrad_p_set d m\" and \"p \\<in> dgrad_p_set d m\" and \"p \\<in> pmdl B\"\n  obtains A q where \"finite A\" and \"A \\<subseteq> B\" and \"\\<And>b. q b \\<in> punit.dgrad_p_set d m\"\n    and \"p = (\\<Sum>b\\<in>A. q b \\<odot> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A q.\n        \\<lbrakk>finite A; A \\<subseteq> B;\n         \\<And>b. q b \\<in> punit.dgrad_p_set d m;\n         p = (\\<Sum>b\\<in>A. q b \\<odot> b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>A q.\n        \\<lbrakk>finite A; A \\<subseteq> B;\n         \\<And>b. q b \\<in> punit.dgrad_p_set d m;\n         p = (\\<Sum>b\\<in>A. q b \\<odot> b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(4)"], ["proof (chain)\npicking this:\n  p \\<in> pmdl B", "obtain A q0 where \"finite A\" and \"A \\<subseteq> B\" and p: \"p = (\\<Sum>b\\<in>A. q0 b \\<odot> b)\""], ["proof (prove)\nusing this:\n  p \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. (\\<And>A q0.\n        \\<lbrakk>finite A; A \\<subseteq> B;\n         p = (\\<Sum>b\\<in>A. q0 b \\<odot> b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule pmdl.spanE)"], ["proof (state)\nthis:\n  finite A\n  A \\<subseteq> B\n  p = (\\<Sum>b\\<in>A. q0 b \\<odot> b)\n\ngoal (1 subgoal):\n 1. (\\<And>A q.\n        \\<lbrakk>finite A; A \\<subseteq> B;\n         \\<And>b. q b \\<in> punit.dgrad_p_set d m;\n         p = (\\<Sum>b\\<in>A. q b \\<odot> b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define q where \"q = (\\<lambda>b. punit.decr_grading_p d m (q0 b))\""], ["proof (state)\nthis:\n  q = (\\<lambda>b. local.punit.decr_grading_p d m (q0 b))\n\ngoal (1 subgoal):\n 1. (\\<And>A q.\n        \\<lbrakk>finite A; A \\<subseteq> B;\n         \\<And>b. q b \\<in> punit.dgrad_p_set d m;\n         p = (\\<Sum>b\\<in>A. q b \\<odot> b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>finite A\\<close> \\<open>A \\<subseteq> B\\<close>"], ["proof (chain)\npicking this:\n  finite A\n  A \\<subseteq> B", "show ?thesis"], ["proof (prove)\nusing this:\n  finite A\n  A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b. ?q27 b \\<in> punit.dgrad_p_set d m\n 2. p = (\\<Sum>b\\<in>A. ?q27 b \\<odot> b)", "fix b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b. ?q27 b \\<in> punit.dgrad_p_set d m\n 2. p = (\\<Sum>b\\<in>A. ?q27 b \\<odot> b)", "show \"q b \\<in> punit.dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q b \\<in> punit.dgrad_p_set d m", "unfolding q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.punit.decr_grading_p d m (q0 b) \\<in> punit.dgrad_p_set d m", "using assms(1)"], ["proof (prove)\nusing this:\n  hom_grading d\n\ngoal (1 subgoal):\n 1. local.punit.decr_grading_p d m (q0 b) \\<in> punit.dgrad_p_set d m", "by (rule punit.decr_grading_p_dgrad_p_setI)"], ["proof (state)\nthis:\n  q b \\<in> punit.dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. p = (\\<Sum>b\\<in>A. q (?b60 b) \\<odot> b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p = (\\<Sum>b\\<in>A. q (?b60 b) \\<odot> b)", "from assms(1, 3)"], ["proof (chain)\npicking this:\n  hom_grading d\n  p \\<in> dgrad_p_set d m", "have \"p = decr_grading_p d m p\""], ["proof (prove)\nusing this:\n  hom_grading d\n  p \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. p = decr_grading_p d m p", "by (simp only: decr_grading_p_idI)"], ["proof (state)\nthis:\n  p = decr_grading_p d m p\n\ngoal (1 subgoal):\n 1. p = (\\<Sum>b\\<in>A. q (?b60 b) \\<odot> b)", "also"], ["proof (state)\nthis:\n  p = decr_grading_p d m p\n\ngoal (1 subgoal):\n 1. p = (\\<Sum>b\\<in>A. q (?b60 b) \\<odot> b)", "from assms(1)"], ["proof (chain)\npicking this:\n  hom_grading d", "have \"... = (\\<Sum>b\\<in>A. q b \\<odot> (decr_grading_p d m b))\""], ["proof (prove)\nusing this:\n  hom_grading d\n\ngoal (1 subgoal):\n 1. decr_grading_p d m p = (\\<Sum>b\\<in>A. q b \\<odot> decr_grading_p d m b)", "by (simp add: p q_def decr_grading_p_sum decr_grading_p_mult_scalar)"], ["proof (state)\nthis:\n  decr_grading_p d m p = (\\<Sum>b\\<in>A. q b \\<odot> decr_grading_p d m b)\n\ngoal (1 subgoal):\n 1. p = (\\<Sum>b\\<in>A. q (?b60 b) \\<odot> b)", "also"], ["proof (state)\nthis:\n  decr_grading_p d m p = (\\<Sum>b\\<in>A. q b \\<odot> decr_grading_p d m b)\n\ngoal (1 subgoal):\n 1. p = (\\<Sum>b\\<in>A. q (?b60 b) \\<odot> b)", "from refl"], ["proof (chain)\npicking this:\n  ?t = ?t", "have \"... = (\\<Sum>b\\<in>A. q b \\<odot> b)\""], ["proof (prove)\nusing this:\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. (\\<Sum>b\\<in>A. q b \\<odot> decr_grading_p d m b) =\n    (\\<Sum>b\\<in>A. q b \\<odot> b)", "proof (rule sum.cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       q x \\<odot> decr_grading_p d m x = q x \\<odot> x", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       q x \\<odot> decr_grading_p d m x = q x \\<odot> x", "assume \"b \\<in> A\""], ["proof (state)\nthis:\n  b \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       q x \\<odot> decr_grading_p d m x = q x \\<odot> x", "hence \"b \\<in> B\""], ["proof (prove)\nusing this:\n  b \\<in> A\n\ngoal (1 subgoal):\n 1. b \\<in> B", "using \\<open>A \\<subseteq> B\\<close>"], ["proof (prove)\nusing this:\n  b \\<in> A\n  A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. b \\<in> B", ".."], ["proof (state)\nthis:\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       q x \\<odot> decr_grading_p d m x = q x \\<odot> x", "hence \"b \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. b \\<in> dgrad_p_set d m", "using assms(2)"], ["proof (prove)\nusing this:\n  b \\<in> B\n  B \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. b \\<in> dgrad_p_set d m", ".."], ["proof (state)\nthis:\n  b \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       q x \\<odot> decr_grading_p d m x = q x \\<odot> x", "with assms(1)"], ["proof (chain)\npicking this:\n  hom_grading d\n  b \\<in> dgrad_p_set d m", "have \"decr_grading_p d m b = b\""], ["proof (prove)\nusing this:\n  hom_grading d\n  b \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. decr_grading_p d m b = b", "by (rule decr_grading_p_idI)"], ["proof (state)\nthis:\n  decr_grading_p d m b = b\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       q x \\<odot> decr_grading_p d m x = q x \\<odot> x", "thus \"q b \\<odot> decr_grading_p d m b = q b \\<odot> b\""], ["proof (prove)\nusing this:\n  decr_grading_p d m b = b\n\ngoal (1 subgoal):\n 1. q b \\<odot> decr_grading_p d m b = q b \\<odot> b", "by simp"], ["proof (state)\nthis:\n  q b \\<odot> decr_grading_p d m b = q b \\<odot> b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>b\\<in>A. q b \\<odot> decr_grading_p d m b) =\n  (\\<Sum>b\\<in>A. q b \\<odot> b)\n\ngoal (1 subgoal):\n 1. p = (\\<Sum>b\\<in>A. q (?b60 b) \\<odot> b)", "finally"], ["proof (chain)\npicking this:\n  p = (\\<Sum>b\\<in>A. q b \\<odot> b)", "show \"p = (\\<Sum>b\\<in>A. q b \\<odot> b)\""], ["proof (prove)\nusing this:\n  p = (\\<Sum>b\\<in>A. q b \\<odot> b)\n\ngoal (1 subgoal):\n 1. p = (\\<Sum>b\\<in>A. q b \\<odot> b)", "."], ["proof (state)\nthis:\n  p = (\\<Sum>b\\<in>A. q b \\<odot> b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* gd_term *)"], ["", "end"], ["", "(* theory *)"]]}