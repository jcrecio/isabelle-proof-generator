{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests/Euler_Witness.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests", "problem_names": ["lemma euler_witness_mod[simp]: \"euler_witness (a mod p) p = euler_witness a p\"", "lemma euler_liar_mod: \"euler_liar (a mod p) p = euler_liar a p\"", "lemma euler_liar_cong:\n  assumes \"[a = b] (mod p)\"\n  shows \"euler_liar a p = euler_liar b p\"", "lemma euler_witnessI: \n  \"[x ^ ((n - 1) div 2) = a] (mod int n ) \\<Longrightarrow> [Jacobi x (int n) \\<noteq> a] (mod int n)\n    \\<Longrightarrow>  euler_witness x n\"", "lemma euler_witnessI2:\n  fixes a b :: int and k :: nat\n  assumes \"[a \\<noteq> b] (mod k)\"\n    and \"k dvd n\" \n    and main: \"euler_liar x n \\<Longrightarrow> [Jacobi x n = a] (mod k)\"\n              \"euler_liar x n \\<Longrightarrow> [x ^ ((n - 1) div 2) = b] (mod k)\"\n  shows \"euler_witness x n\"", "lemma euler_witness_exists_weak:\n  assumes \"odd n\" \"\\<not>prime n\" \"2 < n\"\n  shows \"\\<exists>a. euler_witness a n \\<and> coprime a n\"", "lemma euler_witness_exists:\n  assumes \"odd n\" \"\\<not>prime n\" \"2 < n\"\n  shows \"\\<exists>a. euler_witness a n \\<and> coprime a n \\<and> 0 < a \\<and> a < n\"", "lemma euler_witness_exists_nat:\n  assumes \"odd n\" \"\\<not>prime n\" \"2 < n\"\n  shows \"\\<exists>a. euler_witness (int a) n \\<and> coprime a n \\<and> 0 < a \\<and> a < n\"", "lemma euler_liar_1_p[intro, simp]: \"p \\<noteq> 0 \\<Longrightarrow> euler_liar 1 p\"", "lemma euler_liar_mult:\n  shows \"euler_liar y n \\<Longrightarrow> euler_liar x n \\<Longrightarrow> euler_liar (x*y) n\"", "lemma euler_liar_mult':\n  assumes \"1 < n\" \"coprime y n\"\n  shows \"euler_liar y n \\<Longrightarrow> euler_witness x n \\<Longrightarrow> euler_witness (x*y) n\"", "lemma prime_imp_euler_liar:\n  assumes \"prime p\" \"2 < p\" \"0 < x\" \"x < p\"\n  shows   \"euler_liar x p\"", "lemma H_finite: \"finite H\"", "lemma euler_witness_coset:\n  assumes \"euler_witness x p\"\n  shows \"y \\<in> H #>\\<^bsub>G\\<^esub> x \\<Longrightarrow> euler_witness y p\"", "lemma euler_liar_coset:\n  assumes \"euler_liar x p\" \"x \\<in> carrier G\"\n  shows \"y \\<in> H #>\\<^bsub>G\\<^esub> x \\<Longrightarrow> euler_liar y p\"", "lemma in_cosets_aux:\n  assumes \"euler_witness x p\" \"x \\<in> carrier G\"\n  shows \"H #>\\<^bsub>G\\<^esub> x \\<in> rcosets\\<^bsub>G\\<^esub> H\"", "lemma H_cosets_aux:\n  assumes \"euler_witness x p\"\n  shows \"(H #>\\<^bsub>G\\<^esub> x) \\<inter> H = {}\"", "lemma H_rcosets_aux:\n  assumes \"euler_witness x p\" \"x \\<in> carrier G\"\n  shows \"{H, H #>\\<^bsub>G\\<^esub> x} \\<subseteq> rcosets\\<^bsub>G\\<^esub> H\"", "lemma H_not_eq_coset:\n  assumes \"euler_witness x p\"\n  shows \"H \\<noteq> H #>\\<^bsub>G\\<^esub> x\"", "lemma finite_cosets_H: \"finite (rcosets\\<^bsub>G\\<^esub> H)\"", "lemma card_cosets_limit:\n  assumes \"euler_witness x p\" \"x \\<in> carrier G\"\n  shows \"2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\"", "lemma card_euler_liars_cosets_limit:\n  assumes \"\\<not>prime p\" \"2 < p\"\n  shows \"2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\" \"card H < (p - 1) div 2\"", "lemma prime_imp_G_is_H:\n  assumes \"prime p\" \"2 < p\"\n  shows \"carrier G = H\""], "translations": [["", "lemma euler_witness_mod[simp]: \"euler_witness (a mod p) p = euler_witness a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. euler_witness (a mod int p) p = euler_witness a p", "unfolding euler_witness_def cong_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Jacobi (a mod int p) (int p) mod int p \\<noteq>\n     (a mod int p) ^ ((p - 1) div 2) mod int p) =\n    (Jacobi a (int p) mod int p \\<noteq> a ^ ((p - 1) div 2) mod int p)", "by (simp add: power_mod)"], ["", "lemma euler_liar_mod: \"euler_liar (a mod p) p = euler_liar a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. euler_liar (a mod int p) p = euler_liar a p", "by simp"], ["", "lemma euler_liar_cong:\n  assumes \"[a = b] (mod p)\"\n  shows \"euler_liar a p = euler_liar b p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. euler_liar a p = euler_liar b p", "by (metis assms cong_def euler_witness_mod)"], ["", "lemma euler_witnessI: \n  \"[x ^ ((n - 1) div 2) = a] (mod int n ) \\<Longrightarrow> [Jacobi x (int n) \\<noteq> a] (mod int n)\n    \\<Longrightarrow>  euler_witness x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>[x ^ ((n - 1) div 2) = a] (mod int n);\n     [Jacobi x (int n) \\<noteq> a] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> euler_witness x n", "unfolding euler_witness_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>[x ^ ((n - 1) div 2) = a] (mod int n);\n     [Jacobi x (int n) \\<noteq> a] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> [Jacobi x\n                        (int n) \\<noteq> x ^ ((n - 1) div 2)] (mod int n)", "using cong_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>[?b = ?c] (mod ?a); [?c = ?d] (mod ?a)\\<rbrakk>\n  \\<Longrightarrow> [?b = ?d] (mod ?a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>[x ^ ((n - 1) div 2) = a] (mod int n);\n     [Jacobi x (int n) \\<noteq> a] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> [Jacobi x\n                        (int n) \\<noteq> x ^ ((n - 1) div 2)] (mod int n)", "by blast"], ["", "lemma euler_witnessI2:\n  fixes a b :: int and k :: nat\n  assumes \"[a \\<noteq> b] (mod k)\"\n    and \"k dvd n\" \n    and main: \"euler_liar x n \\<Longrightarrow> [Jacobi x n = a] (mod k)\"\n              \"euler_liar x n \\<Longrightarrow> [x ^ ((n - 1) div 2) = b] (mod k)\"\n  shows \"euler_witness x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. euler_witness x n", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. euler_liar x n \\<Longrightarrow> False", "assume \"euler_liar x n\""], ["proof (state)\nthis:\n  euler_liar x n\n\ngoal (1 subgoal):\n 1. euler_liar x n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  euler_liar x n", "have \"[Jacobi x (int n) = x ^ ((n - 1) div 2)] (mod k)\""], ["proof (prove)\nusing this:\n  euler_liar x n\n\ngoal (1 subgoal):\n 1. [Jacobi x (int n) = x ^ ((n - 1) div 2)] (mod int k)", "using \\<open>k dvd n\\<close> cong_dvd_modulus euler_witness_def int_dvd_int_iff"], ["proof (prove)\nusing this:\n  euler_liar x n\n  k dvd n\n  \\<lbrakk>[?x = ?y] (mod ?m); ?n dvd ?m\\<rbrakk>\n  \\<Longrightarrow> [?x = ?y] (mod ?n)\n  euler_witness ?a ?p =\n  [Jacobi ?a (int ?p) \\<noteq> ?a ^ ((?p - 1) div 2)] (mod int ?p)\n  (int ?m dvd int ?n) = (?m dvd ?n)\n\ngoal (1 subgoal):\n 1. [Jacobi x (int n) = x ^ ((n - 1) div 2)] (mod int k)", "by blast"], ["proof (state)\nthis:\n  [Jacobi x (int n) = x ^ ((n - 1) div 2)] (mod int k)\n\ngoal (1 subgoal):\n 1. euler_liar x n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  [Jacobi x (int n) = x ^ ((n - 1) div 2)] (mod int k)\n\ngoal (1 subgoal):\n 1. euler_liar x n \\<Longrightarrow> False", "note main[OF \\<open>euler_liar x n\\<close>]"], ["proof (state)\nthis:\n  [Jacobi x (int n) = a] (mod int k)\n  [x ^ ((n - 1) div 2) = b] (mod int k)\n\ngoal (1 subgoal):\n 1. euler_liar x n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  [Jacobi x (int n) = x ^ ((n - 1) div 2)] (mod int k)\n  [Jacobi x (int n) = a] (mod int k)\n  [x ^ ((n - 1) div 2) = b] (mod int k)", "show False"], ["proof (prove)\nusing this:\n  [Jacobi x (int n) = x ^ ((n - 1) div 2)] (mod int k)\n  [Jacobi x (int n) = a] (mod int k)\n  [x ^ ((n - 1) div 2) = b] (mod int k)\n\ngoal (1 subgoal):\n 1. False", "using \\<open>[a \\<noteq> b] (mod k)\\<close> and cong_trans cong_sym"], ["proof (prove)\nusing this:\n  [Jacobi x (int n) = x ^ ((n - 1) div 2)] (mod int k)\n  [Jacobi x (int n) = a] (mod int k)\n  [x ^ ((n - 1) div 2) = b] (mod int k)\n  [a \\<noteq> b] (mod int k)\n  \\<lbrakk>[?b = ?c] (mod ?a); [?c = ?d] (mod ?a)\\<rbrakk>\n  \\<Longrightarrow> [?b = ?d] (mod ?a)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> [?c = ?b] (mod ?a)\n\ngoal (1 subgoal):\n 1. False", "by metis"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma euler_witness_exists_weak:\n  assumes \"odd n\" \"\\<not>prime n\" \"2 < n\"\n  shows \"\\<exists>a. euler_witness a n \\<and> coprime a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "proof (cases \"squarefree n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "case True"], ["proof (state)\nthis:\n  squarefree n\n\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "obtain p k where n: \"n = p * k\" and \"1 < p\" \"p < n\" \"1 < k\" \"k < n\" \"prime p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p k.\n        \\<lbrakk>n = p * k; 1 < p; p < n; 1 < k; k < n; prime p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prime_divisor_exists_strong_nat[of n] \\<open>\\<not>prime n\\<close> \\<open>2 < n\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>1 < n; \\<not> prime n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p k.\n                       n = p * k \\<and>\n                       1 < p \\<and>\n                       p < n \\<and> 1 < k \\<and> k < n \\<and> prime p\n  \\<not> prime n\n  2 < n\n\ngoal (1 subgoal):\n 1. (\\<And>p k.\n        \\<lbrakk>n = p * k; 1 < p; p < n; 1 < k; k < n; prime p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n = p * k\n  1 < p\n  p < n\n  1 < k\n  k < n\n  prime p\n\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"coprime p k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime p k", "using \\<open>n = p * k\\<close> and \\<open>squarefree n\\<close>"], ["proof (prove)\nusing this:\n  n = p * k\n  squarefree n\n\ngoal (1 subgoal):\n 1. coprime p k", "using squarefree_mult_imp_coprime"], ["proof (prove)\nusing this:\n  n = p * k\n  squarefree n\n  squarefree (?a * ?b) \\<Longrightarrow> coprime ?a ?b\n\ngoal (1 subgoal):\n 1. coprime p k", "by blast"], ["proof (state)\nthis:\n  coprime p k\n\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "hence \"coprime (int p) (int k)\""], ["proof (prove)\nusing this:\n  coprime p k\n\ngoal (1 subgoal):\n 1. coprime (int p) (int k)", "by simp"], ["proof (state)\nthis:\n  coprime (int p) (int k)\n\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"odd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd p", "using n \\<open>odd n\\<close>"], ["proof (prove)\nusing this:\n  n = p * k\n  odd n\n\ngoal (1 subgoal):\n 1. odd p", "by simp"], ["proof (state)\nthis:\n  odd p\n\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  odd p", "obtain b where \"\\<not>QuadRes p b\""], ["proof (prove)\nusing this:\n  odd p\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<not> QuadRes (int p) b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using not_QuadRes_ex[of \"int p\"]"], ["proof (prove)\nusing this:\n  odd p\n  \\<lbrakk>1 < int p; odd (int p)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. \\<not> QuadRes (int p) x\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<not> QuadRes (int p) b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>prime p\\<close> prime_gt_1_int"], ["proof (prove)\nusing this:\n  odd p\n  \\<lbrakk>1 < int p; odd (int p)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. \\<not> QuadRes (int p) x\n  prime p\n  prime ?p \\<Longrightarrow> 1 < ?p\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<not> QuadRes (int p) b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<not> QuadRes (int p) b\n\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  \\<not> QuadRes (int p) b", "have \"[b \\<noteq> 0] (mod p)\""], ["proof (prove)\nusing this:\n  \\<not> QuadRes (int p) b\n\ngoal (1 subgoal):\n 1. [b \\<noteq> 0] (mod int p)", "unfolding cong_def QuadRes_def"], ["proof (prove)\nusing this:\n  \\<nexists>y. y\\<^sup>2 mod int p = b mod int p\n\ngoal (1 subgoal):\n 1. b mod int p \\<noteq> 0 mod int p", "by (metis zero_power2)"], ["proof (state)\nthis:\n  [b \\<noteq> 0] (mod int p)\n\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "from binary_chinese_remainder_int[OF \\<open>coprime (int p) (int k)\\<close>, of b 1]"], ["proof (chain)\npicking this:\n  \\<exists>x. [x = b] (mod int p) \\<and> [x = 1] (mod int k)", "obtain x :: int where x: \"[x = b] (mod p)\" \"[x = 1] (mod k)\""], ["proof (prove)\nusing this:\n  \\<exists>x. [x = b] (mod int p) \\<and> [x = 1] (mod int k)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>[x = b] (mod int p); [x = 1] (mod int k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  [x = b] (mod int p)\n  [x = 1] (mod int k)\n\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"euler_witness x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. euler_witness x n", "proof (rule euler_witnessI2[of \"-1\" 1 k])"], ["proof (state)\ngoal (4 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)\n 4. euler_liar x n \\<Longrightarrow> [x ^ ((n - 1) div 2) = 1] (mod int k)", "show \"[x ^ ((n - 1) div 2) = 1] (mod k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [x ^ ((n - 1) div 2) = 1] (mod int k)", "using \\<open>[x = 1] (mod k)\\<close> and cong_def"], ["proof (prove)\nusing this:\n  [x = 1] (mod int k)\n  [?b = ?c] (mod ?a) = (?b mod ?a = ?c mod ?a)\n\ngoal (1 subgoal):\n 1. [x ^ ((n - 1) div 2) = 1] (mod int k)", "using cong_pow"], ["proof (prove)\nusing this:\n  [x = 1] (mod int k)\n  [?b = ?c] (mod ?a) = (?b mod ?a = ?c mod ?a)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> [?b ^ ?n = ?c ^ ?n] (mod ?a)\n\ngoal (1 subgoal):\n 1. [x ^ ((n - 1) div 2) = 1] (mod int k)", "by fastforce"], ["proof (state)\nthis:\n  [x ^ ((n - 1) div 2) = 1] (mod int k)\n\ngoal (3 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)", "have \"Jacobi x n = Jacobi x p * Jacobi x k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Jacobi x (int n) = Jacobi x (int p) * Jacobi x (int k)", "unfolding n"], ["proof (prove)\ngoal (1 subgoal):\n 1. Jacobi x (int (p * k)) = Jacobi x (int p) * Jacobi x (int k)", "using \\<open>1 < k\\<close> \\<open>1 < p\\<close>"], ["proof (prove)\nusing this:\n  1 < k\n  1 < p\n\ngoal (1 subgoal):\n 1. Jacobi x (int (p * k)) = Jacobi x (int p) * Jacobi x (int k)", "by fastforce"], ["proof (state)\nthis:\n  Jacobi x (int n) = Jacobi x (int p) * Jacobi x (int k)\n\ngoal (3 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)", "also"], ["proof (state)\nthis:\n  Jacobi x (int n) = Jacobi x (int p) * Jacobi x (int k)\n\ngoal (3 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)", "note Jacobi_mod_cong[OF \\<open>[x = b] (mod p)\\<close>]"], ["proof (state)\nthis:\n  Jacobi x (int p) = Jacobi b (int p)\n\ngoal (3 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)", "also"], ["proof (state)\nthis:\n  Jacobi x (int p) = Jacobi b (int p)\n\ngoal (3 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)", "have \"Jacobi b p = Legendre b p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Jacobi b (int p) = Legendre b (int p)", "using \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. Jacobi b (int p) = Legendre b (int p)", "by (simp add: prime_p_Jacobi_eq_Legendre)"], ["proof (state)\nthis:\n  Jacobi b (int p) = Legendre b (int p)\n\ngoal (3 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)", "also"], ["proof (state)\nthis:\n  Jacobi b (int p) = Legendre b (int p)\n\ngoal (3 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)", "have \"... = -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Legendre b (int p) = - 1", "unfolding Legendre_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if [b = 0] (mod int p) then 0\n     else if QuadRes (int p) b then 1 else - 1) =\n    - 1", "using \\<open>[b \\<noteq> 0] (mod p)\\<close> and \\<open>\\<not> QuadRes p b\\<close>"], ["proof (prove)\nusing this:\n  [b \\<noteq> 0] (mod int p)\n  \\<not> QuadRes (int p) b\n\ngoal (1 subgoal):\n 1. (if [b = 0] (mod int p) then 0\n     else if QuadRes (int p) b then 1 else - 1) =\n    - 1", "by auto"], ["proof (state)\nthis:\n  Legendre b (int p) = - 1\n\ngoal (3 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)", "also"], ["proof (state)\nthis:\n  Legendre b (int p) = - 1\n\ngoal (3 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)", "note Jacobi_mod_cong[OF \\<open>[x = 1] (mod k)\\<close>]"], ["proof (state)\nthis:\n  Jacobi x (int k) = Jacobi 1 (int k)\n\ngoal (3 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n\n 3. euler_liar x n \\<Longrightarrow> [Jacobi x (int n) = - 1] (mod int k)", "finally"], ["proof (chain)\npicking this:\n  Jacobi x (int n) = - 1 * Jacobi 1 (int k)", "show \"[Jacobi x (int n) = - 1] (mod int k)\""], ["proof (prove)\nusing this:\n  Jacobi x (int n) = - 1 * Jacobi 1 (int k)\n\ngoal (1 subgoal):\n 1. [Jacobi x (int n) = - 1] (mod int k)", "using \\<open>1 < k\\<close>"], ["proof (prove)\nusing this:\n  Jacobi x (int n) = - 1 * Jacobi 1 (int k)\n  1 < k\n\ngoal (1 subgoal):\n 1. [Jacobi x (int n) = - 1] (mod int k)", "by auto"], ["proof (state)\nthis:\n  [Jacobi x (int n) = - 1] (mod int k)\n\ngoal (2 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n", "have \"2 < k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 < k", "using \\<open>odd n\\<close> and \\<open>1 < k\\<close>"], ["proof (prove)\nusing this:\n  odd n\n  1 < k\n\ngoal (1 subgoal):\n 1. 2 < k", "unfolding n"], ["proof (prove)\nusing this:\n  odd (p * k)\n  1 < k\n\ngoal (1 subgoal):\n 1. 2 < k", "by(cases \"k = 2\") auto"], ["proof (state)\nthis:\n  2 < k\n\ngoal (2 subgoals):\n 1. [- 1 \\<noteq> 1] (mod int k)\n 2. k dvd n", "then"], ["proof (chain)\npicking this:\n  2 < k", "show \"[- 1 \\<noteq> 1] (mod k)\""], ["proof (prove)\nusing this:\n  2 < k\n\ngoal (1 subgoal):\n 1. [- 1 \\<noteq> 1] (mod int k)", "by auto"], ["proof (state)\nthis:\n  [- 1 \\<noteq> 1] (mod int k)\n\ngoal (1 subgoal):\n 1. k dvd n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k dvd n", "show \"k dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k dvd n", "unfolding n"], ["proof (prove)\ngoal (1 subgoal):\n 1. k dvd p * k", "by simp"], ["proof (state)\nthis:\n  k dvd n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  euler_witness x n\n\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"coprime x p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime x (int p)", "using \\<open>[b \\<noteq> 0] (mod int p)\\<close> \\<open>[x = b] (mod int p)\\<close> and \\<open>prime p\\<close> not_coprime_cong_eq_0[of p x] prime_nat_int_transfer"], ["proof (prove)\nusing this:\n  [b \\<noteq> 0] (mod int p)\n  [x = b] (mod int p)\n  prime p\n  \\<lbrakk>prime (int p); \\<not> coprime x (int p)\\<rbrakk>\n  \\<Longrightarrow> [x = 0] (mod int p)\n  prime (int ?n) = prime ?n\n\ngoal (1 subgoal):\n 1. coprime x (int p)", "by (blast intro: cong_sym cong_trans)"], ["proof (state)\nthis:\n  coprime x (int p)\n\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  coprime x (int p)", "have \"coprime x n\""], ["proof (prove)\nusing this:\n  coprime x (int p)\n\ngoal (1 subgoal):\n 1. coprime x (int n)", "using n \\<open>[x = 1] (mod int k)\\<close>"], ["proof (prove)\nusing this:\n  coprime x (int p)\n  n = p * k\n  [x = 1] (mod int k)\n\ngoal (1 subgoal):\n 1. coprime x (int n)", "by (metis coprime_iff_invertible_int coprime_mult_right_iff mult.right_neutral of_nat_mult)"], ["proof (state)\nthis:\n  coprime x (int n)\n\ngoal (2 subgoals):\n 1. squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n 2. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  coprime x (int n)", "show ?thesis"], ["proof (prove)\nusing this:\n  coprime x (int n)\n\ngoal (1 subgoal):\n 1. \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "using \\<open>euler_witness x n\\<close>"], ["proof (prove)\nusing this:\n  coprime x (int n)\n  euler_witness x n\n\ngoal (1 subgoal):\n 1. \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "by blast"], ["proof (state)\nthis:\n  \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "case False"], ["proof (state)\nthis:\n  \\<not> squarefree n\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  \\<not> squarefree n", "obtain p where p: \"prime p\" \"p^2 dvd n\""], ["proof (prove)\nusing this:\n  \\<not> squarefree n\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>prime p; p\\<^sup>2 dvd n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>odd n\\<close>"], ["proof (prove)\nusing this:\n  \\<not> squarefree n\n  odd n\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>prime p; p\\<^sup>2 dvd n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis less_not_refl2 odd_pos squarefree_factorial_semiring)"], ["proof (state)\nthis:\n  prime p\n  p\\<^sup>2 dvd n\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "hence \"p dvd n\""], ["proof (prove)\nusing this:\n  prime p\n  p\\<^sup>2 dvd n\n\ngoal (1 subgoal):\n 1. p dvd n", "by auto"], ["proof (state)\nthis:\n  p dvd n\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "from p"], ["proof (chain)\npicking this:\n  prime p\n  p\\<^sup>2 dvd n", "have Z: \"p dvd n div p\""], ["proof (prove)\nusing this:\n  prime p\n  p\\<^sup>2 dvd n\n\ngoal (1 subgoal):\n 1. p dvd n div p", "by (auto intro: dvd_mult_imp_div simp: power2_eq_square)"], ["proof (state)\nthis:\n  p dvd n div p\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have n: \"n = p * (n div p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = p * (n div p)", "using p(2)"], ["proof (prove)\nusing this:\n  p\\<^sup>2 dvd n\n\ngoal (1 subgoal):\n 1. n = p * (n div p)", "unfolding power2_eq_square"], ["proof (prove)\nusing this:\n  p * p dvd n\n\ngoal (1 subgoal):\n 1. n = p * (n div p)", "by (metis dvd_mult_div_cancel dvd_mult_right)"], ["proof (state)\nthis:\n  n = p * (n div p)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"odd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd p", "using p \\<open>odd n\\<close>"], ["proof (prove)\nusing this:\n  prime p\n  p\\<^sup>2 dvd n\n  odd n\n\ngoal (1 subgoal):\n 1. odd p", "by (meson dvd_trans even_power pos2)"], ["proof (state)\nthis:\n  odd p\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  odd p", "have \"2 < p\""], ["proof (prove)\nusing this:\n  odd p\n\ngoal (1 subgoal):\n 1. 2 < p", "using prime_ge_2_nat[OF \\<open>prime p\\<close>]"], ["proof (prove)\nusing this:\n  odd p\n  2 \\<le> p\n\ngoal (1 subgoal):\n 1. 2 < p", "by presburger"], ["proof (state)\nthis:\n  2 < p\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "define a where a_def: \"a = n div p + 1\""], ["proof (state)\nthis:\n  a = n div p + 1\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have A: \"a^p = (\\<Sum>k=0..p. (p choose k) * (n div p)^k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ p = (\\<Sum>k = 0..p. (p choose k) * (n div p) ^ k)", "unfolding binomial a_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>p. of_nat (p choose k) * (n div p) ^ k * 1 ^ (p - k)) =\n    (\\<Sum>k = 0..p. (p choose k) * (n div p) ^ k)", "using atLeast0AtMost"], ["proof (prove)\nusing this:\n  {0..?n} = {..?n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>p. of_nat (p choose k) * (n div p) ^ k * 1 ^ (p - k)) =\n    (\\<Sum>k = 0..p. (p choose k) * (n div p) ^ k)", "by auto"], ["proof (state)\nthis:\n  a ^ p = (\\<Sum>k = 0..p. (p choose k) * (n div p) ^ k)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "also"], ["proof (state)\nthis:\n  a ^ p = (\\<Sum>k = 0..p. (p choose k) * (n div p) ^ k)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have B: \"... = 1 + (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k)\" (is \"?A = 1 + ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..p. (p choose k) * (n div p) ^ k) =\n    1 + (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k)", "by (simp add: sum.atLeast_Suc_atMost)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..p. (p choose k) * (n div p) ^ k) =\n  1 + (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..p. (p choose k) * (n div p) ^ k) =\n  1 + (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have C: \"?B = (n div p) * (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))\" (is \"_ = _ * ?C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k) =\n    n div p * (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))", "unfolding sum_distrib_left"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k) =\n    (\\<Sum>na = 1..p. n div p * ((p choose na) * (n div p) ^ (na - 1)))", "proof (rule sum.cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. {1..p} = {1..p}\n 2. \\<And>x.\n       x \\<in> {1..p} \\<Longrightarrow>\n       (p choose x) * (n div p) ^ x =\n       n div p * ((p choose x) * (n div p) ^ (x - 1))", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. {1..p} = {1..p}\n 2. \\<And>x.\n       x \\<in> {1..p} \\<Longrightarrow>\n       (p choose x) * (n div p) ^ x =\n       n div p * ((p choose x) * (n div p) ^ (x - 1))", "assume \"x \\<in> {1..p}\""], ["proof (state)\nthis:\n  x \\<in> {1..p}\n\ngoal (2 subgoals):\n 1. {1..p} = {1..p}\n 2. \\<And>x.\n       x \\<in> {1..p} \\<Longrightarrow>\n       (p choose x) * (n div p) ^ x =\n       n div p * ((p choose x) * (n div p) ^ (x - 1))", "hence \"0 < x\""], ["proof (prove)\nusing this:\n  x \\<in> {1..p}\n\ngoal (1 subgoal):\n 1. 0 < x", "by simp"], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. {1..p} = {1..p}\n 2. \\<And>x.\n       x \\<in> {1..p} \\<Longrightarrow>\n       (p choose x) * (n div p) ^ x =\n       n div p * ((p choose x) * (n div p) ^ (x - 1))", "hence \"(n div p) ^ x = n div p * (n div p) ^ (x - 1)\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. (n div p) ^ x = n div p * (n div p) ^ (x - 1)", "by (metis mult.commute power_minus_mult)"], ["proof (state)\nthis:\n  (n div p) ^ x = n div p * (n div p) ^ (x - 1)\n\ngoal (2 subgoals):\n 1. {1..p} = {1..p}\n 2. \\<And>x.\n       x \\<in> {1..p} \\<Longrightarrow>\n       (p choose x) * (n div p) ^ x =\n       n div p * ((p choose x) * (n div p) ^ (x - 1))", "thus \"(p choose x) * (n div p) ^ x = n div p * ((p choose x) * (n div p) ^ (x-1))\""], ["proof (prove)\nusing this:\n  (n div p) ^ x = n div p * (n div p) ^ (x - 1)\n\ngoal (1 subgoal):\n 1. (p choose x) * (n div p) ^ x =\n    n div p * ((p choose x) * (n div p) ^ (x - 1))", "by simp"], ["proof (state)\nthis:\n  (p choose x) * (n div p) ^ x =\n  n div p * ((p choose x) * (n div p) ^ (x - 1))\n\ngoal (1 subgoal):\n 1. {1..p} = {1..p}", "qed simp"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k) =\n  n div p * (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "finally"], ["proof (chain)\npicking this:\n  a ^ p = 1 + n div p * (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))", "have 1: \"a ^ p = 1 + n div p * (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))\""], ["proof (prove)\nusing this:\n  a ^ p = 1 + n div p * (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))\n\ngoal (1 subgoal):\n 1. a ^ p =\n    1 + n div p * (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))", "."], ["proof (state)\nthis:\n  a ^ p = 1 + n div p * (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have D: \"p dvd ?C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p dvd (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))", "proof (rule dvd_sum, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> {1..p} \\<Longrightarrow>\n       p dvd (p choose a) * (n div p) ^ (a - 1)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> {1..p} \\<Longrightarrow>\n       p dvd (p choose a) * (n div p) ^ (a - 1)", "assume \"a \\<in> {1..p}\""], ["proof (state)\nthis:\n  a \\<in> {1..p}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> {1..p} \\<Longrightarrow>\n       p dvd (p choose a) * (n div p) ^ (a - 1)", "show \"p dvd (p choose a) * (n div p) ^ (a - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p dvd (p choose a) * (n div p) ^ (a - 1)", "proof(cases \"a = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = p \\<Longrightarrow> p dvd (p choose a) * (n div p) ^ (a - 1)\n 2. a \\<noteq> p \\<Longrightarrow> p dvd (p choose a) * (n div p) ^ (a - 1)", "note * = dvd_power_le[of _ _ 1, simplified]"], ["proof (state)\nthis:\n  \\<lbrakk>?x dvd ?y; Suc 0 \\<le> ?m\\<rbrakk>\n  \\<Longrightarrow> ?x dvd ?y ^ ?m\n\ngoal (2 subgoals):\n 1. a = p \\<Longrightarrow> p dvd (p choose a) * (n div p) ^ (a - 1)\n 2. a \\<noteq> p \\<Longrightarrow> p dvd (p choose a) * (n div p) ^ (a - 1)", "case True"], ["proof (state)\nthis:\n  a = p\n\ngoal (2 subgoals):\n 1. a = p \\<Longrightarrow> p dvd (p choose a) * (n div p) ^ (a - 1)\n 2. a \\<noteq> p \\<Longrightarrow> p dvd (p choose a) * (n div p) ^ (a - 1)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = p\n\ngoal (1 subgoal):\n 1. p dvd (p choose a) * (n div p) ^ (a - 1)", "using \\<open>p dvd n div p\\<close> \\<open>2 < p\\<close>"], ["proof (prove)\nusing this:\n  a = p\n  p dvd n div p\n  2 < p\n\ngoal (1 subgoal):\n 1. p dvd (p choose a) * (n div p) ^ (a - 1)", "by (auto intro: *)"], ["proof (state)\nthis:\n  p dvd (p choose a) * (n div p) ^ (a - 1)\n\ngoal (1 subgoal):\n 1. a \\<noteq> p \\<Longrightarrow> p dvd (p choose a) * (n div p) ^ (a - 1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> p \\<Longrightarrow> p dvd (p choose a) * (n div p) ^ (a - 1)", "case False"], ["proof (state)\nthis:\n  a \\<noteq> p\n\ngoal (1 subgoal):\n 1. a \\<noteq> p \\<Longrightarrow> p dvd (p choose a) * (n div p) ^ (a - 1)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> p\n\ngoal (1 subgoal):\n 1. p dvd (p choose a) * (n div p) ^ (a - 1)", "using \\<open>a \\<in> {1..p}\\<close> and \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  a \\<noteq> p\n  a \\<in> {1..p}\n  prime p\n\ngoal (1 subgoal):\n 1. p dvd (p choose a) * (n div p) ^ (a - 1)", "by (auto intro!: dvd_mult2 prime_dvd_choose)"], ["proof (state)\nthis:\n  p dvd (p choose a) * (n div p) ^ (a - 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p dvd (p choose a) * (n div p) ^ (a - 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p dvd (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  p dvd (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))", "obtain m where m: \"?C = p * m\""], ["proof (prove)\nusing this:\n  p dvd (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1)) =\n        p * m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using dvdE"], ["proof (prove)\nusing this:\n  p dvd (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1))\n  \\<lbrakk>?b dvd ?a; \\<And>k. ?a = ?b * k \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1)) =\n        p * m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1)) = p * m\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"0 < p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < p", "using \\<open>odd p\\<close> and odd_pos"], ["proof (prove)\nusing this:\n  odd p\n  odd ?n \\<Longrightarrow> 0 < ?n\n\ngoal (1 subgoal):\n 1. 0 < p", "by blast"], ["proof (state)\nthis:\n  0 < p\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  0 < p", "have \"?C \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < p\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1)) \\<noteq> 0", "using   sum.atLeast_Suc_atMost[OF Suc_leI]"], ["proof (prove)\nusing this:\n  0 < p\n  ?m1 < ?n \\<Longrightarrow>\n  sum ?g {Suc ?m1..?n} = ?g (Suc ?m1) + sum ?g {Suc (Suc ?m1)..?n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1)) \\<noteq> 0", "by (simp add: Suc_leI sum.atLeast_Suc_atMost)"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1)) \\<noteq> 0", "have \"m \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. m \\<noteq> 0", "using m"], ["proof (prove)\nusing this:\n  (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1)) \\<noteq> 0\n  (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ (k - 1)) = p * m\n\ngoal (1 subgoal):\n 1. m \\<noteq> 0", "by fastforce"], ["proof (state)\nthis:\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"n dvd ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n dvd (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k)", "unfolding C m"], ["proof (prove)\ngoal (1 subgoal):\n 1. n dvd n div p * (p * m)", "using p"], ["proof (prove)\nusing this:\n  prime p\n  p\\<^sup>2 dvd n\n\ngoal (1 subgoal):\n 1. n dvd n div p * (p * m)", "by (auto simp: power2_eq_square)"], ["proof (state)\nthis:\n  n dvd (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "hence \"?B mod n = 0\""], ["proof (prove)\nusing this:\n  n dvd (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k) mod n = 0", "by presburger"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k) mod n = 0\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "hence \"[a^p = 1] (mod n)\""], ["proof (prove)\nusing this:\n  (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k) mod n = 0\n\ngoal (1 subgoal):\n 1. [a ^ p = 1] (mod n)", "unfolding A B cong_def"], ["proof (prove)\nusing this:\n  (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k) mod n = 0\n\ngoal (1 subgoal):\n 1. (1 + (\\<Sum>k = 1..p. (p choose k) * (n div p) ^ k)) mod n = 1 mod n", "by (subst mod_Suc_eq[symmetric, unfolded Suc_eq_plus1_left]) simp"], ["proof (state)\nthis:\n  [a ^ p = 1] (mod n)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"\\<not> p dvd n - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1", "using p assms(1)"], ["proof (prove)\nusing this:\n  prime p\n  p\\<^sup>2 dvd n\n  odd n\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1", "by (metis One_nat_def Suc_leI dvd_diffD1 dvd_mult_right not_prime_unit odd_pos power2_eq_square)"], ["proof (state)\nthis:\n  \\<not> p dvd n - 1\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"[(n div p + 1) \\<noteq> 1] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [n div p + 1 \\<noteq> 1] (mod n)", "using \\<open>2 < p\\<close> \\<open>odd n\\<close> and \\<open>prime p\\<close> \\<open>p\\<^sup>2 dvd n\\<close>"], ["proof (prove)\nusing this:\n  2 < p\n  odd n\n  prime p\n  p\\<^sup>2 dvd n\n\ngoal (1 subgoal):\n 1. [n div p + 1 \\<noteq> 1] (mod n)", "using div_mult2_eq n nonzero_mult_div_cancel_left"], ["proof (prove)\nusing this:\n  2 < p\n  odd n\n  prime p\n  p\\<^sup>2 dvd n\n  ?m div (?n * ?q) = ?m div ?n div ?q\n  n = p * (n div p)\n  ?a \\<noteq> (0::?'a) \\<Longrightarrow> ?a * ?b div ?a = ?b\n\ngoal (1 subgoal):\n 1. [n div p + 1 \\<noteq> 1] (mod n)", "by (force dest!: cong_to_1_nat)"], ["proof (state)\nthis:\n  [n div p + 1 \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  [n div p + 1 \\<noteq> 1] (mod n)", "have \"ord n a \\<noteq> 1\""], ["proof (prove)\nusing this:\n  [n div p + 1 \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. ord n a \\<noteq> 1", "using \\<open>2 < p\\<close> \\<open>odd n\\<close> and \\<open>prime p\\<close> \\<open>p\\<^sup>2 dvd n\\<close>"], ["proof (prove)\nusing this:\n  [n div p + 1 \\<noteq> 1] (mod n)\n  2 < p\n  odd n\n  prime p\n  p\\<^sup>2 dvd n\n\ngoal (1 subgoal):\n 1. ord n a \\<noteq> 1", "using ord_works[of a n]"], ["proof (prove)\nusing this:\n  [n div p + 1 \\<noteq> 1] (mod n)\n  2 < p\n  odd n\n  prime p\n  p\\<^sup>2 dvd n\n  [a ^ ord n a = 1] (mod n) \\<and>\n  (\\<forall>m.\n      0 < m \\<and> m < ord n a \\<longrightarrow> [a ^ m \\<noteq> 1] (mod n))\n\ngoal (1 subgoal):\n 1. ord n a \\<noteq> 1", "unfolding a_def"], ["proof (prove)\nusing this:\n  [n div p + 1 \\<noteq> 1] (mod n)\n  2 < p\n  odd n\n  prime p\n  p\\<^sup>2 dvd n\n  [(n div p + 1) ^ ord n (n div p + 1) = 1] (mod n) \\<and>\n  (\\<forall>m.\n      0 < m \\<and> m < ord n (n div p + 1) \\<longrightarrow>\n      [(n div p + 1) ^ m \\<noteq> 1] (mod n))\n\ngoal (1 subgoal):\n 1. ord n (n div p + 1) \\<noteq> 1", "by auto"], ["proof (state)\nthis:\n  ord n a \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  ord n a \\<noteq> 1", "have \"ord n a = p\""], ["proof (prove)\nusing this:\n  ord n a \\<noteq> 1\n\ngoal (1 subgoal):\n 1. ord n a = p", "using ord_divides[of a p n] \\<open>[a ^ p = 1] (mod n)\\<close> \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  ord n a \\<noteq> 1\n  [a ^ p = 1] (mod n) = (ord n a dvd p)\n  [a ^ p = 1] (mod n)\n  prime p\n\ngoal (1 subgoal):\n 1. ord n a = p", "using prime_nat_iff"], ["proof (prove)\nusing this:\n  ord n a \\<noteq> 1\n  [a ^ p = 1] (mod n) = (ord n a dvd p)\n  [a ^ p = 1] (mod n)\n  prime p\n  prime ?n =\n  (1 < ?n \\<and>\n   (\\<forall>m. m dvd ?n \\<longrightarrow> m = 1 \\<or> m = ?n))\n\ngoal (1 subgoal):\n 1. ord n a = p", "by blast"], ["proof (state)\nthis:\n  ord n a = p\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"coprime n a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime n a", "using \\<open>prime p\\<close> \\<open>p\\<^sup>2 dvd n\\<close> \\<open>p dvd n div p\\<close> n"], ["proof (prove)\nusing this:\n  prime p\n  p\\<^sup>2 dvd n\n  p dvd n div p\n  n = p * (n div p)\n\ngoal (1 subgoal):\n 1. coprime n a", "unfolding a_def"], ["proof (prove)\nusing this:\n  prime p\n  p\\<^sup>2 dvd n\n  p dvd n div p\n  n = p * (n div p)\n\ngoal (1 subgoal):\n 1. coprime n (n div p + 1)", "by (metis coprime_add_one_right coprime_mult_left_iff dvd_def)"], ["proof (state)\nthis:\n  coprime n a\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"[(n - 1) div 2 \\<noteq> 0] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [(n - 1) div 2 \\<noteq> 0] (mod p)", "using \\<open>\\<not> p dvd n - 1\\<close> \\<open>odd n\\<close>"], ["proof (prove)\nusing this:\n  \\<not> p dvd n - 1\n  odd n\n\ngoal (1 subgoal):\n 1. [(n - 1) div 2 \\<noteq> 0] (mod p)", "by (subst cong_altdef_nat) (auto elim!: oddE)"], ["proof (state)\nthis:\n  [(n - 1) div 2 \\<noteq> 0] (mod p)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  [(n - 1) div 2 \\<noteq> 0] (mod p)", "have \"[p \\<noteq> (n - 1) div 2] (mod p)\""], ["proof (prove)\nusing this:\n  [(n - 1) div 2 \\<noteq> 0] (mod p)\n\ngoal (1 subgoal):\n 1. [p \\<noteq> (n - 1) div 2] (mod p)", "using cong_mult_self_right[of 1 p, simplified] cong_sym cong_trans"], ["proof (prove)\nusing this:\n  [(n - 1) div 2 \\<noteq> 0] (mod p)\n  [p = 0] (mod p)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> [?c = ?b] (mod ?a)\n  \\<lbrakk>[?b = ?c] (mod ?a); [?c = ?d] (mod ?a)\\<rbrakk>\n  \\<Longrightarrow> [?b = ?d] (mod ?a)\n\ngoal (1 subgoal):\n 1. [p \\<noteq> (n - 1) div 2] (mod p)", "by blast"], ["proof (state)\nthis:\n  [p \\<noteq> (n - 1) div 2] (mod p)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  [p \\<noteq> (n - 1) div 2] (mod p)", "have \"[a^((n-1) div 2) \\<noteq> 1] (mod n)\""], ["proof (prove)\nusing this:\n  [p \\<noteq> (n - 1) div 2] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ ((n - 1) div 2) \\<noteq> 1] (mod n)", "using \\<open>[a ^ p = 1] (mod n)\\<close>"], ["proof (prove)\nusing this:\n  [p \\<noteq> (n - 1) div 2] (mod p)\n  [a ^ p = 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ ((n - 1) div 2) \\<noteq> 1] (mod n)", "using order_divides_expdiff[OF \\<open>coprime n a\\<close>, of p \"(n-1) div 2\", symmetric]"], ["proof (prove)\nusing this:\n  [p \\<noteq> (n - 1) div 2] (mod p)\n  [a ^ p = 1] (mod n)\n  [p = (n - 1) div 2] (mod ord n a) = [a ^ p = a ^ ((n - 1) div 2)] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ ((n - 1) div 2) \\<noteq> 1] (mod n)", "unfolding \\<open>ord n a = p\\<close>"], ["proof (prove)\nusing this:\n  [p \\<noteq> (n - 1) div 2] (mod p)\n  [a ^ p = 1] (mod n)\n  [p = (n - 1) div 2] (mod p) = [a ^ p = a ^ ((n - 1) div 2)] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ ((n - 1) div 2) \\<noteq> 1] (mod n)", "using cong_sym cong_trans"], ["proof (prove)\nusing this:\n  [p \\<noteq> (n - 1) div 2] (mod p)\n  [a ^ p = 1] (mod n)\n  [p = (n - 1) div 2] (mod p) = [a ^ p = a ^ ((n - 1) div 2)] (mod n)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> [?c = ?b] (mod ?a)\n  \\<lbrakk>[?b = ?c] (mod ?a); [?c = ?d] (mod ?a)\\<rbrakk>\n  \\<Longrightarrow> [?b = ?d] (mod ?a)\n\ngoal (1 subgoal):\n 1. [a ^ ((n - 1) div 2) \\<noteq> 1] (mod n)", "by blast"], ["proof (state)\nthis:\n  [a ^ ((n - 1) div 2) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "then"], ["proof (chain)\npicking this:\n  [a ^ ((n - 1) div 2) \\<noteq> 1] (mod n)", "have \"[(int a)^((n-1) div 2) \\<noteq> 1] (mod n)\""], ["proof (prove)\nusing this:\n  [a ^ ((n - 1) div 2) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. [int a ^ ((n - 1) div 2) \\<noteq> 1] (mod int n)", "unfolding cong_def"], ["proof (prove)\nusing this:\n  a ^ ((n - 1) div 2) mod n \\<noteq> 1 mod n\n\ngoal (1 subgoal):\n 1. int a ^ ((n - 1) div 2) mod int n \\<noteq> 1 mod int n", "by (metis of_nat_1 of_nat_eq_iff of_nat_mod of_nat_power)"], ["proof (state)\nthis:\n  [int a ^ ((n - 1) div 2) \\<noteq> 1] (mod int n)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"Jacobi a n = Jacobi a (p * int (n div p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Jacobi (int a) (int n) = Jacobi (int a) (int p * int (n div p))", "using n"], ["proof (prove)\nusing this:\n  n = p * (n div p)\n\ngoal (1 subgoal):\n 1. Jacobi (int a) (int n) = Jacobi (int a) (int p * int (n div p))", "by (metis of_nat_mult)"], ["proof (state)\nthis:\n  Jacobi (int a) (int n) = Jacobi (int a) (int p * int (n div p))\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "also"], ["proof (state)\nthis:\n  Jacobi (int a) (int n) = Jacobi (int a) (int p * int (n div p))\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"... = Jacobi a p * Jacobi a (n div p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Jacobi (int a) (int p * int (n div p)) =\n    Jacobi (int a) (int p) * Jacobi (int a) (int (n div p))", "using \\<open>odd n\\<close> and \\<open>n = p * (n div p)\\<close>"], ["proof (prove)\nusing this:\n  odd n\n  n = p * (n div p)\n\ngoal (1 subgoal):\n 1. Jacobi (int a) (int p * int (n div p)) =\n    Jacobi (int a) (int p) * Jacobi (int a) (int (n div p))", "by (subst Jacobi_mult_right) auto"], ["proof (state)\nthis:\n  Jacobi (int a) (int p * int (n div p)) =\n  Jacobi (int a) (int p) * Jacobi (int a) (int (n div p))\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "also"], ["proof (state)\nthis:\n  Jacobi (int a) (int p * int (n div p)) =\n  Jacobi (int a) (int p) * Jacobi (int a) (int (n div p))\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"Jacobi a p = Jacobi 1 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Jacobi (int a) (int p) = Jacobi 1 (int p)", "using \\<open>p dvd n div p\\<close>"], ["proof (prove)\nusing this:\n  p dvd n div p\n\ngoal (1 subgoal):\n 1. Jacobi (int a) (int p) = Jacobi 1 (int p)", "by (intro Jacobi_mod_cong) (auto simp: cong_iff_dvd_diff a_def)"], ["proof (state)\nthis:\n  Jacobi (int a) (int p) = Jacobi 1 (int p)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "also"], ["proof (state)\nthis:\n  Jacobi (int a) (int p) = Jacobi 1 (int p)\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Jacobi 1 (int p) = 1", "by (simp add: \\<open>0 < p\\<close>)"], ["proof (state)\nthis:\n  Jacobi 1 (int p) = 1\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "also"], ["proof (state)\nthis:\n  Jacobi 1 (int p) = 1\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"Jacobi a (n div p) = Jacobi 1 (n div p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Jacobi (int a) (int (n div p)) = Jacobi 1 (int (n div p))", "by (rule Jacobi_mod_cong) (simp add: cong_iff_dvd_diff a_def)"], ["proof (state)\nthis:\n  Jacobi (int a) (int (n div p)) = Jacobi 1 (int (n div p))\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "also"], ["proof (state)\nthis:\n  Jacobi (int a) (int (n div p)) = Jacobi 1 (int (n div p))\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Jacobi 1 (int (n div p)) = 1", "using \\<open>p dvd n\\<close> \\<open>prime p\\<close> \\<open>n > 2\\<close>"], ["proof (prove)\nusing this:\n  p dvd n\n  prime p\n  2 < n\n\ngoal (1 subgoal):\n 1. Jacobi 1 (int (n div p)) = 1", "by (intro Jacobi_1_eq_1) (auto intro!: Nat.gr0I elim!: dvdE)"], ["proof (state)\nthis:\n  Jacobi 1 (int (n div p)) = 1\n\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow>\n    \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "finally"], ["proof (chain)\npicking this:\n  Jacobi (int a) (int n) = 1 * 1", "show ?thesis"], ["proof (prove)\nusing this:\n  Jacobi (int a) (int n) = 1 * 1\n\ngoal (1 subgoal):\n 1. \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "using \\<open>[int a ^ ((n - 1) div 2) \\<noteq> 1] (mod n)\\<close> \\<open>coprime n a\\<close>"], ["proof (prove)\nusing this:\n  Jacobi (int a) (int n) = 1 * 1\n  [int a ^ ((n - 1) div 2) \\<noteq> 1] (mod int n)\n  coprime n a\n\ngoal (1 subgoal):\n 1. \\<exists>a. euler_witness a n \\<and> coprime a (int n)", "unfolding euler_witness_def"], ["proof (prove)\nusing this:\n  Jacobi (int a) (int n) = 1 * 1\n  [int a ^ ((n - 1) div 2) \\<noteq> 1] (mod int n)\n  coprime n a\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       [Jacobi a (int n) \\<noteq> a ^ ((n - 1) div 2)] (mod int n) \\<and>\n       coprime a (int n)", "by (intro exI[of _ \"int a\"]) (auto simp: cong_sym coprime_commute)"], ["proof (state)\nthis:\n  \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a. euler_witness a n \\<and> coprime a (int n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma euler_witness_exists:\n  assumes \"odd n\" \"\\<not>prime n\" \"2 < n\"\n  shows \"\\<exists>a. euler_witness a n \\<and> coprime a n \\<and> 0 < a \\<and> a < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness a n \\<and>\n       coprime a (int n) \\<and> 0 < a \\<and> a < int n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness a n \\<and>\n       coprime a (int n) \\<and> 0 < a \\<and> a < int n", "obtain a where a: \"euler_witness a n\" \"coprime a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>euler_witness a n; coprime a (int n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using euler_witness_exists_weak assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>odd ?n; \\<not> prime ?n; 2 < ?n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a. euler_witness a ?n \\<and> coprime a (int ?n)\n  odd n\n  \\<not> prime n\n  2 < n\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>euler_witness a n; coprime a (int n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  euler_witness a n\n  coprime a (int n)\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness a n \\<and>\n       coprime a (int n) \\<and> 0 < a \\<and> a < int n", "then"], ["proof (chain)\npicking this:\n  euler_witness a n\n  coprime a (int n)", "have \"euler_witness (a mod n) n\" \"coprime (a mod n) n\""], ["proof (prove)\nusing this:\n  euler_witness a n\n  coprime a (int n)\n\ngoal (1 subgoal):\n 1. euler_witness (a mod int n) n &&& coprime (a mod int n) (int n)", "using \\<open>odd n\\<close>"], ["proof (prove)\nusing this:\n  euler_witness a n\n  coprime a (int n)\n  odd n\n\ngoal (1 subgoal):\n 1. euler_witness (a mod int n) n &&& coprime (a mod int n) (int n)", "by (simp_all add: odd_pos)"], ["proof (state)\nthis:\n  euler_witness (a mod int n) n\n  coprime (a mod int n) (int n)\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness a n \\<and>\n       coprime a (int n) \\<and> 0 < a \\<and> a < int n", "moreover"], ["proof (state)\nthis:\n  euler_witness (a mod int n) n\n  coprime (a mod int n) (int n)\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness a n \\<and>\n       coprime a (int n) \\<and> 0 < a \\<and> a < int n", "have \"0 < (a mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < a mod int n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < a mod int n", "have \"0 \\<le> (a mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> a mod int n", "by (rule pos_mod_sign) (use \\<open>2 < n\\<close> in simp)"], ["proof (state)\nthis:\n  0 \\<le> a mod int n\n\ngoal (1 subgoal):\n 1. 0 < a mod int n", "moreover"], ["proof (state)\nthis:\n  0 \\<le> a mod int n\n\ngoal (1 subgoal):\n 1. 0 < a mod int n", "have \"0 \\<noteq> (a mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> a mod int n", "using \\<open>coprime (a mod n) n\\<close>  coprime_0_left_iff[of \"int n\"] \\<open>2 < n\\<close>"], ["proof (prove)\nusing this:\n  coprime (a mod int n) (int n)\n  coprime 0 (int n) = is_unit (int n)\n  2 < n\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> a mod int n", "by auto"], ["proof (state)\nthis:\n  0 \\<noteq> a mod int n\n\ngoal (1 subgoal):\n 1. 0 < a mod int n", "ultimately"], ["proof (chain)\npicking this:\n  0 \\<le> a mod int n\n  0 \\<noteq> a mod int n", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<le> a mod int n\n  0 \\<noteq> a mod int n\n\ngoal (1 subgoal):\n 1. 0 < a mod int n", "by linarith"], ["proof (state)\nthis:\n  0 < a mod int n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < a mod int n\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness a n \\<and>\n       coprime a (int n) \\<and> 0 < a \\<and> a < int n", "moreover"], ["proof (state)\nthis:\n  0 < a mod int n\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness a n \\<and>\n       coprime a (int n) \\<and> 0 < a \\<and> a < int n", "have \"a mod n < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod int n < int n", "by (rule pos_mod_bound) (use \\<open>2 < n\\<close> in simp)"], ["proof (state)\nthis:\n  a mod int n < int n\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness a n \\<and>\n       coprime a (int n) \\<and> 0 < a \\<and> a < int n", "ultimately"], ["proof (chain)\npicking this:\n  euler_witness (a mod int n) n\n  coprime (a mod int n) (int n)\n  0 < a mod int n\n  a mod int n < int n", "show ?thesis"], ["proof (prove)\nusing this:\n  euler_witness (a mod int n) n\n  coprime (a mod int n) (int n)\n  0 < a mod int n\n  a mod int n < int n\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness a n \\<and>\n       coprime a (int n) \\<and> 0 < a \\<and> a < int n", "by blast"], ["proof (state)\nthis:\n  \\<exists>a.\n     euler_witness a n \\<and>\n     coprime a (int n) \\<and> 0 < a \\<and> a < int n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma euler_witness_exists_nat:\n  assumes \"odd n\" \"\\<not>prime n\" \"2 < n\"\n  shows \"\\<exists>a. euler_witness (int a) n \\<and> coprime a n \\<and> 0 < a \\<and> a < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness (int a) n \\<and> coprime a n \\<and> 0 < a \\<and> a < n", "using euler_witness_exists[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>a.\n     euler_witness a n \\<and>\n     coprime a (int n) \\<and> 0 < a \\<and> a < int n\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness (int a) n \\<and> coprime a n \\<and> 0 < a \\<and> a < n", "using zero_less_imp_eq_int"], ["proof (prove)\nusing this:\n  \\<exists>a.\n     euler_witness a n \\<and>\n     coprime a (int n) \\<and> 0 < a \\<and> a < int n\n  0 < ?k \\<Longrightarrow> \\<exists>n>0. ?k = int n\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       euler_witness (int a) n \\<and> coprime a n \\<and> 0 < a \\<and> a < n", "by fastforce"], ["", "lemma euler_liar_1_p[intro, simp]: \"p \\<noteq> 0 \\<Longrightarrow> euler_liar 1 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> euler_liar 1 p", "unfolding euler_witness_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    \\<not> [Jacobi 1 (int p) \\<noteq> 1 ^ ((p - 1) div 2)] (mod int p)", "by simp"], ["", "lemma euler_liar_mult:\n  shows \"euler_liar y n \\<Longrightarrow> euler_liar x n \\<Longrightarrow> euler_liar (x*y) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>euler_liar y n; euler_liar x n\\<rbrakk>\n    \\<Longrightarrow> euler_liar (x * y) n", "unfolding euler_witness_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> [Jacobi y\n                      (int n) \\<noteq> y ^ ((n - 1) div 2)] (mod int n);\n     \\<not> [Jacobi x\n              (int n) \\<noteq> x ^ ((n - 1) div 2)] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> \\<not> [Jacobi (x * y)\n                               (int n) \\<noteq> (x * y) ^\n          ((n - 1) div 2)] (mod int n)", "by (auto simp: power_mult_distrib intro: cong_mult)"], ["", "lemma euler_liar_mult':\n  assumes \"1 < n\" \"coprime y n\"\n  shows \"euler_liar y n \\<Longrightarrow> euler_witness x n \\<Longrightarrow> euler_witness (x*y) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>euler_liar y n; euler_witness x n\\<rbrakk>\n    \\<Longrightarrow> euler_witness (x * y) n", "proof(simp add: euler_witness_def power_mult_distrib, rule cong_mult_uneq', goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>[Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n);\n     [Jacobi x\n       (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> coprime (Jacobi y (int n)) (int n)\n 2. \\<lbrakk>[Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n);\n     [Jacobi x\n       (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> [Jacobi x\n                        (int n) \\<noteq> x ^\n   ((n - Suc 0) div 2)] (mod int n)\n 3. \\<lbrakk>[Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n);\n     [Jacobi x\n       (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> [Jacobi y\n                        (int n) = y ^ ((n - Suc 0) div 2)] (mod int n)", "case 1"], ["proof (state)\nthis:\n  [Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n)\n  [Jacobi x (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>[Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n);\n     [Jacobi x\n       (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> coprime (Jacobi y (int n)) (int n)\n 2. \\<lbrakk>[Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n);\n     [Jacobi x\n       (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> [Jacobi x\n                        (int n) \\<noteq> x ^\n   ((n - Suc 0) div 2)] (mod int n)\n 3. \\<lbrakk>[Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n);\n     [Jacobi x\n       (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> [Jacobi y\n                        (int n) = y ^ ((n - Suc 0) div 2)] (mod int n)", "then"], ["proof (chain)\npicking this:\n  [Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n)\n  [Jacobi x (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)", "show ?case"], ["proof (prove)\nusing this:\n  [Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n)\n  [Jacobi x (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)\n\ngoal (1 subgoal):\n 1. coprime (Jacobi y (int n)) (int n)", "using Jacobi_eq_0_iff_not_coprime[of n y] Jacobi_values[of y n] and assms"], ["proof (prove)\nusing this:\n  [Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n)\n  [Jacobi x (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)\n  \\<lbrakk>int n \\<noteq> 0; int n \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> (Jacobi y (int n) = 0) = (\\<not> coprime y (int n))\n  Jacobi y (int n) \\<in> {1, - 1, 0}\n  1 < n\n  coprime y (int n)\n\ngoal (1 subgoal):\n 1. coprime (Jacobi y (int n)) (int n)", "by auto"], ["proof (state)\nthis:\n  coprime (Jacobi y (int n)) (int n)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>[Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n);\n     [Jacobi x\n       (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> [Jacobi x\n                        (int n) \\<noteq> x ^\n   ((n - Suc 0) div 2)] (mod int n)\n 2. \\<lbrakk>[Jacobi y (int n) = y ^ ((n - Suc 0) div 2)] (mod int n);\n     [Jacobi x\n       (int n) \\<noteq> x ^ ((n - Suc 0) div 2)] (mod int n)\\<rbrakk>\n    \\<Longrightarrow> [Jacobi y\n                        (int n) = y ^ ((n - Suc 0) div 2)] (mod int n)", "qed simp_all"], ["", "lemma prime_imp_euler_liar:\n  assumes \"prime p\" \"2 < p\" \"0 < x\" \"x < p\"\n  shows   \"euler_liar x p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. euler_liar x p", "using assms prime_p_Jacobi_eq_Legendre and euler_criterion"], ["proof (prove)\nusing this:\n  prime p\n  2 < p\n  0 < x\n  x < int p\n  prime ?p \\<Longrightarrow> Jacobi ?a ?p = Legendre ?a ?p\n  \\<lbrakk>prime ?p; 2 < ?p\\<rbrakk>\n  \\<Longrightarrow> [Legendre ?a\n                      (int ?p) = ?a ^ ((?p - 1) div 2)] (mod int ?p)\n\ngoal (1 subgoal):\n 1. euler_liar x p", "unfolding euler_witness_def"], ["proof (prove)\nusing this:\n  prime p\n  2 < p\n  0 < x\n  x < int p\n  prime ?p \\<Longrightarrow> Jacobi ?a ?p = Legendre ?a ?p\n  \\<lbrakk>prime ?p; 2 < ?p\\<rbrakk>\n  \\<Longrightarrow> [Legendre ?a\n                      (int ?p) = ?a ^ ((?p - 1) div 2)] (mod int ?p)\n\ngoal (1 subgoal):\n 1. \\<not> [Jacobi x (int p) \\<noteq> x ^ ((p - 1) div 2)] (mod int p)", "by simp"], ["", "locale euler_witness_context =\n  fixes p :: nat\n  assumes p_gt_1: \"p > 1\" and odd_p: \"odd p\"\nbegin"], ["", "definition G where \"G = Residues_Mult p\""], ["", "sublocale residues_mult_nat p G"], ["proof (prove)\ngoal (1 subgoal):\n 1. residues_mult_nat p &&& G \\<equiv> Residues_Mult p", "by unfold_locales (use p_gt_1 in \\<open>simp_all add: G_def\\<close>)"], ["", "definition \"H = {x. coprime x p \\<and> euler_liar (int x) p \\<and> x \\<in> {1..<p}}\""], ["", "sublocale H: subgroup H G"], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup H G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subgroup H G", "have subset: \"H \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<subseteq> carrier G", "by (auto simp: H_def totatives_def)"], ["proof (state)\nthis:\n  H \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. subgroup H G", "show \"subgroup H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup H G", "proof (rule group.subgroupI, goal_cases)"], ["proof (state)\ngoal (5 subgoals):\n 1. Group.group G\n 2. H \\<subseteq> carrier G\n 3. H \\<noteq> {}\n 4. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 5. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. Group.group G\n 2. H \\<subseteq> carrier G\n 3. H \\<noteq> {}\n 4. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 5. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group G", "by (fact is_group)"], ["proof (state)\nthis:\n  Group.group G\n\ngoal (4 subgoals):\n 1. H \\<subseteq> carrier G\n 2. H \\<noteq> {}\n 3. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 4. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. H \\<subseteq> carrier G\n 2. H \\<noteq> {}\n 3. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 4. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. H \\<subseteq> carrier G\n 2. H \\<noteq> {}\n 3. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 4. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "have \"euler_liar 1 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. euler_liar 1 p", "using p_gt_1"], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. euler_liar 1 p", "unfolding euler_witness_def cong_def"], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. \\<not> Jacobi 1 (int p) mod int p \\<noteq> 1 ^ ((p - 1) div 2) mod int p", "by simp"], ["proof (state)\nthis:\n  euler_liar 1 p\n\ngoal (4 subgoals):\n 1. H \\<subseteq> carrier G\n 2. H \\<noteq> {}\n 3. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 4. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "then"], ["proof (chain)\npicking this:\n  euler_liar 1 p", "show ?case"], ["proof (prove)\nusing this:\n  euler_liar 1 p\n\ngoal (1 subgoal):\n 1. H \\<noteq> {}", "using p_gt_1"], ["proof (prove)\nusing this:\n  euler_liar 1 p\n  1 < p\n\ngoal (1 subgoal):\n 1. H \\<noteq> {}", "by (auto simp: H_def)"], ["proof (state)\nthis:\n  H \\<noteq> {}\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "case (4 x)"], ["proof (state)\nthis:\n  x \\<in> H\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "then"], ["proof (chain)\npicking this:\n  x \\<in> H", "have \"coprime x p\" \"euler_liar x p\" \"1 \\<le> x\" \"x < p\""], ["proof (prove)\nusing this:\n  x \\<in> H\n\ngoal (1 subgoal):\n 1. (coprime x p &&& euler_liar (int x) p) &&& 1 \\<le> x &&& x < p", "by (auto simp: H_def)"], ["proof (state)\nthis:\n  coprime x p\n  euler_liar (int x) p\n  1 \\<le> x\n  x < p\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "define y where \"y = inv\\<^bsub>G\\<^esub> x\""], ["proof (state)\nthis:\n  y = inv\\<^bsub>G\\<^esub> x\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "from \\<open>x \\<in> H\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> H", "have \"x \\<otimes>\\<^bsub>G\\<^esub> y = \\<one>\\<^bsub>G\\<^esub>\""], ["proof (prove)\nusing this:\n  x \\<in> H\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>G\\<^esub> y = \\<one>\\<^bsub>G\\<^esub>", "unfolding y_def"], ["proof (prove)\nusing this:\n  x \\<in> H\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>G\\<^esub> inv\\<^bsub>G\\<^esub> x =\n    \\<one>\\<^bsub>G\\<^esub>", "using subset"], ["proof (prove)\nusing this:\n  x \\<in> H\n  H \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>G\\<^esub> inv\\<^bsub>G\\<^esub> x =\n    \\<one>\\<^bsub>G\\<^esub>", "by (intro r_inv) auto"], ["proof (state)\nthis:\n  x \\<otimes>\\<^bsub>G\\<^esub> y = \\<one>\\<^bsub>G\\<^esub>\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "hence *: \"(x * y) mod p = 1\""], ["proof (prove)\nusing this:\n  x \\<otimes>\\<^bsub>G\\<^esub> y = \\<one>\\<^bsub>G\\<^esub>\n\ngoal (1 subgoal):\n 1. x * y mod p = 1", "by (auto simp: y_def)"], ["proof (state)\nthis:\n  x * y mod p = 1\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "hence **: \"(int x * int y) mod p = 1\""], ["proof (prove)\nusing this:\n  x * y mod p = 1\n\ngoal (1 subgoal):\n 1. int x * int y mod int p = 1", "by (metis of_nat_1 of_nat_mod of_nat_mult)"], ["proof (state)\nthis:\n  int x * int y mod int p = 1\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "from *"], ["proof (chain)\npicking this:\n  x * y mod p = 1", "have \"coprime y p\""], ["proof (prove)\nusing this:\n  x * y mod p = 1\n\ngoal (1 subgoal):\n 1. coprime y p", "using p_gt_1 \\<open>x < p\\<close>"], ["proof (prove)\nusing this:\n  x * y mod p = 1\n  1 < p\n  x < p\n\ngoal (1 subgoal):\n 1. coprime y p", "by (auto simp add: coprime_iff_invertible'_nat cong_def mult.commute)"], ["proof (state)\nthis:\n  coprime y p\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "moreover"], ["proof (state)\nthis:\n  coprime y p\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "from 4"], ["proof (chain)\npicking this:\n  x \\<in> H", "have \"y \\<in> carrier G\""], ["proof (prove)\nusing this:\n  x \\<in> H\n\ngoal (1 subgoal):\n 1. y \\<in> carrier G", "using subset"], ["proof (prove)\nusing this:\n  x \\<in> H\n  H \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. y \\<in> carrier G", "unfolding y_def"], ["proof (prove)\nusing this:\n  x \\<in> H\n  H \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. inv\\<^bsub>G\\<^esub> x \\<in> carrier G", "by (intro inv_closed) auto"], ["proof (state)\nthis:\n  y \\<in> carrier G\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "hence \"1 \\<le> y\" \"y < p\""], ["proof (prove)\nusing this:\n  y \\<in> carrier G\n\ngoal (1 subgoal):\n 1. 1 \\<le> y &&& y < p", "using p_gt_1 totatives_less[of y p]"], ["proof (prove)\nusing this:\n  y \\<in> carrier G\n  1 < p\n  \\<lbrakk>y \\<in> totatives p; 1 < p\\<rbrakk> \\<Longrightarrow> y < p\n\ngoal (1 subgoal):\n 1. 1 \\<le> y &&& y < p", "by (auto simp: totatives_def)"], ["proof (state)\nthis:\n  1 \\<le> y\n  y < p\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "moreover"], ["proof (state)\nthis:\n  1 \\<le> y\n  y < p\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "have \"euler_liar 1 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. euler_liar 1 p", "using p_gt_1"], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. euler_liar 1 p", "by (intro euler_liar_1_p) auto"], ["proof (state)\nthis:\n  euler_liar 1 p\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "then"], ["proof (chain)\npicking this:\n  euler_liar 1 p", "have \"euler_liar (int x * int y) p\""], ["proof (prove)\nusing this:\n  euler_liar 1 p\n\ngoal (1 subgoal):\n 1. euler_liar (int x * int y) p", "using ** p_gt_1"], ["proof (prove)\nusing this:\n  euler_liar 1 p\n  int x * int y mod int p = 1\n  1 < p\n\ngoal (1 subgoal):\n 1. euler_liar (int x * int y) p", "by (subst euler_liar_cong[of \"int x * int y\" 1 p]) (auto simp: cong_def)"], ["proof (state)\nthis:\n  euler_liar (int x * int y) p\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "then"], ["proof (chain)\npicking this:\n  euler_liar (int x * int y) p", "have \"euler_liar y p\""], ["proof (prove)\nusing this:\n  euler_liar (int x * int y) p\n\ngoal (1 subgoal):\n 1. euler_liar (int y) p", "using \\<open>coprime x p\\<close> \\<open>euler_liar x p\\<close> and euler_liar_mult'[OF p_gt_1, of x y]"], ["proof (prove)\nusing this:\n  euler_liar (int x * int y) p\n  coprime x p\n  euler_liar (int x) p\n  \\<lbrakk>coprime (int x) (int p); euler_liar (int x) p;\n   euler_witness (int y) p\\<rbrakk>\n  \\<Longrightarrow> euler_witness (int y * int x) p\n\ngoal (1 subgoal):\n 1. euler_liar (int y) p", "by (metis coprime_int_iff mult.commute)"], ["proof (state)\nthis:\n  euler_liar (int y) p\n\ngoal (3 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "ultimately"], ["proof (chain)\npicking this:\n  coprime y p\n  1 \\<le> y\n  y < p\n  euler_liar (int y) p", "show ?case"], ["proof (prove)\nusing this:\n  coprime y p\n  1 \\<le> y\n  y < p\n  euler_liar (int y) p\n\ngoal (1 subgoal):\n 1. inv\\<^bsub>G\\<^esub> x \\<in> H", "by (auto simp: H_def simp flip: y_def)"], ["proof (state)\nthis:\n  inv\\<^bsub>G\\<^esub> x \\<in> H\n\ngoal (2 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "case (5 x y)"], ["proof (state)\nthis:\n  x \\<in> H\n  y \\<in> H\n\ngoal (2 subgoals):\n 1. H \\<subseteq> carrier G\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "then"], ["proof (chain)\npicking this:\n  x \\<in> H\n  y \\<in> H", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> H\n  y \\<in> H\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>G\\<^esub> y \\<in> H", "unfolding euler_witness_def H_def"], ["proof (prove)\nusing this:\n  x \\<in> {x. coprime x p \\<and>\n              \\<not> [Jacobi (int x)\n                       (int p) \\<noteq> int x ^\n  ((p - 1) div 2)] (mod int p) \\<and>\n              x \\<in> {1..<p}}\n  y \\<in> {x. coprime x p \\<and>\n              \\<not> [Jacobi (int x)\n                       (int p) \\<noteq> int x ^\n  ((p - 1) div 2)] (mod int p) \\<and>\n              x \\<in> {1..<p}}\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>G\\<^esub> y\n    \\<in> {x. coprime x p \\<and>\n              \\<not> [Jacobi (int x)\n                       (int p) \\<noteq> int x ^\n  ((p - 1) div 2)] (mod int p) \\<and>\n              x \\<in> {1..<p}}", "by (auto intro!: gre1I_nat cong_mult\n               simp: coprime_commute coprime_dvd_mult_left_iff\n                     nat_dvd_not_less zmod_int power_mult_distrib)"], ["proof (state)\nthis:\n  x \\<otimes>\\<^bsub>G\\<^esub> y \\<in> H\n\ngoal (1 subgoal):\n 1. H \\<subseteq> carrier G", "qed fact+"], ["proof (state)\nthis:\n  subgroup H G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma H_finite: \"finite H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite H", "unfolding H_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {x. coprime x p \\<and> euler_liar (int x) p \\<and> x \\<in> {1..<p}}", "by simp"], ["", "lemma euler_witness_coset:\n  assumes \"euler_witness x p\"\n  shows \"y \\<in> H #>\\<^bsub>G\\<^esub> x \\<Longrightarrow> euler_witness y p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> H #>\\<^bsub>G\\<^esub> x \\<Longrightarrow>\n    euler_witness (int y) p", "using assms euler_liar_mult'[OF p_gt_1, of _ x]"], ["proof (prove)\nusing this:\n  euler_witness (int x) p\n  \\<lbrakk>coprime ?y (int p); euler_liar ?y p;\n   euler_witness (int x) p\\<rbrakk>\n  \\<Longrightarrow> euler_witness (int x * ?y) p\n\ngoal (1 subgoal):\n 1. y \\<in> H #>\\<^bsub>G\\<^esub> x \\<Longrightarrow>\n    euler_witness (int y) p", "unfolding r_coset_is_image H_def"], ["proof (prove)\nusing this:\n  euler_witness (int x) p\n  \\<lbrakk>coprime ?y (int p); euler_liar ?y p;\n   euler_witness (int x) p\\<rbrakk>\n  \\<Longrightarrow> euler_witness (int x * ?y) p\n\ngoal (1 subgoal):\n 1. y \\<in> (\\<lambda>xa. xa \\<otimes>\\<^bsub>G\\<^esub> x) `\n            {x. coprime x p \\<and>\n                euler_liar (int x) p \\<and>\n                x \\<in> {1..<p}} \\<Longrightarrow>\n    euler_witness (int y) p", "by (auto simp add: mult.commute of_nat_mod)"], ["", "lemma euler_liar_coset:\n  assumes \"euler_liar x p\" \"x \\<in> carrier G\"\n  shows \"y \\<in> H #>\\<^bsub>G\\<^esub> x \\<Longrightarrow> euler_liar y p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> H #>\\<^bsub>G\\<^esub> x \\<Longrightarrow> euler_liar (int y) p", "using is_group H.rcos_const[of x] assms totatives_less[of x p] p_gt_1"], ["proof (prove)\nusing this:\n  Group.group G\n  \\<lbrakk>Group.group G; x \\<in> H\\<rbrakk>\n  \\<Longrightarrow> H #>\\<^bsub>G\\<^esub> x = H\n  euler_liar (int x) p\n  x \\<in> carrier G\n  \\<lbrakk>x \\<in> totatives p; 1 < p\\<rbrakk> \\<Longrightarrow> x < p\n  1 < p\n\ngoal (1 subgoal):\n 1. y \\<in> H #>\\<^bsub>G\\<^esub> x \\<Longrightarrow> euler_liar (int y) p", "by (auto simp: H_def totatives_def)"], ["", "lemma in_cosets_aux:\n  assumes \"euler_witness x p\" \"x \\<in> carrier G\"\n  shows \"H #>\\<^bsub>G\\<^esub> x \\<in> rcosets\\<^bsub>G\\<^esub> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H #>\\<^bsub>G\\<^esub> x \\<in> rcosets\\<^bsub>G\\<^esub> H", "using assms"], ["proof (prove)\nusing this:\n  euler_witness (int x) p\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. H #>\\<^bsub>G\\<^esub> x \\<in> rcosets\\<^bsub>G\\<^esub> H", "by (intro rcosetsI) (auto simp: H_def totatives_def)"], ["", "lemma H_cosets_aux:\n  assumes \"euler_witness x p\"\n  shows \"(H #>\\<^bsub>G\\<^esub> x) \\<inter> H = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (H #>\\<^bsub>G\\<^esub> x) \\<inter> H = {}", "using euler_witness_coset assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>euler_witness (int ?x) p;\n   ?y \\<in> H #>\\<^bsub>G\\<^esub> ?x\\<rbrakk>\n  \\<Longrightarrow> euler_witness (int ?y) p\n  euler_witness (int x) p\n\ngoal (1 subgoal):\n 1. (H #>\\<^bsub>G\\<^esub> x) \\<inter> H = {}", "unfolding H_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>euler_witness (int ?x) p;\n   ?y \\<in> {x. coprime x p \\<and>\n                euler_liar (int x) p \\<and>\n                x \\<in> {1..<p}} #>\\<^bsub>G\\<^esub>\n            ?x\\<rbrakk>\n  \\<Longrightarrow> euler_witness (int ?y) p\n  euler_witness (int x) p\n\ngoal (1 subgoal):\n 1. ({x. coprime x p \\<and>\n         euler_liar (int x) p \\<and> x \\<in> {1..<p}} #>\\<^bsub>G\\<^esub>\n     x) \\<inter>\n    {x. coprime x p \\<and> euler_liar (int x) p \\<and> x \\<in> {1..<p}} =\n    {}", "by blast"], ["", "lemma H_rcosets_aux:\n  assumes \"euler_witness x p\" \"x \\<in> carrier G\"\n  shows \"{H, H #>\\<^bsub>G\\<^esub> x} \\<subseteq> rcosets\\<^bsub>G\\<^esub> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {H, H #>\\<^bsub>G\\<^esub> x} \\<subseteq> rcosets\\<^bsub>G\\<^esub> H", "using in_cosets_aux[OF assms] H.subgroup_in_rcosets[OF is_group]"], ["proof (prove)\nusing this:\n  H #>\\<^bsub>G\\<^esub> x \\<in> rcosets\\<^bsub>G\\<^esub> H\n  H \\<in> rcosets\\<^bsub>G\\<^esub> H\n\ngoal (1 subgoal):\n 1. {H, H #>\\<^bsub>G\\<^esub> x} \\<subseteq> rcosets\\<^bsub>G\\<^esub> H", "by blast"], ["", "lemma H_not_eq_coset:\n  assumes \"euler_witness x p\"\n  shows \"H \\<noteq> H #>\\<^bsub>G\\<^esub> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<noteq> H #>\\<^bsub>G\\<^esub> x", "using H.one_closed H_def assms(1) euler_witness_coset"], ["proof (prove)\nusing this:\n  \\<one>\\<^bsub>G\\<^esub> \\<in> H\n  H = {x. coprime x p \\<and> euler_liar (int x) p \\<and> x \\<in> {1..<p}}\n  euler_witness (int x) p\n  \\<lbrakk>euler_witness (int ?x) p;\n   ?y \\<in> H #>\\<^bsub>G\\<^esub> ?x\\<rbrakk>\n  \\<Longrightarrow> euler_witness (int ?y) p\n\ngoal (1 subgoal):\n 1. H \\<noteq> H #>\\<^bsub>G\\<^esub> x", "by blast"], ["", "lemma finite_cosets_H: \"finite (rcosets\\<^bsub>G\\<^esub> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (rcosets\\<^bsub>G\\<^esub> H)", "using rcosets_part_G[OF H.is_subgroup]"], ["proof (prove)\nusing this:\n  \\<Union> (rcosets\\<^bsub>G\\<^esub> H) = carrier G\n\ngoal (1 subgoal):\n 1. finite (rcosets\\<^bsub>G\\<^esub> H)", "by (auto intro: finite_UnionD)"], ["", "lemma card_cosets_limit:\n  assumes \"euler_witness x p\" \"x \\<in> carrier G\"\n  shows \"2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)", "using H_not_eq_coset[OF assms(1)] card_mono[OF finite_cosets_H H_rcosets_aux[OF assms]]"], ["proof (prove)\nusing this:\n  H \\<noteq> H #>\\<^bsub>G\\<^esub> x\n  card {H, H #>\\<^bsub>G\\<^esub> x} \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)", "by simp"], ["", "lemma card_euler_liars_cosets_limit:\n  assumes \"\\<not>prime p\" \"2 < p\"\n  shows \"2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\" \"card H < (p - 1) div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H) &&& card H < (p - 1) div 2", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. 2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\n 2. card H < (p - 1) div 2", "have \"H \\<in> rcosets\\<^bsub>G\\<^esub> H\" \" H \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<in> rcosets\\<^bsub>G\\<^esub> H &&& H \\<subseteq> carrier G", "by (auto simp: is_group H.subgroup_in_rcosets simp del: carrier_eq)"], ["proof (state)\nthis:\n  H \\<in> rcosets\\<^bsub>G\\<^esub> H\n  H \\<subseteq> carrier G\n\ngoal (2 subgoals):\n 1. 2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\n 2. card H < (p - 1) div 2", "obtain a :: nat where \"euler_witness a p\" \"coprime a p\" \"0 < a\" \"a < p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>euler_witness (int a) p; coprime a p; 0 < a; a < p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using odd_p assms euler_witness_exists_nat"], ["proof (prove)\nusing this:\n  odd p\n  \\<not> prime p\n  2 < p\n  \\<lbrakk>odd ?n; \\<not> prime ?n; 2 < ?n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a.\n                       euler_witness (int a) ?n \\<and>\n                       coprime a ?n \\<and> 0 < a \\<and> a < ?n\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>euler_witness (int a) p; coprime a p; 0 < a; a < p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  euler_witness (int a) p\n  coprime a p\n  0 < a\n  a < p\n\ngoal (2 subgoals):\n 1. 2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\n 2. card H < (p - 1) div 2", "moreover"], ["proof (state)\nthis:\n  euler_witness (int a) p\n  coprime a p\n  0 < a\n  a < p\n\ngoal (2 subgoals):\n 1. 2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\n 2. card H < (p - 1) div 2", "have a: \"a \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier G", "using calculation"], ["proof (prove)\nusing this:\n  euler_witness (int a) p\n  coprime a p\n  0 < a\n  a < p\n\ngoal (1 subgoal):\n 1. a \\<in> carrier G", "by (auto simp: totatives_def)"], ["proof (state)\nthis:\n  a \\<in> carrier G\n\ngoal (2 subgoals):\n 1. 2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\n 2. card H < (p - 1) div 2", "ultimately"], ["proof (chain)\npicking this:\n  euler_witness (int a) p\n  coprime a p\n  0 < a\n  a < p\n  a \\<in> carrier G", "show \"2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\""], ["proof (prove)\nusing this:\n  euler_witness (int a) p\n  coprime a p\n  0 < a\n  a < p\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)", "using card_cosets_limit"], ["proof (prove)\nusing this:\n  euler_witness (int a) p\n  coprime a p\n  0 < a\n  a < p\n  a \\<in> carrier G\n  \\<lbrakk>euler_witness (int ?x) p; ?x \\<in> carrier G\\<rbrakk>\n  \\<Longrightarrow> 2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)", "by blast"], ["proof (state)\nthis:\n  2 \\<le> card (rcosets\\<^bsub>G\\<^esub> H)\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "have \"finite H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite H", "by (rule finite_subset[OF H.subset]) auto"], ["proof (state)\nthis:\n  finite H\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "have \"finite (H #>\\<^bsub>G\\<^esub> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (H #>\\<^bsub>G\\<^esub> a)", "by (rule cosets_finite[OF rcosetsI]) (use H.subset a in auto)"], ["proof (state)\nthis:\n  finite (H #>\\<^bsub>G\\<^esub> a)\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "have \"H #>\\<^bsub>G\\<^esub> a \\<in> rcosets\\<^bsub>G\\<^esub> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H #>\\<^bsub>G\\<^esub> a \\<in> rcosets\\<^bsub>G\\<^esub> H", "using H.subset rcosetsI \\<open>a \\<in> carrier G\\<close>"], ["proof (prove)\nusing this:\n  H \\<subseteq> carrier G\n  \\<lbrakk>?H \\<subseteq> carrier G; ?x \\<in> carrier G\\<rbrakk>\n  \\<Longrightarrow> ?H #>\\<^bsub>G\\<^esub> ?x\n                    \\<in> rcosets\\<^bsub>G\\<^esub> ?H\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. H #>\\<^bsub>G\\<^esub> a \\<in> rcosets\\<^bsub>G\\<^esub> H", "by blast"], ["proof (state)\nthis:\n  H #>\\<^bsub>G\\<^esub> a \\<in> rcosets\\<^bsub>G\\<^esub> H\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "then"], ["proof (chain)\npicking this:\n  H #>\\<^bsub>G\\<^esub> a \\<in> rcosets\\<^bsub>G\\<^esub> H", "have \"card H = card (H #>\\<^bsub>G\\<^esub> a)\""], ["proof (prove)\nusing this:\n  H #>\\<^bsub>G\\<^esub> a \\<in> rcosets\\<^bsub>G\\<^esub> H\n\ngoal (1 subgoal):\n 1. card H = card (H #>\\<^bsub>G\\<^esub> a)", "using card_rcosets_equal H.subset"], ["proof (prove)\nusing this:\n  H #>\\<^bsub>G\\<^esub> a \\<in> rcosets\\<^bsub>G\\<^esub> H\n  \\<lbrakk>?R \\<in> rcosets\\<^bsub>G\\<^esub> ?H;\n   ?H \\<subseteq> carrier G\\<rbrakk>\n  \\<Longrightarrow> card ?H = card ?R\n  H \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. card H = card (H #>\\<^bsub>G\\<^esub> a)", "by blast"], ["proof (state)\nthis:\n  card H = card (H #>\\<^bsub>G\\<^esub> a)\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "moreover"], ["proof (state)\nthis:\n  card H = card (H #>\\<^bsub>G\\<^esub> a)\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "have \"H \\<union> H #>\\<^bsub>G\\<^esub> a \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<union> H #>\\<^bsub>G\\<^esub> a \\<subseteq> carrier G", "using rcosets_part_G[OF H.is_subgroup]"], ["proof (prove)\nusing this:\n  \\<Union> (rcosets\\<^bsub>G\\<^esub> H) = carrier G\n\ngoal (1 subgoal):\n 1. H \\<union> H #>\\<^bsub>G\\<^esub> a \\<subseteq> carrier G", "using H.subgroup_in_rcosets[OF is_group] and \\<open>H #>\\<^bsub>G\\<^esub> a \\<in> rcosets\\<^bsub>G\\<^esub> H\\<close>"], ["proof (prove)\nusing this:\n  \\<Union> (rcosets\\<^bsub>G\\<^esub> H) = carrier G\n  H \\<in> rcosets\\<^bsub>G\\<^esub> H\n  H #>\\<^bsub>G\\<^esub> a \\<in> rcosets\\<^bsub>G\\<^esub> H\n\ngoal (1 subgoal):\n 1. H \\<union> H #>\\<^bsub>G\\<^esub> a \\<subseteq> carrier G", "by auto"], ["proof (state)\nthis:\n  H \\<union> H #>\\<^bsub>G\\<^esub> a \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "then"], ["proof (chain)\npicking this:\n  H \\<union> H #>\\<^bsub>G\\<^esub> a \\<subseteq> carrier G", "have \"card H + card (H #>\\<^bsub>G\\<^esub> a) \\<le> card (carrier G)\""], ["proof (prove)\nusing this:\n  H \\<union> H #>\\<^bsub>G\\<^esub> a \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. card H + card (H #>\\<^bsub>G\\<^esub> a) \\<le> card (carrier G)", "using \\<open>finite H\\<close> \\<open>finite (H #>\\<^bsub>G\\<^esub> a)\\<close>"], ["proof (prove)\nusing this:\n  H \\<union> H #>\\<^bsub>G\\<^esub> a \\<subseteq> carrier G\n  finite H\n  finite (H #>\\<^bsub>G\\<^esub> a)\n\ngoal (1 subgoal):\n 1. card H + card (H #>\\<^bsub>G\\<^esub> a) \\<le> card (carrier G)", "using H_cosets_aux[OF \\<open>euler_witness a p\\<close>]"], ["proof (prove)\nusing this:\n  H \\<union> H #>\\<^bsub>G\\<^esub> a \\<subseteq> carrier G\n  finite H\n  finite (H #>\\<^bsub>G\\<^esub> a)\n  (H #>\\<^bsub>G\\<^esub> a) \\<inter> H = {}\n\ngoal (1 subgoal):\n 1. card H + card (H #>\\<^bsub>G\\<^esub> a) \\<le> card (carrier G)", "using H.subset finite_subset card_Un_disjoint"], ["proof (prove)\nusing this:\n  H \\<union> H #>\\<^bsub>G\\<^esub> a \\<subseteq> carrier G\n  finite H\n  finite (H #>\\<^bsub>G\\<^esub> a)\n  (H #>\\<^bsub>G\\<^esub> a) \\<inter> H = {}\n  H \\<subseteq> carrier G\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {}\\<rbrakk>\n  \\<Longrightarrow> card (?A \\<union> ?B) = card ?A + card ?B\n\ngoal (1 subgoal):\n 1. card H + card (H #>\\<^bsub>G\\<^esub> a) \\<le> card (carrier G)", "by (subst card_Un_disjoint[symmetric]) (auto intro: card_mono simp flip: card_Un_disjoint)"], ["proof (state)\nthis:\n  card H + card (H #>\\<^bsub>G\\<^esub> a) \\<le> card (carrier G)\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "ultimately"], ["proof (chain)\npicking this:\n  card H = card (H #>\\<^bsub>G\\<^esub> a)\n  card H + card (H #>\\<^bsub>G\\<^esub> a) \\<le> card (carrier G)", "have \"card H \\<le> card (carrier G) div 2\""], ["proof (prove)\nusing this:\n  card H = card (H #>\\<^bsub>G\\<^esub> a)\n  card H + card (H #>\\<^bsub>G\\<^esub> a) \\<le> card (carrier G)\n\ngoal (1 subgoal):\n 1. card H \\<le> card (carrier G) div 2", "by linarith"], ["proof (state)\nthis:\n  card H \\<le> card (carrier G) div 2\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "obtain pa k where pa: \"p = pa * k\" \"1 < pa\" \"pa < p\" \"1 < k\" \"k < p\" \"prime pa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pa k.\n        \\<lbrakk>p = pa * k; 1 < pa; pa < p; 1 < k; k < p; prime pa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prime_divisor_exists_strong_nat[OF p_gt_1 \\<open>\\<not> prime p\\<close>]"], ["proof (prove)\nusing this:\n  \\<exists>pa k.\n     p = pa * k \\<and>\n     1 < pa \\<and> pa < p \\<and> 1 < k \\<and> k < p \\<and> prime pa\n\ngoal (1 subgoal):\n 1. (\\<And>pa k.\n        \\<lbrakk>p = pa * k; 1 < pa; pa < p; 1 < k; k < p; prime pa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = pa * k\n  1 < pa\n  pa < p\n  1 < k\n  k < p\n  prime pa\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "hence \"\\<not>coprime pa p\""], ["proof (prove)\nusing this:\n  p = pa * k\n  1 < pa\n  pa < p\n  1 < k\n  k < p\n  prime pa\n\ngoal (1 subgoal):\n 1. \\<not> coprime pa p", "by simp"], ["proof (state)\nthis:\n  \\<not> coprime pa p\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "then"], ["proof (chain)\npicking this:\n  \\<not> coprime pa p", "have \"carrier G \\<subset> {1..<p}\""], ["proof (prove)\nusing this:\n  \\<not> coprime pa p\n\ngoal (1 subgoal):\n 1. carrier G \\<subset> {1..<p}", "using \\<open>\\<not> prime p\\<close> pa(2, 3)"], ["proof (prove)\nusing this:\n  \\<not> coprime pa p\n  \\<not> prime p\n  1 < pa\n  pa < p\n\ngoal (1 subgoal):\n 1. carrier G \\<subset> {1..<p}", "by (auto simp: totatives_def)"], ["proof (state)\nthis:\n  carrier G \\<subset> {1..<p}\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "then"], ["proof (chain)\npicking this:\n  carrier G \\<subset> {1..<p}", "have \"card (carrier G) < p - 1\""], ["proof (prove)\nusing this:\n  carrier G \\<subset> {1..<p}\n\ngoal (1 subgoal):\n 1. card (carrier G) < p - 1", "by (metis card_atLeastLessThan finite_atLeastLessThan psubset_card_mono)"], ["proof (state)\nthis:\n  card (carrier G) < p - 1\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "show \"card H < (p - 1) div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "using \\<open>card H \\<le> card (carrier G) div 2\\<close> \\<open>card (carrier G) < p - 1\\<close>"], ["proof (prove)\nusing this:\n  card H \\<le> card (carrier G) div 2\n  card (carrier G) < p - 1\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "using odd_p less_mult_imp_div_less[of \"card (carrier G)\" \"(p - 1) div 2\" 2]"], ["proof (prove)\nusing this:\n  card H \\<le> card (carrier G) div 2\n  card (carrier G) < p - 1\n  odd p\n  card (carrier G) < (p - 1) div 2 * 2 \\<Longrightarrow>\n  card (carrier G) div 2 < (p - 1) div 2\n\ngoal (1 subgoal):\n 1. card H < (p - 1) div 2", "by auto"], ["proof (state)\nthis:\n  card H < (p - 1) div 2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prime_imp_G_is_H:\n  assumes \"prime p\" \"2 < p\"\n  shows \"carrier G = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier G = H", "unfolding H_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier G =\n    {x. coprime x p \\<and> euler_liar (int x) p \\<and> x \\<in> {1..<p}}", "using assms prime_imp_euler_liar[of p] totatives_less[of _ p]"], ["proof (prove)\nusing this:\n  prime p\n  2 < p\n  \\<lbrakk>prime p; 2 < p; 0 < ?x; ?x < int p\\<rbrakk>\n  \\<Longrightarrow> euler_liar ?x p\n  \\<lbrakk>?x \\<in> totatives p; 1 < p\\<rbrakk> \\<Longrightarrow> ?x < p\n\ngoal (1 subgoal):\n 1. carrier G =\n    {x. coprime x p \\<and> euler_liar (int x) p \\<and> x \\<in> {1..<p}}", "by (auto simp: totatives_def)"], ["", "end"], ["", "end"]]}