{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests/Generalized_Primality_Test.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests", "problem_names": ["lemma expectation_of_bool_is_pmf: \"measure_pmf.expectation M of_bool = pmf M True\"", "lemma eq_bernoulli_pmfI:\n  assumes \"pmf p True = x\"\n  shows   \"p = bernoulli_pmf x\"", "lemma FalseD:\n  assumes false: \"False \\<in> set_pmf (primality_test P n)\"\n  shows   \"\\<not> prime n\"", "theorem prime:\n  assumes odd_prime: \"prime n\"\n  shows   \"primality_test P n = return_pmf True\"", "lemma composite_aux:\n  assumes \"\\<not>prime n\"\n  shows   \"measure_pmf.expectation (primality_test P n) of_bool < q\"", "theorem composite:\n  assumes \"\\<not>prime n\"\n  shows   \"pmf (primality_test P n) True < q\""], "translations": [["", "lemma expectation_of_bool_is_pmf: \"measure_pmf.expectation M of_bool = pmf M True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation M of_bool = pmf M True", "by (simp add: integral_measure_pmf_real[where A=UNIV] UNIV_bool)"], ["", "lemma eq_bernoulli_pmfI:\n  assumes \"pmf p True = x\"\n  shows   \"p = bernoulli_pmf x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = bernoulli_pmf x", "proof (intro pmf_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. pmf p i = pmf (bernoulli_pmf x) i", "fix b :: bool"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. pmf p i = pmf (bernoulli_pmf x) i", "from assms"], ["proof (chain)\npicking this:\n  pmf p True = x", "have \"x \\<in> {0..1}\""], ["proof (prove)\nusing this:\n  pmf p True = x\n\ngoal (1 subgoal):\n 1. x \\<in> {0..1}", "by (auto simp: pmf_le_1)"], ["proof (state)\nthis:\n  x \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. \\<And>i. pmf p i = pmf (bernoulli_pmf x) i", "thus \"pmf p b = pmf (bernoulli_pmf x) b\""], ["proof (prove)\nusing this:\n  x \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. pmf p b = pmf (bernoulli_pmf x) b", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> {0..1}\n  pmf p True = x\n\ngoal (1 subgoal):\n 1. pmf p b = pmf (bernoulli_pmf x) b", "by (cases b) (auto simp: pmf_False_conv_True)"], ["proof (state)\nthis:\n  pmf p b = pmf (bernoulli_pmf x) b\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We require a probabilistic primality test to never classify a prime as composite.\n  It may, however, mistakenly classify composites as primes.\n\\<close>"], ["", "locale prob_primality_test =\n  fixes P :: \"nat \\<Rightarrow> nat \\<Rightarrow> bool\" and n :: nat\n  assumes P_works: \"odd n \\<Longrightarrow> 2 \\<le> a \\<Longrightarrow> a < n \\<Longrightarrow> prime n \\<Longrightarrow> P n a\"\nbegin"], ["", "lemma FalseD:\n  assumes false: \"False \\<in> set_pmf (primality_test P n)\"\n  shows   \"\\<not> prime n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> prime n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> prime n", "from false"], ["proof (chain)\npicking this:\n  False \\<in> set_pmf (primality_test P n)", "consider \"n \\<noteq> 2\" \"n < 3\" | \"n \\<noteq> 2\" \"even n\" | \n      a where \"\\<not> P n a\" \"odd n\" \"2 \\<le> a\" \"a < n\""], ["proof (prove)\nusing this:\n  False \\<in> set_pmf (primality_test P n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>n \\<noteq> 2; n < 3\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<lbrakk>n \\<noteq> 2; even n\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<And>a.\n        \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (auto simp: primality_test_def not_less split: if_splits)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<lbrakk>n \\<noteq> 2; n < 3\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>n \\<noteq> 2; even n\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<And>a.\n      \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<not> prime n", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<lbrakk>n \\<noteq> 2; n < 3\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>n \\<noteq> 2; even n\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<And>a.\n      \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>n \\<noteq> 2; n < 3\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>n \\<noteq> 2; even n\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<And>a.\n      \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<not> prime n", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>n \\<noteq> 2; n < 3\\<rbrakk> \\<Longrightarrow> \\<not> prime n\n 2. \\<lbrakk>n \\<noteq> 2; even n\\<rbrakk> \\<Longrightarrow> \\<not> prime n\n 3. \\<And>a.\n       \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> prime n", "case 1"], ["proof (state)\nthis:\n  n \\<noteq> 2\n  n < 3\n\ngoal (3 subgoals):\n 1. \\<lbrakk>n \\<noteq> 2; n < 3\\<rbrakk> \\<Longrightarrow> \\<not> prime n\n 2. \\<lbrakk>n \\<noteq> 2; even n\\<rbrakk> \\<Longrightarrow> \\<not> prime n\n 3. \\<And>a.\n       \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> prime n", "then"], ["proof (chain)\npicking this:\n  n \\<noteq> 2\n  n < 3", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<noteq> 2\n  n < 3\n\ngoal (1 subgoal):\n 1. \\<not> prime n", "by (cases rule: linorder_neqE_nat) (use prime_ge_2_nat[of n] in auto)"], ["proof (state)\nthis:\n  \\<not> prime n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<noteq> 2; even n\\<rbrakk> \\<Longrightarrow> \\<not> prime n\n 2. \\<And>a.\n       \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> prime n", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<noteq> 2; even n\\<rbrakk> \\<Longrightarrow> \\<not> prime n\n 2. \\<And>a.\n       \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> prime n", "case 2"], ["proof (state)\nthis:\n  n \\<noteq> 2\n  even n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<noteq> 2; even n\\<rbrakk> \\<Longrightarrow> \\<not> prime n\n 2. \\<And>a.\n       \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> prime n", "then"], ["proof (chain)\npicking this:\n  n \\<noteq> 2\n  even n", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<noteq> 2\n  even n\n\ngoal (1 subgoal):\n 1. \\<not> prime n", "using primes_dvd_imp_eq two_is_prime_nat"], ["proof (prove)\nusing this:\n  n \\<noteq> 2\n  even n\n  \\<lbrakk>prime ?p; prime ?q; ?p dvd ?q\\<rbrakk> \\<Longrightarrow> ?p = ?q\n  prime 2\n\ngoal (1 subgoal):\n 1. \\<not> prime n", "by blast"], ["proof (state)\nthis:\n  \\<not> prime n\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> prime n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> prime n", "case 3"], ["proof (state)\nthis:\n  \\<not> P n a\n  odd n\n  2 \\<le> a\n  a < n\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<not> P n a; odd n; 2 \\<le> a; a < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> prime n", "then"], ["proof (chain)\npicking this:\n  \\<not> P n a\n  odd n\n  2 \\<le> a\n  a < n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> P n a\n  odd n\n  2 \\<le> a\n  a < n\n\ngoal (1 subgoal):\n 1. \\<not> prime n", "using P_works"], ["proof (prove)\nusing this:\n  \\<not> P n a\n  odd n\n  2 \\<le> a\n  a < n\n  \\<lbrakk>odd n; 2 \\<le> ?a; ?a < n; prime n\\<rbrakk>\n  \\<Longrightarrow> P n ?a\n\ngoal (1 subgoal):\n 1. \\<not> prime n", "by blast"], ["proof (state)\nthis:\n  \\<not> prime n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> prime n\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem prime:\n  assumes odd_prime: \"prime n\"\n  shows   \"primality_test P n = return_pmf True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primality_test P n = return_pmf True", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. primality_test P n = return_pmf True", "have \"set_pmf (primality_test P n) \\<subseteq> {True, False}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf (primality_test P n) \\<subseteq> {True, False}", "by auto"], ["proof (state)\nthis:\n  set_pmf (primality_test P n) \\<subseteq> {True, False}\n\ngoal (1 subgoal):\n 1. primality_test P n = return_pmf True", "moreover"], ["proof (state)\nthis:\n  set_pmf (primality_test P n) \\<subseteq> {True, False}\n\ngoal (1 subgoal):\n 1. primality_test P n = return_pmf True", "from assms"], ["proof (chain)\npicking this:\n  prime n", "have \"False \\<notin> set_pmf (primality_test P n)\""], ["proof (prove)\nusing this:\n  prime n\n\ngoal (1 subgoal):\n 1. False \\<notin> set_pmf (primality_test P n)", "using FalseD"], ["proof (prove)\nusing this:\n  prime n\n  False \\<in> set_pmf (primality_test P n) \\<Longrightarrow> \\<not> prime n\n\ngoal (1 subgoal):\n 1. False \\<notin> set_pmf (primality_test P n)", "by auto"], ["proof (state)\nthis:\n  False \\<notin> set_pmf (primality_test P n)\n\ngoal (1 subgoal):\n 1. primality_test P n = return_pmf True", "ultimately"], ["proof (chain)\npicking this:\n  set_pmf (primality_test P n) \\<subseteq> {True, False}\n  False \\<notin> set_pmf (primality_test P n)", "have \"set_pmf (primality_test P n) \\<subseteq> {True}\""], ["proof (prove)\nusing this:\n  set_pmf (primality_test P n) \\<subseteq> {True, False}\n  False \\<notin> set_pmf (primality_test P n)\n\ngoal (1 subgoal):\n 1. set_pmf (primality_test P n) \\<subseteq> {True}", "by auto"], ["proof (state)\nthis:\n  set_pmf (primality_test P n) \\<subseteq> {True}\n\ngoal (1 subgoal):\n 1. primality_test P n = return_pmf True", "thus ?thesis"], ["proof (prove)\nusing this:\n  set_pmf (primality_test P n) \\<subseteq> {True}\n\ngoal (1 subgoal):\n 1. primality_test P n = return_pmf True", "by (subst (asm) set_pmf_subset_singleton)"], ["proof (state)\nthis:\n  primality_test P n = return_pmf True\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\n  We call a primality test \\<open>q\\<close>-good for a fixed positive real number \\<open>q\\<close> if the probability\n  that it mistakenly classifies a composite as a prime is less than \\<open>q\\<close>.\n\\<close>"], ["", "locale good_prob_primality_test = prob_primality_test +\n  fixes q :: real\n  assumes q_pos: \"q > 0\"\n  assumes composite_witness_bound:\n            \"\\<not>prime n \\<Longrightarrow> 2 < n \\<Longrightarrow> odd n \\<Longrightarrow>\n               real (card {a . 2 \\<le> a \\<and> a < n \\<and> P n a}) < q * real (n - 2)\"\nbegin"], ["", "lemma composite_aux:\n  assumes \"\\<not>prime n\"\n  shows   \"measure_pmf.expectation (primality_test P n) of_bool < q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (primality_test P n) of_bool < q", "unfolding primality_test_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation\n     (if n < 3 \\<or> even n then return_pmf (n = 2)\n      else pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (P n a)))\n     of_bool\n    < q", "using assms composite_witness_bound q_pos"], ["proof (prove)\nusing this:\n  \\<not> prime n\n  \\<lbrakk>\\<not> prime n; 2 < n; odd n\\<rbrakk>\n  \\<Longrightarrow> real (card {a. 2 \\<le> a \\<and> a < n \\<and> P n a})\n                    < q * real (n - 2)\n  0 < q\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation\n     (if n < 3 \\<or> even n then return_pmf (n = 2)\n      else pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (P n a)))\n     of_bool\n    < q", "by (auto simp: pmf_expectation_bind[where A = \"{2..< n}\"] sum_of_bool_eq_card field_simps\n           simp flip: sum_divide_distrib)"], ["", "theorem composite:\n  assumes \"\\<not>prime n\"\n  shows   \"pmf (primality_test P n) True < q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (primality_test P n) True < q", "using composite_aux[OF assms]"], ["proof (prove)\nusing this:\n  measure_pmf.expectation (primality_test P n) of_bool < q\n\ngoal (1 subgoal):\n 1. pmf (primality_test P n) True < q", "by (simp add: expectation_of_bool_is_pmf)"], ["", "end"], ["", "end"]]}