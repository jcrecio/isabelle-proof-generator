{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests/Solovay_Strassen_Test.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests", "problem_names": ["lemma prime_imp_solovay_strassen_witness:\n  assumes \"prime p\" \"odd p\" \"a \\<in> {2..<p}\"\n  shows   \"solovay_strassen_witness p a\"", "lemma card_solovay_strassen_liars_composite:\n  fixes n :: nat\n  assumes \"\\<not>prime n\" \"n > 2\" \"odd n\"\n  shows   \"card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2\"\n    (is \"card ?A < _\")"], "translations": [["", "lemma prime_imp_solovay_strassen_witness:\n  assumes \"prime p\" \"odd p\" \"a \\<in> {2..<p}\"\n  shows   \"solovay_strassen_witness p a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. solovay_strassen_witness p a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. solovay_strassen_witness p a", "have eq: \"Jacobi a p = Legendre a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Jacobi (int a) (int p) = Legendre (int a) (int p)", "using prime_p_Jacobi_eq_Legendre assms"], ["proof (prove)\nusing this:\n  prime ?p \\<Longrightarrow> Jacobi ?a ?p = Legendre ?a ?p\n  prime p\n  odd p\n  a \\<in> {2..<p}\n\ngoal (1 subgoal):\n 1. Jacobi (int a) (int p) = Legendre (int a) (int p)", "by simp"], ["proof (state)\nthis:\n  Jacobi (int a) (int p) = Legendre (int a) (int p)\n\ngoal (1 subgoal):\n 1. solovay_strassen_witness p a", "from \\<open>prime p\\<close>"], ["proof (chain)\npicking this:\n  prime p", "have \"coprime p a\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. coprime p a", "by (rule prime_imp_coprime) (use assms in auto)"], ["proof (state)\nthis:\n  coprime p a\n\ngoal (1 subgoal):\n 1. solovay_strassen_witness p a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. solovay_strassen_witness p a", "unfolding solovay_strassen_witness_def Let_def eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. Legendre (int a) (int p) \\<noteq> 0 \\<and>\n    [Legendre (int a) (int p) = int a ^ ((p - 1) div 2)] (mod int p)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Legendre (int a) (int p) \\<noteq> 0\n 2. [Legendre (int a) (int p) = int a ^ ((p - 1) div 2)] (mod int p)", "from \\<open>coprime p a\\<close> and \\<open>prime p\\<close>"], ["proof (chain)\npicking this:\n  coprime p a\n  prime p", "show \"Legendre (int a) (int p) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  coprime p a\n  prime p\n\ngoal (1 subgoal):\n 1. Legendre (int a) (int p) \\<noteq> 0", "by (auto simp: coprime_commute)"], ["proof (state)\nthis:\n  Legendre (int a) (int p) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. [Legendre (int a) (int p) = int a ^ ((p - 1) div 2)] (mod int p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. [Legendre (int a) (int p) = int a ^ ((p - 1) div 2)] (mod int p)", "show \"[Legendre (int a) (int p) = int a ^ ((p - 1) div 2)] (mod int p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [Legendre (int a) (int p) = int a ^ ((p - 1) div 2)] (mod int p)", "using assms"], ["proof (prove)\nusing this:\n  prime p\n  odd p\n  a \\<in> {2..<p}\n\ngoal (1 subgoal):\n 1. [Legendre (int a) (int p) = int a ^ ((p - 1) div 2)] (mod int p)", "by (intro euler_criterion) auto"], ["proof (state)\nthis:\n  [Legendre (int a) (int p) = int a ^ ((p - 1) div 2)] (mod int p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  solovay_strassen_witness p a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_solovay_strassen_liars_composite:\n  fixes n :: nat\n  assumes \"\\<not>prime n\" \"n > 2\" \"odd n\"\n  shows   \"card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2\"\n    (is \"card ?A < _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2", "interpret euler_witness_context n"], ["proof (prove)\ngoal (1 subgoal):\n 1. euler_witness_context n", "using assms"], ["proof (prove)\nusing this:\n  \\<not> prime n\n  2 < n\n  odd n\n\ngoal (1 subgoal):\n 1. euler_witness_context n", "unfolding euler_witness_context_def"], ["proof (prove)\nusing this:\n  \\<not> prime n\n  2 < n\n  odd n\n\ngoal (1 subgoal):\n 1. 1 < n \\<and> odd n", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2", "have \"card H < (n - 1) div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H < (n - 1) div 2", "by (intro card_euler_liars_cosets_limit(2) assms)"], ["proof (state)\nthis:\n  card H < (n - 1) div 2\n\ngoal (1 subgoal):\n 1. card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2", "also"], ["proof (state)\nthis:\n  card H < (n - 1) div 2\n\ngoal (1 subgoal):\n 1. card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2", "from assms"], ["proof (chain)\npicking this:\n  \\<not> prime n\n  2 < n\n  odd n", "have \"H = insert 1 ?A\""], ["proof (prove)\nusing this:\n  \\<not> prime n\n  2 < n\n  odd n\n\ngoal (1 subgoal):\n 1. H = insert 1 {a \\<in> {2..<n}. solovay_strassen_witness n a}", "by (auto simp: solovay_strassen_witness_def Let_def\n                   euler_witness_def H_def Jacobi_eq_0_iff_not_coprime)"], ["proof (state)\nthis:\n  H = insert 1 {a \\<in> {2..<n}. solovay_strassen_witness n a}\n\ngoal (1 subgoal):\n 1. card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2", "also"], ["proof (state)\nthis:\n  H = insert 1 {a \\<in> {2..<n}. solovay_strassen_witness n a}\n\ngoal (1 subgoal):\n 1. card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2", "have \"card \\<dots> = card ?A + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (insert 1 {a \\<in> {2..<n}. solovay_strassen_witness n a}) =\n    card {a \\<in> {2..<n}. solovay_strassen_witness n a} + 1", "by (subst card.insert) auto"], ["proof (state)\nthis:\n  card (insert 1 {a \\<in> {2..<n}. solovay_strassen_witness n a}) =\n  card {a \\<in> {2..<n}. solovay_strassen_witness n a} + 1\n\ngoal (1 subgoal):\n 1. card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2", "finally"], ["proof (chain)\npicking this:\n  card {a \\<in> {2..<n}. solovay_strassen_witness n a} + 1 < (n - 1) div 2", "show \"card ?A < (n - 2) div 2\""], ["proof (prove)\nusing this:\n  card {a \\<in> {2..<n}. solovay_strassen_witness n a} + 1 < (n - 1) div 2\n\ngoal (1 subgoal):\n 1. card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2", "by linarith"], ["proof (state)\nthis:\n  card {a \\<in> {2..<n}. solovay_strassen_witness n a} < (n - 2) div 2\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation solovay_strassen: good_prob_primality_test solovay_strassen_witness n \"1 / 2\"\n  rewrites \"primality_test solovay_strassen_witness = solovay_strassen\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_prob_primality_test solovay_strassen_witness n (1 / 2) &&&\n    primality_test solovay_strassen_witness = solovay_strassen", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. good_prob_primality_test solovay_strassen_witness n (1 / 2)\n 2. primality_test solovay_strassen_witness = solovay_strassen", "show \"good_prob_primality_test solovay_strassen_witness n (1 / 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_prob_primality_test solovay_strassen_witness n (1 / 2)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>odd n; 2 \\<le> a; a < n; prime n\\<rbrakk>\n       \\<Longrightarrow> solovay_strassen_witness n a\n 2. 0 < 1 / 2\n 3. \\<lbrakk>\\<not> prime n; 2 < n; odd n\\<rbrakk>\n    \\<Longrightarrow> real\n                       (card\n                         {a. 2 \\<le> a \\<and>\n                             a < n \\<and> solovay_strassen_witness n a})\n                      < 1 / 2 * real (n - 2)", "fix n :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>odd n; 2 \\<le> a; a < n; prime n\\<rbrakk>\n       \\<Longrightarrow> solovay_strassen_witness n a\n 2. 0 < 1 / 2\n 3. \\<lbrakk>\\<not> prime n; 2 < n; odd n\\<rbrakk>\n    \\<Longrightarrow> real\n                       (card\n                         {a. 2 \\<le> a \\<and>\n                             a < n \\<and> solovay_strassen_witness n a})\n                      < 1 / 2 * real (n - 2)", "assume \"\\<not>prime n\" \"n > 2\" \"odd n\""], ["proof (state)\nthis:\n  \\<not> prime n\n  2 < n\n  odd n\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>odd n; 2 \\<le> a; a < n; prime n\\<rbrakk>\n       \\<Longrightarrow> solovay_strassen_witness n a\n 2. 0 < 1 / 2\n 3. \\<lbrakk>\\<not> prime n; 2 < n; odd n\\<rbrakk>\n    \\<Longrightarrow> real\n                       (card\n                         {a. 2 \\<le> a \\<and>\n                             a < n \\<and> solovay_strassen_witness n a})\n                      < 1 / 2 * real (n - 2)", "thus \"real (card {a. 2 \\<le> a \\<and> a < n \\<and> solovay_strassen_witness n a}) < (1 / 2) * real (n - 2)\""], ["proof (prove)\nusing this:\n  \\<not> prime n\n  2 < n\n  odd n\n\ngoal (1 subgoal):\n 1. real\n     (card {a. 2 \\<le> a \\<and> a < n \\<and> solovay_strassen_witness n a})\n    < 1 / 2 * real (n - 2)", "using card_solovay_strassen_liars_composite[of n]"], ["proof (prove)\nusing this:\n  \\<not> prime n\n  2 < n\n  odd n\n  \\<lbrakk>\\<not> prime n; 2 < n; odd n\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> {2..<n}. solovay_strassen_witness n a}\n                    < (n - 2) div 2\n\ngoal (1 subgoal):\n 1. real\n     (card {a. 2 \\<le> a \\<and> a < n \\<and> solovay_strassen_witness n a})\n    < 1 / 2 * real (n - 2)", "by auto"], ["proof (state)\nthis:\n  real\n   (card {a. 2 \\<le> a \\<and> a < n \\<and> solovay_strassen_witness n a})\n  < 1 / 2 * real (n - 2)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>odd n; 2 \\<le> a; a < n; prime n\\<rbrakk>\n       \\<Longrightarrow> solovay_strassen_witness n a\n 2. 0 < 1 / 2", "qed (use prime_imp_solovay_strassen_witness in auto)"], ["proof (state)\nthis:\n  good_prob_primality_test solovay_strassen_witness n (1 / 2)\n\ngoal (1 subgoal):\n 1. primality_test solovay_strassen_witness = solovay_strassen", "qed (simp_all add: solovay_strassen_def)"], ["", "end"]]}