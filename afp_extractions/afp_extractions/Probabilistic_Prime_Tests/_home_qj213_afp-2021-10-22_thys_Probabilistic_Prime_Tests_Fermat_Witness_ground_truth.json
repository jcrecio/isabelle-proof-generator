{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests/Fermat_Witness.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests", "problem_names": ["lemma fst_divide_out [simp]: \"fst (divide_out p x) = x div p ^ multiplicity p x\"\n  and snd_divide_out [simp]: \"snd (divide_out p x) = multiplicity p x\"", "lemmas [simp del] = divide_out_aux.simps", "lemma divide_out_aux_correct:\n  \"divide_out_aux p z = (fst z div p ^ multiplicity p (fst z), snd z + multiplicity p (fst z))\"", "lemma divide_out_code [code]: \"divide_out p x = divide_out_aux p (x, 0)\"", "lemma multiplicity_code [code]: \"multiplicity p x = snd (divide_out_aux p (x, 0))\"", "lemma multiplicity_times_same_power:\n  assumes \"x \\<noteq> 0\" \"\\<not>is_unit p\" \"p \\<noteq> 0\"\n  shows   \"multiplicity p (p ^ k * x) = multiplicity p x + k\"", "lemma divide_out_unique_nat:\n  fixes n :: nat\n  assumes \"\\<not>is_unit p\" \"p \\<noteq> 0\" \"\\<not>p dvd m\" and \"n = p ^ k * m\"\n  shows   \"m = n div p ^ multiplicity p n\" and \"k = multiplicity p n\"", "lemma fermat_liar_witness_of_composition[iff]:\n  \"\\<not>fermat_liar = fermat_witness\"\n  \"\\<not>fermat_witness = fermat_liar\"", "lemma strong_fermat_liar_code [code]:\n  \"strong_fermat_liar \\<longleftrightarrow> \n     (let (m, k) = divide_out 2 (n - 1)\n      in [a^m = 1](mod n) \\<or> (\\<exists>i \\<in> {0..< k}. [a^(2 ^ i * m) = n-1] (mod n)))\"\n  (is \"?lhs = ?rhs\")", "lemma strong_fermat_witness_iff:\n  \"strong_fermat_witness =\n     (\\<exists>k m. odd m \\<and> n - 1 = 2 ^ k * m \\<and> [a ^ m \\<noteq> 1] (mod n) \\<and> \n            (\\<forall>i\\<in>{0..<k}. [a ^ (2 ^ i * m) \\<noteq> n-1] (mod n)))\"", "lemma not_coprime_imp_witness: \"\\<not>coprime a n \\<Longrightarrow> fermat_witness\"", "lemma fermat_witness_imp_strong_fermat_witness:\n  assumes \"1 < n\" \"fermat_witness\"\n  shows \"strong_fermat_witness\"", "lemma euler_liar_is_fermat_liar:\n  assumes \"1 < n\" \"euler_liar a n\" \"coprime a n\" \"odd n\"\n  shows \"fermat_liar\"", "lemma one_is_fermat_liar[simp]: \"1 < n \\<Longrightarrow> fermat_liar 1 n\"", "lemma one_is_strong_fermat_liar[simp]: \"1 < n \\<Longrightarrow> strong_fermat_liar 1 n\"", "lemma prime_imp_fermat_liar:\n  \"prime p \\<Longrightarrow> a \\<in> {1 ..< p} \\<Longrightarrow> fermat_liar a p\"", "lemma not_Carmichael_numberD:\n  assumes \"\\<not>Carmichael_number n\" \"\\<not>prime n\"  and \"1 < n\"\n  shows \"\\<exists> a \\<in> {2 ..< n} . fermat_witness a n \\<and> coprime a n\"", "lemma ignore_one:\n  fixes P :: \"_ \\<Rightarrow> nat \\<Rightarrow> bool\"\n  assumes \"P 1 n\" \"1 < n\"\n  shows \"card {a \\<in> {1..<n}. P a n} = 1 + card {a. 2 \\<le> a \\<and> a < n \\<and> P a n}\""], "translations": [["", "lemma fst_divide_out [simp]: \"fst (divide_out p x) = x div p ^ multiplicity p x\"\n  and snd_divide_out [simp]: \"snd (divide_out p x) = multiplicity p x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (divide_out p x) = x div p ^ multiplicity p x &&&\n    snd (divide_out p x) = multiplicity p x", "by (simp_all add: divide_out_def)"], ["", "function divide_out_aux :: \"'a :: factorial_semiring \\<Rightarrow> 'a \\<times> nat \\<Rightarrow> 'a \\<times> nat\" where\n  \"divide_out_aux p (x, acc) =\n     (if x = 0 \\<or> is_unit p \\<or> \\<not>p dvd x then (x, acc) else divide_out_aux p (x div p, acc + 1))\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>p xa acc.\n           x = (p, xa, acc) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>p x acc pa xa acca.\n       (p, x, acc) = (pa, xa, acca) \\<Longrightarrow>\n       (if x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x then (x, acc)\n        else divide_out_aux_sumC (p, x div p, acc + 1)) =\n       (if xa = (0::'a) \\<or> is_unit pa \\<or> \\<not> pa dvd xa\n        then (xa, acca) else divide_out_aux_sumC (pa, xa div pa, acca + 1))", "by auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All divide_out_aux_dom", "proof (relation \"measure (\\<lambda>(p, x, _). multiplicity p x)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. wf (measure (\\<lambda>(p, x, uu_). multiplicity p x))\n 2. \\<And>p x acc.\n       \\<not> (x = (0::'a) \\<or>\n               is_unit p \\<or> \\<not> p dvd x) \\<Longrightarrow>\n       ((p, x div p, acc + 1), p, x, acc)\n       \\<in> measure (\\<lambda>(p, x, uu_). multiplicity p x)", "fix p x :: 'a and acc :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. wf (measure (\\<lambda>(p, x, uu_). multiplicity p x))\n 2. \\<And>p x acc.\n       \\<not> (x = (0::'a) \\<or>\n               is_unit p \\<or> \\<not> p dvd x) \\<Longrightarrow>\n       ((p, x div p, acc + 1), p, x, acc)\n       \\<in> measure (\\<lambda>(p, x, uu_). multiplicity p x)", "assume \"\\<not>(x = 0 \\<or> is_unit p \\<or> \\<not>p dvd x)\""], ["proof (state)\nthis:\n  \\<not> (x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x)\n\ngoal (2 subgoals):\n 1. wf (measure (\\<lambda>(p, x, uu_). multiplicity p x))\n 2. \\<And>p x acc.\n       \\<not> (x = (0::'a) \\<or>\n               is_unit p \\<or> \\<not> p dvd x) \\<Longrightarrow>\n       ((p, x div p, acc + 1), p, x, acc)\n       \\<in> measure (\\<lambda>(p, x, uu_). multiplicity p x)", "thus \"((p, x div p, acc + 1), p, x, acc) \\<in> measure (\\<lambda>(p, x, _). multiplicity p x)\""], ["proof (prove)\nusing this:\n  \\<not> (x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x)\n\ngoal (1 subgoal):\n 1. ((p, x div p, acc + 1), p, x, acc)\n    \\<in> measure (\\<lambda>(p, x, uu_). multiplicity p x)", "by (auto elim!: dvdE simp: multiplicity_times_same)"], ["proof (state)\nthis:\n  ((p, x div p, acc + 1), p, x, acc)\n  \\<in> measure (\\<lambda>(p, x, uu_). multiplicity p x)\n\ngoal (1 subgoal):\n 1. wf (measure (\\<lambda>(p, x, uu_). multiplicity p x))", "qed auto"], ["", "lemmas [simp del] = divide_out_aux.simps"], ["", "lemma divide_out_aux_correct:\n  \"divide_out_aux p z = (fst z div p ^ multiplicity p (fst z), snd z + multiplicity p (fst z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divide_out_aux p z =\n    (fst z div p ^ multiplicity p (fst z), snd z + multiplicity p (fst z))", "proof (induction p z rule: divide_out_aux.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p x acc.\n       (\\<not> (x = (0::'a) \\<or>\n                is_unit p \\<or> \\<not> p dvd x) \\<Longrightarrow>\n        divide_out_aux p (x div p, acc + 1) =\n        (fst (x div p, acc + 1) div\n         p ^ multiplicity p (fst (x div p, acc + 1)),\n         snd (x div p, acc + 1) +\n         multiplicity p (fst (x div p, acc + 1)))) \\<Longrightarrow>\n       divide_out_aux p (x, acc) =\n       (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n        snd (x, acc) + multiplicity p (fst (x, acc)))", "case (1 p x acc)"], ["proof (state)\nthis:\n  \\<not> (x = (0::'a) \\<or>\n          is_unit p \\<or> \\<not> p dvd x) \\<Longrightarrow>\n  divide_out_aux p (x div p, acc + 1) =\n  (fst (x div p, acc + 1) div p ^ multiplicity p (fst (x div p, acc + 1)),\n   snd (x div p, acc + 1) + multiplicity p (fst (x div p, acc + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>p x acc.\n       (\\<not> (x = (0::'a) \\<or>\n                is_unit p \\<or> \\<not> p dvd x) \\<Longrightarrow>\n        divide_out_aux p (x div p, acc + 1) =\n        (fst (x div p, acc + 1) div\n         p ^ multiplicity p (fst (x div p, acc + 1)),\n         snd (x div p, acc + 1) +\n         multiplicity p (fst (x div p, acc + 1)))) \\<Longrightarrow>\n       divide_out_aux p (x, acc) =\n       (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n        snd (x, acc) + multiplicity p (fst (x, acc)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. divide_out_aux p (x, acc) =\n    (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n     snd (x, acc) + multiplicity p (fst (x, acc)))", "proof (cases \"x = 0 \\<or> is_unit p \\<or> \\<not>p dvd x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x \\<Longrightarrow>\n    divide_out_aux p (x, acc) =\n    (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n     snd (x, acc) + multiplicity p (fst (x, acc)))\n 2. \\<not> (x = (0::'a) \\<or>\n            is_unit p \\<or> \\<not> p dvd x) \\<Longrightarrow>\n    divide_out_aux p (x, acc) =\n    (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n     snd (x, acc) + multiplicity p (fst (x, acc)))", "case False"], ["proof (state)\nthis:\n  \\<not> (x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x)\n\ngoal (2 subgoals):\n 1. x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x \\<Longrightarrow>\n    divide_out_aux p (x, acc) =\n    (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n     snd (x, acc) + multiplicity p (fst (x, acc)))\n 2. \\<not> (x = (0::'a) \\<or>\n            is_unit p \\<or> \\<not> p dvd x) \\<Longrightarrow>\n    divide_out_aux p (x, acc) =\n    (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n     snd (x, acc) + multiplicity p (fst (x, acc)))", "have \"x div p div p ^ multiplicity p (x div p) = x div p ^ multiplicity p x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x div p div p ^ multiplicity p (x div p) = x div p ^ multiplicity p x", "using False"], ["proof (prove)\nusing this:\n  \\<not> (x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x)\n\ngoal (1 subgoal):\n 1. x div p div p ^ multiplicity p (x div p) = x div p ^ multiplicity p x", "by (subst dvd_div_mult2_eq [symmetric])\n         (auto elim!: dvdE simp: multiplicity_dvd multiplicity_times_same)"], ["proof (state)\nthis:\n  x div p div p ^ multiplicity p (x div p) = x div p ^ multiplicity p x\n\ngoal (2 subgoals):\n 1. x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x \\<Longrightarrow>\n    divide_out_aux p (x, acc) =\n    (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n     snd (x, acc) + multiplicity p (fst (x, acc)))\n 2. \\<not> (x = (0::'a) \\<or>\n            is_unit p \\<or> \\<not> p dvd x) \\<Longrightarrow>\n    divide_out_aux p (x, acc) =\n    (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n     snd (x, acc) + multiplicity p (fst (x, acc)))", "with False"], ["proof (chain)\npicking this:\n  \\<not> (x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x)\n  x div p div p ^ multiplicity p (x div p) = x div p ^ multiplicity p x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x)\n  x div p div p ^ multiplicity p (x div p) = x div p ^ multiplicity p x\n\ngoal (1 subgoal):\n 1. divide_out_aux p (x, acc) =\n    (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n     snd (x, acc) + multiplicity p (fst (x, acc)))", "using 1"], ["proof (prove)\nusing this:\n  \\<not> (x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x)\n  x div p div p ^ multiplicity p (x div p) = x div p ^ multiplicity p x\n  \\<not> (x = (0::'a) \\<or>\n          is_unit p \\<or> \\<not> p dvd x) \\<Longrightarrow>\n  divide_out_aux p (x div p, acc + 1) =\n  (fst (x div p, acc + 1) div p ^ multiplicity p (fst (x div p, acc + 1)),\n   snd (x div p, acc + 1) + multiplicity p (fst (x div p, acc + 1)))\n\ngoal (1 subgoal):\n 1. divide_out_aux p (x, acc) =\n    (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n     snd (x, acc) + multiplicity p (fst (x, acc)))", "by (subst divide_out_aux.simps)\n         (auto elim: dvdE simp: multiplicity_times_same multiplicity_unit_left\n                                not_dvd_imp_multiplicity_0)"], ["proof (state)\nthis:\n  divide_out_aux p (x, acc) =\n  (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n   snd (x, acc) + multiplicity p (fst (x, acc)))\n\ngoal (1 subgoal):\n 1. x = (0::'a) \\<or> is_unit p \\<or> \\<not> p dvd x \\<Longrightarrow>\n    divide_out_aux p (x, acc) =\n    (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n     snd (x, acc) + multiplicity p (fst (x, acc)))", "qed (auto simp: divide_out_aux.simps multiplicity_unit_left not_dvd_imp_multiplicity_0)"], ["proof (state)\nthis:\n  divide_out_aux p (x, acc) =\n  (fst (x, acc) div p ^ multiplicity p (fst (x, acc)),\n   snd (x, acc) + multiplicity p (fst (x, acc)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma divide_out_code [code]: \"divide_out p x = divide_out_aux p (x, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divide_out p x = divide_out_aux p (x, 0)", "by (simp add: divide_out_aux_correct divide_out_def)"], ["", "lemma multiplicity_code [code]: \"multiplicity p x = snd (divide_out_aux p (x, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p x = snd (divide_out_aux p (x, 0))", "by (simp add: divide_out_aux_correct)"], ["", "(* TODO Move *)"], ["", "lemma multiplicity_times_same_power:\n  assumes \"x \\<noteq> 0\" \"\\<not>is_unit p\" \"p \\<noteq> 0\"\n  shows   \"multiplicity p (p ^ k * x) = multiplicity p x + k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p (p ^ k * x) = multiplicity p x + k", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> (0::'a)\n  \\<not> is_unit p\n  p \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. multiplicity p (p ^ k * x) = multiplicity p x + k", "by (induction k) (simp_all add: multiplicity_times_same mult.assoc)"], ["", "lemma divide_out_unique_nat:\n  fixes n :: nat\n  assumes \"\\<not>is_unit p\" \"p \\<noteq> 0\" \"\\<not>p dvd m\" and \"n = p ^ k * m\"\n  shows   \"m = n div p ^ multiplicity p n\" and \"k = multiplicity p n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = n div p ^ multiplicity p n &&& k = multiplicity p n", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. m = n div p ^ multiplicity p n\n 2. k = multiplicity p n", "from assms"], ["proof (chain)\npicking this:\n  \\<not> is_unit p\n  p \\<noteq> 0\n  \\<not> p dvd m\n  n = p ^ k * m", "have \"n \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<not> is_unit p\n  p \\<noteq> 0\n  \\<not> p dvd m\n  n = p ^ k * m\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "by (intro notI) auto"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. m = n div p ^ multiplicity p n\n 2. k = multiplicity p n", "thus *: \"k = multiplicity p n\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k = multiplicity p n", "using assms"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  \\<not> is_unit p\n  p \\<noteq> 0\n  \\<not> p dvd m\n  n = p ^ k * m\n\ngoal (1 subgoal):\n 1. k = multiplicity p n", "by (auto simp: assms multiplicity_times_same_power not_dvd_imp_multiplicity_0)"], ["proof (state)\nthis:\n  k = multiplicity p n\n\ngoal (1 subgoal):\n 1. m = n div p ^ multiplicity p n", "from assms"], ["proof (chain)\npicking this:\n  \\<not> is_unit p\n  p \\<noteq> 0\n  \\<not> p dvd m\n  n = p ^ k * m", "show \"m = n div p ^ multiplicity p n\""], ["proof (prove)\nusing this:\n  \\<not> is_unit p\n  p \\<noteq> 0\n  \\<not> p dvd m\n  n = p ^ k * m\n\ngoal (1 subgoal):\n 1. m = n div p ^ multiplicity p n", "unfolding * [symmetric]"], ["proof (prove)\nusing this:\n  \\<not> is_unit p\n  p \\<noteq> 0\n  \\<not> p dvd m\n  n = p ^ k * m\n\ngoal (1 subgoal):\n 1. m = n div p ^ k", "by auto"], ["proof (state)\nthis:\n  m = n div p ^ multiplicity p n\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  fixes a n :: nat \nbegin"], ["", "definition \"fermat_liar \\<longleftrightarrow> [a^(n-1) = 1] (mod n)\""], ["", "definition \"fermat_witness \\<longleftrightarrow> [a^(n-1) \\<noteq> 1] (mod n)\""], ["", "definition \"strong_fermat_liar \\<longleftrightarrow>\n              (\\<forall>k m. odd m \\<longrightarrow> n - 1 = 2^k * m \\<longrightarrow>\n                 [a^m = 1](mod n) \\<or> (\\<exists>i \\<in> {0..< k}. [a^(2 ^ i * m) = n-1] (mod n)))\""], ["", "definition \"strong_fermat_witness \\<longleftrightarrow> \\<not> strong_fermat_liar\""], ["", "lemma fermat_liar_witness_of_composition[iff]:\n  \"\\<not>fermat_liar = fermat_witness\"\n  \"\\<not>fermat_witness = fermat_liar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.fermat_liar \\<noteq> local.fermat_witness &&&\n    local.fermat_witness \\<noteq> local.fermat_liar", "unfolding fermat_liar_def and fermat_witness_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (n - 1) = 1] (mod n) \\<noteq> [a ^ (n - 1) \\<noteq> 1] (mod n) &&&\n    [a ^ (n - 1) \\<noteq> 1] (mod n) \\<noteq> [a ^ (n - 1) = 1] (mod n)", "by simp_all"], ["", "lemma strong_fermat_liar_code [code]:\n  \"strong_fermat_liar \\<longleftrightarrow> \n     (let (m, k) = divide_out 2 (n - 1)\n      in [a^m = 1](mod n) \\<or> (\\<exists>i \\<in> {0..< k}. [a^(2 ^ i * m) = n-1] (mod n)))\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))", "proof (cases \"n > 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow>\n    local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))\n 2. \\<not> 1 < n \\<Longrightarrow>\n    local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))", "case True"], ["proof (state)\nthis:\n  1 < n\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow>\n    local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))\n 2. \\<not> 1 < n \\<Longrightarrow>\n    local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))", "define m where \"m = (n - 1) div 2 ^ multiplicity 2 (n - 1)\""], ["proof (state)\nthis:\n  m = (n - 1) div 2 ^ multiplicity 2 (n - 1)\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow>\n    local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))\n 2. \\<not> 1 < n \\<Longrightarrow>\n    local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))", "define k where \"k = multiplicity 2 (n - 1)\""], ["proof (state)\nthis:\n  k = multiplicity 2 (n - 1)\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow>\n    local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))\n 2. \\<not> 1 < n \\<Longrightarrow>\n    local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))", "have mk: \"odd m \\<and> n - 1 = 2 ^ k * m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd m \\<and> n - 1 = 2 ^ k * m", "using True multiplicity_decompose[of \"n - 1\" 2] multiplicity_dvd[of 2 \"n - 1\"]"], ["proof (prove)\nusing this:\n  1 < n\n  \\<lbrakk>n - 1 \\<noteq> 0; \\<not> is_unit 2\\<rbrakk>\n  \\<Longrightarrow> odd ((n - 1) div 2 ^ multiplicity 2 (n - 1))\n  2 ^ multiplicity 2 (n - 1) dvd n - 1\n\ngoal (1 subgoal):\n 1. odd m \\<and> n - 1 = 2 ^ k * m", "by (auto simp: m_def k_def)"], ["proof (state)\nthis:\n  odd m \\<and> n - 1 = 2 ^ k * m\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow>\n    local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))\n 2. \\<not> 1 < n \\<Longrightarrow>\n    local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. local.strong_fermat_liar \\<Longrightarrow>\n    let (m, k) = divide_out 2 (n - 1)\n    in [a ^ m = 1] (mod n) \\<or>\n       (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))\n 2. let (m, k) = divide_out 2 (n - 1)\n    in [a ^ m = 1] (mod n) \\<or>\n       (\\<exists>i\\<in>{0..<k}.\n           [a ^ (2 ^ i * m) = n - 1] (mod n)) \\<Longrightarrow>\n    local.strong_fermat_liar", "assume ?lhs"], ["proof (state)\nthis:\n  local.strong_fermat_liar\n\ngoal (2 subgoals):\n 1. local.strong_fermat_liar \\<Longrightarrow>\n    let (m, k) = divide_out 2 (n - 1)\n    in [a ^ m = 1] (mod n) \\<or>\n       (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))\n 2. let (m, k) = divide_out 2 (n - 1)\n    in [a ^ m = 1] (mod n) \\<or>\n       (\\<exists>i\\<in>{0..<k}.\n           [a ^ (2 ^ i * m) = n - 1] (mod n)) \\<Longrightarrow>\n    local.strong_fermat_liar", "hence \"[a^m = 1] (mod n) \\<or> (\\<exists>i \\<in> {0..< k}. [a^(2 ^ i * m) = n-1] (mod n))\""], ["proof (prove)\nusing this:\n  local.strong_fermat_liar\n\ngoal (1 subgoal):\n 1. [a ^ m = 1] (mod n) \\<or>\n    (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))", "using True mk"], ["proof (prove)\nusing this:\n  local.strong_fermat_liar\n  1 < n\n  odd m \\<and> n - 1 = 2 ^ k * m\n\ngoal (1 subgoal):\n 1. [a ^ m = 1] (mod n) \\<or>\n    (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))", "by (auto simp: divide_out_def strong_fermat_liar_def)"], ["proof (state)\nthis:\n  [a ^ m = 1] (mod n) \\<or>\n  (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))\n\ngoal (2 subgoals):\n 1. local.strong_fermat_liar \\<Longrightarrow>\n    let (m, k) = divide_out 2 (n - 1)\n    in [a ^ m = 1] (mod n) \\<or>\n       (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))\n 2. let (m, k) = divide_out 2 (n - 1)\n    in [a ^ m = 1] (mod n) \\<or>\n       (\\<exists>i\\<in>{0..<k}.\n           [a ^ (2 ^ i * m) = n - 1] (mod n)) \\<Longrightarrow>\n    local.strong_fermat_liar", "thus ?rhs"], ["proof (prove)\nusing this:\n  [a ^ m = 1] (mod n) \\<or>\n  (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))\n\ngoal (1 subgoal):\n 1. let (m, k) = divide_out 2 (n - 1)\n    in [a ^ m = 1] (mod n) \\<or>\n       (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))", "by (auto simp: Let_def divide_out_def m_def k_def)"], ["proof (state)\nthis:\n  let (m, k) = divide_out 2 (n - 1)\n  in [a ^ m = 1] (mod n) \\<or>\n     (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))\n\ngoal (1 subgoal):\n 1. let (m, k) = divide_out 2 (n - 1)\n    in [a ^ m = 1] (mod n) \\<or>\n       (\\<exists>i\\<in>{0..<k}.\n           [a ^ (2 ^ i * m) = n - 1] (mod n)) \\<Longrightarrow>\n    local.strong_fermat_liar", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. let (m, k) = divide_out 2 (n - 1)\n    in [a ^ m = 1] (mod n) \\<or>\n       (\\<exists>i\\<in>{0..<k}.\n           [a ^ (2 ^ i * m) = n - 1] (mod n)) \\<Longrightarrow>\n    local.strong_fermat_liar", "assume ?rhs"], ["proof (state)\nthis:\n  let (m, k) = divide_out 2 (n - 1)\n  in [a ^ m = 1] (mod n) \\<or>\n     (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))\n\ngoal (1 subgoal):\n 1. let (m, k) = divide_out 2 (n - 1)\n    in [a ^ m = 1] (mod n) \\<or>\n       (\\<exists>i\\<in>{0..<k}.\n           [a ^ (2 ^ i * m) = n - 1] (mod n)) \\<Longrightarrow>\n    local.strong_fermat_liar", "thus ?lhs"], ["proof (prove)\nusing this:\n  let (m, k) = divide_out 2 (n - 1)\n  in [a ^ m = 1] (mod n) \\<or>\n     (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))\n\ngoal (1 subgoal):\n 1. local.strong_fermat_liar", "using divide_out_unique_nat[of 2]"], ["proof (prove)\nusing this:\n  let (m, k) = divide_out 2 (n - 1)\n  in [a ^ m = 1] (mod n) \\<or>\n     (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))\n  \\<lbrakk>\\<not> is_unit 2; 2 \\<noteq> 0; odd ?m; ?n = 2 ^ ?k * ?m\\<rbrakk>\n  \\<Longrightarrow> ?m = ?n div 2 ^ multiplicity 2 ?n\n  \\<lbrakk>\\<not> is_unit 2; 2 \\<noteq> 0; odd ?m; ?n = 2 ^ ?k * ?m\\<rbrakk>\n  \\<Longrightarrow> ?k = multiplicity 2 ?n\n\ngoal (1 subgoal):\n 1. local.strong_fermat_liar", "by (auto simp: strong_fermat_liar_def divide_out_def)"], ["proof (state)\nthis:\n  local.strong_fermat_liar\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.strong_fermat_liar =\n  (let (m, k) = divide_out 2 (n - 1)\n   in [a ^ m = 1] (mod n) \\<or>\n      (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))\n\ngoal (1 subgoal):\n 1. \\<not> 1 < n \\<Longrightarrow>\n    local.strong_fermat_liar =\n    (let (m, k) = divide_out 2 (n - 1)\n     in [a ^ m = 1] (mod n) \\<or>\n        (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n)))", "qed (auto simp: strong_fermat_liar_def divide_out_def)"], ["", "context\n  assumes * : \"a \\<in> {1 ..< n}\"\nbegin"], ["", "lemma strong_fermat_witness_iff:\n  \"strong_fermat_witness =\n     (\\<exists>k m. odd m \\<and> n - 1 = 2 ^ k * m \\<and> [a ^ m \\<noteq> 1] (mod n) \\<and> \n            (\\<forall>i\\<in>{0..<k}. [a ^ (2 ^ i * m) \\<noteq> n-1] (mod n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.strong_fermat_witness =\n    (\\<exists>k m.\n        odd m \\<and>\n        n - 1 = 2 ^ k * m \\<and>\n        [a ^ m \\<noteq> 1] (mod n) \\<and>\n        (\\<forall>i\\<in>{0..<k}. [a ^ (2 ^ i * m) \\<noteq> n - 1] (mod n)))", "unfolding strong_fermat_witness_def strong_fermat_liar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> (\\<forall>k m.\n                odd m \\<longrightarrow>\n                n - 1 = 2 ^ k * m \\<longrightarrow>\n                [a ^ m = 1] (mod n) \\<or>\n                (\\<exists>i\\<in>{0..<k}.\n                    [a ^ (2 ^ i * m) = n - 1] (mod n)))) =\n    (\\<exists>k m.\n        odd m \\<and>\n        n - 1 = 2 ^ k * m \\<and>\n        [a ^ m \\<noteq> 1] (mod n) \\<and>\n        (\\<forall>i\\<in>{0..<k}. [a ^ (2 ^ i * m) \\<noteq> n - 1] (mod n)))", "by blast"], ["", "lemma not_coprime_imp_witness: \"\\<not>coprime a n \\<Longrightarrow> fermat_witness\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> coprime a n \\<Longrightarrow> local.fermat_witness", "using * lucas_coprime_lemma[of \"n-1\" a n]"], ["proof (prove)\nusing this:\n  a \\<in> {1..<n}\n  \\<lbrakk>n - 1 \\<noteq> 0; [a ^ (n - 1) = 1] (mod n)\\<rbrakk>\n  \\<Longrightarrow> coprime a n\n\ngoal (1 subgoal):\n 1. \\<not> coprime a n \\<Longrightarrow> local.fermat_witness", "by (auto simp: fermat_witness_def)"], ["", "corollary liar_imp_coprime: \"fermat_liar \\<Longrightarrow> coprime a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.fermat_liar \\<Longrightarrow> coprime a n", "using not_coprime_imp_witness fermat_liar_witness_of_composition"], ["proof (prove)\nusing this:\n  \\<not> coprime a n \\<Longrightarrow> local.fermat_witness\n  local.fermat_liar \\<noteq> local.fermat_witness\n  local.fermat_witness \\<noteq> local.fermat_liar\n\ngoal (1 subgoal):\n 1. local.fermat_liar \\<Longrightarrow> coprime a n", "by blast"], ["", "lemma fermat_witness_imp_strong_fermat_witness:\n  assumes \"1 < n\" \"fermat_witness\"\n  shows \"strong_fermat_witness\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "from \\<open>fermat_witness\\<close>"], ["proof (chain)\npicking this:\n  local.fermat_witness", "have \"[a^(n-1) \\<noteq> 1] (mod n)\""], ["proof (prove)\nusing this:\n  local.fermat_witness\n\ngoal (1 subgoal):\n 1. [a ^ (n - 1) \\<noteq> 1] (mod n)", "unfolding fermat_witness_def"], ["proof (prove)\nusing this:\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ (n - 1) \\<noteq> 1] (mod n)", "."], ["proof (state)\nthis:\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "obtain k m where \"odd m\" and n: \"n - 1 = 2 ^ k * m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m k.\n        \\<lbrakk>odd m; n - 1 = 2 ^ k * m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using *"], ["proof (prove)\nusing this:\n  a \\<in> {1..<n}\n\ngoal (1 subgoal):\n 1. (\\<And>m k.\n        \\<lbrakk>odd m; n - 1 = 2 ^ k * m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: multiplicity_decompose'[of \"(n-1)\" 2])"], ["proof (state)\nthis:\n  odd m\n  n - 1 = 2 ^ k * m\n\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "moreover"], ["proof (state)\nthis:\n  odd m\n  n - 1 = 2 ^ k * m\n\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "have \"[a ^ m \\<noteq> 1] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ m \\<noteq> 1] (mod n)", "using \\<open>[a^(n-1) \\<noteq> 1] (mod n)\\<close> n ord_divides"], ["proof (prove)\nusing this:\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n  n - 1 = 2 ^ k * m\n  [?a ^ ?d = 1] (mod ?n) = (ord ?n ?a dvd ?d)\n\ngoal (1 subgoal):\n 1. [a ^ m \\<noteq> 1] (mod n)", "by auto"], ["proof (state)\nthis:\n  [a ^ m \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "moreover"], ["proof (state)\nthis:\n  [a ^ m \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "{"], ["proof (state)\nthis:\n  [a ^ m \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "fix i :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "assume \"i \\<in> {0..<k}\""], ["proof (state)\nthis:\n  i \\<in> {0..<k}\n\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "hence \"i \\<le> k - 1\" \"0 < k\""], ["proof (prove)\nusing this:\n  i \\<in> {0..<k}\n\ngoal (1 subgoal):\n 1. i \\<le> k - 1 &&& 0 < k", "by auto"], ["proof (state)\nthis:\n  i \\<le> k - 1\n  0 < k\n\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "then"], ["proof (chain)\npicking this:\n  i \\<le> k - 1\n  0 < k", "have \"[a ^ (2 ^ i * m) \\<noteq> n - 1] (mod n)\" \"[a ^ (2 ^ i * m) \\<noteq> 1] (mod n)\""], ["proof (prove)\nusing this:\n  i \\<le> k - 1\n  0 < k\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) \\<noteq> n - 1] (mod n) &&&\n    [a ^ (2 ^ i * m) \\<noteq> 1] (mod n)", "proof(induction i rule: inc_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. 0 < k \\<Longrightarrow> [a ^ (2 ^ (k - 1) * m) \\<noteq> n - 1] (mod n)\n 2. 0 < k \\<Longrightarrow> [a ^ (2 ^ (k - 1) * m) \\<noteq> 1] (mod n)\n 3. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 4. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "case base"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. 0 < k \\<Longrightarrow> [a ^ (2 ^ (k - 1) * m) \\<noteq> n - 1] (mod n)\n 2. 0 < k \\<Longrightarrow> [a ^ (2 ^ (k - 1) * m) \\<noteq> 1] (mod n)\n 3. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 4. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "have * :\"a ^ (n - 1) = (a ^ (2 ^ (k - 1) * m))\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ (n - 1) = (a ^ (2 ^ (k - 1) * m))\\<^sup>2", "using \\<open>0 < k\\<close> n semiring_normalization_rules(27)[of \"2 :: nat\" \"k - 1\"]"], ["proof (prove)\nusing this:\n  0 < k\n  n - 1 = 2 ^ k * m\n  2 * 2 ^ (k - 1) = 2 ^ Suc (k - 1)\n\ngoal (1 subgoal):\n 1. a ^ (n - 1) = (a ^ (2 ^ (k - 1) * m))\\<^sup>2", "by (auto simp flip: power_even_eq simp add: algebra_simps)"], ["proof (state)\nthis:\n  a ^ (n - 1) = (a ^ (2 ^ (k - 1) * m))\\<^sup>2\n\ngoal (4 subgoals):\n 1. 0 < k \\<Longrightarrow> [a ^ (2 ^ (k - 1) * m) \\<noteq> n - 1] (mod n)\n 2. 0 < k \\<Longrightarrow> [a ^ (2 ^ (k - 1) * m) \\<noteq> 1] (mod n)\n 3. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 4. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "case 1"], ["proof (state)\nthis:\n  0 < k\n\ngoal (4 subgoals):\n 1. 0 < k \\<Longrightarrow> [a ^ (2 ^ (k - 1) * m) \\<noteq> n - 1] (mod n)\n 2. 0 < k \\<Longrightarrow> [a ^ (2 ^ (k - 1) * m) \\<noteq> 1] (mod n)\n 3. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 4. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "from *"], ["proof (chain)\npicking this:\n  a ^ (n - 1) = (a ^ (2 ^ (k - 1) * m))\\<^sup>2", "show ?case"], ["proof (prove)\nusing this:\n  a ^ (n - 1) = (a ^ (2 ^ (k - 1) * m))\\<^sup>2\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (k - 1) * m) \\<noteq> n - 1] (mod n)", "using \\<open>[a^(n-1) \\<noteq> 1] (mod n)\\<close> and square_minus_one_cong_one[OF \\<open>1 < n\\<close>]"], ["proof (prove)\nusing this:\n  a ^ (n - 1) = (a ^ (2 ^ (k - 1) * m))\\<^sup>2\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n  [?x = n - 1] (mod n) \\<Longrightarrow> [?x\\<^sup>2 = 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (k - 1) * m) \\<noteq> n - 1] (mod n)", "by auto"], ["proof (state)\nthis:\n  [a ^ (2 ^ (k - 1) * m) \\<noteq> n - 1] (mod n)\n\ngoal (3 subgoals):\n 1. 0 < k \\<Longrightarrow> [a ^ (2 ^ (k - 1) * m) \\<noteq> 1] (mod n)\n 2. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 3. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "case 2"], ["proof (state)\nthis:\n  0 < k\n\ngoal (3 subgoals):\n 1. 0 < k \\<Longrightarrow> [a ^ (2 ^ (k - 1) * m) \\<noteq> 1] (mod n)\n 2. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 3. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "from *"], ["proof (chain)\npicking this:\n  a ^ (n - 1) = (a ^ (2 ^ (k - 1) * m))\\<^sup>2", "show ?case"], ["proof (prove)\nusing this:\n  a ^ (n - 1) = (a ^ (2 ^ (k - 1) * m))\\<^sup>2\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (k - 1) * m) \\<noteq> 1] (mod n)", "using n \\<open>[a^(n-1) \\<noteq> 1] (mod n)\\<close> and square_one_cong_one"], ["proof (prove)\nusing this:\n  a ^ (n - 1) = (a ^ (2 ^ (k - 1) * m))\\<^sup>2\n  n - 1 = 2 ^ k * m\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n  [?x = 1::?'a] (mod ?n) \\<Longrightarrow> [?x\\<^sup>2 = 1::?'a] (mod ?n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (k - 1) * m) \\<noteq> 1] (mod n)", "by metis"], ["proof (state)\nthis:\n  [a ^ (2 ^ (k - 1) * m) \\<noteq> 1] (mod n)\n\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 2. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 2. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "case (step q)"], ["proof (state)\nthis:\n  i \\<le> q\n  q < k - 1\n  0 < k \\<Longrightarrow> [a ^ (2 ^ Suc q * m) \\<noteq> n - 1] (mod n)\n  0 < k \\<Longrightarrow> [a ^ (2 ^ Suc q * m) \\<noteq> 1] (mod n)\n\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 2. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "then"], ["proof (chain)\npicking this:\n  i \\<le> q\n  q < k - 1\n  0 < k \\<Longrightarrow> [a ^ (2 ^ Suc q * m) \\<noteq> n - 1] (mod n)\n  0 < k \\<Longrightarrow> [a ^ (2 ^ Suc q * m) \\<noteq> 1] (mod n)", "have\n        IH2: \"[a ^ (2 ^ Suc q * m) \\<noteq> 1] (mod n)\""], ["proof (prove)\nusing this:\n  i \\<le> q\n  q < k - 1\n  0 < k \\<Longrightarrow> [a ^ (2 ^ Suc q * m) \\<noteq> n - 1] (mod n)\n  0 < k \\<Longrightarrow> [a ^ (2 ^ Suc q * m) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ Suc q * m) \\<noteq> 1] (mod n)", "using \\<open>0 < k\\<close>"], ["proof (prove)\nusing this:\n  i \\<le> q\n  q < k - 1\n  0 < k \\<Longrightarrow> [a ^ (2 ^ Suc q * m) \\<noteq> n - 1] (mod n)\n  0 < k \\<Longrightarrow> [a ^ (2 ^ Suc q * m) \\<noteq> 1] (mod n)\n  0 < k\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ Suc q * m) \\<noteq> 1] (mod n)", "by blast+"], ["proof (state)\nthis:\n  [a ^ (2 ^ Suc q * m) \\<noteq> 1] (mod n)\n\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 2. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "have * : \"a ^ (2 ^ Suc q * m) = (a ^ (2 ^ q * m))\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ (2 ^ Suc q * m) = (a ^ (2 ^ q * m))\\<^sup>2", "by (auto simp flip: power_even_eq simp add: algebra_simps)"], ["proof (state)\nthis:\n  a ^ (2 ^ Suc q * m) = (a ^ (2 ^ q * m))\\<^sup>2\n\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 2. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "case 1"], ["proof (state)\nthis:\n  0 < k\n\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> n - 1] (mod n)\n 2. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "from *"], ["proof (chain)\npicking this:\n  a ^ (2 ^ Suc q * m) = (a ^ (2 ^ q * m))\\<^sup>2", "show ?case"], ["proof (prove)\nusing this:\n  a ^ (2 ^ Suc q * m) = (a ^ (2 ^ q * m))\\<^sup>2\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ q * m) \\<noteq> n - 1] (mod n)", "using IH2 and square_minus_one_cong_one[OF \\<open>1 < n\\<close>]"], ["proof (prove)\nusing this:\n  a ^ (2 ^ Suc q * m) = (a ^ (2 ^ q * m))\\<^sup>2\n  [a ^ (2 ^ Suc q * m) \\<noteq> 1] (mod n)\n  [?x = n - 1] (mod n) \\<Longrightarrow> [?x\\<^sup>2 = 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ q * m) \\<noteq> n - 1] (mod n)", "by auto"], ["proof (state)\nthis:\n  [a ^ (2 ^ q * m) \\<noteq> n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "case 2"], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>i \\<le> na; na < k - 1;\n        0 < k \\<Longrightarrow>\n        [a ^ (2 ^ Suc na * m) \\<noteq> n - 1] (mod n);\n        0 < k \\<Longrightarrow> [a ^ (2 ^ Suc na * m) \\<noteq> 1] (mod n);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> [a ^ (2 ^ na * m) \\<noteq> 1] (mod n)", "from *"], ["proof (chain)\npicking this:\n  a ^ (2 ^ Suc q * m) = (a ^ (2 ^ q * m))\\<^sup>2", "show ?case"], ["proof (prove)\nusing this:\n  a ^ (2 ^ Suc q * m) = (a ^ (2 ^ q * m))\\<^sup>2\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ q * m) \\<noteq> 1] (mod n)", "using IH2 and square_one_cong_one"], ["proof (prove)\nusing this:\n  a ^ (2 ^ Suc q * m) = (a ^ (2 ^ q * m))\\<^sup>2\n  [a ^ (2 ^ Suc q * m) \\<noteq> 1] (mod n)\n  [?x = 1::?'a] (mod ?n) \\<Longrightarrow> [?x\\<^sup>2 = 1::?'a] (mod ?n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ q * m) \\<noteq> 1] (mod n)", "by metis"], ["proof (state)\nthis:\n  [a ^ (2 ^ q * m) \\<noteq> 1] (mod n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [a ^ (2 ^ i * m) \\<noteq> n - 1] (mod n)\n  [a ^ (2 ^ i * m) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "}"], ["proof (state)\nthis:\n  ?i2 \\<in> {0..<k} \\<Longrightarrow>\n  [a ^ (2 ^ ?i2 * m) \\<noteq> n - 1] (mod n)\n  ?i2 \\<in> {0..<k} \\<Longrightarrow> [a ^ (2 ^ ?i2 * m) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "ultimately"], ["proof (chain)\npicking this:\n  odd m\n  n - 1 = 2 ^ k * m\n  [a ^ m \\<noteq> 1] (mod n)\n  ?i2 \\<in> {0..<k} \\<Longrightarrow>\n  [a ^ (2 ^ ?i2 * m) \\<noteq> n - 1] (mod n)\n  ?i2 \\<in> {0..<k} \\<Longrightarrow> [a ^ (2 ^ ?i2 * m) \\<noteq> 1] (mod n)", "show ?thesis"], ["proof (prove)\nusing this:\n  odd m\n  n - 1 = 2 ^ k * m\n  [a ^ m \\<noteq> 1] (mod n)\n  ?i2 \\<in> {0..<k} \\<Longrightarrow>\n  [a ^ (2 ^ ?i2 * m) \\<noteq> n - 1] (mod n)\n  ?i2 \\<in> {0..<k} \\<Longrightarrow> [a ^ (2 ^ ?i2 * m) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. local.strong_fermat_witness", "unfolding strong_fermat_witness_iff"], ["proof (prove)\nusing this:\n  odd m\n  n - 1 = 2 ^ k * m\n  [a ^ m \\<noteq> 1] (mod n)\n  ?i2 \\<in> {0..<k} \\<Longrightarrow>\n  [a ^ (2 ^ ?i2 * m) \\<noteq> n - 1] (mod n)\n  ?i2 \\<in> {0..<k} \\<Longrightarrow> [a ^ (2 ^ ?i2 * m) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. \\<exists>k m.\n       odd m \\<and>\n       n - 1 = 2 ^ k * m \\<and>\n       [a ^ m \\<noteq> 1] (mod n) \\<and>\n       (\\<forall>i\\<in>{0..<k}. [a ^ (2 ^ i * m) \\<noteq> n - 1] (mod n))", "by blast"], ["proof (state)\nthis:\n  local.strong_fermat_witness\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary strong_fermat_liar_imp_fermat_liar:\n  assumes \"1 < n\" \"strong_fermat_liar\"\n  shows  \"fermat_liar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.fermat_liar", "using fermat_witness_imp_strong_fermat_witness assms\n    and fermat_liar_witness_of_composition strong_fermat_witness_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>1 < n; local.fermat_witness\\<rbrakk>\n  \\<Longrightarrow> local.strong_fermat_witness\n  1 < n\n  local.strong_fermat_liar\n  local.fermat_liar \\<noteq> local.fermat_witness\n  local.fermat_witness \\<noteq> local.fermat_liar\n  local.strong_fermat_witness = (\\<not> local.strong_fermat_liar)\n\ngoal (1 subgoal):\n 1. local.fermat_liar", "by blast"], ["", "lemma euler_liar_is_fermat_liar:\n  assumes \"1 < n\" \"euler_liar a n\" \"coprime a n\" \"odd n\"\n  shows \"fermat_liar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.fermat_liar", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.fermat_liar", "have \"[Jacobi a n = a ^ ((n - 1) div 2)] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [Jacobi (int a) (int n) = int (a ^ ((n - 1) div 2))] (mod int n)", "using \\<open>euler_liar a n\\<close>"], ["proof (prove)\nusing this:\n  euler_liar (int a) n\n\ngoal (1 subgoal):\n 1. [Jacobi (int a) (int n) = int (a ^ ((n - 1) div 2))] (mod int n)", "unfolding euler_witness_def"], ["proof (prove)\nusing this:\n  \\<not> [Jacobi (int a)\n           (int n) \\<noteq> int a ^ ((n - 1) div 2)] (mod int n)\n\ngoal (1 subgoal):\n 1. [Jacobi (int a) (int n) = int (a ^ ((n - 1) div 2))] (mod int n)", "by simp"], ["proof (state)\nthis:\n  [Jacobi (int a) (int n) = int (a ^ ((n - 1) div 2))] (mod int n)\n\ngoal (1 subgoal):\n 1. local.fermat_liar", "hence \"[(Jacobi a n)^2 = (a ^ ((n - 1) div 2))^2] (mod n)\""], ["proof (prove)\nusing this:\n  [Jacobi (int a) (int n) = int (a ^ ((n - 1) div 2))] (mod int n)\n\ngoal (1 subgoal):\n 1. [(Jacobi (int a)\n       (int n))\\<^sup>2 = int ((a ^ ((n - 1) div 2))\\<^sup>2)] (mod int n)", "by (simp add: cong_pow)"], ["proof (state)\nthis:\n  [(Jacobi (int a)\n     (int n))\\<^sup>2 = int ((a ^ ((n - 1) div 2))\\<^sup>2)] (mod int n)\n\ngoal (1 subgoal):\n 1. local.fermat_liar", "moreover"], ["proof (state)\nthis:\n  [(Jacobi (int a)\n     (int n))\\<^sup>2 = int ((a ^ ((n - 1) div 2))\\<^sup>2)] (mod int n)\n\ngoal (1 subgoal):\n 1. local.fermat_liar", "have \"Jacobi a n \\<in> {1, -1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Jacobi (int a) (int n) \\<in> {1, - 1}", "using Jacobi_values Jacobi_eq_0_iff_not_coprime[of n] \\<open>coprime a n\\<close> \\<open>1 < n\\<close>"], ["proof (prove)\nusing this:\n  Jacobi ?p ?q \\<in> {1, - 1, 0}\n  \\<lbrakk>int n \\<noteq> 0; int n \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> (Jacobi ?n (int n) = 0) = (\\<not> coprime ?n (int n))\n  coprime a n\n  1 < n\n\ngoal (1 subgoal):\n 1. Jacobi (int a) (int n) \\<in> {1, - 1}", "by force"], ["proof (state)\nthis:\n  Jacobi (int a) (int n) \\<in> {1, - 1}\n\ngoal (1 subgoal):\n 1. local.fermat_liar", "ultimately"], ["proof (chain)\npicking this:\n  [(Jacobi (int a)\n     (int n))\\<^sup>2 = int ((a ^ ((n - 1) div 2))\\<^sup>2)] (mod int n)\n  Jacobi (int a) (int n) \\<in> {1, - 1}", "have \"[1 = (a ^ ((n - 1) div 2))^2] (mod n)\""], ["proof (prove)\nusing this:\n  [(Jacobi (int a)\n     (int n))\\<^sup>2 = int ((a ^ ((n - 1) div 2))\\<^sup>2)] (mod int n)\n  Jacobi (int a) (int n) \\<in> {1, - 1}\n\ngoal (1 subgoal):\n 1. [1 = (a ^ ((n - 1) div 2))\\<^sup>2] (mod n)", "using cong_int_iff"], ["proof (prove)\nusing this:\n  [(Jacobi (int a)\n     (int n))\\<^sup>2 = int ((a ^ ((n - 1) div 2))\\<^sup>2)] (mod int n)\n  Jacobi (int a) (int n) \\<in> {1, - 1}\n  [int ?m = int ?q] (mod int ?n) = [?m = ?q] (mod ?n)\n\ngoal (1 subgoal):\n 1. [1 = (a ^ ((n - 1) div 2))\\<^sup>2] (mod n)", "by force"], ["proof (state)\nthis:\n  [1 = (a ^ ((n - 1) div 2))\\<^sup>2] (mod n)\n\ngoal (1 subgoal):\n 1. local.fermat_liar", "also"], ["proof (state)\nthis:\n  [1 = (a ^ ((n - 1) div 2))\\<^sup>2] (mod n)\n\ngoal (1 subgoal):\n 1. local.fermat_liar", "have \"(a ^ ((n - 1) div 2))^2 = a ^ (n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a ^ ((n - 1) div 2))\\<^sup>2 = a ^ (n - 1)", "using \\<open>odd n\\<close>"], ["proof (prove)\nusing this:\n  odd n\n\ngoal (1 subgoal):\n 1. (a ^ ((n - 1) div 2))\\<^sup>2 = a ^ (n - 1)", "by (simp flip: power_mult)"], ["proof (state)\nthis:\n  (a ^ ((n - 1) div 2))\\<^sup>2 = a ^ (n - 1)\n\ngoal (1 subgoal):\n 1. local.fermat_liar", "finally"], ["proof (chain)\npicking this:\n  [1 = a ^ (n - 1)] (mod n)", "show ?thesis"], ["proof (prove)\nusing this:\n  [1 = a ^ (n - 1)] (mod n)\n\ngoal (1 subgoal):\n 1. local.fermat_liar", "using cong_sym fermat_liar_def"], ["proof (prove)\nusing this:\n  [1 = a ^ (n - 1)] (mod n)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> [?c = ?b] (mod ?a)\n  local.fermat_liar = [a ^ (n - 1) = 1] (mod n)\n\ngoal (1 subgoal):\n 1. local.fermat_liar", "by blast"], ["proof (state)\nthis:\n  local.fermat_liar\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary fermat_witness_is_euler_witness:\n  assumes \"1 < n\" \"fermat_witness\" \"coprime a n\" \"odd n\"\n  shows \"euler_witness a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. euler_witness (int a) n", "using assms euler_liar_is_fermat_liar fermat_liar_witness_of_composition"], ["proof (prove)\nusing this:\n  1 < n\n  local.fermat_witness\n  coprime a n\n  odd n\n  \\<lbrakk>1 < n; euler_liar (int a) n; coprime a n; odd n\\<rbrakk>\n  \\<Longrightarrow> local.fermat_liar\n  local.fermat_liar \\<noteq> local.fermat_witness\n  local.fermat_witness \\<noteq> local.fermat_liar\n\ngoal (1 subgoal):\n 1. euler_witness (int a) n", "by blast"], ["", "end"], ["", "end"], ["", "lemma one_is_fermat_liar[simp]: \"1 < n \\<Longrightarrow> fermat_liar 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> fermat_liar 1 n", "using fermat_liar_def"], ["proof (prove)\nusing this:\n  fermat_liar ?a ?n = [?a ^ (?n - 1) = 1] (mod ?n)\n\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> fermat_liar 1 n", "by auto"], ["", "lemma one_is_strong_fermat_liar[simp]: \"1 < n \\<Longrightarrow> strong_fermat_liar 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> strong_fermat_liar 1 n", "using strong_fermat_liar_def"], ["proof (prove)\nusing this:\n  strong_fermat_liar ?a ?n =\n  (\\<forall>k m.\n      odd m \\<longrightarrow>\n      ?n - 1 = 2 ^ k * m \\<longrightarrow>\n      [?a ^ m = 1] (mod ?n) \\<or>\n      (\\<exists>i\\<in>{0..<k}. [?a ^ (2 ^ i * m) = ?n - 1] (mod ?n)))\n\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> strong_fermat_liar 1 n", "by auto"], ["", "lemma prime_imp_fermat_liar:\n  \"prime p \\<Longrightarrow> a \\<in> {1 ..< p} \\<Longrightarrow> fermat_liar a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; a \\<in> {1..<p}\\<rbrakk>\n    \\<Longrightarrow> fermat_liar a p", "unfolding fermat_liar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; a \\<in> {1..<p}\\<rbrakk>\n    \\<Longrightarrow> [a ^ (p - 1) = 1] (mod p)", "using fermat_theorem and nat_dvd_not_less"], ["proof (prove)\nusing this:\n  \\<lbrakk>prime ?p; \\<not> ?p dvd ?a\\<rbrakk>\n  \\<Longrightarrow> [?a ^ (?p - 1) = 1] (mod ?p)\n  \\<lbrakk>0 < ?m; ?m < ?n\\<rbrakk> \\<Longrightarrow> \\<not> ?n dvd ?m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; a \\<in> {1..<p}\\<rbrakk>\n    \\<Longrightarrow> [a ^ (p - 1) = 1] (mod p)", "by simp"], ["", "lemma not_Carmichael_numberD:\n  assumes \"\\<not>Carmichael_number n\" \"\\<not>prime n\"  and \"1 < n\"\n  shows \"\\<exists> a \\<in> {2 ..< n} . fermat_witness a n \\<and> coprime a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>{2..<n}. fermat_witness a n \\<and> coprime a n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>{2..<n}. fermat_witness a n \\<and> coprime a n", "obtain a where \"coprime a n\" \"[a^(n-1) \\<noteq> 1] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>coprime a n; [a ^ (n - 1) \\<noteq> 1] (mod n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<not> Carmichael_number n\n  \\<not> prime n\n  1 < n\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>coprime a n; [a ^ (n - 1) \\<noteq> 1] (mod n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Carmichael_number_def"], ["proof (prove)\nusing this:\n  \\<not> (1 < n \\<and>\n          \\<not> prime n \\<and>\n          (\\<forall>a.\n              coprime a n \\<longrightarrow> [a ^ (n - 1) = 1] (mod n)))\n  \\<not> prime n\n  1 < n\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>coprime a n; [a ^ (n - 1) \\<noteq> 1] (mod n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  coprime a n\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>{2..<n}. fermat_witness a n \\<and> coprime a n", "moreover"], ["proof (state)\nthis:\n  coprime a n\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>{2..<n}. fermat_witness a n \\<and> coprime a n", "from this and \\<open>1 < n\\<close>"], ["proof (chain)\npicking this:\n  coprime a n\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n  1 < n", "have \"a mod n \\<in> {1..<n}\""], ["proof (prove)\nusing this:\n  coprime a n\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n  1 < n\n\ngoal (1 subgoal):\n 1. a mod n \\<in> {1..<n}", "by (cases \"a = 0\") (auto intro! : gre1I_nat)"], ["proof (state)\nthis:\n  a mod n \\<in> {1..<n}\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>{2..<n}. fermat_witness a n \\<and> coprime a n", "ultimately"], ["proof (chain)\npicking this:\n  coprime a n\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n  a mod n \\<in> {1..<n}", "have \"a mod n \\<in> {1 ..< n}\"  \"coprime (a mod n) n\" \"[(a mod n)^(n-1) \\<noteq> 1] (mod n)\""], ["proof (prove)\nusing this:\n  coprime a n\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n  a mod n \\<in> {1..<n}\n\ngoal (1 subgoal):\n 1. a mod n \\<in> {1..<n} &&&\n    coprime (a mod n) n &&& [(a mod n) ^ (n - 1) \\<noteq> 1] (mod n)", "using \\<open>1 < n\\<close>"], ["proof (prove)\nusing this:\n  coprime a n\n  [a ^ (n - 1) \\<noteq> 1] (mod n)\n  a mod n \\<in> {1..<n}\n  1 < n\n\ngoal (1 subgoal):\n 1. a mod n \\<in> {1..<n} &&&\n    coprime (a mod n) n &&& [(a mod n) ^ (n - 1) \\<noteq> 1] (mod n)", "by simp_all"], ["proof (state)\nthis:\n  a mod n \\<in> {1..<n}\n  coprime (a mod n) n\n  [(a mod n) ^ (n - 1) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>{2..<n}. fermat_witness a n \\<and> coprime a n", "hence \"fermat_witness (a mod n) n\""], ["proof (prove)\nusing this:\n  a mod n \\<in> {1..<n}\n  coprime (a mod n) n\n  [(a mod n) ^ (n - 1) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. fermat_witness (a mod n) n", "using fermat_witness_def"], ["proof (prove)\nusing this:\n  a mod n \\<in> {1..<n}\n  coprime (a mod n) n\n  [(a mod n) ^ (n - 1) \\<noteq> 1] (mod n)\n  fermat_witness ?a ?n = [?a ^ (?n - 1) \\<noteq> 1] (mod ?n)\n\ngoal (1 subgoal):\n 1. fermat_witness (a mod n) n", "by blast"], ["proof (state)\nthis:\n  fermat_witness (a mod n) n\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>{2..<n}. fermat_witness a n \\<and> coprime a n", "hence \"1 \\<noteq> (a mod n)\""], ["proof (prove)\nusing this:\n  fermat_witness (a mod n) n\n\ngoal (1 subgoal):\n 1. 1 \\<noteq> a mod n", "using \\<open>1 < n\\<close> \\<open>(a mod n) \\<in> {1 ..< n}\\<close> and one_is_fermat_liar fermat_liar_witness_of_composition(1)"], ["proof (prove)\nusing this:\n  fermat_witness (a mod n) n\n  1 < n\n  a mod n \\<in> {1..<n}\n  1 < ?n \\<Longrightarrow> fermat_liar 1 ?n\n  fermat_liar ?a ?n \\<noteq> fermat_witness ?a ?n\n\ngoal (1 subgoal):\n 1. 1 \\<noteq> a mod n", "by metis"], ["proof (state)\nthis:\n  1 \\<noteq> a mod n\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>{2..<n}. fermat_witness a n \\<and> coprime a n", "thus ?thesis"], ["proof (prove)\nusing this:\n  1 \\<noteq> a mod n\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>{2..<n}. fermat_witness a n \\<and> coprime a n", "using \\<open>fermat_witness (a mod n) n\\<close> \\<open>coprime (a mod n) n\\<close> \\<open>(a mod n) \\<in> {1..<n}\\<close>"], ["proof (prove)\nusing this:\n  1 \\<noteq> a mod n\n  fermat_witness (a mod n) n\n  coprime (a mod n) n\n  a mod n \\<in> {1..<n}\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>{2..<n}. fermat_witness a n \\<and> coprime a n", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>a\\<in>{2..<n}. fermat_witness a n \\<and> coprime a n\n\ngoal:\nNo subgoals!", "qed"], ["", "proposition prime_imp_strong_fermat_witness:\n  fixes p :: nat\n  assumes \"prime p\" \"2 < p\" \"a \\<in> {1 ..< p}\"\n  shows \"strong_fermat_liar a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "fix k m :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "define j where \"j \\<equiv> LEAST k. [a ^ (2^k * m) = 1] (mod p)\""], ["proof (state)\nthis:\n  j \\<equiv> LEAST k. [a ^ (2 ^ k * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "have \"[a ^ (p - 1) = 1] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (p - 1) = 1] (mod p)", "using fermat_theorem[OF \\<open>prime p\\<close>, of a] \\<open>a \\<in> {1 ..< p}\\<close>"], ["proof (prove)\nusing this:\n  \\<not> p dvd a \\<Longrightarrow> [a ^ (p - 1) = 1] (mod p)\n  a \\<in> {1..<p}\n\ngoal (1 subgoal):\n 1. [a ^ (p - 1) = 1] (mod p)", "by force"], ["proof (state)\nthis:\n  [a ^ (p - 1) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "moreover"], ["proof (state)\nthis:\n  [a ^ (p - 1) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "assume \"odd m\" and n: \"p - 1 = 2 ^ k * m\""], ["proof (state)\nthis:\n  odd m\n  p - 1 = 2 ^ k * m\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "ultimately"], ["proof (chain)\npicking this:\n  [a ^ (p - 1) = 1] (mod p)\n  odd m\n  p - 1 = 2 ^ k * m", "have \"[a ^ (2 ^ k * m) = 1] (mod p)\""], ["proof (prove)\nusing this:\n  [a ^ (p - 1) = 1] (mod p)\n  odd m\n  p - 1 = 2 ^ k * m\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ k * m) = 1] (mod p)", "by simp"], ["proof (state)\nthis:\n  [a ^ (2 ^ k * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "moreover"], ["proof (state)\nthis:\n  [a ^ (2 ^ k * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "assume \"[a ^ m \\<noteq> 1] (mod p)\""], ["proof (state)\nthis:\n  [a ^ m \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "then"], ["proof (chain)\npicking this:\n  [a ^ m \\<noteq> 1] (mod p)", "have \"0 < x\" if \"[a ^ (2 ^ x * m) = 1] (mod p)\" for x"], ["proof (prove)\nusing this:\n  [a ^ m \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. 0 < x", "using that"], ["proof (prove)\nusing this:\n  [a ^ m \\<noteq> 1] (mod p)\n  [a ^ (2 ^ x * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. 0 < x", "by (auto intro: gr0I)"], ["proof (state)\nthis:\n  [a ^ (2 ^ ?x * m) = 1] (mod p) \\<Longrightarrow> 0 < ?x\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "ultimately"], ["proof (chain)\npicking this:\n  [a ^ (2 ^ k * m) = 1] (mod p)\n  [a ^ (2 ^ ?x * m) = 1] (mod p) \\<Longrightarrow> 0 < ?x", "have \"0 < j\" \"j \\<le> k\" \"[a ^ (2 ^ j * m) = 1] (mod p)\""], ["proof (prove)\nusing this:\n  [a ^ (2 ^ k * m) = 1] (mod p)\n  [a ^ (2 ^ ?x * m) = 1] (mod p) \\<Longrightarrow> 0 < ?x\n\ngoal (1 subgoal):\n 1. 0 < j &&& j \\<le> k &&& [a ^ (2 ^ j * m) = 1] (mod p)", "using LeastI2[of _ k \"(<) 0\"] Least_le[of _ k] LeastI[of _ k]"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ k * m) = 1] (mod p)\n  [a ^ (2 ^ ?x * m) = 1] (mod p) \\<Longrightarrow> 0 < ?x\n  \\<lbrakk>?P k; \\<And>x. ?P x \\<Longrightarrow> 0 < x\\<rbrakk>\n  \\<Longrightarrow> 0 < Least ?P\n  ?P k \\<Longrightarrow> (LEAST x. ?P x) \\<le> k\n  ?P k \\<Longrightarrow> ?P (LEAST x. ?P x)\n\ngoal (1 subgoal):\n 1. 0 < j &&& j \\<le> k &&& [a ^ (2 ^ j * m) = 1] (mod p)", "by (simp_all add: j_def)"], ["proof (state)\nthis:\n  0 < j\n  j \\<le> k\n  [a ^ (2 ^ j * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "moreover"], ["proof (state)\nthis:\n  0 < j\n  j \\<le> k\n  [a ^ (2 ^ j * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "from this"], ["proof (chain)\npicking this:\n  0 < j\n  j \\<le> k\n  [a ^ (2 ^ j * m) = 1] (mod p)", "have \"[a ^ (2^(j-1) * m) \\<noteq> 1] (mod p)\""], ["proof (prove)\nusing this:\n  0 < j\n  j \\<le> k\n  [a ^ (2 ^ j * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)", "using not_less_Least[of \"j - 1\" \"\\<lambda>k. [a ^ (2^k * m) = 1] (mod p)\"]"], ["proof (prove)\nusing this:\n  0 < j\n  j \\<le> k\n  [a ^ (2 ^ j * m) = 1] (mod p)\n  j - 1 < (LEAST x. [a ^ (2 ^ x * m) = 1] (mod p)) \\<Longrightarrow>\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)", "unfolding j_def"], ["proof (prove)\nusing this:\n  0 < (LEAST k. [a ^ (2 ^ k * m) = 1] (mod p))\n  (LEAST k. [a ^ (2 ^ k * m) = 1] (mod p)) \\<le> k\n  [a ^ (2 ^ (LEAST k. [a ^ (2 ^ k * m) = 1] (mod p)) * m) = 1] (mod p)\n  (LEAST k. [a ^ (2 ^ k * m) = 1] (mod p)) - 1\n  < (LEAST x. [a ^ (2 ^ x * m) = 1] (mod p)) \\<Longrightarrow>\n  [a ^\n   (2 ^ ((LEAST k. [a ^ (2 ^ k * m) = 1] (mod p)) - 1) *\n    m) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^\n     (2 ^ ((LEAST k. [a ^ (2 ^ k * m) = 1] (mod p)) - 1) *\n      m) \\<noteq> 1] (mod p)", "by simp"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "moreover"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "have \"a ^ (2 ^ (j - 1) * m) * a ^ (2 ^ (j - 1) * m) = a ^ (2 ^ j * m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ (2 ^ (j - 1) * m) * a ^ (2 ^ (j - 1) * m) = a ^ (2 ^ j * m)", "using \\<open>0 < j\\<close>"], ["proof (prove)\nusing this:\n  0 < j\n\ngoal (1 subgoal):\n 1. a ^ (2 ^ (j - 1) * m) * a ^ (2 ^ (j - 1) * m) = a ^ (2 ^ j * m)", "by (simp add: algebra_simps semiring_normalization_rules(27) flip: power2_eq_square power_even_eq)"], ["proof (state)\nthis:\n  a ^ (2 ^ (j - 1) * m) * a ^ (2 ^ (j - 1) * m) = a ^ (2 ^ j * m)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "ultimately"], ["proof (chain)\npicking this:\n  0 < j\n  j \\<le> k\n  [a ^ (2 ^ j * m) = 1] (mod p)\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\n  a ^ (2 ^ (j - 1) * m) * a ^ (2 ^ (j - 1) * m) = a ^ (2 ^ j * m)", "have \"(j-1)\\<in>{0..<k} \" \"[a ^ (2 ^ (j-1) * m) = p - 1] (mod p)\""], ["proof (prove)\nusing this:\n  0 < j\n  j \\<le> k\n  [a ^ (2 ^ j * m) = 1] (mod p)\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\n  a ^ (2 ^ (j - 1) * m) * a ^ (2 ^ (j - 1) * m) = a ^ (2 ^ j * m)\n\ngoal (1 subgoal):\n 1. j - 1 \\<in> {0..<k} &&& [a ^ (2 ^ (j - 1) * m) = p - 1] (mod p)", "using cong_square_alt[OF \\<open>prime p\\<close>, of \"a ^ (2 ^ (j-1) * m)\"]"], ["proof (prove)\nusing this:\n  0 < j\n  j \\<le> k\n  [a ^ (2 ^ j * m) = 1] (mod p)\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\n  a ^ (2 ^ (j - 1) * m) * a ^ (2 ^ (j - 1) * m) = a ^ (2 ^ j * m)\n  [a ^ (2 ^ (j - 1) * m) *\n   a ^ (2 ^ (j - 1) * m) = 1] (mod p) \\<Longrightarrow>\n  [a ^ (2 ^ (j - 1) * m) = 1] (mod p) \\<or>\n  [a ^ (2 ^ (j - 1) * m) = p - 1] (mod p)\n\ngoal (1 subgoal):\n 1. j - 1 \\<in> {0..<k} &&& [a ^ (2 ^ (j - 1) * m) = p - 1] (mod p)", "by simp_all"], ["proof (state)\nthis:\n  j - 1 \\<in> {0..<k}\n  [a ^ (2 ^ (j - 1) * m) = p - 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "}"], ["proof (state)\nthis:\n  \\<lbrakk>odd ?m2; p - 1 = 2 ^ ?k2 * ?m2;\n   [a ^ ?m2 \\<noteq> 1] (mod p)\\<rbrakk>\n  \\<Longrightarrow> (LEAST k. [a ^ (2 ^ k * ?m2) = 1] (mod p)) - 1\n                    \\<in> {0..<?k2}\n  \\<lbrakk>odd ?m2; p - 1 = 2 ^ ?k2 * ?m2;\n   [a ^ ?m2 \\<noteq> 1] (mod p)\\<rbrakk>\n  \\<Longrightarrow> [a ^\n                     (2 ^ ((LEAST k. [a ^ (2 ^ k * ?m2) = 1] (mod p)) - 1) *\n                      ?m2) = p - 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>odd ?m2; p - 1 = 2 ^ ?k2 * ?m2;\n   [a ^ ?m2 \\<noteq> 1] (mod p)\\<rbrakk>\n  \\<Longrightarrow> (LEAST k. [a ^ (2 ^ k * ?m2) = 1] (mod p)) - 1\n                    \\<in> {0..<?k2}\n  \\<lbrakk>odd ?m2; p - 1 = 2 ^ ?k2 * ?m2;\n   [a ^ ?m2 \\<noteq> 1] (mod p)\\<rbrakk>\n  \\<Longrightarrow> [a ^\n                     (2 ^ ((LEAST k. [a ^ (2 ^ k * ?m2) = 1] (mod p)) - 1) *\n                      ?m2) = p - 1] (mod p)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>odd ?m2; p - 1 = 2 ^ ?k2 * ?m2;\n   [a ^ ?m2 \\<noteq> 1] (mod p)\\<rbrakk>\n  \\<Longrightarrow> (LEAST k. [a ^ (2 ^ k * ?m2) = 1] (mod p)) - 1\n                    \\<in> {0..<?k2}\n  \\<lbrakk>odd ?m2; p - 1 = 2 ^ ?k2 * ?m2;\n   [a ^ ?m2 \\<noteq> 1] (mod p)\\<rbrakk>\n  \\<Longrightarrow> [a ^\n                     (2 ^ ((LEAST k. [a ^ (2 ^ k * ?m2) = 1] (mod p)) - 1) *\n                      ?m2) = p - 1] (mod p)\n\ngoal (1 subgoal):\n 1. strong_fermat_liar a p", "unfolding strong_fermat_liar_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>odd ?m2; p - 1 = 2 ^ ?k2 * ?m2;\n   [a ^ ?m2 \\<noteq> 1] (mod p)\\<rbrakk>\n  \\<Longrightarrow> (LEAST k. [a ^ (2 ^ k * ?m2) = 1] (mod p)) - 1\n                    \\<in> {0..<?k2}\n  \\<lbrakk>odd ?m2; p - 1 = 2 ^ ?k2 * ?m2;\n   [a ^ ?m2 \\<noteq> 1] (mod p)\\<rbrakk>\n  \\<Longrightarrow> [a ^\n                     (2 ^ ((LEAST k. [a ^ (2 ^ k * ?m2) = 1] (mod p)) - 1) *\n                      ?m2) = p - 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<forall>k m.\n       odd m \\<longrightarrow>\n       p - 1 = 2 ^ k * m \\<longrightarrow>\n       [a ^ m = 1] (mod p) \\<or>\n       (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = p - 1] (mod p))", "by blast"], ["proof (state)\nthis:\n  strong_fermat_liar a p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ignore_one:\n  fixes P :: \"_ \\<Rightarrow> nat \\<Rightarrow> bool\"\n  assumes \"P 1 n\" \"1 < n\"\n  shows \"card {a \\<in> {1..<n}. P a n} = 1 + card {a. 2 \\<le> a \\<and> a < n \\<and> P a n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> {1..<n}. P a n} =\n    1 + card {a. 2 \\<le> a \\<and> a < n \\<and> P a n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {a \\<in> {1..<n}. P a n} =\n    1 + card {a. 2 \\<le> a \\<and> a < n \\<and> P a n}", "have \"insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n} = {a. 1 \\<le> a \\<and> a < n \\<and> P a n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n} =\n    {a. 1 \\<le> a \\<and> a < n \\<and> P a n}", "using assms"], ["proof (prove)\nusing this:\n  P 1 n\n  1 < n\n\ngoal (1 subgoal):\n 1. insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n} =\n    {a. 1 \\<le> a \\<and> a < n \\<and> P a n}", "by auto"], ["proof (state)\nthis:\n  insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n} =\n  {a. 1 \\<le> a \\<and> a < n \\<and> P a n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> {1..<n}. P a n} =\n    1 + card {a. 2 \\<le> a \\<and> a < n \\<and> P a n}", "moreover"], ["proof (state)\nthis:\n  insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n} =\n  {a. 1 \\<le> a \\<and> a < n \\<and> P a n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> {1..<n}. P a n} =\n    1 + card {a. 2 \\<le> a \\<and> a < n \\<and> P a n}", "have \"card (insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n}) = Suc (card {a. 2 \\<le> a \\<and> a < n \\<and> P a n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n}) =\n    Suc (card {a. 2 \\<le> a \\<and> a < n \\<and> P a n})", "using card_insert_disjoint"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?A; ?x \\<notin> ?A\\<rbrakk>\n  \\<Longrightarrow> card (insert ?x ?A) = Suc (card ?A)\n\ngoal (1 subgoal):\n 1. card (insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n}) =\n    Suc (card {a. 2 \\<le> a \\<and> a < n \\<and> P a n})", "by auto"], ["proof (state)\nthis:\n  card (insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n}) =\n  Suc (card {a. 2 \\<le> a \\<and> a < n \\<and> P a n})\n\ngoal (1 subgoal):\n 1. card {a \\<in> {1..<n}. P a n} =\n    1 + card {a. 2 \\<le> a \\<and> a < n \\<and> P a n}", "ultimately"], ["proof (chain)\npicking this:\n  insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n} =\n  {a. 1 \\<le> a \\<and> a < n \\<and> P a n}\n  card (insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n}) =\n  Suc (card {a. 2 \\<le> a \\<and> a < n \\<and> P a n})", "show ?thesis"], ["proof (prove)\nusing this:\n  insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n} =\n  {a. 1 \\<le> a \\<and> a < n \\<and> P a n}\n  card (insert 1 {a. 2 \\<le> a \\<and> a < n \\<and> P a n}) =\n  Suc (card {a. 2 \\<le> a \\<and> a < n \\<and> P a n})\n\ngoal (1 subgoal):\n 1. card {a \\<in> {1..<n}. P a n} =\n    1 + card {a. 2 \\<le> a \\<and> a < n \\<and> P a n}", "by force"], ["proof (state)\nthis:\n  card {a \\<in> {1..<n}. P a n} =\n  1 + card {a. 2 \\<le> a \\<and> a < n \\<and> P a n}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Proofs in the following section are inspired by \\cite{Cornwell, MillerRabinTest, lecture_notes}.\\<close>"], ["", "proposition not_Carmichael_number_imp_card_fermat_witness_bound:\n  fixes n :: nat\n  assumes \"\\<not>prime n\" \"\\<not>Carmichael_number n\" \"odd n\" \"1 < n\"\n  shows \"(n-1) div 2 < card {a \\<in> {1 ..< n}. fermat_witness a n}\"\n    and \"(card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n}) < real (n - 2) / 2\"\n    and \"(card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n}) < real (n - 2) / 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n} &&&\n    real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2 &&&\n    real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "define G where \"G = Residues_Mult n\""], ["proof (state)\nthis:\n  G = Residues_Mult n\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "interpret residues_mult_nat n G"], ["proof (prove)\ngoal (1 subgoal):\n 1. residues_mult_nat n &&& G \\<equiv> Residues_Mult n", "by unfold_locales (use \\<open>n > 1\\<close> in \\<open>simp_all only: G_def\\<close>)"], ["proof (state)\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "define h where \"h \\<equiv> \\<lambda>a. a ^ (n - 1) mod n\""], ["proof (state)\nthis:\n  h \\<equiv> \\<lambda>a. a ^ (n - 1) mod n\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "define ker where \"ker = kernel G (G\\<lparr>carrier := h ` carrier G\\<rparr>) h\""], ["proof (state)\nthis:\n  ker = kernel G (G\\<lparr>carrier := h ` carrier G\\<rparr>) h\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"finite ker\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ker", "by (auto simp: ker_def kernel_def)"], ["proof (state)\nthis:\n  finite ker\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "moreover"], ["proof (state)\nthis:\n  finite ker\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"1 \\<in> ker\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<in> ker", "using \\<open>n > 1\\<close>"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. 1 \\<in> ker", "by (auto simp: ker_def kernel_def h_def)"], ["proof (state)\nthis:\n  1 \\<in> ker\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "ultimately"], ["proof (chain)\npicking this:\n  finite ker\n  1 \\<in> ker", "have [simp]: \"card ker > 0\""], ["proof (prove)\nusing this:\n  finite ker\n  1 \\<in> ker\n\ngoal (1 subgoal):\n 1. 0 < card ker", "by (subst card_gt_0_iff) (auto simp: ker_def kernel_def h_def)"], ["proof (state)\nthis:\n  0 < card ker\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have totatives_eq: \"totatives n = {k\\<in>{1..<n}. coprime k n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. totatives n = {k \\<in> {1..<n}. coprime k n}", "using totatives_less[of _ n] \\<open>n > 1\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> totatives n; 1 < n\\<rbrakk> \\<Longrightarrow> ?x < n\n  1 < n\n\ngoal (1 subgoal):\n 1. totatives n = {k \\<in> {1..<n}. coprime k n}", "by (force simp: totatives_def)"], ["proof (state)\nthis:\n  totatives n = {k \\<in> {1..<n}. coprime k n}\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have ker_altdef: \"ker = {a \\<in> {1..<n}. fermat_liar a n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ker = {a \\<in> {1..<n}. fermat_liar a n}", "unfolding ker_def fermat_liar_def carrier_eq kernel_def totatives_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> {k \\<in> {1..<n}. coprime k n}.\n     h x =\n     \\<one>\\<^bsub>G\\<lparr>carrier := h ` {k \\<in> {1..<n}. coprime k n}\\<rparr>\\<^esub>} =\n    {a \\<in> {1..<n}. [a ^ (n - 1) = 1] (mod n)}", "using \\<open>n > 1\\<close>"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. {x \\<in> {k \\<in> {1..<n}. coprime k n}.\n     h x =\n     \\<one>\\<^bsub>G\\<lparr>carrier := h ` {k \\<in> {1..<n}. coprime k n}\\<rparr>\\<^esub>} =\n    {a \\<in> {1..<n}. [a ^ (n - 1) = 1] (mod n)}", "by (force simp: h_def cong_def intro: coprimeI_power_mod)"], ["proof (state)\nthis:\n  ker = {a \\<in> {1..<n}. fermat_liar a n}\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have h_is_hom: \"h \\<in> hom G G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<in> hom G G", "unfolding hom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<in> {h \\<in> carrier G \\<rightarrow> carrier G.\n             \\<forall>x\\<in>carrier G.\n                \\<forall>y\\<in>carrier G.\n                   h (x \\<otimes>\\<^bsub>G\\<^esub> y) =\n                   h x \\<otimes>\\<^bsub>G\\<^esub> h y}", "using nat_pow_closed"], ["proof (prove)\nusing this:\n  ?x \\<in> carrier G \\<Longrightarrow>\n  ?x [^]\\<^bsub>G\\<^esub> ?n \\<in> carrier G\n\ngoal (1 subgoal):\n 1. h \\<in> {h \\<in> carrier G \\<rightarrow> carrier G.\n             \\<forall>x\\<in>carrier G.\n                \\<forall>y\\<in>carrier G.\n                   h (x \\<otimes>\\<^bsub>G\\<^esub> y) =\n                   h x \\<otimes>\\<^bsub>G\\<^esub> h y}", "by (auto simp: h_def power_mult_distrib mod_simps)"], ["proof (state)\nthis:\n  h \\<in> hom G G\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "then"], ["proof (chain)\npicking this:\n  h \\<in> hom G G", "interpret h: group_hom G G h"], ["proof (prove)\nusing this:\n  h \\<in> hom G G\n\ngoal (1 subgoal):\n 1. group_hom G G h", "by unfold_locales"], ["proof (state)\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "obtain a where a: \"a \\<in> {2..<n}\" \"fermat_witness a n\" \"coprime a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> {2..<n}; fermat_witness a n; coprime a n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms power_one not_Carmichael_numberD"], ["proof (prove)\nusing this:\n  \\<not> prime n\n  \\<not> Carmichael_number n\n  odd n\n  1 < n\n  (1::?'a) ^ ?n = (1::?'a)\n  \\<lbrakk>\\<not> Carmichael_number ?n; \\<not> prime ?n; 1 < ?n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a\\<in>{2..<?n}.\n                       fermat_witness a ?n \\<and> coprime a ?n\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> {2..<n}; fermat_witness a n; coprime a n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<in> {2..<n}\n  fermat_witness a n\n  coprime a n\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"h a \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h a \\<noteq> 1", "using a"], ["proof (prove)\nusing this:\n  a \\<in> {2..<n}\n  fermat_witness a n\n  coprime a n\n\ngoal (1 subgoal):\n 1. h a \\<noteq> 1", "by (auto simp: fermat_witness_def cong_def h_def)"], ["proof (state)\nthis:\n  h a \\<noteq> 1\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "hence \"2 \\<le> card {1, h a}\""], ["proof (prove)\nusing this:\n  h a \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 2 \\<le> card {1, h a}", "by simp"], ["proof (state)\nthis:\n  2 \\<le> card {1, h a}\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "also"], ["proof (state)\nthis:\n  2 \\<le> card {1, h a}\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"\\<dots> \\<le> card (h ` carrier G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {1, h a} \\<le> card (h ` carrier G)", "proof (intro card_mono; safe?)"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (h ` carrier G)\n 2. \\<And>x. 1 \\<in> h ` carrier G\n 3. \\<And>x. h a \\<in> h ` carrier G", "from \\<open>n > 1\\<close>"], ["proof (chain)\npicking this:\n  1 < n", "have \"1 = h 1\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. 1 = h 1", "by (simp add: h_def)"], ["proof (state)\nthis:\n  1 = h 1\n\ngoal (3 subgoals):\n 1. finite (h ` carrier G)\n 2. \\<And>x. 1 \\<in> h ` carrier G\n 3. \\<And>x. h a \\<in> h ` carrier G", "also"], ["proof (state)\nthis:\n  1 = h 1\n\ngoal (3 subgoals):\n 1. finite (h ` carrier G)\n 2. \\<And>x. 1 \\<in> h ` carrier G\n 3. \\<And>x. h a \\<in> h ` carrier G", "have \"\\<dots> \\<in> h ` carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h 1 \\<in> h ` carrier G", "by (intro imageI) (use \\<open>n > 1\\<close> in auto)"], ["proof (state)\nthis:\n  h 1 \\<in> h ` carrier G\n\ngoal (3 subgoals):\n 1. finite (h ` carrier G)\n 2. \\<And>x. 1 \\<in> h ` carrier G\n 3. \\<And>x. h a \\<in> h ` carrier G", "finally"], ["proof (chain)\npicking this:\n  1 \\<in> h ` carrier G", "show \"1 \\<in> h ` carrier G\""], ["proof (prove)\nusing this:\n  1 \\<in> h ` carrier G\n\ngoal (1 subgoal):\n 1. 1 \\<in> h ` carrier G", "."], ["proof (state)\nthis:\n  1 \\<in> h ` carrier G\n\ngoal (2 subgoals):\n 1. finite (h ` carrier G)\n 2. \\<And>x. h a \\<in> h ` carrier G", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (h ` carrier G)\n 2. \\<And>x. h a \\<in> h ` carrier G", "show \"h a \\<in> h ` carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h a \\<in> h ` carrier G", "using a"], ["proof (prove)\nusing this:\n  a \\<in> {2..<n}\n  fermat_witness a n\n  coprime a n\n\ngoal (1 subgoal):\n 1. h a \\<in> h ` carrier G", "by (intro imageI) (auto simp: totatives_def)"], ["proof (state)\nthis:\n  h a \\<in> h ` carrier G\n\ngoal (1 subgoal):\n 1. finite (h ` carrier G)", "qed auto"], ["proof (state)\nthis:\n  card {1, h a} \\<le> card (h ` carrier G)\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "also"], ["proof (state)\nthis:\n  card {1, h a} \\<le> card (h ` carrier G)\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"\\<dots> * card ker = order G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (h ` carrier G) * card ker = order G", "using homomorphism_thm_order[OF h.group_hom_axioms]"], ["proof (prove)\nusing this:\n  order (G\\<lparr>carrier := h ` carrier G\\<rparr>) *\n  card (kernel G (G\\<lparr>carrier := h ` carrier G\\<rparr>) h) =\n  order G\n\ngoal (1 subgoal):\n 1. card (h ` carrier G) * card ker = order G", "by (simp add: ker_def order_def)"], ["proof (state)\nthis:\n  card (h ` carrier G) * card ker = order G\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "also"], ["proof (state)\nthis:\n  card (h ` carrier G) * card ker = order G\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"order G < n - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order G < n - 1", "using totient_less_not_prime[of n] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> prime n; 1 < n\\<rbrakk>\n  \\<Longrightarrow> totient n < n - 1\n  \\<not> prime n\n  \\<not> Carmichael_number n\n  odd n\n  1 < n\n\ngoal (1 subgoal):\n 1. order G < n - 1", "by (simp add: order_eq)"], ["proof (state)\nthis:\n  order G < n - 1\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x * card ker \\<le> y * card ker) \\<Longrightarrow>\n  2 * card ker < n - 1", "have \"card ker < (n - 1) div 2\""], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x * card ker \\<le> y * card ker) \\<Longrightarrow>\n  2 * card ker < n - 1\n\ngoal (1 subgoal):\n 1. card ker < (n - 1) div 2", "using \\<open>odd n\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x * card ker \\<le> y * card ker) \\<Longrightarrow>\n  2 * card ker < n - 1\n  odd n\n\ngoal (1 subgoal):\n 1. card ker < (n - 1) div 2", "by (auto elim!: oddE)"], ["proof (state)\nthis:\n  card ker < (n - 1) div 2\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"(n - 1) div 2 < (n - 1) - card ker\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n - 1) div 2 < n - 1 - card ker", "using \\<open>card ker < (n - 1) div 2\\<close>"], ["proof (prove)\nusing this:\n  card ker < (n - 1) div 2\n\ngoal (1 subgoal):\n 1. (n - 1) div 2 < n - 1 - card ker", "by linarith"], ["proof (state)\nthis:\n  (n - 1) div 2 < n - 1 - card ker\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "also"], ["proof (state)\nthis:\n  (n - 1) div 2 < n - 1 - card ker\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"\\<dots> = card ({1..<n} - ker)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n - 1 - card ker = card ({1..<n} - ker)", "by (subst card_Diff_subset) (auto simp: ker_altdef)"], ["proof (state)\nthis:\n  n - 1 - card ker = card ({1..<n} - ker)\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "also"], ["proof (state)\nthis:\n  n - 1 - card ker = card ({1..<n} - ker)\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"{1..<n} - ker = {a \\<in> {1..<n}. fermat_witness a n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {1..<n} - ker = {a \\<in> {1..<n}. fermat_witness a n}", "by (auto simp: fermat_witness_def fermat_liar_def ker_altdef)"], ["proof (state)\nthis:\n  {1..<n} - ker = {a \\<in> {1..<n}. fermat_witness a n}\n\ngoal (3 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 3. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "finally"], ["proof (chain)\npicking this:\n  (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}", "show \"(n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\""], ["proof (prove)\nusing this:\n  (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n\ngoal (1 subgoal):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}", "."], ["proof (state)\nthis:\n  (n - 1) div 2 < card {a \\<in> {1..<n}. fermat_witness a n}\n\ngoal (2 subgoals):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n} \\<le> card (ker - {1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n}\n    \\<le> card (ker - {1})", "by (intro card_mono) (auto simp: ker_altdef fermat_liar_def fermat_witness_def)"], ["proof (state)\nthis:\n  card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n}\n  \\<le> card (ker - {1})\n\ngoal (2 subgoals):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "also"], ["proof (state)\nthis:\n  card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n}\n  \\<le> card (ker - {1})\n\ngoal (2 subgoals):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"\\<dots> = card ker - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (ker - {1}) = card ker - 1", "using \\<open>n > 1\\<close>"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. card (ker - {1}) = card ker - 1", "by (subst card_Diff_subset) (auto simp: ker_altdef fermat_liar_def)"], ["proof (state)\nthis:\n  card (ker - {1}) = card ker - 1\n\ngoal (2 subgoals):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "also"], ["proof (state)\nthis:\n  card (ker - {1}) = card ker - 1\n\ngoal (2 subgoals):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "have \"\\<dots> < (n - 2) div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ker - 1 < (n - 2) div 2", "using \\<open>card ker < (n - 1) div 2\\<close> \\<open>odd n\\<close> \\<open>card ker > 0\\<close>"], ["proof (prove)\nusing this:\n  card ker < (n - 1) div 2\n  odd n\n  0 < card ker\n\ngoal (1 subgoal):\n 1. card ker - 1 < (n - 2) div 2", "by linarith"], ["proof (state)\nthis:\n  card ker - 1 < (n - 2) div 2\n\ngoal (2 subgoals):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "finally"], ["proof (chain)\npicking this:\n  card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n} < (n - 2) div 2", "show *: \"card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n} < real (n - 2) / 2\""], ["proof (prove)\nusing this:\n  card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n} < (n - 2) div 2\n\ngoal (1 subgoal):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n    < real (n - 2) / 2", "by simp"], ["proof (state)\nthis:\n  real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n  < real (n - 2) / 2\n\ngoal (1 subgoal):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n} \\<le>\n          card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n}\n    \\<le> card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n}", "by (intro card_mono) (auto intro!: strong_fermat_liar_imp_fermat_liar)"], ["proof (state)\nthis:\n  card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n}\n  \\<le> card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n}\n\ngoal (1 subgoal):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "moreover"], ["proof (state)\nthis:\n  card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n}\n  \\<le> card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n}\n\ngoal (1 subgoal):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "note *"], ["proof (state)\nthis:\n  real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n  < real (n - 2) / 2\n\ngoal (1 subgoal):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "ultimately"], ["proof (chain)\npicking this:\n  card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n}\n  \\<le> card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n}\n  real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n  < real (n - 2) / 2", "show \"card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n} < real (n - 2) / 2\""], ["proof (prove)\nusing this:\n  card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n}\n  \\<le> card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n}\n  real (card {a. 2 \\<le> a \\<and> a < n \\<and> fermat_liar a n})\n  < real (n - 2) / 2\n\ngoal (1 subgoal):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "by simp"], ["proof (state)\nthis:\n  real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n  < real (n - 2) / 2\n\ngoal:\nNo subgoals!", "qed"], ["", "proposition Carmichael_number_imp_lower_bound_on_strong_fermat_witness:\n  fixes n :: nat\n  assumes Carmichael_number: \"Carmichael_number n\"\n  shows \"(n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\"\n    and \"real (card {a . 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n}) < real (n - 2) / 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n} &&&\n    real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "from assms"], ["proof (chain)\npicking this:\n  Carmichael_number n", "have \"n > 3\""], ["proof (prove)\nusing this:\n  Carmichael_number n\n\ngoal (1 subgoal):\n 1. 3 < n", "by (intro Carmichael_number_gt_3)"], ["proof (state)\nthis:\n  3 < n\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "hence \"n - 1 \\<noteq> 0\" \"\\<not>is_unit (2 :: nat)\""], ["proof (prove)\nusing this:\n  3 < n\n\ngoal (1 subgoal):\n 1. n - 1 \\<noteq> 0 &&& \\<not> is_unit 2", "by auto"], ["proof (state)\nthis:\n  n - 1 \\<noteq> 0\n  \\<not> is_unit 2\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "obtain k m where \"odd m\" and n_less: \"n - 1 = 2 ^ k * m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m k.\n        \\<lbrakk>odd m; n - 1 = 2 ^ k * m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using multiplicity_decompose'[OF \\<open>n - 1 \\<noteq> 0\\<close> \\<open>\\<not>is_unit (2::nat)\\<close>]"], ["proof (prove)\nusing this:\n  (\\<And>y.\n      \\<lbrakk>n - 1 = 2 ^ multiplicity 2 (n - 1) * y; odd y\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>m k.\n        \\<lbrakk>odd m; n - 1 = 2 ^ k * m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  odd m\n  n - 1 = 2 ^ k * m\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "obtain p l where n: \"n = p * l\" and \"prime p\" \"\\<not> p dvd l\" \"2 < l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p l.\n        \\<lbrakk>n = p * l; prime p; \\<not> p dvd l; 2 < l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Carmichael_number_imp_squarefree_alt[OF Carmichael_number]"], ["proof (prove)\nusing this:\n  \\<exists>p l. n = p * l \\<and> prime p \\<and> \\<not> p dvd l \\<and> 2 < l\n\ngoal (1 subgoal):\n 1. (\\<And>p l.\n        \\<lbrakk>n = p * l; prime p; \\<not> p dvd l; 2 < l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n = p * l\n  prime p\n  \\<not> p dvd l\n  2 < l\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "then"], ["proof (chain)\npicking this:\n  n = p * l\n  prime p\n  \\<not> p dvd l\n  2 < l", "have \"coprime p l\""], ["proof (prove)\nusing this:\n  n = p * l\n  prime p\n  \\<not> p dvd l\n  2 < l\n\ngoal (1 subgoal):\n 1. coprime p l", "using prime_imp_coprime_nat"], ["proof (prove)\nusing this:\n  n = p * l\n  prime p\n  \\<not> p dvd l\n  2 < l\n  \\<lbrakk>prime ?p; \\<not> ?p dvd ?n\\<rbrakk>\n  \\<Longrightarrow> coprime ?p ?n\n\ngoal (1 subgoal):\n 1. coprime p l", "by blast"], ["proof (state)\nthis:\n  coprime p l\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"odd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd n", "using Carmichael_number_odd Carmichael_number"], ["proof (prove)\nusing this:\n  Carmichael_number ?n \\<Longrightarrow> odd ?n\n  Carmichael_number n\n\ngoal (1 subgoal):\n 1. odd n", "by simp"], ["proof (state)\nthis:\n  odd n\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"2 < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 < n", "using \\<open>n > 3\\<close> \\<open>odd n\\<close>"], ["proof (prove)\nusing this:\n  3 < n\n  odd n\n\ngoal (1 subgoal):\n 1. 2 < n", "by presburger"], ["proof (state)\nthis:\n  2 < n\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "note prime_gt_1_nat[OF \\<open>prime p\\<close>]"], ["proof (state)\nthis:\n  1 < p\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"2 < p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 < p", "using \\<open>odd n\\<close> n \\<open>prime p\\<close> prime_ge_2_nat\n               and dvd_triv_left le_neq_implies_less"], ["proof (prove)\nusing this:\n  odd n\n  n = p * l\n  prime p\n  prime ?p \\<Longrightarrow> 2 \\<le> ?p\n  ?a dvd ?a * ?b\n  \\<lbrakk>?m \\<le> ?n; ?m \\<noteq> ?n\\<rbrakk> \\<Longrightarrow> ?m < ?n\n\ngoal (1 subgoal):\n 1. 2 < p", "by blast"], ["proof (state)\nthis:\n  2 < p\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "let ?P = \"\\<lambda> k. (\\<forall> a. coprime a p \\<longrightarrow> [a^(2^k * m) = 1] (mod p))\""], ["proof (state)\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "define j where \"j \\<equiv> LEAST k. ?P k\""], ["proof (state)\nthis:\n  j \\<equiv>\n  LEAST k.\n     \\<forall>a. coprime a p \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod p)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "define H where \"H \\<equiv> {a \\<in> {1..<n} . coprime a n \\<and> ([a^(2^(j-1) * m) = 1] (mod n) \\<or>\n                                                     [a^(2^(j-1) * m) = n - 1] (mod n))}\""], ["proof (state)\nthis:\n  H \\<equiv>\n  {a \\<in> {1..<n}.\n   coprime a n \\<and>\n   ([a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n    [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n))}\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have k : \"\\<forall>a. coprime a n \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a. coprime a n \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod n)", "using Carmichael_number"], ["proof (prove)\nusing this:\n  Carmichael_number n\n\ngoal (1 subgoal):\n 1. \\<forall>a. coprime a n \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod n)", "unfolding Carmichael_number_def n_less"], ["proof (prove)\nusing this:\n  1 < n \\<and>\n  \\<not> prime n \\<and>\n  (\\<forall>a. coprime a n \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod n))\n\ngoal (1 subgoal):\n 1. \\<forall>a. coprime a n \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod n)", "by blast"], ["proof (state)\nthis:\n  \\<forall>a. coprime a n \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "obtain k' m' where \"odd m'\" and p_less: \"p - 1 = 2 ^ k' * m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m' k'.\n        \\<lbrakk>odd m'; p - 1 = 2 ^ k' * m'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>1 < p\\<close>"], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. (\\<And>m' k'.\n        \\<lbrakk>odd m'; p - 1 = 2 ^ k' * m'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: multiplicity_decompose'[of \"(p-1)\" 2])"], ["proof (state)\nthis:\n  odd m'\n  p - 1 = 2 ^ k' * m'\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"p - 1 dvd n - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - 1 dvd n - 1", "using Carmichael_number_imp_dvd[OF Carmichael_number \\<open>prime p\\<close>] \\<open>n = p * l\\<close>"], ["proof (prove)\nusing this:\n  p dvd n \\<Longrightarrow> p - 1 dvd n - 1\n  n = p * l\n\ngoal (1 subgoal):\n 1. p - 1 dvd n - 1", "by fastforce"], ["proof (state)\nthis:\n  p - 1 dvd n - 1\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "then"], ["proof (chain)\npicking this:\n  p - 1 dvd n - 1", "have \"p - 1 dvd 2 ^ k' * m\""], ["proof (prove)\nusing this:\n  p - 1 dvd n - 1\n\ngoal (1 subgoal):\n 1. p - 1 dvd 2 ^ k' * m", "unfolding n_less p_less"], ["proof (prove)\nusing this:\n  2 ^ k' * m' dvd 2 ^ k * m\n\ngoal (1 subgoal):\n 1. 2 ^ k' * m' dvd 2 ^ k' * m", "using \\<open>odd m\\<close> \\<open>odd m'\\<close>\n      and coprime_dvd_mult_left_iff[of \"2^k'\" m \"2^k\"] coprime_dvd_mult_right_iff[of m' \"2^k\" m]"], ["proof (prove)\nusing this:\n  2 ^ k' * m' dvd 2 ^ k * m\n  odd m\n  odd m'\n  coprime (2 ^ k') m \\<Longrightarrow>\n  (2 ^ k' dvd 2 ^ k * m) = (2 ^ k' dvd 2 ^ k)\n  coprime m' (2 ^ k) \\<Longrightarrow> (m' dvd 2 ^ k * m) = (m' dvd m)\n\ngoal (1 subgoal):\n 1. 2 ^ k' * m' dvd 2 ^ k' * m", "by auto"], ["proof (state)\nthis:\n  p - 1 dvd 2 ^ k' * m\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have k': \"\\<forall>a. coprime a p \\<longrightarrow> [a ^ (2 ^ k' * m) = 1] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a. coprime a p \\<longrightarrow> [a ^ (2 ^ k' * m) = 1] (mod p)", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. coprime a p \\<Longrightarrow> [a ^ (2 ^ k' * m) = 1] (mod p)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. coprime a p \\<Longrightarrow> [a ^ (2 ^ k' * m) = 1] (mod p)", "assume \"coprime a p\""], ["proof (state)\nthis:\n  coprime a p\n\ngoal (1 subgoal):\n 1. \\<And>a. coprime a p \\<Longrightarrow> [a ^ (2 ^ k' * m) = 1] (mod p)", "hence \"\\<not> p dvd a\""], ["proof (prove)\nusing this:\n  coprime a p\n\ngoal (1 subgoal):\n 1. \\<not> p dvd a", "using p_coprime_right_nat[OF \\<open>prime p\\<close>]"], ["proof (prove)\nusing this:\n  coprime a p\n  coprime ?a p = (\\<not> p dvd ?a)\n\ngoal (1 subgoal):\n 1. \\<not> p dvd a", "by simp"], ["proof (state)\nthis:\n  \\<not> p dvd a\n\ngoal (1 subgoal):\n 1. \\<And>a. coprime a p \\<Longrightarrow> [a ^ (2 ^ k' * m) = 1] (mod p)", "have \"[a ^ (2 ^ k' * m') = 1] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ k' * m') = 1] (mod p)", "unfolding p_less[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (p - 1) = 1] (mod p)", "using fermat_theorem \\<open>prime p\\<close> \\<open>\\<not> p dvd a\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>prime ?p; \\<not> ?p dvd ?a\\<rbrakk>\n  \\<Longrightarrow> [?a ^ (?p - 1) = 1] (mod ?p)\n  prime p\n  \\<not> p dvd a\n\ngoal (1 subgoal):\n 1. [a ^ (p - 1) = 1] (mod p)", "by blast"], ["proof (state)\nthis:\n  [a ^ (2 ^ k' * m') = 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<And>a. coprime a p \\<Longrightarrow> [a ^ (2 ^ k' * m) = 1] (mod p)", "then"], ["proof (chain)\npicking this:\n  [a ^ (2 ^ k' * m') = 1] (mod p)", "show \"[a ^ (2 ^ k' * m) = 1] (mod p)\""], ["proof (prove)\nusing this:\n  [a ^ (2 ^ k' * m') = 1] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ k' * m) = 1] (mod p)", "using \\<open>p - 1 dvd 2 ^ k' * m\\<close>"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ k' * m') = 1] (mod p)\n  p - 1 dvd 2 ^ k' * m\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ k' * m) = 1] (mod p)", "unfolding p_less n_less"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ k' * m') = 1] (mod p)\n  2 ^ k' * m' dvd 2 ^ k' * m\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ k' * m) = 1] (mod p)", "by (meson dvd_trans ord_divides)"], ["proof (state)\nthis:\n  [a ^ (2 ^ k' * m) = 1] (mod p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>a. coprime a p \\<longrightarrow> [a ^ (2 ^ k' * m) = 1] (mod p)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have j_prop: \"[a^(2^j * m) = 1] (mod p)\" if \"coprime a p\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ j * m) = 1] (mod p)", "using that LeastI[of ?P k', OF k', folded j_def] cong_modulus_mult coprime_mult_right_iff"], ["proof (prove)\nusing this:\n  coprime a p\n  \\<forall>a. coprime a p \\<longrightarrow> [a ^ (2 ^ j * m) = 1] (mod p)\n  [?x = ?y] (mod ?m * ?n) \\<Longrightarrow> [?x = ?y] (mod ?m)\n  coprime ?c (?a * ?b) = (coprime ?c ?a \\<and> coprime ?c ?b)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ j * m) = 1] (mod p)", "unfolding j_def n"], ["proof (prove)\nusing this:\n  coprime a p\n  \\<forall>a.\n     coprime a p \\<longrightarrow>\n     [a ^\n      (2 ^\n       (LEAST k.\n           \\<forall>a.\n              coprime a p \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod p)) *\n       m) = 1] (mod p)\n  [?x = ?y] (mod ?m * ?n) \\<Longrightarrow> [?x = ?y] (mod ?m)\n  coprime ?c (?a * ?b) = (coprime ?c ?a \\<and> coprime ?c ?b)\n\ngoal (1 subgoal):\n 1. [a ^\n     (2 ^\n      (LEAST k.\n          \\<forall>a.\n             coprime a p \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod p)) *\n      m) = 1] (mod p)", "by blast"], ["proof (state)\nthis:\n  coprime ?a p \\<Longrightarrow> [?a ^ (2 ^ j * m) = 1] (mod p)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have j_least: \"[a^(2^i * m) = 1] (mod p)\" if \"coprime a p\" \"j \\<le> i\" for a i"], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = 1] (mod p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = 1] (mod p)", "obtain c where i: \"i = j + c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c. i = j + c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using le_iff_add[of j i] \\<open>j \\<le> i\\<close>"], ["proof (prove)\nusing this:\n  (j \\<le> i) = (\\<exists>c. i = j + c)\n  j \\<le> i\n\ngoal (1 subgoal):\n 1. (\\<And>c. i = j + c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  i = j + c\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = 1] (mod p)", "then"], ["proof (chain)\npicking this:\n  i = j + c", "have \"[a ^ (2 ^ i * m) = a ^ (2 ^ (j + c) * m)] (mod p)\""], ["proof (prove)\nusing this:\n  i = j + c\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = a ^ (2 ^ (j + c) * m)] (mod p)", "by simp"], ["proof (state)\nthis:\n  [a ^ (2 ^ i * m) = a ^ (2 ^ (j + c) * m)] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = 1] (mod p)", "also"], ["proof (state)\nthis:\n  [a ^ (2 ^ i * m) = a ^ (2 ^ (j + c) * m)] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = 1] (mod p)", "have \"[a ^ (2 ^ (j + c) * m) = (a ^ (2 ^ j * m)) ^ (2 ^ c)] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j + c) * m) = (a ^ (2 ^ j * m)) ^ 2 ^ c] (mod p)", "by (simp flip: power_mult add: algebra_simps power_add)"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j + c) * m) = (a ^ (2 ^ j * m)) ^ 2 ^ c] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = 1] (mod p)", "also"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j + c) * m) = (a ^ (2 ^ j * m)) ^ 2 ^ c] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = 1] (mod p)", "note j_prop[OF \\<open>coprime a p\\<close>]"], ["proof (state)\nthis:\n  [a ^ (2 ^ j * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = 1] (mod p)", "also"], ["proof (state)\nthis:\n  [a ^ (2 ^ j * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = 1] (mod p)", "have \"[1 ^ (2 ^ c) = 1] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [1 ^ 2 ^ c = 1] (mod p)", "by simp"], ["proof (state)\nthis:\n  [1 ^ 2 ^ c = 1] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = 1] (mod p)", "finally"], ["proof (chain)\npicking this:\n  [a ^ (2 ^ i * m) = 1] (mod p)", "show ?thesis"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ i * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = 1] (mod p)", "."], ["proof (state)\nthis:\n  [a ^ (2 ^ i * m) = 1] (mod p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>coprime ?a p; j \\<le> ?i\\<rbrakk>\n  \\<Longrightarrow> [?a ^ (2 ^ ?i * m) = 1] (mod p)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have neq_p: \"[p - 1 \\<noteq> 1](mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [p - 1 \\<noteq> 1] (mod p)", "using \\<open>2 < p\\<close> and cong_less_modulus_unique_nat[of \"p-1\" 1 p]"], ["proof (prove)\nusing this:\n  2 < p\n  \\<lbrakk>[p - 1 = 1] (mod p); p - 1 < p; 1 < p\\<rbrakk>\n  \\<Longrightarrow> p - 1 = 1\n\ngoal (1 subgoal):\n 1. [p - 1 \\<noteq> 1] (mod p)", "by linarith"], ["proof (state)\nthis:\n  [p - 1 \\<noteq> 1] (mod p)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"0 < j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < j", "proof (rule LeastI2[of ?P k', OF k', folded j_def], rule gr0I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a.\n                   coprime a p \\<longrightarrow>\n                   [a ^ (2 ^ x * m) = 1] (mod p);\n        x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a.\n                   coprime a p \\<longrightarrow>\n                   [a ^ (2 ^ x * m) = 1] (mod p);\n        x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"\\<forall>a. coprime a p \\<longrightarrow> [a ^ (2 ^ x * m) = 1] (mod p)\""], ["proof (state)\nthis:\n  \\<forall>a. coprime a p \\<longrightarrow> [a ^ (2 ^ x * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a.\n                   coprime a p \\<longrightarrow>\n                   [a ^ (2 ^ x * m) = 1] (mod p);\n        x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>a. coprime a p \\<longrightarrow> [a ^ (2 ^ x * m) = 1] (mod p)", "have \"[(p - 1) ^ (2 ^ x * m) = 1] (mod p)\""], ["proof (prove)\nusing this:\n  \\<forall>a. coprime a p \\<longrightarrow> [a ^ (2 ^ x * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. [(p - 1) ^ (2 ^ x * m) = 1] (mod p)", "using coprime_diff_one_left_nat[of p]  prime_gt_1_nat[OF \\<open>prime p\\<close>]"], ["proof (prove)\nusing this:\n  \\<forall>a. coprime a p \\<longrightarrow> [a ^ (2 ^ x * m) = 1] (mod p)\n  0 < p \\<Longrightarrow> coprime (p - 1) p\n  1 < p\n\ngoal (1 subgoal):\n 1. [(p - 1) ^ (2 ^ x * m) = 1] (mod p)", "by simp"], ["proof (state)\nthis:\n  [(p - 1) ^ (2 ^ x * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a.\n                   coprime a p \\<longrightarrow>\n                   [a ^ (2 ^ x * m) = 1] (mod p);\n        x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  [(p - 1) ^ (2 ^ x * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a.\n                   coprime a p \\<longrightarrow>\n                   [a ^ (2 ^ x * m) = 1] (mod p);\n        x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"x = 0\""], ["proof (state)\nthis:\n  x = 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a.\n                   coprime a p \\<longrightarrow>\n                   [a ^ (2 ^ x * m) = 1] (mod p);\n        x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"[(p-1)^(2^x*m) = p - 1](mod p)\""], ["proof (prove)\nusing this:\n  x = 0\n\ngoal (1 subgoal):\n 1. [(p - 1) ^ (2 ^ x * m) = p - 1] (mod p)", "using \\<open>odd m\\<close> odd_pow_cong[OF _ \\<open>odd m\\<close>, of p] prime_gt_1_nat[OF \\<open>prime p\\<close>]"], ["proof (prove)\nusing this:\n  x = 0\n  odd m\n  1 < p \\<Longrightarrow> [(p - 1) ^ m = p - 1] (mod p)\n  1 < p\n\ngoal (1 subgoal):\n 1. [(p - 1) ^ (2 ^ x * m) = p - 1] (mod p)", "by auto"], ["proof (state)\nthis:\n  [(p - 1) ^ (2 ^ x * m) = p - 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a.\n                   coprime a p \\<longrightarrow>\n                   [a ^ (2 ^ x * m) = 1] (mod p);\n        x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  [(p - 1) ^ (2 ^ x * m) = 1] (mod p)\n  [(p - 1) ^ (2 ^ x * m) = p - 1] (mod p)", "show False"], ["proof (prove)\nusing this:\n  [(p - 1) ^ (2 ^ x * m) = 1] (mod p)\n  [(p - 1) ^ (2 ^ x * m) = p - 1] (mod p)\n\ngoal (1 subgoal):\n 1. False", "using \\<open>[p - 1 \\<noteq> 1] (mod p)\\<close>"], ["proof (prove)\nusing this:\n  [(p - 1) ^ (2 ^ x * m) = 1] (mod p)\n  [(p - 1) ^ (2 ^ x * m) = p - 1] (mod p)\n  [p - 1 \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. False", "by (simp add: cong_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < j\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "then"], ["proof (chain)\npicking this:\n  0 < j", "have \"j - 1 < j\""], ["proof (prove)\nusing this:\n  0 < j\n\ngoal (1 subgoal):\n 1. j - 1 < j", "by simp"], ["proof (state)\nthis:\n  j - 1 < j\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "then"], ["proof (chain)\npicking this:\n  j - 1 < j", "obtain x where \"coprime x p\" \"[x^(2^(j-1) * m) \\<noteq> 1] (mod p)\""], ["proof (prove)\nusing this:\n  j - 1 < j\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>coprime x p;\n         [x ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using not_less_Least[of \"j - 1\" ?P, folded j_def]"], ["proof (prove)\nusing this:\n  j - 1 < j\n  j - 1 < j \\<Longrightarrow>\n  \\<not> (\\<forall>a.\n             coprime a p \\<longrightarrow>\n             [a ^ (2 ^ (j - 1) * m) = 1] (mod p))\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>coprime x p;\n         [x ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding j_def"], ["proof (prove)\nusing this:\n  (LEAST k.\n      \\<forall>a.\n         coprime a p \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod p)) -\n  1\n  < (LEAST k.\n        \\<forall>a.\n           coprime a p \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod p))\n  (LEAST k.\n      \\<forall>a.\n         coprime a p \\<longrightarrow> [a ^ (2 ^ k * m) = 1] (mod p)) -\n  1\n  < (LEAST k.\n        \\<forall>a.\n           coprime a p \\<longrightarrow>\n           [a ^ (2 ^ k * m) = 1] (mod p)) \\<Longrightarrow>\n  \\<not> (\\<forall>a.\n             coprime a p \\<longrightarrow>\n             [a ^\n              (2 ^\n               ((LEAST k.\n                    \\<forall>a.\n                       coprime a p \\<longrightarrow>\n                       [a ^ (2 ^ k * m) = 1] (mod p)) -\n                1) *\n               m) = 1] (mod p))\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>coprime x p;\n         [x ^\n          (2 ^\n           ((LEAST k.\n                \\<forall>a.\n                   coprime a p \\<longrightarrow>\n                   [a ^ (2 ^ k * m) = 1] (mod p)) -\n            1) *\n           m) \\<noteq> 1] (mod p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  coprime x p\n  [x ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "define G where \"G = Residues_Mult n\""], ["proof (state)\nthis:\n  G = Residues_Mult n\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "interpret residues_mult_nat n G"], ["proof (prove)\ngoal (1 subgoal):\n 1. residues_mult_nat n &&& G \\<equiv> Residues_Mult n", "by unfold_locales (use \\<open>n > 3\\<close> in \\<open>simp_all only: G_def\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have H_subset: \"H \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<subseteq> carrier G", "unfolding H_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> {1..<n}.\n     coprime a n \\<and>\n     ([a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n      [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n))}\n    \\<subseteq> carrier G", "by (auto simp: totatives_def)"], ["proof (state)\nthis:\n  H \\<subseteq> carrier G\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "from \\<open>n > 3\\<close>"], ["proof (chain)\npicking this:\n  3 < n", "have \\<open>n > 1\\<close>"], ["proof (prove)\nusing this:\n  3 < n\n\ngoal (1 subgoal):\n 1. 1 < n", "by simp"], ["proof (state)\nthis:\n  1 < n\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "interpret H: subgroup H G"], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup H G", "proof (rule subgroupI, goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. H \\<subseteq> carrier G\n 2. H \\<noteq> {}\n 3. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 4. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. H \\<subseteq> carrier G\n 2. H \\<noteq> {}\n 3. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 4. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<subseteq> carrier G", "using H_subset"], ["proof (prove)\nusing this:\n  H \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. H \\<subseteq> carrier G", "."], ["proof (state)\nthis:\n  H \\<subseteq> carrier G\n\ngoal (3 subgoals):\n 1. H \\<noteq> {}\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. H \\<noteq> {}\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. H \\<noteq> {}\n 2. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<noteq> {}", "unfolding H_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> {1..<n}.\n     coprime a n \\<and>\n     ([a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n      [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n))} \\<noteq>\n    {}", "using \\<open>1 < n\\<close>"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. {a \\<in> {1..<n}.\n     coprime a n \\<and>\n     ([a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n      [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n))} \\<noteq>\n    {}", "by force"], ["proof (state)\nthis:\n  H \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "case (3 a)"], ["proof (state)\nthis:\n  a \\<in> H\n\ngoal (2 subgoals):\n 1. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "define y where \"y = inv\\<^bsub>G\\<^esub> a\""], ["proof (state)\nthis:\n  y = inv\\<^bsub>G\\<^esub> a\n\ngoal (2 subgoals):\n 1. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "then"], ["proof (chain)\npicking this:\n  y = inv\\<^bsub>G\\<^esub> a", "have \"y \\<in> carrier G\""], ["proof (prove)\nusing this:\n  y = inv\\<^bsub>G\\<^esub> a\n\ngoal (1 subgoal):\n 1. y \\<in> carrier G", "using H_subset \\<open>a \\<in> H\\<close>"], ["proof (prove)\nusing this:\n  y = inv\\<^bsub>G\\<^esub> a\n  H \\<subseteq> carrier G\n  a \\<in> H\n\ngoal (1 subgoal):\n 1. y \\<in> carrier G", "by (auto simp del: carrier_eq)"], ["proof (state)\nthis:\n  y \\<in> carrier G\n\ngoal (2 subgoals):\n 1. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "then"], ["proof (chain)\npicking this:\n  y \\<in> carrier G", "have \"1 \\<le> y\" \"y < n\" \"coprime y n\""], ["proof (prove)\nusing this:\n  y \\<in> carrier G\n\ngoal (1 subgoal):\n 1. 1 \\<le> y &&& y < n &&& coprime y n", "using totatives_less[of y n] \\<open>n > 3\\<close>"], ["proof (prove)\nusing this:\n  y \\<in> carrier G\n  \\<lbrakk>y \\<in> totatives n; 1 < n\\<rbrakk> \\<Longrightarrow> y < n\n  3 < n\n\ngoal (1 subgoal):\n 1. 1 \\<le> y &&& y < n &&& coprime y n", "by (auto simp: totatives_def)"], ["proof (state)\nthis:\n  1 \\<le> y\n  y < n\n  coprime y n\n\ngoal (2 subgoals):\n 1. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "moreover"], ["proof (state)\nthis:\n  1 \\<le> y\n  y < n\n  coprime y n\n\ngoal (2 subgoals):\n 1. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "have \"[y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\" \n      if \"[y ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - Suc 0] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "from \\<open>a \\<in> H\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> H", "have \"[a * y = 1] (mod n)\""], ["proof (prove)\nusing this:\n  a \\<in> H\n\ngoal (1 subgoal):\n 1. [a * y = 1] (mod n)", "using H_subset r_inv[of a] y_def"], ["proof (prove)\nusing this:\n  a \\<in> H\n  H \\<subseteq> carrier G\n  a \\<in> carrier G \\<Longrightarrow>\n  a \\<otimes>\\<^bsub>G\\<^esub> inv\\<^bsub>G\\<^esub> a =\n  \\<one>\\<^bsub>G\\<^esub>\n  y = inv\\<^bsub>G\\<^esub> a\n\ngoal (1 subgoal):\n 1. [a * y = 1] (mod n)", "by (auto simp: cong_def)"], ["proof (state)\nthis:\n  [a * y = 1] (mod n)\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "hence \"[(a * y) ^ (2 ^ (j - 1) * m) = 1 ^ (2 ^ (j - 1) * m)] (mod n)\""], ["proof (prove)\nusing this:\n  [a * y = 1] (mod n)\n\ngoal (1 subgoal):\n 1. [(a * y) ^ (2 ^ (j - 1) * m) = 1 ^ (2 ^ (j - 1) * m)] (mod n)", "by (intro cong_pow)"], ["proof (state)\nthis:\n  [(a * y) ^ (2 ^ (j - 1) * m) = 1 ^ (2 ^ (j - 1) * m)] (mod n)\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "hence \"[(a * y) ^ (2 ^ (j - 1) * m) = 1] (mod n)\""], ["proof (prove)\nusing this:\n  [(a * y) ^ (2 ^ (j - 1) * m) = 1 ^ (2 ^ (j - 1) * m)] (mod n)\n\ngoal (1 subgoal):\n 1. [(a * y) ^ (2 ^ (j - 1) * m) = 1] (mod n)", "by simp"], ["proof (state)\nthis:\n  [(a * y) ^ (2 ^ (j - 1) * m) = 1] (mod n)\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "hence * : \"[a ^ (2 ^ (j - 1) * m) * y ^ (2 ^ (j - 1) * m) = 1] (mod n)\""], ["proof (prove)\nusing this:\n  [(a * y) ^ (2 ^ (j - 1) * m) = 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) * y ^ (2 ^ (j - 1) * m) = 1] (mod n)", "by (simp add: power_mult_distrib)"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) * y ^ (2 ^ (j - 1) * m) = 1] (mod n)\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "from \\<open>a \\<in> H\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> H", "have \"1 \\<le> a\" \"a < n\" \"coprime a n\""], ["proof (prove)\nusing this:\n  a \\<in> H\n\ngoal (1 subgoal):\n 1. 1 \\<le> a &&& a < n &&& coprime a n", "unfolding H_def"], ["proof (prove)\nusing this:\n  a \\<in> {a \\<in> {1..<n}.\n           coprime a n \\<and>\n           ([a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n            [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n))}\n\ngoal (1 subgoal):\n 1. 1 \\<le> a &&& a < n &&& coprime a n", "by auto"], ["proof (state)\nthis:\n  1 \\<le> a\n  a < n\n  coprime a n\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "have \"[a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or> [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n    [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)", "using \\<open>a \\<in> H\\<close>"], ["proof (prove)\nusing this:\n  a \\<in> H\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n    [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)", "by (auto simp: H_def)"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n  [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n  [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. [a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\n 2. [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "note *"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) * y ^ (2 ^ (j - 1) * m) = 1] (mod n)\n\ngoal (2 subgoals):\n 1. [a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\n 2. [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "also"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) * y ^ (2 ^ (j - 1) * m) = 1] (mod n)\n\ngoal (2 subgoals):\n 1. [a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\n 2. [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "assume \"[a ^ (2 ^ (j - 1) * m) = 1] (mod n)\""], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) = 1] (mod n)\n\ngoal (2 subgoals):\n 1. [a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\n 2. [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "finally"], ["proof (chain)\npicking this:\n  [1 * y ^ (2 ^ (j - 1) * m) = 1] (mod n)", "show ?thesis"], ["proof (prove)\nusing this:\n  [1 * y ^ (2 ^ (j - 1) * m) = 1] (mod n)\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "by simp"], ["proof (state)\nthis:\n  [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "assume \"[a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\""], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "then"], ["proof (chain)\npicking this:\n  [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)", "have \"[y ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\""], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - 1) * m) = n - 1] (mod n)", "using minus_one_cong_solve[OF \\<open>1 < n\\<close>] * \\<open>coprime a n\\<close> \\<open>coprime y n \\<close>coprime_power_left_iff"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n  \\<lbrakk>[?x = n - 1] (mod n); [?x * ?y = 1] (mod n); coprime ?x n;\n   coprime ?y n\\<rbrakk>\n  \\<Longrightarrow> [?y = n - 1] (mod n)\n  [a ^ (2 ^ (j - 1) * m) * y ^ (2 ^ (j - 1) * m) = 1] (mod n)\n  coprime a n\n  coprime y n\n  coprime (?a ^ ?n) ?b = (coprime ?a ?b \\<or> ?n = 0)\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - 1) * m) = n - 1] (mod n)", "by blast+"], ["proof (state)\nthis:\n  [y ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n) \\<Longrightarrow>\n    [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  [y ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "using that"], ["proof (prove)\nusing this:\n  [y ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n  [y ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - Suc 0] (mod n)\n\ngoal (1 subgoal):\n 1. [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "by simp"], ["proof (state)\nthis:\n  [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [y ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - Suc 0] (mod n) \\<Longrightarrow>\n  [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\n\ngoal (2 subgoals):\n 1. \\<And>a. a \\<in> H \\<Longrightarrow> inv\\<^bsub>G\\<^esub> a \\<in> H\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "ultimately"], ["proof (chain)\npicking this:\n  1 \\<le> y\n  y < n\n  coprime y n\n  [y ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - Suc 0] (mod n) \\<Longrightarrow>\n  [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)", "show ?case"], ["proof (prove)\nusing this:\n  1 \\<le> y\n  y < n\n  coprime y n\n  [y ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - Suc 0] (mod n) \\<Longrightarrow>\n  [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\n\ngoal (1 subgoal):\n 1. inv\\<^bsub>G\\<^esub> a \\<in> H", "using \\<open>a \\<in> H\\<close>"], ["proof (prove)\nusing this:\n  1 \\<le> y\n  y < n\n  coprime y n\n  [y ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - Suc 0] (mod n) \\<Longrightarrow>\n  [y ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\n  a \\<in> H\n\ngoal (1 subgoal):\n 1. inv\\<^bsub>G\\<^esub> a \\<in> H", "unfolding H_def y_def"], ["proof (prove)\nusing this:\n  1 \\<le> inv\\<^bsub>G\\<^esub> a\n  inv\\<^bsub>G\\<^esub> a < n\n  coprime (inv\\<^bsub>G\\<^esub> a) n\n  [(inv\\<^bsub>G\\<^esub> a) ^\n   (2 ^ (j - Suc 0) * m) \\<noteq> n - Suc 0] (mod n) \\<Longrightarrow>\n  [(inv\\<^bsub>G\\<^esub> a) ^ (2 ^ (j - Suc 0) * m) = Suc 0] (mod n)\n  a \\<in> {a \\<in> {1..<n}.\n           coprime a n \\<and>\n           ([a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n            [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n))}\n\ngoal (1 subgoal):\n 1. inv\\<^bsub>G\\<^esub> a\n    \\<in> {a \\<in> {1..<n}.\n           coprime a n \\<and>\n           ([a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n            [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n))}", "by auto"], ["proof (state)\nthis:\n  inv\\<^bsub>G\\<^esub> a \\<in> H\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "case (4 a b)"], ["proof (state)\nthis:\n  a \\<in> H\n  b \\<in> H\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "hence \"a \\<in> totatives n\" \"b \\<in> totatives n\""], ["proof (prove)\nusing this:\n  a \\<in> H\n  b \\<in> H\n\ngoal (1 subgoal):\n 1. a \\<in> totatives n &&& b \\<in> totatives n", "by (auto simp: H_def totatives_def)"], ["proof (state)\nthis:\n  a \\<in> totatives n\n  b \\<in> totatives n\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "hence \"a * b mod n \\<in> totatives n\""], ["proof (prove)\nusing this:\n  a \\<in> totatives n\n  b \\<in> totatives n\n\ngoal (1 subgoal):\n 1. a * b mod n \\<in> totatives n", "using m_closed[of a b]"], ["proof (prove)\nusing this:\n  a \\<in> totatives n\n  b \\<in> totatives n\n  \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G\\<rbrakk>\n  \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> carrier G\n\ngoal (1 subgoal):\n 1. a * b mod n \\<in> totatives n", "by simp"], ["proof (state)\nthis:\n  a * b mod n \\<in> totatives n\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "hence \"a * b mod n \\<in> {1..<n}\" \"coprime (a * b) n\""], ["proof (prove)\nusing this:\n  a * b mod n \\<in> totatives n\n\ngoal (1 subgoal):\n 1. a * b mod n \\<in> {1..<n} &&& coprime (a * b) n", "using totatives_less[of \"a * b\" n] \\<open>n > 3\\<close>"], ["proof (prove)\nusing this:\n  a * b mod n \\<in> totatives n\n  \\<lbrakk>a * b \\<in> totatives n; 1 < n\\<rbrakk>\n  \\<Longrightarrow> a * b < n\n  3 < n\n\ngoal (1 subgoal):\n 1. a * b mod n \\<in> {1..<n} &&& coprime (a * b) n", "by (auto simp: totatives_def)"], ["proof (state)\nthis:\n  a * b mod n \\<in> {1..<n}\n  coprime (a * b) n\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "moreover"], ["proof (state)\nthis:\n  a * b mod n \\<in> {1..<n}\n  coprime (a * b) n\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "define x y where \"x = a ^ (2 ^ (j - 1) * m)\" and \"y = b ^ (2 ^ (j - 1) * m)\""], ["proof (state)\nthis:\n  x = a ^ (2 ^ (j - 1) * m)\n  y = b ^ (2 ^ (j - 1) * m)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "have \"[x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)", "have *: \"x mod n \\<in> {1, n - 1}\" \"y mod n \\<in> {1, n - 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x mod n \\<in> {1, n - 1} &&& y mod n \\<in> {1, n - 1}", "using 4"], ["proof (prove)\nusing this:\n  a \\<in> H\n  b \\<in> H\n\ngoal (1 subgoal):\n 1. x mod n \\<in> {1, n - 1} &&& y mod n \\<in> {1, n - 1}", "by (auto simp: H_def x_def y_def cong_def)"], ["proof (state)\nthis:\n  x mod n \\<in> {1, n - 1}\n  y mod n \\<in> {1, n - 1}\n\ngoal (1 subgoal):\n 1. [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)", "have \"[x * y = (x mod n) * (y mod n)] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [x * y = x mod n * (y mod n)] (mod n)", "by (intro cong_mult) auto"], ["proof (state)\nthis:\n  [x * y = x mod n * (y mod n)] (mod n)\n\ngoal (1 subgoal):\n 1. [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)", "moreover"], ["proof (state)\nthis:\n  [x * y = x mod n * (y mod n)] (mod n)\n\ngoal (1 subgoal):\n 1. [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)", "have \"((x mod n) * (y mod n)) mod n \\<in> {1, n - 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x mod n * (y mod n) mod n \\<in> {1, n - 1}", "using * square_minus_one_cong_one'[OF \\<open>1 < n\\<close>] \\<open>n > 1\\<close>"], ["proof (prove)\nusing this:\n  x mod n \\<in> {1, n - 1}\n  y mod n \\<in> {1, n - 1}\n  [(n - 1) * (n - 1) = 1] (mod n)\n  1 < n\n\ngoal (1 subgoal):\n 1. x mod n * (y mod n) mod n \\<in> {1, n - 1}", "by (auto simp: cong_def)"], ["proof (state)\nthis:\n  x mod n * (y mod n) mod n \\<in> {1, n - 1}\n\ngoal (1 subgoal):\n 1. [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)", "ultimately"], ["proof (chain)\npicking this:\n  [x * y = x mod n * (y mod n)] (mod n)\n  x mod n * (y mod n) mod n \\<in> {1, n - 1}", "show ?thesis"], ["proof (prove)\nusing this:\n  [x * y = x mod n * (y mod n)] (mod n)\n  x mod n * (y mod n) mod n \\<in> {1, n - 1}\n\ngoal (1 subgoal):\n 1. [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)", "using \\<open>n > 1\\<close>"], ["proof (prove)\nusing this:\n  [x * y = x mod n * (y mod n)] (mod n)\n  x mod n * (y mod n) mod n \\<in> {1, n - 1}\n  1 < n\n\ngoal (1 subgoal):\n 1. [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)", "by (simp add: cong_def mod_simps)"], ["proof (state)\nthis:\n  [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> H; b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "ultimately"], ["proof (chain)\npicking this:\n  a * b mod n \\<in> {1..<n}\n  coprime (a * b) n\n  [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)", "show ?case"], ["proof (prove)\nusing this:\n  a * b mod n \\<in> {1..<n}\n  coprime (a * b) n\n  [x * y = 1] (mod n) \\<or> [x * y = n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H", "by (auto simp: H_def x_def y_def power_mult_distrib)"], ["proof (state)\nthis:\n  a \\<otimes>\\<^bsub>G\\<^esub> b \\<in> H\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "obtain a where \"[a = x] (mod p)\" \"[a = 1] (mod l)\" \"a < p * l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>[a = x] (mod p); [a = 1] (mod l); a < p * l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using binary_chinese_remainder_unique_nat[of p l x 1]\n        and \\<open>\\<not> p dvd l\\<close> \\<open>prime p\\<close> prime_imp_coprime_nat"], ["proof (prove)\nusing this:\n  \\<lbrakk>coprime p l; p \\<noteq> 0; l \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!xa.\n                       xa < p * l \\<and>\n                       [xa = x] (mod p) \\<and> [xa = 1] (mod l)\n  \\<not> p dvd l\n  prime p\n  \\<lbrakk>prime ?p; \\<not> ?p dvd ?n\\<rbrakk>\n  \\<Longrightarrow> coprime ?p ?n\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>[a = x] (mod p); [a = 1] (mod l); a < p * l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  [a = x] (mod p)\n  [a = 1] (mod l)\n  a < p * l\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "moreover"], ["proof (state)\nthis:\n  [a = x] (mod p)\n  [a = 1] (mod l)\n  a < p * l\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"coprime a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime a p", "using \\<open>coprime x p\\<close> cong_imp_coprime[OF cong_sym[OF \\<open>[a = x] (mod p)\\<close>]] coprime_mult_right_iff"], ["proof (prove)\nusing this:\n  coprime x p\n  coprime x p \\<Longrightarrow> coprime a p\n  coprime ?c (?a * ?b) = (coprime ?c ?a \\<and> coprime ?c ?b)\n\ngoal (1 subgoal):\n 1. coprime a p", "unfolding n"], ["proof (prove)\nusing this:\n  coprime x p\n  coprime x p \\<Longrightarrow> coprime a p\n  coprime ?c (?a * ?b) = (coprime ?c ?a \\<and> coprime ?c ?b)\n\ngoal (1 subgoal):\n 1. coprime a p", "by blast"], ["proof (state)\nthis:\n  coprime a p\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "moreover"], ["proof (state)\nthis:\n  coprime a p\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"coprime a l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime a l", "using coprime_1_left cong_imp_coprime[OF cong_sym[OF \\<open>[a = 1] (mod l)\\<close>]]"], ["proof (prove)\nusing this:\n  coprime (1::?'a) ?a\n  coprime 1 l \\<Longrightarrow> coprime a l\n\ngoal (1 subgoal):\n 1. coprime a l", "by blast"], ["proof (state)\nthis:\n  coprime a l\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "moreover"], ["proof (state)\nthis:\n  coprime a l\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "from \\<open>prime p\\<close> and \\<open>coprime a p\\<close>"], ["proof (chain)\npicking this:\n  prime p\n  coprime a p", "have \"a > 0\""], ["proof (prove)\nusing this:\n  prime p\n  coprime a p\n\ngoal (1 subgoal):\n 1. 0 < a", "by (intro Nat.gr0I) auto"], ["proof (state)\nthis:\n  0 < a\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "ultimately"], ["proof (chain)\npicking this:\n  [a = x] (mod p)\n  [a = 1] (mod l)\n  a < p * l\n  coprime a p\n  coprime a l\n  0 < a", "have \"a \\<in> carrier G\""], ["proof (prove)\nusing this:\n  [a = x] (mod p)\n  [a = 1] (mod l)\n  a < p * l\n  coprime a p\n  coprime a l\n  0 < a\n\ngoal (1 subgoal):\n 1. a \\<in> carrier G", "using \\<open>2 < l\\<close>"], ["proof (prove)\nusing this:\n  [a = x] (mod p)\n  [a = 1] (mod l)\n  a < p * l\n  coprime a p\n  coprime a l\n  0 < a\n  2 < l\n\ngoal (1 subgoal):\n 1. a \\<in> carrier G", "by (auto intro: gre1I_nat simp: n totatives_def)"], ["proof (state)\nthis:\n  a \\<in> carrier G\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"[a ^ (2^(j-1) * m) \\<noteq> 1] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)", "using \\<open>[x^(2^(j-1) * m) \\<noteq> 1] (mod p)\\<close> \\<open>[a = x] (mod p)\\<close> and cong_trans cong_pow cong_sym"], ["proof (prove)\nusing this:\n  [x ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\n  [a = x] (mod p)\n  \\<lbrakk>[?b = ?c] (mod ?a); [?c = ?d] (mod ?a)\\<rbrakk>\n  \\<Longrightarrow> [?b = ?d] (mod ?a)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> [?b ^ ?n = ?c ^ ?n] (mod ?a)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> [?c = ?b] (mod ?a)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)", "by blast"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "then"], ["proof (chain)\npicking this:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)", "have \"[a ^ (2^(j-1) * m) \\<noteq> 1] (mod n)\""], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)", "using cong_modulus_mult_nat n"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod p)\n  [?x = ?y] (mod ?m * ?n) \\<Longrightarrow> [?x = ?y] (mod ?m)\n  n = p * l\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)", "by fast"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "moreover"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"[a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "have \"[a ^ (2 ^ (j - 1) * m) = 1] (mod l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) = 1] (mod l)", "using cong_pow[OF \\<open>[a = 1] (mod l)\\<close>]"], ["proof (prove)\nusing this:\n  [a ^ ?n = 1 ^ ?n] (mod l)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) = 1] (mod l)", "by auto"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) = 1] (mod l)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "moreover"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) = 1] (mod l)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "have \"Suc 0 \\<noteq> (n - Suc 0) mod l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 \\<noteq> (n - Suc 0) mod l", "using n \\<open>2 < l\\<close> \\<open>odd n\\<close>"], ["proof (prove)\nusing this:\n  n = p * l\n  2 < l\n  odd n\n\ngoal (1 subgoal):\n 1. Suc 0 \\<noteq> (n - Suc 0) mod l", "by (metis mod_Suc_eq mod_less mod_mult_self2_is_0 numeral_2_eq_2 odd_Suc_minus_one zero_neq_numeral)"], ["proof (state)\nthis:\n  Suc 0 \\<noteq> (n - Suc 0) mod l\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "then"], ["proof (chain)\npicking this:\n  Suc 0 \\<noteq> (n - Suc 0) mod l", "have \"[1 \\<noteq> n - 1] (mod l)\""], ["proof (prove)\nusing this:\n  Suc 0 \\<noteq> (n - Suc 0) mod l\n\ngoal (1 subgoal):\n 1. [1 \\<noteq> n - 1] (mod l)", "using \\<open>2 < l\\<close> \\<open>odd n\\<close>"], ["proof (prove)\nusing this:\n  Suc 0 \\<noteq> (n - Suc 0) mod l\n  2 < l\n  odd n\n\ngoal (1 subgoal):\n 1. [1 \\<noteq> n - 1] (mod l)", "unfolding cong_def"], ["proof (prove)\nusing this:\n  Suc 0 \\<noteq> (n - Suc 0) mod l\n  2 < l\n  odd n\n\ngoal (1 subgoal):\n 1. 1 mod l \\<noteq> (n - 1) mod l", "by simp"], ["proof (state)\nthis:\n  [1 \\<noteq> n - 1] (mod l)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "moreover"], ["proof (state)\nthis:\n  [1 \\<noteq> n - 1] (mod l)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "have \"l \\<noteq> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<noteq> Suc 0", "using \\<open>2 < l\\<close>"], ["proof (prove)\nusing this:\n  2 < l\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc 0", "by simp"], ["proof (state)\nthis:\n  l \\<noteq> Suc 0\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "ultimately"], ["proof (chain)\npicking this:\n  [a ^ (2 ^ (j - 1) * m) = 1] (mod l)\n  [1 \\<noteq> n - 1] (mod l)\n  l \\<noteq> Suc 0", "have \"[a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod l)\""], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - 1) * m) = 1] (mod l)\n  [1 \\<noteq> n - 1] (mod l)\n  l \\<noteq> Suc 0\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod l)", "by (auto simp add: cong_def n mod_simps dest: cong_modulus_mult_nat)"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod l)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "then"], ["proof (chain)\npicking this:\n  [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod l)", "show ?thesis"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod l)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "using cong_modulus_mult_nat mult.commute n"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod l)\n  [?x = ?y] (mod ?m * ?n) \\<Longrightarrow> [?x = ?y] (mod ?m)\n  ?a * ?b = ?b * ?a\n  n = p * l\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "by metis"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "ultimately"], ["proof (chain)\npicking this:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)\n  [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)", "have \"a \\<notin> H\""], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)\n  [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. a \\<notin> H", "unfolding H_def"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)\n  [a ^ (2 ^ (j - Suc 0) * m) \\<noteq> n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. a \\<notin> {a \\<in> {1..<n}.\n                coprime a n \\<and>\n                ([a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n                 [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n))}", "by auto"], ["proof (state)\nthis:\n  a \\<notin> H\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "hence \"H \\<subset> carrier (G)\""], ["proof (prove)\nusing this:\n  a \\<notin> H\n\ngoal (1 subgoal):\n 1. H \\<subset> carrier G", "using H_subset subgroup.mem_carrier and \\<open>a \\<in> carrier (G)\\<close>"], ["proof (prove)\nusing this:\n  a \\<notin> H\n  H \\<subseteq> carrier G\n  \\<lbrakk>subgroup ?H ?G; ?x \\<in> ?H\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> carrier ?G\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. H \\<subset> carrier G", "by fast"], ["proof (state)\nthis:\n  H \\<subset> carrier G\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "}"], ["proof (state)\nthis:\n  H \\<subset> carrier G\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"card H \\<le> order G div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H \\<le> order G div 2", "by (intro proper_subgroup_imp_bound_on_card) (use \\<open>H \\<subset> carrier G\\<close> H.is_subgroup in \\<open>auto\\<close>)"], ["proof (state)\nthis:\n  card H \\<le> order G div 2\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "also"], ["proof (state)\nthis:\n  card H \\<le> order G div 2\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "from assms"], ["proof (chain)\npicking this:\n  Carmichael_number n", "have \"\\<not>prime n\""], ["proof (prove)\nusing this:\n  Carmichael_number n\n\ngoal (1 subgoal):\n 1. \\<not> prime n", "by (auto dest: Carmichael_number_not_prime)"], ["proof (state)\nthis:\n  \\<not> prime n\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "hence \"order G div 2 < (n - 1) div 2\""], ["proof (prove)\nusing this:\n  \\<not> prime n\n\ngoal (1 subgoal):\n 1. order G div 2 < (n - 1) div 2", "using totient_less_not_prime[OF \\<open>\\<not> prime n\\<close> \\<open>1 < n\\<close>] \\<open>odd n\\<close>"], ["proof (prove)\nusing this:\n  \\<not> prime n\n  totient n < n - 1\n  odd n\n\ngoal (1 subgoal):\n 1. order G div 2 < (n - 1) div 2", "by (auto simp add: order_eq elim!: oddE)"], ["proof (state)\nthis:\n  order G div 2 < (n - 1) div 2\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "finally"], ["proof (chain)\npicking this:\n  card H < (n - 1) div 2", "have \"card H < (n - 1) div 2\""], ["proof (prove)\nusing this:\n  card H < (n - 1) div 2\n\ngoal (1 subgoal):\n 1. card H < (n - 1) div 2", "."], ["proof (state)\nthis:\n  card H < (n - 1) div 2\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "{"], ["proof (state)\nthis:\n  card H < (n - 1) div 2\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "{"], ["proof (state)\nthis:\n  card H < (n - 1) div 2\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "fix a"], ["proof (state)\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "assume \"1 \\<le> a\" \"a < n\""], ["proof (state)\nthis:\n  1 \\<le> a\n  a < n\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "hence \"a \\<in> {1..<n}\""], ["proof (prove)\nusing this:\n  1 \\<le> a\n  a < n\n\ngoal (1 subgoal):\n 1. a \\<in> {1..<n}", "by simp"], ["proof (state)\nthis:\n  a \\<in> {1..<n}\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "assume \"coprime a n\""], ["proof (state)\nthis:\n  coprime a n\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "then"], ["proof (chain)\npicking this:\n  coprime a n", "have \"coprime a p\""], ["proof (prove)\nusing this:\n  coprime a n\n\ngoal (1 subgoal):\n 1. coprime a p", "unfolding n"], ["proof (prove)\nusing this:\n  coprime a (p * l)\n\ngoal (1 subgoal):\n 1. coprime a p", "by simp"], ["proof (state)\nthis:\n  coprime a p\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "assume \"[a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)\""], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "hence \"[a ^ m \\<noteq> 1] (mod n)\""], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ m \\<noteq> 1] (mod n)", "by (metis dvd_trans dvd_triv_right ord_divides)"], ["proof (state)\nthis:\n  [a ^ m \\<noteq> 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "moreover"], ["proof (state)\nthis:\n  [a ^ m \\<noteq> 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "assume \"strong_fermat_liar a n\""], ["proof (state)\nthis:\n  strong_fermat_liar a n\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "ultimately"], ["proof (chain)\npicking this:\n  [a ^ m \\<noteq> 1] (mod n)\n  strong_fermat_liar a n", "obtain i where \"i \\<in> {0 ..< k}\" \"[a^(2^i * m) = n-1](mod n)\""], ["proof (prove)\nusing this:\n  [a ^ m \\<noteq> 1] (mod n)\n  strong_fermat_liar a n\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<in> {0..<k}; [a ^ (2 ^ i * m) = n - 1] (mod n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding strong_fermat_liar_def"], ["proof (prove)\nusing this:\n  [a ^ m \\<noteq> 1] (mod n)\n  \\<forall>k m.\n     odd m \\<longrightarrow>\n     n - 1 = 2 ^ k * m \\<longrightarrow>\n     [a ^ m = 1] (mod n) \\<or>\n     (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<in> {0..<k}; [a ^ (2 ^ i * m) = n - 1] (mod n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>odd m\\<close> n_less"], ["proof (prove)\nusing this:\n  [a ^ m \\<noteq> 1] (mod n)\n  \\<forall>k m.\n     odd m \\<longrightarrow>\n     n - 1 = 2 ^ k * m \\<longrightarrow>\n     [a ^ m = 1] (mod n) \\<or>\n     (\\<exists>i\\<in>{0..<k}. [a ^ (2 ^ i * m) = n - 1] (mod n))\n  odd m\n  n - 1 = 2 ^ k * m\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<in> {0..<k}; [a ^ (2 ^ i * m) = n - 1] (mod n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i \\<in> {0..<k}\n  [a ^ (2 ^ i * m) = n - 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "then"], ["proof (chain)\npicking this:\n  i \\<in> {0..<k}\n  [a ^ (2 ^ i * m) = n - 1] (mod n)", "have \"[a ^ (2 ^ i * m) = n - 1] (mod p)\""], ["proof (prove)\nusing this:\n  i \\<in> {0..<k}\n  [a ^ (2 ^ i * m) = n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = n - 1] (mod p)", "unfolding n"], ["proof (prove)\nusing this:\n  i \\<in> {0..<k}\n  [a ^ (2 ^ i * m) = p * l - 1] (mod p * l)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = p * l - 1] (mod p)", "using cong_modulus_mult_nat"], ["proof (prove)\nusing this:\n  i \\<in> {0..<k}\n  [a ^ (2 ^ i * m) = p * l - 1] (mod p * l)\n  [?x = ?y] (mod ?m * ?n) \\<Longrightarrow> [?x = ?y] (mod ?m)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) = p * l - 1] (mod p)", "by blast"], ["proof (state)\nthis:\n  [a ^ (2 ^ i * m) = n - 1] (mod p)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "moreover"], ["proof (state)\nthis:\n  [a ^ (2 ^ i * m) = n - 1] (mod p)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"[n - 1 \\<noteq> 1] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [n - 1 \\<noteq> 1] (mod p)", "proof(subst cong_altdef_nat, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 \\<le> n - 1\n 2. \\<not> p dvd n - 1 - 1", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. 1 \\<le> n - 1\n 2. \\<not> p dvd n - 1 - 1", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> n - 1", "using \\<open>1 < n\\<close>"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. 1 \\<le> n - 1", "by linarith"], ["proof (state)\nthis:\n  1 \\<le> n - 1\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1 - 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1 - 1", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1 - 1", "have \"\\<not> p dvd 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p dvd 2", "using \\<open>2 < p\\<close>"], ["proof (prove)\nusing this:\n  2 < p\n\ngoal (1 subgoal):\n 1. \\<not> p dvd 2", "by (simp add: nat_dvd_not_less)"], ["proof (state)\nthis:\n  \\<not> p dvd 2\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1 - 1", "moreover"], ["proof (state)\nthis:\n  \\<not> p dvd 2\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1 - 1", "have \"2 \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> n", "using \\<open>1 < n\\<close>"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. 2 \\<le> n", "by linarith"], ["proof (state)\nthis:\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1 - 1", "moreover"], ["proof (state)\nthis:\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1 - 1", "have \"p dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p dvd n", "using n"], ["proof (prove)\nusing this:\n  n = p * l\n\ngoal (1 subgoal):\n 1. p dvd n", "by simp"], ["proof (state)\nthis:\n  p dvd n\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1 - 1", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> p dvd 2\n  2 \\<le> n\n  p dvd n", "have \"\\<not> p dvd n - 2\""], ["proof (prove)\nusing this:\n  \\<not> p dvd 2\n  2 \\<le> n\n  p dvd n\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 2", "using dvd_diffD1"], ["proof (prove)\nusing this:\n  \\<not> p dvd 2\n  2 \\<le> n\n  p dvd n\n  \\<lbrakk>?k dvd ?m - ?n; ?k dvd ?m; ?n \\<le> ?m\\<rbrakk>\n  \\<Longrightarrow> ?k dvd ?n\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 2", "by blast"], ["proof (state)\nthis:\n  \\<not> p dvd n - 2\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1 - 1", "then"], ["proof (chain)\npicking this:\n  \\<not> p dvd n - 2", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> p dvd n - 2\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n - 1 - 1", "by (simp add: numeral_2_eq_2)"], ["proof (state)\nthis:\n  \\<not> p dvd n - 1 - 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [n - 1 \\<noteq> 1] (mod p)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "ultimately"], ["proof (chain)\npicking this:\n  [a ^ (2 ^ i * m) = n - 1] (mod p)\n  [n - 1 \\<noteq> 1] (mod p)", "have \"[a ^ (2 ^ i * m) \\<noteq> Suc 0] (mod p)\""], ["proof (prove)\nusing this:\n  [a ^ (2 ^ i * m) = n - 1] (mod p)\n  [n - 1 \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) \\<noteq> Suc 0] (mod p)", "using cong_sym"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ i * m) = n - 1] (mod p)\n  [n - 1 \\<noteq> 1] (mod p)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> [?c = ?b] (mod ?a)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ i * m) \\<noteq> Suc 0] (mod p)", "by (simp add: cong_def)"], ["proof (state)\nthis:\n  [a ^ (2 ^ i * m) \\<noteq> Suc 0] (mod p)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "then"], ["proof (chain)\npicking this:\n  [a ^ (2 ^ i * m) \\<noteq> Suc 0] (mod p)", "have \"i < j\""], ["proof (prove)\nusing this:\n  [a ^ (2 ^ i * m) \\<noteq> Suc 0] (mod p)\n\ngoal (1 subgoal):\n 1. i < j", "using j_least[OF \\<open>coprime a p\\<close>, of i]"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ i * m) \\<noteq> Suc 0] (mod p)\n  j \\<le> i \\<Longrightarrow> [a ^ (2 ^ i * m) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. i < j", "by force"], ["proof (state)\nthis:\n  i < j\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"[(a ^ (2 ^ Suc i * m)) = 1] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a ^ (2 ^ Suc i * m) = 1] (mod n)", "using square_minus_one_cong_one[OF \\<open>1 < n\\<close> \\<open>[a^(2^i * m) = n-1](mod n)\\<close>]"], ["proof (prove)\nusing this:\n  [(a ^ (2 ^ i * m))\\<^sup>2 = 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ Suc i * m) = 1] (mod n)", "by (simp add: power2_eq_square power_mult power_mult_distrib)"], ["proof (state)\nthis:\n  [a ^ (2 ^ Suc i * m) = 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "{"], ["proof (state)\nthis:\n  [a ^ (2 ^ Suc i * m) = 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "assume \"i < j - 1\""], ["proof (state)\nthis:\n  i < j - 1\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"(2 :: nat) ^ (j - Suc 0) = ((2 ^ i) * 2 ^ (j - Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ (j - Suc 0) = 2 ^ i * 2 ^ (j - Suc i)", "unfolding power_add[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ (j - Suc 0) = 2 ^ (i + (j - Suc i))", "using \\<open>i < j - 1\\<close>"], ["proof (prove)\nusing this:\n  i < j - 1\n\ngoal (1 subgoal):\n 1. 2 ^ (j - Suc 0) = 2 ^ (i + (j - Suc i))", "by simp"], ["proof (state)\nthis:\n  2 ^ (j - Suc 0) = 2 ^ i * 2 ^ (j - Suc i)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "then"], ["proof (chain)\npicking this:\n  2 ^ (j - Suc 0) = 2 ^ i * 2 ^ (j - Suc i)", "have \"[a ^ (2 ^ (j - 1) * m) = (a ^ (2 ^ i * m)) ^ (2^(j - 1 - i))] (mod n)\""], ["proof (prove)\nusing this:\n  2 ^ (j - Suc 0) = 2 ^ i * 2 ^ (j - Suc i)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) = (a ^ (2 ^ i * m)) ^ 2 ^ (j - 1 - i)] (mod n)", "by (auto intro!: cong_pow_I simp flip: power_mult simp add: algebra_simps power_add)"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) = (a ^ (2 ^ i * m)) ^ 2 ^ (j - 1 - i)] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "also"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) = (a ^ (2 ^ i * m)) ^ 2 ^ (j - 1 - i)] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "note \\<open>[a ^ (2 ^ i * m) = n - 1] (mod n)\\<close>"], ["proof (state)\nthis:\n  [a ^ (2 ^ i * m) = n - 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "also"], ["proof (state)\nthis:\n  [a ^ (2 ^ i * m) = n - 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"[(n - 1) ^ (2^(j - 1 - i)) = 1] (mod n) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. [(n - 1) ^ 2 ^ (j - 1 - i) = 1] (mod n)", "using \\<open>1 < n\\<close> \\<open>i < j - 1\\<close>"], ["proof (prove)\nusing this:\n  1 < n\n  i < j - 1\n\ngoal (1 subgoal):\n 1. [(n - 1) ^ 2 ^ (j - 1 - i) = 1] (mod n)", "using even_pow_cong"], ["proof (prove)\nusing this:\n  1 < n\n  i < j - 1\n  \\<lbrakk>1 < ?n; even ?m\\<rbrakk>\n  \\<Longrightarrow> [(?n - 1) ^ ?m = 1] (mod ?n)\n\ngoal (1 subgoal):\n 1. [(n - 1) ^ 2 ^ (j - 1 - i) = 1] (mod n)", "by auto"], ["proof (state)\nthis:\n  [(n - 1) ^ 2 ^ (j - 1 - i) = 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "finally"], ["proof (chain)\npicking this:\n  [a ^ (2 ^ (j - 1) * m) = 1] (mod n)", "have False"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - 1) * m) = 1] (mod n)\n\ngoal (1 subgoal):\n 1. False", "using \\<open>[a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)\\<close>"], ["proof (prove)\nusing this:\n  [a ^ (2 ^ (j - 1) * m) = 1] (mod n)\n  [a ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "}"], ["proof (state)\nthis:\n  i < j - 1 \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "hence \"i = j - 1\""], ["proof (prove)\nusing this:\n  i < j - 1 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. i = j - 1", "using \\<open>i < j\\<close>"], ["proof (prove)\nusing this:\n  i < j - 1 \\<Longrightarrow> False\n  i < j\n\ngoal (1 subgoal):\n 1. i = j - 1", "by fastforce"], ["proof (state)\nthis:\n  i = j - 1\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "hence \"[a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\""], ["proof (prove)\nusing this:\n  i = j - 1\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)", "using \\<open>[a^(2^i * m) = n-1](mod n)\\<close>"], ["proof (prove)\nusing this:\n  i = j - 1\n  [a ^ (2 ^ i * m) = n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)", "by simp"], ["proof (state)\nthis:\n  [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "}"], ["proof (state)\nthis:\n  \\<lbrakk>1 \\<le> ?a2; ?a2 < n; coprime ?a2 n;\n   [?a2 ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n);\n   strong_fermat_liar ?a2 n\\<rbrakk>\n  \\<Longrightarrow> [?a2 ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "hence \"{a \\<in> {1..<n}. strong_fermat_liar a n} \\<subseteq> H\""], ["proof (prove)\nusing this:\n  \\<lbrakk>1 \\<le> ?a2; ?a2 < n; coprime ?a2 n;\n   [?a2 ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n);\n   strong_fermat_liar ?a2 n\\<rbrakk>\n  \\<Longrightarrow> [?a2 ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n\ngoal (1 subgoal):\n 1. {a \\<in> {1..<n}. strong_fermat_liar a n} \\<subseteq> H", "using strong_fermat_liar_imp_fermat_liar[of _ n, OF _ \\<open>1 < n\\<close>]  liar_imp_coprime"], ["proof (prove)\nusing this:\n  \\<lbrakk>1 \\<le> ?a2; ?a2 < n; coprime ?a2 n;\n   [?a2 ^ (2 ^ (j - 1) * m) \\<noteq> 1] (mod n);\n   strong_fermat_liar ?a2 n\\<rbrakk>\n  \\<Longrightarrow> [?a2 ^ (2 ^ (j - 1) * m) = n - 1] (mod n)\n  \\<lbrakk>?a \\<in> {1..<n}; strong_fermat_liar ?a n\\<rbrakk>\n  \\<Longrightarrow> fermat_liar ?a n\n  \\<lbrakk>?a \\<in> {1..<?n}; fermat_liar ?a ?n\\<rbrakk>\n  \\<Longrightarrow> coprime ?a ?n\n\ngoal (1 subgoal):\n 1. {a \\<in> {1..<n}. strong_fermat_liar a n} \\<subseteq> H", "by (auto simp: H_def)"], ["proof (state)\nthis:\n  {a \\<in> {1..<n}. strong_fermat_liar a n} \\<subseteq> H\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "}"], ["proof (state)\nthis:\n  {a \\<in> {1..<n}. strong_fermat_liar a n} \\<subseteq> H\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "moreover"], ["proof (state)\nthis:\n  {a \\<in> {1..<n}. strong_fermat_liar a n} \\<subseteq> H\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"finite H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite H", "unfolding H_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {a \\<in> {1..<n}.\n      coprime a n \\<and>\n      ([a ^ (2 ^ (j - 1) * m) = 1] (mod n) \\<or>\n       [a ^ (2 ^ (j - 1) * m) = n - 1] (mod n))}", "by auto"], ["proof (state)\nthis:\n  finite H\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "ultimately"], ["proof (chain)\npicking this:\n  {a \\<in> {1..<n}. strong_fermat_liar a n} \\<subseteq> H\n  finite H", "have strong_fermat_liar_bounded: \"card {a \\<in> {1..<n}. strong_fermat_liar a n} < (n - 1) div 2 \""], ["proof (prove)\nusing this:\n  {a \\<in> {1..<n}. strong_fermat_liar a n} \\<subseteq> H\n  finite H\n\ngoal (1 subgoal):\n 1. card {a \\<in> {1..<n}. strong_fermat_liar a n} < (n - 1) div 2", "using card_mono[of H] le_less_trans[OF _ \\<open>card H < (n - 1) div 2\\<close>]"], ["proof (prove)\nusing this:\n  {a \\<in> {1..<n}. strong_fermat_liar a n} \\<subseteq> H\n  finite H\n  \\<lbrakk>finite H; ?A \\<subseteq> H\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card H\n  ?x \\<le> card H \\<Longrightarrow> ?x < (n - 1) div 2\n\ngoal (1 subgoal):\n 1. card {a \\<in> {1..<n}. strong_fermat_liar a n} < (n - 1) div 2", "by blast"], ["proof (state)\nthis:\n  card {a \\<in> {1..<n}. strong_fermat_liar a n} < (n - 1) div 2\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "moreover"], ["proof (state)\nthis:\n  card {a \\<in> {1..<n}. strong_fermat_liar a n} < (n - 1) div 2\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "{"], ["proof (state)\nthis:\n  card {a \\<in> {1..<n}. strong_fermat_liar a n} < (n - 1) div 2\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "have \"{1..<n} - {a \\<in> {1..<n}. strong_fermat_liar a n} = {a \\<in> {1..<n}. strong_fermat_witness a n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {1..<n} - {a \\<in> {1..<n}. strong_fermat_liar a n} =\n    {a \\<in> {1..<n}. strong_fermat_witness a n}", "using strong_fermat_witness_def"], ["proof (prove)\nusing this:\n  strong_fermat_witness ?a ?n = (\\<not> strong_fermat_liar ?a ?n)\n\ngoal (1 subgoal):\n 1. {1..<n} - {a \\<in> {1..<n}. strong_fermat_liar a n} =\n    {a \\<in> {1..<n}. strong_fermat_witness a n}", "by blast"], ["proof (state)\nthis:\n  {1..<n} - {a \\<in> {1..<n}. strong_fermat_liar a n} =\n  {a \\<in> {1..<n}. strong_fermat_witness a n}\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "then"], ["proof (chain)\npicking this:\n  {1..<n} - {a \\<in> {1..<n}. strong_fermat_liar a n} =\n  {a \\<in> {1..<n}. strong_fermat_witness a n}", "have \"card {a \\<in> {1..<n}. strong_fermat_witness a n} = (n-1) - card {a \\<in> {1..<n}. strong_fermat_liar a n}\""], ["proof (prove)\nusing this:\n  {1..<n} - {a \\<in> {1..<n}. strong_fermat_liar a n} =\n  {a \\<in> {1..<n}. strong_fermat_witness a n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> {1..<n}. strong_fermat_witness a n} =\n    n - 1 - card {a \\<in> {1..<n}. strong_fermat_liar a n}", "using card_Diff_subset[of \"{a \\<in> {1..<n}. strong_fermat_liar a n}\" \"{1..<n}\"]"], ["proof (prove)\nusing this:\n  {1..<n} - {a \\<in> {1..<n}. strong_fermat_liar a n} =\n  {a \\<in> {1..<n}. strong_fermat_witness a n}\n  \\<lbrakk>finite {a \\<in> {1..<n}. strong_fermat_liar a n};\n   {a \\<in> {1..<n}. strong_fermat_liar a n} \\<subseteq> {1..<n}\\<rbrakk>\n  \\<Longrightarrow> card\n                     ({1..<n} - {a \\<in> {1..<n}. strong_fermat_liar a n}) =\n                    card {1..<n} -\n                    card {a \\<in> {1..<n}. strong_fermat_liar a n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> {1..<n}. strong_fermat_witness a n} =\n    n - 1 - card {a \\<in> {1..<n}. strong_fermat_liar a n}", "by fastforce"], ["proof (state)\nthis:\n  card {a \\<in> {1..<n}. strong_fermat_witness a n} =\n  n - 1 - card {a \\<in> {1..<n}. strong_fermat_liar a n}\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "}"], ["proof (state)\nthis:\n  card {a \\<in> {1..<n}. strong_fermat_witness a n} =\n  n - 1 - card {a \\<in> {1..<n}. strong_fermat_liar a n}\n\ngoal (2 subgoals):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n 2. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "ultimately"], ["proof (chain)\npicking this:\n  card {a \\<in> {1..<n}. strong_fermat_liar a n} < (n - 1) div 2\n  card {a \\<in> {1..<n}. strong_fermat_witness a n} =\n  n - 1 - card {a \\<in> {1..<n}. strong_fermat_liar a n}", "show \"(n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\""], ["proof (prove)\nusing this:\n  card {a \\<in> {1..<n}. strong_fermat_liar a n} < (n - 1) div 2\n  card {a \\<in> {1..<n}. strong_fermat_witness a n} =\n  n - 1 - card {a \\<in> {1..<n}. strong_fermat_liar a n}\n\ngoal (1 subgoal):\n 1. (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}", "by linarith"], ["proof (state)\nthis:\n  (n - 1) div 2 < card {a \\<in> {1..<n}. strong_fermat_witness a n}\n\ngoal (1 subgoal):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "show \"real (card {a . 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n}) < real (n - 2) / 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "using strong_fermat_liar_bounded ignore_one one_is_strong_fermat_liar \\<open>1 < n\\<close>"], ["proof (prove)\nusing this:\n  card {a \\<in> {1..<n}. strong_fermat_liar a n} < (n - 1) div 2\n  \\<lbrakk>?P 1 ?n; 1 < ?n\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> {1..<?n}. ?P a ?n} =\n                    1 + card {a. 2 \\<le> a \\<and> a < ?n \\<and> ?P a ?n}\n  1 < ?n \\<Longrightarrow> strong_fermat_liar 1 ?n\n  1 < n\n\ngoal (1 subgoal):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "by simp"], ["proof (state)\nthis:\n  real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n  < real (n - 2) / 2\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary strong_fermat_witness_lower_bound:\n  assumes \"odd n\" \"n > 2\" \"\\<not>prime n\"\n  shows   \"card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n} < real (n - 2) / 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "using Carmichael_number_imp_lower_bound_on_strong_fermat_witness(2)[of n]\n        not_Carmichael_number_imp_card_fermat_witness_bound(2)[of n] assms"], ["proof (prove)\nusing this:\n  Carmichael_number n \\<Longrightarrow>\n  real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n  < real (n - 2) / 2\n  \\<lbrakk>\\<not> prime n; \\<not> Carmichael_number n; odd n; 1 < n\\<rbrakk>\n  \\<Longrightarrow> real\n                     (card\n                       {a. 2 \\<le> a \\<and>\n                           a < n \\<and> strong_fermat_liar a n})\n                    < real (n - 2) / 2\n  odd n\n  2 < n\n  \\<not> prime n\n\ngoal (1 subgoal):\n 1. real (card {a. 2 \\<le> a \\<and> a < n \\<and> strong_fermat_liar a n})\n    < real (n - 2) / 2", "by (cases \"Carmichael_number n\") auto"], ["", "end"]]}