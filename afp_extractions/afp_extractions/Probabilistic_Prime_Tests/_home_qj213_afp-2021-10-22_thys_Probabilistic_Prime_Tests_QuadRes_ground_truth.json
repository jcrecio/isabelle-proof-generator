{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests/QuadRes.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests", "problem_names": ["lemma inj_on_QuadRes:\n  fixes p :: int\n  assumes \"prime p\"\n  shows \"inj_on (\\<lambda>x. x^2 mod p) {0..(p-1) div 2}\"", "lemma QuadRes_set_prime: \n  assumes \"prime p\" and \"odd p\"\n  shows \"{x . QuadRes p x \\<and> x \\<in> {0..<p}} = {x^2 mod p | x . x \\<in> {0..(p-1) div 2}}\"", "lemma not_QuadRes_ex_if_prime:\n  assumes \"prime p\" and \"odd p\"\n  shows \"\\<exists> x. \\<not>QuadRes p x\"", "lemma not_QuadRes_ex:\n  \"1 < p \\<Longrightarrow> odd p \\<Longrightarrow> \\<exists>x. \\<not>QuadRes p x\""], "translations": [["", "lemma inj_on_QuadRes:\n  fixes p :: int\n  assumes \"prime p\"\n  shows \"inj_on (\\<lambda>x. x^2 mod p) {0..(p-1) div 2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. x\\<^sup>2 mod p) {0..(p - 1) div 2}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..(p - 1) div 2}; y \\<in> {0..(p - 1) div 2};\n        x\\<^sup>2 mod p = y\\<^sup>2 mod p\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y :: int"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..(p - 1) div 2}; y \\<in> {0..(p - 1) div 2};\n        x\\<^sup>2 mod p = y\\<^sup>2 mod p\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume elem: \"x \\<in> {0..(p-1) div 2}\" \"y \\<in> {0..(p-1) div 2}\""], ["proof (state)\nthis:\n  x \\<in> {0..(p - 1) div 2}\n  y \\<in> {0..(p - 1) div 2}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..(p - 1) div 2}; y \\<in> {0..(p - 1) div 2};\n        x\\<^sup>2 mod p = y\\<^sup>2 mod p\\<rbrakk>\n       \\<Longrightarrow> x = y", "have * : \"abs(a) < p \\<Longrightarrow> p dvd a \\<Longrightarrow> a = 0\" for a :: int"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<bar>a\\<bar> < p; p dvd a\\<rbrakk> \\<Longrightarrow> a = 0", "using dvd_imp_le_int"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<noteq> 0; ?d dvd ?i\\<rbrakk>\n  \\<Longrightarrow> \\<bar>?d\\<bar> \\<le> \\<bar>?i\\<bar>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<bar>a\\<bar> < p; p dvd a\\<rbrakk> \\<Longrightarrow> a = 0", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>\\<bar>?a\\<bar> < p; p dvd ?a\\<rbrakk> \\<Longrightarrow> ?a = 0\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..(p - 1) div 2}; y \\<in> {0..(p - 1) div 2};\n        x\\<^sup>2 mod p = y\\<^sup>2 mod p\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"x\\<^sup>2 mod p = y\\<^sup>2 mod p\""], ["proof (state)\nthis:\n  x\\<^sup>2 mod p = y\\<^sup>2 mod p\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..(p - 1) div 2}; y \\<in> {0..(p - 1) div 2};\n        x\\<^sup>2 mod p = y\\<^sup>2 mod p\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"[x\\<^sup>2 = y\\<^sup>2] (mod p)\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 mod p = y\\<^sup>2 mod p\n\ngoal (1 subgoal):\n 1. [x\\<^sup>2 = y\\<^sup>2] (mod p)", "unfolding cong_def"], ["proof (prove)\nusing this:\n  x\\<^sup>2 mod p = y\\<^sup>2 mod p\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 mod p = y\\<^sup>2 mod p", "."], ["proof (state)\nthis:\n  [x\\<^sup>2 = y\\<^sup>2] (mod p)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..(p - 1) div 2}; y \\<in> {0..(p - 1) div 2};\n        x\\<^sup>2 mod p = y\\<^sup>2 mod p\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"p dvd (x\\<^sup>2 - y\\<^sup>2)\""], ["proof (prove)\nusing this:\n  [x\\<^sup>2 = y\\<^sup>2] (mod p)\n\ngoal (1 subgoal):\n 1. p dvd x\\<^sup>2 - y\\<^sup>2", "by (simp add: cong_iff_dvd_diff)"], ["proof (state)\nthis:\n  p dvd x\\<^sup>2 - y\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..(p - 1) div 2}; y \\<in> {0..(p - 1) div 2};\n        x\\<^sup>2 mod p = y\\<^sup>2 mod p\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"p dvd (x + y) * (x - y)\""], ["proof (prove)\nusing this:\n  p dvd x\\<^sup>2 - y\\<^sup>2\n\ngoal (1 subgoal):\n 1. p dvd (x + y) * (x - y)", "by (simp add: power2_eq_square square_diff_square_factored)"], ["proof (state)\nthis:\n  p dvd (x + y) * (x - y)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..(p - 1) div 2}; y \\<in> {0..(p - 1) div 2};\n        x\\<^sup>2 mod p = y\\<^sup>2 mod p\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"p dvd (x + y) \\<or> p dvd (x - y)\""], ["proof (prove)\nusing this:\n  p dvd (x + y) * (x - y)\n\ngoal (1 subgoal):\n 1. p dvd x + y \\<or> p dvd x - y", "using \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  p dvd (x + y) * (x - y)\n  prime p\n\ngoal (1 subgoal):\n 1. p dvd x + y \\<or> p dvd x - y", "by (simp add: prime_dvd_mult_iff)"], ["proof (state)\nthis:\n  p dvd x + y \\<or> p dvd x - y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..(p - 1) div 2}; y \\<in> {0..(p - 1) div 2};\n        x\\<^sup>2 mod p = y\\<^sup>2 mod p\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  p dvd x + y \\<or> p dvd x - y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..(p - 1) div 2}; y \\<in> {0..(p - 1) div 2};\n        x\\<^sup>2 mod p = y\\<^sup>2 mod p\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"p dvd x + y \\<Longrightarrow> x + y = 0\" \"p dvd x - y \\<Longrightarrow> x - y = 0\" \n           and \"0 \\<le> x\" \"0 \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((p dvd x + y \\<Longrightarrow> x + y = 0) &&&\n     (p dvd x - y \\<Longrightarrow> x - y = 0)) &&&\n    0 \\<le> x &&& 0 \\<le> y", "using elem"], ["proof (prove)\nusing this:\n  x \\<in> {0..(p - 1) div 2}\n  y \\<in> {0..(p - 1) div 2}\n\ngoal (1 subgoal):\n 1. ((p dvd x + y \\<Longrightarrow> x + y = 0) &&&\n     (p dvd x - y \\<Longrightarrow> x - y = 0)) &&&\n    0 \\<le> x &&& 0 \\<le> y", "by (fastforce intro!: * )+"], ["proof (state)\nthis:\n  p dvd x + y \\<Longrightarrow> x + y = 0\n  p dvd x - y \\<Longrightarrow> x - y = 0\n  0 \\<le> x\n  0 \\<le> y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..(p - 1) div 2}; y \\<in> {0..(p - 1) div 2};\n        x\\<^sup>2 mod p = y\\<^sup>2 mod p\\<rbrakk>\n       \\<Longrightarrow> x = y", "ultimately"], ["proof (chain)\npicking this:\n  p dvd x + y \\<or> p dvd x - y\n  p dvd x + y \\<Longrightarrow> x + y = 0\n  p dvd x - y \\<Longrightarrow> x - y = 0\n  0 \\<le> x\n  0 \\<le> y", "show \"x = y\""], ["proof (prove)\nusing this:\n  p dvd x + y \\<or> p dvd x - y\n  p dvd x + y \\<Longrightarrow> x + y = 0\n  p dvd x - y \\<Longrightarrow> x - y = 0\n  0 \\<le> x\n  0 \\<le> y\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma QuadRes_set_prime: \n  assumes \"prime p\" and \"odd p\"\n  shows \"{x . QuadRes p x \\<and> x \\<in> {0..<p}} = {x^2 mod p | x . x \\<in> {0..(p-1) div 2}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n    {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}}", "proof(safe, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>QuadRes p x; x \\<in> {0..<p}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            x = xa\\<^sup>2 mod p \\<and>\n                            xa \\<in> {0..(p - 1) div 2}\n 2. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       QuadRes p (xa\\<^sup>2 mod p)\n 3. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       xa\\<^sup>2 mod p \\<in> {0..<p}", "case (1 x)"], ["proof (state)\nthis:\n  QuadRes p x\n  x \\<in> {0..<p}\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>QuadRes p x; x \\<in> {0..<p}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            x = xa\\<^sup>2 mod p \\<and>\n                            xa \\<in> {0..(p - 1) div 2}\n 2. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       QuadRes p (xa\\<^sup>2 mod p)\n 3. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       xa\\<^sup>2 mod p \\<in> {0..<p}", "then"], ["proof (chain)\npicking this:\n  QuadRes p x\n  x \\<in> {0..<p}", "obtain y where \"[y\\<^sup>2 = x] (mod p)\""], ["proof (prove)\nusing this:\n  QuadRes p x\n  x \\<in> {0..<p}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        [y\\<^sup>2 = x] (mod p) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding QuadRes_def"], ["proof (prove)\nusing this:\n  \\<exists>y. [y\\<^sup>2 = x] (mod p)\n  x \\<in> {0..<p}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        [y\\<^sup>2 = x] (mod p) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  [y\\<^sup>2 = x] (mod p)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>QuadRes p x; x \\<in> {0..<p}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            x = xa\\<^sup>2 mod p \\<and>\n                            xa \\<in> {0..(p - 1) div 2}\n 2. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       QuadRes p (xa\\<^sup>2 mod p)\n 3. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       xa\\<^sup>2 mod p \\<in> {0..<p}", "then"], ["proof (chain)\npicking this:\n  [y\\<^sup>2 = x] (mod p)", "have A: \"[(y mod p)\\<^sup>2 = x] (mod p)\""], ["proof (prove)\nusing this:\n  [y\\<^sup>2 = x] (mod p)\n\ngoal (1 subgoal):\n 1. [(y mod p)\\<^sup>2 = x] (mod p)", "unfolding cong_def"], ["proof (prove)\nusing this:\n  y\\<^sup>2 mod p = x mod p\n\ngoal (1 subgoal):\n 1. (y mod p)\\<^sup>2 mod p = x mod p", "by (simp add: power_mod)"], ["proof (state)\nthis:\n  [(y mod p)\\<^sup>2 = x] (mod p)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>QuadRes p x; x \\<in> {0..<p}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            x = xa\\<^sup>2 mod p \\<and>\n                            xa \\<in> {0..(p - 1) div 2}\n 2. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       QuadRes p (xa\\<^sup>2 mod p)\n 3. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       xa\\<^sup>2 mod p \\<in> {0..<p}", "then"], ["proof (chain)\npicking this:\n  [(y mod p)\\<^sup>2 = x] (mod p)", "have \"[(-(y mod p))\\<^sup>2 = x] (mod p)\""], ["proof (prove)\nusing this:\n  [(y mod p)\\<^sup>2 = x] (mod p)\n\ngoal (1 subgoal):\n 1. [(- (y mod p))\\<^sup>2 = x] (mod p)", "by simp"], ["proof (state)\nthis:\n  [(- (y mod p))\\<^sup>2 = x] (mod p)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>QuadRes p x; x \\<in> {0..<p}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            x = xa\\<^sup>2 mod p \\<and>\n                            xa \\<in> {0..(p - 1) div 2}\n 2. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       QuadRes p (xa\\<^sup>2 mod p)\n 3. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       xa\\<^sup>2 mod p \\<in> {0..<p}", "then"], ["proof (chain)\npicking this:\n  [(- (y mod p))\\<^sup>2 = x] (mod p)", "have B: \"[(p - (y mod p))\\<^sup>2 = x] (mod p)\""], ["proof (prove)\nusing this:\n  [(- (y mod p))\\<^sup>2 = x] (mod p)\n\ngoal (1 subgoal):\n 1. [(p - y mod p)\\<^sup>2 = x] (mod p)", "unfolding cong_def"], ["proof (prove)\nusing this:\n  (- (y mod p))\\<^sup>2 mod p = x mod p\n\ngoal (1 subgoal):\n 1. (p - y mod p)\\<^sup>2 mod p = x mod p", "using minus_mod_self1"], ["proof (prove)\nusing this:\n  (- (y mod p))\\<^sup>2 mod p = x mod p\n  (?b - ?a) mod ?b = - ?a mod ?b\n\ngoal (1 subgoal):\n 1. (p - y mod p)\\<^sup>2 mod p = x mod p", "by (metis power_mod)"], ["proof (state)\nthis:\n  [(p - y mod p)\\<^sup>2 = x] (mod p)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>QuadRes p x; x \\<in> {0..<p}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            x = xa\\<^sup>2 mod p \\<and>\n                            xa \\<in> {0..(p - 1) div 2}\n 2. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       QuadRes p (xa\\<^sup>2 mod p)\n 3. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       xa\\<^sup>2 mod p \\<in> {0..<p}", "have \"p = 1 + ((p - 1) div 2) * 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = 1 + (p - 1) div 2 * 2", "using prime_gt_0_int[OF \\<open>prime p\\<close>] \\<open>odd p\\<close>"], ["proof (prove)\nusing this:\n  0 < p\n  odd p\n\ngoal (1 subgoal):\n 1. p = 1 + (p - 1) div 2 * 2", "by simp"], ["proof (state)\nthis:\n  p = 1 + (p - 1) div 2 * 2\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>QuadRes p x; x \\<in> {0..<p}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            x = xa\\<^sup>2 mod p \\<and>\n                            xa \\<in> {0..(p - 1) div 2}\n 2. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       QuadRes p (xa\\<^sup>2 mod p)\n 3. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       xa\\<^sup>2 mod p \\<in> {0..<p}", "then"], ["proof (chain)\npicking this:\n  p = 1 + (p - 1) div 2 * 2", "have C: \"(p - (y mod p)) \\<in> {0..(p - 1) div 2} \\<or> y mod p \\<in> {0..(p - 1) div 2}\""], ["proof (prove)\nusing this:\n  p = 1 + (p - 1) div 2 * 2\n\ngoal (1 subgoal):\n 1. p - y mod p \\<in> {0..(p - 1) div 2} \\<or>\n    y mod p \\<in> {0..(p - 1) div 2}", "using prime_gt_0_int[OF \\<open>prime p\\<close>]"], ["proof (prove)\nusing this:\n  p = 1 + (p - 1) div 2 * 2\n  0 < p\n\ngoal (1 subgoal):\n 1. p - y mod p \\<in> {0..(p - 1) div 2} \\<or>\n    y mod p \\<in> {0..(p - 1) div 2}", "by (clarsimp, auto simp: le_less)"], ["proof (state)\nthis:\n  p - y mod p \\<in> {0..(p - 1) div 2} \\<or>\n  y mod p \\<in> {0..(p - 1) div 2}\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>QuadRes p x; x \\<in> {0..<p}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            x = xa\\<^sup>2 mod p \\<and>\n                            xa \\<in> {0..(p - 1) div 2}\n 2. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       QuadRes p (xa\\<^sup>2 mod p)\n 3. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       xa\\<^sup>2 mod p \\<in> {0..<p}", "then"], ["proof (chain)\npicking this:\n  p - y mod p \\<in> {0..(p - 1) div 2} \\<or>\n  y mod p \\<in> {0..(p - 1) div 2}", "show ?case"], ["proof (prove)\nusing this:\n  p - y mod p \\<in> {0..(p - 1) div 2} \\<or>\n  y mod p \\<in> {0..(p - 1) div 2}\n\ngoal (1 subgoal):\n 1. \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p - y mod p \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n    \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}\n 2. y mod p \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n    \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}", "show ?thesis if \"p - y mod p \\<in> {0..(p - 1) div 2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}", "using that B"], ["proof (prove)\nusing this:\n  p - y mod p \\<in> {0..(p - 1) div 2}\n  [(p - y mod p)\\<^sup>2 = x] (mod p)\n\ngoal (1 subgoal):\n 1. \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}", "unfolding cong_def"], ["proof (prove)\nusing this:\n  p - y mod p \\<in> {0..(p - 1) div 2}\n  (p - y mod p)\\<^sup>2 mod p = x mod p\n\ngoal (1 subgoal):\n 1. \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}", "using \\<open>x \\<in> {0..<p}\\<close>"], ["proof (prove)\nusing this:\n  p - y mod p \\<in> {0..(p - 1) div 2}\n  (p - y mod p)\\<^sup>2 mod p = x mod p\n  x \\<in> {0..<p}\n\ngoal (1 subgoal):\n 1. \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}", "by auto"], ["proof (state)\nthis:\n  p - y mod p \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n  \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}\n\ngoal (1 subgoal):\n 1. y mod p \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n    \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}", "show ?thesis if \"y mod p \\<in> {0..(p - 1) div 2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}", "using that A"], ["proof (prove)\nusing this:\n  y mod p \\<in> {0..(p - 1) div 2}\n  [(y mod p)\\<^sup>2 = x] (mod p)\n\ngoal (1 subgoal):\n 1. \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}", "unfolding cong_def"], ["proof (prove)\nusing this:\n  y mod p \\<in> {0..(p - 1) div 2}\n  (y mod p)\\<^sup>2 mod p = x mod p\n\ngoal (1 subgoal):\n 1. \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}", "using \\<open>x \\<in> {0..<p}\\<close>"], ["proof (prove)\nusing this:\n  y mod p \\<in> {0..(p - 1) div 2}\n  (y mod p)\\<^sup>2 mod p = x mod p\n  x \\<in> {0..<p}\n\ngoal (1 subgoal):\n 1. \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}", "by auto"], ["proof (state)\nthis:\n  y mod p \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n  \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xa. x = xa\\<^sup>2 mod p \\<and> xa \\<in> {0..(p - 1) div 2}\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       QuadRes p (xa\\<^sup>2 mod p)\n 2. \\<And>x xa.\n       xa \\<in> {0..(p - 1) div 2} \\<Longrightarrow>\n       xa\\<^sup>2 mod p \\<in> {0..<p}", "qed (auto simp: QuadRes_def cong_def)"], ["", "corollary QuadRes_iff: \n  assumes \"prime p\" and \"odd p\"\n  shows \"(QuadRes p x \\<and> x \\<in> {0..<p}) \\<longleftrightarrow> (\\<exists> a \\<in> {0..(p-1) div 2}. a^2 mod p = x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (QuadRes p x \\<and> x \\<in> {0..<p}) =\n    (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (QuadRes p x \\<and> x \\<in> {0..<p}) =\n    (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)", "have \"(QuadRes p x \\<and> x \\<in> {0..<p}) \\<longleftrightarrow> x \\<in> {x. QuadRes p x \\<and> x \\<in> {0..<p}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (QuadRes p x \\<and> x \\<in> {0..<p}) =\n    (x \\<in> {x. QuadRes p x \\<and> x \\<in> {0..<p}})", "by auto"], ["proof (state)\nthis:\n  (QuadRes p x \\<and> x \\<in> {0..<p}) =\n  (x \\<in> {x. QuadRes p x \\<and> x \\<in> {0..<p}})\n\ngoal (1 subgoal):\n 1. (QuadRes p x \\<and> x \\<in> {0..<p}) =\n    (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)", "also"], ["proof (state)\nthis:\n  (QuadRes p x \\<and> x \\<in> {0..<p}) =\n  (x \\<in> {x. QuadRes p x \\<and> x \\<in> {0..<p}})\n\ngoal (1 subgoal):\n 1. (QuadRes p x \\<and> x \\<in> {0..<p}) =\n    (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)", "note QuadRes_set_prime[OF assms]"], ["proof (state)\nthis:\n  {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n  {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}}\n\ngoal (1 subgoal):\n 1. (QuadRes p x \\<and> x \\<in> {0..<p}) =\n    (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)", "also"], ["proof (state)\nthis:\n  {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n  {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}}\n\ngoal (1 subgoal):\n 1. (QuadRes p x \\<and> x \\<in> {0..<p}) =\n    (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)", "have \"(x \\<in> {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}}) = (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}}) =\n    (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)", "by blast"], ["proof (state)\nthis:\n  (x \\<in> {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}}) =\n  (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)\n\ngoal (1 subgoal):\n 1. (QuadRes p x \\<and> x \\<in> {0..<p}) =\n    (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)", "finally"], ["proof (chain)\npicking this:\n  (QuadRes p x \\<and> x \\<in> {0..<p}) =\n  (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)", "show ?thesis"], ["proof (prove)\nusing this:\n  (QuadRes p x \\<and> x \\<in> {0..<p}) =\n  (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)\n\ngoal (1 subgoal):\n 1. (QuadRes p x \\<and> x \\<in> {0..<p}) =\n    (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)", "."], ["proof (state)\nthis:\n  (QuadRes p x \\<and> x \\<in> {0..<p}) =\n  (\\<exists>a\\<in>{0..(p - 1) div 2}. a\\<^sup>2 mod p = x)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary card_QuadRes_set_prime:\n  fixes p :: int\n  assumes \"prime p\" and \"odd p\"\n  shows \"card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p+1) div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2", "have \"card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = card {x\\<^sup>2 mod p | x . x \\<in> {0..(p-1) div 2}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n    card {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}}", "unfolding QuadRes_set_prime[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}} =\n    card {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}}", ".."], ["proof (state)\nthis:\n  card {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n  card {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}}\n\ngoal (1 subgoal):\n 1. card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2", "also"], ["proof (state)\nthis:\n  card {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n  card {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}}\n\ngoal (1 subgoal):\n 1. card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2", "have \"{x\\<^sup>2 mod p | x . x \\<in> {0..(p-1) div 2}} = (\\<lambda>x. x\\<^sup>2 mod p) ` {0..(p-1) div 2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}} =\n    (\\<lambda>x. x\\<^sup>2 mod p) ` {0..(p - 1) div 2}", "by auto"], ["proof (state)\nthis:\n  {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}} =\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..(p - 1) div 2}\n\ngoal (1 subgoal):\n 1. card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2", "also"], ["proof (state)\nthis:\n  {x\\<^sup>2 mod p |x. x \\<in> {0..(p - 1) div 2}} =\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..(p - 1) div 2}\n\ngoal (1 subgoal):\n 1. card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2", "have \"card ... = card {0..(p-1) div 2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..(p - 1) div 2}) =\n    card {0..(p - 1) div 2}", "using inj_on_QuadRes[OF \\<open>prime p\\<close>]"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>x. x\\<^sup>2 mod p) {0..(p - 1) div 2}\n\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..(p - 1) div 2}) =\n    card {0..(p - 1) div 2}", "by (rule card_image)"], ["proof (state)\nthis:\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..(p - 1) div 2}) =\n  card {0..(p - 1) div 2}\n\ngoal (1 subgoal):\n 1. card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2", "also"], ["proof (state)\nthis:\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..(p - 1) div 2}) =\n  card {0..(p - 1) div 2}\n\ngoal (1 subgoal):\n 1. card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2", "have \"... = nat (p+1) div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {0..(p - 1) div 2} = nat (p + 1) div 2", "by simp"], ["proof (state)\nthis:\n  card {0..(p - 1) div 2} = nat (p + 1) div 2\n\ngoal (1 subgoal):\n 1. card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2", "finally"], ["proof (chain)\npicking this:\n  card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2", "show ?thesis"], ["proof (prove)\nusing this:\n  card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2\n\ngoal (1 subgoal):\n 1. card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2", "."], ["proof (state)\nthis:\n  card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary card_not_QuadRes_set_prime:\n  fixes p :: int\n  assumes \"prime p\" and \"odd p\"\n  shows \"card {x. \\<not>QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p-1) div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p - 1) div 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p - 1) div 2", "have \"{0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}} = {x. QuadRes p x \\<and> x \\<in> {0..<p}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n    {x. QuadRes p x \\<and> x \\<in> {0..<p}}", "by blast"], ["proof (state)\nthis:\n  {0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n  {x. QuadRes p x \\<and> x \\<in> {0..<p}}\n\ngoal (1 subgoal):\n 1. card {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p - 1) div 2", "moreover"], ["proof (state)\nthis:\n  {0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n  {x. QuadRes p x \\<and> x \\<in> {0..<p}}\n\ngoal (1 subgoal):\n 1. card {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p - 1) div 2", "have \"nat p - nat (p + 1) div 2 = nat (p - 1) div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat p - nat (p + 1) div 2 = nat (p - 1) div 2", "using \\<open>odd p\\<close> prime_gt_0_int[OF \\<open>prime p\\<close>]"], ["proof (prove)\nusing this:\n  odd p\n  0 < p\n\ngoal (1 subgoal):\n 1. nat p - nat (p + 1) div 2 = nat (p - 1) div 2", "by (auto elim!: oddE simp: nat_add_distrib nat_mult_distrib)"], ["proof (state)\nthis:\n  nat p - nat (p + 1) div 2 = nat (p - 1) div 2\n\ngoal (1 subgoal):\n 1. card {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p - 1) div 2", "ultimately"], ["proof (chain)\npicking this:\n  {0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n  {x. QuadRes p x \\<and> x \\<in> {0..<p}}\n  nat p - nat (p + 1) div 2 = nat (p - 1) div 2", "have \"card {0..<p} - card ({0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}}) = nat (p - 1) div 2\""], ["proof (prove)\nusing this:\n  {0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n  {x. QuadRes p x \\<and> x \\<in> {0..<p}}\n  nat p - nat (p + 1) div 2 = nat (p - 1) div 2\n\ngoal (1 subgoal):\n 1. card {0..<p} -\n    card ({0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}}) =\n    nat (p - 1) div 2", "using card_QuadRes_set_prime[OF assms] and card_atLeastZeroLessThan_int"], ["proof (prove)\nusing this:\n  {0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}} =\n  {x. QuadRes p x \\<and> x \\<in> {0..<p}}\n  nat p - nat (p + 1) div 2 = nat (p - 1) div 2\n  card {x. QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p + 1) div 2\n  card {0..<?u} = nat ?u\n\ngoal (1 subgoal):\n 1. card {0..<p} -\n    card ({0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}}) =\n    nat (p - 1) div 2", "by presburger"], ["proof (state)\nthis:\n  card {0..<p} -\n  card ({0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}}) =\n  nat (p - 1) div 2\n\ngoal (1 subgoal):\n 1. card {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p - 1) div 2", "moreover"], ["proof (state)\nthis:\n  card {0..<p} -\n  card ({0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}}) =\n  nat (p - 1) div 2\n\ngoal (1 subgoal):\n 1. card {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p - 1) div 2", "have \"{x. \\<not>QuadRes p x \\<and> x \\<in> {0..<p}} = {0..<p} - {x. QuadRes p x \\<and> x \\<in> {0..<p}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} =\n    {0..<p} - {x. QuadRes p x \\<and> x \\<in> {0..<p}}", "by blast"], ["proof (state)\nthis:\n  {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} =\n  {0..<p} - {x. QuadRes p x \\<and> x \\<in> {0..<p}}\n\ngoal (1 subgoal):\n 1. card {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p - 1) div 2", "ultimately"], ["proof (chain)\npicking this:\n  card {0..<p} -\n  card ({0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}}) =\n  nat (p - 1) div 2\n  {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} =\n  {0..<p} - {x. QuadRes p x \\<and> x \\<in> {0..<p}}", "show ?thesis"], ["proof (prove)\nusing this:\n  card {0..<p} -\n  card ({0..<p} \\<inter> {x. QuadRes p x \\<and> x \\<in> {0..<p}}) =\n  nat (p - 1) div 2\n  {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} =\n  {0..<p} - {x. QuadRes p x \\<and> x \\<in> {0..<p}}\n\ngoal (1 subgoal):\n 1. card {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p - 1) div 2", "by (auto simp add: card_Diff_subset_Int)"], ["proof (state)\nthis:\n  card {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p - 1) div 2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_QuadRes_ex_if_prime:\n  assumes \"prime p\" and \"odd p\"\n  shows \"\\<exists> x. \\<not>QuadRes p x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<not> QuadRes p x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<not> QuadRes p x", "have \"2 < p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 < p", "using odd_prime_gt_2_int assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>odd ?p; prime ?p\\<rbrakk> \\<Longrightarrow> 2 < ?p\n  prime p\n  odd p\n\ngoal (1 subgoal):\n 1. 2 < p", "by blast"], ["proof (state)\nthis:\n  2 < p\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<not> QuadRes p x", "then"], ["proof (chain)\npicking this:\n  2 < p", "have False if \"{x . \\<not>QuadRes p x \\<and> x \\<in> {0..<p}} = {}\""], ["proof (prove)\nusing this:\n  2 < p\n\ngoal (1 subgoal):\n 1. False", "using card_not_QuadRes_set_prime[OF assms]"], ["proof (prove)\nusing this:\n  2 < p\n  card {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = nat (p - 1) div 2\n\ngoal (1 subgoal):\n 1. False", "unfolding that"], ["proof (prove)\nusing this:\n  2 < p\n  card {} = nat (p - 1) div 2\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = {} \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<not> QuadRes p x", "thus ?thesis"], ["proof (prove)\nusing this:\n  {x. \\<not> QuadRes p x \\<and> x \\<in> {0..<p}} = {} \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<not> QuadRes p x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. \\<not> QuadRes p x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_QuadRes_ex:\n  \"1 < p \\<Longrightarrow> odd p \\<Longrightarrow> \\<exists>x. \\<not>QuadRes p x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < p; odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. \\<not> QuadRes p x", "proof (induction p rule: prime_divisors_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>1 < 0; odd 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. \\<not> QuadRes 0 x\n 2. \\<And>x.\n       \\<lbrakk>is_unit x; 1 < x; odd x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. \\<not> QuadRes x xa\n 3. \\<And>p x.\n       \\<lbrakk>prime p;\n        \\<lbrakk>1 < x; odd x\\<rbrakk>\n        \\<Longrightarrow> \\<exists>xa. \\<not> QuadRes x xa;\n        1 < p * x; odd (p * x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. \\<not> QuadRes (p * x) xa", "case (factor p x)"], ["proof (state)\nthis:\n  prime p\n  \\<lbrakk>1 < x; odd x\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa. \\<not> QuadRes x xa\n  1 < p * x\n  odd (p * x)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>1 < 0; odd 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. \\<not> QuadRes 0 x\n 2. \\<And>x.\n       \\<lbrakk>is_unit x; 1 < x; odd x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. \\<not> QuadRes x xa\n 3. \\<And>p x.\n       \\<lbrakk>prime p;\n        \\<lbrakk>1 < x; odd x\\<rbrakk>\n        \\<Longrightarrow> \\<exists>xa. \\<not> QuadRes x xa;\n        1 < p * x; odd (p * x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. \\<not> QuadRes (p * x) xa", "then"], ["proof (chain)\npicking this:\n  prime p\n  \\<lbrakk>1 < x; odd x\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa. \\<not> QuadRes x xa\n  1 < p * x\n  odd (p * x)", "show ?case"], ["proof (prove)\nusing this:\n  prime p\n  \\<lbrakk>1 < x; odd x\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa. \\<not> QuadRes x xa\n  1 < p * x\n  odd (p * x)\n\ngoal (1 subgoal):\n 1. \\<exists>xa. \\<not> QuadRes (p * x) xa", "by (meson not_QuadRes_ex_if_prime QuadRes_def cong_iff_dvd_diff dvd_mult_left even_mult_iff)"], ["proof (state)\nthis:\n  \\<exists>xa. \\<not> QuadRes (p * x) xa\n\ngoal (2 subgoals):\n 1. \\<lbrakk>1 < 0; odd 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. \\<not> QuadRes 0 x\n 2. \\<And>x.\n       \\<lbrakk>is_unit x; 1 < x; odd x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. \\<not> QuadRes x xa", "qed simp_all"], ["", "end"]]}