{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests/Fermat_Test.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_Prime_Tests", "problem_names": ["lemma not_coprime_imp_fermat_witness:\n  fixes n :: nat\n  assumes \"n > 1\" \"\\<not>coprime a n\"\n  shows   \"fermat_witness a n\"", "theorem fermat_test_prime:\n  assumes \"prime n\"\n  shows   \"fermat_test n = return_pmf True\"", "theorem fermat_test_composite:\n  assumes \"\\<not>prime n\" \"\\<not>Carmichael_number n \\<or> n < 3\"\n  shows   \"pmf (fermat_test n) True < 1 / 2\"", "theorem fermat_test_Carmichael_number:\n  assumes \"Carmichael_number n\"\n  shows   \"fermat_test n = bernoulli_pmf (real (totient n - 1) / real (n - 2))\""], "translations": [["", "lemma not_coprime_imp_fermat_witness:\n  fixes n :: nat\n  assumes \"n > 1\" \"\\<not>coprime a n\"\n  shows   \"fermat_witness a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fermat_witness a n", "using assms lucas_coprime_lemma[of \"n - 1\" a n]"], ["proof (prove)\nusing this:\n  1 < n\n  \\<not> coprime a n\n  \\<lbrakk>n - 1 \\<noteq> 0; [a ^ (n - 1) = 1] (mod n)\\<rbrakk>\n  \\<Longrightarrow> coprime a n\n\ngoal (1 subgoal):\n 1. fermat_witness a n", "by (auto simp: fermat_witness_def)"], ["", "theorem fermat_test_prime:\n  assumes \"prime n\"\n  shows   \"fermat_test n = return_pmf True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fermat_test n = return_pmf True", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fermat_test n = return_pmf True", "interpret fermat_test_not_Carmichael_number n"], ["proof (prove)\ngoal (1 subgoal):\n 1. fermat_test_not_Carmichael_number n", "using assms Carmichael_number_not_prime"], ["proof (prove)\nusing this:\n  prime n\n  Carmichael_number ?n \\<Longrightarrow> \\<not> prime ?n\n\ngoal (1 subgoal):\n 1. fermat_test_not_Carmichael_number n", "by unfold_locales auto"], ["proof (state)\ngoal (1 subgoal):\n 1. fermat_test n = return_pmf True", "from assms"], ["proof (chain)\npicking this:\n  prime n", "show ?thesis"], ["proof (prove)\nusing this:\n  prime n\n\ngoal (1 subgoal):\n 1. fermat_test n = return_pmf True", "by (rule fermat_test.prime)"], ["proof (state)\nthis:\n  fermat_test n = return_pmf True\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem fermat_test_composite:\n  assumes \"\\<not>prime n\" \"\\<not>Carmichael_number n \\<or> n < 3\"\n  shows   \"pmf (fermat_test n) True < 1 / 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True < 1 / 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True < 1 / 2", "interpret fermat_test_not_Carmichael_number n"], ["proof (prove)\ngoal (1 subgoal):\n 1. fermat_test_not_Carmichael_number n", "by unfold_locales fact+"], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True < 1 / 2", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<not> prime n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> prime n\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True < 1 / 2", "by (rule fermat_test.composite)"], ["proof (state)\nthis:\n  pmf (fermat_test n) True < 1 / 2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  For a Carmichael number $n$, Fermat's test as defined above mistakenly returns `True'\n  with probability $(\\varphi(n)-1) / (n - 2)$. This probability is close to 1 if \\<open>n\\<close>\n  has few and big prime factors; it is not quite as bad if it has many and/or small factors,\n  but in that case, simple trial division can also detect compositeness.\n\n  Moreover, Fermat's test only succeeds for a Carmichael number if it happens to guess a\n  number that is not coprime to \\<open>n\\<close>. In that case, the fact that we have found\n  a number between 2 and \\<open>n\\<close> that is not coprime to \\<open>n\\<close> alone is \n  proof that \\<open>n\\<close> is composite, and indeed we can even find a non-trivial factor\n  by computing the GCD. This means that for Carmichael numbers, Fermat's test is essentially\n  no better than the very crude method of attempting to guess numbers coprime to \\<open>n\\<close>.\n\n  This means that, in general, Fermat's test is not very helpful for Carmichael numbers.\n\\<close>"], ["", "theorem fermat_test_Carmichael_number:\n  assumes \"Carmichael_number n\"\n  shows   \"fermat_test n = bernoulli_pmf (real (totient n - 1) / real (n - 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fermat_test n = bernoulli_pmf (real (totient n - 1) / real (n - 2))", "proof (rule eq_bernoulli_pmfI)"], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "from assms"], ["proof (chain)\npicking this:\n  Carmichael_number n", "have n: \"n > 3\" \"odd n\""], ["proof (prove)\nusing this:\n  Carmichael_number n\n\ngoal (1 subgoal):\n 1. 3 < n &&& odd n", "using Carmichael_number_odd Carmichael_number_gt_3"], ["proof (prove)\nusing this:\n  Carmichael_number n\n  Carmichael_number ?n \\<Longrightarrow> odd ?n\n  Carmichael_number ?n \\<Longrightarrow> 3 < ?n\n\ngoal (1 subgoal):\n 1. 3 < n &&& odd n", "by auto"], ["proof (state)\nthis:\n  3 < n\n  odd n\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "from n"], ["proof (chain)\npicking this:\n  3 < n\n  odd n", "have \"fermat_test n = pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (fermat_liar a n))\""], ["proof (prove)\nusing this:\n  3 < n\n  odd n\n\ngoal (1 subgoal):\n 1. fermat_test n =\n    pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (fermat_liar a n))", "by (simp add: fermat_test_def primality_test_def)"], ["proof (state)\nthis:\n  fermat_test n =\n  pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (fermat_liar a n))\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "also"], ["proof (state)\nthis:\n  fermat_test n =\n  pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (fermat_liar a n))\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "have \"\\<dots> = pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (coprime a n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (fermat_liar a n)) =\n    pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (coprime a n))", "using n assms lucas_coprime_lemma[of \"n - 1\" _ n]"], ["proof (prove)\nusing this:\n  3 < n\n  odd n\n  Carmichael_number n\n  \\<lbrakk>n - 1 \\<noteq> 0; [?a ^ (n - 1) = 1] (mod n)\\<rbrakk>\n  \\<Longrightarrow> coprime ?a n\n\ngoal (1 subgoal):\n 1. pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (fermat_liar a n)) =\n    pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (coprime a n))", "by (intro bind_pmf_cong refl) (auto simp: Carmichael_number_def fermat_liar_def)"], ["proof (state)\nthis:\n  pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (fermat_liar a n)) =\n  pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (coprime a n))\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "also"], ["proof (state)\nthis:\n  pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (fermat_liar a n)) =\n  pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (coprime a n))\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "have \"pmf \\<dots> True = (\\<Sum>a=2..<n. indicat_real {True} (coprime a n)) / real (n - 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (coprime a n)))\n     True =\n    (\\<Sum>a = 2..<n. indicat_real {True} (coprime a n)) / real (n - 2)", "using n"], ["proof (prove)\nusing this:\n  3 < n\n  odd n\n\ngoal (1 subgoal):\n 1. pmf (pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (coprime a n)))\n     True =\n    (\\<Sum>a = 2..<n. indicat_real {True} (coprime a n)) / real (n - 2)", "by (auto simp: pmf_bind_pmf_of_set)"], ["proof (state)\nthis:\n  pmf (pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (coprime a n)))\n   True =\n  (\\<Sum>a = 2..<n. indicat_real {True} (coprime a n)) / real (n - 2)\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "also"], ["proof (state)\nthis:\n  pmf (pmf_of_set {2..<n} \\<bind> (\\<lambda>a. return_pmf (coprime a n)))\n   True =\n  (\\<Sum>a = 2..<n. indicat_real {True} (coprime a n)) / real (n - 2)\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "have \"(\\<Sum>a=2..<n. indicat_real {True} (coprime a n)) =\n               (\\<Sum>a | a \\<in> {2..<n} \\<and> coprime a n. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>a = 2..<n. indicat_real {True} (coprime a n)) =\n    (\\<Sum>a | a \\<in> {2..<n} \\<and> coprime a n. 1)", "by (intro sum.mono_neutral_cong_right) auto"], ["proof (state)\nthis:\n  (\\<Sum>a = 2..<n. indicat_real {True} (coprime a n)) =\n  (\\<Sum>a | a \\<in> {2..<n} \\<and> coprime a n. 1)\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "also"], ["proof (state)\nthis:\n  (\\<Sum>a = 2..<n. indicat_real {True} (coprime a n)) =\n  (\\<Sum>a | a \\<in> {2..<n} \\<and> coprime a n. 1)\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "have \"\\<dots> = card {a\\<in>{2..<n}. coprime a n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>a | a \\<in> {2..<n} \\<and> coprime a n. 1) =\n    real (card {a \\<in> {2..<n}. coprime a n})", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>a | a \\<in> {2..<n} \\<and> coprime a n. 1) =\n  real (card {a \\<in> {2..<n}. coprime a n})\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "also"], ["proof (state)\nthis:\n  (\\<Sum>a | a \\<in> {2..<n} \\<and> coprime a n. 1) =\n  real (card {a \\<in> {2..<n}. coprime a n})\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "have \"{a\\<in>{2..<n}. coprime a n} = totatives n - {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> {2..<n}. coprime a n} = totatives n - {1}", "using n"], ["proof (prove)\nusing this:\n  3 < n\n  odd n\n\ngoal (1 subgoal):\n 1. {a \\<in> {2..<n}. coprime a n} = totatives n - {1}", "by (auto simp: totatives_def order.strict_iff_order[of _ n])"], ["proof (state)\nthis:\n  {a \\<in> {2..<n}. coprime a n} = totatives n - {1}\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "also"], ["proof (state)\nthis:\n  {a \\<in> {2..<n}. coprime a n} = totatives n - {1}\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "have \"card \\<dots> = totient n - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (totatives n - {1}) = totient n - 1", "using n"], ["proof (prove)\nusing this:\n  3 < n\n  odd n\n\ngoal (1 subgoal):\n 1. card (totatives n - {1}) = totient n - 1", "by (subst card_Diff_subset) (auto simp: totient_def)"], ["proof (state)\nthis:\n  card (totatives n - {1}) = totient n - 1\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "finally"], ["proof (chain)\npicking this:\n  pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "show \"pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)\""], ["proof (prove)\nusing this:\n  pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "using n"], ["proof (prove)\nusing this:\n  pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)\n  3 < n\n  odd n\n\ngoal (1 subgoal):\n 1. pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)", "by simp"], ["proof (state)\nthis:\n  pmf (fermat_test n) True = real (totient n - 1) / real (n - 2)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}