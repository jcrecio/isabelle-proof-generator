{"file_name": "/home/qj213/afp-2021-10-22/thys/Finger-Trees/FingerTree.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Finger-Trees", "problem_names": ["lemma nodeToList_empty: \"nodeToList nd \\<noteq> Nil\"", "lemma digitToList_empty: \"digitToList d \\<noteq> Nil\"", "lemma gmn_correct:\n  assumes \"is_measured_node nd\"\n  shows \"gmn nd = sum_list (map snd (nodeToList nd))\"", "lemma gmd_correct:\n  assumes \"is_measured_digit d\"\n  shows \"gmd d = sum_list (map snd (digitToList d))\"", "lemma gmft_correct: \"is_measured_ftree t \n  \\<Longrightarrow> (gmft t) = sum_list (map snd (toList t))\"", "lemma gmft_correct2: \"ft_invar t \\<Longrightarrow> (gmft t) = sum_list (map snd (toList t))\"", "lemma Empty_correct[simp]: \n  \"toList Empty = []\"\n  \"ft_invar Empty\"", "lemma toList_empty: \"toList t = [] \\<longleftrightarrow> t = Empty\"", "lemma annot_correct:\n  \"ft_invar t \\<Longrightarrow> annot t = sum_list (map snd (toList t))\"", "lemma nlcons_invlevel: \"\\<lbrakk>is_leveln_ftree n t; is_leveln_node n nd\\<rbrakk> \n  \\<Longrightarrow> is_leveln_ftree n (nlcons nd t)\"", "lemma nlcons_invmeas: \"\\<lbrakk>is_measured_ftree t; is_measured_node nd\\<rbrakk> \n  \\<Longrightarrow> is_measured_ftree (nlcons nd t)\"", "lemmas nlcons_inv = nlcons_invlevel nlcons_invmeas", "lemma nlcons_list: \"toList (nlcons a t) = (nodeToList a) @ (toList t)\"", "lemma nrcons_invlevel: \"\\<lbrakk>is_leveln_ftree n t; is_leveln_node n nd\\<rbrakk> \n  \\<Longrightarrow> is_leveln_ftree n (nrcons t nd)\"", "lemma nrcons_invmeas: \"\\<lbrakk>is_measured_ftree t; is_measured_node nd\\<rbrakk> \n  \\<Longrightarrow> is_measured_ftree (nrcons t nd)\"", "lemmas nrcons_inv = nrcons_invlevel nrcons_invmeas", "lemma nrcons_list: \"toList (nrcons t a) = (toList t) @ (nodeToList a)\"", "lemma lcons_correct: \n  assumes \"ft_invar t\" \n  shows \"ft_invar (a \\<lhd> t)\" and \"toList (a \\<lhd> t) = a # (toList t)\"", "lemma lcons_inv:\"ft_invar t \\<Longrightarrow> ft_invar (a \\<lhd> t)\"", "lemma lcons_list[simp]: \"toList (a \\<lhd> t) = a # (toList t)\"", "lemma rcons_correct: \n  assumes \"ft_invar t\" \n  shows \"ft_invar (t \\<rhd> a)\" and \"toList (t \\<rhd> a) = (toList t) @ [a]\"", "lemma rcons_inv:\"ft_invar t \\<Longrightarrow> ft_invar (t \\<rhd> a)\"", "lemma rcons_list[simp]: \"toList (t \\<rhd> a) = (toList t) @ [a]\"", "lemma toTree_correct[simp]:\n  \"ft_invar (toTree l)\"\n  \"toList (toTree l) = l\"", "lemma viewnres_cases:\n  fixes r :: \"('e,'a) ViewnRes\"\n  obtains (Nil) \"r=None\" |\n          (Cons) a t where \"r=Some (a,t)\"", "lemma viewnres_split: \n  \"P (case_option f1 (case_prod f2) x) = \n  ((x = None \\<longrightarrow> P f1) \\<and> (\\<forall>a b. x = Some (a,b) \\<longrightarrow> P (f2 a b)))\"", "lemma \n  digitToTree_inv: \"is_leveln_digit n d \\<Longrightarrow> is_leveln_ftree n (digitToTree d)\"\n  \"is_measured_digit d \\<Longrightarrow> is_measured_ftree (digitToTree d)\"", "lemma digitToTree_list: \"toList (digitToTree d) = digitToList d\"", "lemma nodeToDigit_inv:\n  \"is_leveln_node (Suc n) nd \\<Longrightarrow> is_leveln_digit n (nodeToDigit nd) \" \n  \"is_measured_node nd \\<Longrightarrow> is_measured_digit (nodeToDigit nd)\"", "lemma nodeToDigit_list: \"digitToList (nodeToDigit nd) = nodeToList nd\"", "lemma viewLn_empty: \"t \\<noteq> Empty \\<longleftrightarrow> (viewLn t) \\<noteq> None\"", "lemma viewLn_inv: \"\\<lbrakk>\n  is_measured_ftree t; is_leveln_ftree n t; viewLn t = Some (nd, s)\n  \\<rbrakk> \\<Longrightarrow> is_measured_ftree s \\<and> is_measured_node nd \\<and> \n        is_leveln_ftree n s \\<and> is_leveln_node n nd\"", "lemma viewLn_list: \" viewLn t = Some (nd, s) \n  \\<Longrightarrow> toList t = (nodeToList nd) @ (toList s)\"", "lemma viewRn_empty: \"t \\<noteq> Empty \\<longleftrightarrow> (viewRn t) \\<noteq> None\"", "lemma viewRn_inv: \"\\<lbrakk>\n  is_measured_ftree t; is_leveln_ftree n t; viewRn t = Some (nd, s)\n  \\<rbrakk> \\<Longrightarrow> is_measured_ftree s \\<and> is_measured_node nd \\<and> \n       is_leveln_ftree n s \\<and> is_leveln_node n nd\"", "lemma viewRn_list: \"viewRn t = Some (nd, s) \n  \\<Longrightarrow> toList t = (toList s) @ (nodeToList nd)\"", "lemma viewL_correct: \n  assumes INV: \"ft_invar t\" \n  shows\n  \"(t=Empty \\<Longrightarrow> viewL t = None)\"\n  \"(t\\<noteq>Empty \\<Longrightarrow> (\\<exists>a s. viewL t = Some (a, s) \\<and> ft_invar s \n                        \\<and> toList t = a # toList s))\"", "lemma viewL_correct_empty[simp]: \"viewL Empty = None\"", "lemma viewL_correct_nonEmpty: \n  assumes \"ft_invar t\" \"t \\<noteq> Empty\" \n  obtains a s where \n  \"viewL t = Some (a, s)\" \"ft_invar s\" \"toList t = a # toList s\"", "lemma viewR_correct: \n  assumes INV: \"ft_invar t\"\n  shows\n  \"(t = Empty \\<Longrightarrow> viewR t = None)\"\n  \"(t \\<noteq> Empty \\<Longrightarrow> (\\<exists> a s. viewR t = Some (a, s) \\<and> ft_invar s \n                          \\<and> toList t = toList s @ [a]))\"", "lemma viewR_correct_empty[simp]: \"viewR Empty = None\"", "lemma viewR_correct_nonEmpty: \n  assumes \"ft_invar t\" \"t \\<noteq> Empty\" \n  obtains a s where \n  \"viewR t = Some (a, s)\" \"ft_invar s \\<and> toList t = toList s @ [a]\"", "lemma isEmpty_correct: \"isEmpty t \\<longleftrightarrow> toList t = []\"", "lemma [code]: \"isEmpty t = (case t of Empty \\<Rightarrow> True | _ \\<Rightarrow> False)\"", "lemma head_correct:\n  assumes \"ft_invar t\" \"t \\<noteq> Empty\" \n  shows \"head t = hd (toList t)\"", "lemma tail_correct: \n  assumes \"ft_invar t\" \"t \\<noteq> Empty\" \n  shows \"toList (tail t) = tl (toList t)\" and \"ft_invar (tail t)\"", "lemma headR_correct:\n  assumes \"ft_invar t\" \"t \\<noteq> Empty\" \n  shows  \"headR t = last (toList t)\"", "lemma tailR_correct: \n  assumes \"ft_invar t\" \"t \\<noteq> Empty\"\n  shows \"toList (tailR t) = butlast (toList t)\" and \"ft_invar (tailR t)\"", "lemma lconsNlist_inv:\n  assumes \"is_leveln_ftree n t\" \n  and \"is_measured_ftree t\"\n  and \"\\<forall> x\\<in>set xs. (is_leveln_node n x \\<and> is_measured_node x)\"\n  shows \n  \"is_leveln_ftree n (lconsNlist xs t) \\<and> is_measured_ftree (lconsNlist xs t)\"", "lemma rconsNlist_inv:\n  assumes \"is_leveln_ftree n t\" \n  and \"is_measured_ftree t\"\n  and \"\\<forall> x\\<in>set xs. (is_leveln_node n x \\<and> is_measured_node x)\"\n  shows \n  \"is_leveln_ftree n (rconsNlist t xs) \\<and> is_measured_ftree (rconsNlist t xs)\"", "lemma nodes_inv:\n  assumes \"\\<forall> x \\<in> set ts. is_leveln_node n x \\<and> is_measured_node x\"\n  and \"length ts \\<ge> 2\"\n  shows \"\\<forall> x \\<in> set (nodes ts). is_leveln_node (Suc n) x \\<and> is_measured_node x\"", "lemma nodes_inv2:\n  assumes \"is_leveln_digit n sf1\"\n  and \"is_measured_digit sf1\"\n  and \"is_leveln_digit n pr2\"\n  and \"is_measured_digit pr2\"\n  and \"\\<forall> x \\<in> set ts. is_leveln_node n x \\<and> is_measured_node x\"\n  shows \n  \"\\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                is_leveln_node (Suc n) x \\<and> is_measured_node x\"", "lemma app3_inv:\n  assumes \"is_leveln_ftree n t1\"\n  and \"is_leveln_ftree n t2\"\n  and \"is_measured_ftree t1\"\n  and \"is_measured_ftree t2\"\n  and \"\\<forall> x\\<in>set xs. (is_leveln_node n x \\<and> is_measured_node x)\"\n  shows \"is_leveln_ftree n (app3 t1 xs t2) \\<and> is_measured_ftree (app3 t1 xs t2)\"", "lemma nodes_list: \"length xs \\<ge> 2 \\<Longrightarrow> nlistToList (nodes xs) = nlistToList xs\"", "lemma nlistToList_app: \n  \"nlistToList (xs@ys) = (nlistToList xs) @ (nlistToList ys)\"", "lemma nlistListLCons: \"toList (lconsNlist xs t) = (nlistToList xs) @ (toList t)\"", "lemma nlistListRCons: \"toList (rconsNlist t xs) = (toList t) @ (nlistToList xs)\"", "lemma app3_list_lem1: \n  \"nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) =\n       digitToList sf1 @ nlistToList ts @ digitToList pr2\"", "lemma app3_list: \n  \"toList (app3 t1 xs t2) = (toList t1) @ (nlistToList xs) @ (toList t2)\"", "lemma app_correct: \n  assumes \"ft_invar t1\" \"ft_invar t2\" \n  shows \"toList (app t1 t2) = (toList t1) @ (toList t2)\" \n    and \"ft_invar (app t1 t2)\"", "lemma app_inv: \"\\<lbrakk>ft_invar t1;ft_invar t2\\<rbrakk> \\<Longrightarrow> ft_invar (app t1 t2)\"", "lemma app_list[simp]: \"toList (app t1 t2) = (toList t1) @ (toList t2)\"", "lemma nlistToTree_inv: \n  \"\\<forall> x \\<in> set nl. is_measured_node x \\<Longrightarrow> is_measured_ftree (nlistToTree nl)\"\n  \"\\<forall> x \\<in> set nl. is_leveln_node n x \\<Longrightarrow> is_leveln_ftree n (nlistToTree nl)\"", "lemma nlistToTree_list: \"toList (nlistToTree nl) = nlistToList nl\"", "lemma deepL_inv:\n  assumes \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n  and \"is_leveln_digit n sf \\<and> is_measured_digit sf\"\n  and \"\\<forall> x \\<in> set pr. (is_measured_node x \\<and> is_leveln_node n x) \\<and> length pr \\<le> 4\"\n  shows  \"is_leveln_ftree n (deepL pr m sf) \\<and> is_measured_ftree (deepL pr m sf)\"", "lemma nlistToDigit_list:\n  assumes \"1 \\<le> length xs \\<and> length xs \\<le> 4\"\n  shows \"digitToList(nlistToDigit xs) = nlistToList xs\"", "lemma deepL_list:\n  assumes \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n  and \"is_leveln_digit n sf \\<and> is_measured_digit sf\"\n  and \"\\<forall> x \\<in> set pr. (is_measured_node x \\<and> is_leveln_node n x) \\<and> length pr \\<le> 4\"\n  shows \"toList (deepL pr m sf) = nlistToList pr @ toList m @ digitToList sf\"", "lemma deepR_inv:\n  assumes \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n  and \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n  and \"\\<forall> x \\<in> set sf. (is_measured_node x \\<and> is_leveln_node n x) \\<and> length sf \\<le> 4\"\n  shows \"is_leveln_ftree n (deepR pr m sf) \\<and> is_measured_ftree (deepR pr m sf)\"", "lemma deepR_list:\n  assumes \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n  and \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n  and \"\\<forall> x \\<in> set sf. (is_measured_node x \\<and> is_leveln_node n x) \\<and> length sf \\<le> 4\"\n  shows \"toList (deepR pr m sf) = digitToList pr @ toList m @ nlistToList sf\"", "lemma gmnl_correct:\n  assumes \"\\<forall> x \\<in> set xs. is_measured_node x\"\n  shows  \"gmnl xs = sum_list (map snd (nlistToList xs))\"", "lemma splitNlist_correct:\" \\<lbrakk>\n  \\<And>(a::'a) (b::'a). p a \\<Longrightarrow> p (a + b);\n  \\<not> p i;\n  p (i + gmnl (nl ::('e,'a::monoid_add) Node list));\n  splitNlist p i nl = (l, n, r)\n  \\<rbrakk> \\<Longrightarrow>  \n  \\<not> p (i + (gmnl l))\n  \\<and>\n  p (i + (gmnl l) + (gmn n))\n  \\<and>\n  nl = l @ n # r\n  \"", "lemma digitToNlist_inv: \n  \"is_measured_digit d \\<Longrightarrow> (\\<forall> x \\<in> set (digitToNlist d). is_measured_node x)\" \n  \"is_leveln_digit n d \\<Longrightarrow> (\\<forall> x \\<in> set (digitToNlist d). is_leveln_node n x)\"", "lemma gmnl_gmd:\n  \"is_measured_digit d \\<Longrightarrow> gmnl (digitToNlist d) = gmd d\"", "lemma gmn_gmd: \n  \"is_measured_node nd \\<Longrightarrow> gmd (nodeToDigit nd) = gmn nd\"", "lemma splitDigit_inv:\n  \"\\<lbrakk>\n  \\<And>(a::'a) (b::'a). p a \\<Longrightarrow> p (a + b);\n  \\<not> p i;\n  is_measured_digit d;\n  is_leveln_digit n d;\n  p (i + gmd (d ::('e,'a::monoid_add) Digit));\n  splitDigit p i d = (l, nd, r)\n  \\<rbrakk> \\<Longrightarrow>  \n  \\<not> p (i + (gmnl l))\n  \\<and>\n  p (i + (gmnl l) + (gmn nd))\n  \\<and>\n  (\\<forall> x \\<in> set l. (is_measured_node x \\<and> is_leveln_node n x))\n  \\<and>\n  (\\<forall> x \\<in> set r. (is_measured_node x \\<and> is_leveln_node n x))\n  \\<and>\n  (is_measured_node nd \\<and> is_leveln_node n nd )\n  \"", "lemma splitDigit_inv':\n  \"\\<lbrakk>\n  splitDigit p i d = (l, nd, r);\n  is_measured_digit d;\n  is_leveln_digit n d\n  \\<rbrakk> \\<Longrightarrow>  \n  (\\<forall> x \\<in> set l. (is_measured_node x \\<and> is_leveln_node n x))\n  \\<and>\n  (\\<forall> x \\<in> set r. (is_measured_node x \\<and> is_leveln_node n x))\n  \\<and>\n  (is_measured_node nd \\<and> is_leveln_node n nd )\n  \"", "lemma splitDigit_list: \"splitDigit p i d = (l,n,r) \\<Longrightarrow> \n  (digitToList d) = (nlistToList l) @ (nodeToList n) @ (nlistToList r)\n  \\<and> length l \\<le> 4 \\<and> length r \\<le> 4\"", "lemma gmnl_gmft: \"\\<forall> x \\<in> set nl. is_measured_node x \\<Longrightarrow> \n  gmft (nlistToTree nl) = gmnl nl\"", "lemma gmftR_gmnl:\n  assumes \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n  and \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n  and \"\\<forall> x \\<in> set sf. (is_measured_node x \\<and> is_leveln_node n x) \\<and> length sf \\<le> 4\"\n  shows \"gmft (deepR pr m sf) = gmd pr + gmft m + gmnl sf\"", "lemma nsplitTree_invpres: \"\\<lbrakk>\n  is_leveln_ftree n (s:: ('e,'a::monoid_add) FingerTreeStruc);\n  is_measured_ftree s;  \n  \\<not> p i; \n  p (i + (gmft s));\n  (nsplitTree p i s) = (l, nd, r)\\<rbrakk> \n  \\<Longrightarrow> \n  is_leveln_ftree n l\n  \\<and>\n  is_measured_ftree l\n  \\<and>\n  is_leveln_ftree n r\n  \\<and>\n  is_measured_ftree r\n  \\<and>\n  is_leveln_node n nd\n  \\<and>\n  is_measured_node nd\n  \"", "lemma nsplitTree_correct: \"\\<lbrakk>\n  is_leveln_ftree n (s:: ('e,'a::monoid_add) FingerTreeStruc);\n  is_measured_ftree s;  \n  \\<And>(a::'a) (b::'a). p a \\<Longrightarrow> p (a + b);\n  \\<not> p i; \n  p (i + (gmft s));\n  (nsplitTree p i s) = (l, nd, r)\\<rbrakk> \n  \\<Longrightarrow> (toList s) = (toList l) @ (nodeToList nd) @ (toList r) \n  \\<and>\n  \\<not> p (i + (gmft l))\n  \\<and>\n  p (i + (gmft l) + (gmn nd))\n  \\<and>\n  is_leveln_ftree n l\n  \\<and>\n  is_measured_ftree l\n  \\<and>\n  is_leveln_ftree n r\n  \\<and>\n  is_measured_ftree r\n  \\<and>\n  is_leveln_node n nd\n  \\<and>\n  is_measured_node nd\n  \"", "lemma splitTree_invpres: \n  assumes inv: \"ft_invar (s:: ('e,'a::monoid_add) FingerTreeStruc)\"\n  assumes init_ff: \"\\<not> p i\"\n  assumes sum_tt: \"p (i + annot s)\"\n  assumes fmt: \"(splitTree p i s) = (l, (e,a), r)\"\n  shows \"ft_invar l\" and \"ft_invar r\"", "lemma splitTree_correct: \n  assumes inv: \"ft_invar (s:: ('e,'a::monoid_add) FingerTreeStruc)\"\n  assumes mono: \"\\<forall>a b. p a \\<longrightarrow> p (a + b)\"\n  assumes init_ff: \"\\<not> p i\"\n  assumes sum_tt: \"p (i + annot s)\"\n  assumes fmt: \"(splitTree p i s) = (l, (e,a), r)\"\n  shows \"(toList s) = (toList l) @ (e,a) # (toList r)\"\n  and   \"\\<not> p (i + annot l)\"\n  and   \"p (i + annot l + a)\"\n  and   \"ft_invar l\" and \"ft_invar r\"", "lemma splitTree_correctE: \n  assumes inv: \"ft_invar (s:: ('e,'a::monoid_add) FingerTreeStruc)\"\n  assumes mono: \"\\<forall>a b. p a \\<longrightarrow> p (a + b)\"\n  assumes init_ff: \"\\<not> p i\"\n  assumes sum_tt: \"p (i + annot s)\"\n  obtains l e a r where\n    \"(splitTree p i s) = (l, (e,a), r)\" and\n    \"(toList s) = (toList l) @ (e,a) # (toList r)\" and\n    \"\\<not> p (i + annot l)\" and\n    \"p (i + annot l + a)\" and\n    \"ft_invar l\" and \"ft_invar r\"", "lemma foldl_node_correct: \n  \"foldl_node f \\<sigma> nd = List.foldl f \\<sigma> (nodeToList nd)\"", "lemma foldl_digit_correct:\n  \"foldl_digit f \\<sigma> d = List.foldl f \\<sigma> (digitToList d)\"", "lemma foldr_node_correct: \n  \"foldr_node f nd \\<sigma> = List.foldr f (nodeToList nd) \\<sigma>\"", "lemma foldr_digit_correct:\n  \"foldr_digit f d \\<sigma> = List.foldr f (digitToList d) \\<sigma>\"", "lemma foldl_correct:\n  \"foldl f \\<sigma> t = List.foldl f \\<sigma> (toList t)\"", "lemma foldr_correct:\n  \"foldr f t \\<sigma> = List.foldr f (toList t) \\<sigma>\"", "lemma count_node_correct:\n  \"count_node n = length (nodeToList n)\"", "lemma count_digit_correct:\n  \"count_digit d = length (digitToList d)\"", "lemma count_correct[simp]:\n  \"count t = length (toList t)\"", "lemma Rep_FingerTree_invar[simp]: \"FingerTreeStruc.ft_invar (Rep_FingerTree t)\"", "lemma [simp]: \n  \"FingerTreeStruc.ft_invar t \\<Longrightarrow> Rep_FingerTree (Abs_FingerTree t) = t\"", "lemma [simp, code abstype]: \"Abs_FingerTree (Rep_FingerTree t) = t\"", "lemma [simp, code abstype]: \"Abs_viewres (Rep_viewres x) = x\"", "lemma Abs_viewres_inverse_None[simp]: \n  \"Rep_viewres (Abs_viewres None) = None\"", "lemma Abs_viewres_inverse_Some: \n  \"FingerTreeStruc.ft_invar t \\<Longrightarrow> \n    Rep_viewres (Abs_viewres (Some (a,t))) = Some (a,t)\"", "lemma [code abstract]: \"Rep_FingerTree (extract_viewres_t r) = \n    (case (Rep_viewres r) of None \\<Rightarrow> Empty | Some (a,t) \\<Rightarrow> t)\"", "lemma [simp, code abstype]: \"Abs_splitres (Rep_splitres x) = x\"", "lemma Abs_splitres_inverse: \n  \"FingerTreeStruc.ft_invar r \\<Longrightarrow> FingerTreeStruc.ft_invar s \\<Longrightarrow> \n      Rep_splitres (Abs_splitres ((r,a,s))) = (r,a,s)\"", "lemma [code abstract]: \"Rep_FingerTree (extract_splitres_l r) = (case \n    (Rep_splitres r) of (l,a,r) \\<Rightarrow> l)\"", "lemma [code abstract]: \"Rep_FingerTree (extract_splitres_r r) = (case \n  (Rep_splitres r) of (l,a,r) \\<Rightarrow> r)\"", "lemma [code abstract]: \"Rep_FingerTree empty = FingerTreeStruc.Empty\"", "lemma empty_rep: \"t=empty \\<longleftrightarrow> Rep_FingerTree t = Empty\"", "lemma [code abstract]: \"Rep_FingerTree (toTree t) = FingerTreeStruc.toTree t\"", "lemma [code abstract]: \n    \"Rep_FingerTree (lcons a t) = (FingerTreeStruc.lcons a (Rep_FingerTree t))\"", "lemma [code abstract]: \n    \"Rep_FingerTree (rcons t a) = (FingerTreeStruc.rcons (Rep_FingerTree t) a)\"", "lemma [code abstract]:\n    \"Rep_viewres (viewL_aux t) = (FingerTreeStruc.viewL (Rep_FingerTree t))\"", "lemma [code abstract]:\n    \"Rep_viewres (viewR_aux t) = (FingerTreeStruc.viewR (Rep_FingerTree t))\"", "lemma [code abstract]: \"Rep_FingerTree (tail t) = \n    (if (FingerTreeStruc.isEmpty (Rep_FingerTree t)) then Empty \n     else FingerTreeStruc.tail (Rep_FingerTree t))\"", "lemma [code abstract]: \"Rep_FingerTree (tailR t) = \n    (if (FingerTreeStruc.isEmpty (Rep_FingerTree t)) then Empty \n    else FingerTreeStruc.tailR (Rep_FingerTree t))\"", "lemma [code abstract]:\n    \"Rep_FingerTree (app s t) = \n      FingerTreeStruc.app (Rep_FingerTree s) (Rep_FingerTree t)\"", "lemma [code abstract]:\n    \"Rep_splitres (splitTree_aux p i t) = (if (\\<not>p i \\<and> p (i+annot t)) then\n      (FingerTreeStruc.splitTree p i (Rep_FingerTree t))\n    else\n      (Empty,undefined,Empty))\"", "lemma empty_correct: \"toList t = [] \\<longleftrightarrow> t=empty\"", "lemma toList_of_empty[simp]: \"toList empty = []\"", "lemma annot_correct: \"annot t = sum_list (map snd (toList t))\"", "lemma toTree_correct: \"toList (toTree l) = l\"", "lemma lcons_correct: \"toList (lcons a t) = a#toList t\"", "lemma rcons_correct: \"toList (rcons t a) = toList t@[a]\"", "lemma viewL_correct: \n    \"t = empty \\<Longrightarrow> viewL t = None\"\n    \"t \\<noteq> empty \\<Longrightarrow> \\<exists>a s. viewL t = Some (a,s) \\<and> toList t = a#toList s\"", "lemma viewL_empty[simp]: \"viewL empty = None\"", "lemma viewL_nonEmpty: \n    assumes \"t\\<noteq>empty\"\n    obtains a s where \"viewL t = Some (a,s)\" \"toList t = a#toList s\"", "lemma viewR_correct: \n    \"t = empty \\<Longrightarrow> viewR t = None\"\n    \"t \\<noteq> empty \\<Longrightarrow> \\<exists>a s. viewR t = Some (a,s) \\<and> toList t = toList s@[a]\"", "lemma viewR_empty[simp]: \"viewR empty = None\"", "lemma viewR_nonEmpty: \n    assumes \"t\\<noteq>empty\"\n    obtains a s where \"viewR t = Some (a,s)\" \"toList t = toList s@[a]\"", "lemma isEmpty_correct: \"isEmpty t \\<longleftrightarrow> t=empty\"", "lemma head_correct: \"t\\<noteq>empty \\<Longrightarrow> head t = hd (toList t)\"", "lemma tail_correct: \"t\\<noteq>empty \\<Longrightarrow> toList (tail t) = tl (toList t)\"", "lemma headR_correct: \"t\\<noteq>empty \\<Longrightarrow> headR t = last (toList t)\"", "lemma tailR_correct: \"t\\<noteq>empty \\<Longrightarrow> toList (tailR t) = butlast (toList t)\"", "lemma app_correct: \"toList (app s t) = toList s @ toList t\"", "lemma splitTree_correct:\n    assumes mono: \"\\<forall>a b. p a \\<longrightarrow> p (a + b)\"\n    assumes init_ff: \"\\<not> p i\"\n    assumes sum_tt: \"p (i + annot s)\"\n    assumes fmt: \"(splitTree p i s) = (l, (e,a), r)\"\n    shows \"(toList s) = (toList l) @ (e,a) # (toList r)\"\n    and   \"\\<not> p (i + annot l)\"\n    and   \"p (i + annot l + a)\"", "lemma splitTree_correctE:\n    assumes mono: \"\\<forall>a b. p a \\<longrightarrow> p (a + b)\"\n    assumes init_ff: \"\\<not> p i\"\n    assumes sum_tt: \"p (i + annot s)\"\n    obtains l e a r where\n    \"(splitTree p i s) = (l, (e,a), r)\" and\n    \"(toList s) = (toList l) @ (e,a) # (toList r)\" and\n    \"\\<not> p (i + annot l)\" and\n    \"p (i + annot l + a)\"", "lemma foldl_correct: \"foldl f \\<sigma> t = List.foldl f \\<sigma> (toList t)\"", "lemma foldr_correct: \"foldr f t \\<sigma> = List.foldr f (toList t) \\<sigma>\"", "lemma count_correct: \"count t = length (toList t)\""], "translations": [["", "lemma nodeToList_empty: \"nodeToList nd \\<noteq> Nil\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodeToList nd \\<noteq> []", "by (induct nd) auto"], ["", "lemma digitToList_empty: \"digitToList d \\<noteq> Nil\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digitToList d \\<noteq> []", "by (cases d, auto simp add: nodeToList_empty)"], ["", "text \\<open>Auxiliary lemmas\\<close>"], ["", "lemma gmn_correct:\n  assumes \"is_measured_node nd\"\n  shows \"gmn nd = sum_list (map snd (nodeToList nd))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmn nd = sum_list (map snd (nodeToList nd))", "by (insert assms, induct nd) (auto simp add: add.assoc)"], ["", "lemma gmd_correct:\n  assumes \"is_measured_digit d\"\n  shows \"gmd d = sum_list (map snd (digitToList d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmd d = sum_list (map snd (digitToList d))", "by (insert assms, cases d, auto simp add: gmn_correct add.assoc)"], ["", "lemma gmft_correct: \"is_measured_ftree t \n  \\<Longrightarrow> (gmft t) = sum_list (map snd (toList t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_measured_ftree t \\<Longrightarrow>\n    gmft t = sum_list (map snd (toList t))", "by (induct t, auto simp add: ft_invar_def gmd_correct gmn_correct add.assoc)"], ["", "lemma gmft_correct2: \"ft_invar t \\<Longrightarrow> (gmft t) = sum_list (map snd (toList t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ft_invar t \\<Longrightarrow> gmft t = sum_list (map snd (toList t))", "by (simp only: ft_invar_def gmft_correct)"], ["", "subsection \\<open>Operations\\<close>"], ["", "text_raw\\<open>\\label{sec:operations}\\<close>"], ["", "subsubsection \\<open>Empty tree\\<close>"], ["", "lemma Empty_correct[simp]: \n  \"toList Empty = []\"\n  \"ft_invar Empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList Empty = [] &&& ft_invar Empty", "by (simp_all add: ft_invar_def)"], ["", "text \\<open>Exactly the empty finger tree represents the empty list\\<close>"], ["", "lemma toList_empty: \"toList t = [] \\<longleftrightarrow> t = Empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (toList t = []) = (t = Empty)", "by (induct t, auto simp add: nodeToList_empty digitToList_empty)"], ["", "subsubsection \\<open>Annotation\\<close>"], ["", "text \"Sum of annotations of all elements of a finger tree\""], ["", "definition annot :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> 'a\"\n  where \"annot t = gmft t\""], ["", "lemma annot_correct:\n  \"ft_invar t \\<Longrightarrow> annot t = sum_list (map snd (toList t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ft_invar t \\<Longrightarrow> annot t = sum_list (map snd (toList t))", "using gmft_correct"], ["proof (prove)\nusing this:\n  is_measured_ftree ?t \\<Longrightarrow>\n  gmft ?t = sum_list (map snd (toList ?t))\n\ngoal (1 subgoal):\n 1. ft_invar t \\<Longrightarrow> annot t = sum_list (map snd (toList t))", "unfolding annot_def"], ["proof (prove)\nusing this:\n  is_measured_ftree ?t \\<Longrightarrow>\n  gmft ?t = sum_list (map snd (toList ?t))\n\ngoal (1 subgoal):\n 1. ft_invar t \\<Longrightarrow> gmft t = sum_list (map snd (toList t))", "by (simp add: gmft_correct2)"], ["", "subsubsection \\<open>Appending\\<close>"], ["", "text \\<open>Auxiliary functions to fill in the annotations\\<close>"], ["", "definition deep:: \"('e,'a::monoid_add) Digit \\<Rightarrow> ('e,'a) FingerTreeStruc \n    \\<Rightarrow> ('e,'a) Digit \\<Rightarrow> ('e, 'a) FingerTreeStruc\" where\n  \"deep pr m sf = Deep ((gmd pr) + (gmft m) + (gmd sf)) pr m sf\""], ["", "definition node2 where\n  \"node2 nd1 nd2 = Node2 ((gmn nd1)+(gmn nd2)) nd1 nd2\""], ["", "definition node3 where\n  \"node3 nd1 nd2 nd3 = Node3 ((gmn nd1)+(gmn nd2)+(gmn nd3)) nd1 nd2 nd3\""], ["", "text \"Append a node at the left end\""], ["", "fun nlcons :: \"('e,'a::monoid_add) Node \\<Rightarrow> ('e,'a) FingerTreeStruc \n    \\<Rightarrow> ('e,'a) FingerTreeStruc\"  \nwhere\n\\<comment> \\<open>Recursively we append a node, if the digit is full we push down a node3\\<close>\n  \"nlcons a Empty = Single a\" |\n  \"nlcons a (Single b) = deep (One a) Empty (One b)\" |\n  \"nlcons a (Deep _ (One b) m sf) = deep (Two a b) m sf\" |\n  \"nlcons a (Deep _ (Two b c) m sf) = deep (Three a b c) m sf\" |\n  \"nlcons a (Deep _ (Three b c d) m sf) = deep (Four a b c d) m sf\" |\n  \"nlcons a (Deep _ (Four b c d e) m sf) \n    = deep (Two a b) (nlcons (node3 c d e) m) sf\""], ["", "text \"Append a node at the right end\""], ["", "fun nrcons :: \"('e,'a::monoid_add) FingerTreeStruc \n    \\<Rightarrow> ('e,'a) Node \\<Rightarrow> ('e,'a) FingerTreeStruc\"  where\n  \\<comment> \\<open>Recursively we append a node, if the digit is full we push down a node3\\<close>\n  \"nrcons Empty a = Single a\" |\n  \"nrcons (Single b) a = deep (One b) Empty (One a)\" |\n  \"nrcons (Deep _ pr m (One b)) a = deep pr m (Two  b a)\"|\n  \"nrcons (Deep _ pr m (Two b c)) a = deep pr m (Three b c a)\" |\n  \"nrcons (Deep _ pr m (Three b c d)) a = deep pr m (Four b c d a)\" |\n  \"nrcons (Deep _ pr m (Four b c d e)) a \n    = deep pr (nrcons m (node3 b c d)) (Two e a)\""], ["", "lemma nlcons_invlevel: \"\\<lbrakk>is_leveln_ftree n t; is_leveln_node n nd\\<rbrakk> \n  \\<Longrightarrow> is_leveln_ftree n (nlcons nd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree n t; is_leveln_node n nd\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n (nlcons nd t)", "by (induct t arbitrary: n nd rule: nlcons.induct) \n(auto simp add: deep_def node3_def)"], ["", "lemma nlcons_invmeas: \"\\<lbrakk>is_measured_ftree t; is_measured_node nd\\<rbrakk> \n  \\<Longrightarrow> is_measured_ftree (nlcons nd t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_measured_ftree t; is_measured_node nd\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree (nlcons nd t)", "by (induct t arbitrary: nd rule: nlcons.induct) \n     (auto simp add: deep_def node3_def)"], ["", "lemmas nlcons_inv = nlcons_invlevel nlcons_invmeas"], ["", "lemma nlcons_list: \"toList (nlcons a t) = (nodeToList a) @ (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (nlcons a t) = nodeToList a @ toList t", "apply (induct t arbitrary: a rule: nlcons.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a aa. toList (nlcons aa Empty) = nodeToList aa @ toList Empty\n 2. \\<And>a b aa.\n       toList (nlcons aa (Single b)) = nodeToList aa @ toList (Single b)\n 3. \\<And>a uu_ b m sf aa.\n       toList (nlcons aa (Deep uu_ (One b) m sf)) =\n       nodeToList aa @ toList (Deep uu_ (One b) m sf)\n 4. \\<And>a uv_ b c m sf aa.\n       toList (nlcons aa (Deep uv_ (Two b c) m sf)) =\n       nodeToList aa @ toList (Deep uv_ (Two b c) m sf)\n 5. \\<And>a uw_ b c d m sf aa.\n       toList (nlcons aa (Deep uw_ (Three b c d) m sf)) =\n       nodeToList aa @ toList (Deep uw_ (Three b c d) m sf)\n 6. \\<And>a ux_ b c d e m sf aa.\n       (\\<And>a.\n           toList (nlcons a m) = nodeToList a @ toList m) \\<Longrightarrow>\n       toList (nlcons aa (Deep ux_ (Four b c d e) m sf)) =\n       nodeToList aa @ toList (Deep ux_ (Four b c d e) m sf)", "apply (auto simp add: deep_def toList_def node3_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nrcons_invlevel: \"\\<lbrakk>is_leveln_ftree n t; is_leveln_node n nd\\<rbrakk> \n  \\<Longrightarrow> is_leveln_ftree n (nrcons t nd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree n t; is_leveln_node n nd\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n (nrcons t nd)", "apply (induct t nd arbitrary: nd n rule:nrcons.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a nd n.\n       \\<lbrakk>is_leveln_ftree n Empty; is_leveln_node n nd\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (nrcons Empty nd)\n 2. \\<And>b a nd n.\n       \\<lbrakk>is_leveln_ftree n (Single b); is_leveln_node n nd\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (nrcons (Single b) nd)\n 3. \\<And>uu_ pr m b a nd n.\n       \\<lbrakk>is_leveln_ftree n (Deep uu_ pr m (One b));\n        is_leveln_node n nd\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (nrcons (Deep uu_ pr m (One b)) nd)\n 4. \\<And>uv_ pr m b c a nd n.\n       \\<lbrakk>is_leveln_ftree n (Deep uv_ pr m (Two b c));\n        is_leveln_node n nd\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (nrcons (Deep uv_ pr m (Two b c)) nd)\n 5. \\<And>uw_ pr m b c d a nd n.\n       \\<lbrakk>is_leveln_ftree n (Deep uw_ pr m (Three b c d));\n        is_leveln_node n nd\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (nrcons (Deep uw_ pr m (Three b c d)) nd)\n 6. \\<And>ux_ pr m b c d e a nd n.\n       \\<lbrakk>\\<And>nd n.\n                   \\<lbrakk>is_leveln_ftree n m;\n                    is_leveln_node n nd\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n (nrcons m nd);\n        is_leveln_ftree n (Deep ux_ pr m (Four b c d e));\n        is_leveln_node n nd\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (nrcons (Deep ux_ pr m (Four b c d e)) nd)", "apply(auto simp add: deep_def node3_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nrcons_invmeas: \"\\<lbrakk>is_measured_ftree t; is_measured_node nd\\<rbrakk> \n  \\<Longrightarrow> is_measured_ftree (nrcons t nd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_measured_ftree t; is_measured_node nd\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree (nrcons t nd)", "apply (induct t nd arbitrary: nd rule:nrcons.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a nd.\n       \\<lbrakk>is_measured_ftree Empty; is_measured_node nd\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree (nrcons Empty nd)\n 2. \\<And>b a nd.\n       \\<lbrakk>is_measured_ftree (Single b); is_measured_node nd\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree (nrcons (Single b) nd)\n 3. \\<And>uu_ pr m b a nd.\n       \\<lbrakk>is_measured_ftree (Deep uu_ pr m (One b));\n        is_measured_node nd\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree\n                          (nrcons (Deep uu_ pr m (One b)) nd)\n 4. \\<And>uv_ pr m b c a nd.\n       \\<lbrakk>is_measured_ftree (Deep uv_ pr m (Two b c));\n        is_measured_node nd\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree\n                          (nrcons (Deep uv_ pr m (Two b c)) nd)\n 5. \\<And>uw_ pr m b c d a nd.\n       \\<lbrakk>is_measured_ftree (Deep uw_ pr m (Three b c d));\n        is_measured_node nd\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree\n                          (nrcons (Deep uw_ pr m (Three b c d)) nd)\n 6. \\<And>ux_ pr m b c d e a nd.\n       \\<lbrakk>\\<And>nd.\n                   \\<lbrakk>is_measured_ftree m;\n                    is_measured_node nd\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree (nrcons m nd);\n        is_measured_ftree (Deep ux_ pr m (Four b c d e));\n        is_measured_node nd\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree\n                          (nrcons (Deep ux_ pr m (Four b c d e)) nd)", "apply(auto simp add: deep_def node3_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas nrcons_inv = nrcons_invlevel nrcons_invmeas"], ["", "lemma nrcons_list: \"toList (nrcons t a) = (toList t) @ (nodeToList a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (nrcons t a) = toList t @ nodeToList a", "apply (induct t a arbitrary: a rule: nrcons.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a aa. toList (nrcons Empty aa) = toList Empty @ nodeToList aa\n 2. \\<And>b a aa.\n       toList (nrcons (Single b) aa) = toList (Single b) @ nodeToList aa\n 3. \\<And>uu_ pr m b a aa.\n       toList (nrcons (Deep uu_ pr m (One b)) aa) =\n       toList (Deep uu_ pr m (One b)) @ nodeToList aa\n 4. \\<And>uv_ pr m b c a aa.\n       toList (nrcons (Deep uv_ pr m (Two b c)) aa) =\n       toList (Deep uv_ pr m (Two b c)) @ nodeToList aa\n 5. \\<And>uw_ pr m b c d a aa.\n       toList (nrcons (Deep uw_ pr m (Three b c d)) aa) =\n       toList (Deep uw_ pr m (Three b c d)) @ nodeToList aa\n 6. \\<And>ux_ pr m b c d e a aa.\n       (\\<And>a.\n           toList (nrcons m a) = toList m @ nodeToList a) \\<Longrightarrow>\n       toList (nrcons (Deep ux_ pr m (Four b c d e)) aa) =\n       toList (Deep ux_ pr m (Four b c d e)) @ nodeToList aa", "apply (auto simp add: deep_def toList_def node3_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \"Append an element at the left end\""], ["", "definition lcons :: \"('e \\<times> 'a::monoid_add) \n    \\<Rightarrow> ('e,'a) FingerTreeStruc \\<Rightarrow> ('e,'a) FingerTreeStruc\" (infixr \"\\<lhd>\" 65) where\n  \"a \\<lhd> t = nlcons (Tip (fst a) (snd a)) t\""], ["", "lemma lcons_correct: \n  assumes \"ft_invar t\" \n  shows \"ft_invar (a \\<lhd> t)\" and \"toList (a \\<lhd> t) = a # (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ft_invar (a \\<lhd> t) &&& toList (a \\<lhd> t) = a # toList t", "using assms"], ["proof (prove)\nusing this:\n  ft_invar t\n\ngoal (1 subgoal):\n 1. ft_invar (a \\<lhd> t) &&& toList (a \\<lhd> t) = a # toList t", "unfolding ft_invar_def"], ["proof (prove)\nusing this:\n  is_leveln_ftree 0 t \\<and> is_measured_ftree t\n\ngoal (1 subgoal):\n 1. is_leveln_ftree 0 (a \\<lhd> t) \\<and> is_measured_ftree (a \\<lhd> t) &&&\n    toList (a \\<lhd> t) = a # toList t", "by (simp_all add: lcons_def nlcons_list nlcons_invlevel nlcons_invmeas)"], ["", "lemma lcons_inv:\"ft_invar t \\<Longrightarrow> ft_invar (a \\<lhd> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ft_invar t \\<Longrightarrow> ft_invar (a \\<lhd> t)", "by (rule lcons_correct)"], ["", "lemma lcons_list[simp]: \"toList (a \\<lhd> t) = a # (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (a \\<lhd> t) = a # toList t", "by (simp add: lcons_def nlcons_list)"], ["", "text \"Append an element at the right end\""], ["", "definition rcons \n  :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> ('e \\<times> 'a) \\<Rightarrow> ('e,'a) FingerTreeStruc\"\n      (infixl \"\\<rhd>\" 65) where\n  \"t \\<rhd> a = nrcons t (Tip (fst a) (snd a))\""], ["", "lemma rcons_correct: \n  assumes \"ft_invar t\" \n  shows \"ft_invar (t \\<rhd> a)\" and \"toList (t \\<rhd> a) = (toList t) @ [a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ft_invar (t \\<rhd> a) &&& toList (t \\<rhd> a) = toList t @ [a]", "using assms"], ["proof (prove)\nusing this:\n  ft_invar t\n\ngoal (1 subgoal):\n 1. ft_invar (t \\<rhd> a) &&& toList (t \\<rhd> a) = toList t @ [a]", "by (auto simp add: nrcons_inv ft_invar_def rcons_def nrcons_list)"], ["", "lemma rcons_inv:\"ft_invar t \\<Longrightarrow> ft_invar (t \\<rhd> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ft_invar t \\<Longrightarrow> ft_invar (t \\<rhd> a)", "by (rule rcons_correct)"], ["", "lemma rcons_list[simp]: \"toList (t \\<rhd> a) = (toList t) @ [a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (t \\<rhd> a) = toList t @ [a]", "by(auto simp add: nrcons_list rcons_def)"], ["", "subsubsection \\<open>Convert list to tree\\<close>"], ["", "primrec toTree :: \"('e \\<times> 'a::monoid_add) list \\<Rightarrow> ('e,'a) FingerTreeStruc\" where\n  \"toTree [] = Empty\"|\n  \"toTree (a#xs) = a \\<lhd> (toTree xs)\""], ["", "lemma toTree_correct[simp]:\n  \"ft_invar (toTree l)\"\n  \"toList (toTree l) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ft_invar (toTree l) &&& toList (toTree l) = l", "apply (induct l)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ft_invar (toTree [])\n 2. toList (toTree []) = []\n 3. \\<And>a l.\n       \\<lbrakk>ft_invar (toTree l); toList (toTree l) = l\\<rbrakk>\n       \\<Longrightarrow> ft_invar (toTree (a # l))\n 4. \\<And>a l.\n       \\<lbrakk>ft_invar (toTree l); toList (toTree l) = l\\<rbrakk>\n       \\<Longrightarrow> toList (toTree (a # l)) = a # l", "apply (simp add: ft_invar_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. toList (toTree []) = []\n 2. \\<And>a l.\n       \\<lbrakk>ft_invar (toTree l); toList (toTree l) = l\\<rbrakk>\n       \\<Longrightarrow> ft_invar (toTree (a # l))\n 3. \\<And>a l.\n       \\<lbrakk>ft_invar (toTree l); toList (toTree l) = l\\<rbrakk>\n       \\<Longrightarrow> toList (toTree (a # l)) = a # l", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a l.\n       \\<lbrakk>ft_invar (toTree l); toList (toTree l) = l\\<rbrakk>\n       \\<Longrightarrow> ft_invar (toTree (a # l))\n 2. \\<And>a l.\n       \\<lbrakk>ft_invar (toTree l); toList (toTree l) = l\\<rbrakk>\n       \\<Longrightarrow> toList (toTree (a # l)) = a # l", "apply (simp add: toTree_def lcons_list lcons_inv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>ft_invar (toTree l); toList (toTree l) = l\\<rbrakk>\n       \\<Longrightarrow> toList (toTree (a # l)) = a # l", "apply (simp add: toTree_def lcons_list lcons_inv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>\n  Note that this lemma is a completeness statement of our implementation, \n  as it can be read as:\n  ,,All lists of elements have a valid representation as a finger tree.''\n\\<close>"], ["", "subsubsection \\<open>Detaching leftmost/rightmost element\\<close>"], ["", "primrec digitToTree :: \"('e,'a::monoid_add) Digit \\<Rightarrow> ('e,'a) FingerTreeStruc\" \n  where\n  \"digitToTree (One a) = Single a\"|\n  \"digitToTree (Two a b) = deep (One a) Empty (One b)\"|\n  \"digitToTree (Three a b c) = deep (Two a b) Empty (One c)\"|\n  \"digitToTree (Four a b c d) = deep (Two a b) Empty (Two c d)\""], ["", "primrec nodeToDigit :: \"('e,'a) Node \\<Rightarrow> ('e,'a) Digit\" where\n  \"nodeToDigit (Tip e a) = One (Tip e a)\"|\n  \"nodeToDigit (Node2 _ a b) = Two a b\"|\n  \"nodeToDigit (Node3 _ a b c) = Three a b c\""], ["", "fun nlistToDigit :: \"('e,'a) Node list \\<Rightarrow> ('e,'a) Digit\" where\n  \"nlistToDigit [a] = One a\" |\n  \"nlistToDigit [a,b] = Two a b\" |\n  \"nlistToDigit [a,b,c] = Three a b c\" |\n  \"nlistToDigit [a,b,c,d] = Four a b c d\""], ["", "primrec digitToNlist :: \"('e,'a) Digit \\<Rightarrow> ('e,'a) Node list\" where\n  \"digitToNlist (One a) = [a]\" |\n  \"digitToNlist (Two a b) = [a,b] \" |\n  \"digitToNlist (Three a b c) = [a,b,c]\" |\n  \"digitToNlist (Four a b c d) = [a,b,c,d]\""], ["", "text \\<open>Auxiliary function to unwrap a Node element\\<close>"], ["", "primrec n_unwrap:: \"('e,'a) Node \\<Rightarrow> ('e \\<times> 'a)\" where\n  \"n_unwrap (Tip e a) = (e,a)\"|\n  \"n_unwrap (Node2 _ a b) = undefined\"|\n  \"n_unwrap (Node3 _ a b c) = undefined\""], ["", "type_synonym ('e,'a) ViewnRes = \"(('e,'a) Node \\<times> ('e,'a) FingerTreeStruc) option\""], ["", "lemma viewnres_cases:\n  fixes r :: \"('e,'a) ViewnRes\"\n  obtains (Nil) \"r=None\" |\n          (Cons) a t where \"r=Some (a,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r = None \\<Longrightarrow> thesis;\n     \\<And>a t. r = Some (a, t) \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (cases r) auto"], ["", "lemma viewnres_split: \n  \"P (case_option f1 (case_prod f2) x) = \n  ((x = None \\<longrightarrow> P f1) \\<and> (\\<forall>a b. x = Some (a,b) \\<longrightarrow> P (f2 a b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (case x of None \\<Rightarrow> f1\n       | Some (xa, xb) \\<Rightarrow> f2 xa xb) =\n    ((x = None \\<longrightarrow> P f1) \\<and>\n     (\\<forall>a b. x = Some (a, b) \\<longrightarrow> P (f2 a b)))", "by (auto split: option.split prod.split)"], ["", "text \\<open>Detach the leftmost node. Return @{const None} on empty finger tree.\\<close>"], ["", "fun viewLn :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> ('e,'a) ViewnRes\" where\n  \"viewLn Empty = None\"|\n  \"viewLn (Single a) = Some (a, Empty)\"| \n  \"viewLn (Deep _ (Two a b) m sf) = Some (a, (deep (One b) m sf))\"|\n  \"viewLn (Deep _ (Three a b c) m sf) = Some (a, (deep (Two b c) m sf))\"|\n  \"viewLn (Deep _ (Four a b c d) m sf) = Some (a, (deep (Three b c d) m sf))\"|\n  \"viewLn (Deep _ (One a) m sf) = \n    (case viewLn m of \n      None \\<Rightarrow> Some (a, (digitToTree sf)) |\n      Some (b, m2) \\<Rightarrow> Some (a, (deep (nodeToDigit b) m2 sf)))\""], ["", "text \\<open>Detach the rightmost node. Return @{const None} on empty finger tree.\\<close>"], ["", "fun viewRn :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> ('e,'a) ViewnRes\" where\n  \"viewRn Empty = None\" |\n  \"viewRn (Single a) = Some (a, Empty)\" | \n  \"viewRn (Deep _ pr m (Two a b)) = Some (b, (deep pr m (One a)))\" |\n  \"viewRn (Deep _ pr m (Three a b c)) = Some (c, (deep pr m (Two a b)))\" |\n  \"viewRn (Deep _ pr m (Four a b c d)) = Some (d, (deep pr m (Three a b c)))\" |\n  \"viewRn (Deep _ pr m (One a)) = \n    (case viewRn m of \n      None \\<Rightarrow> Some (a, (digitToTree pr))|\n      Some (b, m2) \\<Rightarrow> Some (a, (deep pr m2 (nodeToDigit b))))\""], ["", "(* TODO: Head, last geht auch in O(1) !!! *)"], ["", "lemma \n  digitToTree_inv: \"is_leveln_digit n d \\<Longrightarrow> is_leveln_ftree n (digitToTree d)\"\n  \"is_measured_digit d \\<Longrightarrow> is_measured_ftree (digitToTree d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_leveln_digit n d \\<Longrightarrow>\n     is_leveln_ftree n (digitToTree d)) &&&\n    (is_measured_digit d \\<Longrightarrow>\n     is_measured_ftree (digitToTree d))", "apply (cases d,auto simp add: deep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_measured_digit d \\<Longrightarrow> is_measured_ftree (digitToTree d)", "apply (cases d,auto simp add: deep_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma digitToTree_list: \"toList (digitToTree d) = digitToList d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (digitToTree d) = digitToList d", "by (cases d) (auto simp add: deep_def)"], ["", "lemma nodeToDigit_inv:\n  \"is_leveln_node (Suc n) nd \\<Longrightarrow> is_leveln_digit n (nodeToDigit nd) \" \n  \"is_measured_node nd \\<Longrightarrow> is_measured_digit (nodeToDigit nd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_leveln_node (Suc n) nd \\<Longrightarrow>\n     is_leveln_digit n (nodeToDigit nd)) &&&\n    (is_measured_node nd \\<Longrightarrow>\n     is_measured_digit (nodeToDigit nd))", "by (cases nd, auto) (cases nd, auto)"], ["", "lemma nodeToDigit_list: \"digitToList (nodeToDigit nd) = nodeToList nd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digitToList (nodeToDigit nd) = nodeToList nd", "by (cases nd,auto)"], ["", "lemma viewLn_empty: \"t \\<noteq> Empty \\<longleftrightarrow> (viewLn t) \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "proof (cases t)"], ["proof (state)\ngoal (3 subgoals):\n 1. t = Empty \\<Longrightarrow>\n    (t \\<noteq> Empty) = (viewLn t \\<noteq> None)\n 2. \\<And>x2.\n       t = Single x2 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)\n 3. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "case Empty"], ["proof (state)\nthis:\n  t = Empty\n\ngoal (3 subgoals):\n 1. t = Empty \\<Longrightarrow>\n    (t \\<noteq> Empty) = (viewLn t \\<noteq> None)\n 2. \\<And>x2.\n       t = Single x2 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)\n 3. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Empty\n\ngoal (1 subgoal):\n 1. (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "by simp"], ["proof (state)\nthis:\n  (t \\<noteq> Empty) = (viewLn t \\<noteq> None)\n\ngoal (2 subgoals):\n 1. \\<And>x2.\n       t = Single x2 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)\n 2. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x2.\n       t = Single x2 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)\n 2. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "case (Single Node)"], ["proof (state)\nthis:\n  t = Single Node\n\ngoal (2 subgoals):\n 1. \\<And>x2.\n       t = Single x2 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)\n 2. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Single Node\n\ngoal (1 subgoal):\n 1. (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "by simp"], ["proof (state)\nthis:\n  (t \\<noteq> Empty) = (viewLn t \\<noteq> None)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "case (Deep a l x r)"], ["proof (state)\nthis:\n  t = Deep a l x r\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Deep a l x r\n\ngoal (1 subgoal):\n 1. (t \\<noteq> Empty) = (viewLn t \\<noteq> None)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. t = Deep a l x r \\<Longrightarrow>\n    \\<exists>aa b. viewLn (Deep a l x r) = Some (aa, b)", "apply(case_tac l)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>t = Deep a l x r; l = One x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b. viewLn (Deep a l x r) = Some (aa, b)\n 2. \\<And>x21 x22.\n       \\<lbrakk>t = Deep a l x r; l = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b. viewLn (Deep a l x r) = Some (aa, b)\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>t = Deep a l x r; l = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b. viewLn (Deep a l x r) = Some (aa, b)\n 4. \\<And>x41 x42 x43 x44.\n       \\<lbrakk>t = Deep a l x r; l = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b. viewLn (Deep a l x r) = Some (aa, b)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>t = Deep a (One x1) x r; l = One x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (case viewLn x of\n                             None \\<Rightarrow> Some (x1, digitToTree r)\n                             | Some (b, m2) \\<Rightarrow>\n                                 Some (x1, deep (nodeToDigit b) m2 r)) =\n                            Some (a, b)", "apply(cases \"viewLn x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>t = Deep a (One x1) x r; l = One x1;\n        viewLn x = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (case viewLn x of\n                             None \\<Rightarrow> Some (x1, digitToTree r)\n                             | Some (b, m2) \\<Rightarrow>\n                                 Some (x1, deep (nodeToDigit b) m2 r)) =\n                            Some (a, b)\n 2. \\<And>x1 aa.\n       \\<lbrakk>t = Deep a (One x1) x r; l = One x1;\n        viewLn x = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (case viewLn x of\n                             None \\<Rightarrow> Some (x1, digitToTree r)\n                             | Some (b, m2) \\<Rightarrow>\n                                 Some (x1, deep (nodeToDigit b) m2 r)) =\n                            Some (a, b)", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (t \\<noteq> Empty) = (viewLn t \\<noteq> None)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma viewLn_inv: \"\\<lbrakk>\n  is_measured_ftree t; is_leveln_ftree n t; viewLn t = Some (nd, s)\n  \\<rbrakk> \\<Longrightarrow> is_measured_ftree s \\<and> is_measured_node nd \\<and> \n        is_leveln_ftree n s \\<and> is_leveln_node n nd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_measured_ftree t; is_leveln_ftree n t;\n     viewLn t = Some (nd, s)\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree s \\<and>\n                      is_measured_node nd \\<and>\n                      is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(induct t arbitrary: n nd s rule: viewLn.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n nd s.\n       \\<lbrakk>is_measured_ftree Empty; is_leveln_ftree n Empty;\n        viewLn Empty = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>a n nd s.\n       \\<lbrakk>is_measured_ftree (Single a); is_leveln_ftree n (Single a);\n        viewLn (Single a) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 3. \\<And>uu_ a b m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uu_ (Two a b) m sf);\n        is_leveln_ftree n (Deep uu_ (Two a b) m sf);\n        viewLn (Deep uu_ (Two a b) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 4. \\<And>uv_ a b c m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uv_ (Three a b c) m sf);\n        is_leveln_ftree n (Deep uv_ (Three a b c) m sf);\n        viewLn (Deep uv_ (Three a b c) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 5. \\<And>uw_ a b c d m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uw_ (Four a b c d) m sf);\n        is_leveln_ftree n (Deep uw_ (Four a b c d) m sf);\n        viewLn (Deep uw_ (Four a b c d) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 6. \\<And>ux_ a m sf n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ (One a) m sf);\n        is_leveln_ftree n (Deep ux_ (One a) m sf);\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(simp add: viewLn_empty)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a n nd s.\n       \\<lbrakk>is_measured_ftree (Single a); is_leveln_ftree n (Single a);\n        viewLn (Single a) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>uu_ a b m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uu_ (Two a b) m sf);\n        is_leveln_ftree n (Deep uu_ (Two a b) m sf);\n        viewLn (Deep uu_ (Two a b) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 3. \\<And>uv_ a b c m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uv_ (Three a b c) m sf);\n        is_leveln_ftree n (Deep uv_ (Three a b c) m sf);\n        viewLn (Deep uv_ (Three a b c) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 4. \\<And>uw_ a b c d m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uw_ (Four a b c d) m sf);\n        is_leveln_ftree n (Deep uw_ (Four a b c d) m sf);\n        viewLn (Deep uw_ (Four a b c d) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 5. \\<And>ux_ a m sf n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ (One a) m sf);\n        is_leveln_ftree n (Deep ux_ (One a) m sf);\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>uu_ a b m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uu_ (Two a b) m sf);\n        is_leveln_ftree n (Deep uu_ (Two a b) m sf);\n        viewLn (Deep uu_ (Two a b) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>uv_ a b c m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uv_ (Three a b c) m sf);\n        is_leveln_ftree n (Deep uv_ (Three a b c) m sf);\n        viewLn (Deep uv_ (Three a b c) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 3. \\<And>uw_ a b c d m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uw_ (Four a b c d) m sf);\n        is_leveln_ftree n (Deep uw_ (Four a b c d) m sf);\n        viewLn (Deep uw_ (Four a b c d) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 4. \\<And>ux_ a m sf n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ (One a) m sf);\n        is_leveln_ftree n (Deep ux_ (One a) m sf);\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(auto simp add: deep_def)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>uv_ a b c m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uv_ (Three a b c) m sf);\n        is_leveln_ftree n (Deep uv_ (Three a b c) m sf);\n        viewLn (Deep uv_ (Three a b c) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>uw_ a b c d m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uw_ (Four a b c d) m sf);\n        is_leveln_ftree n (Deep uw_ (Four a b c d) m sf);\n        viewLn (Deep uw_ (Four a b c d) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 3. \\<And>ux_ a m sf n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ (One a) m sf);\n        is_leveln_ftree n (Deep ux_ (One a) m sf);\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(auto simp add: deep_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>uw_ a b c d m sf n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uw_ (Four a b c d) m sf);\n        is_leveln_ftree n (Deep uw_ (Four a b c d) m sf);\n        viewLn (Deep uw_ (Four a b c d) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>ux_ a m sf n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ (One a) m sf);\n        is_leveln_ftree n (Deep ux_ (One a) m sf);\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(auto simp add: deep_def)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ux_ a m sf n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ (One a) m sf);\n        is_leveln_ftree n (Deep ux_ (One a) m sf);\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ux_ a m sf n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ (One a) m sf);\n        is_leveln_ftree n (Deep ux_ (One a) m sf);\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "fix ux a m sf n nd s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ux_ a m sf n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ (One a) m sf);\n        is_leveln_ftree n (Deep ux_ (One a) m sf);\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "assume av: \"\\<And>n nd s.\n           \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m; viewLn m = Some (nd, s)\\<rbrakk>\n           \\<Longrightarrow> is_measured_ftree s \\<and>\n              is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd \"\n         \" is_measured_ftree (Deep ux (One a) m sf) \"\n         \"is_leveln_ftree n (Deep ux (One a) m sf)\"\n         \"viewLn (Deep ux (One a) m sf) = Some (nd, s)\""], ["proof (state)\nthis:\n  \\<lbrakk>is_measured_ftree m; is_leveln_ftree ?n m;\n   viewLn m = Some (?nd, ?s)\\<rbrakk>\n  \\<Longrightarrow> is_measured_ftree ?s \\<and>\n                    is_measured_node ?nd \\<and>\n                    is_leveln_ftree ?n ?s \\<and> is_leveln_node ?n ?nd\n  is_measured_ftree (Deep ux (One a) m sf)\n  is_leveln_ftree n (Deep ux (One a) m sf)\n  viewLn (Deep ux (One a) m sf) = Some (nd, s)\n\ngoal (1 subgoal):\n 1. \\<And>ux_ a m sf n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ (One a) m sf);\n        is_leveln_ftree n (Deep ux_ (One a) m sf);\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "thus \"is_measured_ftree s \\<and>\n          is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\""], ["proof (prove)\nusing this:\n  \\<lbrakk>is_measured_ftree m; is_leveln_ftree ?n m;\n   viewLn m = Some (?nd, ?s)\\<rbrakk>\n  \\<Longrightarrow> is_measured_ftree ?s \\<and>\n                    is_measured_node ?nd \\<and>\n                    is_leveln_ftree ?n ?s \\<and> is_leveln_node ?n ?nd\n  is_measured_ftree (Deep ux (One a) m sf)\n  is_leveln_ftree n (Deep ux (One a) m sf)\n  viewLn (Deep ux (One a) m sf) = Some (nd, s)\n\ngoal (1 subgoal):\n 1. is_measured_ftree s \\<and>\n    is_measured_node nd \\<and>\n    is_leveln_ftree n s \\<and> is_leveln_node n nd", "proof (cases \"viewLn m\" rule: viewnres_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>n nd s.\n                \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                 viewLn m = Some (nd, s)\\<rbrakk>\n                \\<Longrightarrow> is_measured_ftree s \\<and>\n                                  is_measured_node nd \\<and>\n                                  is_leveln_ftree n s \\<and>\n                                  is_leveln_node n nd;\n     is_measured_ftree (Deep ux (One a) m sf);\n     is_leveln_ftree n (Deep ux (One a) m sf);\n     viewLn (Deep ux (One a) m sf) = Some (nd, s); viewLn m = None\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree s \\<and>\n                      is_measured_node nd \\<and>\n                      is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux (One a) m sf);\n        is_leveln_ftree n (Deep ux (One a) m sf);\n        viewLn (Deep ux (One a) m sf) = Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "case Nil"], ["proof (state)\nthis:\n  viewLn m = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>n nd s.\n                \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                 viewLn m = Some (nd, s)\\<rbrakk>\n                \\<Longrightarrow> is_measured_ftree s \\<and>\n                                  is_measured_node nd \\<and>\n                                  is_leveln_ftree n s \\<and>\n                                  is_leveln_node n nd;\n     is_measured_ftree (Deep ux (One a) m sf);\n     is_leveln_ftree n (Deep ux (One a) m sf);\n     viewLn (Deep ux (One a) m sf) = Some (nd, s); viewLn m = None\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree s \\<and>\n                      is_measured_node nd \\<and>\n                      is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux (One a) m sf);\n        is_leveln_ftree n (Deep ux (One a) m sf);\n        viewLn (Deep ux (One a) m sf) = Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "with av(4)"], ["proof (chain)\npicking this:\n  viewLn (Deep ux (One a) m sf) = Some (nd, s)\n  viewLn m = None", "have v1: \"nd = a\" \"s = digitToTree sf\""], ["proof (prove)\nusing this:\n  viewLn (Deep ux (One a) m sf) = Some (nd, s)\n  viewLn m = None\n\ngoal (1 subgoal):\n 1. nd = a &&& s = digitToTree sf", "by auto"], ["proof (state)\nthis:\n  nd = a\n  s = digitToTree sf\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>n nd s.\n                \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                 viewLn m = Some (nd, s)\\<rbrakk>\n                \\<Longrightarrow> is_measured_ftree s \\<and>\n                                  is_measured_node nd \\<and>\n                                  is_leveln_ftree n s \\<and>\n                                  is_leveln_node n nd;\n     is_measured_ftree (Deep ux (One a) m sf);\n     is_leveln_ftree n (Deep ux (One a) m sf);\n     viewLn (Deep ux (One a) m sf) = Some (nd, s); viewLn m = None\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree s \\<and>\n                      is_measured_node nd \\<and>\n                      is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux (One a) m sf);\n        is_leveln_ftree n (Deep ux (One a) m sf);\n        viewLn (Deep ux (One a) m sf) = Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "from v1 av(2,3)"], ["proof (chain)\npicking this:\n  nd = a\n  s = digitToTree sf\n  is_measured_ftree (Deep ux (One a) m sf)\n  is_leveln_ftree n (Deep ux (One a) m sf)", "show \"is_measured_ftree s \\<and>\n       is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\""], ["proof (prove)\nusing this:\n  nd = a\n  s = digitToTree sf\n  is_measured_ftree (Deep ux (One a) m sf)\n  is_leveln_ftree n (Deep ux (One a) m sf)\n\ngoal (1 subgoal):\n 1. is_measured_ftree s \\<and>\n    is_measured_node nd \\<and>\n    is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>nd = a; s = digitToTree sf; is_measured_node a;\n     is_leveln_node n a; is_measured_ftree m; is_leveln_digit n sf;\n     is_leveln_ftree (Suc n) m; is_measured_digit sf;\n     ux = gmn a + gmft m + gmd sf\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree (digitToTree sf)\n 2. \\<lbrakk>nd = a; s = digitToTree sf; is_measured_node a;\n     is_leveln_node n a; is_measured_ftree m; is_leveln_digit n sf;\n     is_leveln_ftree (Suc n) m; is_measured_digit sf;\n     ux = gmn a + gmft m + gmd sf\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n (digitToTree sf)", "apply(auto simp add: digitToTree_inv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  is_measured_ftree s \\<and>\n  is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux (One a) m sf);\n        is_leveln_ftree n (Deep ux (One a) m sf);\n        viewLn (Deep ux (One a) m sf) = Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux (One a) m sf);\n        is_leveln_ftree n (Deep ux (One a) m sf);\n        viewLn (Deep ux (One a) m sf) = Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "case (Cons b m2)"], ["proof (state)\nthis:\n  viewLn m = Some (b, m2)\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux (One a) m sf);\n        is_leveln_ftree n (Deep ux (One a) m sf);\n        viewLn (Deep ux (One a) m sf) = Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "with av(4)"], ["proof (chain)\npicking this:\n  viewLn (Deep ux (One a) m sf) = Some (nd, s)\n  viewLn m = Some (b, m2)", "have v2: \"nd = a\" \"s = (deep (nodeToDigit b) m2 sf)\""], ["proof (prove)\nusing this:\n  viewLn (Deep ux (One a) m sf) = Some (nd, s)\n  viewLn m = Some (b, m2)\n\ngoal (1 subgoal):\n 1. nd = a &&& s = deep (nodeToDigit b) m2 sf", "apply (auto simp add: deep_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  nd = a\n  s = deep (nodeToDigit b) m2 sf\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux (One a) m sf);\n        is_leveln_ftree n (Deep ux (One a) m sf);\n        viewLn (Deep ux (One a) m sf) = Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "note myiv = av(1)[of \"Suc n\" b m2]"], ["proof (state)\nthis:\n  \\<lbrakk>is_measured_ftree m; is_leveln_ftree (Suc n) m;\n   viewLn m = Some (b, m2)\\<rbrakk>\n  \\<Longrightarrow> is_measured_ftree m2 \\<and>\n                    is_measured_node b \\<and>\n                    is_leveln_ftree (Suc n) m2 \\<and>\n                    is_leveln_node (Suc n) b\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux (One a) m sf);\n        is_leveln_ftree n (Deep ux (One a) m sf);\n        viewLn (Deep ux (One a) m sf) = Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "from v2 av(2,3)"], ["proof (chain)\npicking this:\n  nd = a\n  s = deep (nodeToDigit b) m2 sf\n  is_measured_ftree (Deep ux (One a) m sf)\n  is_leveln_ftree n (Deep ux (One a) m sf)", "have \"is_measured_ftree m \\<and> is_leveln_ftree (Suc n) m\""], ["proof (prove)\nusing this:\n  nd = a\n  s = deep (nodeToDigit b) m2 sf\n  is_measured_ftree (Deep ux (One a) m sf)\n  is_leveln_ftree n (Deep ux (One a) m sf)\n\ngoal (1 subgoal):\n 1. is_measured_ftree m \\<and> is_leveln_ftree (Suc n) m", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  is_measured_ftree m \\<and> is_leveln_ftree (Suc n) m\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux (One a) m sf);\n        is_leveln_ftree n (Deep ux (One a) m sf);\n        viewLn (Deep ux (One a) m sf) = Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "hence bv: \"is_measured_ftree m2 \\<and>\n   is_measured_node b \\<and> is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b\""], ["proof (prove)\nusing this:\n  is_measured_ftree m \\<and> is_leveln_ftree (Suc n) m\n\ngoal (1 subgoal):\n 1. is_measured_ftree m2 \\<and>\n    is_measured_node b \\<and>\n    is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b", "using myiv Cons"], ["proof (prove)\nusing this:\n  is_measured_ftree m \\<and> is_leveln_ftree (Suc n) m\n  \\<lbrakk>is_measured_ftree m; is_leveln_ftree (Suc n) m;\n   viewLn m = Some (b, m2)\\<rbrakk>\n  \\<Longrightarrow> is_measured_ftree m2 \\<and>\n                    is_measured_node b \\<and>\n                    is_leveln_ftree (Suc n) m2 \\<and>\n                    is_leveln_node (Suc n) b\n  viewLn m = Some (b, m2)\n\ngoal (1 subgoal):\n 1. is_measured_ftree m2 \\<and>\n    is_measured_node b \\<and>\n    is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  is_measured_ftree m2 \\<and>\n  is_measured_node b \\<and>\n  is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewLn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux (One a) m sf);\n        is_leveln_ftree n (Deep ux (One a) m sf);\n        viewLn (Deep ux (One a) m sf) = Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "with av(2,3) v2"], ["proof (chain)\npicking this:\n  is_measured_ftree (Deep ux (One a) m sf)\n  is_leveln_ftree n (Deep ux (One a) m sf)\n  nd = a\n  s = deep (nodeToDigit b) m2 sf\n  is_measured_ftree m2 \\<and>\n  is_measured_node b \\<and>\n  is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b", "show \"is_measured_ftree s \\<and>\n          is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\""], ["proof (prove)\nusing this:\n  is_measured_ftree (Deep ux (One a) m sf)\n  is_leveln_ftree n (Deep ux (One a) m sf)\n  nd = a\n  s = deep (nodeToDigit b) m2 sf\n  is_measured_ftree m2 \\<and>\n  is_measured_node b \\<and>\n  is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b\n\ngoal (1 subgoal):\n 1. is_measured_ftree s \\<and>\n    is_measured_node nd \\<and>\n    is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(auto simp add: deep_def nodeToDigit_inv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  is_measured_ftree s \\<and>\n  is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_measured_ftree s \\<and>\n  is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma viewLn_list: \" viewLn t = Some (nd, s) \n  \\<Longrightarrow> toList t = (nodeToList nd) @ (toList s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. viewLn t = Some (nd, s) \\<Longrightarrow>\n    toList t = nodeToList nd @ toList s", "supply [[simproc del: defined_all]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. viewLn t = Some (nd, s) \\<Longrightarrow>\n    toList t = nodeToList nd @ toList s", "apply(induct t arbitrary: nd s rule: viewLn.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>nd s.\n       viewLn Empty = Some (nd, s) \\<Longrightarrow>\n       toList Empty = nodeToList nd @ toList s\n 2. \\<And>a nd s.\n       viewLn (Single a) = Some (nd, s) \\<Longrightarrow>\n       toList (Single a) = nodeToList nd @ toList s\n 3. \\<And>uu_ a b m sf nd s.\n       viewLn (Deep uu_ (Two a b) m sf) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uu_ (Two a b) m sf) = nodeToList nd @ toList s\n 4. \\<And>uv_ a b c m sf nd s.\n       viewLn (Deep uv_ (Three a b c) m sf) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ (Three a b c) m sf) = nodeToList nd @ toList s\n 5. \\<And>uw_ a b c d m sf nd s.\n       viewLn (Deep uw_ (Four a b c d) m sf) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ (Four a b c d) m sf) = nodeToList nd @ toList s\n 6. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a nd s.\n       viewLn (Single a) = Some (nd, s) \\<Longrightarrow>\n       toList (Single a) = nodeToList nd @ toList s\n 2. \\<And>uu_ a b m sf nd s.\n       viewLn (Deep uu_ (Two a b) m sf) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uu_ (Two a b) m sf) = nodeToList nd @ toList s\n 3. \\<And>uv_ a b c m sf nd s.\n       viewLn (Deep uv_ (Three a b c) m sf) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ (Three a b c) m sf) = nodeToList nd @ toList s\n 4. \\<And>uw_ a b c d m sf nd s.\n       viewLn (Deep uw_ (Four a b c d) m sf) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ (Four a b c d) m sf) = nodeToList nd @ toList s\n 5. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>uu_ a b m sf nd s.\n       viewLn (Deep uu_ (Two a b) m sf) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uu_ (Two a b) m sf) = nodeToList nd @ toList s\n 2. \\<And>uv_ a b c m sf nd s.\n       viewLn (Deep uv_ (Three a b c) m sf) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ (Three a b c) m sf) = nodeToList nd @ toList s\n 3. \\<And>uw_ a b c d m sf nd s.\n       viewLn (Deep uw_ (Four a b c d) m sf) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ (Four a b c d) m sf) = nodeToList nd @ toList s\n 4. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b m sf nd s.\n       a = nd \\<and> deep (One b) m sf = s \\<Longrightarrow>\n       nodeToList b @ toList m @ digitToList sf = toList s\n 2. \\<And>uv_ a b c m sf nd s.\n       viewLn (Deep uv_ (Three a b c) m sf) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ (Three a b c) m sf) = nodeToList nd @ toList s\n 3. \\<And>uw_ a b c d m sf nd s.\n       viewLn (Deep uw_ (Four a b c d) m sf) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ (Four a b c d) m sf) = nodeToList nd @ toList s\n 4. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(simp add: deep_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b m sf nd s.\n       a = nd \\<and>\n       Deep (gmn b + gmft m + gmd sf) (One b) m sf = s \\<Longrightarrow>\n       nodeToList b @ toList m @ digitToList sf = toList s\n 2. \\<And>uv_ a b c m sf nd s.\n       viewLn (Deep uv_ (Three a b c) m sf) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ (Three a b c) m sf) = nodeToList nd @ toList s\n 3. \\<And>uw_ a b c d m sf nd s.\n       viewLn (Deep uw_ (Four a b c d) m sf) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ (Four a b c d) m sf) = nodeToList nd @ toList s\n 4. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(auto simp add: toList_def)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>uv_ a b c m sf nd s.\n       viewLn (Deep uv_ (Three a b c) m sf) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ (Three a b c) m sf) = nodeToList nd @ toList s\n 2. \\<And>uw_ a b c d m sf nd s.\n       viewLn (Deep uw_ (Four a b c d) m sf) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ (Four a b c d) m sf) = nodeToList nd @ toList s\n 3. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b c m sf nd s.\n       a = nd \\<and> deep (Two b c) m sf = s \\<Longrightarrow>\n       nodeToList b @ nodeToList c @ toList m @ digitToList sf = toList s\n 2. \\<And>uw_ a b c d m sf nd s.\n       viewLn (Deep uw_ (Four a b c d) m sf) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ (Four a b c d) m sf) = nodeToList nd @ toList s\n 3. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(simp add: deep_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b c m sf nd s.\n       a = nd \\<and>\n       Deep (gmn b + gmn c + gmft m + gmd sf) (Two b c) m sf =\n       s \\<Longrightarrow>\n       nodeToList b @ nodeToList c @ toList m @ digitToList sf = toList s\n 2. \\<And>uw_ a b c d m sf nd s.\n       viewLn (Deep uw_ (Four a b c d) m sf) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ (Four a b c d) m sf) = nodeToList nd @ toList s\n 3. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(auto simp add: toList_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>uw_ a b c d m sf nd s.\n       viewLn (Deep uw_ (Four a b c d) m sf) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ (Four a b c d) m sf) = nodeToList nd @ toList s\n 2. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b c d m sf nd s.\n       a = nd \\<and> deep (Three b c d) m sf = s \\<Longrightarrow>\n       nodeToList b @\n       nodeToList c @ nodeToList d @ toList m @ digitToList sf =\n       toList s\n 2. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(simp add: deep_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b c d m sf nd s.\n       a = nd \\<and>\n       Deep (gmn b + gmn c + gmn d + gmft m + gmd sf) (Three b c d) m sf =\n       s \\<Longrightarrow>\n       nodeToList b @\n       nodeToList c @ nodeToList d @ toList m @ digitToList sf =\n       toList s\n 2. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(auto simp add: toList_def)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ux_ a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        viewLn (Deep ux_ (One a) m sf) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ (One a) m sf) =\n                         nodeToList nd @ toList s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a m sf nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n         | Some (b, m2) \\<Rightarrow>\n             Some (a, deep (nodeToDigit b) m2 sf)) =\n        Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> nodeToList a @ toList m @ digitToList sf =\n                         nodeToList nd @ toList s", "subgoal premises prems for a m sf nd s"], ["proof (prove)\ngoal (1 subgoal):\n 1. nodeToList a @ toList m @ digitToList sf = nodeToList nd @ toList s", "using prems"], ["proof (prove)\nusing this:\n  viewLn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = nodeToList ?nd @ toList ?s\n  (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep (nodeToDigit b) m2 sf)) =\n  Some (nd, s)\n\ngoal (1 subgoal):\n 1. nodeToList a @ toList m @ digitToList sf = nodeToList nd @ toList s", "proof (cases \"viewLn m\" rule: viewnres_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>nd s.\n                viewLn m = Some (nd, s) \\<Longrightarrow>\n                toList m = nodeToList nd @ toList s;\n     (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n      | Some (b, m2) \\<Rightarrow> Some (a, deep (nodeToDigit b) m2 sf)) =\n     Some (nd, s);\n     viewLn m = None\\<rbrakk>\n    \\<Longrightarrow> nodeToList a @ toList m @ digitToList sf =\n                      nodeToList nd @ toList s\n 2. \\<And>aa t.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n         | Some (b, m2) \\<Rightarrow>\n             Some (a, deep (nodeToDigit b) m2 sf)) =\n        Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> nodeToList a @ toList m @ digitToList sf =\n                         nodeToList nd @ toList s", "case Nil"], ["proof (state)\nthis:\n  viewLn m = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>nd s.\n                viewLn m = Some (nd, s) \\<Longrightarrow>\n                toList m = nodeToList nd @ toList s;\n     (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n      | Some (b, m2) \\<Rightarrow> Some (a, deep (nodeToDigit b) m2 sf)) =\n     Some (nd, s);\n     viewLn m = None\\<rbrakk>\n    \\<Longrightarrow> nodeToList a @ toList m @ digitToList sf =\n                      nodeToList nd @ toList s\n 2. \\<And>aa t.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n         | Some (b, m2) \\<Rightarrow>\n             Some (a, deep (nodeToDigit b) m2 sf)) =\n        Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> nodeToList a @ toList m @ digitToList sf =\n                         nodeToList nd @ toList s", "hence av: \"m = Empty\""], ["proof (prove)\nusing this:\n  viewLn m = None\n\ngoal (1 subgoal):\n 1. m = Empty", "by (metis viewLn_empty)"], ["proof (state)\nthis:\n  m = Empty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>nd s.\n                viewLn m = Some (nd, s) \\<Longrightarrow>\n                toList m = nodeToList nd @ toList s;\n     (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n      | Some (b, m2) \\<Rightarrow> Some (a, deep (nodeToDigit b) m2 sf)) =\n     Some (nd, s);\n     viewLn m = None\\<rbrakk>\n    \\<Longrightarrow> nodeToList a @ toList m @ digitToList sf =\n                      nodeToList nd @ toList s\n 2. \\<And>aa t.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n         | Some (b, m2) \\<Rightarrow>\n             Some (a, deep (nodeToDigit b) m2 sf)) =\n        Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> nodeToList a @ toList m @ digitToList sf =\n                         nodeToList nd @ toList s", "from av prems"], ["proof (chain)\npicking this:\n  m = Empty\n  viewLn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = nodeToList ?nd @ toList ?s\n  (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep (nodeToDigit b) m2 sf)) =\n  Some (nd, s)", "show \"nodeToList a @ toList m @ digitToList sf = nodeToList nd @ toList s\""], ["proof (prove)\nusing this:\n  m = Empty\n  viewLn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = nodeToList ?nd @ toList ?s\n  (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep (nodeToDigit b) m2 sf)) =\n  Some (nd, s)\n\ngoal (1 subgoal):\n 1. nodeToList a @ toList m @ digitToList sf = nodeToList nd @ toList s", "by (auto simp add: digitToTree_list)"], ["proof (state)\nthis:\n  nodeToList a @ toList m @ digitToList sf = nodeToList nd @ toList s\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n         | Some (b, m2) \\<Rightarrow>\n             Some (a, deep (nodeToDigit b) m2 sf)) =\n        Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> nodeToList a @ toList m @ digitToList sf =\n                         nodeToList nd @ toList s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n         | Some (b, m2) \\<Rightarrow>\n             Some (a, deep (nodeToDigit b) m2 sf)) =\n        Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> nodeToList a @ toList m @ digitToList sf =\n                         nodeToList nd @ toList s", "case (Cons b m2)"], ["proof (state)\nthis:\n  viewLn m = Some (b, m2)\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n         | Some (b, m2) \\<Rightarrow>\n             Some (a, deep (nodeToDigit b) m2 sf)) =\n        Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> nodeToList a @ toList m @ digitToList sf =\n                         nodeToList nd @ toList s", "with prems"], ["proof (chain)\npicking this:\n  viewLn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = nodeToList ?nd @ toList ?s\n  (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep (nodeToDigit b) m2 sf)) =\n  Some (nd, s)\n  viewLn m = Some (b, m2)", "have bv: \"nd = a\" \"s = (deep (nodeToDigit b) m2 sf)\""], ["proof (prove)\nusing this:\n  viewLn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = nodeToList ?nd @ toList ?s\n  (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep (nodeToDigit b) m2 sf)) =\n  Some (nd, s)\n  viewLn m = Some (b, m2)\n\ngoal (1 subgoal):\n 1. nd = a &&& s = deep (nodeToDigit b) m2 sf", "by (auto simp add: deep_def)"], ["proof (state)\nthis:\n  nd = a\n  s = deep (nodeToDigit b) m2 sf\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>nd s.\n                   viewLn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = nodeToList nd @ toList s;\n        (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n         | Some (b, m2) \\<Rightarrow>\n             Some (a, deep (nodeToDigit b) m2 sf)) =\n        Some (nd, s);\n        viewLn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> nodeToList a @ toList m @ digitToList sf =\n                         nodeToList nd @ toList s", "with Cons prems"], ["proof (chain)\npicking this:\n  viewLn m = Some (b, m2)\n  viewLn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = nodeToList ?nd @ toList ?s\n  (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep (nodeToDigit b) m2 sf)) =\n  Some (nd, s)\n  nd = a\n  s = deep (nodeToDigit b) m2 sf", "show \"nodeToList a @ toList m @ digitToList sf = nodeToList nd @ toList s\""], ["proof (prove)\nusing this:\n  viewLn m = Some (b, m2)\n  viewLn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = nodeToList ?nd @ toList ?s\n  (case viewLn m of None \\<Rightarrow> Some (a, digitToTree sf)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep (nodeToDigit b) m2 sf)) =\n  Some (nd, s)\n  nd = a\n  s = deep (nodeToDigit b) m2 sf\n\ngoal (1 subgoal):\n 1. nodeToList a @ toList m @ digitToList sf = nodeToList nd @ toList s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>viewLn m = Some (b, m2);\n     \\<And>nd s.\n        b = nd \\<and> m2 = s \\<Longrightarrow>\n        toList m = nodeToList nd @ toList s;\n     nd = a; s = deep (nodeToDigit b) m2 sf\\<rbrakk>\n    \\<Longrightarrow> nodeToList b @ toList m2 @ digitToList sf =\n                      toList (deep (nodeToDigit b) m2 sf)", "apply(simp add: deep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>viewLn m = Some (b, m2);\n     \\<And>nd s.\n        b = nd \\<and> m2 = s \\<Longrightarrow>\n        toList m = nodeToList nd @ toList s;\n     nd = a;\n     s =\n     Deep (gmd (nodeToDigit b) + gmft m2 + gmd sf) (nodeToDigit b) m2\n      sf\\<rbrakk>\n    \\<Longrightarrow> nodeToList b = digitToList (nodeToDigit b)", "apply(simp add: deep_def nodeToDigit_list)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  nodeToList a @ toList m @ digitToList sf = nodeToList nd @ toList s\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma viewRn_empty: \"t \\<noteq> Empty \\<longleftrightarrow> (viewRn t) \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "proof (cases t)"], ["proof (state)\ngoal (3 subgoals):\n 1. t = Empty \\<Longrightarrow>\n    (t \\<noteq> Empty) = (viewRn t \\<noteq> None)\n 2. \\<And>x2.\n       t = Single x2 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)\n 3. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "case Empty"], ["proof (state)\nthis:\n  t = Empty\n\ngoal (3 subgoals):\n 1. t = Empty \\<Longrightarrow>\n    (t \\<noteq> Empty) = (viewRn t \\<noteq> None)\n 2. \\<And>x2.\n       t = Single x2 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)\n 3. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Empty\n\ngoal (1 subgoal):\n 1. (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "by simp"], ["proof (state)\nthis:\n  (t \\<noteq> Empty) = (viewRn t \\<noteq> None)\n\ngoal (2 subgoals):\n 1. \\<And>x2.\n       t = Single x2 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)\n 2. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x2.\n       t = Single x2 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)\n 2. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "case (Single Node)"], ["proof (state)\nthis:\n  t = Single Node\n\ngoal (2 subgoals):\n 1. \\<And>x2.\n       t = Single x2 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)\n 2. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Single Node\n\ngoal (1 subgoal):\n 1. (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "by simp"], ["proof (state)\nthis:\n  (t \\<noteq> Empty) = (viewRn t \\<noteq> None)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "case (Deep a l x r)"], ["proof (state)\nthis:\n  t = Deep a l x r\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Deep a l x r\n\ngoal (1 subgoal):\n 1. (t \\<noteq> Empty) = (viewRn t \\<noteq> None)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. t = Deep a l x r \\<Longrightarrow>\n    \\<exists>aa b. viewRn (Deep a l x r) = Some (aa, b)", "apply(case_tac r)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>t = Deep a l x r; r = One x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b. viewRn (Deep a l x r) = Some (aa, b)\n 2. \\<And>x21 x22.\n       \\<lbrakk>t = Deep a l x r; r = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b. viewRn (Deep a l x r) = Some (aa, b)\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>t = Deep a l x r; r = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b. viewRn (Deep a l x r) = Some (aa, b)\n 4. \\<And>x41 x42 x43 x44.\n       \\<lbrakk>t = Deep a l x r; r = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b. viewRn (Deep a l x r) = Some (aa, b)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>t = Deep a l x (One x1); r = One x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (case viewRn x of\n                             None \\<Rightarrow> Some (x1, digitToTree l)\n                             | Some (b, m2) \\<Rightarrow>\n                                 Some (x1, deep l m2 (nodeToDigit b))) =\n                            Some (a, b)", "apply(cases \"viewRn x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>t = Deep a l x (One x1); r = One x1;\n        viewRn x = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (case viewRn x of\n                             None \\<Rightarrow> Some (x1, digitToTree l)\n                             | Some (b, m2) \\<Rightarrow>\n                                 Some (x1, deep l m2 (nodeToDigit b))) =\n                            Some (a, b)\n 2. \\<And>x1 aa.\n       \\<lbrakk>t = Deep a l x (One x1); r = One x1;\n        viewRn x = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (case viewRn x of\n                             None \\<Rightarrow> Some (x1, digitToTree l)\n                             | Some (b, m2) \\<Rightarrow>\n                                 Some (x1, deep l m2 (nodeToDigit b))) =\n                            Some (a, b)", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (t \\<noteq> Empty) = (viewRn t \\<noteq> None)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma viewRn_inv: \"\\<lbrakk>\n  is_measured_ftree t; is_leveln_ftree n t; viewRn t = Some (nd, s)\n  \\<rbrakk> \\<Longrightarrow> is_measured_ftree s \\<and> is_measured_node nd \\<and> \n       is_leveln_ftree n s \\<and> is_leveln_node n nd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_measured_ftree t; is_leveln_ftree n t;\n     viewRn t = Some (nd, s)\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree s \\<and>\n                      is_measured_node nd \\<and>\n                      is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(induct t arbitrary: n nd s rule: viewRn.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n nd s.\n       \\<lbrakk>is_measured_ftree Empty; is_leveln_ftree n Empty;\n        viewRn Empty = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>a n nd s.\n       \\<lbrakk>is_measured_ftree (Single a); is_leveln_ftree n (Single a);\n        viewRn (Single a) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 3. \\<And>uu_ pr m a b n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uu_ pr m (Two a b));\n        is_leveln_ftree n (Deep uu_ pr m (Two a b));\n        viewRn (Deep uu_ pr m (Two a b)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 4. \\<And>uv_ pr m a b c n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uv_ pr m (Three a b c));\n        is_leveln_ftree n (Deep uv_ pr m (Three a b c));\n        viewRn (Deep uv_ pr m (Three a b c)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 5. \\<And>uw_ pr m a b c d n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uw_ pr m (Four a b c d));\n        is_leveln_ftree n (Deep uw_ pr m (Four a b c d));\n        viewRn (Deep uw_ pr m (Four a b c d)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 6. \\<And>ux_ pr m a n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ pr m (One a));\n        is_leveln_ftree n (Deep ux_ pr m (One a));\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(simp add: viewRn_empty)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a n nd s.\n       \\<lbrakk>is_measured_ftree (Single a); is_leveln_ftree n (Single a);\n        viewRn (Single a) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>uu_ pr m a b n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uu_ pr m (Two a b));\n        is_leveln_ftree n (Deep uu_ pr m (Two a b));\n        viewRn (Deep uu_ pr m (Two a b)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 3. \\<And>uv_ pr m a b c n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uv_ pr m (Three a b c));\n        is_leveln_ftree n (Deep uv_ pr m (Three a b c));\n        viewRn (Deep uv_ pr m (Three a b c)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 4. \\<And>uw_ pr m a b c d n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uw_ pr m (Four a b c d));\n        is_leveln_ftree n (Deep uw_ pr m (Four a b c d));\n        viewRn (Deep uw_ pr m (Four a b c d)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 5. \\<And>ux_ pr m a n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ pr m (One a));\n        is_leveln_ftree n (Deep ux_ pr m (One a));\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>uu_ pr m a b n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uu_ pr m (Two a b));\n        is_leveln_ftree n (Deep uu_ pr m (Two a b));\n        viewRn (Deep uu_ pr m (Two a b)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>uv_ pr m a b c n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uv_ pr m (Three a b c));\n        is_leveln_ftree n (Deep uv_ pr m (Three a b c));\n        viewRn (Deep uv_ pr m (Three a b c)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 3. \\<And>uw_ pr m a b c d n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uw_ pr m (Four a b c d));\n        is_leveln_ftree n (Deep uw_ pr m (Four a b c d));\n        viewRn (Deep uw_ pr m (Four a b c d)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 4. \\<And>ux_ pr m a n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ pr m (One a));\n        is_leveln_ftree n (Deep ux_ pr m (One a));\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(auto simp add: deep_def)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>uv_ pr m a b c n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uv_ pr m (Three a b c));\n        is_leveln_ftree n (Deep uv_ pr m (Three a b c));\n        viewRn (Deep uv_ pr m (Three a b c)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>uw_ pr m a b c d n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uw_ pr m (Four a b c d));\n        is_leveln_ftree n (Deep uw_ pr m (Four a b c d));\n        viewRn (Deep uw_ pr m (Four a b c d)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 3. \\<And>ux_ pr m a n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ pr m (One a));\n        is_leveln_ftree n (Deep ux_ pr m (One a));\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(auto simp add: deep_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>uw_ pr m a b c d n nd s.\n       \\<lbrakk>is_measured_ftree (Deep uw_ pr m (Four a b c d));\n        is_leveln_ftree n (Deep uw_ pr m (Four a b c d));\n        viewRn (Deep uw_ pr m (Four a b c d)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>ux_ pr m a n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ pr m (One a));\n        is_leveln_ftree n (Deep ux_ pr m (One a));\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(auto simp add: deep_def)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ux_ pr m a n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ pr m (One a));\n        is_leveln_ftree n (Deep ux_ pr m (One a));\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ux_ pr m a n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ pr m (One a));\n        is_leveln_ftree n (Deep ux_ pr m (One a));\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "fix ux a m \"pr\" n nd s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ux_ pr m a n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ pr m (One a));\n        is_leveln_ftree n (Deep ux_ pr m (One a));\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "assume av: \"\\<And>n nd s.\n           \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m; viewRn m = Some (nd, s)\\<rbrakk>\n           \\<Longrightarrow> is_measured_ftree s \\<and>\n              is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd \"\n         \" is_measured_ftree (Deep ux pr m (One a)) \"\n         \"is_leveln_ftree n (Deep ux pr m (One a))\"\n         \"viewRn (Deep ux pr m (One a)) = Some (nd, s)\""], ["proof (state)\nthis:\n  \\<lbrakk>is_measured_ftree m; is_leveln_ftree ?n m;\n   viewRn m = Some (?nd, ?s)\\<rbrakk>\n  \\<Longrightarrow> is_measured_ftree ?s \\<and>\n                    is_measured_node ?nd \\<and>\n                    is_leveln_ftree ?n ?s \\<and> is_leveln_node ?n ?nd\n  is_measured_ftree (Deep ux pr m (One a))\n  is_leveln_ftree n (Deep ux pr m (One a))\n  viewRn (Deep ux pr m (One a)) = Some (nd, s)\n\ngoal (1 subgoal):\n 1. \\<And>ux_ pr m a n nd s.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux_ pr m (One a));\n        is_leveln_ftree n (Deep ux_ pr m (One a));\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "thus \"is_measured_ftree s \\<and>\n          is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\""], ["proof (prove)\nusing this:\n  \\<lbrakk>is_measured_ftree m; is_leveln_ftree ?n m;\n   viewRn m = Some (?nd, ?s)\\<rbrakk>\n  \\<Longrightarrow> is_measured_ftree ?s \\<and>\n                    is_measured_node ?nd \\<and>\n                    is_leveln_ftree ?n ?s \\<and> is_leveln_node ?n ?nd\n  is_measured_ftree (Deep ux pr m (One a))\n  is_leveln_ftree n (Deep ux pr m (One a))\n  viewRn (Deep ux pr m (One a)) = Some (nd, s)\n\ngoal (1 subgoal):\n 1. is_measured_ftree s \\<and>\n    is_measured_node nd \\<and>\n    is_leveln_ftree n s \\<and> is_leveln_node n nd", "proof (cases \"viewRn m\" rule: viewnres_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>n nd s.\n                \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                 viewRn m = Some (nd, s)\\<rbrakk>\n                \\<Longrightarrow> is_measured_ftree s \\<and>\n                                  is_measured_node nd \\<and>\n                                  is_leveln_ftree n s \\<and>\n                                  is_leveln_node n nd;\n     is_measured_ftree (Deep ux pr m (One a));\n     is_leveln_ftree n (Deep ux pr m (One a));\n     viewRn (Deep ux pr m (One a)) = Some (nd, s); viewRn m = None\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree s \\<and>\n                      is_measured_node nd \\<and>\n                      is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux pr m (One a));\n        is_leveln_ftree n (Deep ux pr m (One a));\n        viewRn (Deep ux pr m (One a)) = Some (nd, s);\n        viewRn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "case Nil"], ["proof (state)\nthis:\n  viewRn m = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>n nd s.\n                \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                 viewRn m = Some (nd, s)\\<rbrakk>\n                \\<Longrightarrow> is_measured_ftree s \\<and>\n                                  is_measured_node nd \\<and>\n                                  is_leveln_ftree n s \\<and>\n                                  is_leveln_node n nd;\n     is_measured_ftree (Deep ux pr m (One a));\n     is_leveln_ftree n (Deep ux pr m (One a));\n     viewRn (Deep ux pr m (One a)) = Some (nd, s); viewRn m = None\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree s \\<and>\n                      is_measured_node nd \\<and>\n                      is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux pr m (One a));\n        is_leveln_ftree n (Deep ux pr m (One a));\n        viewRn (Deep ux pr m (One a)) = Some (nd, s);\n        viewRn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "with av(4)"], ["proof (chain)\npicking this:\n  viewRn (Deep ux pr m (One a)) = Some (nd, s)\n  viewRn m = None", "have v1: \"nd = a\" \"s = digitToTree pr\""], ["proof (prove)\nusing this:\n  viewRn (Deep ux pr m (One a)) = Some (nd, s)\n  viewRn m = None\n\ngoal (1 subgoal):\n 1. nd = a &&& s = digitToTree pr", "by auto"], ["proof (state)\nthis:\n  nd = a\n  s = digitToTree pr\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>n nd s.\n                \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                 viewRn m = Some (nd, s)\\<rbrakk>\n                \\<Longrightarrow> is_measured_ftree s \\<and>\n                                  is_measured_node nd \\<and>\n                                  is_leveln_ftree n s \\<and>\n                                  is_leveln_node n nd;\n     is_measured_ftree (Deep ux pr m (One a));\n     is_leveln_ftree n (Deep ux pr m (One a));\n     viewRn (Deep ux pr m (One a)) = Some (nd, s); viewRn m = None\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree s \\<and>\n                      is_measured_node nd \\<and>\n                      is_leveln_ftree n s \\<and> is_leveln_node n nd\n 2. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux pr m (One a));\n        is_leveln_ftree n (Deep ux pr m (One a));\n        viewRn (Deep ux pr m (One a)) = Some (nd, s);\n        viewRn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "from v1 av(2,3)"], ["proof (chain)\npicking this:\n  nd = a\n  s = digitToTree pr\n  is_measured_ftree (Deep ux pr m (One a))\n  is_leveln_ftree n (Deep ux pr m (One a))", "show \"is_measured_ftree s \\<and>\n       is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\""], ["proof (prove)\nusing this:\n  nd = a\n  s = digitToTree pr\n  is_measured_ftree (Deep ux pr m (One a))\n  is_leveln_ftree n (Deep ux pr m (One a))\n\ngoal (1 subgoal):\n 1. is_measured_ftree s \\<and>\n    is_measured_node nd \\<and>\n    is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>nd = a; s = digitToTree pr; is_measured_digit pr;\n     is_leveln_digit n pr; is_measured_ftree m; is_leveln_node n a;\n     is_leveln_ftree (Suc n) m; is_measured_node a;\n     ux = gmd pr + gmft m + gmn a\\<rbrakk>\n    \\<Longrightarrow> is_measured_ftree (digitToTree pr)\n 2. \\<lbrakk>nd = a; s = digitToTree pr; is_measured_digit pr;\n     is_leveln_digit n pr; is_measured_ftree m; is_leveln_node n a;\n     is_leveln_ftree (Suc n) m; is_measured_node a;\n     ux = gmd pr + gmft m + gmn a\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n (digitToTree pr)", "apply(auto simp add: digitToTree_inv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  is_measured_ftree s \\<and>\n  is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux pr m (One a));\n        is_leveln_ftree n (Deep ux pr m (One a));\n        viewRn (Deep ux pr m (One a)) = Some (nd, s);\n        viewRn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux pr m (One a));\n        is_leveln_ftree n (Deep ux pr m (One a));\n        viewRn (Deep ux pr m (One a)) = Some (nd, s);\n        viewRn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "case (Cons b m2)"], ["proof (state)\nthis:\n  viewRn m = Some (b, m2)\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux pr m (One a));\n        is_leveln_ftree n (Deep ux pr m (One a));\n        viewRn (Deep ux pr m (One a)) = Some (nd, s);\n        viewRn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "with av(4)"], ["proof (chain)\npicking this:\n  viewRn (Deep ux pr m (One a)) = Some (nd, s)\n  viewRn m = Some (b, m2)", "have v2: \"nd = a\" \"s = (deep pr m2 (nodeToDigit b))\""], ["proof (prove)\nusing this:\n  viewRn (Deep ux pr m (One a)) = Some (nd, s)\n  viewRn m = Some (b, m2)\n\ngoal (1 subgoal):\n 1. nd = a &&& s = deep pr m2 (nodeToDigit b)", "apply (auto simp add: deep_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  nd = a\n  s = deep pr m2 (nodeToDigit b)\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux pr m (One a));\n        is_leveln_ftree n (Deep ux pr m (One a));\n        viewRn (Deep ux pr m (One a)) = Some (nd, s);\n        viewRn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "note myiv = av(1)[of \"Suc n\" b m2]"], ["proof (state)\nthis:\n  \\<lbrakk>is_measured_ftree m; is_leveln_ftree (Suc n) m;\n   viewRn m = Some (b, m2)\\<rbrakk>\n  \\<Longrightarrow> is_measured_ftree m2 \\<and>\n                    is_measured_node b \\<and>\n                    is_leveln_ftree (Suc n) m2 \\<and>\n                    is_leveln_node (Suc n) b\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux pr m (One a));\n        is_leveln_ftree n (Deep ux pr m (One a));\n        viewRn (Deep ux pr m (One a)) = Some (nd, s);\n        viewRn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "from v2 av(2,3)"], ["proof (chain)\npicking this:\n  nd = a\n  s = deep pr m2 (nodeToDigit b)\n  is_measured_ftree (Deep ux pr m (One a))\n  is_leveln_ftree n (Deep ux pr m (One a))", "have \"is_measured_ftree m \\<and> is_leveln_ftree (Suc n) m\""], ["proof (prove)\nusing this:\n  nd = a\n  s = deep pr m2 (nodeToDigit b)\n  is_measured_ftree (Deep ux pr m (One a))\n  is_leveln_ftree n (Deep ux pr m (One a))\n\ngoal (1 subgoal):\n 1. is_measured_ftree m \\<and> is_leveln_ftree (Suc n) m", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  is_measured_ftree m \\<and> is_leveln_ftree (Suc n) m\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux pr m (One a));\n        is_leveln_ftree n (Deep ux pr m (One a));\n        viewRn (Deep ux pr m (One a)) = Some (nd, s);\n        viewRn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "hence bv: \"is_measured_ftree m2 \\<and>\n   is_measured_node b \\<and> is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b\""], ["proof (prove)\nusing this:\n  is_measured_ftree m \\<and> is_leveln_ftree (Suc n) m\n\ngoal (1 subgoal):\n 1. is_measured_ftree m2 \\<and>\n    is_measured_node b \\<and>\n    is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b", "using myiv Cons"], ["proof (prove)\nusing this:\n  is_measured_ftree m \\<and> is_leveln_ftree (Suc n) m\n  \\<lbrakk>is_measured_ftree m; is_leveln_ftree (Suc n) m;\n   viewRn m = Some (b, m2)\\<rbrakk>\n  \\<Longrightarrow> is_measured_ftree m2 \\<and>\n                    is_measured_node b \\<and>\n                    is_leveln_ftree (Suc n) m2 \\<and>\n                    is_leveln_node (Suc n) b\n  viewRn m = Some (b, m2)\n\ngoal (1 subgoal):\n 1. is_measured_ftree m2 \\<and>\n    is_measured_node b \\<and>\n    is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  is_measured_ftree m2 \\<and>\n  is_measured_node b \\<and>\n  is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       \\<lbrakk>\\<And>n nd s.\n                   \\<lbrakk>is_measured_ftree m; is_leveln_ftree n m;\n                    viewRn m = Some (nd, s)\\<rbrakk>\n                   \\<Longrightarrow> is_measured_ftree s \\<and>\n                                     is_measured_node nd \\<and>\n                                     is_leveln_ftree n s \\<and>\n                                     is_leveln_node n nd;\n        is_measured_ftree (Deep ux pr m (One a));\n        is_leveln_ftree n (Deep ux pr m (One a));\n        viewRn (Deep ux pr m (One a)) = Some (nd, s);\n        viewRn m = Some (aa, t)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree s \\<and>\n                         is_measured_node nd \\<and>\n                         is_leveln_ftree n s \\<and> is_leveln_node n nd", "with av(2,3) v2"], ["proof (chain)\npicking this:\n  is_measured_ftree (Deep ux pr m (One a))\n  is_leveln_ftree n (Deep ux pr m (One a))\n  nd = a\n  s = deep pr m2 (nodeToDigit b)\n  is_measured_ftree m2 \\<and>\n  is_measured_node b \\<and>\n  is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b", "show \"is_measured_ftree s \\<and>\n          is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\""], ["proof (prove)\nusing this:\n  is_measured_ftree (Deep ux pr m (One a))\n  is_leveln_ftree n (Deep ux pr m (One a))\n  nd = a\n  s = deep pr m2 (nodeToDigit b)\n  is_measured_ftree m2 \\<and>\n  is_measured_node b \\<and>\n  is_leveln_ftree (Suc n) m2 \\<and> is_leveln_node (Suc n) b\n\ngoal (1 subgoal):\n 1. is_measured_ftree s \\<and>\n    is_measured_node nd \\<and>\n    is_leveln_ftree n s \\<and> is_leveln_node n nd", "apply(auto simp add: deep_def nodeToDigit_inv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  is_measured_ftree s \\<and>\n  is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_measured_ftree s \\<and>\n  is_measured_node nd \\<and> is_leveln_ftree n s \\<and> is_leveln_node n nd\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma viewRn_list: \"viewRn t = Some (nd, s) \n  \\<Longrightarrow> toList t = (toList s) @ (nodeToList nd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. viewRn t = Some (nd, s) \\<Longrightarrow>\n    toList t = toList s @ nodeToList nd", "supply [[simproc del: defined_all]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. viewRn t = Some (nd, s) \\<Longrightarrow>\n    toList t = toList s @ nodeToList nd", "apply(induct t arbitrary: nd s rule: viewRn.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>nd s.\n       viewRn Empty = Some (nd, s) \\<Longrightarrow>\n       toList Empty = toList s @ nodeToList nd\n 2. \\<And>a nd s.\n       viewRn (Single a) = Some (nd, s) \\<Longrightarrow>\n       toList (Single a) = toList s @ nodeToList nd\n 3. \\<And>uu_ pr m a b nd s.\n       viewRn (Deep uu_ pr m (Two a b)) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uu_ pr m (Two a b)) = toList s @ nodeToList nd\n 4. \\<And>uv_ pr m a b c nd s.\n       viewRn (Deep uv_ pr m (Three a b c)) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ pr m (Three a b c)) = toList s @ nodeToList nd\n 5. \\<And>uw_ pr m a b c d nd s.\n       viewRn (Deep uw_ pr m (Four a b c d)) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ pr m (Four a b c d)) = toList s @ nodeToList nd\n 6. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a nd s.\n       viewRn (Single a) = Some (nd, s) \\<Longrightarrow>\n       toList (Single a) = toList s @ nodeToList nd\n 2. \\<And>uu_ pr m a b nd s.\n       viewRn (Deep uu_ pr m (Two a b)) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uu_ pr m (Two a b)) = toList s @ nodeToList nd\n 3. \\<And>uv_ pr m a b c nd s.\n       viewRn (Deep uv_ pr m (Three a b c)) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ pr m (Three a b c)) = toList s @ nodeToList nd\n 4. \\<And>uw_ pr m a b c d nd s.\n       viewRn (Deep uw_ pr m (Four a b c d)) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ pr m (Four a b c d)) = toList s @ nodeToList nd\n 5. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>uu_ pr m a b nd s.\n       viewRn (Deep uu_ pr m (Two a b)) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uu_ pr m (Two a b)) = toList s @ nodeToList nd\n 2. \\<And>uv_ pr m a b c nd s.\n       viewRn (Deep uv_ pr m (Three a b c)) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ pr m (Three a b c)) = toList s @ nodeToList nd\n 3. \\<And>uw_ pr m a b c d nd s.\n       viewRn (Deep uw_ pr m (Four a b c d)) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ pr m (Four a b c d)) = toList s @ nodeToList nd\n 4. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pr m a b nd s.\n       b = nd \\<and> deep pr m (One a) = s \\<Longrightarrow>\n       digitToList pr @ toList m @ nodeToList a = toList s\n 2. \\<And>uv_ pr m a b c nd s.\n       viewRn (Deep uv_ pr m (Three a b c)) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ pr m (Three a b c)) = toList s @ nodeToList nd\n 3. \\<And>uw_ pr m a b c d nd s.\n       viewRn (Deep uw_ pr m (Four a b c d)) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ pr m (Four a b c d)) = toList s @ nodeToList nd\n 4. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(simp add: deep_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pr m a b nd s.\n       b = nd \\<and>\n       Deep (gmd pr + gmft m + gmn a) pr m (One a) = s \\<Longrightarrow>\n       digitToList pr @ toList m @ nodeToList a = toList s\n 2. \\<And>uv_ pr m a b c nd s.\n       viewRn (Deep uv_ pr m (Three a b c)) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ pr m (Three a b c)) = toList s @ nodeToList nd\n 3. \\<And>uw_ pr m a b c d nd s.\n       viewRn (Deep uw_ pr m (Four a b c d)) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ pr m (Four a b c d)) = toList s @ nodeToList nd\n 4. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(auto simp add: toList_def)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>uv_ pr m a b c nd s.\n       viewRn (Deep uv_ pr m (Three a b c)) = Some (nd, s) \\<Longrightarrow>\n       toList (Deep uv_ pr m (Three a b c)) = toList s @ nodeToList nd\n 2. \\<And>uw_ pr m a b c d nd s.\n       viewRn (Deep uw_ pr m (Four a b c d)) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ pr m (Four a b c d)) = toList s @ nodeToList nd\n 3. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pr m a b c nd s.\n       c = nd \\<and> deep pr m (Two a b) = s \\<Longrightarrow>\n       digitToList pr @ toList m @ nodeToList a @ nodeToList b = toList s\n 2. \\<And>uw_ pr m a b c d nd s.\n       viewRn (Deep uw_ pr m (Four a b c d)) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ pr m (Four a b c d)) = toList s @ nodeToList nd\n 3. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(simp add: deep_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pr m a b c nd s.\n       c = nd \\<and>\n       Deep (gmd pr + gmft m + (gmn a + gmn b)) pr m (Two a b) =\n       s \\<Longrightarrow>\n       digitToList pr @ toList m @ nodeToList a @ nodeToList b = toList s\n 2. \\<And>uw_ pr m a b c d nd s.\n       viewRn (Deep uw_ pr m (Four a b c d)) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ pr m (Four a b c d)) = toList s @ nodeToList nd\n 3. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(auto simp add: toList_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>uw_ pr m a b c d nd s.\n       viewRn (Deep uw_ pr m (Four a b c d)) =\n       Some (nd, s) \\<Longrightarrow>\n       toList (Deep uw_ pr m (Four a b c d)) = toList s @ nodeToList nd\n 2. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pr m a b c d nd s.\n       d = nd \\<and> deep pr m (Three a b c) = s \\<Longrightarrow>\n       digitToList pr @\n       toList m @ nodeToList a @ nodeToList b @ nodeToList c =\n       toList s\n 2. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(simp add: deep_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pr m a b c d nd s.\n       d = nd \\<and>\n       Deep (gmd pr + gmft m + (gmn a + gmn b + gmn c)) pr m (Three a b c) =\n       s \\<Longrightarrow>\n       digitToList pr @\n       toList m @ nodeToList a @ nodeToList b @ nodeToList c =\n       toList s\n 2. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(auto simp add: toList_def)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ux_ pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        viewRn (Deep ux_ pr m (One a)) = Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep ux_ pr m (One a)) =\n                         toList s @ nodeToList nd", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pr m a nd s.\n       \\<lbrakk>\\<And>nd s.\n                   viewRn m = Some (nd, s) \\<Longrightarrow>\n                   toList m = toList s @ nodeToList nd;\n        (case viewRn m of None \\<Rightarrow> Some (a, digitToTree pr)\n         | Some (b, m2) \\<Rightarrow>\n             Some (a, deep pr m2 (nodeToDigit b))) =\n        Some (nd, s)\\<rbrakk>\n       \\<Longrightarrow> digitToList pr @ toList m @ nodeToList a =\n                         toList s @ nodeToList nd", "subgoal premises prems for pr m a nd s"], ["proof (prove)\ngoal (1 subgoal):\n 1. digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd", "proof (cases \"viewRn m\" rule: viewnres_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. viewRn m = None \\<Longrightarrow>\n    digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd\n 2. \\<And>aa t.\n       viewRn m = Some (aa, t) \\<Longrightarrow>\n       digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd", "case Nil"], ["proof (state)\nthis:\n  viewRn m = None\n\ngoal (2 subgoals):\n 1. viewRn m = None \\<Longrightarrow>\n    digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd\n 2. \\<And>aa t.\n       viewRn m = Some (aa, t) \\<Longrightarrow>\n       digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd", "from Nil"], ["proof (chain)\npicking this:\n  viewRn m = None", "have av: \"m = Empty\""], ["proof (prove)\nusing this:\n  viewRn m = None\n\ngoal (1 subgoal):\n 1. m = Empty", "by (metis viewRn_empty)"], ["proof (state)\nthis:\n  m = Empty\n\ngoal (2 subgoals):\n 1. viewRn m = None \\<Longrightarrow>\n    digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd\n 2. \\<And>aa t.\n       viewRn m = Some (aa, t) \\<Longrightarrow>\n       digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd", "from av prems"], ["proof (chain)\npicking this:\n  m = Empty\n  viewRn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = toList ?s @ nodeToList ?nd\n  (case viewRn m of None \\<Rightarrow> Some (a, digitToTree pr)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep pr m2 (nodeToDigit b))) =\n  Some (nd, s)", "show \"digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd\""], ["proof (prove)\nusing this:\n  m = Empty\n  viewRn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = toList ?s @ nodeToList ?nd\n  (case viewRn m of None \\<Rightarrow> Some (a, digitToTree pr)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep pr m2 (nodeToDigit b))) =\n  Some (nd, s)\n\ngoal (1 subgoal):\n 1. digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd", "by (auto simp add: digitToTree_list)"], ["proof (state)\nthis:\n  digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       viewRn m = Some (aa, t) \\<Longrightarrow>\n       digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       viewRn m = Some (aa, t) \\<Longrightarrow>\n       digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd", "case (Cons b m2)"], ["proof (state)\nthis:\n  viewRn m = Some (b, m2)\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       viewRn m = Some (aa, t) \\<Longrightarrow>\n       digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd", "with prems"], ["proof (chain)\npicking this:\n  viewRn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = toList ?s @ nodeToList ?nd\n  (case viewRn m of None \\<Rightarrow> Some (a, digitToTree pr)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep pr m2 (nodeToDigit b))) =\n  Some (nd, s)\n  viewRn m = Some (b, m2)", "have bv: \"nd = a\" \"s = (deep pr m2 (nodeToDigit b))\""], ["proof (prove)\nusing this:\n  viewRn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = toList ?s @ nodeToList ?nd\n  (case viewRn m of None \\<Rightarrow> Some (a, digitToTree pr)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep pr m2 (nodeToDigit b))) =\n  Some (nd, s)\n  viewRn m = Some (b, m2)\n\ngoal (1 subgoal):\n 1. nd = a &&& s = deep pr m2 (nodeToDigit b)", "apply(auto simp add: deep_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  nd = a\n  s = deep pr m2 (nodeToDigit b)\n\ngoal (1 subgoal):\n 1. \\<And>aa t.\n       viewRn m = Some (aa, t) \\<Longrightarrow>\n       digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd", "with Cons prems"], ["proof (chain)\npicking this:\n  viewRn m = Some (b, m2)\n  viewRn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = toList ?s @ nodeToList ?nd\n  (case viewRn m of None \\<Rightarrow> Some (a, digitToTree pr)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep pr m2 (nodeToDigit b))) =\n  Some (nd, s)\n  nd = a\n  s = deep pr m2 (nodeToDigit b)", "show \"digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd\""], ["proof (prove)\nusing this:\n  viewRn m = Some (b, m2)\n  viewRn m = Some (?nd, ?s) \\<Longrightarrow>\n  toList m = toList ?s @ nodeToList ?nd\n  (case viewRn m of None \\<Rightarrow> Some (a, digitToTree pr)\n   | Some (b, m2) \\<Rightarrow> Some (a, deep pr m2 (nodeToDigit b))) =\n  Some (nd, s)\n  nd = a\n  s = deep pr m2 (nodeToDigit b)\n\ngoal (1 subgoal):\n 1. digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>viewRn m = Some (b, m2);\n     \\<And>nd s.\n        b = nd \\<and> m2 = s \\<Longrightarrow>\n        toList m = toList s @ nodeToList nd;\n     nd = a; s = deep pr m2 (nodeToDigit b)\\<rbrakk>\n    \\<Longrightarrow> digitToList pr @ toList m2 @ nodeToList b =\n                      toList (deep pr m2 (nodeToDigit b))", "apply(simp add: deep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>viewRn m = Some (b, m2);\n     \\<And>nd s.\n        b = nd \\<and> m2 = s \\<Longrightarrow>\n        toList m = toList s @ nodeToList nd;\n     nd = a;\n     s =\n     Deep (gmd pr + gmft m2 + gmd (nodeToDigit b)) pr m2\n      (nodeToDigit b)\\<rbrakk>\n    \\<Longrightarrow> nodeToList b = digitToList (nodeToDigit b)", "apply(simp add: deep_def nodeToDigit_list)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  digitToList pr @ toList m @ nodeToList a = toList s @ nodeToList nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "type_synonym ('e,'a) viewres = \"(('e \\<times>'a) \\<times> ('e,'a) FingerTreeStruc) option\""], ["", "text \\<open>Detach the leftmost element. Return @{const None} on empty finger tree.\\<close>"], ["", "definition viewL :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> ('e,'a) viewres\" \n  where \n\"viewL t = (case viewLn t of \n  None \\<Rightarrow> None |\n  (Some (a, t2)) \\<Rightarrow> Some ((n_unwrap a), t2))\""], ["", "lemma viewL_correct: \n  assumes INV: \"ft_invar t\" \n  shows\n  \"(t=Empty \\<Longrightarrow> viewL t = None)\"\n  \"(t\\<noteq>Empty \\<Longrightarrow> (\\<exists>a s. viewL t = Some (a, s) \\<and> ft_invar s \n                        \\<and> toList t = a # toList s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t = Empty \\<Longrightarrow> viewL t = None) &&&\n    (t \\<noteq> Empty \\<Longrightarrow>\n     \\<exists>a s.\n        viewL t = Some (a, s) \\<and>\n        ft_invar s \\<and> toList t = a # toList s)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. t = Empty \\<Longrightarrow> viewL t = None\n 2. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "assume \"t=Empty\""], ["proof (state)\nthis:\n  t = Empty\n\ngoal (2 subgoals):\n 1. t = Empty \\<Longrightarrow> viewL t = None\n 2. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "thus \"viewL t = None\""], ["proof (prove)\nusing this:\n  t = Empty\n\ngoal (1 subgoal):\n 1. viewL t = None", "by (simp add: viewL_def)"], ["proof (state)\nthis:\n  viewL t = None\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "assume NE: \"t \\<noteq> Empty\""], ["proof (state)\nthis:\n  t \\<noteq> Empty\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "from INV"], ["proof (chain)\npicking this:\n  ft_invar t", "have INV': \"is_leveln_ftree 0 t\" \"is_measured_ftree t\""], ["proof (prove)\nusing this:\n  ft_invar t\n\ngoal (1 subgoal):\n 1. is_leveln_ftree 0 t &&& is_measured_ftree t", "by (simp_all add: ft_invar_def)"], ["proof (state)\nthis:\n  is_leveln_ftree 0 t\n  is_measured_ftree t\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "from NE"], ["proof (chain)\npicking this:\n  t \\<noteq> Empty", "have v1: \"viewLn t \\<noteq> None\""], ["proof (prove)\nusing this:\n  t \\<noteq> Empty\n\ngoal (1 subgoal):\n 1. viewLn t \\<noteq> None", "by (auto simp add: viewLn_empty)"], ["proof (state)\nthis:\n  viewLn t \\<noteq> None\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "then"], ["proof (chain)\npicking this:\n  viewLn t \\<noteq> None", "obtain nd s where vn: \"viewLn t = Some (nd, s)\""], ["proof (prove)\nusing this:\n  viewLn t \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>nd s.\n        viewLn t = Some (nd, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"viewLn t\") (auto)"], ["proof (state)\nthis:\n  viewLn t = Some (nd, s)\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "from this"], ["proof (chain)\npicking this:\n  viewLn t = Some (nd, s)", "obtain a where v1: \"viewL t = Some (a, s)\""], ["proof (prove)\nusing this:\n  viewLn t = Some (nd, s)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        viewL t = Some (a, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: viewL_def)"], ["proof (state)\nthis:\n  viewL t = Some (a, s)\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "from INV' vn"], ["proof (chain)\npicking this:\n  is_leveln_ftree 0 t\n  is_measured_ftree t\n  viewLn t = Some (nd, s)", "have \n    v2: \"is_measured_ftree s \\<and> is_leveln_ftree 0 s \n         \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\"\n        \"toList t = (nodeToList nd) @ (toList s)\""], ["proof (prove)\nusing this:\n  is_leveln_ftree 0 t\n  is_measured_ftree t\n  viewLn t = Some (nd, s)\n\ngoal (1 subgoal):\n 1. is_measured_ftree s \\<and>\n    is_leveln_ftree 0 s \\<and>\n    is_leveln_node 0 nd \\<and> is_measured_node nd &&&\n    toList t = nodeToList nd @ toList s", "by (auto simp add: viewLn_inv[of t 0 nd s] viewLn_list[of t])"], ["proof (state)\nthis:\n  is_measured_ftree s \\<and>\n  is_leveln_ftree 0 s \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\n  toList t = nodeToList nd @ toList s\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "with v1 vn"], ["proof (chain)\npicking this:\n  viewL t = Some (a, s)\n  viewLn t = Some (nd, s)\n  is_measured_ftree s \\<and>\n  is_leveln_ftree 0 s \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\n  toList t = nodeToList nd @ toList s", "have v3: \"nodeToList nd = [a]\""], ["proof (prove)\nusing this:\n  viewL t = Some (a, s)\n  viewLn t = Some (nd, s)\n  is_measured_ftree s \\<and>\n  is_leveln_ftree 0 s \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\n  toList t = nodeToList nd @ toList s\n\ngoal (1 subgoal):\n 1. nodeToList nd = [a]", "apply (auto simp add: viewL_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>viewLn t = Some (nd, s); toList t = nodeToList nd @ toList s;\n     a = n_unwrap nd; is_measured_ftree s; is_leveln_ftree 0 s;\n     is_leveln_node 0 nd; is_measured_node nd\\<rbrakk>\n    \\<Longrightarrow> nodeToList nd = [n_unwrap nd]", "apply (induct nd)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>viewLn t = Some (Tip x1 x2, s);\n        toList t = nodeToList (Tip x1 x2) @ toList s;\n        a = n_unwrap (Tip x1 x2); is_measured_ftree s; is_leveln_ftree 0 s;\n        is_leveln_node 0 (Tip x1 x2); is_measured_node (Tip x1 x2)\\<rbrakk>\n       \\<Longrightarrow> nodeToList (Tip x1 x2) = [n_unwrap (Tip x1 x2)]\n 2. \\<And>x1 nd1 nd2.\n       \\<lbrakk>\\<lbrakk>viewLn t = Some (nd1, s);\n                 toList t = nodeToList nd1 @ toList s; a = n_unwrap nd1;\n                 is_measured_ftree s; is_leveln_ftree 0 s;\n                 is_leveln_node 0 nd1; is_measured_node nd1\\<rbrakk>\n                \\<Longrightarrow> nodeToList nd1 = [n_unwrap nd1];\n        \\<lbrakk>viewLn t = Some (nd2, s);\n         toList t = nodeToList nd2 @ toList s; a = n_unwrap nd2;\n         is_measured_ftree s; is_leveln_ftree 0 s; is_leveln_node 0 nd2;\n         is_measured_node nd2\\<rbrakk>\n        \\<Longrightarrow> nodeToList nd2 = [n_unwrap nd2];\n        viewLn t = Some (Node2 x1 nd1 nd2, s);\n        toList t = nodeToList (Node2 x1 nd1 nd2) @ toList s;\n        a = n_unwrap (Node2 x1 nd1 nd2); is_measured_ftree s;\n        is_leveln_ftree 0 s; is_leveln_node 0 (Node2 x1 nd1 nd2);\n        is_measured_node (Node2 x1 nd1 nd2)\\<rbrakk>\n       \\<Longrightarrow> nodeToList (Node2 x1 nd1 nd2) =\n                         [n_unwrap (Node2 x1 nd1 nd2)]\n 3. \\<And>x1 nd1 nd2 nd3.\n       \\<lbrakk>\\<lbrakk>viewLn t = Some (nd1, s);\n                 toList t = nodeToList nd1 @ toList s; a = n_unwrap nd1;\n                 is_measured_ftree s; is_leveln_ftree 0 s;\n                 is_leveln_node 0 nd1; is_measured_node nd1\\<rbrakk>\n                \\<Longrightarrow> nodeToList nd1 = [n_unwrap nd1];\n        \\<lbrakk>viewLn t = Some (nd2, s);\n         toList t = nodeToList nd2 @ toList s; a = n_unwrap nd2;\n         is_measured_ftree s; is_leveln_ftree 0 s; is_leveln_node 0 nd2;\n         is_measured_node nd2\\<rbrakk>\n        \\<Longrightarrow> nodeToList nd2 = [n_unwrap nd2];\n        \\<lbrakk>viewLn t = Some (nd3, s);\n         toList t = nodeToList nd3 @ toList s; a = n_unwrap nd3;\n         is_measured_ftree s; is_leveln_ftree 0 s; is_leveln_node 0 nd3;\n         is_measured_node nd3\\<rbrakk>\n        \\<Longrightarrow> nodeToList nd3 = [n_unwrap nd3];\n        viewLn t = Some (Node3 x1 nd1 nd2 nd3, s);\n        toList t = nodeToList (Node3 x1 nd1 nd2 nd3) @ toList s;\n        a = n_unwrap (Node3 x1 nd1 nd2 nd3); is_measured_ftree s;\n        is_leveln_ftree 0 s; is_leveln_node 0 (Node3 x1 nd1 nd2 nd3);\n        is_measured_node (Node3 x1 nd1 nd2 nd3)\\<rbrakk>\n       \\<Longrightarrow> nodeToList (Node3 x1 nd1 nd2 nd3) =\n                         [n_unwrap (Node3 x1 nd1 nd2 nd3)]", "apply (simp_all (no_asm_use))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  nodeToList nd = [a]\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "with v1 v2"], ["proof (chain)\npicking this:\n  viewL t = Some (a, s)\n  is_measured_ftree s \\<and>\n  is_leveln_ftree 0 s \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\n  toList t = nodeToList nd @ toList s\n  nodeToList nd = [a]", "show \"\\<exists>a s. viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\""], ["proof (prove)\nusing this:\n  viewL t = Some (a, s)\n  is_measured_ftree s \\<and>\n  is_leveln_ftree 0 s \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\n  toList t = nodeToList nd @ toList s\n  nodeToList nd = [a]\n\ngoal (1 subgoal):\n 1. \\<exists>a s.\n       viewL t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = a # toList s", "by (auto simp add: ft_invar_def)"], ["proof (state)\nthis:\n  \\<exists>a s.\n     viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma viewL_correct_empty[simp]: \"viewL Empty = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. viewL Empty = None", "by (simp add: viewL_def)"], ["", "lemma viewL_correct_nonEmpty: \n  assumes \"ft_invar t\" \"t \\<noteq> Empty\" \n  obtains a s where \n  \"viewL t = Some (a, s)\" \"ft_invar s\" \"toList t = a # toList s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        \\<lbrakk>viewL t = Some (a, s); ft_invar s;\n         toList t = a # toList s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms viewL_correct"], ["proof (prove)\nusing this:\n  ft_invar t\n  t \\<noteq> Empty\n  \\<lbrakk>ft_invar ?t; ?t = Empty\\<rbrakk>\n  \\<Longrightarrow> viewL ?t = None\n  \\<lbrakk>ft_invar ?t; ?t \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a s.\n                       viewL ?t = Some (a, s) \\<and>\n                       ft_invar s \\<and> toList ?t = a # toList s\n\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        \\<lbrakk>viewL t = Some (a, s); ft_invar s;\n         toList t = a # toList s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "text \\<open>Detach the rightmost element. Return @{const None} on empty finger tree.\\<close>"], ["", "definition viewR :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> ('e,'a) viewres\" \n  where \n  \"viewR t = (case viewRn t of \n    None \\<Rightarrow> None |\n    (Some (a, t2)) \\<Rightarrow> Some ((n_unwrap a), t2))\""], ["", "lemma viewR_correct: \n  assumes INV: \"ft_invar t\"\n  shows\n  \"(t = Empty \\<Longrightarrow> viewR t = None)\"\n  \"(t \\<noteq> Empty \\<Longrightarrow> (\\<exists> a s. viewR t = Some (a, s) \\<and> ft_invar s \n                          \\<and> toList t = toList s @ [a]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t = Empty \\<Longrightarrow> viewR t = None) &&&\n    (t \\<noteq> Empty \\<Longrightarrow>\n     \\<exists>a s.\n        viewR t = Some (a, s) \\<and>\n        ft_invar s \\<and> toList t = toList s @ [a])", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. t = Empty \\<Longrightarrow> viewR t = None\n 2. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "assume \"t=Empty\""], ["proof (state)\nthis:\n  t = Empty\n\ngoal (2 subgoals):\n 1. t = Empty \\<Longrightarrow> viewR t = None\n 2. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "thus \"viewR t = None\""], ["proof (prove)\nusing this:\n  t = Empty\n\ngoal (1 subgoal):\n 1. viewR t = None", "by (simp add: viewR_def)"], ["proof (state)\nthis:\n  viewR t = None\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "assume NE: \"t \\<noteq> Empty\""], ["proof (state)\nthis:\n  t \\<noteq> Empty\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "from INV"], ["proof (chain)\npicking this:\n  ft_invar t", "have INV': \"is_leveln_ftree 0 t\" \"is_measured_ftree t\""], ["proof (prove)\nusing this:\n  ft_invar t\n\ngoal (1 subgoal):\n 1. is_leveln_ftree 0 t &&& is_measured_ftree t", "unfolding ft_invar_def"], ["proof (prove)\nusing this:\n  is_leveln_ftree 0 t \\<and> is_measured_ftree t\n\ngoal (1 subgoal):\n 1. is_leveln_ftree 0 t &&& is_measured_ftree t", "by simp_all"], ["proof (state)\nthis:\n  is_leveln_ftree 0 t\n  is_measured_ftree t\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "from NE"], ["proof (chain)\npicking this:\n  t \\<noteq> Empty", "have v1: \"viewRn t \\<noteq> None\""], ["proof (prove)\nusing this:\n  t \\<noteq> Empty\n\ngoal (1 subgoal):\n 1. viewRn t \\<noteq> None", "by (auto simp add: viewRn_empty)"], ["proof (state)\nthis:\n  viewRn t \\<noteq> None\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "then"], ["proof (chain)\npicking this:\n  viewRn t \\<noteq> None", "obtain nd s where vn: \"viewRn t = Some (nd, s)\""], ["proof (prove)\nusing this:\n  viewRn t \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>nd s.\n        viewRn t = Some (nd, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"viewRn t\") (auto)"], ["proof (state)\nthis:\n  viewRn t = Some (nd, s)\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "from this"], ["proof (chain)\npicking this:\n  viewRn t = Some (nd, s)", "obtain a where v1: \"viewR t = Some (a, s)\""], ["proof (prove)\nusing this:\n  viewRn t = Some (nd, s)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        viewR t = Some (a, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: viewR_def)"], ["proof (state)\nthis:\n  viewR t = Some (a, s)\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "from INV' vn"], ["proof (chain)\npicking this:\n  is_leveln_ftree 0 t\n  is_measured_ftree t\n  viewRn t = Some (nd, s)", "have \n    v2: \"is_measured_ftree s \\<and> is_leveln_ftree 0 s \n         \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\"\n        \"toList t = (toList s) @ (nodeToList nd)\""], ["proof (prove)\nusing this:\n  is_leveln_ftree 0 t\n  is_measured_ftree t\n  viewRn t = Some (nd, s)\n\ngoal (1 subgoal):\n 1. is_measured_ftree s \\<and>\n    is_leveln_ftree 0 s \\<and>\n    is_leveln_node 0 nd \\<and> is_measured_node nd &&&\n    toList t = toList s @ nodeToList nd", "by (auto simp add: viewRn_inv[of t 0 nd s] viewRn_list[of t])"], ["proof (state)\nthis:\n  is_measured_ftree s \\<and>\n  is_leveln_ftree 0 s \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\n  toList t = toList s @ nodeToList nd\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "with v1 vn"], ["proof (chain)\npicking this:\n  viewR t = Some (a, s)\n  viewRn t = Some (nd, s)\n  is_measured_ftree s \\<and>\n  is_leveln_ftree 0 s \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\n  toList t = toList s @ nodeToList nd", "have v3: \"nodeToList nd = [a]\""], ["proof (prove)\nusing this:\n  viewR t = Some (a, s)\n  viewRn t = Some (nd, s)\n  is_measured_ftree s \\<and>\n  is_leveln_ftree 0 s \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\n  toList t = toList s @ nodeToList nd\n\ngoal (1 subgoal):\n 1. nodeToList nd = [a]", "apply (auto simp add: viewR_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>viewRn t = Some (nd, s); toList t = toList s @ nodeToList nd;\n     a = n_unwrap nd; is_measured_ftree s; is_leveln_ftree 0 s;\n     is_leveln_node 0 nd; is_measured_node nd\\<rbrakk>\n    \\<Longrightarrow> nodeToList nd = [n_unwrap nd]", "apply (induct nd)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>viewRn t = Some (Tip x1 x2, s);\n        toList t = toList s @ nodeToList (Tip x1 x2);\n        a = n_unwrap (Tip x1 x2); is_measured_ftree s; is_leveln_ftree 0 s;\n        is_leveln_node 0 (Tip x1 x2); is_measured_node (Tip x1 x2)\\<rbrakk>\n       \\<Longrightarrow> nodeToList (Tip x1 x2) = [n_unwrap (Tip x1 x2)]\n 2. \\<And>x1 nd1 nd2.\n       \\<lbrakk>\\<lbrakk>viewRn t = Some (nd1, s);\n                 toList t = toList s @ nodeToList nd1; a = n_unwrap nd1;\n                 is_measured_ftree s; is_leveln_ftree 0 s;\n                 is_leveln_node 0 nd1; is_measured_node nd1\\<rbrakk>\n                \\<Longrightarrow> nodeToList nd1 = [n_unwrap nd1];\n        \\<lbrakk>viewRn t = Some (nd2, s);\n         toList t = toList s @ nodeToList nd2; a = n_unwrap nd2;\n         is_measured_ftree s; is_leveln_ftree 0 s; is_leveln_node 0 nd2;\n         is_measured_node nd2\\<rbrakk>\n        \\<Longrightarrow> nodeToList nd2 = [n_unwrap nd2];\n        viewRn t = Some (Node2 x1 nd1 nd2, s);\n        toList t = toList s @ nodeToList (Node2 x1 nd1 nd2);\n        a = n_unwrap (Node2 x1 nd1 nd2); is_measured_ftree s;\n        is_leveln_ftree 0 s; is_leveln_node 0 (Node2 x1 nd1 nd2);\n        is_measured_node (Node2 x1 nd1 nd2)\\<rbrakk>\n       \\<Longrightarrow> nodeToList (Node2 x1 nd1 nd2) =\n                         [n_unwrap (Node2 x1 nd1 nd2)]\n 3. \\<And>x1 nd1 nd2 nd3.\n       \\<lbrakk>\\<lbrakk>viewRn t = Some (nd1, s);\n                 toList t = toList s @ nodeToList nd1; a = n_unwrap nd1;\n                 is_measured_ftree s; is_leveln_ftree 0 s;\n                 is_leveln_node 0 nd1; is_measured_node nd1\\<rbrakk>\n                \\<Longrightarrow> nodeToList nd1 = [n_unwrap nd1];\n        \\<lbrakk>viewRn t = Some (nd2, s);\n         toList t = toList s @ nodeToList nd2; a = n_unwrap nd2;\n         is_measured_ftree s; is_leveln_ftree 0 s; is_leveln_node 0 nd2;\n         is_measured_node nd2\\<rbrakk>\n        \\<Longrightarrow> nodeToList nd2 = [n_unwrap nd2];\n        \\<lbrakk>viewRn t = Some (nd3, s);\n         toList t = toList s @ nodeToList nd3; a = n_unwrap nd3;\n         is_measured_ftree s; is_leveln_ftree 0 s; is_leveln_node 0 nd3;\n         is_measured_node nd3\\<rbrakk>\n        \\<Longrightarrow> nodeToList nd3 = [n_unwrap nd3];\n        viewRn t = Some (Node3 x1 nd1 nd2 nd3, s);\n        toList t = toList s @ nodeToList (Node3 x1 nd1 nd2 nd3);\n        a = n_unwrap (Node3 x1 nd1 nd2 nd3); is_measured_ftree s;\n        is_leveln_ftree 0 s; is_leveln_node 0 (Node3 x1 nd1 nd2 nd3);\n        is_measured_node (Node3 x1 nd1 nd2 nd3)\\<rbrakk>\n       \\<Longrightarrow> nodeToList (Node3 x1 nd1 nd2 nd3) =\n                         [n_unwrap (Node3 x1 nd1 nd2 nd3)]", "apply (simp_all (no_asm_use))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  nodeToList nd = [a]\n\ngoal (1 subgoal):\n 1. t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "with v1 v2"], ["proof (chain)\npicking this:\n  viewR t = Some (a, s)\n  is_measured_ftree s \\<and>\n  is_leveln_ftree 0 s \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\n  toList t = toList s @ nodeToList nd\n  nodeToList nd = [a]", "show \"\\<exists>a s. viewR t = Some (a, s) \\<and> ft_invar s \\<and> toList t = toList s @ [a]\""], ["proof (prove)\nusing this:\n  viewR t = Some (a, s)\n  is_measured_ftree s \\<and>\n  is_leveln_ftree 0 s \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\n  toList t = toList s @ nodeToList nd\n  nodeToList nd = [a]\n\ngoal (1 subgoal):\n 1. \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       ft_invar s \\<and> toList t = toList s @ [a]", "unfolding ft_invar_def"], ["proof (prove)\nusing this:\n  viewR t = Some (a, s)\n  is_measured_ftree s \\<and>\n  is_leveln_ftree 0 s \\<and> is_leveln_node 0 nd \\<and> is_measured_node nd\n  toList t = toList s @ nodeToList nd\n  nodeToList nd = [a]\n\ngoal (1 subgoal):\n 1. \\<exists>a s.\n       viewR t = Some (a, s) \\<and>\n       (is_leveln_ftree 0 s \\<and> is_measured_ftree s) \\<and>\n       toList t = toList s @ [a]", "by auto"], ["proof (state)\nthis:\n  \\<exists>a s.\n     viewR t = Some (a, s) \\<and>\n     ft_invar s \\<and> toList t = toList s @ [a]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma viewR_correct_empty[simp]: \"viewR Empty = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. viewR Empty = None", "unfolding viewR_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case viewRn Empty of None \\<Rightarrow> None\n     | Some (a, t2) \\<Rightarrow> Some (n_unwrap a, t2)) =\n    None", "by simp"], ["", "lemma viewR_correct_nonEmpty: \n  assumes \"ft_invar t\" \"t \\<noteq> Empty\" \n  obtains a s where \n  \"viewR t = Some (a, s)\" \"ft_invar s \\<and> toList t = toList s @ [a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        \\<lbrakk>viewR t = Some (a, s);\n         ft_invar s \\<and> toList t = toList s @ [a]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms viewR_correct"], ["proof (prove)\nusing this:\n  ft_invar t\n  t \\<noteq> Empty\n  \\<lbrakk>ft_invar ?t; ?t = Empty\\<rbrakk>\n  \\<Longrightarrow> viewR ?t = None\n  \\<lbrakk>ft_invar ?t; ?t \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a s.\n                       viewR ?t = Some (a, s) \\<and>\n                       ft_invar s \\<and> toList ?t = toList s @ [a]\n\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        \\<lbrakk>viewR t = Some (a, s);\n         ft_invar s \\<and> toList t = toList s @ [a]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "text \\<open>Finger trees viewed as a double-ended queue. The head and tail functions\n  here are only\n  defined for non-empty queues, while the view-functions were also defined for\n  empty finger trees.\\<close>"], ["", "text \"Check for emptiness\""], ["", "definition isEmpty :: \"('e,'a) FingerTreeStruc \\<Rightarrow> bool\" where\n  [code del]: \"isEmpty t = (t = Empty)\""], ["", "lemma isEmpty_correct: \"isEmpty t \\<longleftrightarrow> toList t = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isEmpty t = (toList t = [])", "unfolding isEmpty_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (t = Empty) = (toList t = [])", "by (simp add: toList_empty)\n\\<comment> \\<open>Avoid comparison with @{text \"(=)\"}, and thus unnecessary equality-class\n    parameter on element types in generated code\\<close>"], ["", "lemma [code]: \"isEmpty t = (case t of Empty \\<Rightarrow> True | _ \\<Rightarrow> False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isEmpty t = (case t of Empty \\<Rightarrow> True | _ \\<Rightarrow> False)", "apply (cases t)"], ["proof (prove)\ngoal (3 subgoals):\n 1. t = Empty \\<Longrightarrow>\n    isEmpty t = (case t of Empty \\<Rightarrow> True | _ \\<Rightarrow> False)\n 2. \\<And>x2.\n       t = Single x2 \\<Longrightarrow>\n       isEmpty t =\n       (case t of Empty \\<Rightarrow> True | _ \\<Rightarrow> False)\n 3. \\<And>x31 x32 x33 x34.\n       t = Deep x31 x32 x33 x34 \\<Longrightarrow>\n       isEmpty t =\n       (case t of Empty \\<Rightarrow> True | _ \\<Rightarrow> False)", "apply (auto simp add: isEmpty_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \"Leftmost element\""], ["", "definition head :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> 'e \\<times> 'a\" where\n  \"head t = (case viewL t of (Some (a, _)) \\<Rightarrow> a)\""], ["", "lemma head_correct:\n  assumes \"ft_invar t\" \"t \\<noteq> Empty\" \n  shows \"head t = hd (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head t = hd (toList t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. head t = hd (toList t)", "from assms viewL_correct"], ["proof (chain)\npicking this:\n  ft_invar t\n  t \\<noteq> Empty\n  \\<lbrakk>ft_invar ?t; ?t = Empty\\<rbrakk>\n  \\<Longrightarrow> viewL ?t = None\n  \\<lbrakk>ft_invar ?t; ?t \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a s.\n                       viewL ?t = Some (a, s) \\<and>\n                       ft_invar s \\<and> toList ?t = a # toList s", "obtain a s where \n    v1:\"viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\""], ["proof (prove)\nusing this:\n  ft_invar t\n  t \\<noteq> Empty\n  \\<lbrakk>ft_invar ?t; ?t = Empty\\<rbrakk>\n  \\<Longrightarrow> viewL ?t = None\n  \\<lbrakk>ft_invar ?t; ?t \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a s.\n                       viewL ?t = Some (a, s) \\<and>\n                       ft_invar s \\<and> toList ?t = a # toList s\n\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        viewL t = Some (a, s) \\<and>\n        ft_invar s \\<and> toList t = a # toList s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\n\ngoal (1 subgoal):\n 1. head t = hd (toList t)", "hence v2: \"head t = a\""], ["proof (prove)\nusing this:\n  viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\n\ngoal (1 subgoal):\n 1. head t = a", "by (auto simp add: head_def)"], ["proof (state)\nthis:\n  head t = a\n\ngoal (1 subgoal):\n 1. head t = hd (toList t)", "from v1"], ["proof (chain)\npicking this:\n  viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s", "have \"hd (toList t) = a\""], ["proof (prove)\nusing this:\n  viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\n\ngoal (1 subgoal):\n 1. hd (toList t) = a", "by simp"], ["proof (state)\nthis:\n  hd (toList t) = a\n\ngoal (1 subgoal):\n 1. head t = hd (toList t)", "with v2"], ["proof (chain)\npicking this:\n  head t = a\n  hd (toList t) = a", "show ?thesis"], ["proof (prove)\nusing this:\n  head t = a\n  hd (toList t) = a\n\ngoal (1 subgoal):\n 1. head t = hd (toList t)", "by simp"], ["proof (state)\nthis:\n  head t = hd (toList t)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \"All but the leftmost element\""], ["", "definition tail \n  :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> ('e,'a) FingerTreeStruc\" \n  where\n  \"tail t = (case viewL t of (Some (_, m)) \\<Rightarrow> m)\""], ["", "lemma tail_correct: \n  assumes \"ft_invar t\" \"t \\<noteq> Empty\" \n  shows \"toList (tail t) = tl (toList t)\" and \"ft_invar (tail t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (tail t) = tl (toList t) &&& ft_invar (tail t)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. toList (tail t) = tl (toList t)\n 2. ft_invar (tail t)", "from assms viewL_correct"], ["proof (chain)\npicking this:\n  ft_invar t\n  t \\<noteq> Empty\n  \\<lbrakk>ft_invar ?t; ?t = Empty\\<rbrakk>\n  \\<Longrightarrow> viewL ?t = None\n  \\<lbrakk>ft_invar ?t; ?t \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a s.\n                       viewL ?t = Some (a, s) \\<and>\n                       ft_invar s \\<and> toList ?t = a # toList s", "obtain a s where \n    v1:\"viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\""], ["proof (prove)\nusing this:\n  ft_invar t\n  t \\<noteq> Empty\n  \\<lbrakk>ft_invar ?t; ?t = Empty\\<rbrakk>\n  \\<Longrightarrow> viewL ?t = None\n  \\<lbrakk>ft_invar ?t; ?t \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a s.\n                       viewL ?t = Some (a, s) \\<and>\n                       ft_invar s \\<and> toList ?t = a # toList s\n\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        viewL t = Some (a, s) \\<and>\n        ft_invar s \\<and> toList t = a # toList s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\n\ngoal (2 subgoals):\n 1. toList (tail t) = tl (toList t)\n 2. ft_invar (tail t)", "hence v2: \"tail t = s\""], ["proof (prove)\nusing this:\n  viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\n\ngoal (1 subgoal):\n 1. tail t = s", "by (auto simp add: tail_def)"], ["proof (state)\nthis:\n  tail t = s\n\ngoal (2 subgoals):\n 1. toList (tail t) = tl (toList t)\n 2. ft_invar (tail t)", "from v1"], ["proof (chain)\npicking this:\n  viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s", "have \"tl (toList t) = toList s\""], ["proof (prove)\nusing this:\n  viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\n\ngoal (1 subgoal):\n 1. tl (toList t) = toList s", "by simp"], ["proof (state)\nthis:\n  tl (toList t) = toList s\n\ngoal (2 subgoals):\n 1. toList (tail t) = tl (toList t)\n 2. ft_invar (tail t)", "with v1 v2"], ["proof (chain)\npicking this:\n  viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\n  tail t = s\n  tl (toList t) = toList s", "show \n    \"toList (tail t) = tl (toList t)\" \n    \"ft_invar (tail t)\""], ["proof (prove)\nusing this:\n  viewL t = Some (a, s) \\<and> ft_invar s \\<and> toList t = a # toList s\n  tail t = s\n  tl (toList t) = toList s\n\ngoal (1 subgoal):\n 1. toList (tail t) = tl (toList t) &&& ft_invar (tail t)", "by simp_all"], ["proof (state)\nthis:\n  toList (tail t) = tl (toList t)\n  ft_invar (tail t)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \"Rightmost element\""], ["", "definition headR :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> 'e \\<times> 'a\" where\n  \"headR t = (case viewR t of (Some (a, _)) \\<Rightarrow> a)\""], ["", "lemma headR_correct:\n  assumes \"ft_invar t\" \"t \\<noteq> Empty\" \n  shows  \"headR t = last (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. headR t = last (toList t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. headR t = last (toList t)", "from assms viewR_correct"], ["proof (chain)\npicking this:\n  ft_invar t\n  t \\<noteq> Empty\n  \\<lbrakk>ft_invar ?t; ?t = Empty\\<rbrakk>\n  \\<Longrightarrow> viewR ?t = None\n  \\<lbrakk>ft_invar ?t; ?t \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a s.\n                       viewR ?t = Some (a, s) \\<and>\n                       ft_invar s \\<and> toList ?t = toList s @ [a]", "obtain a s where \n    v1:\"viewR t = Some (a, s) \\<and> ft_invar s \\<and> toList t = toList s @ [a]\""], ["proof (prove)\nusing this:\n  ft_invar t\n  t \\<noteq> Empty\n  \\<lbrakk>ft_invar ?t; ?t = Empty\\<rbrakk>\n  \\<Longrightarrow> viewR ?t = None\n  \\<lbrakk>ft_invar ?t; ?t \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a s.\n                       viewR ?t = Some (a, s) \\<and>\n                       ft_invar s \\<and> toList ?t = toList s @ [a]\n\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        viewR t = Some (a, s) \\<and>\n        ft_invar s \\<and> toList t = toList s @ [a] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  viewR t = Some (a, s) \\<and> ft_invar s \\<and> toList t = toList s @ [a]\n\ngoal (1 subgoal):\n 1. headR t = last (toList t)", "hence v2: \"headR t = a\""], ["proof (prove)\nusing this:\n  viewR t = Some (a, s) \\<and> ft_invar s \\<and> toList t = toList s @ [a]\n\ngoal (1 subgoal):\n 1. headR t = a", "by (auto simp add: headR_def)"], ["proof (state)\nthis:\n  headR t = a\n\ngoal (1 subgoal):\n 1. headR t = last (toList t)", "with v1"], ["proof (chain)\npicking this:\n  viewR t = Some (a, s) \\<and> ft_invar s \\<and> toList t = toList s @ [a]\n  headR t = a", "show ?thesis"], ["proof (prove)\nusing this:\n  viewR t = Some (a, s) \\<and> ft_invar s \\<and> toList t = toList s @ [a]\n  headR t = a\n\ngoal (1 subgoal):\n 1. headR t = last (toList t)", "by auto"], ["proof (state)\nthis:\n  headR t = last (toList t)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \"All but the rightmost element\""], ["", "definition tailR \n  :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> ('e,'a) FingerTreeStruc\" \n  where\n  \"tailR t = (case viewR t of (Some (_, m)) \\<Rightarrow> m)\""], ["", "lemma tailR_correct: \n  assumes \"ft_invar t\" \"t \\<noteq> Empty\"\n  shows \"toList (tailR t) = butlast (toList t)\" and \"ft_invar (tailR t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (tailR t) = butlast (toList t) &&& ft_invar (tailR t)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. toList (tailR t) = butlast (toList t)\n 2. ft_invar (tailR t)", "from assms viewR_correct"], ["proof (chain)\npicking this:\n  ft_invar t\n  t \\<noteq> Empty\n  \\<lbrakk>ft_invar ?t; ?t = Empty\\<rbrakk>\n  \\<Longrightarrow> viewR ?t = None\n  \\<lbrakk>ft_invar ?t; ?t \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a s.\n                       viewR ?t = Some (a, s) \\<and>\n                       ft_invar s \\<and> toList ?t = toList s @ [a]", "obtain a s where \n    v1:\"viewR t = Some (a, s) \\<and> ft_invar s \\<and> toList t = toList s @ [a]\""], ["proof (prove)\nusing this:\n  ft_invar t\n  t \\<noteq> Empty\n  \\<lbrakk>ft_invar ?t; ?t = Empty\\<rbrakk>\n  \\<Longrightarrow> viewR ?t = None\n  \\<lbrakk>ft_invar ?t; ?t \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a s.\n                       viewR ?t = Some (a, s) \\<and>\n                       ft_invar s \\<and> toList ?t = toList s @ [a]\n\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        viewR t = Some (a, s) \\<and>\n        ft_invar s \\<and> toList t = toList s @ [a] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  viewR t = Some (a, s) \\<and> ft_invar s \\<and> toList t = toList s @ [a]\n\ngoal (2 subgoals):\n 1. toList (tailR t) = butlast (toList t)\n 2. ft_invar (tailR t)", "hence v2: \"tailR t = s\""], ["proof (prove)\nusing this:\n  viewR t = Some (a, s) \\<and> ft_invar s \\<and> toList t = toList s @ [a]\n\ngoal (1 subgoal):\n 1. tailR t = s", "by (auto simp add: tailR_def)"], ["proof (state)\nthis:\n  tailR t = s\n\ngoal (2 subgoals):\n 1. toList (tailR t) = butlast (toList t)\n 2. ft_invar (tailR t)", "with v1"], ["proof (chain)\npicking this:\n  viewR t = Some (a, s) \\<and> ft_invar s \\<and> toList t = toList s @ [a]\n  tailR t = s", "show \"toList (tailR t) = butlast (toList t)\" and \"ft_invar (tailR t)\""], ["proof (prove)\nusing this:\n  viewR t = Some (a, s) \\<and> ft_invar s \\<and> toList t = toList s @ [a]\n  tailR t = s\n\ngoal (1 subgoal):\n 1. toList (tailR t) = butlast (toList t) &&& ft_invar (tailR t)", "by auto"], ["proof (state)\nthis:\n  toList (tailR t) = butlast (toList t)\n  ft_invar (tailR t)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Concatenation\\<close>"], ["", "primrec lconsNlist :: \"('e,'a::monoid_add) Node list \n    \\<Rightarrow> ('e,'a) FingerTreeStruc \\<Rightarrow> ('e,'a) FingerTreeStruc\" where\n  \"lconsNlist [] t = t\" |\n  \"lconsNlist (x#xs) t = nlcons x (lconsNlist xs t)\""], ["", "primrec rconsNlist :: \"('e,'a::monoid_add) FingerTreeStruc \n    \\<Rightarrow> ('e,'a) Node list \\<Rightarrow> ('e,'a) FingerTreeStruc\" where\n  \"rconsNlist t []  = t\" |\n  \"rconsNlist t (x#xs)  = rconsNlist (nrcons t x) xs\""], ["", "fun nodes :: \"('e,'a::monoid_add) Node list  \\<Rightarrow> ('e,'a) Node list\" where\n  \"nodes [a, b] = [node2 a b]\" |\n  \"nodes [a, b, c] = [node3 a b c]\" |\n  \"nodes [a,b,c,d] = [node2 a b, node2 c d]\" |\n  \"nodes (a#b#c#xs) = (node3 a b c) # (nodes xs)\""], ["", "text \\<open>Recursively we concatenate two FingerTreeStrucs while we keep the \n  inner Nodes in a list\\<close>"], ["", "fun app3 :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> ('e,'a) Node list \n    \\<Rightarrow> ('e,'a) FingerTreeStruc \\<Rightarrow> ('e,'a) FingerTreeStruc\" where\n  \"app3 Empty xs t = lconsNlist xs t\" |\n  \"app3 t xs Empty = rconsNlist t xs\" |\n  \"app3 (Single x) xs t = nlcons x (lconsNlist xs t)\" |\n  \"app3 t xs (Single x) = nrcons (rconsNlist t xs) x\" |\n  \"app3 (Deep _ pr1 m1 sf1) ts (Deep _ pr2 m2 sf2) =\n    deep pr1 (app3 m1 \n      (nodes ((digitToNlist sf1) @ ts @ (digitToNlist pr2))) m2) sf2\""], ["", "lemma lconsNlist_inv:\n  assumes \"is_leveln_ftree n t\" \n  and \"is_measured_ftree t\"\n  and \"\\<forall> x\\<in>set xs. (is_leveln_node n x \\<and> is_measured_node x)\"\n  shows \n  \"is_leveln_ftree n (lconsNlist xs t) \\<and> is_measured_ftree (lconsNlist xs t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_leveln_ftree n (lconsNlist xs t) \\<and>\n    is_measured_ftree (lconsNlist xs t)", "by (insert assms, induct xs, auto simp add: nlcons_invlevel nlcons_invmeas)"], ["", "lemma rconsNlist_inv:\n  assumes \"is_leveln_ftree n t\" \n  and \"is_measured_ftree t\"\n  and \"\\<forall> x\\<in>set xs. (is_leveln_node n x \\<and> is_measured_node x)\"\n  shows \n  \"is_leveln_ftree n (rconsNlist t xs) \\<and> is_measured_ftree (rconsNlist t xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_leveln_ftree n (rconsNlist t xs) \\<and>\n    is_measured_ftree (rconsNlist t xs)", "by (insert assms, induct xs arbitrary: t, \n      auto simp add: nrcons_invlevel nrcons_invmeas)"], ["", "lemma nodes_inv:\n  assumes \"\\<forall> x \\<in> set ts. is_leveln_node n x \\<and> is_measured_node x\"\n  and \"length ts \\<ge> 2\"\n  shows \"\\<forall> x \\<in> set (nodes ts). is_leveln_node (Suc n) x \\<and> is_measured_node x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (nodes ts).\n       is_leveln_node (Suc n) x \\<and> is_measured_node x", "proof (insert assms, induct ts rule: nodes.induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 2. \\<And>a b c.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 3. \\<And>a b c d.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c, d].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c, d]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c, d]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 4. \\<And>a b c v vb vc.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n                            is_leveln_node n x \\<and> is_measured_node x;\n                 2 \\<le> length (v # vb # vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                                     is_leveln_node (Suc n) x \\<and>\n                                     is_measured_node x;\n        \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n           is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length (a # b # c # v # vb # vc)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (nodes (a # b # c # v # vb # vc)).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 5. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 6. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "case (1 a b)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set [a, b]. is_leveln_node n x \\<and> is_measured_node x\n  2 \\<le> length [a, b]\n\ngoal (6 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 2. \\<And>a b c.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 3. \\<And>a b c d.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c, d].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c, d]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c, d]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 4. \\<And>a b c v vb vc.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n                            is_leveln_node n x \\<and> is_measured_node x;\n                 2 \\<le> length (v # vb # vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                                     is_leveln_node (Suc n) x \\<and>\n                                     is_measured_node x;\n        \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n           is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length (a # b # c # v # vb # vc)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (nodes (a # b # c # v # vb # vc)).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 5. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 6. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set [a, b]. is_leveln_node n x \\<and> is_measured_node x\n  2 \\<le> length [a, b]\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (nodes [a, b]).\n       is_leveln_node (Suc n) x \\<and> is_measured_node x", "by (simp add: node2_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (nodes [a, b]).\n     is_leveln_node (Suc n) x \\<and> is_measured_node x\n\ngoal (5 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 2. \\<And>a b c d.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c, d].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c, d]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c, d]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 3. \\<And>a b c v vb vc.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n                            is_leveln_node n x \\<and> is_measured_node x;\n                 2 \\<le> length (v # vb # vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                                     is_leveln_node (Suc n) x \\<and>\n                                     is_measured_node x;\n        \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n           is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length (a # b # c # v # vb # vc)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (nodes (a # b # c # v # vb # vc)).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 4. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 5. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 2. \\<And>a b c d.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c, d].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c, d]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c, d]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 3. \\<And>a b c v vb vc.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n                            is_leveln_node n x \\<and> is_measured_node x;\n                 2 \\<le> length (v # vb # vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                                     is_leveln_node (Suc n) x \\<and>\n                                     is_measured_node x;\n        \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n           is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length (a # b # c # v # vb # vc)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (nodes (a # b # c # v # vb # vc)).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 4. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 5. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "case (2 a b c)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set [a, b, c]. is_leveln_node n x \\<and> is_measured_node x\n  2 \\<le> length [a, b, c]\n\ngoal (5 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 2. \\<And>a b c d.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c, d].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c, d]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c, d]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 3. \\<And>a b c v vb vc.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n                            is_leveln_node n x \\<and> is_measured_node x;\n                 2 \\<le> length (v # vb # vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                                     is_leveln_node (Suc n) x \\<and>\n                                     is_measured_node x;\n        \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n           is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length (a # b # c # v # vb # vc)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (nodes (a # b # c # v # vb # vc)).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 4. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 5. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set [a, b, c]. is_leveln_node n x \\<and> is_measured_node x\n  2 \\<le> length [a, b, c]\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (nodes [a, b, c]).\n       is_leveln_node (Suc n) x \\<and> is_measured_node x", "by (simp add: node3_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (nodes [a, b, c]).\n     is_leveln_node (Suc n) x \\<and> is_measured_node x\n\ngoal (4 subgoals):\n 1. \\<And>a b c d.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c, d].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c, d]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c, d]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 2. \\<And>a b c v vb vc.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n                            is_leveln_node n x \\<and> is_measured_node x;\n                 2 \\<le> length (v # vb # vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                                     is_leveln_node (Suc n) x \\<and>\n                                     is_measured_node x;\n        \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n           is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length (a # b # c # v # vb # vc)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (nodes (a # b # c # v # vb # vc)).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 3. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 4. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b c d.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c, d].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c, d]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c, d]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 2. \\<And>a b c v vb vc.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n                            is_leveln_node n x \\<and> is_measured_node x;\n                 2 \\<le> length (v # vb # vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                                     is_leveln_node (Suc n) x \\<and>\n                                     is_measured_node x;\n        \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n           is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length (a # b # c # v # vb # vc)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (nodes (a # b # c # v # vb # vc)).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 3. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 4. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "case (3 a b c d)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set [a, b, c, d].\n     is_leveln_node n x \\<and> is_measured_node x\n  2 \\<le> length [a, b, c, d]\n\ngoal (4 subgoals):\n 1. \\<And>a b c d.\n       \\<lbrakk>\\<forall>x\\<in>set [a, b, c, d].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [a, b, c, d]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [a, b, c, d]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 2. \\<And>a b c v vb vc.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n                            is_leveln_node n x \\<and> is_measured_node x;\n                 2 \\<le> length (v # vb # vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                                     is_leveln_node (Suc n) x \\<and>\n                                     is_measured_node x;\n        \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n           is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length (a # b # c # v # vb # vc)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (nodes (a # b # c # v # vb # vc)).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 3. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 4. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set [a, b, c, d].\n     is_leveln_node n x \\<and> is_measured_node x\n  2 \\<le> length [a, b, c, d]\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (nodes [a, b, c, d]).\n       is_leveln_node (Suc n) x \\<and> is_measured_node x", "by (simp add: node2_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (nodes [a, b, c, d]).\n     is_leveln_node (Suc n) x \\<and> is_measured_node x\n\ngoal (3 subgoals):\n 1. \\<And>a b c v vb vc.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n                            is_leveln_node n x \\<and> is_measured_node x;\n                 2 \\<le> length (v # vb # vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                                     is_leveln_node (Suc n) x \\<and>\n                                     is_measured_node x;\n        \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n           is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length (a # b # c # v # vb # vc)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (nodes (a # b # c # v # vb # vc)).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 2. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 3. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b c v vb vc.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n                            is_leveln_node n x \\<and> is_measured_node x;\n                 2 \\<le> length (v # vb # vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                                     is_leveln_node (Suc n) x \\<and>\n                                     is_measured_node x;\n        \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n           is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length (a # b # c # v # vb # vc)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (nodes (a # b # c # v # vb # vc)).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 2. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 3. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "case (4 a b c v vb vc)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n              is_leveln_node n x \\<and> is_measured_node x;\n   2 \\<le> length (v # vb # vc)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                       is_leveln_node (Suc n) x \\<and> is_measured_node x\n  \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n     is_leveln_node n x \\<and> is_measured_node x\n  2 \\<le> length (a # b # c # v # vb # vc)\n\ngoal (3 subgoals):\n 1. \\<And>a b c v vb vc.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n                            is_leveln_node n x \\<and> is_measured_node x;\n                 2 \\<le> length (v # vb # vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                                     is_leveln_node (Suc n) x \\<and>\n                                     is_measured_node x;\n        \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n           is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length (a # b # c # v # vb # vc)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (nodes (a # b # c # v # vb # vc)).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x\n 2. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 3. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x\\<in>set (v # vb # vc).\n              is_leveln_node n x \\<and> is_measured_node x;\n   2 \\<le> length (v # vb # vc)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set (nodes (v # vb # vc)).\n                       is_leveln_node (Suc n) x \\<and> is_measured_node x\n  \\<forall>x\\<in>set (a # b # c # v # vb # vc).\n     is_leveln_node n x \\<and> is_measured_node x\n  2 \\<le> length (a # b # c # v # vb # vc)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (nodes (a # b # c # v # vb # vc)).\n       is_leveln_node (Suc n) x \\<and> is_measured_node x", "by (simp add: node3_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (nodes (a # b # c # v # vb # vc)).\n     is_leveln_node (Suc n) x \\<and> is_measured_node x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 2. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x\n 2. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "show \"\\<lbrakk>\\<forall>x\\<in>set []. is_leveln_node n x \\<and> is_measured_node x; 2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []). is_leveln_node (Suc n) x \\<and> is_measured_node x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set [].\n                is_leveln_node n x \\<and> is_measured_node x;\n     2 \\<le> length []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                         is_leveln_node (Suc n) x \\<and> is_measured_node x", "by  simp"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>set [].\n              is_leveln_node n x \\<and> is_measured_node x;\n   2 \\<le> length []\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set (nodes []).\n                       is_leveln_node (Suc n) x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "show \n    \"\\<And>v. \\<lbrakk>\\<forall>x\\<in>set [v]. is_leveln_node n x \\<and> is_measured_node x; 2 \\<le> length [v]\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]). is_leveln_node (Suc n) x \\<and> is_measured_node x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>\\<forall>x\\<in>set [v].\n                   is_leveln_node n x \\<and> is_measured_node x;\n        2 \\<le> length [v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (nodes [v]).\n                            is_leveln_node (Suc n) x \\<and>\n                            is_measured_node x", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>set [?v].\n              is_leveln_node n x \\<and> is_measured_node x;\n   2 \\<le> length [?v]\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set (nodes [?v]).\n                       is_leveln_node (Suc n) x \\<and> is_measured_node x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nodes_inv2:\n  assumes \"is_leveln_digit n sf1\"\n  and \"is_measured_digit sf1\"\n  and \"is_leveln_digit n pr2\"\n  and \"is_measured_digit pr2\"\n  and \"\\<forall> x \\<in> set ts. is_leveln_node n x \\<and> is_measured_node x\"\n  shows \n  \"\\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                is_leveln_node (Suc n) x \\<and> is_measured_node x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n       is_leveln_node (Suc n) x \\<and> is_measured_node x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n       is_leveln_node (Suc n) x \\<and> is_measured_node x", "have v1:\" \\<forall>x\\<in>set (digitToNlist sf1 @ ts @ digitToNlist pr2). \n                 is_leveln_node n x \\<and> is_measured_node x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (digitToNlist sf1 @ ts @ digitToNlist pr2).\n       is_leveln_node n x \\<and> is_measured_node x", "using assms"], ["proof (prove)\nusing this:\n  is_leveln_digit n sf1\n  is_measured_digit sf1\n  is_leveln_digit n pr2\n  is_measured_digit pr2\n  \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (digitToNlist sf1 @ ts @ digitToNlist pr2).\n       is_leveln_node n x \\<and> is_measured_node x", "apply (simp add: digitToNlist_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n     is_leveln_digit n pr2; is_measured_digit pr2;\n     \\<forall>x\\<in>set ts.\n        is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set\n(rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n  (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) sf1) \\<union>\n                                     (set ts \\<union>\nset (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n      (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                         is_leveln_node n x \\<and> is_measured_node x", "apply (cases sf1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = One x1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n     (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d])\n     sf1) \\<union>\n  (set ts \\<union>\n   set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n         (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                            is_leveln_node n x \\<and> is_measured_node x\n 2. \\<And>x21 x22.\n       \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n     (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d])\n     sf1) \\<union>\n  (set ts \\<union>\n   set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n         (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                            is_leveln_node n x \\<and> is_measured_node x\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n     (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d])\n     sf1) \\<union>\n  (set ts \\<union>\n   set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n         (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                            is_leveln_node n x \\<and> is_measured_node x\n 4. \\<And>x41 x42 x43 x44.\n       \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n     (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d])\n     sf1) \\<union>\n  (set ts \\<union>\n   set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n         (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                            is_leveln_node n x \\<and> is_measured_node x", "apply (cases pr2)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = One x1; pr2 = One x1a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n     (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d])\n     sf1) \\<union>\n  (set ts \\<union>\n   set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n         (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                            is_leveln_node n x \\<and> is_measured_node x\n 2. \\<And>x1 x21 x22.\n       \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = One x1; pr2 = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n     (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d])\n     sf1) \\<union>\n  (set ts \\<union>\n   set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n         (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                            is_leveln_node n x \\<and> is_measured_node x\n 3. \\<And>x1 x31 x32 x33.\n       \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = One x1; pr2 = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n     (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d])\n     sf1) \\<union>\n  (set ts \\<union>\n   set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n         (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                            is_leveln_node n x \\<and> is_measured_node x\n 4. \\<And>x1 x41 x42 x43 x44.\n       \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = One x1; pr2 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n     (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d])\n     sf1) \\<union>\n  (set ts \\<union>\n   set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n         (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                            is_leveln_node n x \\<and> is_measured_node x\n 5. \\<And>x21 x22.\n       \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n     (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d])\n     sf1) \\<union>\n  (set ts \\<union>\n   set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n         (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                            is_leveln_node n x \\<and> is_measured_node x\n 6. \\<And>x31 x32 x33.\n       \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n     (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d])\n     sf1) \\<union>\n  (set ts \\<union>\n   set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n         (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                            is_leveln_node n x \\<and> is_measured_node x\n 7. \\<And>x41 x42 x43 x44.\n       \\<lbrakk>is_leveln_digit n sf1; is_measured_digit sf1;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n     (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d])\n     sf1) \\<union>\n  (set ts \\<union>\n   set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n         (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2)).\n                            is_leveln_node n x \\<and> is_measured_node x", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       \\<lbrakk>is_leveln_node n x21 \\<and> is_leveln_node n x22;\n        is_measured_node x21 \\<and> is_measured_node x22;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 2. \\<And>x31 x32 x33.\n       \\<lbrakk>is_leveln_node n x31 \\<and>\n                is_leveln_node n x32 \\<and> is_leveln_node n x33;\n        is_measured_node x31 \\<and>\n        is_measured_node x32 \\<and> is_measured_node x33;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 3. \\<And>x41 x42 x43 x44.\n       \\<lbrakk>is_leveln_node n x41 \\<and>\n                is_leveln_node n x42 \\<and>\n                is_leveln_node n x43 \\<and> is_leveln_node n x44;\n        is_measured_node x41 \\<and>\n        is_measured_node x42 \\<and>\n        is_measured_node x43 \\<and> is_measured_node x44;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x", "apply (cases pr2)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x21 x22 x1.\n       \\<lbrakk>is_leveln_node n x21 \\<and> is_leveln_node n x22;\n        is_measured_node x21 \\<and> is_measured_node x22;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Two x21 x22; pr2 = One x1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 2. \\<And>x21 x22 x21a x22a.\n       \\<lbrakk>is_leveln_node n x21 \\<and> is_leveln_node n x22;\n        is_measured_node x21 \\<and> is_measured_node x22;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Two x21 x22; pr2 = Two x21a x22a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 3. \\<And>x21 x22 x31 x32 x33.\n       \\<lbrakk>is_leveln_node n x21 \\<and> is_leveln_node n x22;\n        is_measured_node x21 \\<and> is_measured_node x22;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Two x21 x22; pr2 = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 4. \\<And>x21 x22 x41 x42 x43 x44.\n       \\<lbrakk>is_leveln_node n x21 \\<and> is_leveln_node n x22;\n        is_measured_node x21 \\<and> is_measured_node x22;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Two x21 x22; pr2 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 5. \\<And>x31 x32 x33.\n       \\<lbrakk>is_leveln_node n x31 \\<and>\n                is_leveln_node n x32 \\<and> is_leveln_node n x33;\n        is_measured_node x31 \\<and>\n        is_measured_node x32 \\<and> is_measured_node x33;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 6. \\<And>x41 x42 x43 x44.\n       \\<lbrakk>is_leveln_node n x41 \\<and>\n                is_leveln_node n x42 \\<and>\n                is_leveln_node n x43 \\<and> is_leveln_node n x44;\n        is_measured_node x41 \\<and>\n        is_measured_node x42 \\<and>\n        is_measured_node x43 \\<and> is_measured_node x44;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x", "apply (simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x31 x32 x33.\n       \\<lbrakk>is_leveln_node n x31 \\<and>\n                is_leveln_node n x32 \\<and> is_leveln_node n x33;\n        is_measured_node x31 \\<and>\n        is_measured_node x32 \\<and> is_measured_node x33;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 2. \\<And>x41 x42 x43 x44.\n       \\<lbrakk>is_leveln_node n x41 \\<and>\n                is_leveln_node n x42 \\<and>\n                is_leveln_node n x43 \\<and> is_leveln_node n x44;\n        is_measured_node x41 \\<and>\n        is_measured_node x42 \\<and>\n        is_measured_node x43 \\<and> is_measured_node x44;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x", "apply (cases pr2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x31 x32 x33 x1.\n       \\<lbrakk>is_leveln_node n x31 \\<and>\n                is_leveln_node n x32 \\<and> is_leveln_node n x33;\n        is_measured_node x31 \\<and>\n        is_measured_node x32 \\<and> is_measured_node x33;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Three x31 x32 x33; pr2 = One x1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 2. \\<And>x31 x32 x33 x21 x22.\n       \\<lbrakk>is_leveln_node n x31 \\<and>\n                is_leveln_node n x32 \\<and> is_leveln_node n x33;\n        is_measured_node x31 \\<and>\n        is_measured_node x32 \\<and> is_measured_node x33;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Three x31 x32 x33; pr2 = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 3. \\<And>x31 x32 x33 x31a x32a x33a.\n       \\<lbrakk>is_leveln_node n x31 \\<and>\n                is_leveln_node n x32 \\<and> is_leveln_node n x33;\n        is_measured_node x31 \\<and>\n        is_measured_node x32 \\<and> is_measured_node x33;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Three x31 x32 x33; pr2 = Three x31a x32a x33a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 4. \\<And>x31 x32 x33 x41 x42 x43 x44.\n       \\<lbrakk>is_leveln_node n x31 \\<and>\n                is_leveln_node n x32 \\<and> is_leveln_node n x33;\n        is_measured_node x31 \\<and>\n        is_measured_node x32 \\<and> is_measured_node x33;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Three x31 x32 x33; pr2 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 5. \\<And>x41 x42 x43 x44.\n       \\<lbrakk>is_leveln_node n x41 \\<and>\n                is_leveln_node n x42 \\<and>\n                is_leveln_node n x43 \\<and> is_leveln_node n x44;\n        is_measured_node x41 \\<and>\n        is_measured_node x42 \\<and>\n        is_measured_node x43 \\<and> is_measured_node x44;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x41 x42 x43 x44.\n       \\<lbrakk>is_leveln_node n x41 \\<and>\n                is_leveln_node n x42 \\<and>\n                is_leveln_node n x43 \\<and> is_leveln_node n x44;\n        is_measured_node x41 \\<and>\n        is_measured_node x42 \\<and>\n        is_measured_node x43 \\<and> is_measured_node x44;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x", "apply (cases pr2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x41 x42 x43 x44 x1.\n       \\<lbrakk>is_leveln_node n x41 \\<and>\n                is_leveln_node n x42 \\<and>\n                is_leveln_node n x43 \\<and> is_leveln_node n x44;\n        is_measured_node x41 \\<and>\n        is_measured_node x42 \\<and>\n        is_measured_node x43 \\<and> is_measured_node x44;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Four x41 x42 x43 x44; pr2 = One x1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 2. \\<And>x41 x42 x43 x44 x21 x22.\n       \\<lbrakk>is_leveln_node n x41 \\<and>\n                is_leveln_node n x42 \\<and>\n                is_leveln_node n x43 \\<and> is_leveln_node n x44;\n        is_measured_node x41 \\<and>\n        is_measured_node x42 \\<and>\n        is_measured_node x43 \\<and> is_measured_node x44;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Four x41 x42 x43 x44; pr2 = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 3. \\<And>x41 x42 x43 x44 x31 x32 x33.\n       \\<lbrakk>is_leveln_node n x41 \\<and>\n                is_leveln_node n x42 \\<and>\n                is_leveln_node n x43 \\<and> is_leveln_node n x44;\n        is_measured_node x41 \\<and>\n        is_measured_node x42 \\<and>\n        is_measured_node x43 \\<and> is_measured_node x44;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Four x41 x42 x43 x44; pr2 = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x\n 4. \\<And>x41 x42 x43 x44 x41a x42a x43a x44a.\n       \\<lbrakk>is_leveln_node n x41 \\<and>\n                is_leveln_node n x42 \\<and>\n                is_leveln_node n x43 \\<and> is_leveln_node n x44;\n        is_measured_node x41 \\<and>\n        is_measured_node x42 \\<and>\n        is_measured_node x43 \\<and> is_measured_node x44;\n        is_leveln_digit n pr2; is_measured_digit pr2;\n        \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x;\n        sf1 = Four x41 x42 x43 x44; pr2 = Four x41a x42a x43a x44a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ts \\<union>\n  set (rec_Digit (\\<lambda>a. [a]) (\\<lambda>a b. [a, b])\n        (\\<lambda>a b c. [a, b, c]) (\\<lambda>a b c d. [a, b, c, d]) pr2).\n                            is_leveln_node n x \\<and> is_measured_node x", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (digitToNlist sf1 @ ts @ digitToNlist pr2).\n     is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n       is_leveln_node (Suc n) x \\<and> is_measured_node x", "have v2: \"length (digitToNlist sf1 @ ts @ digitToNlist pr2) \\<ge> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)", "apply (cases sf1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       sf1 = One x1 \\<Longrightarrow>\n       2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)\n 2. \\<And>x21 x22.\n       sf1 = Two x21 x22 \\<Longrightarrow>\n       2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)\n 3. \\<And>x31 x32 x33.\n       sf1 = Three x31 x32 x33 \\<Longrightarrow>\n       2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)\n 4. \\<And>x41 x42 x43 x44.\n       sf1 = Four x41 x42 x43 x44 \\<Longrightarrow>\n       2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)", "apply (cases pr2)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>sf1 = One x1; pr2 = One x1a\\<rbrakk>\n       \\<Longrightarrow> 2 \\<le> length\n                                  (digitToNlist sf1 @ ts @ digitToNlist pr2)\n 2. \\<And>x1 x21 x22.\n       \\<lbrakk>sf1 = One x1; pr2 = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> 2 \\<le> length\n                                  (digitToNlist sf1 @ ts @ digitToNlist pr2)\n 3. \\<And>x1 x31 x32 x33.\n       \\<lbrakk>sf1 = One x1; pr2 = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> 2 \\<le> length\n                                  (digitToNlist sf1 @ ts @ digitToNlist pr2)\n 4. \\<And>x1 x41 x42 x43 x44.\n       \\<lbrakk>sf1 = One x1; pr2 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> 2 \\<le> length\n                                  (digitToNlist sf1 @ ts @ digitToNlist pr2)\n 5. \\<And>x21 x22.\n       sf1 = Two x21 x22 \\<Longrightarrow>\n       2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)\n 6. \\<And>x31 x32 x33.\n       sf1 = Three x31 x32 x33 \\<Longrightarrow>\n       2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)\n 7. \\<And>x41 x42 x43 x44.\n       sf1 = Four x41 x42 x43 x44 \\<Longrightarrow>\n       2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n       is_leveln_node (Suc n) x \\<and> is_measured_node x", "thus ?thesis"], ["proof (prove)\nusing this:\n  2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n       is_leveln_node (Suc n) x \\<and> is_measured_node x", "using v1 nodes_inv[of \"digitToNlist sf1 @ ts @ digitToNlist pr2\"]"], ["proof (prove)\nusing this:\n  2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)\n  \\<forall>x\\<in>set (digitToNlist sf1 @ ts @ digitToNlist pr2).\n     is_leveln_node n x \\<and> is_measured_node x\n  \\<lbrakk>\\<forall>x\\<in>set (digitToNlist sf1 @ ts @ digitToNlist pr2).\n              is_leveln_node ?n x \\<and> is_measured_node x;\n   2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node (Suc ?n) x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n       is_leveln_node (Suc n) x \\<and> is_measured_node x", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n     is_leveln_node (Suc n) x \\<and> is_measured_node x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma app3_inv:\n  assumes \"is_leveln_ftree n t1\"\n  and \"is_leveln_ftree n t2\"\n  and \"is_measured_ftree t1\"\n  and \"is_measured_ftree t2\"\n  and \"\\<forall> x\\<in>set xs. (is_leveln_node n x \\<and> is_measured_node x)\"\n  shows \"is_leveln_ftree n (app3 t1 xs t2) \\<and> is_measured_ftree (app3 t1 xs t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_leveln_ftree n (app3 t1 xs t2) \\<and>\n    is_measured_ftree (app3 t1 xs t2)", "proof (insert assms, induct t1 xs t2 arbitrary: n rule: app3.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>xs t n.\n       \\<lbrakk>is_leveln_ftree n Empty; is_leveln_ftree n t;\n        is_measured_ftree Empty; is_measured_ftree t;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (app3 Empty xs t) \\<and>\n                         is_measured_ftree (app3 Empty xs t)\n 2. \\<And>v xs n.\n       \\<lbrakk>is_leveln_ftree n (Single v); is_leveln_ftree n Empty;\n        is_measured_ftree (Single v); is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (app3 (Single v) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Single v) xs Empty)\n 3. \\<And>v va vb vc xs n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n Empty; is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Deep v va vb vc) xs Empty)\n 4. \\<And>x xs v n.\n       \\<lbrakk>is_leveln_ftree n (Single x); is_leveln_ftree n (Single v);\n        is_measured_ftree (Single x); is_measured_ftree (Single v);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Single v)) \\<and>\n                         is_measured_ftree (app3 (Single x) xs (Single v))\n 5. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 6. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 7. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "case (1 xs t n)"], ["proof (state)\nthis:\n  is_leveln_ftree n Empty\n  is_leveln_ftree n t\n  is_measured_ftree Empty\n  is_measured_ftree t\n  \\<forall>x\\<in>set xs. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (7 subgoals):\n 1. \\<And>xs t n.\n       \\<lbrakk>is_leveln_ftree n Empty; is_leveln_ftree n t;\n        is_measured_ftree Empty; is_measured_ftree t;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (app3 Empty xs t) \\<and>\n                         is_measured_ftree (app3 Empty xs t)\n 2. \\<And>v xs n.\n       \\<lbrakk>is_leveln_ftree n (Single v); is_leveln_ftree n Empty;\n        is_measured_ftree (Single v); is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (app3 (Single v) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Single v) xs Empty)\n 3. \\<And>v va vb vc xs n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n Empty; is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Deep v va vb vc) xs Empty)\n 4. \\<And>x xs v n.\n       \\<lbrakk>is_leveln_ftree n (Single x); is_leveln_ftree n (Single v);\n        is_measured_ftree (Single x); is_measured_ftree (Single v);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Single v)) \\<and>\n                         is_measured_ftree (app3 (Single x) xs (Single v))\n 5. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 6. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 7. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree n Empty\n  is_leveln_ftree n t\n  is_measured_ftree Empty\n  is_measured_ftree t\n  \\<forall>x\\<in>set xs. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n (app3 Empty xs t) \\<and>\n    is_measured_ftree (app3 Empty xs t)", "using lconsNlist_inv"], ["proof (prove)\nusing this:\n  is_leveln_ftree n Empty\n  is_leveln_ftree n t\n  is_measured_ftree Empty\n  is_measured_ftree t\n  \\<forall>x\\<in>set xs. is_leveln_node n x \\<and> is_measured_node x\n  \\<lbrakk>is_leveln_ftree ?n ?t; is_measured_ftree ?t;\n   \\<forall>x\\<in>set ?xs.\n      is_leveln_node ?n x \\<and> is_measured_node x\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n (lconsNlist ?xs ?t) \\<and>\n                    is_measured_ftree (lconsNlist ?xs ?t)\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n (app3 Empty xs t) \\<and>\n    is_measured_ftree (app3 Empty xs t)", "by simp"], ["proof (state)\nthis:\n  is_leveln_ftree n (app3 Empty xs t) \\<and>\n  is_measured_ftree (app3 Empty xs t)\n\ngoal (6 subgoals):\n 1. \\<And>v xs n.\n       \\<lbrakk>is_leveln_ftree n (Single v); is_leveln_ftree n Empty;\n        is_measured_ftree (Single v); is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (app3 (Single v) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Single v) xs Empty)\n 2. \\<And>v va vb vc xs n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n Empty; is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Deep v va vb vc) xs Empty)\n 3. \\<And>x xs v n.\n       \\<lbrakk>is_leveln_ftree n (Single x); is_leveln_ftree n (Single v);\n        is_measured_ftree (Single x); is_measured_ftree (Single v);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Single v)) \\<and>\n                         is_measured_ftree (app3 (Single x) xs (Single v))\n 4. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 5. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 6. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>v xs n.\n       \\<lbrakk>is_leveln_ftree n (Single v); is_leveln_ftree n Empty;\n        is_measured_ftree (Single v); is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (app3 (Single v) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Single v) xs Empty)\n 2. \\<And>v va vb vc xs n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n Empty; is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Deep v va vb vc) xs Empty)\n 3. \\<And>x xs v n.\n       \\<lbrakk>is_leveln_ftree n (Single x); is_leveln_ftree n (Single v);\n        is_measured_ftree (Single x); is_measured_ftree (Single v);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Single v)) \\<and>\n                         is_measured_ftree (app3 (Single x) xs (Single v))\n 4. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 5. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 6. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "case \"2_1\""], ["proof (state)\nthis:\n  is_leveln_ftree n (Single v_)\n  is_leveln_ftree n Empty\n  is_measured_ftree (Single v_)\n  is_measured_ftree Empty\n  \\<forall>x\\<in>set xs_. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (6 subgoals):\n 1. \\<And>v xs n.\n       \\<lbrakk>is_leveln_ftree n (Single v); is_leveln_ftree n Empty;\n        is_measured_ftree (Single v); is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (app3 (Single v) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Single v) xs Empty)\n 2. \\<And>v va vb vc xs n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n Empty; is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Deep v va vb vc) xs Empty)\n 3. \\<And>x xs v n.\n       \\<lbrakk>is_leveln_ftree n (Single x); is_leveln_ftree n (Single v);\n        is_measured_ftree (Single x); is_measured_ftree (Single v);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Single v)) \\<and>\n                         is_measured_ftree (app3 (Single x) xs (Single v))\n 4. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 5. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 6. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Single v_)\n  is_leveln_ftree n Empty\n  is_measured_ftree (Single v_)\n  is_measured_ftree Empty\n  \\<forall>x\\<in>set xs_. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n (app3 (Single v_) xs_ Empty) \\<and>\n    is_measured_ftree (app3 (Single v_) xs_ Empty)", "by (simp add: rconsNlist_inv)"], ["proof (state)\nthis:\n  is_leveln_ftree n (app3 (Single v_) xs_ Empty) \\<and>\n  is_measured_ftree (app3 (Single v_) xs_ Empty)\n\ngoal (5 subgoals):\n 1. \\<And>v va vb vc xs n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n Empty; is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Deep v va vb vc) xs Empty)\n 2. \\<And>x xs v n.\n       \\<lbrakk>is_leveln_ftree n (Single x); is_leveln_ftree n (Single v);\n        is_measured_ftree (Single x); is_measured_ftree (Single v);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Single v)) \\<and>\n                         is_measured_ftree (app3 (Single x) xs (Single v))\n 3. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 4. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 5. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>v va vb vc xs n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n Empty; is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Deep v va vb vc) xs Empty)\n 2. \\<And>x xs v n.\n       \\<lbrakk>is_leveln_ftree n (Single x); is_leveln_ftree n (Single v);\n        is_measured_ftree (Single x); is_measured_ftree (Single v);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Single v)) \\<and>\n                         is_measured_ftree (app3 (Single x) xs (Single v))\n 3. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 4. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 5. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "case \"2_2\""], ["proof (state)\nthis:\n  is_leveln_ftree n (Deep v_ va_ vb_ vc_)\n  is_leveln_ftree n Empty\n  is_measured_ftree (Deep v_ va_ vb_ vc_)\n  is_measured_ftree Empty\n  \\<forall>x\\<in>set xs_. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (5 subgoals):\n 1. \\<And>v va vb vc xs n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n Empty; is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree Empty;\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs Empty) \\<and>\n                         is_measured_ftree (app3 (Deep v va vb vc) xs Empty)\n 2. \\<And>x xs v n.\n       \\<lbrakk>is_leveln_ftree n (Single x); is_leveln_ftree n (Single v);\n        is_measured_ftree (Single x); is_measured_ftree (Single v);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Single v)) \\<and>\n                         is_measured_ftree (app3 (Single x) xs (Single v))\n 3. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 4. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 5. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep v_ va_ vb_ vc_)\n  is_leveln_ftree n Empty\n  is_measured_ftree (Deep v_ va_ vb_ vc_)\n  is_measured_ftree Empty\n  \\<forall>x\\<in>set xs_. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n (app3 (Deep v_ va_ vb_ vc_) xs_ Empty) \\<and>\n    is_measured_ftree (app3 (Deep v_ va_ vb_ vc_) xs_ Empty)", "by (simp add: lconsNlist_inv rconsNlist_inv)"], ["proof (state)\nthis:\n  is_leveln_ftree n (app3 (Deep v_ va_ vb_ vc_) xs_ Empty) \\<and>\n  is_measured_ftree (app3 (Deep v_ va_ vb_ vc_) xs_ Empty)\n\ngoal (4 subgoals):\n 1. \\<And>x xs v n.\n       \\<lbrakk>is_leveln_ftree n (Single x); is_leveln_ftree n (Single v);\n        is_measured_ftree (Single x); is_measured_ftree (Single v);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Single v)) \\<and>\n                         is_measured_ftree (app3 (Single x) xs (Single v))\n 2. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 3. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 4. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x xs v n.\n       \\<lbrakk>is_leveln_ftree n (Single x); is_leveln_ftree n (Single v);\n        is_measured_ftree (Single x); is_measured_ftree (Single v);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Single v)) \\<and>\n                         is_measured_ftree (app3 (Single x) xs (Single v))\n 2. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 3. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 4. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "case \"3_1\""], ["proof (state)\nthis:\n  is_leveln_ftree n (Single x_)\n  is_leveln_ftree n (Single v_)\n  is_measured_ftree (Single x_)\n  is_measured_ftree (Single v_)\n  \\<forall>x\\<in>set xs_. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (4 subgoals):\n 1. \\<And>x xs v n.\n       \\<lbrakk>is_leveln_ftree n (Single x); is_leveln_ftree n (Single v);\n        is_measured_ftree (Single x); is_measured_ftree (Single v);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Single v)) \\<and>\n                         is_measured_ftree (app3 (Single x) xs (Single v))\n 2. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 3. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 4. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Single x_)\n  is_leveln_ftree n (Single v_)\n  is_measured_ftree (Single x_)\n  is_measured_ftree (Single v_)\n  \\<forall>x\\<in>set xs_. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n (app3 (Single x_) xs_ (Single v_)) \\<and>\n    is_measured_ftree (app3 (Single x_) xs_ (Single v_))", "by (simp add: lconsNlist_inv nlcons_invlevel nlcons_invmeas )"], ["proof (state)\nthis:\n  is_leveln_ftree n (app3 (Single x_) xs_ (Single v_)) \\<and>\n  is_measured_ftree (app3 (Single x_) xs_ (Single v_))\n\ngoal (3 subgoals):\n 1. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 2. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 3. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 2. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 3. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "case \"3_2\""], ["proof (state)\nthis:\n  is_leveln_ftree n (Single x_)\n  is_leveln_ftree n (Deep v_ va_ vb_ vc_)\n  is_measured_ftree (Single x_)\n  is_measured_ftree (Deep v_ va_ vb_ vc_)\n  \\<forall>x\\<in>set xs_. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (3 subgoals):\n 1. \\<And>x xs v va vb vc n.\n       \\<lbrakk>is_leveln_ftree n (Single x);\n        is_leveln_ftree n (Deep v va vb vc); is_measured_ftree (Single x);\n        is_measured_ftree (Deep v va vb vc);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Single x) xs (Deep v va vb vc)) \\<and>\n                         is_measured_ftree\n                          (app3 (Single x) xs (Deep v va vb vc))\n 2. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 3. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Single x_)\n  is_leveln_ftree n (Deep v_ va_ vb_ vc_)\n  is_measured_ftree (Single x_)\n  is_measured_ftree (Deep v_ va_ vb_ vc_)\n  \\<forall>x\\<in>set xs_. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n (app3 (Single x_) xs_ (Deep v_ va_ vb_ vc_)) \\<and>\n    is_measured_ftree (app3 (Single x_) xs_ (Deep v_ va_ vb_ vc_))", "by (simp only: app3.simps) \n       (simp add: lconsNlist_inv nlcons_invlevel nlcons_invmeas)"], ["proof (state)\nthis:\n  is_leveln_ftree n (app3 (Single x_) xs_ (Deep v_ va_ vb_ vc_)) \\<and>\n  is_measured_ftree (app3 (Single x_) xs_ (Deep v_ va_ vb_ vc_))\n\ngoal (2 subgoals):\n 1. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 2. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 2. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "case 4"], ["proof (state)\nthis:\n  is_leveln_ftree n (Deep v_ va_ vb_ vc_)\n  is_leveln_ftree n (Single x_)\n  is_measured_ftree (Deep v_ va_ vb_ vc_)\n  is_measured_ftree (Single x_)\n  \\<forall>x\\<in>set xs_. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (2 subgoals):\n 1. \\<And>v va vb vc xs x n.\n       \\<lbrakk>is_leveln_ftree n (Deep v va vb vc);\n        is_leveln_ftree n (Single x); is_measured_ftree (Deep v va vb vc);\n        is_measured_ftree (Single x);\n        \\<forall>x\\<in>set xs.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep v va vb vc) xs (Single x)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep v va vb vc) xs (Single x))\n 2. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep v_ va_ vb_ vc_)\n  is_leveln_ftree n (Single x_)\n  is_measured_ftree (Deep v_ va_ vb_ vc_)\n  is_measured_ftree (Single x_)\n  \\<forall>x\\<in>set xs_. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n (app3 (Deep v_ va_ vb_ vc_) xs_ (Single x_)) \\<and>\n    is_measured_ftree (app3 (Deep v_ va_ vb_ vc_) xs_ (Single x_))", "by (simp only: app3.simps)\n       (simp add: rconsNlist_inv nrcons_invlevel nrcons_invmeas)"], ["proof (state)\nthis:\n  is_leveln_ftree n (app3 (Deep v_ va_ vb_ vc_) xs_ (Single x_)) \\<and>\n  is_measured_ftree (app3 (Deep v_ va_ vb_ vc_) xs_ (Single x_))\n\ngoal (1 subgoal):\n 1. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "case (5 uu pr1 m1 sf1 ts uv pr2 m2 sf2 n)"], ["proof (state)\nthis:\n  \\<lbrakk>is_leveln_ftree ?n m1; is_leveln_ftree ?n m2;\n   is_measured_ftree m1; is_measured_ftree m2;\n   \\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n      is_leveln_node ?n x \\<and> is_measured_node x\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n\n                     (app3 m1\n                       (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                       m2) \\<and>\n                    is_measured_ftree\n                     (app3 m1\n                       (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                       m2)\n  is_leveln_ftree n (Deep uu pr1 m1 sf1)\n  is_leveln_ftree n (Deep uv pr2 m2 sf2)\n  is_measured_ftree (Deep uu pr1 m1 sf1)\n  is_measured_ftree (Deep uv pr2 m2 sf2)\n  \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2 n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                    is_measured_ftree m1; is_measured_ftree m2;\n                    \\<forall>x\\<in>set (nodes\n   (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                       is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n                                     is_measured_ftree\n(app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2);\n        is_leveln_ftree n (Deep uu_ pr1 m1 sf1);\n        is_leveln_ftree n (Deep uv_ pr2 m2 sf2);\n        is_measured_ftree (Deep uu_ pr1 m1 sf1);\n        is_measured_ftree (Deep uv_ pr2 m2 sf2);\n        \\<forall>x\\<in>set ts.\n           is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2)) \\<and>\n                         is_measured_ftree\n                          (app3 (Deep uu_ pr1 m1 sf1) ts\n                            (Deep uv_ pr2 m2 sf2))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_leveln_ftree ?n m1; is_leveln_ftree ?n m2;\n   is_measured_ftree m1; is_measured_ftree m2;\n   \\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n      is_leveln_node ?n x \\<and> is_measured_node x\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n\n                     (app3 m1\n                       (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                       m2) \\<and>\n                    is_measured_ftree\n                     (app3 m1\n                       (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                       m2)\n  is_leveln_ftree n (Deep uu pr1 m1 sf1)\n  is_leveln_ftree n (Deep uv pr2 m2 sf2)\n  is_measured_ftree (Deep uu pr1 m1 sf1)\n  is_measured_ftree (Deep uv pr2 m2 sf2)\n  \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n\n     (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2)) \\<and>\n    is_measured_ftree (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                 is_measured_ftree m1; is_measured_ftree m2;\n                 \\<forall>x\\<in>set (nodes\n(digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                    is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2) \\<and>\n                                  is_measured_ftree\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2);\n     is_leveln_ftree n (Deep uu pr1 m1 sf1);\n     is_leveln_ftree n (Deep uv pr2 m2 sf2);\n     is_measured_ftree (Deep uu pr1 m1 sf1);\n     is_measured_ftree (Deep uv pr2 m2 sf2);\n     \\<forall>x\\<in>set ts.\n        is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n\n                       (app3 (Deep uu pr1 m1 sf1) ts\n                         (Deep uv pr2 m2 sf2)) \\<and>\n                      is_measured_ftree\n                       (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))", "have v1: \"is_leveln_ftree (Suc n) m1\" \n      and v2: \"is_leveln_ftree (Suc n) m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_leveln_ftree (Suc n) m1 &&& is_leveln_ftree (Suc n) m2", "using \"5.prems\""], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep uu pr1 m1 sf1)\n  is_leveln_ftree n (Deep uv pr2 m2 sf2)\n  is_measured_ftree (Deep uu pr1 m1 sf1)\n  is_measured_ftree (Deep uv pr2 m2 sf2)\n  \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. is_leveln_ftree (Suc n) m1 &&& is_leveln_ftree (Suc n) m2", "by (simp_all add: is_leveln_ftree_def)"], ["proof (state)\nthis:\n  is_leveln_ftree (Suc n) m1\n  is_leveln_ftree (Suc n) m2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                 is_measured_ftree m1; is_measured_ftree m2;\n                 \\<forall>x\\<in>set (nodes\n(digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                    is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2) \\<and>\n                                  is_measured_ftree\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2);\n     is_leveln_ftree n (Deep uu pr1 m1 sf1);\n     is_leveln_ftree n (Deep uv pr2 m2 sf2);\n     is_measured_ftree (Deep uu pr1 m1 sf1);\n     is_measured_ftree (Deep uv pr2 m2 sf2);\n     \\<forall>x\\<in>set ts.\n        is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n\n                       (app3 (Deep uu pr1 m1 sf1) ts\n                         (Deep uv pr2 m2 sf2)) \\<and>\n                      is_measured_ftree\n                       (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))", "have v3: \"is_measured_ftree m1\" \n      and v4: \"is_measured_ftree m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_measured_ftree m1 &&& is_measured_ftree m2", "using \"5.prems\""], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep uu pr1 m1 sf1)\n  is_leveln_ftree n (Deep uv pr2 m2 sf2)\n  is_measured_ftree (Deep uu pr1 m1 sf1)\n  is_measured_ftree (Deep uv pr2 m2 sf2)\n  \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. is_measured_ftree m1 &&& is_measured_ftree m2", "by (simp_all add: is_measured_ftree_def)"], ["proof (state)\nthis:\n  is_measured_ftree m1\n  is_measured_ftree m2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                 is_measured_ftree m1; is_measured_ftree m2;\n                 \\<forall>x\\<in>set (nodes\n(digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                    is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2) \\<and>\n                                  is_measured_ftree\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2);\n     is_leveln_ftree n (Deep uu pr1 m1 sf1);\n     is_leveln_ftree n (Deep uv pr2 m2 sf2);\n     is_measured_ftree (Deep uu pr1 m1 sf1);\n     is_measured_ftree (Deep uv pr2 m2 sf2);\n     \\<forall>x\\<in>set ts.\n        is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n\n                       (app3 (Deep uu pr1 m1 sf1) ts\n                         (Deep uv pr2 m2 sf2)) \\<and>\n                      is_measured_ftree\n                       (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))", "have v5: \"is_leveln_digit n sf1\"\n      \"is_measured_digit sf1\"\n      \"is_leveln_digit n pr2\"\n      \"is_measured_digit pr2\"\n      \"\\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_leveln_digit n sf1 &&& is_measured_digit sf1) &&&\n    is_leveln_digit n pr2 &&&\n    is_measured_digit pr2 &&&\n    \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x", "using \"5.prems\""], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep uu pr1 m1 sf1)\n  is_leveln_ftree n (Deep uv pr2 m2 sf2)\n  is_measured_ftree (Deep uu pr1 m1 sf1)\n  is_measured_ftree (Deep uv pr2 m2 sf2)\n  \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. (is_leveln_digit n sf1 &&& is_measured_digit sf1) &&&\n    is_leveln_digit n pr2 &&&\n    is_measured_digit pr2 &&&\n    \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x", "by (simp_all add: is_leveln_ftree_def is_measured_ftree_def)"], ["proof (state)\nthis:\n  is_leveln_digit n sf1\n  is_measured_digit sf1\n  is_leveln_digit n pr2\n  is_measured_digit pr2\n  \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                 is_measured_ftree m1; is_measured_ftree m2;\n                 \\<forall>x\\<in>set (nodes\n(digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                    is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2) \\<and>\n                                  is_measured_ftree\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2);\n     is_leveln_ftree n (Deep uu pr1 m1 sf1);\n     is_leveln_ftree n (Deep uv pr2 m2 sf2);\n     is_measured_ftree (Deep uu pr1 m1 sf1);\n     is_measured_ftree (Deep uv pr2 m2 sf2);\n     \\<forall>x\\<in>set ts.\n        is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n\n                       (app3 (Deep uu pr1 m1 sf1) ts\n                         (Deep uv pr2 m2 sf2)) \\<and>\n                      is_measured_ftree\n                       (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))", "note v6 = nodes_inv2[OF v5]"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)).\n     is_leveln_node (Suc n) x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                 is_measured_ftree m1; is_measured_ftree m2;\n                 \\<forall>x\\<in>set (nodes\n(digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                    is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2) \\<and>\n                                  is_measured_ftree\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2);\n     is_leveln_ftree n (Deep uu pr1 m1 sf1);\n     is_leveln_ftree n (Deep uv pr2 m2 sf2);\n     is_measured_ftree (Deep uu pr1 m1 sf1);\n     is_measured_ftree (Deep uv pr2 m2 sf2);\n     \\<forall>x\\<in>set ts.\n        is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n\n                       (app3 (Deep uu pr1 m1 sf1) ts\n                         (Deep uv pr2 m2 sf2)) \\<and>\n                      is_measured_ftree\n                       (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))", "note v7 = \"5.hyps\"[OF v1 v2 v3 v4 v6]"], ["proof (state)\nthis:\n  is_leveln_ftree (Suc n)\n   (app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n  is_measured_ftree\n   (app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                 is_measured_ftree m1; is_measured_ftree m2;\n                 \\<forall>x\\<in>set (nodes\n(digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                    is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2) \\<and>\n                                  is_measured_ftree\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2);\n     is_leveln_ftree n (Deep uu pr1 m1 sf1);\n     is_leveln_ftree n (Deep uv pr2 m2 sf2);\n     is_measured_ftree (Deep uu pr1 m1 sf1);\n     is_measured_ftree (Deep uv pr2 m2 sf2);\n     \\<forall>x\\<in>set ts.\n        is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n\n                       (app3 (Deep uu pr1 m1 sf1) ts\n                         (Deep uv pr2 m2 sf2)) \\<and>\n                      is_measured_ftree\n                       (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))", "have v8: \"is_leveln_digit n sf2\"\n      \"is_measured_digit sf2\"\n      \"is_leveln_digit n pr1\"\n      \"is_measured_digit pr1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_leveln_digit n sf2 &&& is_measured_digit sf2) &&&\n    is_leveln_digit n pr1 &&& is_measured_digit pr1", "using \"5.prems\""], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep uu pr1 m1 sf1)\n  is_leveln_ftree n (Deep uv pr2 m2 sf2)\n  is_measured_ftree (Deep uu pr1 m1 sf1)\n  is_measured_ftree (Deep uv pr2 m2 sf2)\n  \\<forall>x\\<in>set ts. is_leveln_node n x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. (is_leveln_digit n sf2 &&& is_measured_digit sf2) &&&\n    is_leveln_digit n pr1 &&& is_measured_digit pr1", "by (simp_all add: is_leveln_ftree_def is_measured_ftree_def)"], ["proof (state)\nthis:\n  is_leveln_digit n sf2\n  is_measured_digit sf2\n  is_leveln_digit n pr1\n  is_measured_digit pr1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                \\<lbrakk>is_leveln_ftree n m1; is_leveln_ftree n m2;\n                 is_measured_ftree m1; is_measured_ftree m2;\n                 \\<forall>x\\<in>set (nodes\n(digitToNlist sf1 @ ts @ digitToNlist pr2)).\n                    is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2) \\<and>\n                                  is_measured_ftree\n                                   (app3 m1\n                                     (nodes\n (digitToNlist sf1 @ ts @ digitToNlist pr2))\n                                     m2);\n     is_leveln_ftree n (Deep uu pr1 m1 sf1);\n     is_leveln_ftree n (Deep uv pr2 m2 sf2);\n     is_measured_ftree (Deep uu pr1 m1 sf1);\n     is_measured_ftree (Deep uv pr2 m2 sf2);\n     \\<forall>x\\<in>set ts.\n        is_leveln_node n x \\<and> is_measured_node x\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n\n                       (app3 (Deep uu pr1 m1 sf1) ts\n                         (Deep uv pr2 m2 sf2)) \\<and>\n                      is_measured_ftree\n                       (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_leveln_ftree n\n     (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2)) \\<and>\n    is_measured_ftree (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))", "using v7 v8"], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n)\n   (app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) \\<and>\n  is_measured_ftree\n   (app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2)\n  is_leveln_digit n sf2\n  is_measured_digit sf2\n  is_leveln_digit n pr1\n  is_measured_digit pr1\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n\n     (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2)) \\<and>\n    is_measured_ftree (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))", "by (simp add: is_leveln_ftree_def is_measured_ftree_def deep_def)"], ["proof (state)\nthis:\n  is_leveln_ftree n\n   (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2)) \\<and>\n  is_measured_ftree (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_leveln_ftree n\n   (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2)) \\<and>\n  is_measured_ftree (app3 (Deep uu pr1 m1 sf1) ts (Deep uv pr2 m2 sf2))\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec nlistToList:: \"(('e, 'a) Node) list \\<Rightarrow> ('e \\<times> 'a) list\" where\n  \"nlistToList [] = []\"|\n  \"nlistToList (x#xs) = (nodeToList x) @ (nlistToList xs)\""], ["", "lemma nodes_list: \"length xs \\<ge> 2 \\<Longrightarrow> nlistToList (nodes xs) = nlistToList xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> length xs \\<Longrightarrow>\n    nlistToList (nodes xs) = nlistToList xs", "by (induct xs rule: nodes.induct) (auto simp add: node2_def node3_def)"], ["", "lemma nlistToList_app: \n  \"nlistToList (xs@ys) = (nlistToList xs) @ (nlistToList ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nlistToList (xs @ ys) = nlistToList xs @ nlistToList ys", "by (induct xs arbitrary: ys, simp_all)"], ["", "lemma nlistListLCons: \"toList (lconsNlist xs t) = (nlistToList xs) @ (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (lconsNlist xs t) = nlistToList xs @ toList t", "by (induct xs) (auto simp add: nlcons_list)"], ["", "lemma nlistListRCons: \"toList (rconsNlist t xs) = (toList t) @ (nlistToList xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (rconsNlist t xs) = toList t @ nlistToList xs", "by (induct xs arbitrary: t) (auto simp add: nrcons_list)"], ["", "lemma app3_list_lem1: \n  \"nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) =\n       digitToList sf1 @ nlistToList ts @ digitToList pr2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) =\n    digitToList sf1 @ nlistToList ts @ digitToList pr2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) =\n    digitToList sf1 @ nlistToList ts @ digitToList pr2", "have len1: \"length (digitToNlist sf1 @ ts @ digitToNlist pr2) \\<ge> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)", "by (cases sf1,cases pr2,simp_all)"], ["proof (state)\nthis:\n  2 \\<le> length (digitToNlist sf1 @ ts @ digitToNlist pr2)\n\ngoal (1 subgoal):\n 1. nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) =\n    digitToList sf1 @ nlistToList ts @ digitToList pr2", "have \"(nlistToList (digitToNlist sf1 @ ts @ digitToNlist pr2)) \n       = (digitToList sf1 @ nlistToList ts @ digitToList pr2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nlistToList (digitToNlist sf1 @ ts @ digitToNlist pr2) =\n    digitToList sf1 @ nlistToList ts @ digitToList pr2", "apply (cases sf1, cases pr2)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>sf1 = One x1; pr2 = One x1a\\<rbrakk>\n       \\<Longrightarrow> nlistToList\n                          (digitToNlist sf1 @ ts @ digitToNlist pr2) =\n                         digitToList sf1 @ nlistToList ts @ digitToList pr2\n 2. \\<And>x1 x21 x22.\n       \\<lbrakk>sf1 = One x1; pr2 = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> nlistToList\n                          (digitToNlist sf1 @ ts @ digitToNlist pr2) =\n                         digitToList sf1 @ nlistToList ts @ digitToList pr2\n 3. \\<And>x1 x31 x32 x33.\n       \\<lbrakk>sf1 = One x1; pr2 = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> nlistToList\n                          (digitToNlist sf1 @ ts @ digitToNlist pr2) =\n                         digitToList sf1 @ nlistToList ts @ digitToList pr2\n 4. \\<And>x1 x41 x42 x43 x44.\n       \\<lbrakk>sf1 = One x1; pr2 = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> nlistToList\n                          (digitToNlist sf1 @ ts @ digitToNlist pr2) =\n                         digitToList sf1 @ nlistToList ts @ digitToList pr2\n 5. \\<And>x21 x22.\n       sf1 = Two x21 x22 \\<Longrightarrow>\n       nlistToList (digitToNlist sf1 @ ts @ digitToNlist pr2) =\n       digitToList sf1 @ nlistToList ts @ digitToList pr2\n 6. \\<And>x31 x32 x33.\n       sf1 = Three x31 x32 x33 \\<Longrightarrow>\n       nlistToList (digitToNlist sf1 @ ts @ digitToNlist pr2) =\n       digitToList sf1 @ nlistToList ts @ digitToList pr2\n 7. \\<And>x41 x42 x43 x44.\n       sf1 = Four x41 x42 x43 x44 \\<Longrightarrow>\n       nlistToList (digitToNlist sf1 @ ts @ digitToNlist pr2) =\n       digitToList sf1 @ nlistToList ts @ digitToList pr2", "apply (simp_all add: nlistToList_app)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       sf1 = Two x21 x22 \\<Longrightarrow>\n       nlistToList (digitToNlist pr2) = digitToList pr2\n 2. \\<And>x31 x32 x33.\n       sf1 = Three x31 x32 x33 \\<Longrightarrow>\n       nlistToList (digitToNlist pr2) = digitToList pr2\n 3. \\<And>x41 x42 x43 x44.\n       sf1 = Four x41 x42 x43 x44 \\<Longrightarrow>\n       nlistToList (digitToNlist pr2) = digitToList pr2", "apply (cases pr2, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x31 x32 x33.\n       sf1 = Three x31 x32 x33 \\<Longrightarrow>\n       nlistToList (digitToNlist pr2) = digitToList pr2\n 2. \\<And>x41 x42 x43 x44.\n       sf1 = Four x41 x42 x43 x44 \\<Longrightarrow>\n       nlistToList (digitToNlist pr2) = digitToList pr2", "apply (cases pr2, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x41 x42 x43 x44.\n       sf1 = Four x41 x42 x43 x44 \\<Longrightarrow>\n       nlistToList (digitToNlist pr2) = digitToList pr2", "apply (cases pr2, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  nlistToList (digitToNlist sf1 @ ts @ digitToNlist pr2) =\n  digitToList sf1 @ nlistToList ts @ digitToList pr2\n\ngoal (1 subgoal):\n 1. nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) =\n    digitToList sf1 @ nlistToList ts @ digitToList pr2", "with nodes_list[OF len1]"], ["proof (chain)\npicking this:\n  nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) =\n  nlistToList (digitToNlist sf1 @ ts @ digitToNlist pr2)\n  nlistToList (digitToNlist sf1 @ ts @ digitToNlist pr2) =\n  digitToList sf1 @ nlistToList ts @ digitToList pr2", "show ?thesis"], ["proof (prove)\nusing this:\n  nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) =\n  nlistToList (digitToNlist sf1 @ ts @ digitToNlist pr2)\n  nlistToList (digitToNlist sf1 @ ts @ digitToNlist pr2) =\n  digitToList sf1 @ nlistToList ts @ digitToList pr2\n\ngoal (1 subgoal):\n 1. nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) =\n    digitToList sf1 @ nlistToList ts @ digitToList pr2", "by simp"], ["proof (state)\nthis:\n  nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) =\n  digitToList sf1 @ nlistToList ts @ digitToList pr2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma app3_list: \n  \"toList (app3 t1 xs t2) = (toList t1) @ (nlistToList xs) @ (toList t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (app3 t1 xs t2) = toList t1 @ nlistToList xs @ toList t2", "apply (induct t1 xs t2 rule: app3.induct)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>xs t.\n       toList (app3 Empty xs t) = toList Empty @ nlistToList xs @ toList t\n 2. \\<And>v xs.\n       toList (app3 (Single v) xs Empty) =\n       toList (Single v) @ nlistToList xs @ toList Empty\n 3. \\<And>v va vb vc xs.\n       toList (app3 (Deep v va vb vc) xs Empty) =\n       toList (Deep v va vb vc) @ nlistToList xs @ toList Empty\n 4. \\<And>x xs v.\n       toList (app3 (Single x) xs (Single v)) =\n       toList (Single x) @ nlistToList xs @ toList (Single v)\n 5. \\<And>x xs v va vb vc.\n       toList (app3 (Single x) xs (Deep v va vb vc)) =\n       toList (Single x) @ nlistToList xs @ toList (Deep v va vb vc)\n 6. \\<And>v va vb vc xs x.\n       toList (app3 (Deep v va vb vc) xs (Single x)) =\n       toList (Deep v va vb vc) @ nlistToList xs @ toList (Single x)\n 7. \\<And>uu_ pr1 m1 sf1 ts uv_ pr2 m2 sf2.\n       toList\n        (app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) =\n       toList m1 @\n       nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) @\n       toList m2 \\<Longrightarrow>\n       toList (app3 (Deep uu_ pr1 m1 sf1) ts (Deep uv_ pr2 m2 sf2)) =\n       toList (Deep uu_ pr1 m1 sf1) @\n       nlistToList ts @ toList (Deep uv_ pr2 m2 sf2)", "apply (simp_all add: nlistListLCons nlistListRCons nlcons_list nrcons_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pr1 m1 sf1 ts pr2 m2 sf2.\n       toList\n        (app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2) =\n       toList m1 @\n       nlistToList (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) @\n       toList m2 \\<Longrightarrow>\n       toList\n        (deep pr1\n          (app3 m1 (nodes (digitToNlist sf1 @ ts @ digitToNlist pr2)) m2)\n          sf2) =\n       digitToList pr1 @\n       toList m1 @\n       digitToList sf1 @\n       nlistToList ts @ digitToList pr2 @ toList m2 @ digitToList sf2", "apply (simp add: app3_list_lem1 deep_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition app \n  :: \"('e,'a::monoid_add) FingerTreeStruc \\<Rightarrow> ('e,'a) FingerTreeStruc \n       \\<Rightarrow> ('e,'a) FingerTreeStruc\" \n  where \"app t1 t2 = app3 t1 [] t2\""], ["", "lemma app_correct: \n  assumes \"ft_invar t1\" \"ft_invar t2\" \n  shows \"toList (app t1 t2) = (toList t1) @ (toList t2)\" \n    and \"ft_invar (app t1 t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (app t1 t2) = toList t1 @ toList t2 &&& ft_invar (app t1 t2)", "using assms"], ["proof (prove)\nusing this:\n  ft_invar t1\n  ft_invar t2\n\ngoal (1 subgoal):\n 1. toList (app t1 t2) = toList t1 @ toList t2 &&& ft_invar (app t1 t2)", "by (auto simp add: app3_inv app3_list ft_invar_def app_def)"], ["", "lemma app_inv: \"\\<lbrakk>ft_invar t1;ft_invar t2\\<rbrakk> \\<Longrightarrow> ft_invar (app t1 t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ft_invar t1; ft_invar t2\\<rbrakk>\n    \\<Longrightarrow> ft_invar (app t1 t2)", "by (auto simp add: app3_inv ft_invar_def app_def)"], ["", "lemma app_list[simp]: \"toList (app t1 t2) = (toList t1) @ (toList t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (app t1 t2) = toList t1 @ toList t2", "by (simp add: app3_list app_def)"], ["", "subsubsection \"Splitting\""], ["", "type_synonym ('e,'a) SplitDigit = \n  \"('e,'a) Node list  \\<times> ('e,'a) Node \\<times> ('e,'a) Node list\""], ["", "type_synonym ('e,'a) SplitTree  = \n  \"('e,'a) FingerTreeStruc \\<times> ('e,'a) Node \\<times> ('e,'a) FingerTreeStruc\""], ["", "text \\<open>Auxiliary functions to create a correct finger tree \n    even if the left or right digit is empty\\<close>"], ["", "fun deepL :: \"('e,'a::monoid_add) Node list \\<Rightarrow> ('e,'a) FingerTreeStruc \n    \\<Rightarrow> ('e,'a) Digit \\<Rightarrow> ('e,'a) FingerTreeStruc\" where\n  \"deepL [] m sf = (case (viewLn m) of None \\<Rightarrow> digitToTree sf |\n                                 (Some (a, m2)) \\<Rightarrow> deep (nodeToDigit a) m2 sf)\" |\n  \"deepL pr m sf = deep (nlistToDigit pr) m sf\""], ["", "fun deepR :: \"('e,'a::monoid_add) Digit \\<Rightarrow> ('e,'a) FingerTreeStruc \n    \\<Rightarrow> ('e,'a) Node list \\<Rightarrow> ('e,'a) FingerTreeStruc\" where\n  \"deepR pr m [] = (case (viewRn m) of None \\<Rightarrow> digitToTree pr |\n                                 (Some (a, m2)) \\<Rightarrow> deep pr m2 (nodeToDigit a))\" |\n  \"deepR pr m sf = deep pr m (nlistToDigit sf)\""], ["", "text \\<open>Splitting a list of nodes\\<close>"], ["", "fun splitNlist :: \"('a::monoid_add \\<Rightarrow> bool) \\<Rightarrow> 'a \\<Rightarrow> ('e,'a) Node list \n    \\<Rightarrow> ('e,'a) SplitDigit\" where\n  \"splitNlist p i [a]   = ([],a,[])\" |\n  \"splitNlist p i (a#b) = \n    (let i2 = (i + gmn a) in \n      (if (p i2) \n        then ([],a,b) \n        else \n         (let (l,x,r) = (splitNlist p i2 b) in ((a#l),x,r))))\""], ["", "text \\<open>Splitting a digit by converting it into a list of nodes\\<close>"], ["", "definition splitDigit :: \"('a::monoid_add \\<Rightarrow> bool) \\<Rightarrow> 'a \\<Rightarrow> ('e,'a) Digit \n    \\<Rightarrow> ('e,'a) SplitDigit\" where\n  \"splitDigit p i d = splitNlist p i (digitToNlist d)\""], ["", "text \\<open>Creating a finger tree from list of nodes\\<close>"], ["", "definition nlistToTree :: \"('e,'a::monoid_add) Node list \n    \\<Rightarrow> ('e,'a) FingerTreeStruc\" where \n  \"nlistToTree xs = lconsNlist xs Empty\""], ["", "text \\<open>Recursive splitting into a left and right tree and a center node\\<close>"], ["", "fun nsplitTree :: \"('a::monoid_add \\<Rightarrow> bool) \\<Rightarrow> 'a \\<Rightarrow> ('e,'a) FingerTreeStruc \n    \\<Rightarrow> ('e,'a) SplitTree\" where\n  \"nsplitTree p i Empty = (Empty, Tip undefined undefined, Empty)\" \n      \\<comment> \\<open>Making the function total\\<close> |\n  \"nsplitTree p i (Single ea) = (Empty,ea,Empty)\" |\n  \"nsplitTree p i (Deep _ pr m sf) = \n     (let \n       vpr = (i + gmd pr); \n       vm = (vpr + gmft m) \n      in \n        if (p vpr) then \n          (let (l,x,r) = (splitDigit p i pr) in \n            (nlistToTree l,x,deepL r m sf)) \n        else (if (p vm) then \n          (let (ml,xs,mr) = (nsplitTree p vpr m); \n            (l,x,r) = (splitDigit p (vpr + gmft ml) (nodeToDigit xs)) in\n              (deepR pr ml l,x,deepL r mr sf))\n        else \n          (let (l,x,r) = (splitDigit p vm sf) in \n            (deepR pr m l,x,nlistToTree r))    \n      ))\""], ["", "lemma nlistToTree_inv: \n  \"\\<forall> x \\<in> set nl. is_measured_node x \\<Longrightarrow> is_measured_ftree (nlistToTree nl)\"\n  \"\\<forall> x \\<in> set nl. is_leveln_node n x \\<Longrightarrow> is_leveln_ftree n (nlistToTree nl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set nl. is_measured_node x \\<Longrightarrow>\n     is_measured_ftree (nlistToTree nl)) &&&\n    (\\<forall>x\\<in>set nl. is_leveln_node n x \\<Longrightarrow>\n     is_leveln_ftree n (nlistToTree nl))", "by (unfold nlistToTree_def, induct nl, auto simp add: nlcons_invmeas)\n     (induct nl, auto simp add: nlcons_invlevel)"], ["", "lemma nlistToTree_list: \"toList (nlistToTree nl) = nlistToList nl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (nlistToTree nl) = nlistToList nl", "by (auto simp add: nlistToTree_def nlistListLCons)"], ["", "lemma deepL_inv:\n  assumes \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n  and \"is_leveln_digit n sf \\<and> is_measured_digit sf\"\n  and \"\\<forall> x \\<in> set pr. (is_measured_node x \\<and> is_leveln_node n x) \\<and> length pr \\<le> 4\"\n  shows  \"is_leveln_ftree n (deepL pr m sf) \\<and> is_measured_ftree (deepL pr m sf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_leveln_ftree n (deepL pr m sf) \\<and>\n    is_measured_ftree (deepL pr m sf)", "apply (insert assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n     is_leveln_digit n sf \\<and> is_measured_digit sf;\n     \\<forall>x\\<in>set pr.\n        (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n        length pr \\<le> 4\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n (deepL pr m sf) \\<and>\n                      is_measured_ftree (deepL pr m sf)", "apply (induct \"pr\" m sf rule: deepL.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        \\<forall>x\\<in>set [].\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length [] \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (deepL [] m sf) \\<and>\n                         is_measured_ftree (deepL [] m sf)\n 2. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (deepL (v # va) m sf) \\<and>\n                         is_measured_ftree (deepL (v # va) m sf)", "apply (simp split: viewnres_split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf\\<rbrakk>\n       \\<Longrightarrow> (viewLn m = None \\<longrightarrow>\n                          is_leveln_ftree n (digitToTree sf) \\<and>\n                          is_measured_ftree (digitToTree sf)) \\<and>\n                         (\\<forall>a b.\n                             viewLn m = Some (a, b) \\<longrightarrow>\n                             is_leveln_ftree n\n                              (deep (nodeToDigit a) b sf) \\<and>\n                             is_measured_ftree (deep (nodeToDigit a) b sf))\n 2. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (deepL (v # va) m sf) \\<and>\n                         is_measured_ftree (deepL (v # va) m sf)", "apply auto[1]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf; viewLn m = None\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (digitToTree sf)\n 2. \\<And>m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf; viewLn m = None\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree (digitToTree sf)\n 3. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (deep (nodeToDigit a) b sf)\n 4. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree (deep (nodeToDigit a) b sf)\n 5. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (deepL (v # va) m sf) \\<and>\n                         is_measured_ftree (deepL (v # va) m sf)", "apply (simp_all add: digitToTree_inv deep_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nodeToDigit a) \\<and>\n                         is_leveln_ftree (Suc n) b\n 2. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_digit (nodeToDigit a) \\<and>\n                         is_measured_ftree b\n 3. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nodeToDigit a) \\<and>\n                         is_leveln_ftree (Suc n) b\n 2. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_digit (nodeToDigit a) \\<and>\n                         is_measured_ftree b\n 3. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "fix m sf Node FingerTreeStruc"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nodeToDigit a) \\<and>\n                         is_leveln_ftree (Suc n) b\n 2. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_digit (nodeToDigit a) \\<and>\n                         is_measured_ftree b\n 3. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "assume \"is_leveln_ftree (Suc n) m\" \"is_measured_ftree m\" \n         \"is_leveln_digit n sf\" \"is_measured_digit sf\" \n         \"viewLn m = Some (Node, FingerTreeStruc)\""], ["proof (state)\nthis:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n sf\n  is_measured_digit sf\n  viewLn m = Some (Node, FingerTreeStruc)\n\ngoal (3 subgoals):\n 1. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nodeToDigit a) \\<and>\n                         is_leveln_ftree (Suc n) b\n 2. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_digit (nodeToDigit a) \\<and>\n                         is_measured_ftree b\n 3. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "thus \"is_leveln_digit n (nodeToDigit Node) \n        \\<and> is_leveln_ftree (Suc n) FingerTreeStruc\""], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n sf\n  is_measured_digit sf\n  viewLn m = Some (Node, FingerTreeStruc)\n\ngoal (1 subgoal):\n 1. is_leveln_digit n (nodeToDigit Node) \\<and>\n    is_leveln_ftree (Suc n) FingerTreeStruc", "by (simp add: viewLn_inv[of m \"Suc n\" Node FingerTreeStruc] nodeToDigit_inv)"], ["proof (state)\nthis:\n  is_leveln_digit n (nodeToDigit Node) \\<and>\n  is_leveln_ftree (Suc n) FingerTreeStruc\n\ngoal (2 subgoals):\n 1. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_digit (nodeToDigit a) \\<and>\n                         is_measured_ftree b\n 2. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_digit (nodeToDigit a) \\<and>\n                         is_measured_ftree b\n 2. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "fix m sf Node FingerTreeStruc"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_digit (nodeToDigit a) \\<and>\n                         is_measured_ftree b\n 2. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "assume assms1: \n    \"is_leveln_ftree (Suc n) m\" \"is_measured_ftree m\" \n    \"is_leveln_digit n sf\" \"is_measured_digit sf\" \n    \"viewLn m = Some (Node, FingerTreeStruc)\""], ["proof (state)\nthis:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n sf\n  is_measured_digit sf\n  viewLn m = Some (Node, FingerTreeStruc)\n\ngoal (2 subgoals):\n 1. \\<And>m sf a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_digit (nodeToDigit a) \\<and>\n                         is_measured_ftree b\n 2. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "thus \"is_measured_digit (nodeToDigit Node) \\<and> is_measured_ftree FingerTreeStruc\""], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n sf\n  is_measured_digit sf\n  viewLn m = Some (Node, FingerTreeStruc)\n\ngoal (1 subgoal):\n 1. is_measured_digit (nodeToDigit Node) \\<and>\n    is_measured_ftree FingerTreeStruc", "apply (auto simp only: viewLn_inv[of m \"Suc n\" Node FingerTreeStruc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n sf; is_measured_digit sf;\n     viewLn m = Some (Node, FingerTreeStruc)\\<rbrakk>\n    \\<Longrightarrow> is_measured_digit (nodeToDigit Node)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n sf; is_measured_digit sf;\n     viewLn m = Some (Node, FingerTreeStruc)\\<rbrakk>\n    \\<Longrightarrow> is_measured_digit (nodeToDigit Node)", "from assms1"], ["proof (chain)\npicking this:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n sf\n  is_measured_digit sf\n  viewLn m = Some (Node, FingerTreeStruc)", "have \"is_measured_node Node \\<and> is_leveln_node (Suc n) Node\""], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n sf\n  is_measured_digit sf\n  viewLn m = Some (Node, FingerTreeStruc)\n\ngoal (1 subgoal):\n 1. is_measured_node Node \\<and> is_leveln_node (Suc n) Node", "by (simp add: viewLn_inv[of m \"Suc n\" Node FingerTreeStruc])"], ["proof (state)\nthis:\n  is_measured_node Node \\<and> is_leveln_node (Suc n) Node\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n sf; is_measured_digit sf;\n     viewLn m = Some (Node, FingerTreeStruc)\\<rbrakk>\n    \\<Longrightarrow> is_measured_digit (nodeToDigit Node)", "thus \"is_measured_digit (nodeToDigit Node)\""], ["proof (prove)\nusing this:\n  is_measured_node Node \\<and> is_leveln_node (Suc n) Node\n\ngoal (1 subgoal):\n 1. is_measured_digit (nodeToDigit Node)", "by (auto simp add: nodeToDigit_inv)"], ["proof (state)\nthis:\n  is_measured_digit (nodeToDigit Node)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_measured_digit (nodeToDigit Node) \\<and>\n  is_measured_ftree FingerTreeStruc\n\ngoal (1 subgoal):\n 1. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "fix v va"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "assume \n    \"is_measured_node v \\<and> is_leveln_node n (v:: ('a,'b) Node) \\<and>\n    length  (va::('a, 'b) Node list) \\<le> 3 \\<and> \n    (\\<forall>x\\<in>set va. is_measured_node x \\<and> is_leveln_node n x \\<and> length va \\<le> 3)\""], ["proof (state)\nthis:\n  is_measured_node v \\<and>\n  is_leveln_node n v \\<and>\n  length va \\<le> 3 \\<and>\n  (\\<forall>x\\<in>set va.\n      is_measured_node x \\<and> is_leveln_node n x \\<and> length va \\<le> 3)\n\ngoal (1 subgoal):\n 1. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "thus \"is_leveln_digit n (nlistToDigit (v # va)) \n       \\<and> is_measured_digit (nlistToDigit (v # va))\""], ["proof (prove)\nusing this:\n  is_measured_node v \\<and>\n  is_leveln_node n v \\<and>\n  length va \\<le> 3 \\<and>\n  (\\<forall>x\\<in>set va.\n      is_measured_node x \\<and> is_leveln_node n x \\<and> length va \\<le> 3)\n\ngoal (1 subgoal):\n 1. is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n    is_measured_digit (nlistToDigit (v # va))", "by(cases \"v#va\" rule: nlistToDigit.cases,simp_all)"], ["proof (state)\nthis:\n  is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n  is_measured_digit (nlistToDigit (v # va))\n\ngoal:\nNo subgoals!", "qed"], ["", "(*corollary deepL_inv':\n  assumes \"is_leveln_ftree (Suc n) m\" \"is_measured_ftree m\"\n  and \"is_leveln_digit n sf\" \"is_measured_digit sf\"\n  and \"\\<forall> x \\<in> set pr. (is_measured_node x \\<and> is_leveln_node n x)\" \"length pr \\<le> 4\"\n  shows  \"is_leveln_ftree n (deepL pr m sf)\" \"is_measured_ftree (deepL pr m sf)\"\n  using assms deepL_inv by blast+\n*)"], ["", "lemma nlistToDigit_list:\n  assumes \"1 \\<le> length xs \\<and> length xs \\<le> 4\"\n  shows \"digitToList(nlistToDigit xs) = nlistToList xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digitToList (nlistToDigit xs) = nlistToList xs", "by (insert assms, cases xs rule: nlistToDigit.cases,auto)"], ["", "lemma deepL_list:\n  assumes \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n  and \"is_leveln_digit n sf \\<and> is_measured_digit sf\"\n  and \"\\<forall> x \\<in> set pr. (is_measured_node x \\<and> is_leveln_node n x) \\<and> length pr \\<le> 4\"\n  shows \"toList (deepL pr m sf) = nlistToList pr @ toList m @ digitToList sf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (deepL pr m sf) = nlistToList pr @ toList m @ digitToList sf", "proof (insert assms, induct \"pr\" m sf rule: deepL.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        \\<forall>x\\<in>set [].\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length [] \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepL [] m sf) =\n                         nlistToList [] @ toList m @ digitToList sf\n 2. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepL (v # va) m sf) =\n                         nlistToList (v # va) @ toList m @ digitToList sf", "case (1 m sf)"], ["proof (state)\nthis:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<forall>x\\<in>set [].\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and> length [] \\<le> 4\n\ngoal (2 subgoals):\n 1. \\<And>m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        \\<forall>x\\<in>set [].\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length [] \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepL [] m sf) =\n                         nlistToList [] @ toList m @ digitToList sf\n 2. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepL (v # va) m sf) =\n                         nlistToList (v # va) @ toList m @ digitToList sf", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<forall>x\\<in>set [].\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and> length [] \\<le> 4\n\ngoal (1 subgoal):\n 1. toList (deepL [] m sf) = nlistToList [] @ toList m @ digitToList sf", "proof (auto split: viewnres_split simp add: deep_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n sf; is_measured_digit sf; viewLn m = None\\<rbrakk>\n    \\<Longrightarrow> toList (digitToTree sf) = toList m @ digitToList sf\n 2. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> digitToList (nodeToDigit a) @ toList b = toList m", "assume \"viewLn m = None\""], ["proof (state)\nthis:\n  viewLn m = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n sf; is_measured_digit sf; viewLn m = None\\<rbrakk>\n    \\<Longrightarrow> toList (digitToTree sf) = toList m @ digitToList sf\n 2. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> digitToList (nodeToDigit a) @ toList b = toList m", "hence \"m = Empty\""], ["proof (prove)\nusing this:\n  viewLn m = None\n\ngoal (1 subgoal):\n 1. m = Empty", "by (metis viewLn_empty)"], ["proof (state)\nthis:\n  m = Empty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n sf; is_measured_digit sf; viewLn m = None\\<rbrakk>\n    \\<Longrightarrow> toList (digitToTree sf) = toList m @ digitToList sf\n 2. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> digitToList (nodeToDigit a) @ toList b = toList m", "hence \"toList m = []\""], ["proof (prove)\nusing this:\n  m = Empty\n\ngoal (1 subgoal):\n 1. toList m = []", "by simp"], ["proof (state)\nthis:\n  toList m = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n sf; is_measured_digit sf; viewLn m = None\\<rbrakk>\n    \\<Longrightarrow> toList (digitToTree sf) = toList m @ digitToList sf\n 2. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> digitToList (nodeToDigit a) @ toList b = toList m", "thus \"toList (digitToTree sf) = toList m @ digitToList sf\""], ["proof (prove)\nusing this:\n  toList m = []\n\ngoal (1 subgoal):\n 1. toList (digitToTree sf) = toList m @ digitToList sf", "by (simp add:digitToTree_list)"], ["proof (state)\nthis:\n  toList (digitToTree sf) = toList m @ digitToList sf\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> digitToList (nodeToDigit a) @ toList b = toList m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> digitToList (nodeToDigit a) @ toList b = toList m", "fix nd t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> digitToList (nodeToDigit a) @ toList b = toList m", "assume \"viewLn m = Some (nd, t)\" \n      \"is_leveln_ftree (Suc n) m\" \"is_measured_ftree m\""], ["proof (state)\nthis:\n  viewLn m = Some (nd, t)\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> digitToList (nodeToDigit a) @ toList b = toList m", "hence \"nodeToList nd @ toList t = toList m\""], ["proof (prove)\nusing this:\n  viewLn m = Some (nd, t)\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n\ngoal (1 subgoal):\n 1. nodeToList nd @ toList t = toList m", "by (metis viewLn_list)"], ["proof (state)\nthis:\n  nodeToList nd @ toList t = toList m\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n sf; is_measured_digit sf;\n        viewLn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> digitToList (nodeToDigit a) @ toList b = toList m", "thus \"digitToList (nodeToDigit nd) @ toList t = toList m\""], ["proof (prove)\nusing this:\n  nodeToList nd @ toList t = toList m\n\ngoal (1 subgoal):\n 1. digitToList (nodeToDigit nd) @ toList t = toList m", "by (simp add: nodeToDigit_list)"], ["proof (state)\nthis:\n  digitToList (nodeToDigit nd) @ toList t = toList m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  toList (deepL [] m sf) = nlistToList [] @ toList m @ digitToList sf\n\ngoal (1 subgoal):\n 1. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepL (v # va) m sf) =\n                         nlistToList (v # va) @ toList m @ digitToList sf", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepL (v # va) m sf) =\n                         nlistToList (v # va) @ toList m @ digitToList sf", "case (2 v va m sf)"], ["proof (state)\nthis:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<forall>x\\<in>set (v # va).\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length (v # va) \\<le> 4\n\ngoal (1 subgoal):\n 1. \\<And>v va m sf.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n sf \\<and> is_measured_digit sf;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepL (v # va) m sf) =\n                         nlistToList (v # va) @ toList m @ digitToList sf", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<forall>x\\<in>set (v # va).\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length (v # va) \\<le> 4\n\ngoal (1 subgoal):\n 1. toList (deepL (v # va) m sf) =\n    nlistToList (v # va) @ toList m @ digitToList sf", "apply (unfold deepL.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n     is_leveln_digit n sf \\<and> is_measured_digit sf;\n     \\<forall>x\\<in>set (v # va).\n        (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n        length (v # va) \\<le> 4\\<rbrakk>\n    \\<Longrightarrow> toList (deep (nlistToDigit (v # va)) m sf) =\n                      nlistToList (v # va) @ toList m @ digitToList sf", "apply (simp add: deep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n     is_leveln_digit n sf \\<and> is_measured_digit sf;\n     is_measured_node v \\<and>\n     is_leveln_node n v \\<and>\n     length va \\<le> 3 \\<and>\n     (\\<forall>x\\<in>set va.\n         is_measured_node x \\<and>\n         is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n    \\<Longrightarrow> digitToList (nlistToDigit (v # va)) =\n                      nodeToList v @ nlistToList va", "apply (simp add: nlistToDigit_list)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  toList (deepL (v # va) m sf) =\n  nlistToList (v # va) @ toList m @ digitToList sf\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma deepR_inv:\n  assumes \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n  and \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n  and \"\\<forall> x \\<in> set sf. (is_measured_node x \\<and> is_leveln_node n x) \\<and> length sf \\<le> 4\"\n  shows \"is_leveln_ftree n (deepR pr m sf) \\<and> is_measured_ftree (deepR pr m sf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_leveln_ftree n (deepR pr m sf) \\<and>\n    is_measured_ftree (deepR pr m sf)", "apply (insert assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n     is_leveln_digit n pr \\<and> is_measured_digit pr;\n     \\<forall>x\\<in>set sf.\n        (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n        length sf \\<le> 4\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n (deepR pr m sf) \\<and>\n                      is_measured_ftree (deepR pr m sf)", "apply (induct \"pr\" m sf rule: deepR.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pr m.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        \\<forall>x\\<in>set [].\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length [] \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (deepR pr m []) \\<and>\n                         is_measured_ftree (deepR pr m [])\n 2. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (deepR pr m (v # va)) \\<and>\n                         is_measured_ftree (deepR pr m (v # va))", "apply (simp split: viewnres_split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pr m.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr\\<rbrakk>\n       \\<Longrightarrow> (viewRn m = None \\<longrightarrow>\n                          is_leveln_ftree n (digitToTree pr) \\<and>\n                          is_measured_ftree (digitToTree pr)) \\<and>\n                         (\\<forall>a b.\n                             viewRn m = Some (a, b) \\<longrightarrow>\n                             is_leveln_ftree n\n                              (deep pr b (nodeToDigit a)) \\<and>\n                             is_measured_ftree (deep pr b (nodeToDigit a)))\n 2. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (deepR pr m (v # va)) \\<and>\n                         is_measured_ftree (deepR pr m (v # va))", "apply auto[1]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>pr m.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr; viewRn m = None\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (digitToTree pr)\n 2. \\<And>pr m.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr; viewRn m = None\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree (digitToTree pr)\n 3. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (deep pr b (nodeToDigit a))\n 4. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree (deep pr b (nodeToDigit a))\n 5. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n (deepR pr m (v # va)) \\<and>\n                         is_measured_ftree (deepR pr m (v # va))", "apply (simp_all add: digitToTree_inv deep_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nodeToDigit a) \\<and>\n                         is_leveln_ftree (Suc n) b\n 2. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree b \\<and>\n                         is_measured_digit (nodeToDigit a)\n 3. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nodeToDigit a) \\<and>\n                         is_leveln_ftree (Suc n) b\n 2. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree b \\<and>\n                         is_measured_digit (nodeToDigit a)\n 3. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "fix m \"pr\" Node FingerTreeStruc"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nodeToDigit a) \\<and>\n                         is_leveln_ftree (Suc n) b\n 2. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree b \\<and>\n                         is_measured_digit (nodeToDigit a)\n 3. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "assume \"is_leveln_ftree (Suc n) m\" \"is_measured_ftree m\" \n         \"is_leveln_digit n pr\" \"is_measured_digit pr\"\n         \"viewRn m = Some (Node, FingerTreeStruc)\""], ["proof (state)\nthis:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n pr\n  is_measured_digit pr\n  viewRn m = Some (Node, FingerTreeStruc)\n\ngoal (3 subgoals):\n 1. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nodeToDigit a) \\<and>\n                         is_leveln_ftree (Suc n) b\n 2. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree b \\<and>\n                         is_measured_digit (nodeToDigit a)\n 3. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "thus \n    \"is_leveln_digit n (nodeToDigit Node) \n    \\<and> is_leveln_ftree (Suc n) FingerTreeStruc\""], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n pr\n  is_measured_digit pr\n  viewRn m = Some (Node, FingerTreeStruc)\n\ngoal (1 subgoal):\n 1. is_leveln_digit n (nodeToDigit Node) \\<and>\n    is_leveln_ftree (Suc n) FingerTreeStruc", "by (simp add: viewRn_inv[of m \"Suc n\" Node FingerTreeStruc] nodeToDigit_inv)"], ["proof (state)\nthis:\n  is_leveln_digit n (nodeToDigit Node) \\<and>\n  is_leveln_ftree (Suc n) FingerTreeStruc\n\ngoal (2 subgoals):\n 1. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree b \\<and>\n                         is_measured_digit (nodeToDigit a)\n 2. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree b \\<and>\n                         is_measured_digit (nodeToDigit a)\n 2. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "fix m \"pr\" Node FingerTreeStruc"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree b \\<and>\n                         is_measured_digit (nodeToDigit a)\n 2. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "assume assms1: \n    \"is_leveln_ftree (Suc n) m\" \"is_measured_ftree m\" \n    \"is_leveln_digit n pr\" \"is_measured_digit pr\" \n    \"viewRn m = Some (Node, FingerTreeStruc)\""], ["proof (state)\nthis:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n pr\n  is_measured_digit pr\n  viewRn m = Some (Node, FingerTreeStruc)\n\ngoal (2 subgoals):\n 1. \\<And>pr m a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> is_measured_ftree b \\<and>\n                         is_measured_digit (nodeToDigit a)\n 2. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "thus \"is_measured_ftree FingerTreeStruc \\<and> is_measured_digit (nodeToDigit Node)\""], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n pr\n  is_measured_digit pr\n  viewRn m = Some (Node, FingerTreeStruc)\n\ngoal (1 subgoal):\n 1. is_measured_ftree FingerTreeStruc \\<and>\n    is_measured_digit (nodeToDigit Node)", "apply (auto simp only: viewRn_inv[of m \"Suc n\" Node FingerTreeStruc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n pr; is_measured_digit pr;\n     viewRn m = Some (Node, FingerTreeStruc)\\<rbrakk>\n    \\<Longrightarrow> is_measured_digit (nodeToDigit Node)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n pr; is_measured_digit pr;\n     viewRn m = Some (Node, FingerTreeStruc)\\<rbrakk>\n    \\<Longrightarrow> is_measured_digit (nodeToDigit Node)", "from assms1"], ["proof (chain)\npicking this:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n pr\n  is_measured_digit pr\n  viewRn m = Some (Node, FingerTreeStruc)", "have \"is_measured_node Node \\<and> is_leveln_node (Suc n) Node\""], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n  is_leveln_digit n pr\n  is_measured_digit pr\n  viewRn m = Some (Node, FingerTreeStruc)\n\ngoal (1 subgoal):\n 1. is_measured_node Node \\<and> is_leveln_node (Suc n) Node", "by (simp add: viewRn_inv[of m \"Suc n\" Node FingerTreeStruc])"], ["proof (state)\nthis:\n  is_measured_node Node \\<and> is_leveln_node (Suc n) Node\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n pr; is_measured_digit pr;\n     viewRn m = Some (Node, FingerTreeStruc)\\<rbrakk>\n    \\<Longrightarrow> is_measured_digit (nodeToDigit Node)", "thus \"is_measured_digit (nodeToDigit Node)\""], ["proof (prove)\nusing this:\n  is_measured_node Node \\<and> is_leveln_node (Suc n) Node\n\ngoal (1 subgoal):\n 1. is_measured_digit (nodeToDigit Node)", "by (auto simp add: nodeToDigit_inv)"], ["proof (state)\nthis:\n  is_measured_digit (nodeToDigit Node)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_measured_ftree FingerTreeStruc \\<and>\n  is_measured_digit (nodeToDigit Node)\n\ngoal (1 subgoal):\n 1. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "fix v va"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "assume \n    \"is_measured_node v \\<and> is_leveln_node n (v:: ('a,'b) Node) \\<and>\n    length  (va::('a, 'b) Node list) \\<le> 3 \\<and> \n    (\\<forall>x\\<in>set va. is_measured_node x \\<and> is_leveln_node n x \\<and> length va \\<le> 3)\""], ["proof (state)\nthis:\n  is_measured_node v \\<and>\n  is_leveln_node n v \\<and>\n  length va \\<le> 3 \\<and>\n  (\\<forall>x\\<in>set va.\n      is_measured_node x \\<and> is_leveln_node n x \\<and> length va \\<le> 3)\n\ngoal (1 subgoal):\n 1. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        is_measured_node v \\<and>\n        is_leveln_node n v \\<and>\n        length va \\<le> 3 \\<and>\n        (\\<forall>x\\<in>set va.\n            is_measured_node x \\<and>\n            is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n                         is_measured_digit (nlistToDigit (v # va))", "thus \"is_leveln_digit n (nlistToDigit (v # va)) \\<and> \n        is_measured_digit (nlistToDigit (v # va))\""], ["proof (prove)\nusing this:\n  is_measured_node v \\<and>\n  is_leveln_node n v \\<and>\n  length va \\<le> 3 \\<and>\n  (\\<forall>x\\<in>set va.\n      is_measured_node x \\<and> is_leveln_node n x \\<and> length va \\<le> 3)\n\ngoal (1 subgoal):\n 1. is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n    is_measured_digit (nlistToDigit (v # va))", "by(cases \"v#va\" rule: nlistToDigit.cases,simp_all)"], ["proof (state)\nthis:\n  is_leveln_digit n (nlistToDigit (v # va)) \\<and>\n  is_measured_digit (nlistToDigit (v # va))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma deepR_list:\n  assumes \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n  and \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n  and \"\\<forall> x \\<in> set sf. (is_measured_node x \\<and> is_leveln_node n x) \\<and> length sf \\<le> 4\"\n  shows \"toList (deepR pr m sf) = digitToList pr @ toList m @ nlistToList sf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (deepR pr m sf) = digitToList pr @ toList m @ nlistToList sf", "proof (insert assms, induct \"pr\" m sf rule: deepR.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>pr m.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        \\<forall>x\\<in>set [].\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length [] \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepR pr m []) =\n                         digitToList pr @ toList m @ nlistToList []\n 2. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepR pr m (v # va)) =\n                         digitToList pr @ toList m @ nlistToList (v # va)", "case (1 \"pr\" m)"], ["proof (state)\nthis:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  \\<forall>x\\<in>set [].\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and> length [] \\<le> 4\n\ngoal (2 subgoals):\n 1. \\<And>pr m.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        \\<forall>x\\<in>set [].\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length [] \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepR pr m []) =\n                         digitToList pr @ toList m @ nlistToList []\n 2. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepR pr m (v # va)) =\n                         digitToList pr @ toList m @ nlistToList (v # va)", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  \\<forall>x\\<in>set [].\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and> length [] \\<le> 4\n\ngoal (1 subgoal):\n 1. toList (deepR pr m []) = digitToList pr @ toList m @ nlistToList []", "proof (auto split: viewnres_split simp add: deep_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n pr; is_measured_digit pr; viewRn m = None\\<rbrakk>\n    \\<Longrightarrow> toList (digitToTree pr) = digitToList pr @ toList m\n 2. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> toList b @ digitToList (nodeToDigit a) = toList m", "assume \"viewRn m = None\""], ["proof (state)\nthis:\n  viewRn m = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n pr; is_measured_digit pr; viewRn m = None\\<rbrakk>\n    \\<Longrightarrow> toList (digitToTree pr) = digitToList pr @ toList m\n 2. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> toList b @ digitToList (nodeToDigit a) = toList m", "hence \"m = Empty\""], ["proof (prove)\nusing this:\n  viewRn m = None\n\ngoal (1 subgoal):\n 1. m = Empty", "by (metis viewRn_empty)"], ["proof (state)\nthis:\n  m = Empty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n pr; is_measured_digit pr; viewRn m = None\\<rbrakk>\n    \\<Longrightarrow> toList (digitToTree pr) = digitToList pr @ toList m\n 2. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> toList b @ digitToList (nodeToDigit a) = toList m", "hence \"toList m = []\""], ["proof (prove)\nusing this:\n  m = Empty\n\ngoal (1 subgoal):\n 1. toList m = []", "by simp"], ["proof (state)\nthis:\n  toList m = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n     is_leveln_digit n pr; is_measured_digit pr; viewRn m = None\\<rbrakk>\n    \\<Longrightarrow> toList (digitToTree pr) = digitToList pr @ toList m\n 2. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> toList b @ digitToList (nodeToDigit a) = toList m", "thus \"toList (digitToTree pr) = digitToList pr @ toList m\""], ["proof (prove)\nusing this:\n  toList m = []\n\ngoal (1 subgoal):\n 1. toList (digitToTree pr) = digitToList pr @ toList m", "by (simp add:digitToTree_list)"], ["proof (state)\nthis:\n  toList (digitToTree pr) = digitToList pr @ toList m\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> toList b @ digitToList (nodeToDigit a) = toList m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> toList b @ digitToList (nodeToDigit a) = toList m", "fix nd t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> toList b @ digitToList (nodeToDigit a) = toList m", "assume \"viewRn m = Some (nd, t)\" \"is_leveln_ftree (Suc n) m\" \n           \"is_measured_ftree m\""], ["proof (state)\nthis:\n  viewRn m = Some (nd, t)\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> toList b @ digitToList (nodeToDigit a) = toList m", "hence \"toList t @ nodeToList nd = toList m\""], ["proof (prove)\nusing this:\n  viewRn m = Some (nd, t)\n  is_leveln_ftree (Suc n) m\n  is_measured_ftree m\n\ngoal (1 subgoal):\n 1. toList t @ nodeToList nd = toList m", "by (metis viewRn_list)"], ["proof (state)\nthis:\n  toList t @ nodeToList nd = toList m\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>is_leveln_ftree (Suc n) m; is_measured_ftree m;\n        is_leveln_digit n pr; is_measured_digit pr;\n        viewRn m = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> toList b @ digitToList (nodeToDigit a) = toList m", "thus \"toList t @ digitToList (nodeToDigit nd) = toList m\""], ["proof (prove)\nusing this:\n  toList t @ nodeToList nd = toList m\n\ngoal (1 subgoal):\n 1. toList t @ digitToList (nodeToDigit nd) = toList m", "by (simp add: nodeToDigit_list)"], ["proof (state)\nthis:\n  toList t @ digitToList (nodeToDigit nd) = toList m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  toList (deepR pr m []) = digitToList pr @ toList m @ nlistToList []\n\ngoal (1 subgoal):\n 1. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepR pr m (v # va)) =\n                         digitToList pr @ toList m @ nlistToList (v # va)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepR pr m (v # va)) =\n                         digitToList pr @ toList m @ nlistToList (v # va)", "case (2 \"pr\" m v va)"], ["proof (state)\nthis:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  \\<forall>x\\<in>set (v # va).\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length (v # va) \\<le> 4\n\ngoal (1 subgoal):\n 1. \\<And>pr m v va.\n       \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n        is_leveln_digit n pr \\<and> is_measured_digit pr;\n        \\<forall>x\\<in>set (v # va).\n           (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n           length (v # va) \\<le> 4\\<rbrakk>\n       \\<Longrightarrow> toList (deepR pr m (v # va)) =\n                         digitToList pr @ toList m @ nlistToList (v # va)", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  \\<forall>x\\<in>set (v # va).\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length (v # va) \\<le> 4\n\ngoal (1 subgoal):\n 1. toList (deepR pr m (v # va)) =\n    digitToList pr @ toList m @ nlistToList (v # va)", "apply (unfold deepR.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n     is_leveln_digit n pr \\<and> is_measured_digit pr;\n     \\<forall>x\\<in>set (v # va).\n        (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n        length (v # va) \\<le> 4\\<rbrakk>\n    \\<Longrightarrow> toList (deep pr m (nlistToDigit (v # va))) =\n                      digitToList pr @ toList m @ nlistToList (v # va)", "apply (simp add: deep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m;\n     is_leveln_digit n pr \\<and> is_measured_digit pr;\n     is_measured_node v \\<and>\n     is_leveln_node n v \\<and>\n     length va \\<le> 3 \\<and>\n     (\\<forall>x\\<in>set va.\n         is_measured_node x \\<and>\n         is_leveln_node n x \\<and> length va \\<le> 3)\\<rbrakk>\n    \\<Longrightarrow> digitToList (nlistToDigit (v # va)) =\n                      nodeToList v @ nlistToList va", "apply (simp add: nlistToDigit_list)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  toList (deepR pr m (v # va)) =\n  digitToList pr @ toList m @ nlistToList (v # va)\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec gmnl:: \"('e, 'a::monoid_add) Node list \\<Rightarrow> 'a\" where\n\"gmnl [] = 0\"|\n\"gmnl (x#xs) = gmn x + gmnl xs\""], ["", "lemma gmnl_correct:\n  assumes \"\\<forall> x \\<in> set xs. is_measured_node x\"\n  shows  \"gmnl xs = sum_list (map snd (nlistToList xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmnl xs = sum_list (map snd (nlistToList xs))", "by (insert assms, induct xs) (auto simp add: add.assoc gmn_correct)"], ["", "lemma splitNlist_correct:\" \\<lbrakk>\n  \\<And>(a::'a) (b::'a). p a \\<Longrightarrow> p (a + b);\n  \\<not> p i;\n  p (i + gmnl (nl ::('e,'a::monoid_add) Node list));\n  splitNlist p i nl = (l, n, r)\n  \\<rbrakk> \\<Longrightarrow>  \n  \\<not> p (i + (gmnl l))\n  \\<and>\n  p (i + (gmnl l) + (gmn n))\n  \\<and>\n  nl = l @ n # r\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmnl nl); splitNlist p i nl = (l, n, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn n) \\<and> nl = l @ n # r", "proof (induct p i nl arbitrary: l n r rule: splitNlist.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p i a l n r.\n       \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmnl [a]); splitNlist p i [a] = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                         p (i + gmnl l + gmn n) \\<and> [a] = l @ n # r\n 2. \\<And>p i a v va l n r.\n       \\<lbrakk>\\<And>x l n r.\n                   \\<lbrakk>x = i + gmn a; \\<not> p x;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmnl (v # va));\n                    splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n                   \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                                     p (x + gmnl l + gmn n) \\<and>\n                                     v # va = l @ n # r;\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmnl (a # v # va));\n        splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                         p (i + gmnl l + gmn n) \\<and>\n                         a # v # va = l @ n # r\n 3. \\<And>a b l n r.\n       \\<lbrakk>\\<And>aa b. a aa \\<Longrightarrow> a (aa + b); \\<not> a b;\n        a (b + gmnl []); splitNlist a b [] = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> a (b + gmnl l) \\<and>\n                         a (b + gmnl l + gmn n) \\<and> [] = l @ n # r", "case 1"], ["proof (state)\nthis:\n  p_ ?a \\<Longrightarrow> p_ (?a + ?b)\n  \\<not> p_ i_\n  p_ (i_ + gmnl [a_])\n  splitNlist p_ i_ [a_] = (l, n, r)\n\ngoal (3 subgoals):\n 1. \\<And>p i a l n r.\n       \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmnl [a]); splitNlist p i [a] = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                         p (i + gmnl l + gmn n) \\<and> [a] = l @ n # r\n 2. \\<And>p i a v va l n r.\n       \\<lbrakk>\\<And>x l n r.\n                   \\<lbrakk>x = i + gmn a; \\<not> p x;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmnl (v # va));\n                    splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n                   \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                                     p (x + gmnl l + gmn n) \\<and>\n                                     v # va = l @ n # r;\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmnl (a # v # va));\n        splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                         p (i + gmnl l + gmn n) \\<and>\n                         a # v # va = l @ n # r\n 3. \\<And>a b l n r.\n       \\<lbrakk>\\<And>aa b. a aa \\<Longrightarrow> a (aa + b); \\<not> a b;\n        a (b + gmnl []); splitNlist a b [] = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> a (b + gmnl l) \\<and>\n                         a (b + gmnl l + gmn n) \\<and> [] = l @ n # r", "thus ?case"], ["proof (prove)\nusing this:\n  p_ ?a \\<Longrightarrow> p_ (?a + ?b)\n  \\<not> p_ i_\n  p_ (i_ + gmnl [a_])\n  splitNlist p_ i_ [a_] = (l, n, r)\n\ngoal (1 subgoal):\n 1. \\<not> p_ (i_ + gmnl l) \\<and>\n    p_ (i_ + gmnl l + gmn n) \\<and> [a_] = l @ n # r", "by simp"], ["proof (state)\nthis:\n  \\<not> p_ (i_ + gmnl l) \\<and>\n  p_ (i_ + gmnl l + gmn n) \\<and> [a_] = l @ n # r\n\ngoal (2 subgoals):\n 1. \\<And>p i a v va l n r.\n       \\<lbrakk>\\<And>x l n r.\n                   \\<lbrakk>x = i + gmn a; \\<not> p x;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmnl (v # va));\n                    splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n                   \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                                     p (x + gmnl l + gmn n) \\<and>\n                                     v # va = l @ n # r;\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmnl (a # v # va));\n        splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                         p (i + gmnl l + gmn n) \\<and>\n                         a # v # va = l @ n # r\n 2. \\<And>a b l n r.\n       \\<lbrakk>\\<And>aa b. a aa \\<Longrightarrow> a (aa + b); \\<not> a b;\n        a (b + gmnl []); splitNlist a b [] = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> a (b + gmnl l) \\<and>\n                         a (b + gmnl l + gmn n) \\<and> [] = l @ n # r", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p i a v va l n r.\n       \\<lbrakk>\\<And>x l n r.\n                   \\<lbrakk>x = i + gmn a; \\<not> p x;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmnl (v # va));\n                    splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n                   \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                                     p (x + gmnl l + gmn n) \\<and>\n                                     v # va = l @ n # r;\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmnl (a # v # va));\n        splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                         p (i + gmnl l + gmn n) \\<and>\n                         a # v # va = l @ n # r\n 2. \\<And>a b l n r.\n       \\<lbrakk>\\<And>aa b. a aa \\<Longrightarrow> a (aa + b); \\<not> a b;\n        a (b + gmnl []); splitNlist a b [] = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> a (b + gmnl l) \\<and>\n                         a (b + gmnl l + gmn n) \\<and> [] = l @ n # r", "case (2 p i a v va l n r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = i + gmn a; \\<not> p ?x;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x;\n   p (?x + gmnl (v # va)); splitNlist p ?x (v # va) = (?l, ?n, ?r)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (?x + gmnl ?l) \\<and>\n                    p (?x + gmnl ?l + gmn ?n) \\<and> v # va = ?l @ ?n # ?r\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmnl (a # v # va))\n  splitNlist p i (a # v # va) = (l, n, r)\n\ngoal (2 subgoals):\n 1. \\<And>p i a v va l n r.\n       \\<lbrakk>\\<And>x l n r.\n                   \\<lbrakk>x = i + gmn a; \\<not> p x;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmnl (v # va));\n                    splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n                   \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                                     p (x + gmnl l + gmn n) \\<and>\n                                     v # va = l @ n # r;\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmnl (a # v # va));\n        splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                         p (i + gmnl l + gmn n) \\<and>\n                         a # v # va = l @ n # r\n 2. \\<And>a b l n r.\n       \\<lbrakk>\\<And>aa b. a aa \\<Longrightarrow> a (aa + b); \\<not> a b;\n        a (b + gmnl []); splitNlist a b [] = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> a (b + gmnl l) \\<and>\n                         a (b + gmnl l + gmn n) \\<and> [] = l @ n # r", "note IV = this"], ["proof (state)\nthis:\n  \\<lbrakk>?x = i + gmn a; \\<not> p ?x;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x;\n   p (?x + gmnl (v # va)); splitNlist p ?x (v # va) = (?l, ?n, ?r)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (?x + gmnl ?l) \\<and>\n                    p (?x + gmnl ?l + gmn ?n) \\<and> v # va = ?l @ ?n # ?r\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmnl (a # v # va))\n  splitNlist p i (a # v # va) = (l, n, r)\n\ngoal (2 subgoals):\n 1. \\<And>p i a v va l n r.\n       \\<lbrakk>\\<And>x l n r.\n                   \\<lbrakk>x = i + gmn a; \\<not> p x;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmnl (v # va));\n                    splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n                   \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                                     p (x + gmnl l + gmn n) \\<and>\n                                     v # va = l @ n # r;\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmnl (a # v # va));\n        splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                         p (i + gmnl l + gmn n) \\<and>\n                         a # v # va = l @ n # r\n 2. \\<And>a b l n r.\n       \\<lbrakk>\\<And>aa b. a aa \\<Longrightarrow> a (aa + b); \\<not> a b;\n        a (b + gmnl []); splitNlist a b [] = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> a (b + gmnl l) \\<and>\n                         a (b + gmnl l + gmn n) \\<and> [] = l @ n # r", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "proof (cases \"p (i + (gmn a))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p (i + gmn a) \\<Longrightarrow>\n    \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r\n 2. \\<not> p (i + gmn a) \\<Longrightarrow>\n    \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "case True"], ["proof (state)\nthis:\n  p (i + gmn a)\n\ngoal (2 subgoals):\n 1. p (i + gmn a) \\<Longrightarrow>\n    \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r\n 2. \\<not> p (i + gmn a) \\<Longrightarrow>\n    \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "with IV"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x = i + gmn a; \\<not> p ?x;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x;\n   p (?x + gmnl (v # va)); splitNlist p ?x (v # va) = (?l, ?n, ?r)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (?x + gmnl ?l) \\<and>\n                    p (?x + gmnl ?l + gmn ?n) \\<and> v # va = ?l @ ?n # ?r\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmnl (a # v # va))\n  splitNlist p i (a # v # va) = (l, n, r)\n  p (i + gmn a)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x = i + gmn a; \\<not> p ?x;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x;\n   p (?x + gmnl (v # va)); splitNlist p ?x (v # va) = (?l, ?n, ?r)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (?x + gmnl ?l) \\<and>\n                    p (?x + gmnl ?l + gmn ?n) \\<and> v # va = ?l @ ?n # ?r\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmnl (a # v # va))\n  splitNlist p i (a # v # va) = (l, n, r)\n  p (i + gmn a)\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "by simp"], ["proof (state)\nthis:\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmn a) \\<Longrightarrow>\n    \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> p (i + gmn a) \\<Longrightarrow>\n    \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "case False"], ["proof (state)\nthis:\n  \\<not> p (i + gmn a)\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmn a) \\<Longrightarrow>\n    \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "note IV2 = this IV"], ["proof (state)\nthis:\n  \\<not> p (i + gmn a)\n  \\<lbrakk>?x = i + gmn a; \\<not> p ?x;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x;\n   p (?x + gmnl (v # va)); splitNlist p ?x (v # va) = (?l, ?n, ?r)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (?x + gmnl ?l) \\<and>\n                    p (?x + gmnl ?l + gmn ?n) \\<and> v # va = ?l @ ?n # ?r\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmnl (a # v # va))\n  splitNlist p i (a # v # va) = (l, n, r)\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmn a) \\<Longrightarrow>\n    \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> p (i + gmn a)\n  \\<lbrakk>?x = i + gmn a; \\<not> p ?x;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x;\n   p (?x + gmnl (v # va)); splitNlist p ?x (v # va) = (?l, ?n, ?r)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (?x + gmnl ?l) \\<and>\n                    p (?x + gmnl ?l + gmn ?n) \\<and> v # va = ?l @ ?n # ?r\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmnl (a # v # va))\n  splitNlist p i (a # v # va) = (l, n, r)\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmn a);\n     \\<And>x l n r.\n        \\<lbrakk>x = i + gmn a; \\<not> p x;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmnl (v # va)); splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n        \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                          p (x + gmnl l + gmn n) \\<and> v # va = l @ n # r;\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmnl (a # v # va));\n     splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "obtain l1 n1 r1 where \n        v1[simp]: \"splitNlist p (i + gmn a) (v # va) = (l1, n1, r1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l1 n1 r1.\n        splitNlist p (i + gmn a) (v # va) = (l1, n1, r1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"splitNlist p (i + gmn a) (v # va)\", blast)"], ["proof (state)\nthis:\n  splitNlist p (i + gmn a) (v # va) = (l1, n1, r1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmn a);\n     \\<And>x l n r.\n        \\<lbrakk>x = i + gmn a; \\<not> p x;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmnl (v # va)); splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n        \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                          p (x + gmnl l + gmn n) \\<and> v # va = l @ n # r;\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmnl (a # v # va));\n     splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "note miv = IV2(2)[of \"i + gmn a\" l1 n1 r1]"], ["proof (state)\nthis:\n  \\<lbrakk>i + gmn a = i + gmn a; \\<not> p (i + gmn a);\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p (i + gmn a);\n   p (i + gmn a + gmnl (v # va));\n   splitNlist p (i + gmn a) (v # va) = (l1, n1, r1)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (i + gmn a + gmnl l1) \\<and>\n                    p (i + gmn a + gmnl l1 + gmn n1) \\<and>\n                    v # va = l1 @ n1 # r1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmn a);\n     \\<And>x l n r.\n        \\<lbrakk>x = i + gmn a; \\<not> p x;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmnl (v # va)); splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n        \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                          p (x + gmnl l + gmn n) \\<and> v # va = l @ n # r;\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmnl (a # v # va));\n     splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "have v2:\"p (i + gmn a + gmnl (v # va))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p (i + gmn a + gmnl (v # va))", "using IV2(5)"], ["proof (prove)\nusing this:\n  p (i + gmnl (a # v # va))\n\ngoal (1 subgoal):\n 1. p (i + gmn a + gmnl (v # va))", "by (simp add: add.assoc)"], ["proof (state)\nthis:\n  p (i + gmn a + gmnl (v # va))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmn a);\n     \\<And>x l n r.\n        \\<lbrakk>x = i + gmn a; \\<not> p x;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmnl (v # va)); splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n        \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                          p (x + gmnl l + gmn n) \\<and> v # va = l @ n # r;\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmnl (a # v # va));\n     splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "note miv2 =  miv[OF _ IV2(1) IV2(3) IV2(1)  v2 v1]"], ["proof (state)\nthis:\n  \\<lbrakk>i + gmn a = i + gmn a;\n   \\<And>a b. p a \\<Longrightarrow> p a\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (i + gmn a + gmnl l1) \\<and>\n                    p (i + gmn a + gmnl l1 + gmn n1) \\<and>\n                    v # va = l1 @ n1 # r1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmn a);\n     \\<And>x l n r.\n        \\<lbrakk>x = i + gmn a; \\<not> p x;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmnl (v # va)); splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n        \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                          p (x + gmnl l + gmn n) \\<and> v # va = l @ n # r;\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmnl (a # v # va));\n     splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "have v3: \"a # l1 = l\" \"n1 = n\" \"r1 = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a # l1 = l &&& n1 = n &&& r1 = r", "using IV2 v1"], ["proof (prove)\nusing this:\n  \\<not> p (i + gmn a)\n  \\<lbrakk>?x = i + gmn a; \\<not> p ?x;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x;\n   p (?x + gmnl (v # va)); splitNlist p ?x (v # va) = (?l, ?n, ?r)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (?x + gmnl ?l) \\<and>\n                    p (?x + gmnl ?l + gmn ?n) \\<and> v # va = ?l @ ?n # ?r\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmnl (a # v # va))\n  splitNlist p i (a # v # va) = (l, n, r)\n  splitNlist p (i + gmn a) (v # va) = (l1, n1, r1)\n\ngoal (1 subgoal):\n 1. a # l1 = l &&& n1 = n &&& r1 = r", "by auto"], ["proof (state)\nthis:\n  a # l1 = l\n  n1 = n\n  r1 = r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmn a);\n     \\<And>x l n r.\n        \\<lbrakk>x = i + gmn a; \\<not> p x;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmnl (v # va)); splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n        \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                          p (x + gmnl l + gmn n) \\<and> v # va = l @ n # r;\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmnl (a # v # va));\n     splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "with miv2"], ["proof (chain)\npicking this:\n  \\<lbrakk>i + gmn a = i + gmn a;\n   \\<And>a b. p a \\<Longrightarrow> p a\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (i + gmn a + gmnl l1) \\<and>\n                    p (i + gmn a + gmnl l1 + gmn n1) \\<and>\n                    v # va = l1 @ n1 # r1\n  a # l1 = l\n  n1 = n\n  r1 = r", "have \n        v4: \"\\<not> p (i + gmn a + gmnl l1) \\<and> \n             p (i + gmn a + gmnl l1 + gmn n1) \\<and> \n             v # va = l1 @ n1 # r1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>i + gmn a = i + gmn a;\n   \\<And>a b. p a \\<Longrightarrow> p a\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (i + gmn a + gmnl l1) \\<and>\n                    p (i + gmn a + gmnl l1 + gmn n1) \\<and>\n                    v # va = l1 @ n1 # r1\n  a # l1 = l\n  n1 = n\n  r1 = r\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmn a + gmnl l1) \\<and>\n    p (i + gmn a + gmnl l1 + gmn n1) \\<and> v # va = l1 @ n1 # r1", "by auto"], ["proof (state)\nthis:\n  \\<not> p (i + gmn a + gmnl l1) \\<and>\n  p (i + gmn a + gmnl l1 + gmn n1) \\<and> v # va = l1 @ n1 # r1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmn a);\n     \\<And>x l n r.\n        \\<lbrakk>x = i + gmn a; \\<not> p x;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmnl (v # va)); splitNlist p x (v # va) = (l, n, r)\\<rbrakk>\n        \\<Longrightarrow> \\<not> p (x + gmnl l) \\<and>\n                          p (x + gmnl l + gmn n) \\<and> v # va = l @ n # r;\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmnl (a # v # va));\n     splitNlist p i (a # v # va) = (l, n, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "with v2 v3"], ["proof (chain)\npicking this:\n  p (i + gmn a + gmnl (v # va))\n  a # l1 = l\n  n1 = n\n  r1 = r\n  \\<not> p (i + gmn a + gmnl l1) \\<and>\n  p (i + gmn a + gmnl l1 + gmn n1) \\<and> v # va = l1 @ n1 # r1", "show ?thesis"], ["proof (prove)\nusing this:\n  p (i + gmn a + gmnl (v # va))\n  a # l1 = l\n  n1 = n\n  r1 = r\n  \\<not> p (i + gmn a + gmnl l1) \\<and>\n  p (i + gmn a + gmnl l1 + gmn n1) \\<and> v # va = l1 @ n1 # r1\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r", "by (auto simp add: add.assoc)"], ["proof (state)\nthis:\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn n) \\<and> a # v # va = l @ n # r\n\ngoal (1 subgoal):\n 1. \\<And>a b l n r.\n       \\<lbrakk>\\<And>aa b. a aa \\<Longrightarrow> a (aa + b); \\<not> a b;\n        a (b + gmnl []); splitNlist a b [] = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> a (b + gmnl l) \\<and>\n                         a (b + gmnl l + gmn n) \\<and> [] = l @ n # r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b l n r.\n       \\<lbrakk>\\<And>aa b. a aa \\<Longrightarrow> a (aa + b); \\<not> a b;\n        a (b + gmnl []); splitNlist a b [] = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> a (b + gmnl l) \\<and>\n                         a (b + gmnl l + gmn n) \\<and> [] = l @ n # r", "case 3"], ["proof (state)\nthis:\n  a_ ?a \\<Longrightarrow> a_ (?a + ?b)\n  \\<not> a_ b_\n  a_ (b_ + gmnl [])\n  splitNlist a_ b_ [] = (l, n, r)\n\ngoal (1 subgoal):\n 1. \\<And>a b l n r.\n       \\<lbrakk>\\<And>aa b. a aa \\<Longrightarrow> a (aa + b); \\<not> a b;\n        a (b + gmnl []); splitNlist a b [] = (l, n, r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> a (b + gmnl l) \\<and>\n                         a (b + gmnl l + gmn n) \\<and> [] = l @ n # r", "thus ?case"], ["proof (prove)\nusing this:\n  a_ ?a \\<Longrightarrow> a_ (?a + ?b)\n  \\<not> a_ b_\n  a_ (b_ + gmnl [])\n  splitNlist a_ b_ [] = (l, n, r)\n\ngoal (1 subgoal):\n 1. \\<not> a_ (b_ + gmnl l) \\<and>\n    a_ (b_ + gmnl l + gmn n) \\<and> [] = l @ n # r", "by simp"], ["proof (state)\nthis:\n  \\<not> a_ (b_ + gmnl l) \\<and>\n  a_ (b_ + gmnl l + gmn n) \\<and> [] = l @ n # r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma digitToNlist_inv: \n  \"is_measured_digit d \\<Longrightarrow> (\\<forall> x \\<in> set (digitToNlist d). is_measured_node x)\" \n  \"is_leveln_digit n d \\<Longrightarrow> (\\<forall> x \\<in> set (digitToNlist d). is_leveln_node n x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_measured_digit d \\<Longrightarrow>\n     \\<forall>x\\<in>set (digitToNlist d). is_measured_node x) &&&\n    (is_leveln_digit n d \\<Longrightarrow>\n     \\<forall>x\\<in>set (digitToNlist d). is_leveln_node n x)", "by (cases d, auto)(cases d, auto)"], ["", "lemma gmnl_gmd:\n  \"is_measured_digit d \\<Longrightarrow> gmnl (digitToNlist d) = gmd d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_measured_digit d \\<Longrightarrow> gmnl (digitToNlist d) = gmd d", "by (cases d, auto simp add: add.assoc)"], ["", "lemma gmn_gmd: \n  \"is_measured_node nd \\<Longrightarrow> gmd (nodeToDigit nd) = gmn nd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_measured_node nd \\<Longrightarrow> gmd (nodeToDigit nd) = gmn nd", "by (auto simp add: nodeToDigit_inv nodeToDigit_list gmn_correct gmd_correct)"], ["", "lemma splitDigit_inv:\n  \"\\<lbrakk>\n  \\<And>(a::'a) (b::'a). p a \\<Longrightarrow> p (a + b);\n  \\<not> p i;\n  is_measured_digit d;\n  is_leveln_digit n d;\n  p (i + gmd (d ::('e,'a::monoid_add) Digit));\n  splitDigit p i d = (l, nd, r)\n  \\<rbrakk> \\<Longrightarrow>  \n  \\<not> p (i + (gmnl l))\n  \\<and>\n  p (i + (gmnl l) + (gmn nd))\n  \\<and>\n  (\\<forall> x \\<in> set l. (is_measured_node x \\<and> is_leveln_node n x))\n  \\<and>\n  (\\<forall> x \\<in> set r. (is_measured_node x \\<and> is_leveln_node n x))\n  \\<and>\n  (is_measured_node nd \\<and> is_leveln_node n nd )\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     is_measured_digit d; is_leveln_digit n d; p (i + gmd d);\n     splitDigit p i d = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn nd) \\<and>\n                      (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     is_measured_digit d; is_leveln_digit n d; p (i + gmd d);\n     splitDigit p i d = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn nd) \\<and>\n                      (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "fix p i d n l nd r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     is_measured_digit d; is_leveln_digit n d; p (i + gmd d);\n     splitDigit p i d = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn nd) \\<and>\n                      (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "assume assms: \"\\<And>a b. p a \\<Longrightarrow> p (a + b)\" \"\\<not> p i\" \"is_measured_digit d\" \n    \"p (i + gmd d)\" \"splitDigit p i d = (l, nd, r)\"\n    \"is_leveln_digit n d\""], ["proof (state)\nthis:\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  is_measured_digit d\n  p (i + gmd d)\n  splitDigit p i d = (l, nd, r)\n  is_leveln_digit n d\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     is_measured_digit d; is_leveln_digit n d; p (i + gmd d);\n     splitDigit p i d = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn nd) \\<and>\n                      (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "from assms(3, 4)"], ["proof (chain)\npicking this:\n  is_measured_digit d\n  p (i + gmd d)", "have v1: \"p (i + gmnl (digitToNlist d))\""], ["proof (prove)\nusing this:\n  is_measured_digit d\n  p (i + gmd d)\n\ngoal (1 subgoal):\n 1. p (i + gmnl (digitToNlist d))", "by (simp add: gmnl_gmd)"], ["proof (state)\nthis:\n  p (i + gmnl (digitToNlist d))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     is_measured_digit d; is_leveln_digit n d; p (i + gmd d);\n     splitDigit p i d = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn nd) \\<and>\n                      (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "note snc = splitNlist_correct [of p i \"digitToNlist d\" l nd r]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n   p (i + gmnl (digitToNlist d));\n   splitNlist p i (digitToNlist d) = (l, nd, r)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                    p (i + gmnl l + gmn nd) \\<and>\n                    digitToNlist d = l @ nd # r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     is_measured_digit d; is_leveln_digit n d; p (i + gmd d);\n     splitDigit p i d = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn nd) \\<and>\n                      (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "from assms(5)"], ["proof (chain)\npicking this:\n  splitDigit p i d = (l, nd, r)", "have v2: \"splitNlist p i (digitToNlist d) = (l, nd, r)\""], ["proof (prove)\nusing this:\n  splitDigit p i d = (l, nd, r)\n\ngoal (1 subgoal):\n 1. splitNlist p i (digitToNlist d) = (l, nd, r)", "by (simp add: splitDigit_def)"], ["proof (state)\nthis:\n  splitNlist p i (digitToNlist d) = (l, nd, r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     is_measured_digit d; is_leveln_digit n d; p (i + gmd d);\n     splitDigit p i d = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn nd) \\<and>\n                      (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "note snc1 = snc[OF assms(1) assms(2) v1 v2]"], ["proof (state)\nthis:\n  (\\<And>a b. p a \\<Longrightarrow> p a) \\<Longrightarrow>\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn nd) \\<and> digitToNlist d = l @ nd # r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     is_measured_digit d; is_leveln_digit n d; p (i + gmd d);\n     splitDigit p i d = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn nd) \\<and>\n                      (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "hence v3: \"\\<not> p (i + gmnl l) \\<and> p (i + gmnl l + gmn nd) \\<and> \n             digitToNlist d = l @ nd # r\""], ["proof (prove)\nusing this:\n  (\\<And>a b. p a \\<Longrightarrow> p a) \\<Longrightarrow>\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn nd) \\<and> digitToNlist d = l @ nd # r\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn nd) \\<and> digitToNlist d = l @ nd # r", "by auto"], ["proof (state)\nthis:\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn nd) \\<and> digitToNlist d = l @ nd # r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     is_measured_digit d; is_leveln_digit n d; p (i + gmd d);\n     splitDigit p i d = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn nd) \\<and>\n                      (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "from assms(3,6)"], ["proof (chain)\npicking this:\n  is_measured_digit d\n  is_leveln_digit n d", "have \n    v4:\" \\<forall> x \\<in> set (digitToNlist d). is_measured_node x\"\n    \" \\<forall> x \\<in> set (digitToNlist d). is_leveln_node n x\""], ["proof (prove)\nusing this:\n  is_measured_digit d\n  is_leveln_digit n d\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (digitToNlist d). is_measured_node x &&&\n    \\<forall>x\\<in>set (digitToNlist d). is_leveln_node n x", "by(auto simp add: digitToNlist_inv)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (digitToNlist d). is_measured_node x\n  \\<forall>x\\<in>set (digitToNlist d). is_leveln_node n x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     is_measured_digit d; is_leveln_digit n d; p (i + gmd d);\n     splitDigit p i d = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn nd) \\<and>\n                      (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "with v3"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn nd) \\<and> digitToNlist d = l @ nd # r\n  \\<forall>x\\<in>set (digitToNlist d). is_measured_node x\n  \\<forall>x\\<in>set (digitToNlist d). is_leveln_node n x", "have v5: \"\\<forall> x \\<in> set l. (is_measured_node x \\<and> is_leveln_node n x)\"\n    \"\\<forall> x \\<in> set r. (is_measured_node x \\<and> is_leveln_node n x)\"\n    \"is_measured_node nd \\<and> is_leveln_node n nd\""], ["proof (prove)\nusing this:\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn nd) \\<and> digitToNlist d = l @ nd # r\n  \\<forall>x\\<in>set (digitToNlist d). is_measured_node x\n  \\<forall>x\\<in>set (digitToNlist d). is_leveln_node n x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set l. is_measured_node x \\<and> is_leveln_node n x &&&\n    \\<forall>x\\<in>set r. is_measured_node x \\<and> is_leveln_node n x &&&\n    is_measured_node nd \\<and> is_leveln_node n nd", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set l. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node nd \\<and> is_leveln_node n nd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     is_measured_digit d; is_leveln_digit n d; p (i + gmd d);\n     splitDigit p i d = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> \\<not> p (i + gmnl l) \\<and>\n                      p (i + gmnl l + gmn nd) \\<and>\n                      (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "with v3 v5"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn nd) \\<and> digitToNlist d = l @ nd # r\n  \\<forall>x\\<in>set l. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node nd \\<and> is_leveln_node n nd\n  \\<forall>x\\<in>set l. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node nd \\<and> is_leveln_node n nd", "show \n    \"\\<not> p (i + gmnl l) \\<and> p (i + gmnl l + gmn nd) \\<and> \n    (\\<forall>x\\<in>set l. is_measured_node x \\<and> is_leveln_node n x) \\<and> \n    (\\<forall>x\\<in>set r. is_measured_node x \\<and> is_leveln_node n x) \\<and> \n    is_measured_node nd \\<and> is_leveln_node n nd\""], ["proof (prove)\nusing this:\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn nd) \\<and> digitToNlist d = l @ nd # r\n  \\<forall>x\\<in>set l. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node nd \\<and> is_leveln_node n nd\n  \\<forall>x\\<in>set l. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node nd \\<and> is_leveln_node n nd\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmnl l) \\<and>\n    p (i + gmnl l + gmn nd) \\<and>\n    (\\<forall>x\\<in>set l.\n        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n    (\\<forall>x\\<in>set r.\n        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n    is_measured_node nd \\<and> is_leveln_node n nd", "by auto"], ["proof (state)\nthis:\n  \\<not> p (i + gmnl l) \\<and>\n  p (i + gmnl l + gmn nd) \\<and>\n  (\\<forall>x\\<in>set l.\n      is_measured_node x \\<and> is_leveln_node n x) \\<and>\n  (\\<forall>x\\<in>set r.\n      is_measured_node x \\<and> is_leveln_node n x) \\<and>\n  is_measured_node nd \\<and> is_leveln_node n nd\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma splitDigit_inv':\n  \"\\<lbrakk>\n  splitDigit p i d = (l, nd, r);\n  is_measured_digit d;\n  is_leveln_digit n d\n  \\<rbrakk> \\<Longrightarrow>  \n  (\\<forall> x \\<in> set l. (is_measured_node x \\<and> is_leveln_node n x))\n  \\<and>\n  (\\<forall> x \\<in> set r. (is_measured_node x \\<and> is_leveln_node n x))\n  \\<and>\n  (is_measured_node nd \\<and> is_leveln_node n nd )\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>splitDigit p i d = (l, nd, r); is_measured_digit d;\n     is_leveln_digit n d\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "apply (unfold splitDigit_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>splitNlist p i (digitToNlist d) = (l, nd, r);\n     is_measured_digit d; is_leveln_digit n d\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x\\<in>set l.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      (\\<forall>x\\<in>set r.\n                          is_measured_node x \\<and>\n                          is_leveln_node n x) \\<and>\n                      is_measured_node nd \\<and> is_leveln_node n nd", "apply (cases d)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>splitNlist p i (digitToNlist d) = (l, nd, r);\n        is_measured_digit d; is_leveln_digit n d; d = One x1\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>set l.\n                             is_measured_node x \\<and>\n                             is_leveln_node n x) \\<and>\n                         (\\<forall>x\\<in>set r.\n                             is_measured_node x \\<and>\n                             is_leveln_node n x) \\<and>\n                         is_measured_node nd \\<and> is_leveln_node n nd\n 2. \\<And>x21 x22.\n       \\<lbrakk>splitNlist p i (digitToNlist d) = (l, nd, r);\n        is_measured_digit d; is_leveln_digit n d; d = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>set l.\n                             is_measured_node x \\<and>\n                             is_leveln_node n x) \\<and>\n                         (\\<forall>x\\<in>set r.\n                             is_measured_node x \\<and>\n                             is_leveln_node n x) \\<and>\n                         is_measured_node nd \\<and> is_leveln_node n nd\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>splitNlist p i (digitToNlist d) = (l, nd, r);\n        is_measured_digit d; is_leveln_digit n d;\n        d = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>set l.\n                             is_measured_node x \\<and>\n                             is_leveln_node n x) \\<and>\n                         (\\<forall>x\\<in>set r.\n                             is_measured_node x \\<and>\n                             is_leveln_node n x) \\<and>\n                         is_measured_node nd \\<and> is_leveln_node n nd\n 4. \\<And>x41 x42 x43 x44.\n       \\<lbrakk>splitNlist p i (digitToNlist d) = (l, nd, r);\n        is_measured_digit d; is_leveln_digit n d;\n        d = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>set l.\n                             is_measured_node x \\<and>\n                             is_leveln_node n x) \\<and>\n                         (\\<forall>x\\<in>set r.\n                             is_measured_node x \\<and>\n                             is_leveln_node n x) \\<and>\n                         is_measured_node nd \\<and> is_leveln_node n nd", "apply (auto split: if_split_asm simp add: Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma splitDigit_list: \"splitDigit p i d = (l,n,r) \\<Longrightarrow> \n  (digitToList d) = (nlistToList l) @ (nodeToList n) @ (nlistToList r)\n  \\<and> length l \\<le> 4 \\<and> length r \\<le> 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. splitDigit p i d = (l, n, r) \\<Longrightarrow>\n    digitToList d = nlistToList l @ nodeToList n @ nlistToList r \\<and>\n    length l \\<le> 4 \\<and> length r \\<le> 4", "apply (unfold splitDigit_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. splitNlist p i (digitToNlist d) = (l, n, r) \\<Longrightarrow>\n    digitToList d = nlistToList l @ nodeToList n @ nlistToList r \\<and>\n    length l \\<le> 4 \\<and> length r \\<le> 4", "apply (cases d)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>splitNlist p i (digitToNlist d) = (l, n, r);\n        d = One x1\\<rbrakk>\n       \\<Longrightarrow> digitToList d =\n                         nlistToList l @ nodeToList n @ nlistToList r \\<and>\n                         length l \\<le> 4 \\<and> length r \\<le> 4\n 2. \\<And>x21 x22.\n       \\<lbrakk>splitNlist p i (digitToNlist d) = (l, n, r);\n        d = Two x21 x22\\<rbrakk>\n       \\<Longrightarrow> digitToList d =\n                         nlistToList l @ nodeToList n @ nlistToList r \\<and>\n                         length l \\<le> 4 \\<and> length r \\<le> 4\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>splitNlist p i (digitToNlist d) = (l, n, r);\n        d = Three x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> digitToList d =\n                         nlistToList l @ nodeToList n @ nlistToList r \\<and>\n                         length l \\<le> 4 \\<and> length r \\<le> 4\n 4. \\<And>x41 x42 x43 x44.\n       \\<lbrakk>splitNlist p i (digitToNlist d) = (l, n, r);\n        d = Four x41 x42 x43 x44\\<rbrakk>\n       \\<Longrightarrow> digitToList d =\n                         nlistToList l @ nodeToList n @ nlistToList r \\<and>\n                         length l \\<le> 4 \\<and> length r \\<le> 4", "apply (auto split: if_split_asm simp add: Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma gmnl_gmft: \"\\<forall> x \\<in> set nl. is_measured_node x \\<Longrightarrow> \n  gmft (nlistToTree nl) = gmnl nl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set nl. is_measured_node x \\<Longrightarrow>\n    gmft (nlistToTree nl) = gmnl nl", "by (auto simp add: gmnl_correct[of nl] nlistToTree_list[of nl]  \n                   nlistToTree_inv[of nl]  gmft_correct[of \"nlistToTree nl\"])"], ["", "lemma gmftR_gmnl:\n  assumes \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n  and \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n  and \"\\<forall> x \\<in> set sf. (is_measured_node x \\<and> is_leveln_node n x) \\<and> length sf \\<le> 4\"\n  shows \"gmft (deepR pr m sf) = gmd pr + gmft m + gmnl sf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmft (deepR pr m sf) = gmd pr + gmft m + gmnl sf", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. gmft (deepR pr m sf) = gmd pr + gmft m + gmnl sf", "from assms"], ["proof (chain)\npicking this:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  \\<forall>x\\<in>set sf.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and> length sf \\<le> 4", "have \n    v1: \"toList (deepR pr m sf) = digitToList pr @ toList m @ nlistToList sf\""], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  \\<forall>x\\<in>set sf.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and> length sf \\<le> 4\n\ngoal (1 subgoal):\n 1. toList (deepR pr m sf) = digitToList pr @ toList m @ nlistToList sf", "by (auto simp add: deepR_list)"], ["proof (state)\nthis:\n  toList (deepR pr m sf) = digitToList pr @ toList m @ nlistToList sf\n\ngoal (1 subgoal):\n 1. gmft (deepR pr m sf) = gmd pr + gmft m + gmnl sf", "from assms"], ["proof (chain)\npicking this:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  \\<forall>x\\<in>set sf.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and> length sf \\<le> 4", "have \n    v2: \"is_measured_ftree (deepR pr m sf)\""], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  \\<forall>x\\<in>set sf.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and> length sf \\<le> 4\n\ngoal (1 subgoal):\n 1. is_measured_ftree (deepR pr m sf)", "by (auto simp add: deepR_inv)"], ["proof (state)\nthis:\n  is_measured_ftree (deepR pr m sf)\n\ngoal (1 subgoal):\n 1. gmft (deepR pr m sf) = gmd pr + gmft m + gmnl sf", "with v1"], ["proof (chain)\npicking this:\n  toList (deepR pr m sf) = digitToList pr @ toList m @ nlistToList sf\n  is_measured_ftree (deepR pr m sf)", "have \n    v3: \"gmft (deepR pr m sf) = \n        sum_list (map snd (digitToList pr @ toList m @ nlistToList sf))\""], ["proof (prove)\nusing this:\n  toList (deepR pr m sf) = digitToList pr @ toList m @ nlistToList sf\n  is_measured_ftree (deepR pr m sf)\n\ngoal (1 subgoal):\n 1. gmft (deepR pr m sf) =\n    sum_list (map snd (digitToList pr @ toList m @ nlistToList sf))", "by (auto simp add: gmft_correct)"], ["proof (state)\nthis:\n  gmft (deepR pr m sf) =\n  sum_list (map snd (digitToList pr @ toList m @ nlistToList sf))\n\ngoal (1 subgoal):\n 1. gmft (deepR pr m sf) = gmd pr + gmft m + gmnl sf", "have \n    v4:\"gmd pr + gmft m + gmnl sf = \n        sum_list (map snd (digitToList pr @ toList m @ nlistToList sf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmd pr + gmft m + gmnl sf =\n    sum_list (map snd (digitToList pr @ toList m @ nlistToList sf))", "by (auto simp add: gmd_correct gmft_correct gmnl_correct assms add.assoc)"], ["proof (state)\nthis:\n  gmd pr + gmft m + gmnl sf =\n  sum_list (map snd (digitToList pr @ toList m @ nlistToList sf))\n\ngoal (1 subgoal):\n 1. gmft (deepR pr m sf) = gmd pr + gmft m + gmnl sf", "with v3"], ["proof (chain)\npicking this:\n  gmft (deepR pr m sf) =\n  sum_list (map snd (digitToList pr @ toList m @ nlistToList sf))\n  gmd pr + gmft m + gmnl sf =\n  sum_list (map snd (digitToList pr @ toList m @ nlistToList sf))", "show ?thesis"], ["proof (prove)\nusing this:\n  gmft (deepR pr m sf) =\n  sum_list (map snd (digitToList pr @ toList m @ nlistToList sf))\n  gmd pr + gmft m + gmnl sf =\n  sum_list (map snd (digitToList pr @ toList m @ nlistToList sf))\n\ngoal (1 subgoal):\n 1. gmft (deepR pr m sf) = gmd pr + gmft m + gmnl sf", "by simp"], ["proof (state)\nthis:\n  gmft (deepR pr m sf) = gmd pr + gmft m + gmnl sf\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nsplitTree_invpres: \"\\<lbrakk>\n  is_leveln_ftree n (s:: ('e,'a::monoid_add) FingerTreeStruc);\n  is_measured_ftree s;  \n  \\<not> p i; \n  p (i + (gmft s));\n  (nsplitTree p i s) = (l, nd, r)\\<rbrakk> \n  \\<Longrightarrow> \n  is_leveln_ftree n l\n  \\<and>\n  is_measured_ftree l\n  \\<and>\n  is_leveln_ftree n r\n  \\<and>\n  is_measured_ftree r\n  \\<and>\n  is_leveln_node n nd\n  \\<and>\n  is_measured_node nd\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree n s; is_measured_ftree s; \\<not> p i;\n     p (i + gmft s); nsplitTree p i s = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "proof (induct p i s arbitrary: n l nd r rule: nsplitTree.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p i n l nd r.\n       \\<lbrakk>is_leveln_ftree n Empty; is_measured_ftree Empty;\n        \\<not> p i; p (i + gmft Empty);\n        nsplitTree p i Empty = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<And>p i ea n l nd r.\n       \\<lbrakk>is_leveln_ftree n (Single ea);\n        is_measured_ftree (Single ea); \\<not> p i; p (i + gmft (Single ea));\n        nsplitTree p i (Single ea) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 3. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<not> p x; p (x + gmft m);\n                    nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "case 1"], ["proof (state)\nthis:\n  is_leveln_ftree n Empty\n  is_measured_ftree Empty\n  \\<not> p_ i_\n  p_ (i_ + gmft Empty)\n  nsplitTree p_ i_ Empty = (l, nd, r)\n\ngoal (3 subgoals):\n 1. \\<And>p i n l nd r.\n       \\<lbrakk>is_leveln_ftree n Empty; is_measured_ftree Empty;\n        \\<not> p i; p (i + gmft Empty);\n        nsplitTree p i Empty = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<And>p i ea n l nd r.\n       \\<lbrakk>is_leveln_ftree n (Single ea);\n        is_measured_ftree (Single ea); \\<not> p i; p (i + gmft (Single ea));\n        nsplitTree p i (Single ea) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 3. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<not> p x; p (x + gmft m);\n                    nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree n Empty\n  is_measured_ftree Empty\n  \\<not> p_ i_\n  p_ (i_ + gmft Empty)\n  nsplitTree p_ i_ Empty = (l, nd, r)\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by auto"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (2 subgoals):\n 1. \\<And>p i ea n l nd r.\n       \\<lbrakk>is_leveln_ftree n (Single ea);\n        is_measured_ftree (Single ea); \\<not> p i; p (i + gmft (Single ea));\n        nsplitTree p i (Single ea) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<not> p x; p (x + gmft m);\n                    nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p i ea n l nd r.\n       \\<lbrakk>is_leveln_ftree n (Single ea);\n        is_measured_ftree (Single ea); \\<not> p i; p (i + gmft (Single ea));\n        nsplitTree p i (Single ea) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<not> p x; p (x + gmft m);\n                    nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "case 2"], ["proof (state)\nthis:\n  is_leveln_ftree n (Single ea_)\n  is_measured_ftree (Single ea_)\n  \\<not> p_ i_\n  p_ (i_ + gmft (Single ea_))\n  nsplitTree p_ i_ (Single ea_) = (l, nd, r)\n\ngoal (2 subgoals):\n 1. \\<And>p i ea n l nd r.\n       \\<lbrakk>is_leveln_ftree n (Single ea);\n        is_measured_ftree (Single ea); \\<not> p i; p (i + gmft (Single ea));\n        nsplitTree p i (Single ea) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<not> p x; p (x + gmft m);\n                    nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Single ea_)\n  is_measured_ftree (Single ea_)\n  \\<not> p_ i_\n  p_ (i_ + gmft (Single ea_))\n  nsplitTree p_ i_ (Single ea_) = (l, nd, r)\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by auto"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<not> p x; p (x + gmft m);\n                    nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<not> p x; p (x + gmft m);\n                    nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "case (3 p i uu \"pr\" m sf n l nd r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n\ngoal (1 subgoal):\n 1. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<not> p x; p (x + gmft m);\n                    nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "proof (cases \"p (i + gmd pr)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "case True"], ["proof (state)\nthis:\n  p (i + gmd pr)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with 3"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  p (i + gmd pr)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  p (i + gmd pr)\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "obtain l1 x r1 where \n        l1xr1: \"splitDigit p i pr = (l1,x,r1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l1 x r1.\n        splitDigit p i pr = (l1, x, r1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"splitDigit p i pr\", blast)"], ["proof (state)\nthis:\n  splitDigit p i pr = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with True 3"], ["proof (chain)\npicking this:\n  p (i + gmd pr)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  splitDigit p i pr = (l1, x, r1)", "have \n        v1: \"l = nlistToTree l1\" \"nd = x\" \"r = deepL r1 m sf\""], ["proof (prove)\nusing this:\n  p (i + gmd pr)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  splitDigit p i pr = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. l = nlistToTree l1 &&& nd = x &&& r = deepL r1 m sf", "by auto"], ["proof (state)\nthis:\n  l = nlistToTree l1\n  nd = x\n  r = deepL r1 m sf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1xr1"], ["proof (chain)\npicking this:\n  splitDigit p i pr = (l1, x, r1)", "have \n        v2: \"digitToList pr = nlistToList l1 @ nodeToList x @ nlistToList r1\"\n        \"length l1 \\<le> 4\" \"length r1 \\<le> 4\""], ["proof (prove)\nusing this:\n  splitDigit p i pr = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. digitToList pr = nlistToList l1 @ nodeToList x @ nlistToList r1 &&&\n    length l1 \\<le> 4 &&& length r1 \\<le> 4", "by (auto simp add: splitDigit_list)"], ["proof (state)\nthis:\n  digitToList pr = nlistToList l1 @ nodeToList x @ nlistToList r1\n  length l1 \\<le> 4\n  length r1 \\<le> 4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from 3(2,3)"], ["proof (chain)\npicking this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)", "have \n        pr_m_sf_inv: \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n        \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n        \"is_leveln_digit n sf \\<and> is_measured_digit sf\""], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n\ngoal (1 subgoal):\n 1. is_leveln_digit n pr \\<and> is_measured_digit pr &&&\n    is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m &&&\n    is_leveln_digit n sf \\<and> is_measured_digit sf", "by simp_all"], ["proof (state)\nthis:\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with 3(4,5) pr_m_sf_inv(1) True l1xr1  \n        splitDigit_inv'[of p i \"pr\" l1 x r1 n]"], ["proof (chain)\npicking this:\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  p (i + gmd pr)\n  splitDigit p i pr = (l1, x, r1)\n  \\<lbrakk>splitDigit p i pr = (l1, x, r1); is_measured_digit pr;\n   is_leveln_digit n pr\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x\\<in>set l1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    (\\<forall>x\\<in>set r1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf", "have \n        l1_x_r1_inv: \n        \"\\<forall> x \\<in> set l1. (is_measured_node x \\<and> is_leveln_node n x)\"\n        \"\\<forall> x \\<in> set r1. (is_measured_node x \\<and> is_leveln_node n x)\"\n        \"is_measured_node x \\<and> is_leveln_node n x\""], ["proof (prove)\nusing this:\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  p (i + gmd pr)\n  splitDigit p i pr = (l1, x, r1)\n  \\<lbrakk>splitDigit p i pr = (l1, x, r1); is_measured_digit pr;\n   is_leveln_digit n pr\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x\\<in>set l1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    (\\<forall>x\\<in>set r1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x &&&\n    \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x &&&\n    is_measured_node x \\<and> is_leveln_node n x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1_x_r1_inv v1 v2(3) pr_m_sf_inv"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n  l = nlistToTree l1\n  nd = x\n  r = deepL r1 m sf\n  length r1 \\<le> 4\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf", "have\n        ziel3: \"is_leveln_ftree n l \\<and> is_measured_ftree l \\<and>\n        is_leveln_ftree n r \\<and> is_measured_ftree r \\<and> \n        is_leveln_node n nd \\<and> is_measured_node nd\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n  l = nlistToTree l1\n  nd = x\n  r = deepL r1 m sf\n  length r1 \\<le> 4\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by (auto simp add: nlistToTree_inv deepL_inv)"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by simp"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "case False"], ["proof (state)\nthis:\n  \\<not> p (i + gmd pr)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "note case1 = this"], ["proof (state)\nthis:\n  \\<not> p (i + gmd pr)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with 3"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  \\<not> p (i + gmd pr)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  \\<not> p (i + gmd pr)\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "proof (cases \"p (i + gmd pr + gmft m)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "case False"], ["proof (state)\nthis:\n  \\<not> p (i + gmd pr + gmft m)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with case1 3"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  \\<not> p (i + gmd pr + gmft m)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  \\<not> p (i + gmd pr + gmft m)\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "obtain l1 x r1 where \n          l1xr1: \"splitDigit p (i + gmd pr + gmft m) sf = (l1,x,r1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l1 x r1.\n        splitDigit p (i + gmd pr + gmft m) sf =\n        (l1, x, r1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"splitDigit p (i + gmd pr + gmft m) sf\", blast)"], ["proof (state)\nthis:\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with case1 False 3"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmd pr)\n  \\<not> p (i + gmd pr + gmft m)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)", "have \n          v1: \"l = deepR pr m l1\" \"nd = x\" \"r = nlistToTree r1\""], ["proof (prove)\nusing this:\n  \\<not> p (i + gmd pr)\n  \\<not> p (i + gmd pr + gmft m)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. l = deepR pr m l1 &&& nd = x &&& r = nlistToTree r1", "by auto"], ["proof (state)\nthis:\n  l = deepR pr m l1\n  nd = x\n  r = nlistToTree r1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1xr1"], ["proof (chain)\npicking this:\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)", "have \n          v2: \"digitToList sf = nlistToList l1 @ nodeToList x @ nlistToList r1\"\n          \"length l1 \\<le> 4\" \"length r1 \\<le> 4\""], ["proof (prove)\nusing this:\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. digitToList sf = nlistToList l1 @ nodeToList x @ nlistToList r1 &&&\n    length l1 \\<le> 4 &&& length r1 \\<le> 4", "by (auto simp add: splitDigit_list)"], ["proof (state)\nthis:\n  digitToList sf = nlistToList l1 @ nodeToList x @ nlistToList r1\n  length l1 \\<le> 4\n  length r1 \\<le> 4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from 3(2,3)"], ["proof (chain)\npicking this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)", "have \n          pr_m_sf_inv: \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n          \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n          \"is_leveln_digit n sf \\<and> is_measured_digit sf\""], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n\ngoal (1 subgoal):\n 1. is_leveln_digit n pr \\<and> is_measured_digit pr &&&\n    is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m &&&\n    is_leveln_digit n sf \\<and> is_measured_digit sf", "by simp_all"], ["proof (state)\nthis:\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from 3"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)", "have \n          v7: \"p (i + gmd pr + gmft m + gmd sf)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n\ngoal (1 subgoal):\n 1. p (i + gmd pr + gmft m + gmd sf)", "by (auto simp add: add.assoc)"], ["proof (state)\nthis:\n  p (i + gmd pr + gmft m + gmd sf)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with pr_m_sf_inv 3(4) pr_m_sf_inv(3) case1 False l1xr1  \n             splitDigit_inv'[of p \"i + gmd pr + gmft m\" sf l1 x r1 n]"], ["proof (chain)\npicking this:\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<not> p i\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<not> p (i + gmd pr)\n  \\<not> p (i + gmd pr + gmft m)\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\n  \\<lbrakk>splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1);\n   is_measured_digit sf; is_leveln_digit n sf\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x\\<in>set l1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    (\\<forall>x\\<in>set r1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    is_measured_node x \\<and> is_leveln_node n x\n  p (i + gmd pr + gmft m + gmd sf)", "have l1_x_r1_inv: \n          \"\\<forall> x \\<in> set l1. (is_measured_node x \\<and> is_leveln_node n x)\"\n          \"\\<forall> x \\<in> set r1. (is_measured_node x \\<and> is_leveln_node n x)\"\n          \"is_measured_node x \\<and> is_leveln_node n x\""], ["proof (prove)\nusing this:\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<not> p i\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<not> p (i + gmd pr)\n  \\<not> p (i + gmd pr + gmft m)\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\n  \\<lbrakk>splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1);\n   is_measured_digit sf; is_leveln_digit n sf\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x\\<in>set l1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    (\\<forall>x\\<in>set r1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    is_measured_node x \\<and> is_leveln_node n x\n  p (i + gmd pr + gmft m + gmd sf)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x &&&\n    \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x &&&\n    is_measured_node x \\<and> is_leveln_node n x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1_x_r1_inv v1 v2(2) pr_m_sf_inv"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n  l = deepR pr m l1\n  nd = x\n  r = nlistToTree r1\n  length l1 \\<le> 4\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf", "have\n          ziel3: \"is_leveln_ftree n l \\<and> is_measured_ftree l \\<and>\n          is_leveln_ftree n r \\<and> is_measured_ftree r \\<and> \n          is_leveln_node n nd \\<and> is_measured_node nd\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n  l = deepR pr m l1\n  nd = x\n  r = nlistToTree r1\n  length l1 \\<le> 4\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by (auto simp add: nlistToTree_inv deepR_inv)"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from ziel3"], ["proof (chain)\npicking this:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd", "show ?thesis"], ["proof (prove)\nusing this:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by simp"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "case True"], ["proof (state)\nthis:\n  p (i + gmd pr + gmft m)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with case1 3"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  p (i + gmd pr + gmft m)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m; \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  p (i + gmd pr + gmft m)\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "obtain l1 x r1 where \n          l1_x_r1 :\"nsplitTree p (i + gmd pr) m = (l1, x, r1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l1 x r1.\n        nsplitTree p (i + gmd pr) m = (l1, x, r1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"nsplitTree p (i + gmd pr) m\", blast)"], ["proof (state)\nthis:\n  nsplitTree p (i + gmd pr) m = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from 3(2,3)"], ["proof (chain)\npicking this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)", "have \n          pr_m_sf_inv: \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n          \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n          \"is_leveln_digit n sf \\<and> is_measured_digit sf\""], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n\ngoal (1 subgoal):\n 1. is_leveln_digit n pr \\<and> is_measured_digit pr &&&\n    is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m &&&\n    is_leveln_digit n sf \\<and> is_measured_digit sf", "by simp_all"], ["proof (state)\nthis:\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with True case1 \n          \"3.hyps\"[of \"i + gmd pr\" \"i + gmd pr + gmft m\" \"Suc n\" l1 x r1] \n          3(6) l1_x_r1"], ["proof (chain)\npicking this:\n  p (i + gmd pr + gmft m)\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>i + gmd pr = i + gmd pr;\n   i + gmd pr + gmft m = i + gmd pr + gmft m; \\<not> p (i + gmd pr);\n   p (i + gmd pr + gmft m); is_leveln_ftree (Suc n) m; is_measured_ftree m;\n   \\<not> p (i + gmd pr); p (i + gmd pr + gmft m);\n   nsplitTree p (i + gmd pr) m = (l1, x, r1)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree (Suc n) l1 \\<and>\n                    is_measured_ftree l1 \\<and>\n                    is_leveln_ftree (Suc n) r1 \\<and>\n                    is_measured_ftree r1 \\<and>\n                    is_leveln_node (Suc n) x \\<and> is_measured_node x\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  nsplitTree p (i + gmd pr) m = (l1, x, r1)\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf", "have l1_x_r1_inv: \n          \"is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\"\n          \"is_leveln_ftree (Suc n) r1 \\<and> is_measured_ftree r1\"\n          \"is_leveln_node (Suc n) x \\<and> is_measured_node x\""], ["proof (prove)\nusing this:\n  p (i + gmd pr + gmft m)\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>i + gmd pr = i + gmd pr;\n   i + gmd pr + gmft m = i + gmd pr + gmft m; \\<not> p (i + gmd pr);\n   p (i + gmd pr + gmft m); is_leveln_ftree (Suc n) m; is_measured_ftree m;\n   \\<not> p (i + gmd pr); p (i + gmd pr + gmft m);\n   nsplitTree p (i + gmd pr) m = (l1, x, r1)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree (Suc n) l1 \\<and>\n                    is_measured_ftree l1 \\<and>\n                    is_leveln_ftree (Suc n) r1 \\<and>\n                    is_measured_ftree r1 \\<and>\n                    is_leveln_node (Suc n) x \\<and> is_measured_node x\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  nsplitTree p (i + gmd pr) m = (l1, x, r1)\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1 &&&\n    is_leveln_ftree (Suc n) r1 \\<and> is_measured_ftree r1 &&&\n    is_leveln_node (Suc n) x \\<and> is_measured_node x", "by auto"], ["proof (state)\nthis:\n  is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\n  is_leveln_ftree (Suc n) r1 \\<and> is_measured_ftree r1\n  is_leveln_node (Suc n) x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "obtain l2 x2 r2 where l2_x2_r2: \n          \"splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2,x2,r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l2 x2 r2.\n        splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) =\n        (l2, x2, r2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x)\",blast)"], ["proof (state)\nthis:\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1_x_r1_inv"], ["proof (chain)\npicking this:\n  is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\n  is_leveln_ftree (Suc n) r1 \\<and> is_measured_ftree r1\n  is_leveln_node (Suc n) x \\<and> is_measured_node x", "have\n          ndx_inv: \"is_leveln_digit n (nodeToDigit x) \\<and>\n          is_measured_digit (nodeToDigit x)\""], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\n  is_leveln_ftree (Suc n) r1 \\<and> is_measured_ftree r1\n  is_leveln_node (Suc n) x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. is_leveln_digit n (nodeToDigit x) \\<and>\n    is_measured_digit (nodeToDigit x)", "by (auto simp add: nodeToDigit_inv gmn_gmd)"], ["proof (state)\nthis:\n  is_leveln_digit n (nodeToDigit x) \\<and> is_measured_digit (nodeToDigit x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "note spdi = splitDigit_inv'[of p \"i + gmd pr + gmft l1\" \n                                      \"nodeToDigit x\" l2 x2 r2 n]"], ["proof (state)\nthis:\n  \\<lbrakk>splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) =\n           (l2, x2, r2);\n   is_measured_digit (nodeToDigit x);\n   is_leveln_digit n (nodeToDigit x)\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x\\<in>set l2.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    (\\<forall>x\\<in>set r2.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    is_measured_node x2 \\<and> is_leveln_node n x2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from ndx_inv l1_x_r1_inv(1) l2_x2_r2 3(4)"], ["proof (chain)\npicking this:\n  is_leveln_digit n (nodeToDigit x) \\<and> is_measured_digit (nodeToDigit x)\n  is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)\n  \\<not> p i", "have\n          l2_x2_r2_inv:\n          \"\\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\"\n          \"\\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\"\n          \"is_measured_node x2 \\<and> is_leveln_node n x2\""], ["proof (prove)\nusing this:\n  is_leveln_digit n (nodeToDigit x) \\<and> is_measured_digit (nodeToDigit x)\n  is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)\n  \\<not> p i\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x &&&\n    \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x &&&\n    is_measured_node x2 \\<and> is_leveln_node n x2", "by (auto simp add: spdi)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x2 \\<and> is_leveln_node n x2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "note spdl =  splitDigit_list[of p \"i + gmd pr + gmft l1\" \n                                        \"nodeToDigit x\" l2 x2 r2]"], ["proof (state)\nthis:\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) =\n  (l2, x2, r2) \\<Longrightarrow>\n  digitToList (nodeToDigit x) =\n  nlistToList l2 @ nodeToList x2 @ nlistToList r2 \\<and>\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l2_x2_r2"], ["proof (chain)\npicking this:\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)", "have\n          l2_x2_r2_list: \n          \"digitToList (nodeToDigit x) = \n            nlistToList l2 @ nodeToList x2 @ nlistToList r2\"\n          \"length l2 \\<le> 4 \\<and> length r2 \\<le> 4\""], ["proof (prove)\nusing this:\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)\n\ngoal (1 subgoal):\n 1. digitToList (nodeToDigit x) =\n    nlistToList l2 @ nodeToList x2 @ nlistToList r2 &&&\n    length l2 \\<le> 4 \\<and> length r2 \\<le> 4", "by (auto simp add: spdl)"], ["proof (state)\nthis:\n  digitToList (nodeToDigit x) =\n  nlistToList l2 @ nodeToList x2 @ nlistToList r2\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from case1 True 3(6) l1_x_r1 l2_x2_r2"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmd pr)\n  p (i + gmd pr + gmft m)\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  nsplitTree p (i + gmd pr) m = (l1, x, r1)\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)", "have \n          l_nd_r:\n          \"l = deepR pr l1 l2\"\n          \"nd = x2\"\n          \"r = deepL r2 r1 sf\""], ["proof (prove)\nusing this:\n  \\<not> p (i + gmd pr)\n  p (i + gmd pr + gmft m)\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  nsplitTree p (i + gmd pr) m = (l1, x, r1)\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)\n\ngoal (1 subgoal):\n 1. l = deepR pr l1 l2 &&& nd = x2 &&& r = deepL r2 r1 sf", "by auto"], ["proof (state)\nthis:\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "note dr1 = deepR_inv[OF l1_x_r1_inv(1) pr_m_sf_inv(1)]"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ?sf.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?sf \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepR pr l1 ?sf) \\<and>\n  is_measured_ftree (deepR pr l1 ?sf)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from dr1 l2_x2_r2_inv l2_x2_r2_list(2) l_nd_r"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set ?sf.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?sf \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepR pr l1 ?sf) \\<and>\n  is_measured_ftree (deepR pr l1 ?sf)\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x2 \\<and> is_leveln_node n x2\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf", "have \n          l_inv: \"is_leveln_ftree n l \\<and> is_measured_ftree l\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set ?sf.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?sf \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepR pr l1 ?sf) \\<and>\n  is_measured_ftree (deepR pr l1 ?sf)\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x2 \\<and> is_leveln_node n x2\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and> is_measured_ftree l", "by simp"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and> is_measured_ftree l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "note dl1 = deepL_inv[OF l1_x_r1_inv(2) pr_m_sf_inv(3)]"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ?pr.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?pr \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepL ?pr r1 sf) \\<and>\n  is_measured_ftree (deepL ?pr r1 sf)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from dl1 l2_x2_r2_inv l2_x2_r2_list(2) l_nd_r"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set ?pr.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?pr \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepL ?pr r1 sf) \\<and>\n  is_measured_ftree (deepL ?pr r1 sf)\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x2 \\<and> is_leveln_node n x2\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf", "have \n          r_inv: \"is_leveln_ftree n r \\<and> is_measured_ftree r\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set ?pr.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?pr \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepL ?pr r1 sf) \\<and>\n  is_measured_ftree (deepL ?pr r1 sf)\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x2 \\<and> is_leveln_node n x2\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n r \\<and> is_measured_ftree r", "by simp"], ["proof (state)\nthis:\n  is_leveln_ftree n r \\<and> is_measured_ftree r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l2_x2_r2_inv l_nd_r"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x2 \\<and> is_leveln_node n x2\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf", "have\n          nd_inv: \"is_leveln_node n nd \\<and> is_measured_node nd\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x2 \\<and> is_leveln_node n x2\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf\n\ngoal (1 subgoal):\n 1. is_leveln_node n nd \\<and> is_measured_node nd", "by simp"], ["proof (state)\nthis:\n  is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m; \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l_inv r_inv nd_inv"], ["proof (chain)\npicking this:\n  is_leveln_ftree n l \\<and> is_measured_ftree l\n  is_leveln_ftree n r \\<and> is_measured_ftree r\n  is_leveln_node n nd \\<and> is_measured_node nd", "show ?thesis"], ["proof (prove)\nusing this:\n  is_leveln_ftree n l \\<and> is_measured_ftree l\n  is_leveln_ftree n r \\<and> is_measured_ftree r\n  is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by simp"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nsplitTree_correct: \"\\<lbrakk>\n  is_leveln_ftree n (s:: ('e,'a::monoid_add) FingerTreeStruc);\n  is_measured_ftree s;  \n  \\<And>(a::'a) (b::'a). p a \\<Longrightarrow> p (a + b);\n  \\<not> p i; \n  p (i + (gmft s));\n  (nsplitTree p i s) = (l, nd, r)\\<rbrakk> \n  \\<Longrightarrow> (toList s) = (toList l) @ (nodeToList nd) @ (toList r) \n  \\<and>\n  \\<not> p (i + (gmft l))\n  \\<and>\n  p (i + (gmft l) + (gmn nd))\n  \\<and>\n  is_leveln_ftree n l\n  \\<and>\n  is_measured_ftree l\n  \\<and>\n  is_leveln_ftree n r\n  \\<and>\n  is_measured_ftree r\n  \\<and>\n  is_leveln_node n nd\n  \\<and>\n  is_measured_node nd\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_leveln_ftree n s; is_measured_ftree s;\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i; p (i + gmft s);\n     nsplitTree p i s = (l, nd, r)\\<rbrakk>\n    \\<Longrightarrow> toList s = toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "proof (induct p i s arbitrary: n l nd r rule: nsplitTree.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p i n l nd r.\n       \\<lbrakk>is_leveln_ftree n Empty; is_measured_ftree Empty;\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft Empty); nsplitTree p i Empty = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList Empty =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<And>p i ea n l nd r.\n       \\<lbrakk>is_leveln_ftree n (Single ea);\n        is_measured_ftree (Single ea);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Single ea));\n        nsplitTree p i (Single ea) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Single ea) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 3. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> toList m =\n                                     toList l @\n                                     nodeToList nd @ toList r \\<and>\n                                     \\<not> p (x + gmft l) \\<and>\n                                     p (x + gmft l + gmn nd) \\<and>\n                                     is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep uu_ pr m sf) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "case 1"], ["proof (state)\nthis:\n  is_leveln_ftree n Empty\n  is_measured_ftree Empty\n  p_ ?a \\<Longrightarrow> p_ (?a + ?b)\n  \\<not> p_ i_\n  p_ (i_ + gmft Empty)\n  nsplitTree p_ i_ Empty = (l, nd, r)\n\ngoal (3 subgoals):\n 1. \\<And>p i n l nd r.\n       \\<lbrakk>is_leveln_ftree n Empty; is_measured_ftree Empty;\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft Empty); nsplitTree p i Empty = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList Empty =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<And>p i ea n l nd r.\n       \\<lbrakk>is_leveln_ftree n (Single ea);\n        is_measured_ftree (Single ea);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Single ea));\n        nsplitTree p i (Single ea) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Single ea) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 3. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> toList m =\n                                     toList l @\n                                     nodeToList nd @ toList r \\<and>\n                                     \\<not> p (x + gmft l) \\<and>\n                                     p (x + gmft l + gmn nd) \\<and>\n                                     is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep uu_ pr m sf) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree n Empty\n  is_measured_ftree Empty\n  p_ ?a \\<Longrightarrow> p_ (?a + ?b)\n  \\<not> p_ i_\n  p_ (i_ + gmft Empty)\n  nsplitTree p_ i_ Empty = (l, nd, r)\n\ngoal (1 subgoal):\n 1. toList Empty = toList l @ nodeToList nd @ toList r \\<and>\n    \\<not> p_ (i_ + gmft l) \\<and>\n    p_ (i_ + gmft l + gmn nd) \\<and>\n    is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by auto"], ["proof (state)\nthis:\n  toList Empty = toList l @ nodeToList nd @ toList r \\<and>\n  \\<not> p_ (i_ + gmft l) \\<and>\n  p_ (i_ + gmft l + gmn nd) \\<and>\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (2 subgoals):\n 1. \\<And>p i ea n l nd r.\n       \\<lbrakk>is_leveln_ftree n (Single ea);\n        is_measured_ftree (Single ea);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Single ea));\n        nsplitTree p i (Single ea) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Single ea) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> toList m =\n                                     toList l @\n                                     nodeToList nd @ toList r \\<and>\n                                     \\<not> p (x + gmft l) \\<and>\n                                     p (x + gmft l + gmn nd) \\<and>\n                                     is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep uu_ pr m sf) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p i ea n l nd r.\n       \\<lbrakk>is_leveln_ftree n (Single ea);\n        is_measured_ftree (Single ea);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Single ea));\n        nsplitTree p i (Single ea) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Single ea) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> toList m =\n                                     toList l @\n                                     nodeToList nd @ toList r \\<and>\n                                     \\<not> p (x + gmft l) \\<and>\n                                     p (x + gmft l + gmn nd) \\<and>\n                                     is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep uu_ pr m sf) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "case 2"], ["proof (state)\nthis:\n  is_leveln_ftree n (Single ea_)\n  is_measured_ftree (Single ea_)\n  p_ ?a \\<Longrightarrow> p_ (?a + ?b)\n  \\<not> p_ i_\n  p_ (i_ + gmft (Single ea_))\n  nsplitTree p_ i_ (Single ea_) = (l, nd, r)\n\ngoal (2 subgoals):\n 1. \\<And>p i ea n l nd r.\n       \\<lbrakk>is_leveln_ftree n (Single ea);\n        is_measured_ftree (Single ea);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Single ea));\n        nsplitTree p i (Single ea) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Single ea) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> toList m =\n                                     toList l @\n                                     nodeToList nd @ toList r \\<and>\n                                     \\<not> p (x + gmft l) \\<and>\n                                     p (x + gmft l + gmn nd) \\<and>\n                                     is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep uu_ pr m sf) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "thus ?case"], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Single ea_)\n  is_measured_ftree (Single ea_)\n  p_ ?a \\<Longrightarrow> p_ (?a + ?b)\n  \\<not> p_ i_\n  p_ (i_ + gmft (Single ea_))\n  nsplitTree p_ i_ (Single ea_) = (l, nd, r)\n\ngoal (1 subgoal):\n 1. toList (Single ea_) = toList l @ nodeToList nd @ toList r \\<and>\n    \\<not> p_ (i_ + gmft l) \\<and>\n    p_ (i_ + gmft l + gmn nd) \\<and>\n    is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by auto"], ["proof (state)\nthis:\n  toList (Single ea_) = toList l @ nodeToList nd @ toList r \\<and>\n  \\<not> p_ (i_ + gmft l) \\<and>\n  p_ (i_ + gmft l + gmn nd) \\<and>\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> toList m =\n                                     toList l @\n                                     nodeToList nd @ toList r \\<and>\n                                     \\<not> p (x + gmft l) \\<and>\n                                     p (x + gmft l + gmn nd) \\<and>\n                                     is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep uu_ pr m sf) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> toList m =\n                                     toList l @\n                                     nodeToList nd @ toList r \\<and>\n                                     \\<not> p (x + gmft l) \\<and>\n                                     p (x + gmft l + gmn nd) \\<and>\n                                     is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep uu_ pr m sf) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "case (3 p i uu \"pr\" m sf n l nd r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList ?l @ nodeToList ?nd @ toList ?r \\<and>\n                    \\<not> p (?x + gmft ?l) \\<and>\n                    p (?x + gmft ?l + gmn ?nd) \\<and>\n                    is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n\ngoal (1 subgoal):\n 1. \\<And>p i uu_ pr m sf n l nd r.\n       \\<lbrakk>\\<And>x xa n l nd r.\n                   \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x;\n                    p xa; is_leveln_ftree n m; is_measured_ftree m;\n                    \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                    p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                   \\<Longrightarrow> toList m =\n                                     toList l @\n                                     nodeToList nd @ toList r \\<and>\n                                     \\<not> p (x + gmft l) \\<and>\n                                     p (x + gmft l + gmn nd) \\<and>\n                                     is_leveln_ftree n l \\<and>\n                                     is_measured_ftree l \\<and>\n                                     is_leveln_ftree n r \\<and>\n                                     is_measured_ftree r \\<and>\n                                     is_leveln_node n nd \\<and>\n                                     is_measured_node nd;\n        is_leveln_ftree n (Deep uu_ pr m sf);\n        is_measured_ftree (Deep uu_ pr m sf);\n        \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n        p (i + gmft (Deep uu_ pr m sf));\n        nsplitTree p i (Deep uu_ pr m sf) = (l, nd, r)\\<rbrakk>\n       \\<Longrightarrow> toList (Deep uu_ pr m sf) =\n                         toList l @ nodeToList nd @ toList r \\<and>\n                         \\<not> p (i + gmft l) \\<and>\n                         p (i + gmft l + gmn nd) \\<and>\n                         is_leveln_ftree n l \\<and>\n                         is_measured_ftree l \\<and>\n                         is_leveln_ftree n r \\<and>\n                         is_measured_ftree r \\<and>\n                         is_leveln_node n nd \\<and> is_measured_node nd", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList ?l @ nodeToList ?nd @ toList ?r \\<and>\n                    \\<not> p (?x + gmft ?l) \\<and>\n                    p (?x + gmft ?l + gmn ?nd) \\<and>\n                    is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n\ngoal (1 subgoal):\n 1. toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n    \\<not> p (i + gmft l) \\<and>\n    p (i + gmft l + gmn nd) \\<and>\n    is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "proof (cases \"p (i + gmd pr)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "case True"], ["proof (state)\nthis:\n  p (i + gmd pr)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with 3"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList ?l @ nodeToList ?nd @ toList ?r \\<and>\n                    \\<not> p (?x + gmft ?l) \\<and>\n                    p (?x + gmft ?l + gmn ?nd) \\<and>\n                    is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  p (i + gmd pr)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList ?l @ nodeToList ?nd @ toList ?r \\<and>\n                    \\<not> p (?x + gmft ?l) \\<and>\n                    p (?x + gmft ?l + gmn ?nd) \\<and>\n                    is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  p (i + gmd pr)\n\ngoal (1 subgoal):\n 1. toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n    \\<not> p (i + gmft l) \\<and>\n    p (i + gmft l + gmn nd) \\<and>\n    is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "obtain l1 x r1 where \n        l1xr1: \"splitDigit p i pr = (l1,x,r1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l1 x r1.\n        splitDigit p i pr = (l1, x, r1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"splitDigit p i pr\", blast)"], ["proof (state)\nthis:\n  splitDigit p i pr = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with True 3(7)"], ["proof (chain)\npicking this:\n  p (i + gmd pr)\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  splitDigit p i pr = (l1, x, r1)", "have \n        v1: \"l = nlistToTree l1\" \"nd = x\" \"r = deepL r1 m sf\""], ["proof (prove)\nusing this:\n  p (i + gmd pr)\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  splitDigit p i pr = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. l = nlistToTree l1 &&& nd = x &&& r = deepL r1 m sf", "by auto"], ["proof (state)\nthis:\n  l = nlistToTree l1\n  nd = x\n  r = deepL r1 m sf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1xr1"], ["proof (chain)\npicking this:\n  splitDigit p i pr = (l1, x, r1)", "have \n        v2: \"digitToList pr = nlistToList l1 @ nodeToList x @ nlistToList r1\"\n        \"length l1 \\<le> 4\" \"length r1 \\<le> 4\""], ["proof (prove)\nusing this:\n  splitDigit p i pr = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. digitToList pr = nlistToList l1 @ nodeToList x @ nlistToList r1 &&&\n    length l1 \\<le> 4 &&& length r1 \\<le> 4", "by (auto simp add: splitDigit_list)"], ["proof (state)\nthis:\n  digitToList pr = nlistToList l1 @ nodeToList x @ nlistToList r1\n  length l1 \\<le> 4\n  length r1 \\<le> 4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from 3(2,3)"], ["proof (chain)\npicking this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)", "have \n        pr_m_sf_inv: \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n        \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n        \"is_leveln_digit n sf \\<and> is_measured_digit sf\""], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n\ngoal (1 subgoal):\n 1. is_leveln_digit n pr \\<and> is_measured_digit pr &&&\n    is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m &&&\n    is_leveln_digit n sf \\<and> is_measured_digit sf", "by simp_all"], ["proof (state)\nthis:\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with 3(4,5) pr_m_sf_inv(1) True l1xr1  \n        splitDigit_inv[of p i \"pr\" n l1 x r1]"], ["proof (chain)\npicking this:\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  p (i + gmd pr)\n  splitDigit p i pr = (l1, x, r1)\n  \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n   is_measured_digit pr; is_leveln_digit n pr; p (i + gmd pr);\n   splitDigit p i pr = (l1, x, r1)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (i + gmnl l1) \\<and>\n                    p (i + gmnl l1 + gmn x) \\<and>\n                    (\\<forall>x\\<in>set l1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    (\\<forall>x\\<in>set r1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf", "have \n        l1_x_r1_inv: \n        \"\\<not> p (i + (gmnl l1))\"\n        \"p (i + (gmnl l1) + (gmn x))\"\n        \"\\<forall> x \\<in> set l1. (is_measured_node x \\<and> is_leveln_node n x)\"\n        \"\\<forall> x \\<in> set r1. (is_measured_node x \\<and> is_leveln_node n x)\"\n        \"is_measured_node x \\<and> is_leveln_node n x\""], ["proof (prove)\nusing this:\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  p (i + gmd pr)\n  splitDigit p i pr = (l1, x, r1)\n  \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n   is_measured_digit pr; is_leveln_digit n pr; p (i + gmd pr);\n   splitDigit p i pr = (l1, x, r1)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (i + gmnl l1) \\<and>\n                    p (i + gmnl l1 + gmn x) \\<and>\n                    (\\<forall>x\\<in>set l1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    (\\<forall>x\\<in>set r1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. (\\<not> p (i + gmnl l1) &&& p (i + gmnl l1 + gmn x)) &&&\n    \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x &&&\n    \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x &&&\n    is_measured_node x \\<and> is_leveln_node n x", "by auto"], ["proof (state)\nthis:\n  \\<not> p (i + gmnl l1)\n  p (i + gmnl l1 + gmn x)\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from v2 v1 l1_x_r1_inv(4) pr_m_sf_inv"], ["proof (chain)\npicking this:\n  digitToList pr = nlistToList l1 @ nodeToList x @ nlistToList r1\n  length l1 \\<le> 4\n  length r1 \\<le> 4\n  l = nlistToTree l1\n  nd = x\n  r = deepL r1 m sf\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf", "have             \n        ziel1: \"toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r\""], ["proof (prove)\nusing this:\n  digitToList pr = nlistToList l1 @ nodeToList x @ nlistToList r1\n  length l1 \\<le> 4\n  length r1 \\<le> 4\n  l = nlistToTree l1\n  nd = x\n  r = deepL r1 m sf\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r", "by (auto simp add: nlistToTree_list deepL_list)"], ["proof (state)\nthis:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1_x_r1_inv(3) v1(1)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  l = nlistToTree l1", "have \n        v3: \"gmft l = gmnl l1\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  l = nlistToTree l1\n\ngoal (1 subgoal):\n 1. gmft l = gmnl l1", "by (simp add: gmnl_gmft)"], ["proof (state)\nthis:\n  gmft l = gmnl l1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with l1_x_r1_inv(1,2) v1"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmnl l1)\n  p (i + gmnl l1 + gmn x)\n  l = nlistToTree l1\n  nd = x\n  r = deepL r1 m sf\n  gmft l = gmnl l1", "have\n        ziel2: \" \\<not> p (i + gmft l)\"\n        \"p (i + gmft l + gmn nd)\""], ["proof (prove)\nusing this:\n  \\<not> p (i + gmnl l1)\n  p (i + gmnl l1 + gmn x)\n  l = nlistToTree l1\n  nd = x\n  r = deepL r1 m sf\n  gmft l = gmnl l1\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmft l) &&& p (i + gmft l + gmn nd)", "by simp_all"], ["proof (state)\nthis:\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1_x_r1_inv(3,4,5) v1 v2(3) pr_m_sf_inv"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n  l = nlistToTree l1\n  nd = x\n  r = deepL r1 m sf\n  length r1 \\<le> 4\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf", "have\n        ziel3: \"is_leveln_ftree n l \\<and> is_measured_ftree l \\<and>\n        is_leveln_ftree n r \\<and> is_measured_ftree r \\<and> \n        is_leveln_node n nd \\<and> is_measured_node nd\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n  l = nlistToTree l1\n  nd = x\n  r = deepL r1 m sf\n  length r1 \\<le> 4\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by (auto simp add: nlistToTree_inv deepL_inv)"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from ziel1 ziel2 ziel3"], ["proof (chain)\npicking this:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd", "show ?thesis"], ["proof (prove)\nusing this:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n    \\<not> p (i + gmft l) \\<and>\n    p (i + gmft l + gmn nd) \\<and>\n    is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by simp"], ["proof (state)\nthis:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n  \\<not> p (i + gmft l) \\<and>\n  p (i + gmft l + gmn nd) \\<and>\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n  \\<not> p (i + gmft l) \\<and>\n  p (i + gmft l + gmn nd) \\<and>\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "case False"], ["proof (state)\nthis:\n  \\<not> p (i + gmd pr)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "note case1 = this"], ["proof (state)\nthis:\n  \\<not> p (i + gmd pr)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with 3"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList ?l @ nodeToList ?nd @ toList ?r \\<and>\n                    \\<not> p (?x + gmft ?l) \\<and>\n                    p (?x + gmft ?l + gmn ?nd) \\<and>\n                    is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  \\<not> p (i + gmd pr)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList ?l @ nodeToList ?nd @ toList ?r \\<and>\n                    \\<not> p (?x + gmft ?l) \\<and>\n                    p (?x + gmft ?l + gmn ?nd) \\<and>\n                    is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  \\<not> p (i + gmd pr)\n\ngoal (1 subgoal):\n 1. toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n    \\<not> p (i + gmft l) \\<and>\n    p (i + gmft l + gmn nd) \\<and>\n    is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "proof (cases \"p (i + gmd pr + gmft m)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "case False"], ["proof (state)\nthis:\n  \\<not> p (i + gmd pr + gmft m)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd\n 2. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with case1 3"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList ?l @ nodeToList ?nd @ toList ?r \\<and>\n                    \\<not> p (?x + gmft ?l) \\<and>\n                    p (?x + gmft ?l + gmn ?nd) \\<and>\n                    is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  \\<not> p (i + gmd pr + gmft m)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList ?l @ nodeToList ?nd @ toList ?r \\<and>\n                    \\<not> p (?x + gmft ?l) \\<and>\n                    p (?x + gmft ?l + gmn ?nd) \\<and>\n                    is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  \\<not> p (i + gmd pr + gmft m)\n\ngoal (1 subgoal):\n 1. toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n    \\<not> p (i + gmft l) \\<and>\n    p (i + gmft l + gmn nd) \\<and>\n    is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "obtain l1 x r1 where \n          l1xr1: \"splitDigit p (i + gmd pr + gmft m) sf = (l1,x,r1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l1 x r1.\n        splitDigit p (i + gmd pr + gmft m) sf =\n        (l1, x, r1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"splitDigit p (i + gmd pr + gmft m) sf\", blast)"], ["proof (state)\nthis:\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with case1 False 3(7)"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmd pr)\n  \\<not> p (i + gmd pr + gmft m)\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)", "have \n          v1: \"l = deepR pr m l1\" \"nd = x\" \"r = nlistToTree r1\""], ["proof (prove)\nusing this:\n  \\<not> p (i + gmd pr)\n  \\<not> p (i + gmd pr + gmft m)\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. l = deepR pr m l1 &&& nd = x &&& r = nlistToTree r1", "by auto"], ["proof (state)\nthis:\n  l = deepR pr m l1\n  nd = x\n  r = nlistToTree r1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1xr1"], ["proof (chain)\npicking this:\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)", "have \n          v2: \"digitToList sf = nlistToList l1 @ nodeToList x @ nlistToList r1\"\n          \"length l1 \\<le> 4\" \"length r1 \\<le> 4\""], ["proof (prove)\nusing this:\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. digitToList sf = nlistToList l1 @ nodeToList x @ nlistToList r1 &&&\n    length l1 \\<le> 4 &&& length r1 \\<le> 4", "by (auto simp add: splitDigit_list)"], ["proof (state)\nthis:\n  digitToList sf = nlistToList l1 @ nodeToList x @ nlistToList r1\n  length l1 \\<le> 4\n  length r1 \\<le> 4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from 3(2,3)"], ["proof (chain)\npicking this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)", "have \n          pr_m_sf_inv: \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n          \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n          \"is_leveln_digit n sf \\<and> is_measured_digit sf\""], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n\ngoal (1 subgoal):\n 1. is_leveln_digit n pr \\<and> is_measured_digit pr &&&\n    is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m &&&\n    is_leveln_digit n sf \\<and> is_measured_digit sf", "by simp_all"], ["proof (state)\nthis:\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from 3(3,6)"], ["proof (chain)\npicking this:\n  is_measured_ftree (Deep uu pr m sf)\n  p (i + gmft (Deep uu pr m sf))", "have \n          v7: \"p (i + gmd pr + gmft m + gmd sf)\""], ["proof (prove)\nusing this:\n  is_measured_ftree (Deep uu pr m sf)\n  p (i + gmft (Deep uu pr m sf))\n\ngoal (1 subgoal):\n 1. p (i + gmd pr + gmft m + gmd sf)", "by (auto simp add: add.assoc)"], ["proof (state)\nthis:\n  p (i + gmd pr + gmft m + gmd sf)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with pr_m_sf_inv 3(4) pr_m_sf_inv(3) case1 False l1xr1  \n             splitDigit_inv[of p \"i + gmd pr + gmft m\" sf n l1 x r1]"], ["proof (chain)\npicking this:\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<not> p (i + gmd pr)\n  \\<not> p (i + gmd pr + gmft m)\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\n  \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b);\n   \\<not> p (i + gmd pr + gmft m); is_measured_digit sf;\n   is_leveln_digit n sf; p (i + gmd pr + gmft m + gmd sf);\n   splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (i + gmd pr + gmft m + gmnl l1) \\<and>\n                    p (i + gmd pr + gmft m + gmnl l1 + gmn x) \\<and>\n                    (\\<forall>x\\<in>set l1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    (\\<forall>x\\<in>set r1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    is_measured_node x \\<and> is_leveln_node n x\n  p (i + gmd pr + gmft m + gmd sf)", "have l1_x_r1_inv: \n          \"\\<not> p (i + gmd pr + gmft m + gmnl l1)\"\n          \"p (i + gmd pr + gmft m + gmnl l1 + gmn x)\"\n          \"\\<forall> x \\<in> set l1. (is_measured_node x \\<and> is_leveln_node n x)\"\n          \"\\<forall> x \\<in> set r1. (is_measured_node x \\<and> is_leveln_node n x)\"\n          \"is_measured_node x \\<and> is_leveln_node n x\""], ["proof (prove)\nusing this:\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<not> p (i + gmd pr)\n  \\<not> p (i + gmd pr + gmft m)\n  splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\n  \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b);\n   \\<not> p (i + gmd pr + gmft m); is_measured_digit sf;\n   is_leveln_digit n sf; p (i + gmd pr + gmft m + gmd sf);\n   splitDigit p (i + gmd pr + gmft m) sf = (l1, x, r1)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (i + gmd pr + gmft m + gmnl l1) \\<and>\n                    p (i + gmd pr + gmft m + gmnl l1 + gmn x) \\<and>\n                    (\\<forall>x\\<in>set l1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    (\\<forall>x\\<in>set r1.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    is_measured_node x \\<and> is_leveln_node n x\n  p (i + gmd pr + gmft m + gmd sf)\n\ngoal (1 subgoal):\n 1. (\\<not> p (i + gmd pr + gmft m + gmnl l1) &&&\n     p (i + gmd pr + gmft m + gmnl l1 + gmn x)) &&&\n    \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x &&&\n    \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x &&&\n    is_measured_node x \\<and> is_leveln_node n x", "by auto"], ["proof (state)\nthis:\n  \\<not> p (i + gmd pr + gmft m + gmnl l1)\n  p (i + gmd pr + gmft m + gmnl l1 + gmn x)\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from v2 v1 l1_x_r1_inv(3) pr_m_sf_inv"], ["proof (chain)\npicking this:\n  digitToList sf = nlistToList l1 @ nodeToList x @ nlistToList r1\n  length l1 \\<le> 4\n  length r1 \\<le> 4\n  l = deepR pr m l1\n  nd = x\n  r = nlistToTree r1\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf", "have             \n          ziel1: \"toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r\""], ["proof (prove)\nusing this:\n  digitToList sf = nlistToList l1 @ nodeToList x @ nlistToList r1\n  length l1 \\<le> 4\n  length r1 \\<le> 4\n  l = deepR pr m l1\n  nd = x\n  r = nlistToTree r1\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r", "by (auto simp add: nlistToTree_list deepR_list)"], ["proof (state)\nthis:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1_x_r1_inv(4) v1(3)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  r = nlistToTree r1", "have \n          v3: \"gmft r = gmnl r1\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  r = nlistToTree r1\n\ngoal (1 subgoal):\n 1. gmft r = gmnl r1", "by (simp add: gmnl_gmft)"], ["proof (state)\nthis:\n  gmft r = gmnl r1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with l1_x_r1_inv(1,2,3) pr_m_sf_inv v1 v2"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmd pr + gmft m + gmnl l1)\n  p (i + gmd pr + gmft m + gmnl l1 + gmn x)\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  l = deepR pr m l1\n  nd = x\n  r = nlistToTree r1\n  digitToList sf = nlistToList l1 @ nodeToList x @ nlistToList r1\n  length l1 \\<le> 4\n  length r1 \\<le> 4\n  gmft r = gmnl r1", "have\n          ziel2: \" \\<not> p (i + gmft l)\"\n          \"p (i + gmft l + gmn nd)\""], ["proof (prove)\nusing this:\n  \\<not> p (i + gmd pr + gmft m + gmnl l1)\n  p (i + gmd pr + gmft m + gmnl l1 + gmn x)\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  l = deepR pr m l1\n  nd = x\n  r = nlistToTree r1\n  digitToList sf = nlistToList l1 @ nodeToList x @ nlistToList r1\n  length l1 \\<le> 4\n  length r1 \\<le> 4\n  gmft r = gmnl r1\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmft l) &&& p (i + gmft l + gmn nd)", "by (auto simp add: gmftR_gmnl add.assoc)"], ["proof (state)\nthis:\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1_x_r1_inv(3,4,5) v1 v2(2) pr_m_sf_inv"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n  l = deepR pr m l1\n  nd = x\n  r = nlistToTree r1\n  length l1 \\<le> 4\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf", "have\n          ziel3: \"is_leveln_ftree n l \\<and> is_measured_ftree l \\<and>\n          is_leveln_ftree n r \\<and> is_measured_ftree r \\<and> \n          is_leveln_node n nd \\<and> is_measured_node nd\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set l1. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r1. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x \\<and> is_leveln_node n x\n  l = deepR pr m l1\n  nd = x\n  r = nlistToTree r1\n  length l1 \\<le> 4\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by (auto simp add: nlistToTree_inv deepR_inv)"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     \\<not> p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from ziel1 ziel2 ziel3"], ["proof (chain)\npicking this:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd", "show ?thesis"], ["proof (prove)\nusing this:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n    \\<not> p (i + gmft l) \\<and>\n    p (i + gmft l + gmn nd) \\<and>\n    is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by simp"], ["proof (state)\nthis:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n  \\<not> p (i + gmft l) \\<and>\n  p (i + gmft l + gmn nd) \\<and>\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n  \\<not> p (i + gmft l) \\<and>\n  p (i + gmft l + gmn nd) \\<and>\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "case True"], ["proof (state)\nthis:\n  p (i + gmd pr + gmft m)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x xa n l nd r.\n                \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n                 is_leveln_ftree n m; is_measured_ftree m;\n                 \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n                 p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n                \\<Longrightarrow> toList m =\n                                  toList l @ nodeToList nd @ toList r \\<and>\n                                  \\<not> p (x + gmft l) \\<and>\n                                  p (x + gmft l + gmn nd) \\<and>\n                                  is_leveln_ftree n l \\<and>\n                                  is_measured_ftree l \\<and>\n                                  is_leveln_ftree n r \\<and>\n                                  is_measured_ftree r \\<and>\n                                  is_leveln_node n nd \\<and>\n                                  is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r); \\<not> p (i + gmd pr);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with case1 3"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList ?l @ nodeToList ?nd @ toList ?r \\<and>\n                    \\<not> p (?x + gmft ?l) \\<and>\n                    p (?x + gmft ?l + gmn ?nd) \\<and>\n                    is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  p (i + gmd pr + gmft m)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>?x = i + gmd pr; ?xa = ?x + gmft m; \\<not> p ?x; p ?xa;\n   is_leveln_ftree ?n m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p ?x; p (?x + gmft m);\n   nsplitTree p ?x m = (?l, ?nd, ?r)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList ?l @ nodeToList ?nd @ toList ?r \\<and>\n                    \\<not> p (?x + gmft ?l) \\<and>\n                    p (?x + gmft ?l + gmn ?nd) \\<and>\n                    is_leveln_ftree ?n ?l \\<and>\n                    is_measured_ftree ?l \\<and>\n                    is_leveln_ftree ?n ?r \\<and>\n                    is_measured_ftree ?r \\<and>\n                    is_leveln_node ?n ?nd \\<and> is_measured_node ?nd\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  \\<not> p i\n  p (i + gmft (Deep uu pr m sf))\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  p (i + gmd pr + gmft m)\n\ngoal (1 subgoal):\n 1. toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n    \\<not> p (i + gmft l) \\<and>\n    p (i + gmft l + gmn nd) \\<and>\n    is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "obtain l1 x r1 where \n          l1_x_r1 :\"nsplitTree p (i + gmd pr) m = (l1, x, r1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l1 x r1.\n        nsplitTree p (i + gmd pr) m = (l1, x, r1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"nsplitTree p (i + gmd pr) m\") blast"], ["proof (state)\nthis:\n  nsplitTree p (i + gmd pr) m = (l1, x, r1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from 3(2,3)"], ["proof (chain)\npicking this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)", "have \n          pr_m_sf_inv: \"is_leveln_digit n pr \\<and> is_measured_digit pr\"\n          \"is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\"\n          \"is_leveln_digit n sf \\<and> is_measured_digit sf\""], ["proof (prove)\nusing this:\n  is_leveln_ftree n (Deep uu pr m sf)\n  is_measured_ftree (Deep uu pr m sf)\n\ngoal (1 subgoal):\n 1. is_leveln_digit n pr \\<and> is_measured_digit pr &&&\n    is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m &&&\n    is_leveln_digit n sf \\<and> is_measured_digit sf", "by simp_all"], ["proof (state)\nthis:\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with True case1 \n          \"3.hyps\"[of \"i + gmd pr\" \"i + gmd pr + gmft m\" \"Suc n\" l1 x r1] \n          3(4) l1_x_r1"], ["proof (chain)\npicking this:\n  p (i + gmd pr + gmft m)\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>i + gmd pr = i + gmd pr;\n   i + gmd pr + gmft m = i + gmd pr + gmft m; \\<not> p (i + gmd pr);\n   p (i + gmd pr + gmft m); is_leveln_ftree (Suc n) m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p (i + gmd pr);\n   p (i + gmd pr + gmft m);\n   nsplitTree p (i + gmd pr) m = (l1, x, r1)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList l1 @ nodeToList x @ toList r1 \\<and>\n                    \\<not> p (i + gmd pr + gmft l1) \\<and>\n                    p (i + gmd pr + gmft l1 + gmn x) \\<and>\n                    is_leveln_ftree (Suc n) l1 \\<and>\n                    is_measured_ftree l1 \\<and>\n                    is_leveln_ftree (Suc n) r1 \\<and>\n                    is_measured_ftree r1 \\<and>\n                    is_leveln_node (Suc n) x \\<and> is_measured_node x\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  nsplitTree p (i + gmd pr) m = (l1, x, r1)\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf", "have l1_x_r1_inv: \n          \"\\<not> p (i + gmd pr + gmft l1)\"\n          \"p (i + gmd pr + gmft l1 + gmn x)\"\n          \"is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\"\n          \"is_leveln_ftree (Suc n) r1 \\<and> is_measured_ftree r1\"\n          \"is_leveln_node (Suc n) x \\<and> is_measured_node x\"\n          and l1_x_r1_list:\n          \"toList m = toList l1 @ nodeToList x @ toList r1\""], ["proof (prove)\nusing this:\n  p (i + gmd pr + gmft m)\n  \\<not> p (i + gmd pr)\n  \\<lbrakk>i + gmd pr = i + gmd pr;\n   i + gmd pr + gmft m = i + gmd pr + gmft m; \\<not> p (i + gmd pr);\n   p (i + gmd pr + gmft m); is_leveln_ftree (Suc n) m; is_measured_ftree m;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p (i + gmd pr);\n   p (i + gmd pr + gmft m);\n   nsplitTree p (i + gmd pr) m = (l1, x, r1)\\<rbrakk>\n  \\<Longrightarrow> toList m = toList l1 @ nodeToList x @ toList r1 \\<and>\n                    \\<not> p (i + gmd pr + gmft l1) \\<and>\n                    p (i + gmd pr + gmft l1 + gmn x) \\<and>\n                    is_leveln_ftree (Suc n) l1 \\<and>\n                    is_measured_ftree l1 \\<and>\n                    is_leveln_ftree (Suc n) r1 \\<and>\n                    is_measured_ftree r1 \\<and>\n                    is_leveln_node (Suc n) x \\<and> is_measured_node x\n  p ?a \\<Longrightarrow> p (?a + ?b)\n  nsplitTree p (i + gmd pr) m = (l1, x, r1)\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  is_leveln_ftree (Suc n) m \\<and> is_measured_ftree m\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n\ngoal (1 subgoal):\n 1. ((\\<not> p (i + gmd pr + gmft l1) &&&\n      p (i + gmd pr + gmft l1 + gmn x)) &&&\n     is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1 &&&\n     is_leveln_ftree (Suc n) r1 \\<and> is_measured_ftree r1 &&&\n     is_leveln_node (Suc n) x \\<and> is_measured_node x) &&&\n    toList m = toList l1 @ nodeToList x @ toList r1", "by auto"], ["proof (state)\nthis:\n  \\<not> p (i + gmd pr + gmft l1)\n  p (i + gmd pr + gmft l1 + gmn x)\n  is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\n  is_leveln_ftree (Suc n) r1 \\<and> is_measured_ftree r1\n  is_leveln_node (Suc n) x \\<and> is_measured_node x\n  toList m = toList l1 @ nodeToList x @ toList r1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "obtain l2 x2 r2 where l2_x2_r2: \n          \"splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2,x2,r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l2 x2 r2.\n        splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) =\n        (l2, x2, r2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x)\",blast)"], ["proof (state)\nthis:\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1_x_r1_inv(2,5)"], ["proof (chain)\npicking this:\n  p (i + gmd pr + gmft l1 + gmn x)\n  is_leveln_node (Suc n) x \\<and> is_measured_node x", "have\n          ndx_inv: \"is_leveln_digit n (nodeToDigit x) \\<and>\n          is_measured_digit (nodeToDigit x)\"\n          \"p (i + gmd pr + gmft l1 + gmd (nodeToDigit x))\""], ["proof (prove)\nusing this:\n  p (i + gmd pr + gmft l1 + gmn x)\n  is_leveln_node (Suc n) x \\<and> is_measured_node x\n\ngoal (1 subgoal):\n 1. is_leveln_digit n (nodeToDigit x) \\<and>\n    is_measured_digit (nodeToDigit x) &&&\n    p (i + gmd pr + gmft l1 + gmd (nodeToDigit x))", "by (auto simp add: nodeToDigit_inv gmn_gmd)"], ["proof (state)\nthis:\n  is_leveln_digit n (nodeToDigit x) \\<and> is_measured_digit (nodeToDigit x)\n  p (i + gmd pr + gmft l1 + gmd (nodeToDigit x))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "note spdi = splitDigit_inv[of p \"i + gmd pr + gmft l1\" \n                                      \"nodeToDigit x\" n l2 x2 r2]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>a b. p a \\<Longrightarrow> p (a + b);\n   \\<not> p (i + gmd pr + gmft l1); is_measured_digit (nodeToDigit x);\n   is_leveln_digit n (nodeToDigit x);\n   p (i + gmd pr + gmft l1 + gmd (nodeToDigit x));\n   splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) =\n   (l2, x2, r2)\\<rbrakk>\n  \\<Longrightarrow> \\<not> p (i + gmd pr + gmft l1 + gmnl l2) \\<and>\n                    p (i + gmd pr + gmft l1 + gmnl l2 + gmn x2) \\<and>\n                    (\\<forall>x\\<in>set l2.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    (\\<forall>x\\<in>set r2.\n                        is_measured_node x \\<and> is_leveln_node n x) \\<and>\n                    is_measured_node x2 \\<and> is_leveln_node n x2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from ndx_inv l1_x_r1_inv(1) l2_x2_r2 3(4)"], ["proof (chain)\npicking this:\n  is_leveln_digit n (nodeToDigit x) \\<and> is_measured_digit (nodeToDigit x)\n  p (i + gmd pr + gmft l1 + gmd (nodeToDigit x))\n  \\<not> p (i + gmd pr + gmft l1)\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)\n  p ?a \\<Longrightarrow> p (?a + ?b)", "have\n          l2_x2_r2_inv:\"\\<not> p (i + gmd pr + gmft l1 + gmnl l2)\"\n          \"p (i + gmd pr + gmft l1 + gmnl l2 + gmn x2)\"\n          \"\\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\"\n          \"\\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\"\n          \"is_measured_node x2 \\<and> is_leveln_node n x2\""], ["proof (prove)\nusing this:\n  is_leveln_digit n (nodeToDigit x) \\<and> is_measured_digit (nodeToDigit x)\n  p (i + gmd pr + gmft l1 + gmd (nodeToDigit x))\n  \\<not> p (i + gmd pr + gmft l1)\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)\n  p ?a \\<Longrightarrow> p (?a + ?b)\n\ngoal (1 subgoal):\n 1. (\\<not> p (i + gmd pr + gmft l1 + gmnl l2) &&&\n     p (i + gmd pr + gmft l1 + gmnl l2 + gmn x2)) &&&\n    \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x &&&\n    \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x &&&\n    is_measured_node x2 \\<and> is_leveln_node n x2", "by (auto simp add: spdi)"], ["proof (state)\nthis:\n  \\<not> p (i + gmd pr + gmft l1 + gmnl l2)\n  p (i + gmd pr + gmft l1 + gmnl l2 + gmn x2)\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x2 \\<and> is_leveln_node n x2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "note spdl =  splitDigit_list[of p \"i + gmd pr + gmft l1\" \n                                        \"nodeToDigit x\" l2 x2 r2]"], ["proof (state)\nthis:\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) =\n  (l2, x2, r2) \\<Longrightarrow>\n  digitToList (nodeToDigit x) =\n  nlistToList l2 @ nodeToList x2 @ nlistToList r2 \\<and>\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l2_x2_r2"], ["proof (chain)\npicking this:\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)", "have\n          l2_x2_r2_list: \n          \"digitToList (nodeToDigit x) = \n            nlistToList l2 @ nodeToList x2 @ nlistToList r2\"\n          \"length l2 \\<le> 4 \\<and> length r2 \\<le> 4\""], ["proof (prove)\nusing this:\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)\n\ngoal (1 subgoal):\n 1. digitToList (nodeToDigit x) =\n    nlistToList l2 @ nodeToList x2 @ nlistToList r2 &&&\n    length l2 \\<le> 4 \\<and> length r2 \\<le> 4", "by (auto simp add: spdl)"], ["proof (state)\nthis:\n  digitToList (nodeToDigit x) =\n  nlistToList l2 @ nodeToList x2 @ nlistToList r2\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from case1 True 3(7) l1_x_r1 l2_x2_r2"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmd pr)\n  p (i + gmd pr + gmft m)\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  nsplitTree p (i + gmd pr) m = (l1, x, r1)\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)", "have \n          l_nd_r:\n          \"l = deepR pr l1 l2\"\n          \"nd = x2\"\n          \"r = deepL r2 r1 sf\""], ["proof (prove)\nusing this:\n  \\<not> p (i + gmd pr)\n  p (i + gmd pr + gmft m)\n  nsplitTree p i (Deep uu pr m sf) = (l, nd, r)\n  nsplitTree p (i + gmd pr) m = (l1, x, r1)\n  splitDigit p (i + gmd pr + gmft l1) (nodeToDigit x) = (l2, x2, r2)\n\ngoal (1 subgoal):\n 1. l = deepR pr l1 l2 &&& nd = x2 &&& r = deepL r2 r1 sf", "by auto"], ["proof (state)\nthis:\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "note dr1 = deepR_inv[OF l1_x_r1_inv(3) pr_m_sf_inv(1)]"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ?sf.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?sf \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepR pr l1 ?sf) \\<and>\n  is_measured_ftree (deepR pr l1 ?sf)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from dr1 l2_x2_r2_inv(3) l2_x2_r2_list(2) l_nd_r"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set ?sf.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?sf \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepR pr l1 ?sf) \\<and>\n  is_measured_ftree (deepR pr l1 ?sf)\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf", "have \n          l_inv: \"is_leveln_ftree n l \\<and> is_measured_ftree l\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set ?sf.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?sf \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepR pr l1 ?sf) \\<and>\n  is_measured_ftree (deepR pr l1 ?sf)\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n l \\<and> is_measured_ftree l", "by simp"], ["proof (state)\nthis:\n  is_leveln_ftree n l \\<and> is_measured_ftree l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "note dl1 = deepL_inv[OF l1_x_r1_inv(4) pr_m_sf_inv(3)]"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ?pr.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?pr \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepL ?pr r1 sf) \\<and>\n  is_measured_ftree (deepL ?pr r1 sf)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from dl1 l2_x2_r2_inv(4) l2_x2_r2_list(2) l_nd_r"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set ?pr.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?pr \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepL ?pr r1 sf) \\<and>\n  is_measured_ftree (deepL ?pr r1 sf)\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf", "have \n          r_inv: \"is_leveln_ftree n r \\<and> is_measured_ftree r\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set ?pr.\n     (is_measured_node x \\<and> is_leveln_node n x) \\<and>\n     length ?pr \\<le> 4 \\<Longrightarrow>\n  is_leveln_ftree n (deepL ?pr r1 sf) \\<and>\n  is_measured_ftree (deepL ?pr r1 sf)\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf\n\ngoal (1 subgoal):\n 1. is_leveln_ftree n r \\<and> is_measured_ftree r", "by simp"], ["proof (state)\nthis:\n  is_leveln_ftree n r \\<and> is_measured_ftree r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l2_x2_r2_inv l_nd_r"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmd pr + gmft l1 + gmnl l2)\n  p (i + gmd pr + gmft l1 + gmnl l2 + gmn x2)\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x2 \\<and> is_leveln_node n x2\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf", "have\n          nd_inv: \"is_leveln_node n nd \\<and> is_measured_node nd\""], ["proof (prove)\nusing this:\n  \\<not> p (i + gmd pr + gmft l1 + gmnl l2)\n  p (i + gmd pr + gmft l1 + gmnl l2 + gmn x2)\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  is_measured_node x2 \\<and> is_leveln_node n x2\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf\n\ngoal (1 subgoal):\n 1. is_leveln_node n nd \\<and> is_measured_node nd", "by simp"], ["proof (state)\nthis:\n  is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l_nd_r(1,2) l2_x2_r2_inv(1,2,3) \n             l1_x_r1_inv(3) l2_x2_r2_list(2) pr_m_sf_inv(1)"], ["proof (chain)\npicking this:\n  l = deepR pr l1 l2\n  nd = x2\n  \\<not> p (i + gmd pr + gmft l1 + gmnl l2)\n  p (i + gmd pr + gmft l1 + gmnl l2 + gmn x2)\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  is_leveln_digit n pr \\<and> is_measured_digit pr", "have split_point:\n          \" \\<not> p (i + gmft l)\"\n          \"p (i + gmft l + gmn nd)\""], ["proof (prove)\nusing this:\n  l = deepR pr l1 l2\n  nd = x2\n  \\<not> p (i + gmd pr + gmft l1 + gmnl l2)\n  p (i + gmd pr + gmft l1 + gmnl l2 + gmn x2)\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n\ngoal (1 subgoal):\n 1. \\<not> p (i + gmft l) &&& p (i + gmft l + gmn nd)", "by (auto simp add: gmftR_gmnl add.assoc)"], ["proof (state)\nthis:\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l2_x2_r2_list"], ["proof (chain)\npicking this:\n  digitToList (nodeToDigit x) =\n  nlistToList l2 @ nodeToList x2 @ nlistToList r2\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4", "have x_list: \n          \"nodeToList x = nlistToList l2 @ nodeToList x2 @ nlistToList r2\""], ["proof (prove)\nusing this:\n  digitToList (nodeToDigit x) =\n  nlistToList l2 @ nodeToList x2 @ nlistToList r2\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n\ngoal (1 subgoal):\n 1. nodeToList x = nlistToList l2 @ nodeToList x2 @ nlistToList r2", "by (simp add: nodeToDigit_list)"], ["proof (state)\nthis:\n  nodeToList x = nlistToList l2 @ nodeToList x2 @ nlistToList r2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1_x_r1_inv(3) pr_m_sf_inv(1) \n             l2_x2_r2_inv(3) l2_x2_r2_list(2) l_nd_r(1)"], ["proof (chain)\npicking this:\n  is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  l = deepR pr l1 l2", "have l_list: \"toList l = digitToList pr @ toList l1 @ nlistToList l2\""], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) l1 \\<and> is_measured_ftree l1\n  is_leveln_digit n pr \\<and> is_measured_digit pr\n  \\<forall>x\\<in>set l2. is_measured_node x \\<and> is_leveln_node n x\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  l = deepR pr l1 l2\n\ngoal (1 subgoal):\n 1. toList l = digitToList pr @ toList l1 @ nlistToList l2", "by (auto simp add: deepR_list)"], ["proof (state)\nthis:\n  toList l = digitToList pr @ toList l1 @ nlistToList l2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from l1_x_r1_inv(4) pr_m_sf_inv(3) l2_x2_r2_inv(4) \n             l2_x2_r2_list(2) l_nd_r(3)"], ["proof (chain)\npicking this:\n  is_leveln_ftree (Suc n) r1 \\<and> is_measured_ftree r1\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  r = deepL r2 r1 sf", "have r_list: \"toList r = nlistToList r2 @ toList r1 @ digitToList sf\""], ["proof (prove)\nusing this:\n  is_leveln_ftree (Suc n) r1 \\<and> is_measured_ftree r1\n  is_leveln_digit n sf \\<and> is_measured_digit sf\n  \\<forall>x\\<in>set r2. is_measured_node x \\<and> is_leveln_node n x\n  length l2 \\<le> 4 \\<and> length r2 \\<le> 4\n  r = deepL r2 r1 sf\n\ngoal (1 subgoal):\n 1. toList r = nlistToList r2 @ toList r1 @ digitToList sf", "by (auto simp add: deepL_list)"], ["proof (state)\nthis:\n  toList r = nlistToList r2 @ toList r1 @ digitToList sf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "from x_list l1_x_r1_list l_list r_list l_nd_r"], ["proof (chain)\npicking this:\n  nodeToList x = nlistToList l2 @ nodeToList x2 @ nlistToList r2\n  toList m = toList l1 @ nodeToList x @ toList r1\n  toList l = digitToList pr @ toList l1 @ nlistToList l2\n  toList r = nlistToList r2 @ toList r1 @ digitToList sf\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf", "have  \"toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r\""], ["proof (prove)\nusing this:\n  nodeToList x = nlistToList l2 @ nodeToList x2 @ nlistToList r2\n  toList m = toList l1 @ nodeToList x @ toList r1\n  toList l = digitToList pr @ toList l1 @ nlistToList l2\n  toList r = nlistToList r2 @ toList r1 @ digitToList sf\n  l = deepR pr l1 l2\n  nd = x2\n  r = deepL r2 r1 sf\n\ngoal (1 subgoal):\n 1. toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r", "by auto"], ["proof (state)\nthis:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> p (i + gmd pr);\n     \\<And>x xa n l nd r.\n        \\<lbrakk>x = i + gmd pr; xa = x + gmft m; \\<not> p x; p xa;\n         is_leveln_ftree n m; is_measured_ftree m;\n         \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p x;\n         p (x + gmft m); nsplitTree p x m = (l, nd, r)\\<rbrakk>\n        \\<Longrightarrow> toList m =\n                          toList l @ nodeToList nd @ toList r \\<and>\n                          \\<not> p (x + gmft l) \\<and>\n                          p (x + gmft l + gmn nd) \\<and>\n                          is_leveln_ftree n l \\<and>\n                          is_measured_ftree l \\<and>\n                          is_leveln_ftree n r \\<and>\n                          is_measured_ftree r \\<and>\n                          is_leveln_node n nd \\<and> is_measured_node nd;\n     is_leveln_ftree n (Deep uu pr m sf);\n     is_measured_ftree (Deep uu pr m sf);\n     \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i;\n     p (i + gmft (Deep uu pr m sf));\n     nsplitTree p i (Deep uu pr m sf) = (l, nd, r);\n     p (i + gmd pr + gmft m)\\<rbrakk>\n    \\<Longrightarrow> toList (Deep uu pr m sf) =\n                      toList l @ nodeToList nd @ toList r \\<and>\n                      \\<not> p (i + gmft l) \\<and>\n                      p (i + gmft l + gmn nd) \\<and>\n                      is_leveln_ftree n l \\<and>\n                      is_measured_ftree l \\<and>\n                      is_leveln_ftree n r \\<and>\n                      is_measured_ftree r \\<and>\n                      is_leveln_node n nd \\<and> is_measured_node nd", "with split_point l_inv r_inv nd_inv"], ["proof (chain)\npicking this:\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n  is_leveln_ftree n l \\<and> is_measured_ftree l\n  is_leveln_ftree n r \\<and> is_measured_ftree r\n  is_leveln_node n nd \\<and> is_measured_node nd\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n  is_leveln_ftree n l \\<and> is_measured_ftree l\n  is_leveln_ftree n r \\<and> is_measured_ftree r\n  is_leveln_node n nd \\<and> is_measured_node nd\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r\n\ngoal (1 subgoal):\n 1. toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n    \\<not> p (i + gmft l) \\<and>\n    p (i + gmft l + gmn nd) \\<and>\n    is_leveln_ftree n l \\<and>\n    is_measured_ftree l \\<and>\n    is_leveln_ftree n r \\<and>\n    is_measured_ftree r \\<and>\n    is_leveln_node n nd \\<and> is_measured_node nd", "by simp"], ["proof (state)\nthis:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n  \\<not> p (i + gmft l) \\<and>\n  p (i + gmft l + gmn nd) \\<and>\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n  \\<not> p (i + gmft l) \\<and>\n  p (i + gmft l + gmn nd) \\<and>\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n  \\<not> p (i + gmft l) \\<and>\n  p (i + gmft l + gmn nd) \\<and>\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  toList (Deep uu pr m sf) = toList l @ nodeToList nd @ toList r \\<and>\n  \\<not> p (i + gmft l) \\<and>\n  p (i + gmft l + gmn nd) \\<and>\n  is_leveln_ftree n l \\<and>\n  is_measured_ftree l \\<and>\n  is_leveln_ftree n r \\<and>\n  is_measured_ftree r \\<and> is_leveln_node n nd \\<and> is_measured_node nd\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  A predicate on the elements of a monoid is called {\\em monotone},\n  iff, when it holds for some value $a$, it also holds for all values $a+b$:\n\\<close>"], ["", "text \\<open>Split a finger tree by a monotone predicate on the annotations, using\n    a given initial value. Intuitively, the elements are summed up from left to \n    right, and the split is done when the predicate first holds for the sum.\n    The predicate must not hold for the initial value of the summation, and must\n    hold for the sum of all elements.\n\\<close>"], ["", "definition splitTree \n  :: \"('a::monoid_add \\<Rightarrow> bool) \\<Rightarrow> 'a \\<Rightarrow> ('e, 'a) FingerTreeStruc \n    \\<Rightarrow> ('e, 'a) FingerTreeStruc \\<times> ('e \\<times> 'a) \\<times> ('e, 'a) FingerTreeStruc\" \n  where\n  \"splitTree p i t = (let (l, x, r) = nsplitTree p i t in (l, (n_unwrap x), r))\""], ["", "lemma splitTree_invpres: \n  assumes inv: \"ft_invar (s:: ('e,'a::monoid_add) FingerTreeStruc)\"\n  assumes init_ff: \"\\<not> p i\"\n  assumes sum_tt: \"p (i + annot s)\"\n  assumes fmt: \"(splitTree p i s) = (l, (e,a), r)\"\n  shows \"ft_invar l\" and \"ft_invar r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ft_invar l &&& ft_invar r", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. ft_invar l\n 2. ft_invar r", "obtain l1 nd r1 where \n    l1_nd_r1: \"nsplitTree p i s = (l1, nd, r1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l1 nd r1.\n        nsplitTree p i s = (l1, nd, r1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"nsplitTree p i s\", blast)"], ["proof (state)\nthis:\n  nsplitTree p i s = (l1, nd, r1)\n\ngoal (2 subgoals):\n 1. ft_invar l\n 2. ft_invar r", "with assms"], ["proof (chain)\npicking this:\n  ft_invar s\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)\n  nsplitTree p i s = (l1, nd, r1)", "have \n    l0: \"l = l1\"\n    \"(e,a) = n_unwrap nd\"\n    \"r = r1\""], ["proof (prove)\nusing this:\n  ft_invar s\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)\n  nsplitTree p i s = (l1, nd, r1)\n\ngoal (1 subgoal):\n 1. l = l1 &&& (e, a) = n_unwrap nd &&& r = r1", "by (auto simp add: splitTree_def)"], ["proof (state)\nthis:\n  l = l1\n  (e, a) = n_unwrap nd\n  r = r1\n\ngoal (2 subgoals):\n 1. ft_invar l\n 2. ft_invar r", "note nsp = nsplitTree_invpres[of 0 s p i l1 nd r1]"], ["proof (state)\nthis:\n  \\<lbrakk>is_leveln_ftree 0 s; is_measured_ftree s; \\<not> p i;\n   p (i + gmft s); nsplitTree p i s = (l1, nd, r1)\\<rbrakk>\n  \\<Longrightarrow> is_leveln_ftree 0 l1 \\<and>\n                    is_measured_ftree l1 \\<and>\n                    is_leveln_ftree 0 r1 \\<and>\n                    is_measured_ftree r1 \\<and>\n                    is_leveln_node 0 nd \\<and> is_measured_node nd\n\ngoal (2 subgoals):\n 1. ft_invar l\n 2. ft_invar r", "from assms"], ["proof (chain)\npicking this:\n  ft_invar s\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)", "have \"p (i + gmft s)\""], ["proof (prove)\nusing this:\n  ft_invar s\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)\n\ngoal (1 subgoal):\n 1. p (i + gmft s)", "by (simp add:  ft_invar_def annot_def)"], ["proof (state)\nthis:\n  p (i + gmft s)\n\ngoal (2 subgoals):\n 1. ft_invar l\n 2. ft_invar r", "with assms l1_nd_r1 l0"], ["proof (chain)\npicking this:\n  ft_invar s\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)\n  nsplitTree p i s = (l1, nd, r1)\n  l = l1\n  (e, a) = n_unwrap nd\n  r = r1\n  p (i + gmft s)", "have \n    v1:\n    \"is_leveln_ftree 0 l \\<and> is_measured_ftree l\"\n    \"is_leveln_ftree 0 r \\<and> is_measured_ftree r\"\n    \"is_leveln_node 0 nd  \\<and> is_measured_node nd\""], ["proof (prove)\nusing this:\n  ft_invar s\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)\n  nsplitTree p i s = (l1, nd, r1)\n  l = l1\n  (e, a) = n_unwrap nd\n  r = r1\n  p (i + gmft s)\n\ngoal (1 subgoal):\n 1. is_leveln_ftree 0 l \\<and> is_measured_ftree l &&&\n    is_leveln_ftree 0 r \\<and> is_measured_ftree r &&&\n    is_leveln_node 0 nd \\<and> is_measured_node nd", "by (auto simp add: nsp ft_invar_def)"], ["proof (state)\nthis:\n  is_leveln_ftree 0 l \\<and> is_measured_ftree l\n  is_leveln_ftree 0 r \\<and> is_measured_ftree r\n  is_leveln_node 0 nd \\<and> is_measured_node nd\n\ngoal (2 subgoals):\n 1. ft_invar l\n 2. ft_invar r", "thus \"ft_invar l\" and \"ft_invar r\""], ["proof (prove)\nusing this:\n  is_leveln_ftree 0 l \\<and> is_measured_ftree l\n  is_leveln_ftree 0 r \\<and> is_measured_ftree r\n  is_leveln_node 0 nd \\<and> is_measured_node nd\n\ngoal (1 subgoal):\n 1. ft_invar l &&& ft_invar r", "by (simp_all add: ft_invar_def annot_def)"], ["proof (state)\nthis:\n  ft_invar l\n  ft_invar r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma splitTree_correct: \n  assumes inv: \"ft_invar (s:: ('e,'a::monoid_add) FingerTreeStruc)\"\n  assumes mono: \"\\<forall>a b. p a \\<longrightarrow> p (a + b)\"\n  assumes init_ff: \"\\<not> p i\"\n  assumes sum_tt: \"p (i + annot s)\"\n  assumes fmt: \"(splitTree p i s) = (l, (e,a), r)\"\n  shows \"(toList s) = (toList l) @ (e,a) # (toList r)\"\n  and   \"\\<not> p (i + annot l)\"\n  and   \"p (i + annot l + a)\"\n  and   \"ft_invar l\" and \"ft_invar r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (toList s = toList l @ (e, a) # toList r &&& \\<not> p (i + annot l)) &&&\n    p (i + annot l + a) &&& ft_invar l &&& ft_invar r", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. toList s = toList l @ (e, a) # toList r\n 2. \\<not> p (i + annot l)\n 3. p (i + annot l + a)\n 4. ft_invar l\n 5. ft_invar r", "obtain l1 nd r1 where \n    l1_nd_r1: \"nsplitTree p i s = (l1, nd, r1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l1 nd r1.\n        nsplitTree p i s = (l1, nd, r1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"nsplitTree p i s\", blast)"], ["proof (state)\nthis:\n  nsplitTree p i s = (l1, nd, r1)\n\ngoal (5 subgoals):\n 1. toList s = toList l @ (e, a) # toList r\n 2. \\<not> p (i + annot l)\n 3. p (i + annot l + a)\n 4. ft_invar l\n 5. ft_invar r", "with assms"], ["proof (chain)\npicking this:\n  ft_invar s\n  \\<forall>a b. p a \\<longrightarrow> p (a + b)\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)\n  nsplitTree p i s = (l1, nd, r1)", "have \n    l0: \"l = l1\"\n    \"(e,a) = n_unwrap nd\"\n    \"r = r1\""], ["proof (prove)\nusing this:\n  ft_invar s\n  \\<forall>a b. p a \\<longrightarrow> p (a + b)\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)\n  nsplitTree p i s = (l1, nd, r1)\n\ngoal (1 subgoal):\n 1. l = l1 &&& (e, a) = n_unwrap nd &&& r = r1", "by (auto simp add: splitTree_def)"], ["proof (state)\nthis:\n  l = l1\n  (e, a) = n_unwrap nd\n  r = r1\n\ngoal (5 subgoals):\n 1. toList s = toList l @ (e, a) # toList r\n 2. \\<not> p (i + annot l)\n 3. p (i + annot l + a)\n 4. ft_invar l\n 5. ft_invar r", "note nsp = nsplitTree_correct[of 0 s p i l1 nd r1]"], ["proof (state)\nthis:\n  \\<lbrakk>is_leveln_ftree 0 s; is_measured_ftree s;\n   \\<And>a b. p a \\<Longrightarrow> p (a + b); \\<not> p i; p (i + gmft s);\n   nsplitTree p i s = (l1, nd, r1)\\<rbrakk>\n  \\<Longrightarrow> toList s = toList l1 @ nodeToList nd @ toList r1 \\<and>\n                    \\<not> p (i + gmft l1) \\<and>\n                    p (i + gmft l1 + gmn nd) \\<and>\n                    is_leveln_ftree 0 l1 \\<and>\n                    is_measured_ftree l1 \\<and>\n                    is_leveln_ftree 0 r1 \\<and>\n                    is_measured_ftree r1 \\<and>\n                    is_leveln_node 0 nd \\<and> is_measured_node nd\n\ngoal (5 subgoals):\n 1. toList s = toList l @ (e, a) # toList r\n 2. \\<not> p (i + annot l)\n 3. p (i + annot l + a)\n 4. ft_invar l\n 5. ft_invar r", "from assms"], ["proof (chain)\npicking this:\n  ft_invar s\n  \\<forall>a b. p a \\<longrightarrow> p (a + b)\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)", "have \"p (i + gmft s)\""], ["proof (prove)\nusing this:\n  ft_invar s\n  \\<forall>a b. p a \\<longrightarrow> p (a + b)\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)\n\ngoal (1 subgoal):\n 1. p (i + gmft s)", "by (simp add:  ft_invar_def annot_def)"], ["proof (state)\nthis:\n  p (i + gmft s)\n\ngoal (5 subgoals):\n 1. toList s = toList l @ (e, a) # toList r\n 2. \\<not> p (i + annot l)\n 3. p (i + annot l + a)\n 4. ft_invar l\n 5. ft_invar r", "with assms l1_nd_r1 l0"], ["proof (chain)\npicking this:\n  ft_invar s\n  \\<forall>a b. p a \\<longrightarrow> p (a + b)\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)\n  nsplitTree p i s = (l1, nd, r1)\n  l = l1\n  (e, a) = n_unwrap nd\n  r = r1\n  p (i + gmft s)", "have \n    v1:\n    \"(toList s) = (toList l) @ (nodeToList nd) @ (toList r)\" \n    \"\\<not> p (i + (gmft l))\"\n    \"p (i + (gmft l) + (gmn nd))\"\n    \"is_leveln_ftree 0 l \\<and> is_measured_ftree l\"\n    \"is_leveln_ftree 0 r \\<and> is_measured_ftree r\"\n    \"is_leveln_node 0 nd  \\<and> is_measured_node nd\""], ["proof (prove)\nusing this:\n  ft_invar s\n  \\<forall>a b. p a \\<longrightarrow> p (a + b)\n  \\<not> p i\n  p (i + annot s)\n  splitTree p i s = (l, (e, a), r)\n  nsplitTree p i s = (l1, nd, r1)\n  l = l1\n  (e, a) = n_unwrap nd\n  r = r1\n  p (i + gmft s)\n\ngoal (1 subgoal):\n 1. (toList s = toList l @ nodeToList nd @ toList r &&&\n     \\<not> p (i + gmft l) &&& p (i + gmft l + gmn nd)) &&&\n    is_leveln_ftree 0 l \\<and> is_measured_ftree l &&&\n    is_leveln_ftree 0 r \\<and> is_measured_ftree r &&&\n    is_leveln_node 0 nd \\<and> is_measured_node nd", "by (auto simp add: nsp ft_invar_def)"], ["proof (state)\nthis:\n  toList s = toList l @ nodeToList nd @ toList r\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n  is_leveln_ftree 0 l \\<and> is_measured_ftree l\n  is_leveln_ftree 0 r \\<and> is_measured_ftree r\n  is_leveln_node 0 nd \\<and> is_measured_node nd\n\ngoal (5 subgoals):\n 1. toList s = toList l @ (e, a) # toList r\n 2. \\<not> p (i + annot l)\n 3. p (i + annot l + a)\n 4. ft_invar l\n 5. ft_invar r", "from v1(6) l0(2)"], ["proof (chain)\npicking this:\n  is_leveln_node 0 nd \\<and> is_measured_node nd\n  (e, a) = n_unwrap nd", "have \n    ndea: \"nd = Tip e a\""], ["proof (prove)\nusing this:\n  is_leveln_node 0 nd \\<and> is_measured_node nd\n  (e, a) = n_unwrap nd\n\ngoal (1 subgoal):\n 1. nd = Tip e a", "by (cases nd)  auto"], ["proof (state)\nthis:\n  nd = Tip e a\n\ngoal (5 subgoals):\n 1. toList s = toList l @ (e, a) # toList r\n 2. \\<not> p (i + annot l)\n 3. p (i + annot l + a)\n 4. ft_invar l\n 5. ft_invar r", "hence nd_list_inv: \"nodeToList nd = [(e,a)]\"\n    \"gmn nd = a\""], ["proof (prove)\nusing this:\n  nd = Tip e a\n\ngoal (1 subgoal):\n 1. nodeToList nd = [(e, a)] &&& gmn nd = a", "by simp_all"], ["proof (state)\nthis:\n  nodeToList nd = [(e, a)]\n  gmn nd = a\n\ngoal (5 subgoals):\n 1. toList s = toList l @ (e, a) # toList r\n 2. \\<not> p (i + annot l)\n 3. p (i + annot l + a)\n 4. ft_invar l\n 5. ft_invar r", "with v1"], ["proof (chain)\npicking this:\n  toList s = toList l @ nodeToList nd @ toList r\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n  is_leveln_ftree 0 l \\<and> is_measured_ftree l\n  is_leveln_ftree 0 r \\<and> is_measured_ftree r\n  is_leveln_node 0 nd \\<and> is_measured_node nd\n  nodeToList nd = [(e, a)]\n  gmn nd = a", "show  \"(toList s) = (toList l) @ (e,a) # (toList r)\"\n    and   \"\\<not> p (i + annot l)\"\n    and   \"p (i + annot l + a)\"\n    and   \"ft_invar l\" and \"ft_invar r\""], ["proof (prove)\nusing this:\n  toList s = toList l @ nodeToList nd @ toList r\n  \\<not> p (i + gmft l)\n  p (i + gmft l + gmn nd)\n  is_leveln_ftree 0 l \\<and> is_measured_ftree l\n  is_leveln_ftree 0 r \\<and> is_measured_ftree r\n  is_leveln_node 0 nd \\<and> is_measured_node nd\n  nodeToList nd = [(e, a)]\n  gmn nd = a\n\ngoal (1 subgoal):\n 1. (toList s = toList l @ (e, a) # toList r &&& \\<not> p (i + annot l)) &&&\n    p (i + annot l + a) &&& ft_invar l &&& ft_invar r", "by (simp_all add: ft_invar_def annot_def)"], ["proof (state)\nthis:\n  toList s = toList l @ (e, a) # toList r\n  \\<not> p (i + annot l)\n  p (i + annot l + a)\n  ft_invar l\n  ft_invar r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma splitTree_correctE: \n  assumes inv: \"ft_invar (s:: ('e,'a::monoid_add) FingerTreeStruc)\"\n  assumes mono: \"\\<forall>a b. p a \\<longrightarrow> p (a + b)\"\n  assumes init_ff: \"\\<not> p i\"\n  assumes sum_tt: \"p (i + annot s)\"\n  obtains l e a r where\n    \"(splitTree p i s) = (l, (e,a), r)\" and\n    \"(toList s) = (toList l) @ (e,a) # (toList r)\" and\n    \"\\<not> p (i + annot l)\" and\n    \"p (i + annot l + a)\" and\n    \"ft_invar l\" and \"ft_invar r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l e a r.\n        \\<lbrakk>splitTree p i s = (l, (e, a), r);\n         toList s = toList l @ (e, a) # toList r; \\<not> p (i + annot l);\n         p (i + annot l + a); ft_invar l; ft_invar r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>l e a r.\n        \\<lbrakk>splitTree p i s = (l, (e, a), r);\n         toList s = toList l @ (e, a) # toList r; \\<not> p (i + annot l);\n         p (i + annot l + a); ft_invar l; ft_invar r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain l e a r where fmt: \"(splitTree p i s) = (l, (e,a), r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l e a r.\n        splitTree p i s = (l, (e, a), r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"(splitTree p i s)\") auto"], ["proof (state)\nthis:\n  splitTree p i s = (l, (e, a), r)\n\ngoal (1 subgoal):\n 1. (\\<And>l e a r.\n        \\<lbrakk>splitTree p i s = (l, (e, a), r);\n         toList s = toList l @ (e, a) # toList r; \\<not> p (i + annot l);\n         p (i + annot l + a); ft_invar l; ft_invar r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from splitTree_correct[of s p, OF assms fmt] fmt"], ["proof (chain)\npicking this:\n  toList s = toList l @ (e, a) # toList r\n  \\<not> p (i + annot l)\n  p (i + annot l + a)\n  ft_invar l\n  ft_invar r\n  splitTree p i s = (l, (e, a), r)", "show ?thesis"], ["proof (prove)\nusing this:\n  toList s = toList l @ (e, a) # toList r\n  \\<not> p (i + annot l)\n  p (i + annot l + a)\n  ft_invar l\n  ft_invar r\n  splitTree p i s = (l, (e, a), r)\n\ngoal (1 subgoal):\n 1. thesis", "by (blast intro: that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Folding\\<close>"], ["", "fun foldl_node :: \"('s \\<Rightarrow> 'e \\<times> 'a \\<Rightarrow> 's) \\<Rightarrow> 's \\<Rightarrow> ('e,'a) Node \\<Rightarrow> 's\" where\n  \"foldl_node f \\<sigma> (Tip e a) = f \\<sigma> (e,a)\"|\n  \"foldl_node f \\<sigma> (Node2 _ a b) = foldl_node f (foldl_node f \\<sigma> a) b\"|\n  \"foldl_node f \\<sigma> (Node3 _ a b c) = \n    foldl_node f (foldl_node f (foldl_node f \\<sigma> a) b) c\""], ["", "primrec foldl_digit :: \"('s \\<Rightarrow> 'e \\<times> 'a \\<Rightarrow> 's) \\<Rightarrow> 's \\<Rightarrow> ('e,'a) Digit \\<Rightarrow> 's\" where\n  \"foldl_digit f \\<sigma> (One n1) = foldl_node f \\<sigma> n1\"|\n  \"foldl_digit f \\<sigma> (Two n1 n2) = foldl_node f (foldl_node f \\<sigma> n1) n2\"|\n  \"foldl_digit f \\<sigma> (Three n1 n2 n3) = \n    foldl_node f (foldl_node f (foldl_node f \\<sigma> n1) n2) n3\"|\n  \"foldl_digit f \\<sigma> (Four n1 n2 n3 n4) = \n    foldl_node f (foldl_node f (foldl_node f (foldl_node f \\<sigma> n1) n2) n3) n4\""], ["", "primrec foldr_node :: \"('e \\<times> 'a \\<Rightarrow> 's \\<Rightarrow> 's) \\<Rightarrow> ('e,'a) Node \\<Rightarrow> 's  \\<Rightarrow> 's\" where\n  \"foldr_node f (Tip e a) \\<sigma> = f (e,a) \\<sigma> \"|\n  \"foldr_node f (Node2 _ a b) \\<sigma> = foldr_node f a (foldr_node f b \\<sigma>)\"|\n  \"foldr_node f (Node3 _ a b c) \\<sigma> \n    = foldr_node f a (foldr_node f b (foldr_node f c \\<sigma>))\""], ["", "primrec foldr_digit :: \"('e \\<times> 'a \\<Rightarrow> 's \\<Rightarrow> 's) \\<Rightarrow> ('e,'a) Digit \\<Rightarrow> 's \\<Rightarrow> 's\" where\n  \"foldr_digit f (One n1) \\<sigma> = foldr_node f n1 \\<sigma>\"|\n  \"foldr_digit f (Two n1 n2) \\<sigma> = foldr_node f n1 (foldr_node f n2 \\<sigma>)\"|\n  \"foldr_digit f (Three n1 n2 n3) \\<sigma> =\n    foldr_node f n1 (foldr_node f n2 (foldr_node f n3 \\<sigma>))\"|\n  \"foldr_digit f (Four n1 n2 n3 n4) \\<sigma> =\n    foldr_node f n1 (foldr_node f n2 (foldr_node f n3 (foldr_node f n4 \\<sigma>)))\""], ["", "lemma foldl_node_correct: \n  \"foldl_node f \\<sigma> nd = List.foldl f \\<sigma> (nodeToList nd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_node f \\<sigma> nd = foldl f \\<sigma> (nodeToList nd)", "by (induct nd arbitrary: \"\\<sigma>\") (auto simp add: nodeToList_def)"], ["", "lemma foldl_digit_correct:\n  \"foldl_digit f \\<sigma> d = List.foldl f \\<sigma> (digitToList d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_digit f \\<sigma> d = foldl f \\<sigma> (digitToList d)", "by (induct d arbitrary: \"\\<sigma>\") (auto \n    simp add: digitToList_def foldl_node_correct)"], ["", "lemma foldr_node_correct: \n  \"foldr_node f nd \\<sigma> = List.foldr f (nodeToList nd) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr_node f nd \\<sigma> = foldr f (nodeToList nd) \\<sigma>", "by (induct nd arbitrary: \"\\<sigma>\") (auto simp add: nodeToList_def)"], ["", "lemma foldr_digit_correct:\n  \"foldr_digit f d \\<sigma> = List.foldr f (digitToList d) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr_digit f d \\<sigma> = foldr f (digitToList d) \\<sigma>", "by (induct d arbitrary: \"\\<sigma>\") (auto \n    simp add: digitToList_def foldr_node_correct)"], ["", "text \"Fold from left\""], ["", "primrec foldl :: \"('s \\<Rightarrow> 'e \\<times> 'a \\<Rightarrow> 's) \\<Rightarrow> 's \\<Rightarrow> ('e,'a) FingerTreeStruc \\<Rightarrow> 's\"\n  where\n  \"foldl f \\<sigma> Empty = \\<sigma>\"|\n  \"foldl f \\<sigma> (Single nd) = foldl_node f \\<sigma> nd\"|\n  \"foldl f \\<sigma> (Deep _ d1 m d2) = \n    foldl_digit f (foldl f (foldl_digit f \\<sigma> d1) m) d2\""], ["", "lemma foldl_correct:\n  \"foldl f \\<sigma> t = List.foldl f \\<sigma> (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.foldl f \\<sigma> t = List.foldl f \\<sigma> (toList t)", "by (induct t arbitrary: \"\\<sigma>\") (auto \n    simp add: toList_def foldl_node_correct foldl_digit_correct)"], ["", "text \"Fold from right\""], ["", "primrec foldr :: \"('e \\<times> 'a \\<Rightarrow> 's \\<Rightarrow> 's) \\<Rightarrow> ('e,'a) FingerTreeStruc \\<Rightarrow> 's \\<Rightarrow> 's\"\n  where\n  \"foldr f Empty \\<sigma> = \\<sigma>\"|\n  \"foldr f (Single nd) \\<sigma> = foldr_node f nd \\<sigma>\"|\n  \"foldr f (Deep _ d1 m d2) \\<sigma> \n    = foldr_digit f d1 (foldr f m(foldr_digit f d2 \\<sigma>))\""], ["", "lemma foldr_correct:\n  \"foldr f t \\<sigma> = List.foldr f (toList t) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.foldr f t \\<sigma> = List.foldr f (toList t) \\<sigma>", "by (induct t arbitrary: \"\\<sigma>\") (auto \n    simp add: toList_def foldr_node_correct foldr_digit_correct)"], ["", "subsubsection \"Number of elements\""], ["", "primrec count_node :: \"('e, 'a) Node \\<Rightarrow> nat\" where\n  \"count_node (Tip _ a) = 1\" |\n  \"count_node (Node2 _ a b) = count_node a + count_node b\" |\n  \"count_node (Node3 _ a b c) = count_node a + count_node b + count_node c\""], ["", "primrec count_digit :: \"('e,'a) Digit \\<Rightarrow> nat\" where\n  \"count_digit (One a) = count_node a\" |\n  \"count_digit (Two a b) = count_node a + count_node b\" |\n  \"count_digit (Three a b c) = count_node a + count_node b + count_node c\" |\n  \"count_digit (Four a b c d) \n    = count_node a + count_node b + count_node c + count_node d\""], ["", "lemma count_node_correct:\n  \"count_node n = length (nodeToList n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count_node n = length (nodeToList n)", "by (induct n,auto simp add: nodeToList_def count_node_def)"], ["", "lemma count_digit_correct:\n  \"count_digit d = length (digitToList d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count_digit d = length (digitToList d)", "by (cases d, auto simp add: digitToList_def count_digit_def count_node_correct)"], ["", "primrec count :: \"('e,'a) FingerTreeStruc \\<Rightarrow> nat\" where \n  \"count Empty = 0\" |\n  \"count (Single a) = count_node a\" |\n  \"count (Deep _ pr m sf) = count_digit pr + count m + count_digit sf\""], ["", "lemma count_correct[simp]:\n  \"count t = length (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count t = length (toList t)", "by (induct t, \n    auto simp add: toList_def count_def \n                   count_digit_correct count_node_correct)"], ["", "end"], ["", "(* Expose finger tree functions as qualified names.\n  Generate code equations *)"], ["", "interpretation FingerTreeStruc: FingerTreeStruc_loc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "(* Hide the concrete syntax *)"], ["", "no_notation FingerTreeStruc.lcons (infixr \"\\<lhd>\" 65)"], ["", "no_notation FingerTreeStruc.rcons (infixl \"\\<rhd>\" 65)"], ["", "subsection \"Hiding the invariant\""], ["", "text_raw\\<open>\\label{sec:hide_invar}\\<close>"], ["", "text \\<open>\n  In this section, we define the datatype of all FingerTrees that fulfill their\n  invariant, and define the operations to work on this datatype.\n  The advantage is, that the correctness lemmas do no longer contain \n  explicit invariant predicates, what makes them more handy to use.\n\\<close>"], ["", "subsubsection \"Datatype\""], ["", "typedef (overloaded) ('e, 'a) FingerTree = \n  \"{t :: ('e, 'a::monoid_add) FingerTreeStruc. FingerTreeStruc.ft_invar t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {t. FingerTreeStruc.ft_invar t}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {t. FingerTreeStruc.ft_invar t}", "have \"Empty \\<in> ?FingerTree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Empty \\<in> {t. FingerTreeStruc.ft_invar t}", "by (simp)"], ["proof (state)\nthis:\n  Empty \\<in> {t. FingerTreeStruc.ft_invar t}\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {t. FingerTreeStruc.ft_invar t}", "then"], ["proof (chain)\npicking this:\n  Empty \\<in> {t. FingerTreeStruc.ft_invar t}", "show ?thesis"], ["proof (prove)\nusing this:\n  Empty \\<in> {t. FingerTreeStruc.ft_invar t}\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {t. FingerTreeStruc.ft_invar t}", ".."], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> {t. FingerTreeStruc.ft_invar t}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Rep_FingerTree_invar[simp]: \"FingerTreeStruc.ft_invar (Rep_FingerTree t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.ft_invar (Rep_FingerTree t)", "using Rep_FingerTree"], ["proof (prove)\nusing this:\n  Rep_FingerTree ?x \\<in> {t. FingerTreeStruc.ft_invar t}\n\ngoal (1 subgoal):\n 1. FingerTreeStruc.ft_invar (Rep_FingerTree t)", "by simp"], ["", "lemma [simp]: \n  \"FingerTreeStruc.ft_invar t \\<Longrightarrow> Rep_FingerTree (Abs_FingerTree t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.ft_invar t \\<Longrightarrow>\n    Rep_FingerTree (Abs_FingerTree t) = t", "using Abs_FingerTree_inverse"], ["proof (prove)\nusing this:\n  ?y \\<in> {t. FingerTreeStruc.ft_invar t} \\<Longrightarrow>\n  Rep_FingerTree (Abs_FingerTree ?y) = ?y\n\ngoal (1 subgoal):\n 1. FingerTreeStruc.ft_invar t \\<Longrightarrow>\n    Rep_FingerTree (Abs_FingerTree t) = t", "by simp"], ["", "lemma [simp, code abstype]: \"Abs_FingerTree (Rep_FingerTree t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_FingerTree (Rep_FingerTree t) = t", "by (rule Rep_FingerTree_inverse)"], ["", "typedef (overloaded) ('e,'a) viewres =\n  \"{ r:: (('e \\<times> 'a) \\<times> ('e,'a::monoid_add) FingerTreeStruc) option . \n    case r of None \\<Rightarrow> True | Some (a,t) \\<Rightarrow> FingerTreeStruc.ft_invar t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<in> {r. case r of None \\<Rightarrow> True\n                   | Some (a, t) \\<Rightarrow> FingerTreeStruc.ft_invar t}", "apply (rule_tac x=None in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. None\n    \\<in> {r. case r of None \\<Rightarrow> True\n              | Some (a, t) \\<Rightarrow> FingerTreeStruc.ft_invar t}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [simp, code abstype]: \"Abs_viewres (Rep_viewres x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_viewres (Rep_viewres x) = x", "by (rule Rep_viewres_inverse)"], ["", "lemma Abs_viewres_inverse_None[simp]: \n  \"Rep_viewres (Abs_viewres None) = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_viewres (Abs_viewres None) = None", "by (simp add: Abs_viewres_inverse)"], ["", "lemma Abs_viewres_inverse_Some: \n  \"FingerTreeStruc.ft_invar t \\<Longrightarrow> \n    Rep_viewres (Abs_viewres (Some (a,t))) = Some (a,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.ft_invar t \\<Longrightarrow>\n    Rep_viewres (Abs_viewres (Some (a, t))) = Some (a, t)", "by (auto simp add: Abs_viewres_inverse)"], ["", "definition [code]: \"extract_viewres_isNone r == Rep_viewres r = None\""], ["", "definition [code]: \"extract_viewres_a r == \n    case (Rep_viewres r) of Some (a,t) \\<Rightarrow> a\""], ["", "definition \"extract_viewres_t r == \n  case (Rep_viewres r) of None \\<Rightarrow> Abs_FingerTree Empty \n                        | Some (a,t) \\<Rightarrow> Abs_FingerTree t\""], ["", "lemma [code abstract]: \"Rep_FingerTree (extract_viewres_t r) = \n    (case (Rep_viewres r) of None \\<Rightarrow> Empty | Some (a,t) \\<Rightarrow> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree (extract_viewres_t r) =\n    (case Rep_viewres r of None \\<Rightarrow> Empty\n     | Some (a, t) \\<Rightarrow> t)", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>r = Abs_viewres y;\n        y \\<in> {r. case r of None \\<Rightarrow> True\n                    | Some (a, t) \\<Rightarrow>\n                        FingerTreeStruc.ft_invar t}\\<rbrakk>\n       \\<Longrightarrow> Rep_FingerTree (extract_viewres_t r) =\n                         (case Rep_viewres r of None \\<Rightarrow> Empty\n                          | Some (a, t) \\<Rightarrow> t)", "apply (auto split: option.split option.split_asm \n             simp add: extract_viewres_t_def Abs_viewres_inverse_Some)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"extract_viewres r == \n    if extract_viewres_isNone r then None \n    else Some (extract_viewres_a r, extract_viewres_t r)\""], ["", "typedef (overloaded) ('e,'a) splitres =\n  \"{ ((l,a,r):: (('e,'a) FingerTreeStruc \\<times> ('e \\<times> 'a) \\<times> ('e,'a::monoid_add) FingerTreeStruc))\n    | l a r.\n        FingerTreeStruc.ft_invar l \\<and> FingerTreeStruc.ft_invar r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<in> {(l, a, r) |l a r.\n                FingerTreeStruc.ft_invar l \\<and>\n                FingerTreeStruc.ft_invar r}", "apply (rule_tac x=\"(Empty,undefined,Empty)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Empty, undefined, Empty)\n    \\<in> {(l, a, r) |l a r.\n           FingerTreeStruc.ft_invar l \\<and> FingerTreeStruc.ft_invar r}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [simp, code abstype]: \"Abs_splitres (Rep_splitres x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_splitres (Rep_splitres x) = x", "by (rule Rep_splitres_inverse)"], ["", "lemma Abs_splitres_inverse: \n  \"FingerTreeStruc.ft_invar r \\<Longrightarrow> FingerTreeStruc.ft_invar s \\<Longrightarrow> \n      Rep_splitres (Abs_splitres ((r,a,s))) = (r,a,s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>FingerTreeStruc.ft_invar r; FingerTreeStruc.ft_invar s\\<rbrakk>\n    \\<Longrightarrow> Rep_splitres (Abs_splitres (r, a, s)) = (r, a, s)", "by (auto simp add: Abs_splitres_inverse)"], ["", "definition [code]: \"extract_splitres_a r == case (Rep_splitres r) of (l,a,s) \\<Rightarrow> a\""], ["", "definition \"extract_splitres_l r == case (Rep_splitres r) of (l,a,r) \\<Rightarrow> \n    Abs_FingerTree l\""], ["", "lemma [code abstract]: \"Rep_FingerTree (extract_splitres_l r) = (case \n    (Rep_splitres r) of (l,a,r) \\<Rightarrow> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree (extract_splitres_l r) =\n    (case Rep_splitres r of (l, a, r) \\<Rightarrow> l)", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>r = Abs_splitres y;\n        y \\<in> {(l, a, r) |l a r.\n                 FingerTreeStruc.ft_invar l \\<and>\n                 FingerTreeStruc.ft_invar r}\\<rbrakk>\n       \\<Longrightarrow> Rep_FingerTree (extract_splitres_l r) =\n                         (case Rep_splitres r of (l, a, r) \\<Rightarrow> l)", "apply (auto split: option.split option.split_asm \n    simp add: extract_splitres_l_def Abs_splitres_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"extract_splitres_r r == case (Rep_splitres r) of (l,a,r) \\<Rightarrow> \n    Abs_FingerTree r\""], ["", "lemma [code abstract]: \"Rep_FingerTree (extract_splitres_r r) = (case \n  (Rep_splitres r) of (l,a,r) \\<Rightarrow> r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree (extract_splitres_r r) =\n    (case Rep_splitres r of (l, a, r) \\<Rightarrow> r)", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>r = Abs_splitres y;\n        y \\<in> {(l, a, r) |l a r.\n                 FingerTreeStruc.ft_invar l \\<and>\n                 FingerTreeStruc.ft_invar r}\\<rbrakk>\n       \\<Longrightarrow> Rep_FingerTree (extract_splitres_r r) =\n                         (case Rep_splitres r of (l, a, r) \\<Rightarrow> r)", "apply (auto split: option.split option.split_asm \n    simp add: extract_splitres_r_def Abs_splitres_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"extract_splitres r == \n  (extract_splitres_l r,\n  extract_splitres_a r,\n  extract_splitres_r r)\""], ["", "subsubsection \"Definition of Operations\""], ["", "locale FingerTree_loc\nbegin"], ["", "definition [code]: \"toList t == FingerTreeStruc.toList (Rep_FingerTree t)\""], ["", "definition empty where \"empty == Abs_FingerTree FingerTreeStruc.Empty\""], ["", "lemma [code abstract]: \"Rep_FingerTree empty = FingerTreeStruc.Empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree local.empty = Empty", "by (simp add: empty_def)"], ["", "lemma empty_rep: \"t=empty \\<longleftrightarrow> Rep_FingerTree t = Empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t = local.empty) = (Rep_FingerTree t = Empty)", "apply (auto simp add: empty_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree t = Empty \\<Longrightarrow> t = Abs_FingerTree Empty", "apply (metis Rep_FingerTree_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition [code]: \"annot t == FingerTreeStruc.annot (Rep_FingerTree t)\""], ["", "definition \"toTree t == Abs_FingerTree (FingerTreeStruc.toTree t)\""], ["", "lemma [code abstract]: \"Rep_FingerTree (toTree t) = FingerTreeStruc.toTree t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree (toTree t) = FingerTreeStruc.toTree t", "by (simp add: toTree_def)"], ["", "definition \"lcons a t == \n    Abs_FingerTree (FingerTreeStruc.lcons a (Rep_FingerTree t))\""], ["", "lemma [code abstract]: \n    \"Rep_FingerTree (lcons a t) = (FingerTreeStruc.lcons a (Rep_FingerTree t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree (lcons a t) = FingerTreeStruc.lcons a (Rep_FingerTree t)", "by (simp add: lcons_def FingerTreeStruc.lcons_correct)"], ["", "definition \"rcons t a == \n    Abs_FingerTree (FingerTreeStruc.rcons (Rep_FingerTree t) a)\""], ["", "lemma [code abstract]: \n    \"Rep_FingerTree (rcons t a) = (FingerTreeStruc.rcons (Rep_FingerTree t) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree (rcons t a) = FingerTreeStruc.rcons (Rep_FingerTree t) a", "by (simp add: rcons_def FingerTreeStruc.rcons_correct)"], ["", "definition \"viewL_aux t == \n    Abs_viewres (FingerTreeStruc.viewL (Rep_FingerTree t))\""], ["", "definition \"viewL t == extract_viewres (viewL_aux t)\""], ["", "lemma [code abstract]:\n    \"Rep_viewres (viewL_aux t) = (FingerTreeStruc.viewL (Rep_FingerTree t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_viewres (viewL_aux t) = FingerTreeStruc.viewL (Rep_FingerTree t)", "apply (cases \"(FingerTreeStruc.viewL (Rep_FingerTree t))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. FingerTreeStruc.viewL (Rep_FingerTree t) = None \\<Longrightarrow>\n    Rep_viewres (viewL_aux t) = FingerTreeStruc.viewL (Rep_FingerTree t)\n 2. \\<And>a.\n       FingerTreeStruc.viewL (Rep_FingerTree t) = Some a \\<Longrightarrow>\n       Rep_viewres (viewL_aux t) = FingerTreeStruc.viewL (Rep_FingerTree t)", "apply (auto simp add: viewL_aux_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ba.\n       FingerTreeStruc.viewL (Rep_FingerTree t) =\n       Some ((a, b), ba) \\<Longrightarrow>\n       Rep_viewres (Abs_viewres (Some ((a, b), ba))) = Some ((a, b), ba)", "apply (cases \"Rep_FingerTree t = Empty\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ba.\n       \\<lbrakk>FingerTreeStruc.viewL (Rep_FingerTree t) =\n                Some ((a, b), ba);\n        Rep_FingerTree t = Empty\\<rbrakk>\n       \\<Longrightarrow> Rep_viewres (Abs_viewres (Some ((a, b), ba))) =\n                         Some ((a, b), ba)\n 2. \\<And>a b ba.\n       \\<lbrakk>FingerTreeStruc.viewL (Rep_FingerTree t) =\n                Some ((a, b), ba);\n        Rep_FingerTree t \\<noteq> Empty\\<rbrakk>\n       \\<Longrightarrow> Rep_viewres (Abs_viewres (Some ((a, b), ba))) =\n                         Some ((a, b), ba)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ba.\n       \\<lbrakk>FingerTreeStruc.viewL (Rep_FingerTree t) =\n                Some ((a, b), ba);\n        Rep_FingerTree t \\<noteq> Empty\\<rbrakk>\n       \\<Longrightarrow> Rep_viewres (Abs_viewres (Some ((a, b), ba))) =\n                         Some ((a, b), ba)", "apply (auto \n      elim!: FingerTreeStruc.viewL_correct_nonEmpty\n                 [of \"Rep_FingerTree t\", simplified]\n      simp add: Abs_viewres_inverse_Some)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"viewR_aux t == \n    Abs_viewres (FingerTreeStruc.viewR (Rep_FingerTree t))\""], ["", "definition \"viewR t == extract_viewres (viewR_aux t)\""], ["", "lemma [code abstract]:\n    \"Rep_viewres (viewR_aux t) = (FingerTreeStruc.viewR (Rep_FingerTree t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_viewres (viewR_aux t) = FingerTreeStruc.viewR (Rep_FingerTree t)", "apply (cases \"(FingerTreeStruc.viewR (Rep_FingerTree t))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. FingerTreeStruc.viewR (Rep_FingerTree t) = None \\<Longrightarrow>\n    Rep_viewres (viewR_aux t) = FingerTreeStruc.viewR (Rep_FingerTree t)\n 2. \\<And>a.\n       FingerTreeStruc.viewR (Rep_FingerTree t) = Some a \\<Longrightarrow>\n       Rep_viewres (viewR_aux t) = FingerTreeStruc.viewR (Rep_FingerTree t)", "apply (auto simp add: viewR_aux_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ba.\n       FingerTreeStruc.viewR (Rep_FingerTree t) =\n       Some ((a, b), ba) \\<Longrightarrow>\n       Rep_viewres (Abs_viewres (Some ((a, b), ba))) = Some ((a, b), ba)", "apply (cases \"Rep_FingerTree t = Empty\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ba.\n       \\<lbrakk>FingerTreeStruc.viewR (Rep_FingerTree t) =\n                Some ((a, b), ba);\n        Rep_FingerTree t = Empty\\<rbrakk>\n       \\<Longrightarrow> Rep_viewres (Abs_viewres (Some ((a, b), ba))) =\n                         Some ((a, b), ba)\n 2. \\<And>a b ba.\n       \\<lbrakk>FingerTreeStruc.viewR (Rep_FingerTree t) =\n                Some ((a, b), ba);\n        Rep_FingerTree t \\<noteq> Empty\\<rbrakk>\n       \\<Longrightarrow> Rep_viewres (Abs_viewres (Some ((a, b), ba))) =\n                         Some ((a, b), ba)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ba.\n       \\<lbrakk>FingerTreeStruc.viewR (Rep_FingerTree t) =\n                Some ((a, b), ba);\n        Rep_FingerTree t \\<noteq> Empty\\<rbrakk>\n       \\<Longrightarrow> Rep_viewres (Abs_viewres (Some ((a, b), ba))) =\n                         Some ((a, b), ba)", "apply (auto \n      elim!: FingerTreeStruc.viewR_correct_nonEmpty\n                [of \"Rep_FingerTree t\", simplified]\n      simp add: Abs_viewres_inverse_Some)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition [code]: \"isEmpty t == FingerTreeStruc.isEmpty (Rep_FingerTree t)\""], ["", "definition [code]: \"head t = FingerTreeStruc.head (Rep_FingerTree t)\""], ["", "definition \"tail t \\<equiv> \n    if t=empty then \n      empty \n    else \n      Abs_FingerTree (FingerTreeStruc.tail (Rep_FingerTree t))\"\n    \\<comment> \\<open>Make function total, to allow abstraction\\<close>"], ["", "lemma [code abstract]: \"Rep_FingerTree (tail t) = \n    (if (FingerTreeStruc.isEmpty (Rep_FingerTree t)) then Empty \n     else FingerTreeStruc.tail (Rep_FingerTree t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree (tail t) =\n    (if FingerTreeStruc.isEmpty (Rep_FingerTree t) then Empty\n     else FingerTreeStruc.tail (Rep_FingerTree t))", "apply (simp add: tail_def FingerTreeStruc.tail_correct FingerTreeStruc.isEmpty_def empty_rep)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree t = Empty \\<longrightarrow>\n    Rep_FingerTree local.empty = Empty", "apply (auto simp add: empty_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition [code]: \"headR t = FingerTreeStruc.headR (Rep_FingerTree t)\""], ["", "definition \"tailR t \\<equiv> \n    if t=empty then \n      empty \n    else \n      Abs_FingerTree (FingerTreeStruc.tailR (Rep_FingerTree t))\""], ["", "lemma [code abstract]: \"Rep_FingerTree (tailR t) = \n    (if (FingerTreeStruc.isEmpty (Rep_FingerTree t)) then Empty \n    else FingerTreeStruc.tailR (Rep_FingerTree t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree (tailR t) =\n    (if FingerTreeStruc.isEmpty (Rep_FingerTree t) then Empty\n     else FingerTreeStruc.tailR (Rep_FingerTree t))", "apply (simp add: tailR_def FingerTreeStruc.tailR_correct FingerTreeStruc.isEmpty_def empty_rep)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree t = Empty \\<longrightarrow>\n    Rep_FingerTree local.empty = Empty", "apply (simp add: empty_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"app s t = Abs_FingerTree (\n    FingerTreeStruc.app (Rep_FingerTree s) (Rep_FingerTree t))\""], ["", "lemma [code abstract]:\n    \"Rep_FingerTree (app s t) = \n      FingerTreeStruc.app (Rep_FingerTree s) (Rep_FingerTree t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree (app s t) =\n    FingerTreeStruc.app (Rep_FingerTree s) (Rep_FingerTree t)", "by (simp add: app_def FingerTreeStruc.app_correct)"], ["", "definition \"splitTree_aux p i t == if (\\<not>p i \\<and> p (i+annot t)) then\n    Abs_splitres (FingerTreeStruc.splitTree p i (Rep_FingerTree t))\n  else\n    Abs_splitres (Empty,undefined,Empty)\""], ["", "definition \"splitTree p i t == extract_splitres (splitTree_aux p i t)\""], ["", "lemma [code abstract]:\n    \"Rep_splitres (splitTree_aux p i t) = (if (\\<not>p i \\<and> p (i+annot t)) then\n      (FingerTreeStruc.splitTree p i (Rep_FingerTree t))\n    else\n      (Empty,undefined,Empty))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_splitres (splitTree_aux p i t) =\n    (if \\<not> p i \\<and> p (i + annot t)\n     then FingerTreeStruc.splitTree p i (Rep_FingerTree t)\n     else (Empty, undefined, Empty))", "using FingerTreeStruc.splitTree_invpres[of \"Rep_FingerTree t\" p i]"], ["proof (prove)\nusing this:\n  \\<lbrakk>FingerTreeStruc.ft_invar (Rep_FingerTree t); \\<not> p i;\n   p (i + FingerTreeStruc.annot (Rep_FingerTree t));\n   FingerTreeStruc.splitTree p i (Rep_FingerTree t) =\n   (?l, (?e, ?a), ?r)\\<rbrakk>\n  \\<Longrightarrow> FingerTreeStruc.ft_invar ?l\n  \\<lbrakk>FingerTreeStruc.ft_invar (Rep_FingerTree t); \\<not> p i;\n   p (i + FingerTreeStruc.annot (Rep_FingerTree t));\n   FingerTreeStruc.splitTree p i (Rep_FingerTree t) =\n   (?l, (?e, ?a), ?r)\\<rbrakk>\n  \\<Longrightarrow> FingerTreeStruc.ft_invar ?r\n\ngoal (1 subgoal):\n 1. Rep_splitres (splitTree_aux p i t) =\n    (if \\<not> p i \\<and> p (i + annot t)\n     then FingerTreeStruc.splitTree p i (Rep_FingerTree t)\n     else (Empty, undefined, Empty))", "apply (auto simp add: splitTree_aux_def annot_def Abs_splitres_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l e a r.\n                FingerTreeStruc.splitTree p i (Rep_FingerTree t) =\n                (l, (e, a), r) \\<Longrightarrow>\n                FingerTreeStruc.ft_invar l;\n     \\<And>l e a r.\n        FingerTreeStruc.splitTree p i (Rep_FingerTree t) =\n        (l, (e, a), r) \\<Longrightarrow>\n        FingerTreeStruc.ft_invar r;\n     \\<not> p i; p (i + FingerTreeStruc.annot (Rep_FingerTree t))\\<rbrakk>\n    \\<Longrightarrow> Rep_splitres\n                       (Abs_splitres\n                         (FingerTreeStruc.splitTree p i\n                           (Rep_FingerTree t))) =\n                      FingerTreeStruc.splitTree p i (Rep_FingerTree t)", "apply (cases \"FingerTreeStruc.splitTree p i (Rep_FingerTree t)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<And>l e a r.\n                   FingerTreeStruc.splitTree p i (Rep_FingerTree t) =\n                   (l, (e, a), r) \\<Longrightarrow>\n                   FingerTreeStruc.ft_invar l;\n        \\<And>l e a r.\n           FingerTreeStruc.splitTree p i (Rep_FingerTree t) =\n           (l, (e, a), r) \\<Longrightarrow>\n           FingerTreeStruc.ft_invar r;\n        \\<not> p i; p (i + FingerTreeStruc.annot (Rep_FingerTree t));\n        FingerTreeStruc.splitTree p i (Rep_FingerTree t) =\n        (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> Rep_splitres\n                          (Abs_splitres\n                            (FingerTreeStruc.splitTree p i\n                              (Rep_FingerTree t))) =\n                         FingerTreeStruc.splitTree p i (Rep_FingerTree t)", "apply (force simp add: Abs_FingerTree_inverse Abs_splitres_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition foldl where \n    [code]: \"foldl f \\<sigma> t == FingerTreeStruc.foldl f \\<sigma> (Rep_FingerTree t)\""], ["", "definition foldr where \n    [code]: \"foldr f t \\<sigma> == FingerTreeStruc.foldr f (Rep_FingerTree t) \\<sigma>\""], ["", "definition count where \n    [code]: \"count t == FingerTreeStruc.count (Rep_FingerTree t)\""], ["", "subsubsection \"Correctness statements\""], ["", "lemma empty_correct: \"toList t = [] \\<longleftrightarrow> t=empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (toList t = []) = (t = local.empty)", "apply (unfold toList_def empty_rep)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (FingerTreeStruc.toList (Rep_FingerTree t) = []) =\n    (Rep_FingerTree t = Empty)", "apply (simp add: FingerTreeStruc.toList_empty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma toList_of_empty[simp]: \"toList empty = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList local.empty = []", "apply (unfold toList_def empty_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.toList (Rep_FingerTree (Abs_FingerTree Empty)) = []", "apply (auto simp add: FingerTreeStruc.toList_empty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma annot_correct: \"annot t = sum_list (map snd (toList t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. annot t = sum_list (map snd (toList t))", "apply (unfold toList_def annot_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.annot (Rep_FingerTree t) =\n    sum_list (map snd (FingerTreeStruc.toList (Rep_FingerTree t)))", "apply (simp add: FingerTreeStruc.annot_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma toTree_correct: \"toList (toTree l) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (toTree l) = l", "apply (unfold toList_def toTree_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.toList\n     (Rep_FingerTree (Abs_FingerTree (FingerTreeStruc.toTree l))) =\n    l", "apply (simp add: FingerTreeStruc.toTree_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lcons_correct: \"toList (lcons a t) = a#toList t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (lcons a t) = a # toList t", "apply (unfold toList_def lcons_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.toList\n     (Rep_FingerTree\n       (Abs_FingerTree (FingerTreeStruc.lcons a (Rep_FingerTree t)))) =\n    a # FingerTreeStruc.toList (Rep_FingerTree t)", "apply (simp add: FingerTreeStruc.lcons_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rcons_correct: \"toList (rcons t a) = toList t@[a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (rcons t a) = toList t @ [a]", "apply (unfold toList_def rcons_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.toList\n     (Rep_FingerTree\n       (Abs_FingerTree (FingerTreeStruc.rcons (Rep_FingerTree t) a))) =\n    FingerTreeStruc.toList (Rep_FingerTree t) @ [a]", "apply (simp add: FingerTreeStruc.rcons_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma viewL_correct: \n    \"t = empty \\<Longrightarrow> viewL t = None\"\n    \"t \\<noteq> empty \\<Longrightarrow> \\<exists>a s. viewL t = Some (a,s) \\<and> toList t = a#toList s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t = local.empty \\<Longrightarrow> viewL t = None) &&&\n    (t \\<noteq> local.empty \\<Longrightarrow>\n     \\<exists>a s. viewL t = Some (a, s) \\<and> toList t = a # toList s)", "apply (unfold toList_def viewL_def viewL_aux_def \n      extract_viewres_def extract_viewres_isNone_def \n      extract_viewres_a_def\n      extract_viewres_t_def\n      empty_rep)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Rep_FingerTree t = Empty \\<Longrightarrow>\n    (if Rep_viewres\n         (Abs_viewres (FingerTreeStruc.viewL (Rep_FingerTree t))) =\n        None\n     then None\n     else Some\n           (case Rep_viewres\n                  (Abs_viewres\n                    (FingerTreeStruc.viewL (Rep_FingerTree t))) of\n            Some (a, t) \\<Rightarrow> a,\n            case Rep_viewres\n                  (Abs_viewres\n                    (FingerTreeStruc.viewL (Rep_FingerTree t))) of\n            None \\<Rightarrow> Abs_FingerTree Empty\n            | Some (a, t) \\<Rightarrow> Abs_FingerTree t)) =\n    None\n 2. Rep_FingerTree t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       (if Rep_viewres\n            (Abs_viewres (FingerTreeStruc.viewL (Rep_FingerTree t))) =\n           None\n        then None\n        else Some\n              (case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewL (Rep_FingerTree t))) of\n               Some (a, t) \\<Rightarrow> a,\n               case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewL (Rep_FingerTree t))) of\n               None \\<Rightarrow> Abs_FingerTree Empty\n               | Some (a, t) \\<Rightarrow> Abs_FingerTree t)) =\n       Some (a, s) \\<and>\n       FingerTreeStruc.toList (Rep_FingerTree t) =\n       a # FingerTreeStruc.toList (Rep_FingerTree s)", "apply (simp add: FingerTreeStruc.viewL_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       (if Rep_viewres\n            (Abs_viewres (FingerTreeStruc.viewL (Rep_FingerTree t))) =\n           None\n        then None\n        else Some\n              (case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewL (Rep_FingerTree t))) of\n               Some (a, t) \\<Rightarrow> a,\n               case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewL (Rep_FingerTree t))) of\n               None \\<Rightarrow> Abs_FingerTree Empty\n               | Some (a, t) \\<Rightarrow> Abs_FingerTree t)) =\n       Some (a, s) \\<and>\n       FingerTreeStruc.toList (Rep_FingerTree t) =\n       a # FingerTreeStruc.toList (Rep_FingerTree s)", "apply (drule FingerTreeStruc.viewL_correct(2)[OF Rep_FingerTree_invar])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a s.\n       FingerTreeStruc.viewL (Rep_FingerTree t) = Some (a, s) \\<and>\n       FingerTreeStruc.ft_invar s \\<and>\n       FingerTreeStruc.toList (Rep_FingerTree t) =\n       a # FingerTreeStruc.toList s \\<Longrightarrow>\n    \\<exists>a s.\n       (if Rep_viewres\n            (Abs_viewres (FingerTreeStruc.viewL (Rep_FingerTree t))) =\n           None\n        then None\n        else Some\n              (case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewL (Rep_FingerTree t))) of\n               Some (a, t) \\<Rightarrow> a,\n               case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewL (Rep_FingerTree t))) of\n               None \\<Rightarrow> Abs_FingerTree Empty\n               | Some (a, t) \\<Rightarrow> Abs_FingerTree t)) =\n       Some (a, s) \\<and>\n       FingerTreeStruc.toList (Rep_FingerTree t) =\n       a # FingerTreeStruc.toList (Rep_FingerTree s)", "apply (auto simp add: Abs_viewres_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma viewL_empty[simp]: \"viewL empty = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. viewL local.empty = None", "using viewL_correct"], ["proof (prove)\nusing this:\n  ?t = local.empty \\<Longrightarrow> viewL ?t = None\n  ?t \\<noteq> local.empty \\<Longrightarrow>\n  \\<exists>a s. viewL ?t = Some (a, s) \\<and> toList ?t = a # toList s\n\ngoal (1 subgoal):\n 1. viewL local.empty = None", "by auto"], ["", "lemma viewL_nonEmpty: \n    assumes \"t\\<noteq>empty\"\n    obtains a s where \"viewL t = Some (a,s)\" \"toList t = a#toList s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        \\<lbrakk>viewL t = Some (a, s); toList t = a # toList s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms viewL_correct"], ["proof (prove)\nusing this:\n  t \\<noteq> local.empty\n  ?t = local.empty \\<Longrightarrow> viewL ?t = None\n  ?t \\<noteq> local.empty \\<Longrightarrow>\n  \\<exists>a s. viewL ?t = Some (a, s) \\<and> toList ?t = a # toList s\n\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        \\<lbrakk>viewL t = Some (a, s); toList t = a # toList s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma viewR_correct: \n    \"t = empty \\<Longrightarrow> viewR t = None\"\n    \"t \\<noteq> empty \\<Longrightarrow> \\<exists>a s. viewR t = Some (a,s) \\<and> toList t = toList s@[a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t = local.empty \\<Longrightarrow> viewR t = None) &&&\n    (t \\<noteq> local.empty \\<Longrightarrow>\n     \\<exists>a s. viewR t = Some (a, s) \\<and> toList t = toList s @ [a])", "apply (unfold toList_def viewR_def viewR_aux_def \n      extract_viewres_def extract_viewres_isNone_def \n      extract_viewres_a_def\n      extract_viewres_t_def\n      empty_rep)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Rep_FingerTree t = Empty \\<Longrightarrow>\n    (if Rep_viewres\n         (Abs_viewres (FingerTreeStruc.viewR (Rep_FingerTree t))) =\n        None\n     then None\n     else Some\n           (case Rep_viewres\n                  (Abs_viewres\n                    (FingerTreeStruc.viewR (Rep_FingerTree t))) of\n            Some (a, t) \\<Rightarrow> a,\n            case Rep_viewres\n                  (Abs_viewres\n                    (FingerTreeStruc.viewR (Rep_FingerTree t))) of\n            None \\<Rightarrow> Abs_FingerTree Empty\n            | Some (a, t) \\<Rightarrow> Abs_FingerTree t)) =\n    None\n 2. Rep_FingerTree t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       (if Rep_viewres\n            (Abs_viewres (FingerTreeStruc.viewR (Rep_FingerTree t))) =\n           None\n        then None\n        else Some\n              (case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewR (Rep_FingerTree t))) of\n               Some (a, t) \\<Rightarrow> a,\n               case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewR (Rep_FingerTree t))) of\n               None \\<Rightarrow> Abs_FingerTree Empty\n               | Some (a, t) \\<Rightarrow> Abs_FingerTree t)) =\n       Some (a, s) \\<and>\n       FingerTreeStruc.toList (Rep_FingerTree t) =\n       FingerTreeStruc.toList (Rep_FingerTree s) @ [a]", "apply (simp add: FingerTreeStruc.viewR_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree t \\<noteq> Empty \\<Longrightarrow>\n    \\<exists>a s.\n       (if Rep_viewres\n            (Abs_viewres (FingerTreeStruc.viewR (Rep_FingerTree t))) =\n           None\n        then None\n        else Some\n              (case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewR (Rep_FingerTree t))) of\n               Some (a, t) \\<Rightarrow> a,\n               case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewR (Rep_FingerTree t))) of\n               None \\<Rightarrow> Abs_FingerTree Empty\n               | Some (a, t) \\<Rightarrow> Abs_FingerTree t)) =\n       Some (a, s) \\<and>\n       FingerTreeStruc.toList (Rep_FingerTree t) =\n       FingerTreeStruc.toList (Rep_FingerTree s) @ [a]", "apply (drule FingerTreeStruc.viewR_correct(2)[OF Rep_FingerTree_invar])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a s.\n       FingerTreeStruc.viewR (Rep_FingerTree t) = Some (a, s) \\<and>\n       FingerTreeStruc.ft_invar s \\<and>\n       FingerTreeStruc.toList (Rep_FingerTree t) =\n       FingerTreeStruc.toList s @ [a] \\<Longrightarrow>\n    \\<exists>a s.\n       (if Rep_viewres\n            (Abs_viewres (FingerTreeStruc.viewR (Rep_FingerTree t))) =\n           None\n        then None\n        else Some\n              (case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewR (Rep_FingerTree t))) of\n               Some (a, t) \\<Rightarrow> a,\n               case Rep_viewres\n                     (Abs_viewres\n                       (FingerTreeStruc.viewR (Rep_FingerTree t))) of\n               None \\<Rightarrow> Abs_FingerTree Empty\n               | Some (a, t) \\<Rightarrow> Abs_FingerTree t)) =\n       Some (a, s) \\<and>\n       FingerTreeStruc.toList (Rep_FingerTree t) =\n       FingerTreeStruc.toList (Rep_FingerTree s) @ [a]", "apply (auto simp add: Abs_viewres_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma viewR_empty[simp]: \"viewR empty = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. viewR local.empty = None", "using viewR_correct"], ["proof (prove)\nusing this:\n  ?t = local.empty \\<Longrightarrow> viewR ?t = None\n  ?t \\<noteq> local.empty \\<Longrightarrow>\n  \\<exists>a s. viewR ?t = Some (a, s) \\<and> toList ?t = toList s @ [a]\n\ngoal (1 subgoal):\n 1. viewR local.empty = None", "by auto"], ["", "lemma viewR_nonEmpty: \n    assumes \"t\\<noteq>empty\"\n    obtains a s where \"viewR t = Some (a,s)\" \"toList t = toList s@[a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        \\<lbrakk>viewR t = Some (a, s); toList t = toList s @ [a]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms viewR_correct"], ["proof (prove)\nusing this:\n  t \\<noteq> local.empty\n  ?t = local.empty \\<Longrightarrow> viewR ?t = None\n  ?t \\<noteq> local.empty \\<Longrightarrow>\n  \\<exists>a s. viewR ?t = Some (a, s) \\<and> toList ?t = toList s @ [a]\n\ngoal (1 subgoal):\n 1. (\\<And>a s.\n        \\<lbrakk>viewR t = Some (a, s); toList t = toList s @ [a]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma isEmpty_correct: \"isEmpty t \\<longleftrightarrow> t=empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isEmpty t = (t = local.empty)", "apply (unfold toList_def isEmpty_def empty_rep)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.isEmpty (Rep_FingerTree t) = (Rep_FingerTree t = Empty)", "apply (simp add: FingerTreeStruc.isEmpty_correct FingerTreeStruc.toList_empty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma head_correct: \"t\\<noteq>empty \\<Longrightarrow> head t = hd (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> local.empty \\<Longrightarrow> head t = hd (toList t)", "apply (unfold toList_def head_def empty_rep)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree t \\<noteq> Empty \\<Longrightarrow>\n    FingerTreeStruc.head (Rep_FingerTree t) =\n    hd (FingerTreeStruc.toList (Rep_FingerTree t))", "apply (simp add: FingerTreeStruc.head_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma tail_correct: \"t\\<noteq>empty \\<Longrightarrow> toList (tail t) = tl (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> local.empty \\<Longrightarrow> toList (tail t) = tl (toList t)", "apply (unfold toList_def tail_def empty_rep)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree t \\<noteq> Empty \\<Longrightarrow>\n    FingerTreeStruc.toList\n     (Rep_FingerTree\n       (if Rep_FingerTree t = Empty then local.empty\n        else Abs_FingerTree (FingerTreeStruc.tail (Rep_FingerTree t)))) =\n    tl (FingerTreeStruc.toList (Rep_FingerTree t))", "apply (simp add: FingerTreeStruc.tail_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma headR_correct: \"t\\<noteq>empty \\<Longrightarrow> headR t = last (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> local.empty \\<Longrightarrow> headR t = last (toList t)", "apply (unfold toList_def headR_def empty_rep)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree t \\<noteq> Empty \\<Longrightarrow>\n    FingerTreeStruc.headR (Rep_FingerTree t) =\n    last (FingerTreeStruc.toList (Rep_FingerTree t))", "apply (simp add: FingerTreeStruc.headR_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma tailR_correct: \"t\\<noteq>empty \\<Longrightarrow> toList (tailR t) = butlast (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> local.empty \\<Longrightarrow>\n    toList (tailR t) = butlast (toList t)", "apply (unfold toList_def tailR_def empty_rep)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_FingerTree t \\<noteq> Empty \\<Longrightarrow>\n    FingerTreeStruc.toList\n     (Rep_FingerTree\n       (if Rep_FingerTree t = Empty then local.empty\n        else Abs_FingerTree (FingerTreeStruc.tailR (Rep_FingerTree t)))) =\n    butlast (FingerTreeStruc.toList (Rep_FingerTree t))", "apply (simp add: FingerTreeStruc.tailR_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma app_correct: \"toList (app s t) = toList s @ toList t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList (app s t) = toList s @ toList t", "apply (unfold toList_def app_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.toList\n     (Rep_FingerTree\n       (Abs_FingerTree\n         (FingerTreeStruc.app (Rep_FingerTree s) (Rep_FingerTree t)))) =\n    FingerTreeStruc.toList (Rep_FingerTree s) @\n    FingerTreeStruc.toList (Rep_FingerTree t)", "apply (simp add: FingerTreeStruc.app_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma splitTree_correct:\n    assumes mono: \"\\<forall>a b. p a \\<longrightarrow> p (a + b)\"\n    assumes init_ff: \"\\<not> p i\"\n    assumes sum_tt: \"p (i + annot s)\"\n    assumes fmt: \"(splitTree p i s) = (l, (e,a), r)\"\n    shows \"(toList s) = (toList l) @ (e,a) # (toList r)\"\n    and   \"\\<not> p (i + annot l)\"\n    and   \"p (i + annot l + a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toList s = toList l @ (e, a) # toList r &&&\n    \\<not> p (i + annot l) &&& p (i + annot l + a)", "apply (rule\n      FingerTreeStruc.splitTree_correctE[\n      where p=p and s=\"Rep_FingerTree s\",\n      OF _ mono init_ff sum_tt[unfolded annot_def],\n      simplified\n      ])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>la ea aa ra.\n       \\<lbrakk>FingerTreeStruc.splitTree p i (Rep_FingerTree s) =\n                (la, (ea, aa), ra);\n        FingerTreeStruc.toList (Rep_FingerTree s) =\n        FingerTreeStruc.toList la @ (ea, aa) # FingerTreeStruc.toList ra;\n        \\<not> p (i + FingerTreeStruc.annot la);\n        p (i + FingerTreeStruc.annot la + aa); FingerTreeStruc.ft_invar la;\n        FingerTreeStruc.ft_invar ra\\<rbrakk>\n       \\<Longrightarrow> toList s = toList l @ (e, a) # toList r\n 2. \\<not> p (i + annot l)\n 3. p (i + annot l + a)", "using fmt"], ["proof (prove)\nusing this:\n  splitTree p i s = (l, (e, a), r)\n\ngoal (3 subgoals):\n 1. \\<And>la ea aa ra.\n       \\<lbrakk>FingerTreeStruc.splitTree p i (Rep_FingerTree s) =\n                (la, (ea, aa), ra);\n        FingerTreeStruc.toList (Rep_FingerTree s) =\n        FingerTreeStruc.toList la @ (ea, aa) # FingerTreeStruc.toList ra;\n        \\<not> p (i + FingerTreeStruc.annot la);\n        p (i + FingerTreeStruc.annot la + aa); FingerTreeStruc.ft_invar la;\n        FingerTreeStruc.ft_invar ra\\<rbrakk>\n       \\<Longrightarrow> toList s = toList l @ (e, a) # toList r\n 2. \\<not> p (i + annot l)\n 3. p (i + annot l + a)", "apply (unfold toList_def splitTree_aux_def splitTree_def annot_def \n      extract_splitres_def extract_splitres_l_def \n      extract_splitres_a_def extract_splitres_r_def) [1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>la ea aa ra.\n       \\<lbrakk>FingerTreeStruc.splitTree p i (Rep_FingerTree s) =\n                (la, (ea, aa), ra);\n        FingerTreeStruc.toList (Rep_FingerTree s) =\n        FingerTreeStruc.toList la @ (ea, aa) # FingerTreeStruc.toList ra;\n        \\<not> p (i + FingerTreeStruc.annot la);\n        p (i + FingerTreeStruc.annot la + aa); FingerTreeStruc.ft_invar la;\n        FingerTreeStruc.ft_invar ra;\n        (case Rep_splitres\n               (if \\<not> p i \\<and>\n                   p (i + FingerTreeStruc.annot (Rep_FingerTree s))\n                then Abs_splitres\n                      (FingerTreeStruc.splitTree p i (Rep_FingerTree s))\n                else Abs_splitres (Empty, undefined, Empty)) of\n         (l, a, r) \\<Rightarrow> Abs_FingerTree l,\n         case Rep_splitres\n               (if \\<not> p i \\<and>\n                   p (i + FingerTreeStruc.annot (Rep_FingerTree s))\n                then Abs_splitres\n                      (FingerTreeStruc.splitTree p i (Rep_FingerTree s))\n                else Abs_splitres (Empty, undefined, Empty)) of\n         (l, a, s) \\<Rightarrow> a,\n         case Rep_splitres\n               (if \\<not> p i \\<and>\n                   p (i + FingerTreeStruc.annot (Rep_FingerTree s))\n                then Abs_splitres\n                      (FingerTreeStruc.splitTree p i (Rep_FingerTree s))\n                else Abs_splitres (Empty, undefined, Empty)) of\n         (l, a, r) \\<Rightarrow> Abs_FingerTree r) =\n        (l, (e, a), r)\\<rbrakk>\n       \\<Longrightarrow> FingerTreeStruc.toList (Rep_FingerTree s) =\n                         FingerTreeStruc.toList (Rep_FingerTree l) @\n                         (e, a) # FingerTreeStruc.toList (Rep_FingerTree r)\n 2. \\<not> p (i + annot l)\n 3. p (i + annot l + a)", "apply (auto split: if_split_asm prod.split_asm \n      simp add: init_ff sum_tt[unfolded annot_def] Abs_splitres_inverse) [1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> p (i + annot l)\n 2. p (i + annot l + a)", "apply (rule\n      FingerTreeStruc.splitTree_correctE[\n      where p=p and s=\"Rep_FingerTree s\",\n      OF _ mono init_ff sum_tt[unfolded annot_def],\n      simplified\n      ])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>la e a r.\n       \\<lbrakk>FingerTreeStruc.splitTree p i (Rep_FingerTree s) =\n                (la, (e, a), r);\n        FingerTreeStruc.toList (Rep_FingerTree s) =\n        FingerTreeStruc.toList la @ (e, a) # FingerTreeStruc.toList r;\n        \\<not> p (i + FingerTreeStruc.annot la);\n        p (i + FingerTreeStruc.annot la + a); FingerTreeStruc.ft_invar la;\n        FingerTreeStruc.ft_invar r\\<rbrakk>\n       \\<Longrightarrow> \\<not> p (i + annot l)\n 2. p (i + annot l + a)", "using fmt"], ["proof (prove)\nusing this:\n  splitTree p i s = (l, (e, a), r)\n\ngoal (2 subgoals):\n 1. \\<And>la e a r.\n       \\<lbrakk>FingerTreeStruc.splitTree p i (Rep_FingerTree s) =\n                (la, (e, a), r);\n        FingerTreeStruc.toList (Rep_FingerTree s) =\n        FingerTreeStruc.toList la @ (e, a) # FingerTreeStruc.toList r;\n        \\<not> p (i + FingerTreeStruc.annot la);\n        p (i + FingerTreeStruc.annot la + a); FingerTreeStruc.ft_invar la;\n        FingerTreeStruc.ft_invar r\\<rbrakk>\n       \\<Longrightarrow> \\<not> p (i + annot l)\n 2. p (i + annot l + a)", "apply (unfold toList_def splitTree_aux_def splitTree_def annot_def \n      extract_splitres_def extract_splitres_l_def \n      extract_splitres_a_def extract_splitres_r_def) [1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>la ea aa ra.\n       \\<lbrakk>FingerTreeStruc.splitTree p i (Rep_FingerTree s) =\n                (la, (ea, aa), ra);\n        FingerTreeStruc.toList (Rep_FingerTree s) =\n        FingerTreeStruc.toList la @ (ea, aa) # FingerTreeStruc.toList ra;\n        \\<not> p (i + FingerTreeStruc.annot la);\n        p (i + FingerTreeStruc.annot la + aa); FingerTreeStruc.ft_invar la;\n        FingerTreeStruc.ft_invar ra;\n        (case Rep_splitres\n               (if \\<not> p i \\<and>\n                   p (i + FingerTreeStruc.annot (Rep_FingerTree s))\n                then Abs_splitres\n                      (FingerTreeStruc.splitTree p i (Rep_FingerTree s))\n                else Abs_splitres (Empty, undefined, Empty)) of\n         (l, a, r) \\<Rightarrow> Abs_FingerTree l,\n         case Rep_splitres\n               (if \\<not> p i \\<and>\n                   p (i + FingerTreeStruc.annot (Rep_FingerTree s))\n                then Abs_splitres\n                      (FingerTreeStruc.splitTree p i (Rep_FingerTree s))\n                else Abs_splitres (Empty, undefined, Empty)) of\n         (l, a, s) \\<Rightarrow> a,\n         case Rep_splitres\n               (if \\<not> p i \\<and>\n                   p (i + FingerTreeStruc.annot (Rep_FingerTree s))\n                then Abs_splitres\n                      (FingerTreeStruc.splitTree p i (Rep_FingerTree s))\n                else Abs_splitres (Empty, undefined, Empty)) of\n         (l, a, r) \\<Rightarrow> Abs_FingerTree r) =\n        (l, (e, a), r)\\<rbrakk>\n       \\<Longrightarrow> \\<not> p (i +\n                                   FingerTreeStruc.annot (Rep_FingerTree l))\n 2. p (i + annot l + a)", "apply (auto split: if_split_asm prod.split_asm \n      simp add: init_ff sum_tt[unfolded annot_def] Abs_splitres_inverse) [1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. p (i + annot l + a)", "apply (rule\n      FingerTreeStruc.splitTree_correctE[\n      where p=p and s=\"Rep_FingerTree s\",\n      OF _ mono init_ff sum_tt[unfolded annot_def],\n      simplified\n      ])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>la e aa r.\n       \\<lbrakk>FingerTreeStruc.splitTree p i (Rep_FingerTree s) =\n                (la, (e, aa), r);\n        FingerTreeStruc.toList (Rep_FingerTree s) =\n        FingerTreeStruc.toList la @ (e, aa) # FingerTreeStruc.toList r;\n        \\<not> p (i + FingerTreeStruc.annot la);\n        p (i + FingerTreeStruc.annot la + aa); FingerTreeStruc.ft_invar la;\n        FingerTreeStruc.ft_invar r\\<rbrakk>\n       \\<Longrightarrow> p (i + annot l + a)", "using fmt"], ["proof (prove)\nusing this:\n  splitTree p i s = (l, (e, a), r)\n\ngoal (1 subgoal):\n 1. \\<And>la e aa r.\n       \\<lbrakk>FingerTreeStruc.splitTree p i (Rep_FingerTree s) =\n                (la, (e, aa), r);\n        FingerTreeStruc.toList (Rep_FingerTree s) =\n        FingerTreeStruc.toList la @ (e, aa) # FingerTreeStruc.toList r;\n        \\<not> p (i + FingerTreeStruc.annot la);\n        p (i + FingerTreeStruc.annot la + aa); FingerTreeStruc.ft_invar la;\n        FingerTreeStruc.ft_invar r\\<rbrakk>\n       \\<Longrightarrow> p (i + annot l + a)", "apply (unfold toList_def splitTree_aux_def splitTree_def annot_def \n      extract_splitres_def extract_splitres_l_def \n      extract_splitres_a_def extract_splitres_r_def) [1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>la ea aa ra.\n       \\<lbrakk>FingerTreeStruc.splitTree p i (Rep_FingerTree s) =\n                (la, (ea, aa), ra);\n        FingerTreeStruc.toList (Rep_FingerTree s) =\n        FingerTreeStruc.toList la @ (ea, aa) # FingerTreeStruc.toList ra;\n        \\<not> p (i + FingerTreeStruc.annot la);\n        p (i + FingerTreeStruc.annot la + aa); FingerTreeStruc.ft_invar la;\n        FingerTreeStruc.ft_invar ra;\n        (case Rep_splitres\n               (if \\<not> p i \\<and>\n                   p (i + FingerTreeStruc.annot (Rep_FingerTree s))\n                then Abs_splitres\n                      (FingerTreeStruc.splitTree p i (Rep_FingerTree s))\n                else Abs_splitres (Empty, undefined, Empty)) of\n         (l, a, r) \\<Rightarrow> Abs_FingerTree l,\n         case Rep_splitres\n               (if \\<not> p i \\<and>\n                   p (i + FingerTreeStruc.annot (Rep_FingerTree s))\n                then Abs_splitres\n                      (FingerTreeStruc.splitTree p i (Rep_FingerTree s))\n                else Abs_splitres (Empty, undefined, Empty)) of\n         (l, a, s) \\<Rightarrow> a,\n         case Rep_splitres\n               (if \\<not> p i \\<and>\n                   p (i + FingerTreeStruc.annot (Rep_FingerTree s))\n                then Abs_splitres\n                      (FingerTreeStruc.splitTree p i (Rep_FingerTree s))\n                else Abs_splitres (Empty, undefined, Empty)) of\n         (l, a, r) \\<Rightarrow> Abs_FingerTree r) =\n        (l, (e, a), r)\\<rbrakk>\n       \\<Longrightarrow> p (i + FingerTreeStruc.annot (Rep_FingerTree l) +\n                            a)", "apply (auto split: if_split_asm prod.split_asm \n      simp add: init_ff sum_tt[unfolded annot_def] Abs_splitres_inverse) [1]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma splitTree_correctE:\n    assumes mono: \"\\<forall>a b. p a \\<longrightarrow> p (a + b)\"\n    assumes init_ff: \"\\<not> p i\"\n    assumes sum_tt: \"p (i + annot s)\"\n    obtains l e a r where\n    \"(splitTree p i s) = (l, (e,a), r)\" and\n    \"(toList s) = (toList l) @ (e,a) # (toList r)\" and\n    \"\\<not> p (i + annot l)\" and\n    \"p (i + annot l + a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l e a r.\n        \\<lbrakk>splitTree p i s = (l, (e, a), r);\n         toList s = toList l @ (e, a) # toList r; \\<not> p (i + annot l);\n         p (i + annot l + a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>l e a r.\n        \\<lbrakk>splitTree p i s = (l, (e, a), r);\n         toList s = toList l @ (e, a) # toList r; \\<not> p (i + annot l);\n         p (i + annot l + a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain l e a r where fmt: \"(splitTree p i s) = (l, (e,a), r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l e a r.\n        splitTree p i s = (l, (e, a), r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"(splitTree p i s)\") auto"], ["proof (state)\nthis:\n  splitTree p i s = (l, (e, a), r)\n\ngoal (1 subgoal):\n 1. (\\<And>l e a r.\n        \\<lbrakk>splitTree p i s = (l, (e, a), r);\n         toList s = toList l @ (e, a) # toList r; \\<not> p (i + annot l);\n         p (i + annot l + a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from splitTree_correct[of p, OF assms fmt] fmt"], ["proof (chain)\npicking this:\n  toList s = toList l @ (e, a) # toList r\n  \\<not> p (i + annot l)\n  p (i + annot l + a)\n  splitTree p i s = (l, (e, a), r)", "show ?thesis"], ["proof (prove)\nusing this:\n  toList s = toList l @ (e, a) # toList r\n  \\<not> p (i + annot l)\n  p (i + annot l + a)\n  splitTree p i s = (l, (e, a), r)\n\ngoal (1 subgoal):\n 1. thesis", "by (blast intro: that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma foldl_correct: \"foldl f \\<sigma> t = List.foldl f \\<sigma> (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.foldl f \\<sigma> t = List.foldl f \\<sigma> (toList t)", "apply (unfold toList_def foldl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.foldl f \\<sigma> (Rep_FingerTree t) =\n    List.foldl f \\<sigma> (FingerTreeStruc.toList (Rep_FingerTree t))", "apply (simp add: FingerTreeStruc.foldl_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma foldr_correct: \"foldr f t \\<sigma> = List.foldr f (toList t) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.foldr f t \\<sigma> = List.foldr f (toList t) \\<sigma>", "apply (unfold toList_def foldr_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.foldr f (Rep_FingerTree t) \\<sigma> =\n    List.foldr f (FingerTreeStruc.toList (Rep_FingerTree t)) \\<sigma>", "apply (simp add: FingerTreeStruc.foldr_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma count_correct: \"count t = length (toList t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count t = length (toList t)", "apply (unfold toList_def count_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FingerTreeStruc.count (Rep_FingerTree t) =\n    length (FingerTreeStruc.toList (Rep_FingerTree t))", "apply (simp add: FingerTreeStruc.count_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "interpretation FingerTree: FingerTree_loc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "text_raw\\<open>\\clearpage\\<close>"], ["", "subsection \"Interface Documentation\""], ["", "text_raw\\<open>\\label{sec:doc}\\<close>"], ["", "text \\<open>\n    In this section, we list all supported operations on finger trees,\n    along with a short plaintext documentation and their correctness statements.\n\\<close>"], ["", "(*#DOC\n  fun [no_spec] FingerTree.toList\n    Convert to list ($O(n)$)\n\n  fun FingerTree.empty\n    The empty finger tree ($O(1)$)\n\n  fun FingerTree.annot\n    Return sum of all annotations ($O(1)$)\n\n  fun FingerTree.toTree\n    Convert list to finger tree ($O(n\\log(n))$)\n\n  fun FingerTree.lcons\n    Append element at the left end ($O(\\log(n))$, $O(1)$ amortized)\n\n  fun FingerTree.rcons\n    Append element at the right end ($O(\\log(n))$, $O(1)$ amortized)\n\n  fun FingerTree.viewL\n    Detach leftmost element ($O(\\log(n))$, $O(1)$ amortized)\n\n  fun FingerTree.viewR\n    Detach rightmost element ($O(\\log(n))$, $O(1)$ amortized)\n\n  fun FingerTree.isEmpty\n    Check whether tree is empty ($O(1)$)\n\n  fun FingerTree.head\n    Get leftmost element of non-empty tree ($O(\\log(n))$)\n\n  fun FingerTree.tail\n    Get all but leftmost element of non-empty tree ($O(\\log(n))$)\n\n  fun FingerTree.headR\n    Get rightmost element of non-empty tree ($O(\\log(n))$)\n\n  fun FingerTree.tailR\n    Get all but rightmost element of non-empty tree ($O(\\log(n))$)\n\n  fun FingerTree.app\n    Concatenate two finger trees ($O(\\log(m+n))$)\n\n  fun [long_type] FingerTree.splitTree\n    Split tree by a monotone predicate. ($O(\\log(n))$)\n\n    A predicate $p$ over the annotations is called monotone, iff, for all \n    annotations\n    $a,b$ with $p(a)$, we have already $p(a+b)$.\n\n    Splitting is done by specifying a monotone predicate $p$ that does not hold\n    for the initial value $i$ of the summation, but holds for $i$ plus the sum\n    of all annotations. The tree is then split at the position where $p$ starts to\n    hold for the sum of all elements up to that position.\n\n  fun [long_type] FingerTree.foldl\n    Fold with function from left\n\n  fun [long_type] FingerTree.foldr\n    Fold with function from right\n\n  fun FingerTree.count\n    Return the number of elements\n\n*)"], ["", "text \\<open>\n    \\underline{@{term_type \"FingerTree.toList\"}}\\\\                                               \n        Convert to list ($O(n)$)\\\\                                                               \n\n\n    \\underline{@{term_type \"FingerTree.empty\"}}\\\\\n        The empty finger tree ($O(1)$)\\\\         \n    {\\bf Spec} \\<open>FingerTree.empty_correct\\<close>:\n    @{thm [display] \"FingerTree.empty_correct\"}   \n\n\n    \\underline{@{term_type \"FingerTree.annot\"}}\\\\\n        Return sum of all annotations ($O(1)$)\\\\ \n    {\\bf Spec} \\<open>FingerTree.annot_correct\\<close>:\n    @{thm [display] \"FingerTree.annot_correct\"}   \n\n\n    \\underline{@{term_type \"FingerTree.toTree\"}}\\\\\n        Convert list to finger tree ($O(n\\log(n))$)\\\\\n    {\\bf Spec} \\<open>FingerTree.toTree_correct\\<close>:  \n    @{thm [display] \"FingerTree.toTree_correct\"}     \n\n\n    \\underline{@{term_type \"FingerTree.lcons\"}}\\\\\n        Append element at the left end ($O(\\log(n))$, $O(1)$ amortized)\\\\                                                            \n    {\\bf Spec} \\<open>FingerTree.lcons_correct\\<close>:                                                                                   \n    @{thm [display] \"FingerTree.lcons_correct\"}                                                                                      \n                                                                                                                     \n                                                                                                                     \n    \\underline{@{term_type \"FingerTree.rcons\"}}\\\\                                                                    \n        Append element at the right end ($O(\\log(n))$, $O(1)$ amortized)\\\\                                           \n    {\\bf Spec} \\<open>FingerTree.rcons_correct\\<close>:                                                                   \n    @{thm [display] \"FingerTree.rcons_correct\"}                                                                      \n                                                                                                                     \n                                                                                                                     \n    \\underline{@{term_type \"FingerTree.viewL\"}}\\\\                                                                    \n        Detach leftmost element ($O(\\log(n))$, $O(1)$ amortized)\\\\                                                   \n    {\\bf Spec} \\<open>FingerTree.viewL_correct\\<close>:                                                                   \n    @{thm [display] \"FingerTree.viewL_correct\"}                                                                      \n                                                                                                                     \n\n    \\underline{@{term_type \"FingerTree.viewR\"}}\\\\\n        Detach rightmost element ($O(\\log(n))$, $O(1)$ amortized)\\\\\n    {\\bf Spec} \\<open>FingerTree.viewR_correct\\<close>:                 \n    @{thm [display] \"FingerTree.viewR_correct\"}                    \n\n\n    \\underline{@{term_type \"FingerTree.isEmpty\"}}\\\\\n        Check whether tree is empty ($O(1)$)\\\\     \n    {\\bf Spec} \\<open>FingerTree.isEmpty_correct\\<close>:\n    @{thm [display] \"FingerTree.isEmpty_correct\"}   \n\n\n    \\underline{@{term_type \"FingerTree.head\"}}\\\\\n        Get leftmost element of non-empty tree ($O(\\log(n))$)\\\\\n    {\\bf Spec} \\<open>FingerTree.head_correct\\<close>:              \n    @{thm [display] \"FingerTree.head_correct\"}                 \n\n\n    \\underline{@{term_type \"FingerTree.tail\"}}\\\\\n        Get all but leftmost element of non-empty tree ($O(\\log(n))$)\\\\\n    {\\bf Spec} \\<open>FingerTree.tail_correct\\<close>:                      \n    @{thm [display] \"FingerTree.tail_correct\"}                         \n\n\n    \\underline{@{term_type \"FingerTree.headR\"}}\\\\\n        Get rightmost element of non-empty tree ($O(\\log(n))$)\\\\\n    {\\bf Spec} \\<open>FingerTree.headR_correct\\<close>:              \n    @{thm [display] \"FingerTree.headR_correct\"}                 \n\n\n    \\underline{@{term_type \"FingerTree.tailR\"}}\\\\\n        Get all but rightmost element of non-empty tree ($O(\\log(n))$)\\\\\n    {\\bf Spec} \\<open>FingerTree.tailR_correct\\<close>:\n    @{thm [display] \"FingerTree.tailR_correct\"}\n\n\n    \\underline{@{term_type \"FingerTree.app\"}}\\\\\n        Concatenate two finger trees ($O(\\log(m+n))$)\\\\\n    {\\bf Spec} \\<open>FingerTree.app_correct\\<close>:\n    @{thm [display] \"FingerTree.app_correct\"}\n\n\n    \\underline{@{term \"FingerTree.splitTree\"}}\n    @{term_type [display] \"FingerTree.splitTree\"}\n        Split tree by a monotone predicate. ($O(\\log(n))$)\n\n    A predicate $p$ over the annotations is called monotone, iff, for all\n    annotations\n    $a,b$ with $p(a)$, we have already $p(a+b)$.\n\n    Splitting is done by specifying a monotone predicate $p$ that does not hold\n    for the initial value $i$ of the summation, but holds for $i$ plus the sum\n    of all annotations. The tree is then split at the position where $p$ starts to\n    hold for the sum of all elements up to that position.\\\\\n    {\\bf Spec} \\<open>FingerTree.splitTree_correct\\<close>:\n    @{thm [display] \"FingerTree.splitTree_correct\"}\n\n\n    \\underline{@{term \"FingerTree.foldl\"}}\n    @{term_type [display] \"FingerTree.foldl\"}\n        Fold with function from left\\\\\n    {\\bf Spec} \\<open>FingerTree.foldl_correct\\<close>:\n    @{thm [display] \"FingerTree.foldl_correct\"}\n\n\n    \\underline{@{term \"FingerTree.foldr\"}}\n    @{term_type [display] \"FingerTree.foldr\"}\n        Fold with function from right\\\\\n    {\\bf Spec} \\<open>FingerTree.foldr_correct\\<close>:\n    @{thm [display] \"FingerTree.foldr_correct\"}\n\n\n    \\underline{@{term_type \"FingerTree.count\"}}\\\\\n        Return the number of elements\\\\\n    {\\bf Spec} \\<open>FingerTree.count_correct\\<close>:\n    @{thm [display] \"FingerTree.count_correct\"}\n\\<close>"], ["", "end"]]}