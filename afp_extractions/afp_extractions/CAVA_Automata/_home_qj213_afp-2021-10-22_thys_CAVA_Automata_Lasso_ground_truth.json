{"file_name": "/home/qj213/afp-2021-10-22/thys/CAVA_Automata/Lasso.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CAVA_Automata", "problem_names": ["lemma prpl_of_lasso_simps[simp]: \n    \"fst (prpl_of_lasso L) = lasso_reach L\"\n    \"snd (prpl_of_lasso L) = lasso_va L # lasso_cysfx L\"", "lemma lasso_of_prpl_simps[simp]:\n    \"lasso_reach (lasso_of_prpl prpl) = fst prpl\"\n    \"snd prpl \\<noteq> [] \\<Longrightarrow> lasso_cycle (lasso_of_prpl prpl) = snd prpl\"", "lemma run_of_lasso_of_prpl: \n    \"pl \\<noteq> [] \\<Longrightarrow> run_of_lasso (lasso_of_prpl (pr, pl)) = pr \\<frown> pl\\<^sup>\\<omega>\"", "lemma map_lasso_simps[simp]:\n    \"lasso_reach (map_lasso f L) = map f (lasso_reach L)\"\n    \"lasso_va (map_lasso f L) = f (lasso_va L)\"\n    \"lasso_cysfx (map_lasso f L) = map f (lasso_cysfx L)\"\n    \"lasso_v0 (map_lasso f L) = f (lasso_v0 L)\"\n    \"lasso_cycle (map_lasso f L) = map f (lasso_cycle L)\"", "lemma map_lasso_run[simp]:\n    shows \"run_of_lasso (map_lasso f L) = f o (run_of_lasso L)\"", "lemma is_lasso_pre_prpl_of_lasso[simp]: \n      \"is_lasso_prpl_pre (prpl_of_lasso L) \\<longleftrightarrow> is_lasso_pre L\"", "lemma is_lasso_prpl_pre_conv: \n      \"is_lasso_prpl_pre prpl \n      \\<longleftrightarrow> (snd prpl\\<noteq>[] \\<and> is_lasso_pre (lasso_of_prpl prpl))\"", "lemma is_lasso_pre_empty[simp]: \"V0 = {} \\<Longrightarrow> \\<not>is_lasso_pre L\"", "lemma run_of_lasso_pre: \n      assumes \"is_lasso_pre L\"  \n      shows \"is_run (run_of_lasso L)\"\n      and \"run_of_lasso L 0 \\<in> V0\"", "lemma is_lasso_prpl_of_lasso[simp]: \n      \"is_lasso_prpl (prpl_of_lasso L) \\<longleftrightarrow> is_lasso L\"", "lemma is_lasso_prpl_conv: \n      \"is_lasso_prpl prpl \\<longleftrightarrow> (snd prpl\\<noteq>[] \\<and> is_lasso (lasso_of_prpl prpl))\"", "lemma is_lasso_empty[simp]: \"V0 = {} \\<Longrightarrow> \\<not>is_lasso L\"", "lemma lasso_accepted:\n      assumes L: \"is_lasso L\"\n      shows \"is_acc_run (run_of_lasso L)\"", "lemma lasso_prpl_acc_run:\n      \"is_lasso_prpl (pr, pl) \\<Longrightarrow> is_acc_run (pr \\<frown> iter pl)\"", "lemma accepted_lasso:\n      assumes [simp, intro]: \"finite (E\\<^sup>* `` V0)\"\n      assumes A: \"is_acc_run r\"\n      shows \"\\<exists>L. is_lasso L\"", "lemma is_lasso_pre_ext[simp]: \n      \"gbg.is_lasso_pre T m = is_lasso_pre\"", "lemma is_lasso_gbg: \n      \"gbg.is_lasso T m = is_lasso\"", "lemmas lasso_accepted = gbg.lasso_accepted[unfolded to_gbg_alt is_lasso_gbg]", "lemmas accepted_lasso = gbg.accepted_lasso[unfolded to_gbg_alt is_lasso_gbg]", "lemma is_lasso_prpl_of_lasso[simp]: \n      \"is_lasso_prpl (prpl_of_lasso L) \\<longleftrightarrow> is_lasso L\"", "lemma is_lasso_prpl_conv: \n      \"is_lasso_prpl prpl \\<longleftrightarrow> (snd prpl\\<noteq>[] \\<and> is_lasso (lasso_of_prpl prpl))\"", "lemma lasso_prpl_acc_run:\n      \"is_lasso_prpl (pr, pl) \\<Longrightarrow> is_acc_run (pr \\<frown> iter pl)\"", "lemma is_lasso_prpl_of_lasso[simp]: \n      \"is_lasso_prpl (prpl_of_lasso L) \\<longleftrightarrow> is_lasso L\"", "lemma is_lasso_prpl_conv: \n      \"is_lasso_prpl prpl \\<longleftrightarrow> (snd prpl\\<noteq>[] \\<and> is_lasso (lasso_of_prpl prpl))\"", "lemma is_lasso_pre_ext[simp]: \n      \"gbg.is_lasso_pre T m = is_lasso_pre\"", "lemma is_lasso_gbg: \"gbg.is_lasso T m = is_lasso\"", "lemmas lasso_accepted = gbg.lasso_accepted[unfolded to_gbg_alt is_lasso_gbg]", "lemmas accepted_lasso = gbg.accepted_lasso[unfolded to_gbg_alt is_lasso_gbg]", "lemma lasso_prpl_acc_run:\n      \"is_lasso_prpl (pr, pl) \\<Longrightarrow> is_acc_run (pr \\<frown> iter pl)\"", "lemma degen_lasso_sound:\n      assumes A: \"degen.is_lasso T m L\"\n      shows \"is_lasso (map_lasso fst L)\"", "lemma lasso_rel_ext_def: \"\\<And> Re R. \\<langle>Re,R\\<rangle>lasso_rel_ext = {\n    (\\<lparr> lasso_reach = r', lasso_va = va', lasso_cysfx = cysfx', \\<dots>=m' \\<rparr>, \n     \\<lparr> lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx, \\<dots>=m \\<rparr>) |\n      r' r va' va cysfx' cysfx m' m. \n      (r',r) \\<in> \\<langle>R\\<rangle>list_rel \n    \\<and> (va',va)\\<in>R\n    \\<and> (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel\n    \\<and> (m',m) \\<in> Re\n    }\"", "lemma lasso_rel_ext_sv[relator_props]: \n    \"\\<And> Re R. \\<lbrakk> single_valued Re; single_valued R \\<rbrakk> \\<Longrightarrow> single_valued (\\<langle>Re,R\\<rangle>lasso_rel_ext)\"", "lemma lasso_rel_ext_id[relator_props]: \n    \"\\<And>Re R. \\<lbrakk> Re=Id; R=Id \\<rbrakk> \\<Longrightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext = Id\"", "lemmas [autoref_rel_intf] = REL_INTFI[of lasso_rel_ext i_lasso_ext]", "lemma lasso_param[param, autoref_rules]:\n    \"\\<And>Re R. (lasso_reach, lasso_reach) \\<in> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>R\\<rangle>list_rel\"\n    \"\\<And>Re R. (lasso_va, lasso_va) \\<in> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> R\"\n    \"\\<And>Re R. (lasso_cysfx, lasso_cysfx) \\<in> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>R\\<rangle>list_rel\"\n    \"\\<And>Re R. (lasso_ext, lasso_ext) \n      \\<in> \\<langle>R\\<rangle>list_rel \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>list_rel \\<rightarrow> Re \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext\"\n    \"\\<And>Re R. (lasso_reach_update, lasso_reach_update) \n      \\<in> (\\<langle>R\\<rangle>list_rel \\<rightarrow> \\<langle>R\\<rangle>list_rel) \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext\"\n    \"\\<And>Re R. (lasso_va_update, lasso_va_update) \n      \\<in> (R\\<rightarrow>R) \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext\"\n    \"\\<And>Re R. (lasso_cysfx_update, lasso_cysfx_update) \n      \\<in> (\\<langle>R\\<rangle>list_rel \\<rightarrow> \\<langle>R\\<rangle>list_rel) \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext\"\n    \"\\<And>Re R. (lasso.more_update, lasso.more_update) \n      \\<in> (Re\\<rightarrow>Re) \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext\"", "lemma lasso_param2[param, autoref_rules]:\n    \"\\<And>Re R. (lasso_v0, lasso_v0) \\<in> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> R\"\n    \"\\<And>Re R. (lasso_cycle, lasso_cycle) \\<in> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>R\\<rangle>list_rel\"\n    \"\\<And>Re R. (map_lasso, map_lasso) \n      \\<in> (R\\<rightarrow>R') \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>unit_rel,R'\\<rangle>lasso_rel_ext\"", "lemma lasso_of_prpl_param: \"\\<lbrakk>(l',l)\\<in>\\<langle>R\\<rangle>list_rel \\<times>\\<^sub>r \\<langle>R\\<rangle>list_rel; snd l \\<noteq> []\\<rbrakk> \n    \\<Longrightarrow> (lasso_of_prpl l', lasso_of_prpl l) \\<in> \\<langle>unit_rel,R\\<rangle>lasso_rel_ext\"", "lemma lasso_of_prpl_autoref[autoref_rules]:\n    assumes \"SIDE_PRECOND (snd l \\<noteq> [])\"\n    assumes \"(l',l)\\<in>\\<langle>R\\<rangle>list_rel \\<times>\\<^sub>r \\<langle>R\\<rangle>list_rel\"\n    shows \"(lasso_of_prpl l', \n      (OP lasso_of_prpl \n        ::: \\<langle>R\\<rangle>list_rel \\<times>\\<^sub>r \\<langle>R\\<rangle>list_rel \\<rightarrow> \\<langle>unit_rel,R\\<rangle>lasso_rel_ext)$l) \n      \\<in> \\<langle>unit_rel,R\\<rangle>lasso_rel_ext\"", "lemma lasso_run_rel_def: \n    \"\\<langle>R\\<rangle>lasso_run_rel = br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R)\"", "lemma lasso_run_rel_sv[relator_props]: \n    \"single_valued R \\<Longrightarrow> single_valued (\\<langle>R\\<rangle>lasso_run_rel)\"", "lemmas [autoref_rel_intf] = REL_INTFI[of lasso_run_rel i_run]", "lemma [autoref_op_pat]: \"(o) \\<equiv> op_map_run\"", "lemma map_lasso_run_refine[autoref_rules]:\n    shows \"(map_lasso,op_map_run) \\<in> (R\\<rightarrow>R') \\<rightarrow> \\<langle>R\\<rangle>lasso_run_rel \\<rightarrow> \\<langle>R'\\<rangle>lasso_run_rel\""], "translations": [["", "lemma prpl_of_lasso_simps[simp]: \n    \"fst (prpl_of_lasso L) = lasso_reach L\"\n    \"snd (prpl_of_lasso L) = lasso_va L # lasso_cysfx L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (prpl_of_lasso L) = lasso_reach L &&&\n    snd (prpl_of_lasso L) = lasso_va L # lasso_cysfx L", "unfolding prpl_of_lasso_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lasso_reach L, lasso_va L # lasso_cysfx L) = lasso_reach L &&&\n    snd (lasso_reach L, lasso_va L # lasso_cysfx L) =\n    lasso_va L # lasso_cysfx L", "by auto"], ["", "lemma lasso_of_prpl_simps[simp]:\n    \"lasso_reach (lasso_of_prpl prpl) = fst prpl\"\n    \"snd prpl \\<noteq> [] \\<Longrightarrow> lasso_cycle (lasso_of_prpl prpl) = snd prpl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lasso_reach (lasso_of_prpl prpl) = fst prpl &&&\n    (snd prpl \\<noteq> [] \\<Longrightarrow>\n     lasso_cycle (lasso_of_prpl prpl) = snd prpl)", "unfolding lasso_of_prpl_def lasso_cycle_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lasso_reach\n     (case prpl of\n      (pr, pl) \\<Rightarrow>\n        \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n           lasso_cysfx = tl pl\\<rparr>) =\n    fst prpl &&&\n    (snd prpl \\<noteq> [] \\<Longrightarrow>\n     lasso_va\n      (case prpl of\n       (pr, pl) \\<Rightarrow>\n         \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n            lasso_cysfx = tl pl\\<rparr>) #\n     lasso_cysfx\n      (case prpl of\n       (pr, pl) \\<Rightarrow>\n         \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n            lasso_cysfx = tl pl\\<rparr>) =\n     snd prpl)", "by (auto split: prod.split)"], ["", "definition run_of_lasso :: \"'q lasso \\<Rightarrow> 'q word\"\n    \\<comment> \\<open>Run described by a lasso\\<close>\n    where \"run_of_lasso L \\<equiv> lasso_reach L \\<frown> (lasso_cycle L)\\<^sup>\\<omega>\""], ["", "lemma run_of_lasso_of_prpl: \n    \"pl \\<noteq> [] \\<Longrightarrow> run_of_lasso (lasso_of_prpl (pr, pl)) = pr \\<frown> pl\\<^sup>\\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pl \\<noteq> [] \\<Longrightarrow>\n    run_of_lasso (lasso_of_prpl (pr, pl)) = pr \\<frown> pl\\<^sup>\\<omega>", "unfolding run_of_lasso_def lasso_of_prpl_def lasso_cycle_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pl \\<noteq> [] \\<Longrightarrow>\n    lasso_reach\n     (case (pr, pl) of\n      (pr, pl) \\<Rightarrow>\n        \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n           lasso_cysfx = tl pl\\<rparr>) \\<frown>\n    (lasso_va\n      (case (pr, pl) of\n       (pr, pl) \\<Rightarrow>\n         \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n            lasso_cysfx = tl pl\\<rparr>) #\n     lasso_cysfx\n      (case (pr, pl) of\n       (pr, pl) \\<Rightarrow>\n         \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n            lasso_cysfx = tl pl\\<rparr>))\\<^sup>\\<omega> =\n    pr \\<frown> pl\\<^sup>\\<omega>", "by auto"], ["", "definition \"map_lasso f L \\<equiv> \\<lparr>\n    lasso_reach = map f (lasso_reach L),\n    lasso_va = f (lasso_va L),\n    lasso_cysfx = map f (lasso_cysfx L)\n  \\<rparr>\""], ["", "lemma map_lasso_simps[simp]:\n    \"lasso_reach (map_lasso f L) = map f (lasso_reach L)\"\n    \"lasso_va (map_lasso f L) = f (lasso_va L)\"\n    \"lasso_cysfx (map_lasso f L) = map f (lasso_cysfx L)\"\n    \"lasso_v0 (map_lasso f L) = f (lasso_v0 L)\"\n    \"lasso_cycle (map_lasso f L) = map f (lasso_cycle L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lasso_reach (map_lasso f L) = map f (lasso_reach L) &&&\n     lasso_va (map_lasso f L) = f (lasso_va L)) &&&\n    lasso_cysfx (map_lasso f L) = map f (lasso_cysfx L) &&&\n    lasso_v0 (map_lasso f L) = f (lasso_v0 L) &&&\n    lasso_cycle (map_lasso f L) = map f (lasso_cycle L)", "unfolding map_lasso_def lasso_v0_def lasso_cycle_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (lasso_reach\n      \\<lparr>lasso_reach = map f (lasso_reach L),\n         lasso_va = f (lasso_va L),\n         lasso_cysfx = map f (lasso_cysfx L)\\<rparr> =\n     map f (lasso_reach L) &&&\n     lasso_va\n      \\<lparr>lasso_reach = map f (lasso_reach L),\n         lasso_va = f (lasso_va L),\n         lasso_cysfx = map f (lasso_cysfx L)\\<rparr> =\n     f (lasso_va L)) &&&\n    lasso_cysfx\n     \\<lparr>lasso_reach = map f (lasso_reach L), lasso_va = f (lasso_va L),\n        lasso_cysfx = map f (lasso_cysfx L)\\<rparr> =\n    map f (lasso_cysfx L) &&&\n    (case lasso_reach\n           \\<lparr>lasso_reach = map f (lasso_reach L),\n              lasso_va = f (lasso_va L),\n              lasso_cysfx = map f (lasso_cysfx L)\\<rparr> of\n     [] \\<Rightarrow>\n       lasso_va\n        \\<lparr>lasso_reach = map f (lasso_reach L),\n           lasso_va = f (lasso_va L),\n           lasso_cysfx = map f (lasso_cysfx L)\\<rparr>\n     | v0 # x \\<Rightarrow> v0) =\n    f (case lasso_reach L of [] \\<Rightarrow> lasso_va L\n       | v0 # x \\<Rightarrow> v0) &&&\n    lasso_va\n     \\<lparr>lasso_reach = map f (lasso_reach L), lasso_va = f (lasso_va L),\n        lasso_cysfx = map f (lasso_cysfx L)\\<rparr> #\n    lasso_cysfx\n     \\<lparr>lasso_reach = map f (lasso_reach L), lasso_va = f (lasso_va L),\n        lasso_cysfx = map f (lasso_cysfx L)\\<rparr> =\n    map f (lasso_va L # lasso_cysfx L)", "by (auto split: list.split)"], ["", "lemma map_lasso_run[simp]:\n    shows \"run_of_lasso (map_lasso f L) = f o (run_of_lasso L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run_of_lasso (map_lasso f L) = (f \\<circ>\\<circ> run_of_lasso) L", "by (auto simp add: map_lasso_def run_of_lasso_def conc_def iter_def\n      lasso_cycle_def lasso_v0_def fun_eq_iff not_less nth_Cons'\n      nz_le_conv_less)"], ["", "context graph begin"], ["", "definition is_lasso_pre :: \"'v lasso \\<Rightarrow> bool\" \n      where \"is_lasso_pre L \\<equiv> \n        lasso_v0 L \\<in> V0\n      \\<and> path E (lasso_v0 L) (lasso_reach L) (lasso_va L) \n      \\<and> path E (lasso_va L) (lasso_cycle L) (lasso_va L)\""], ["", "definition \"is_lasso_prpl_pre prpl \\<equiv> case prpl of (pr, pl) \\<Rightarrow> \\<exists>v0 va.\n      v0\\<in>V0 \n      \\<and> pl \\<noteq> []\n      \\<and> path E v0 pr va\n      \\<and> path E va pl va\""], ["", "lemma is_lasso_pre_prpl_of_lasso[simp]: \n      \"is_lasso_prpl_pre (prpl_of_lasso L) \\<longleftrightarrow> is_lasso_pre L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso_prpl_pre (prpl_of_lasso L) = is_lasso_pre L", "unfolding is_lasso_pre_def prpl_of_lasso_def is_lasso_prpl_pre_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (lasso_reach L, lasso_va L # lasso_cysfx L) of\n     (pr, pl) \\<Rightarrow>\n       \\<exists>v0 va.\n          v0 \\<in> V0 \\<and>\n          pl \\<noteq> [] \\<and> path E v0 pr va \\<and> path E va pl va) =\n    (lasso_v0 L \\<in> V0 \\<and>\n     path E (lasso_v0 L) (lasso_reach L) (lasso_va L) \\<and>\n     path E (lasso_va L) (lasso_cycle L) (lasso_va L))", "unfolding lasso_v0_def lasso_cycle_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (lasso_reach L, lasso_va L # lasso_cysfx L) of\n     (pr, pl) \\<Rightarrow>\n       \\<exists>v0 va.\n          v0 \\<in> V0 \\<and>\n          pl \\<noteq> [] \\<and> path E v0 pr va \\<and> path E va pl va) =\n    ((case lasso_reach L of [] \\<Rightarrow> lasso_va L\n      | v0 # x \\<Rightarrow> v0)\n     \\<in> V0 \\<and>\n     path E\n      (case lasso_reach L of [] \\<Rightarrow> lasso_va L\n       | v0 # x \\<Rightarrow> v0)\n      (lasso_reach L) (lasso_va L) \\<and>\n     path E (lasso_va L) (lasso_va L # lasso_cysfx L) (lasso_va L))", "by (auto simp: path_simps split: list.split)"], ["", "lemma is_lasso_prpl_pre_conv: \n      \"is_lasso_prpl_pre prpl \n      \\<longleftrightarrow> (snd prpl\\<noteq>[] \\<and> is_lasso_pre (lasso_of_prpl prpl))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso_prpl_pre prpl =\n    (snd prpl \\<noteq> [] \\<and> is_lasso_pre (lasso_of_prpl prpl))", "unfolding is_lasso_pre_def lasso_of_prpl_def is_lasso_prpl_pre_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case prpl of\n     (pr, pl) \\<Rightarrow>\n       \\<exists>v0 va.\n          v0 \\<in> V0 \\<and>\n          pl \\<noteq> [] \\<and> path E v0 pr va \\<and> path E va pl va) =\n    (snd prpl \\<noteq> [] \\<and>\n     lasso_v0\n      (case prpl of\n       (pr, pl) \\<Rightarrow>\n         \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n            lasso_cysfx = tl pl\\<rparr>)\n     \\<in> V0 \\<and>\n     path E\n      (lasso_v0\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>))\n      (lasso_reach\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>))\n      (lasso_va\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>)) \\<and>\n     path E\n      (lasso_va\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>))\n      (lasso_cycle\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>))\n      (lasso_va\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>)))", "unfolding lasso_v0_def lasso_cycle_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case prpl of\n     (pr, pl) \\<Rightarrow>\n       \\<exists>v0 va.\n          v0 \\<in> V0 \\<and>\n          pl \\<noteq> [] \\<and> path E v0 pr va \\<and> path E va pl va) =\n    (snd prpl \\<noteq> [] \\<and>\n     (case lasso_reach\n            (case prpl of\n             (pr, pl) \\<Rightarrow>\n               \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                  lasso_cysfx = tl pl\\<rparr>) of\n      [] \\<Rightarrow>\n        lasso_va\n         (case prpl of\n          (pr, pl) \\<Rightarrow>\n            \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n               lasso_cysfx = tl pl\\<rparr>)\n      | v0 # x \\<Rightarrow> v0)\n     \\<in> V0 \\<and>\n     path E\n      (case lasso_reach\n             (case prpl of\n              (pr, pl) \\<Rightarrow>\n                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                   lasso_cysfx = tl pl\\<rparr>) of\n       [] \\<Rightarrow>\n         lasso_va\n          (case prpl of\n           (pr, pl) \\<Rightarrow>\n             \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                lasso_cysfx = tl pl\\<rparr>)\n       | v0 # x \\<Rightarrow> v0)\n      (lasso_reach\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>))\n      (lasso_va\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>)) \\<and>\n     path E\n      (lasso_va\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>))\n      (lasso_va\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>) #\n       lasso_cysfx\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>))\n      (lasso_va\n        (case prpl of\n         (pr, pl) \\<Rightarrow>\n           \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n              lasso_cysfx = tl pl\\<rparr>)))", "apply (cases prpl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       prpl = (a, b) \\<Longrightarrow>\n       (case prpl of\n        (pr, pl) \\<Rightarrow>\n          \\<exists>v0 va.\n             v0 \\<in> V0 \\<and>\n             pl \\<noteq> [] \\<and> path E v0 pr va \\<and> path E va pl va) =\n       (snd prpl \\<noteq> [] \\<and>\n        (case lasso_reach\n               (case prpl of\n                (pr, pl) \\<Rightarrow>\n                  \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                     lasso_cysfx = tl pl\\<rparr>) of\n         [] \\<Rightarrow>\n           lasso_va\n            (case prpl of\n             (pr, pl) \\<Rightarrow>\n               \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                  lasso_cysfx = tl pl\\<rparr>)\n         | v0 # x \\<Rightarrow> v0)\n        \\<in> V0 \\<and>\n        path E\n         (case lasso_reach\n                (case prpl of\n                 (pr, pl) \\<Rightarrow>\n                   \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                      lasso_cysfx = tl pl\\<rparr>) of\n          [] \\<Rightarrow>\n            lasso_va\n             (case prpl of\n              (pr, pl) \\<Rightarrow>\n                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                   lasso_cysfx = tl pl\\<rparr>)\n          | v0 # x \\<Rightarrow> v0)\n         (lasso_reach\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>))\n         (lasso_va\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>)) \\<and>\n        path E\n         (lasso_va\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>))\n         (lasso_va\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>) #\n          lasso_cysfx\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>))\n         (lasso_va\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>)))", "apply (rename_tac a b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       prpl = (a, b) \\<Longrightarrow>\n       (case prpl of\n        (pr, pl) \\<Rightarrow>\n          \\<exists>v0 va.\n             v0 \\<in> V0 \\<and>\n             pl \\<noteq> [] \\<and> path E v0 pr va \\<and> path E va pl va) =\n       (snd prpl \\<noteq> [] \\<and>\n        (case lasso_reach\n               (case prpl of\n                (pr, pl) \\<Rightarrow>\n                  \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                     lasso_cysfx = tl pl\\<rparr>) of\n         [] \\<Rightarrow>\n           lasso_va\n            (case prpl of\n             (pr, pl) \\<Rightarrow>\n               \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                  lasso_cysfx = tl pl\\<rparr>)\n         | v0 # x \\<Rightarrow> v0)\n        \\<in> V0 \\<and>\n        path E\n         (case lasso_reach\n                (case prpl of\n                 (pr, pl) \\<Rightarrow>\n                   \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                      lasso_cysfx = tl pl\\<rparr>) of\n          [] \\<Rightarrow>\n            lasso_va\n             (case prpl of\n              (pr, pl) \\<Rightarrow>\n                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                   lasso_cysfx = tl pl\\<rparr>)\n          | v0 # x \\<Rightarrow> v0)\n         (lasso_reach\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>))\n         (lasso_va\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>)) \\<and>\n        path E\n         (lasso_va\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>))\n         (lasso_va\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>) #\n          lasso_cysfx\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>))\n         (lasso_va\n           (case prpl of\n            (pr, pl) \\<Rightarrow>\n              \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                 lasso_cysfx = tl pl\\<rparr>)))", "apply (case_tac b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>prpl = (a, b); b = []\\<rbrakk>\n       \\<Longrightarrow> (case prpl of\n                          (pr, pl) \\<Rightarrow>\n                            \\<exists>v0 va.\n                               v0 \\<in> V0 \\<and>\n                               pl \\<noteq> [] \\<and>\n                               path E v0 pr va \\<and> path E va pl va) =\n                         (snd prpl \\<noteq> [] \\<and>\n                          (case lasso_reach\n                                 (case prpl of\n                                  (pr, pl) \\<Rightarrow>\n                                    \\<lparr>lasso_reach = pr,\n lasso_va = hd pl, lasso_cysfx = tl pl\\<rparr>) of\n                           [] \\<Rightarrow>\n                             lasso_va\n                              (case prpl of\n                               (pr, pl) \\<Rightarrow>\n                                 \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                    lasso_cysfx = tl pl\\<rparr>)\n                           | v0 # x \\<Rightarrow> v0)\n                          \\<in> V0 \\<and>\n                          path E\n                           (case lasso_reach\n                                  (case prpl of\n                                   (pr, pl) \\<Rightarrow>\n                                     \\<lparr>lasso_reach = pr,\n  lasso_va = hd pl, lasso_cysfx = tl pl\\<rparr>) of\n                            [] \\<Rightarrow>\n                              lasso_va\n                               (case prpl of\n                                (pr, pl) \\<Rightarrow>\n                                  \\<lparr>lasso_reach = pr,\n                                     lasso_va = hd pl,\n                                     lasso_cysfx = tl pl\\<rparr>)\n                            | v0 # x \\<Rightarrow> v0)\n                           (lasso_reach\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>))\n                           (lasso_va\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>)) \\<and>\n                          path E\n                           (lasso_va\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>))\n                           (lasso_va\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>) #\n                            lasso_cysfx\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>))\n                           (lasso_va\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>)))\n 2. \\<And>a b aa list.\n       \\<lbrakk>prpl = (a, b); b = aa # list\\<rbrakk>\n       \\<Longrightarrow> (case prpl of\n                          (pr, pl) \\<Rightarrow>\n                            \\<exists>v0 va.\n                               v0 \\<in> V0 \\<and>\n                               pl \\<noteq> [] \\<and>\n                               path E v0 pr va \\<and> path E va pl va) =\n                         (snd prpl \\<noteq> [] \\<and>\n                          (case lasso_reach\n                                 (case prpl of\n                                  (pr, pl) \\<Rightarrow>\n                                    \\<lparr>lasso_reach = pr,\n lasso_va = hd pl, lasso_cysfx = tl pl\\<rparr>) of\n                           [] \\<Rightarrow>\n                             lasso_va\n                              (case prpl of\n                               (pr, pl) \\<Rightarrow>\n                                 \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                    lasso_cysfx = tl pl\\<rparr>)\n                           | v0 # x \\<Rightarrow> v0)\n                          \\<in> V0 \\<and>\n                          path E\n                           (case lasso_reach\n                                  (case prpl of\n                                   (pr, pl) \\<Rightarrow>\n                                     \\<lparr>lasso_reach = pr,\n  lasso_va = hd pl, lasso_cysfx = tl pl\\<rparr>) of\n                            [] \\<Rightarrow>\n                              lasso_va\n                               (case prpl of\n                                (pr, pl) \\<Rightarrow>\n                                  \\<lparr>lasso_reach = pr,\n                                     lasso_va = hd pl,\n                                     lasso_cysfx = tl pl\\<rparr>)\n                            | v0 # x \\<Rightarrow> v0)\n                           (lasso_reach\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>))\n                           (lasso_va\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>)) \\<and>\n                          path E\n                           (lasso_va\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>))\n                           (lasso_va\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>) #\n                            lasso_cysfx\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>))\n                           (lasso_va\n                             (case prpl of\n                              (pr, pl) \\<Rightarrow>\n                                \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                                   lasso_cysfx = tl pl\\<rparr>)))", "apply (auto simp: path_simps split: list.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_lasso_pre_empty[simp]: \"V0 = {} \\<Longrightarrow> \\<not>is_lasso_pre L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V0 = {} \\<Longrightarrow> \\<not> is_lasso_pre L", "unfolding is_lasso_pre_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. V0 = {} \\<Longrightarrow>\n    \\<not> (lasso_v0 L \\<in> V0 \\<and>\n            path E (lasso_v0 L) (lasso_reach L) (lasso_va L) \\<and>\n            path E (lasso_va L) (lasso_cycle L) (lasso_va L))", "by auto"], ["", "lemma run_of_lasso_pre: \n      assumes \"is_lasso_pre L\"  \n      shows \"is_run (run_of_lasso L)\"\n      and \"run_of_lasso L 0 \\<in> V0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_run (run_of_lasso L) &&& run_of_lasso L 0 \\<in> V0", "using assms"], ["proof (prove)\nusing this:\n  is_lasso_pre L\n\ngoal (1 subgoal):\n 1. is_run (run_of_lasso L) &&& run_of_lasso L 0 \\<in> V0", "unfolding is_lasso_pre_def is_run_def run_of_lasso_def \n        lasso_cycle_def lasso_v0_def"], ["proof (prove)\nusing this:\n  (case lasso_reach L of [] \\<Rightarrow> lasso_va L\n   | v0 # x \\<Rightarrow> v0)\n  \\<in> V0 \\<and>\n  path E\n   (case lasso_reach L of [] \\<Rightarrow> lasso_va L\n    | v0 # x \\<Rightarrow> v0)\n   (lasso_reach L) (lasso_va L) \\<and>\n  path E (lasso_va L) (lasso_va L # lasso_cysfx L) (lasso_va L)\n\ngoal (1 subgoal):\n 1. (lasso_reach L \\<frown> (lasso_va L # lasso_cysfx L)\\<^sup>\\<omega>) 0\n    \\<in> V0 \\<and>\n    ipath E\n     (lasso_reach L \\<frown>\n      (lasso_va L # lasso_cysfx L)\\<^sup>\\<omega>) &&&\n    (lasso_reach L \\<frown> (lasso_va L # lasso_cysfx L)\\<^sup>\\<omega>) 0\n    \\<in> V0", "by (auto simp: ipath_conc_conv ipath_iter_conv path_cons_conv conc_fst \n        split: list.splits)"], ["", "end"], ["", "context gb_graph begin"], ["", "definition is_lasso\n      :: \"'Q lasso \\<Rightarrow> bool\" \n      \\<comment> \\<open>Predicate that defines a lasso\\<close>\n      where \"is_lasso L \\<equiv> \n        is_lasso_pre L\n      \\<and> (\\<forall>A\\<in>F. (set (lasso_cycle L)) \\<inter> A \\<noteq> {})\""], ["", "definition \"is_lasso_prpl prpl \\<equiv> \n      is_lasso_prpl_pre prpl\n      \\<and> (\\<forall>A\\<in>F. set (snd prpl) \\<inter> A \\<noteq> {})\""], ["", "lemma is_lasso_prpl_of_lasso[simp]: \n      \"is_lasso_prpl (prpl_of_lasso L) \\<longleftrightarrow> is_lasso L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso_prpl (prpl_of_lasso L) = is_lasso L", "unfolding is_lasso_def is_lasso_prpl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lasso_prpl_pre (prpl_of_lasso L) \\<and>\n     (\\<forall>A\\<in>F.\n         set (snd (prpl_of_lasso L)) \\<inter> A \\<noteq> {})) =\n    (is_lasso_pre L \\<and>\n     (\\<forall>A\\<in>F. set (lasso_cycle L) \\<inter> A \\<noteq> {}))", "unfolding lasso_v0_def lasso_cycle_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lasso_prpl_pre (prpl_of_lasso L) \\<and>\n     (\\<forall>A\\<in>F.\n         set (snd (prpl_of_lasso L)) \\<inter> A \\<noteq> {})) =\n    (is_lasso_pre L \\<and>\n     (\\<forall>A\\<in>F.\n         set (lasso_va L # lasso_cysfx L) \\<inter> A \\<noteq> {}))", "by auto"], ["", "lemma is_lasso_prpl_conv: \n      \"is_lasso_prpl prpl \\<longleftrightarrow> (snd prpl\\<noteq>[] \\<and> is_lasso (lasso_of_prpl prpl))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso_prpl prpl =\n    (snd prpl \\<noteq> [] \\<and> is_lasso (lasso_of_prpl prpl))", "unfolding is_lasso_def is_lasso_prpl_def is_lasso_prpl_pre_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((snd prpl \\<noteq> [] \\<and> is_lasso_pre (lasso_of_prpl prpl)) \\<and>\n     (\\<forall>A\\<in>F. set (snd prpl) \\<inter> A \\<noteq> {})) =\n    (snd prpl \\<noteq> [] \\<and>\n     is_lasso_pre (lasso_of_prpl prpl) \\<and>\n     (\\<forall>A\\<in>F.\n         set (lasso_cycle (lasso_of_prpl prpl)) \\<inter> A \\<noteq> {}))", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>\\<forall>A\\<in>F. set (snd prpl) \\<inter> A \\<noteq> {};\n        snd prpl \\<noteq> []; is_lasso_pre (lasso_of_prpl prpl); A \\<in> F;\n        set (lasso_cycle (lasso_of_prpl prpl)) \\<inter> A = {}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A.\n       \\<lbrakk>snd prpl \\<noteq> []; is_lasso_pre (lasso_of_prpl prpl);\n        \\<forall>A\\<in>F.\n           set (lasso_cycle (lasso_of_prpl prpl)) \\<inter> A \\<noteq> {};\n        A \\<in> F; set (snd prpl) \\<inter> A = {}\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_lasso_empty[simp]: \"V0 = {} \\<Longrightarrow> \\<not>is_lasso L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V0 = {} \\<Longrightarrow> \\<not> is_lasso L", "unfolding is_lasso_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. V0 = {} \\<Longrightarrow>\n    \\<not> (is_lasso_pre L \\<and>\n            (\\<forall>A\\<in>F. set (lasso_cycle L) \\<inter> A \\<noteq> {}))", "by auto"], ["", "lemma lasso_accepted:\n      assumes L: \"is_lasso L\"\n      shows \"is_acc_run (run_of_lasso L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_acc_run (run_of_lasso L)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_acc_run (run_of_lasso L)", "obtain \"pr\" va pls where \n        [simp]: \"L = \\<lparr>lasso_reach = pr,lasso_va = va,lasso_cysfx = pls\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pr va pls.\n        L =\n        \\<lparr>lasso_reach = pr, lasso_va = va,\n           lasso_cysfx = pls\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases L)"], ["proof (state)\nthis:\n  L = \\<lparr>lasso_reach = pr, lasso_va = va, lasso_cysfx = pls\\<rparr>\n\ngoal (1 subgoal):\n 1. is_acc_run (run_of_lasso L)", "from L"], ["proof (chain)\npicking this:\n  is_lasso L", "have \"is_run (run_of_lasso L)\""], ["proof (prove)\nusing this:\n  is_lasso L\n\ngoal (1 subgoal):\n 1. is_run (run_of_lasso L)", "unfolding is_lasso_def"], ["proof (prove)\nusing this:\n  is_lasso_pre L \\<and>\n  (\\<forall>A\\<in>F. set (lasso_cycle L) \\<inter> A \\<noteq> {})\n\ngoal (1 subgoal):\n 1. is_run (run_of_lasso L)", "by (auto simp: run_of_lasso_pre)"], ["proof (state)\nthis:\n  is_run (run_of_lasso L)\n\ngoal (1 subgoal):\n 1. is_acc_run (run_of_lasso L)", "moreover"], ["proof (state)\nthis:\n  is_run (run_of_lasso L)\n\ngoal (1 subgoal):\n 1. is_acc_run (run_of_lasso L)", "from L"], ["proof (chain)\npicking this:\n  is_lasso L", "have \"(\\<forall>A\\<in>F. set (va#pls) \\<inter> A \\<noteq> {})\""], ["proof (prove)\nusing this:\n  is_lasso L\n\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>F. set (va # pls) \\<inter> A \\<noteq> {}", "by (auto simp: is_lasso_def lasso_cycle_def)"], ["proof (state)\nthis:\n  \\<forall>A\\<in>F. set (va # pls) \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. is_acc_run (run_of_lasso L)", "moreover"], ["proof (state)\nthis:\n  \\<forall>A\\<in>F. set (va # pls) \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. is_acc_run (run_of_lasso L)", "from L"], ["proof (chain)\npicking this:\n  is_lasso L", "have \"(run_of_lasso L) 0 \\<in> V0\""], ["proof (prove)\nusing this:\n  is_lasso L\n\ngoal (1 subgoal):\n 1. run_of_lasso L 0 \\<in> V0", "unfolding is_lasso_def"], ["proof (prove)\nusing this:\n  is_lasso_pre L \\<and>\n  (\\<forall>A\\<in>F. set (lasso_cycle L) \\<inter> A \\<noteq> {})\n\ngoal (1 subgoal):\n 1. run_of_lasso L 0 \\<in> V0", "by (auto simp: run_of_lasso_pre)"], ["proof (state)\nthis:\n  run_of_lasso L 0 \\<in> V0\n\ngoal (1 subgoal):\n 1. is_acc_run (run_of_lasso L)", "ultimately"], ["proof (chain)\npicking this:\n  is_run (run_of_lasso L)\n  \\<forall>A\\<in>F. set (va # pls) \\<inter> A \\<noteq> {}\n  run_of_lasso L 0 \\<in> V0", "show \"is_acc_run (run_of_lasso L)\""], ["proof (prove)\nusing this:\n  is_run (run_of_lasso L)\n  \\<forall>A\\<in>F. set (va # pls) \\<inter> A \\<noteq> {}\n  run_of_lasso L 0 \\<in> V0\n\ngoal (1 subgoal):\n 1. is_acc_run (run_of_lasso L)", "unfolding is_acc_run_def is_acc_def run_of_lasso_def \n          lasso_cycle_def lasso_v0_def"], ["proof (prove)\nusing this:\n  is_run\n   (lasso_reach L \\<frown> (lasso_va L # lasso_cysfx L)\\<^sup>\\<omega>)\n  \\<forall>A\\<in>F. set (va # pls) \\<inter> A \\<noteq> {}\n  (lasso_reach L \\<frown> (lasso_va L # lasso_cysfx L)\\<^sup>\\<omega>) 0\n  \\<in> V0\n\ngoal (1 subgoal):\n 1. is_run\n     (lasso_reach L \\<frown>\n      (lasso_va L # lasso_cysfx L)\\<^sup>\\<omega>) \\<and>\n    (\\<forall>A\\<in>F.\n        \\<exists>\\<^sub>\\<infinity>i.\n           (lasso_reach L \\<frown>\n            (lasso_va L # lasso_cysfx L)\\<^sup>\\<omega>)\n            i\n           \\<in> A)", "by (fastforce intro: limit_inter_INF)"], ["proof (state)\nthis:\n  is_acc_run (run_of_lasso L)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lasso_prpl_acc_run:\n      \"is_lasso_prpl (pr, pl) \\<Longrightarrow> is_acc_run (pr \\<frown> iter pl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso_prpl (pr, pl) \\<Longrightarrow>\n    is_acc_run (pr \\<frown> pl\\<^sup>\\<omega>)", "apply (clarsimp simp: is_lasso_prpl_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pl \\<noteq> []; is_lasso (lasso_of_prpl (pr, pl))\\<rbrakk>\n    \\<Longrightarrow> is_acc_run (pr \\<frown> pl\\<^sup>\\<omega>)", "apply (drule lasso_accepted)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pl \\<noteq> [];\n     is_acc_run (run_of_lasso (lasso_of_prpl (pr, pl)))\\<rbrakk>\n    \\<Longrightarrow> is_acc_run (pr \\<frown> pl\\<^sup>\\<omega>)", "apply (simp add: run_of_lasso_of_prpl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "context gb_graph\n  begin"], ["", "lemma accepted_lasso:\n      assumes [simp, intro]: \"finite (E\\<^sup>* `` V0)\"\n      assumes A: \"is_acc_run r\"\n      shows \"\\<exists>L. is_lasso L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ex is_lasso", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Ex is_lasso", "from A"], ["proof (chain)\npicking this:\n  is_acc_run r", "have \n        RUN: \"is_run r\" \n        and ACC: \"\\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {}\""], ["proof (prove)\nusing this:\n  is_acc_run r\n\ngoal (1 subgoal):\n 1. is_run r &&& \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {}", "by (auto simp: is_acc_run_limit_alt)"], ["proof (state)\nthis:\n  is_run r\n  \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "from RUN"], ["proof (chain)\npicking this:\n  is_run r", "have [simp]: \"r 0 \\<in> V0\" and RUN': \"ipath E r\""], ["proof (prove)\nusing this:\n  is_run r\n\ngoal (1 subgoal):\n 1. r 0 \\<in> V0 &&& ipath E r", "by (simp_all add: is_run_def)"], ["proof (state)\nthis:\n  r 0 \\<in> V0\n  ipath E r\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "txt \\<open>Choose a node that is visited infinitely often\\<close>"], ["proof (state)\nthis:\n  r 0 \\<in> V0\n  ipath E r\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "from RUN"], ["proof (chain)\npicking this:\n  is_run r", "have RAN_REACH: \"range r \\<subseteq> E\\<^sup>*``V0\""], ["proof (prove)\nusing this:\n  is_run r\n\ngoal (1 subgoal):\n 1. range r \\<subseteq> reachable", "by (auto simp: is_run_def dest: ipath_to_rtrancl)"], ["proof (state)\nthis:\n  range r \\<subseteq> reachable\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "hence \"finite (range r)\""], ["proof (prove)\nusing this:\n  range r \\<subseteq> reachable\n\ngoal (1 subgoal):\n 1. finite (range r)", "by (auto intro: finite_subset)"], ["proof (state)\nthis:\n  finite (range r)\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "then"], ["proof (chain)\npicking this:\n  finite (range r)", "obtain u where \"u\\<in>limit r\""], ["proof (prove)\nusing this:\n  finite (range r)\n\ngoal (1 subgoal):\n 1. (\\<And>u. u \\<in> limit r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using limit_nonempty"], ["proof (prove)\nusing this:\n  finite (range r)\n  finite (range ?x) \\<Longrightarrow> \\<exists>a. a \\<in> limit ?x\n\ngoal (1 subgoal):\n 1. (\\<And>u. u \\<in> limit r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  u \\<in> limit r\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "hence U_REACH: \"u\\<in>E\\<^sup>*``V0\""], ["proof (prove)\nusing this:\n  u \\<in> limit r\n\ngoal (1 subgoal):\n 1. u \\<in> reachable", "using RAN_REACH limit_in_range"], ["proof (prove)\nusing this:\n  u \\<in> limit r\n  range r \\<subseteq> reachable\n  limit ?r \\<subseteq> range ?r\n\ngoal (1 subgoal):\n 1. u \\<in> reachable", "by force"], ["proof (state)\nthis:\n  u \\<in> reachable\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "then"], ["proof (chain)\npicking this:\n  u \\<in> reachable", "obtain v0 \"pr\" where PR: \"v0\\<in>V0\" \"path E v0 pr u\""], ["proof (prove)\nusing this:\n  u \\<in> reachable\n\ngoal (1 subgoal):\n 1. (\\<And>v0 pr.\n        \\<lbrakk>v0 \\<in> V0; path E v0 pr u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: rtrancl_is_path)"], ["proof (state)\nthis:\n  v0 \\<in> V0\n  path E v0 pr u\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "moreover"], ["proof (state)\nthis:\n  v0 \\<in> V0\n  path E v0 pr u\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "txt \\<open>Build a path from \\<open>u\\<close> to \\<open>u\\<close>, that contains nodes from\n        each acceptance set\\<close>"], ["proof (state)\nthis:\n  v0 \\<in> V0\n  path E v0 pr u\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "have \"\\<exists>pl. pl\\<noteq>[] \\<and> path E u pl u \\<and> (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pl.\n       pl \\<noteq> [] \\<and>\n       path E u pl u \\<and>\n       (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {})", "using finite_F ACC"], ["proof (prove)\nusing this:\n  finite F\n  \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>pl.\n       pl \\<noteq> [] \\<and>\n       path E u pl u \\<and>\n       (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {})", "proof (induction rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>A\\<in>{}. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>pl.\n       pl \\<noteq> [] \\<and>\n       path E u pl u \\<and>\n       (\\<forall>A\\<in>{}. set pl \\<inter> A \\<noteq> {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "case empty"], ["proof (state)\nthis:\n  \\<forall>A\\<in>{}. limit r \\<inter> A \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<forall>A\\<in>{}. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>pl.\n       pl \\<noteq> [] \\<and>\n       path E u pl u \\<and>\n       (\\<forall>A\\<in>{}. set pl \\<inter> A \\<noteq> {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "from run_limit_two_connectedI[OF RUN' \\<open>u\\<in>limit r\\<close> \\<open>u\\<in>limit r\\<close>]"], ["proof (chain)\npicking this:\n  (u, u) \\<in> E\\<^sup>+", "obtain p where [simp]: \"p\\<noteq>[]\" and P: \"path E u p u\""], ["proof (prove)\nusing this:\n  (u, u) \\<in> E\\<^sup>+\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<noteq> []; path E u p u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule trancl_is_path)"], ["proof (state)\nthis:\n  p \\<noteq> []\n  path E u p u\n\ngoal (2 subgoals):\n 1. \\<forall>A\\<in>{}. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>pl.\n       pl \\<noteq> [] \\<and>\n       path E u pl u \\<and>\n       (\\<forall>A\\<in>{}. set pl \\<inter> A \\<noteq> {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "thus ?case"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  path E u p u\n\ngoal (1 subgoal):\n 1. \\<exists>pl.\n       pl \\<noteq> [] \\<and>\n       path E u pl u \\<and>\n       (\\<forall>A\\<in>{}. set pl \\<inter> A \\<noteq> {})", "by blast"], ["proof (state)\nthis:\n  \\<exists>pl.\n     pl \\<noteq> [] \\<and>\n     path E u pl u \\<and> (\\<forall>A\\<in>{}. set pl \\<inter> A \\<noteq> {})\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "case (insert A F)"], ["proof (state)\nthis:\n  finite F\n  A \\<notin> F\n  \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n  \\<exists>pl.\n     pl \\<noteq> [] \\<and>\n     path E u pl u \\<and> (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {})\n  \\<forall>A\\<in>insert A F. limit r \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "from insert.IH insert.prems"], ["proof (chain)\npicking this:\n  \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n  \\<exists>pl.\n     pl \\<noteq> [] \\<and>\n     path E u pl u \\<and> (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {})\n  \\<forall>A\\<in>insert A F. limit r \\<inter> A \\<noteq> {}", "obtain pl where \n          [simp]: \"pl\\<noteq>[]\" \n            and P: \"path E u pl u\" \n            and ACC: \"(\\<forall>A'\\<in>F. set pl \\<inter> A' \\<noteq> {})\""], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n  \\<exists>pl.\n     pl \\<noteq> [] \\<and>\n     path E u pl u \\<and> (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {})\n  \\<forall>A\\<in>insert A F. limit r \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>pl.\n        \\<lbrakk>pl \\<noteq> []; path E u pl u;\n         \\<forall>A'\\<in>F. set pl \\<inter> A' \\<noteq> {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  pl \\<noteq> []\n  path E u pl u\n  \\<forall>A'\\<in>F. set pl \\<inter> A' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "from insert.prems"], ["proof (chain)\npicking this:\n  \\<forall>A\\<in>insert A F. limit r \\<inter> A \\<noteq> {}", "obtain v where VACC: \"v\\<in>A\" \"v\\<in>limit r\""], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>insert A F. limit r \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> A; v \\<in> limit r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v \\<in> A\n  v \\<in> limit r\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "from run_limit_two_connectedI[OF RUN' \\<open>u\\<in>limit r\\<close> \\<open>v\\<in>limit r\\<close>]"], ["proof (chain)\npicking this:\n  (u, v) \\<in> E\\<^sup>+", "obtain p1 where [simp]: \"p1\\<noteq>[]\" \n          and P1: \"path E u p1 v\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> E\\<^sup>+\n\ngoal (1 subgoal):\n 1. (\\<And>p1.\n        \\<lbrakk>p1 \\<noteq> []; path E u p1 v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule trancl_is_path)"], ["proof (state)\nthis:\n  p1 \\<noteq> []\n  path E u p1 v\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "from run_limit_two_connectedI[OF RUN' \\<open>v\\<in>limit r\\<close> \\<open>u\\<in>limit r\\<close>]"], ["proof (chain)\npicking this:\n  (v, u) \\<in> E\\<^sup>+", "obtain p2 where [simp]: \"p2\\<noteq>[]\" \n          and P2: \"path E v p2 u\""], ["proof (prove)\nusing this:\n  (v, u) \\<in> E\\<^sup>+\n\ngoal (1 subgoal):\n 1. (\\<And>p2.\n        \\<lbrakk>p2 \\<noteq> []; path E v p2 u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule trancl_is_path)"], ["proof (state)\nthis:\n  p2 \\<noteq> []\n  path E v p2 u\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "note P"], ["proof (state)\nthis:\n  path E u pl u\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "also"], ["proof (state)\nthis:\n  path E u pl u\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "note P1"], ["proof (state)\nthis:\n  path E u p1 v\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "also (path_conc)"], ["proof (state)\nthis:\n  path E u p1 v\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "note P2"], ["proof (state)\nthis:\n  path E v p2 u\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "finally (path_conc)"], ["proof (chain)\npicking this:\n  path E u ((pl @ p1) @ p2) u", "have \"path E u (pl@p1@p2) u\""], ["proof (prove)\nusing this:\n  path E u ((pl @ p1) @ p2) u\n\ngoal (1 subgoal):\n 1. path E u (pl @ p1 @ p2) u", "by simp"], ["proof (state)\nthis:\n  path E u (pl @ p1 @ p2) u\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "moreover"], ["proof (state)\nthis:\n  path E u (pl @ p1 @ p2) u\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "from P2"], ["proof (chain)\npicking this:\n  path E v p2 u", "have \"v\\<in>set (p1@p2)\""], ["proof (prove)\nusing this:\n  path E v p2 u\n\ngoal (1 subgoal):\n 1. v \\<in> set (p1 @ p2)", "by (cases p2) (auto simp: path_cons_conv)"], ["proof (state)\nthis:\n  v \\<in> set (p1 @ p2)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "with ACC VACC"], ["proof (chain)\npicking this:\n  \\<forall>A'\\<in>F. set pl \\<inter> A' \\<noteq> {}\n  v \\<in> A\n  v \\<in> limit r\n  v \\<in> set (p1 @ p2)", "have \"(\\<forall>A'\\<in>insert A F. set (pl@p1@p2) \\<inter> A' \\<noteq> {})\""], ["proof (prove)\nusing this:\n  \\<forall>A'\\<in>F. set pl \\<inter> A' \\<noteq> {}\n  v \\<in> A\n  v \\<in> limit r\n  v \\<in> set (p1 @ p2)\n\ngoal (1 subgoal):\n 1. \\<forall>A'\\<in>insert A F. set (pl @ p1 @ p2) \\<inter> A' \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  \\<forall>A'\\<in>insert A F. set (pl @ p1 @ p2) \\<inter> A' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "moreover"], ["proof (state)\nthis:\n  \\<forall>A'\\<in>insert A F. set (pl @ p1 @ p2) \\<inter> A' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "have \"pl@p1@p2 \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pl @ p1 @ p2 \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  pl @ p1 @ p2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>A\\<in>F. limit r \\<inter> A \\<noteq> {} \\<Longrightarrow>\n        \\<exists>pl.\n           pl \\<noteq> [] \\<and>\n           path E u pl u \\<and>\n           (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {});\n        \\<forall>A\\<in>insert x F. limit r \\<inter> A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pl.\n                            pl \\<noteq> [] \\<and>\n                            path E u pl u \\<and>\n                            (\\<forall>A\\<in>insert x F.\n                                set pl \\<inter> A \\<noteq> {})", "ultimately"], ["proof (chain)\npicking this:\n  path E u (pl @ p1 @ p2) u\n  \\<forall>A'\\<in>insert A F. set (pl @ p1 @ p2) \\<inter> A' \\<noteq> {}\n  pl @ p1 @ p2 \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  path E u (pl @ p1 @ p2) u\n  \\<forall>A'\\<in>insert A F. set (pl @ p1 @ p2) \\<inter> A' \\<noteq> {}\n  pl @ p1 @ p2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>pl.\n       pl \\<noteq> [] \\<and>\n       path E u pl u \\<and>\n       (\\<forall>A\\<in>insert A F. set pl \\<inter> A \\<noteq> {})", "by (intro exI conjI)"], ["proof (state)\nthis:\n  \\<exists>pl.\n     pl \\<noteq> [] \\<and>\n     path E u pl u \\<and>\n     (\\<forall>A\\<in>insert A F. set pl \\<inter> A \\<noteq> {})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>pl.\n     pl \\<noteq> [] \\<and>\n     path E u pl u \\<and> (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {})\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "then"], ["proof (chain)\npicking this:\n  \\<exists>pl.\n     pl \\<noteq> [] \\<and>\n     path E u pl u \\<and> (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {})", "obtain pl where \"pl \\<noteq> []\" \"path E u pl u\" \"(\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {})\""], ["proof (prove)\nusing this:\n  \\<exists>pl.\n     pl \\<noteq> [] \\<and>\n     path E u pl u \\<and> (\\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {})\n\ngoal (1 subgoal):\n 1. (\\<And>pl.\n        \\<lbrakk>pl \\<noteq> []; path E u pl u;\n         \\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  pl \\<noteq> []\n  path E u pl u\n  \\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "then"], ["proof (chain)\npicking this:\n  pl \\<noteq> []\n  path E u pl u\n  \\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {}", "obtain pls where \"path E u (u#pls) u\" \"\\<forall>A\\<in>F. set (u#pls) \\<inter> A \\<noteq> {}\""], ["proof (prove)\nusing this:\n  pl \\<noteq> []\n  path E u pl u\n  \\<forall>A\\<in>F. set pl \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>pls.\n        \\<lbrakk>path E u (u # pls) u;\n         \\<forall>A\\<in>F. set (u # pls) \\<inter> A \\<noteq> {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases pl) (auto simp add: path_simps)"], ["proof (state)\nthis:\n  path E u (u # pls) u\n  \\<forall>A\\<in>F. set (u # pls) \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "ultimately"], ["proof (chain)\npicking this:\n  v0 \\<in> V0\n  path E v0 pr u\n  path E u (u # pls) u\n  \\<forall>A\\<in>F. set (u # pls) \\<inter> A \\<noteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  v0 \\<in> V0\n  path E v0 pr u\n  path E u (u # pls) u\n  \\<forall>A\\<in>F. set (u # pls) \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Ex is_lasso", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v0 \\<in> V0; path E v0 pr u; path E u (u # pls) u;\n     \\<forall>A\\<in>F. set (u # pls) \\<inter> A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Ex is_lasso", "apply (rule \n          exI[where x=\"\\<lparr>lasso_reach = pr,lasso_va = u,lasso_cysfx = pls\\<rparr>\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v0 \\<in> V0; path E v0 pr u; path E u (u # pls) u;\n     \\<forall>A\\<in>F. set (u # pls) \\<inter> A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> is_lasso\n                       \\<lparr>lasso_reach = pr, lasso_va = u,\n                          lasso_cysfx = pls\\<rparr>", "unfolding is_lasso_def lasso_v0_def lasso_cycle_def is_lasso_pre_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v0 \\<in> V0; path E v0 pr u; path E u (u # pls) u;\n     \\<forall>A\\<in>F. set (u # pls) \\<inter> A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> ((case lasso_reach\n                              \\<lparr>lasso_reach = pr, lasso_va = u,\n                                 lasso_cysfx = pls\\<rparr> of\n                        [] \\<Rightarrow>\n                          lasso_va\n                           \\<lparr>lasso_reach = pr, lasso_va = u,\n                              lasso_cysfx = pls\\<rparr>\n                        | v0 # x \\<Rightarrow> v0)\n                       \\<in> V0 \\<and>\n                       path E\n                        (case lasso_reach\n                               \\<lparr>lasso_reach = pr, lasso_va = u,\n                                  lasso_cysfx = pls\\<rparr> of\n                         [] \\<Rightarrow>\n                           lasso_va\n                            \\<lparr>lasso_reach = pr, lasso_va = u,\n                               lasso_cysfx = pls\\<rparr>\n                         | v0 # x \\<Rightarrow> v0)\n                        (lasso_reach\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr>)\n                        (lasso_va\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr>) \\<and>\n                       path E\n                        (lasso_va\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr>)\n                        (lasso_va\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr> #\n                         lasso_cysfx\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr>)\n                        (lasso_va\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr>)) \\<and>\n                      (\\<forall>A\\<in>F.\n                          set (lasso_va\n                                \\<lparr>lasso_reach = pr, lasso_va = u,\n                                   lasso_cysfx = pls\\<rparr> #\n                               lasso_cysfx\n                                \\<lparr>lasso_reach = pr, lasso_va = u,\n                                   lasso_cysfx = pls\\<rparr>) \\<inter>\n                          A \\<noteq>\n                          {})", "apply (cases \"pr\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>v0 \\<in> V0; path E v0 pr u; path E u (u # pls) u;\n     \\<forall>A\\<in>F. set (u # pls) \\<inter> A \\<noteq> {};\n     pr = []\\<rbrakk>\n    \\<Longrightarrow> ((case lasso_reach\n                              \\<lparr>lasso_reach = pr, lasso_va = u,\n                                 lasso_cysfx = pls\\<rparr> of\n                        [] \\<Rightarrow>\n                          lasso_va\n                           \\<lparr>lasso_reach = pr, lasso_va = u,\n                              lasso_cysfx = pls\\<rparr>\n                        | v0 # x \\<Rightarrow> v0)\n                       \\<in> V0 \\<and>\n                       path E\n                        (case lasso_reach\n                               \\<lparr>lasso_reach = pr, lasso_va = u,\n                                  lasso_cysfx = pls\\<rparr> of\n                         [] \\<Rightarrow>\n                           lasso_va\n                            \\<lparr>lasso_reach = pr, lasso_va = u,\n                               lasso_cysfx = pls\\<rparr>\n                         | v0 # x \\<Rightarrow> v0)\n                        (lasso_reach\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr>)\n                        (lasso_va\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr>) \\<and>\n                       path E\n                        (lasso_va\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr>)\n                        (lasso_va\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr> #\n                         lasso_cysfx\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr>)\n                        (lasso_va\n                          \\<lparr>lasso_reach = pr, lasso_va = u,\n                             lasso_cysfx = pls\\<rparr>)) \\<and>\n                      (\\<forall>A\\<in>F.\n                          set (lasso_va\n                                \\<lparr>lasso_reach = pr, lasso_va = u,\n                                   lasso_cysfx = pls\\<rparr> #\n                               lasso_cysfx\n                                \\<lparr>lasso_reach = pr, lasso_va = u,\n                                   lasso_cysfx = pls\\<rparr>) \\<inter>\n                          A \\<noteq>\n                          {})\n 2. \\<And>a list.\n       \\<lbrakk>v0 \\<in> V0; path E v0 pr u; path E u (u # pls) u;\n        \\<forall>A\\<in>F. set (u # pls) \\<inter> A \\<noteq> {};\n        pr = a # list\\<rbrakk>\n       \\<Longrightarrow> ((case lasso_reach\n                                 \\<lparr>lasso_reach = pr, lasso_va = u,\n                                    lasso_cysfx = pls\\<rparr> of\n                           [] \\<Rightarrow>\n                             lasso_va\n                              \\<lparr>lasso_reach = pr, lasso_va = u,\n                                 lasso_cysfx = pls\\<rparr>\n                           | v0 # x \\<Rightarrow> v0)\n                          \\<in> V0 \\<and>\n                          path E\n                           (case lasso_reach\n                                  \\<lparr>lasso_reach = pr, lasso_va = u,\n                                     lasso_cysfx = pls\\<rparr> of\n                            [] \\<Rightarrow>\n                              lasso_va\n                               \\<lparr>lasso_reach = pr, lasso_va = u,\n                                  lasso_cysfx = pls\\<rparr>\n                            | v0 # x \\<Rightarrow> v0)\n                           (lasso_reach\n                             \\<lparr>lasso_reach = pr, lasso_va = u,\n                                lasso_cysfx = pls\\<rparr>)\n                           (lasso_va\n                             \\<lparr>lasso_reach = pr, lasso_va = u,\n                                lasso_cysfx = pls\\<rparr>) \\<and>\n                          path E\n                           (lasso_va\n                             \\<lparr>lasso_reach = pr, lasso_va = u,\n                                lasso_cysfx = pls\\<rparr>)\n                           (lasso_va\n                             \\<lparr>lasso_reach = pr, lasso_va = u,\n                                lasso_cysfx = pls\\<rparr> #\n                            lasso_cysfx\n                             \\<lparr>lasso_reach = pr, lasso_va = u,\n                                lasso_cysfx = pls\\<rparr>)\n                           (lasso_va\n                             \\<lparr>lasso_reach = pr, lasso_va = u,\n                                lasso_cysfx = pls\\<rparr>)) \\<and>\n                         (\\<forall>A\\<in>F.\n                             set (lasso_va\n                                   \\<lparr>lasso_reach = pr, lasso_va = u,\nlasso_cysfx = pls\\<rparr> #\n                                  lasso_cysfx\n                                   \\<lparr>lasso_reach = pr, lasso_va = u,\nlasso_cysfx = pls\\<rparr>) \\<inter>\n                             A \\<noteq>\n                             {})", "apply (simp_all add: path_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Ex is_lasso\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context b_graph\n  begin"], ["", "definition is_lasso where \"is_lasso L \\<equiv> \n      is_lasso_pre L\n      \\<and> (set (lasso_cycle L)) \\<inter> F \\<noteq> {}\""], ["", "definition is_lasso_prpl where \"is_lasso_prpl L \\<equiv> \n      is_lasso_prpl_pre L\n      \\<and> (set (snd L)) \\<inter> F \\<noteq> {}\""], ["", "lemma is_lasso_pre_ext[simp]: \n      \"gbg.is_lasso_pre T m = is_lasso_pre\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph.is_lasso_pre (to_gbg_ext m) = is_lasso_pre", "unfolding gbg.is_lasso_pre_def[abs_def] is_lasso_pre_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>L.\n        lasso_v0 L \\<in> g_V0 (to_gbg_ext m) \\<and>\n        path (g_E (to_gbg_ext m)) (lasso_v0 L) (lasso_reach L)\n         (lasso_va L) \\<and>\n        path (g_E (to_gbg_ext m)) (lasso_va L) (lasso_cycle L)\n         (lasso_va L)) =\n    (\\<lambda>L.\n        lasso_v0 L \\<in> V0 \\<and>\n        path E (lasso_v0 L) (lasso_reach L) (lasso_va L) \\<and>\n        path E (lasso_va L) (lasso_cycle L) (lasso_va L))", "unfolding to_gbg_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>L.\n        lasso_v0 L\n        \\<in> g_V0\n               \\<lparr>g_V = V, g_E = E, g_V0 = V0,\n                  gbg_F = if F = UNIV then {} else {F},\n                  \\<dots> = m\\<rparr> \\<and>\n        path\n         (g_E \\<lparr>g_V = V, g_E = E, g_V0 = V0,\n                 gbg_F = if F = UNIV then {} else {F}, \\<dots> = m\\<rparr>)\n         (lasso_v0 L) (lasso_reach L) (lasso_va L) \\<and>\n        path\n         (g_E \\<lparr>g_V = V, g_E = E, g_V0 = V0,\n                 gbg_F = if F = UNIV then {} else {F}, \\<dots> = m\\<rparr>)\n         (lasso_va L) (lasso_cycle L) (lasso_va L)) =\n    (\\<lambda>L.\n        lasso_v0 L \\<in> V0 \\<and>\n        path E (lasso_v0 L) (lasso_reach L) (lasso_va L) \\<and>\n        path E (lasso_va L) (lasso_cycle L) (lasso_va L))", "by auto"], ["", "lemma is_lasso_gbg: \n      \"gbg.is_lasso T m = is_lasso\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gb_graph.is_lasso (to_gbg_ext m) = is_lasso", "unfolding is_lasso_def[abs_def] gbg.is_lasso_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>L.\n        graph.is_lasso_pre (to_gbg_ext m) L \\<and>\n        (\\<forall>A\\<in>gbg_F (to_gbg_ext m).\n            set (lasso_cycle L) \\<inter> A \\<noteq> {})) =\n    (\\<lambda>L.\n        is_lasso_pre L \\<and> set (lasso_cycle L) \\<inter> F \\<noteq> {})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>L.\n        is_lasso_pre L \\<and>\n        (\\<forall>A\\<in>gbg_F (to_gbg_ext m).\n            set (lasso_cycle L) \\<inter> A \\<noteq> {})) =\n    (\\<lambda>L.\n        is_lasso_pre L \\<and> set (lasso_cycle L) \\<inter> F \\<noteq> {})", "apply (auto simp: to_gbg_ext_def lasso_cycle_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas lasso_accepted = gbg.lasso_accepted[unfolded to_gbg_alt is_lasso_gbg]"], ["", "lemmas accepted_lasso = gbg.accepted_lasso[unfolded to_gbg_alt is_lasso_gbg]"], ["", "lemma is_lasso_prpl_of_lasso[simp]: \n      \"is_lasso_prpl (prpl_of_lasso L) \\<longleftrightarrow> is_lasso L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso_prpl (prpl_of_lasso L) = is_lasso L", "unfolding is_lasso_def is_lasso_prpl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lasso_prpl_pre (prpl_of_lasso L) \\<and>\n     set (snd (prpl_of_lasso L)) \\<inter> F \\<noteq> {}) =\n    (is_lasso_pre L \\<and> set (lasso_cycle L) \\<inter> F \\<noteq> {})", "unfolding lasso_v0_def lasso_cycle_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lasso_prpl_pre (prpl_of_lasso L) \\<and>\n     set (snd (prpl_of_lasso L)) \\<inter> F \\<noteq> {}) =\n    (is_lasso_pre L \\<and>\n     set (lasso_va L # lasso_cysfx L) \\<inter> F \\<noteq> {})", "by auto"], ["", "lemma is_lasso_prpl_conv: \n      \"is_lasso_prpl prpl \\<longleftrightarrow> (snd prpl\\<noteq>[] \\<and> is_lasso (lasso_of_prpl prpl))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso_prpl prpl =\n    (snd prpl \\<noteq> [] \\<and> is_lasso (lasso_of_prpl prpl))", "unfolding is_lasso_def is_lasso_prpl_def is_lasso_prpl_pre_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((snd prpl \\<noteq> [] \\<and> is_lasso_pre (lasso_of_prpl prpl)) \\<and>\n     set (snd prpl) \\<inter> F \\<noteq> {}) =\n    (snd prpl \\<noteq> [] \\<and>\n     is_lasso_pre (lasso_of_prpl prpl) \\<and>\n     set (lasso_cycle (lasso_of_prpl prpl)) \\<inter> F \\<noteq> {})", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>snd prpl \\<noteq> []; is_lasso_pre (lasso_of_prpl prpl);\n        x \\<in> set (snd prpl); x \\<in> F; x \\<notin> {};\n        set (lasso_cycle (lasso_of_prpl prpl)) \\<inter> F = {}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>snd prpl \\<noteq> []; is_lasso_pre (lasso_of_prpl prpl);\n        x \\<in> set (lasso_cycle (lasso_of_prpl prpl)); x \\<in> F;\n        x \\<notin> {}; set (snd prpl) \\<inter> F = {}\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lasso_prpl_acc_run:\n      \"is_lasso_prpl (pr, pl) \\<Longrightarrow> is_acc_run (pr \\<frown> iter pl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso_prpl (pr, pl) \\<Longrightarrow>\n    is_acc_run (pr \\<frown> pl\\<^sup>\\<omega>)", "apply (clarsimp simp: is_lasso_prpl_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pl \\<noteq> []; is_lasso (lasso_of_prpl (pr, pl))\\<rbrakk>\n    \\<Longrightarrow> is_acc_run (pr \\<frown> pl\\<^sup>\\<omega>)", "apply (drule lasso_accepted)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pl \\<noteq> [];\n     is_acc_run (run_of_lasso (lasso_of_prpl (pr, pl)))\\<rbrakk>\n    \\<Longrightarrow> is_acc_run (pr \\<frown> pl\\<^sup>\\<omega>)", "apply (simp add: run_of_lasso_of_prpl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "context igb_graph begin"], ["", "definition \"is_lasso L \\<equiv>  \n      is_lasso_pre L\n      \\<and> (\\<forall>i<num_acc. \\<exists>q\\<in>set (lasso_cycle L). i\\<in>acc q)\""], ["", "definition \"is_lasso_prpl L \\<equiv>  \n      is_lasso_prpl_pre L\n      \\<and> (\\<forall>i<num_acc. \\<exists>q\\<in>set (snd L). i\\<in>acc q)\""], ["", "lemma is_lasso_prpl_of_lasso[simp]: \n      \"is_lasso_prpl (prpl_of_lasso L) \\<longleftrightarrow> is_lasso L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso_prpl (prpl_of_lasso L) = is_lasso L", "unfolding is_lasso_def is_lasso_prpl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lasso_prpl_pre (prpl_of_lasso L) \\<and>\n     (\\<forall>i<num_acc.\n         \\<exists>q\\<in>set (snd (prpl_of_lasso L)). i \\<in> acc q)) =\n    (is_lasso_pre L \\<and>\n     (\\<forall>i<num_acc.\n         \\<exists>q\\<in>set (lasso_cycle L). i \\<in> acc q))", "unfolding lasso_v0_def lasso_cycle_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lasso_prpl_pre (prpl_of_lasso L) \\<and>\n     (\\<forall>i<num_acc.\n         \\<exists>q\\<in>set (snd (prpl_of_lasso L)). i \\<in> acc q)) =\n    (is_lasso_pre L \\<and>\n     (\\<forall>i<num_acc.\n         \\<exists>q\\<in>set (lasso_va L # lasso_cysfx L). i \\<in> acc q))", "by auto"], ["", "lemma is_lasso_prpl_conv: \n      \"is_lasso_prpl prpl \\<longleftrightarrow> (snd prpl\\<noteq>[] \\<and> is_lasso (lasso_of_prpl prpl))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso_prpl prpl =\n    (snd prpl \\<noteq> [] \\<and> is_lasso (lasso_of_prpl prpl))", "unfolding is_lasso_def is_lasso_prpl_def is_lasso_prpl_pre_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((snd prpl \\<noteq> [] \\<and> is_lasso_pre (lasso_of_prpl prpl)) \\<and>\n     (\\<forall>i<num_acc. \\<exists>q\\<in>set (snd prpl). i \\<in> acc q)) =\n    (snd prpl \\<noteq> [] \\<and>\n     is_lasso_pre (lasso_of_prpl prpl) \\<and>\n     (\\<forall>i<num_acc.\n         \\<exists>q\\<in>set (lasso_cycle (lasso_of_prpl prpl)).\n            i \\<in> acc q))", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i<num_acc.\n                   \\<exists>q\\<in>set (snd prpl). i \\<in> acc q;\n        snd prpl \\<noteq> []; is_lasso_pre (lasso_of_prpl prpl);\n        i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set\n   (lasso_cycle (lasso_of_prpl prpl)).\n                            i \\<in> acc q\n 2. \\<And>i.\n       \\<lbrakk>snd prpl \\<noteq> []; is_lasso_pre (lasso_of_prpl prpl);\n        \\<forall>i<num_acc.\n           \\<exists>q\\<in>set (lasso_cycle (lasso_of_prpl prpl)).\n              i \\<in> acc q;\n        i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (snd prpl). i \\<in> acc q", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_lasso_pre_ext[simp]: \n      \"gbg.is_lasso_pre T m = is_lasso_pre\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph.is_lasso_pre (to_gbg_ext m) = is_lasso_pre", "unfolding gbg.is_lasso_pre_def[abs_def] is_lasso_pre_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>L.\n        lasso_v0 L \\<in> g_V0 (to_gbg_ext m) \\<and>\n        path (g_E (to_gbg_ext m)) (lasso_v0 L) (lasso_reach L)\n         (lasso_va L) \\<and>\n        path (g_E (to_gbg_ext m)) (lasso_va L) (lasso_cycle L)\n         (lasso_va L)) =\n    (\\<lambda>L.\n        lasso_v0 L \\<in> V0 \\<and>\n        path E (lasso_v0 L) (lasso_reach L) (lasso_va L) \\<and>\n        path E (lasso_va L) (lasso_cycle L) (lasso_va L))", "unfolding to_gbg_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>L.\n        lasso_v0 L\n        \\<in> g_V0\n               \\<lparr>g_V = V, g_E = E, g_V0 = V0, gbg_F = F,\n                  \\<dots> = m\\<rparr> \\<and>\n        path\n         (g_E \\<lparr>g_V = V, g_E = E, g_V0 = V0, gbg_F = F,\n                 \\<dots> = m\\<rparr>)\n         (lasso_v0 L) (lasso_reach L) (lasso_va L) \\<and>\n        path\n         (g_E \\<lparr>g_V = V, g_E = E, g_V0 = V0, gbg_F = F,\n                 \\<dots> = m\\<rparr>)\n         (lasso_va L) (lasso_cycle L) (lasso_va L)) =\n    (\\<lambda>L.\n        lasso_v0 L \\<in> V0 \\<and>\n        path E (lasso_v0 L) (lasso_reach L) (lasso_va L) \\<and>\n        path E (lasso_va L) (lasso_cycle L) (lasso_va L))", "by auto"], ["", "lemma is_lasso_gbg: \"gbg.is_lasso T m = is_lasso\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gb_graph.is_lasso (to_gbg_ext m) = is_lasso", "unfolding is_lasso_def[abs_def] gbg.is_lasso_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>L.\n        graph.is_lasso_pre (to_gbg_ext m) L \\<and>\n        (\\<forall>A\\<in>gbg_F (to_gbg_ext m).\n            set (lasso_cycle L) \\<inter> A \\<noteq> {})) =\n    (\\<lambda>L.\n        is_lasso_pre L \\<and>\n        (\\<forall>i<num_acc.\n            \\<exists>q\\<in>set (lasso_cycle L). i \\<in> acc q))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>L.\n        is_lasso_pre L \\<and>\n        (\\<forall>A\\<in>gbg_F (to_gbg_ext m).\n            set (lasso_cycle L) \\<inter> A \\<noteq> {})) =\n    (\\<lambda>L.\n        is_lasso_pre L \\<and>\n        (\\<forall>i<num_acc.\n            \\<exists>q\\<in>set (lasso_cycle L). i \\<in> acc q))", "apply (simp_all add: to_gbg_ext_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>L.\n        is_lasso_pre L \\<and>\n        (\\<forall>A\\<in>F. set (lasso_cycle L) \\<inter> A \\<noteq> {})) =\n    (\\<lambda>L.\n        is_lasso_pre L \\<and>\n        (\\<forall>i<num_acc.\n            \\<exists>q\\<in>set (lasso_cycle L). i \\<in> acc q))", "apply (intro ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L.\n       (is_lasso_pre L \\<and>\n        (\\<forall>A\\<in>F. set (lasso_cycle L) \\<inter> A \\<noteq> {})) =\n       (is_lasso_pre L \\<and>\n        (\\<forall>i<num_acc.\n            \\<exists>q\\<in>set (lasso_cycle L). i \\<in> acc q))", "apply (fo_rule arg_cong | intro ext)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L.\n       (\\<forall>A\\<in>F. set (lasso_cycle L) \\<inter> A \\<noteq> {}) =\n       (\\<forall>i<num_acc.\n           \\<exists>q\\<in>set (lasso_cycle L). i \\<in> acc q)", "apply (auto simp: F_def accn_def intro!: ext)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas lasso_accepted = gbg.lasso_accepted[unfolded to_gbg_alt is_lasso_gbg]"], ["", "lemmas accepted_lasso = gbg.accepted_lasso[unfolded to_gbg_alt is_lasso_gbg]"], ["", "lemma lasso_prpl_acc_run:\n      \"is_lasso_prpl (pr, pl) \\<Longrightarrow> is_acc_run (pr \\<frown> iter pl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso_prpl (pr, pl) \\<Longrightarrow>\n    is_acc_run (pr \\<frown> pl\\<^sup>\\<omega>)", "apply (clarsimp simp: is_lasso_prpl_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pl \\<noteq> []; is_lasso (lasso_of_prpl (pr, pl))\\<rbrakk>\n    \\<Longrightarrow> is_acc_run (pr \\<frown> pl\\<^sup>\\<omega>)", "apply (drule lasso_accepted)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pl \\<noteq> [];\n     is_acc_run (run_of_lasso (lasso_of_prpl (pr, pl)))\\<rbrakk>\n    \\<Longrightarrow> is_acc_run (pr \\<frown> pl\\<^sup>\\<omega>)", "apply (simp add: run_of_lasso_of_prpl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma degen_lasso_sound:\n      assumes A: \"degen.is_lasso T m L\"\n      shows \"is_lasso (map_lasso fst L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lasso (map_lasso fst L)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_lasso (map_lasso fst L)", "from A"], ["proof (chain)\npicking this:\n  b_graph.is_lasso (degeneralize_ext m) L", "have \n        V0: \"lasso_v0 L \\<in> degen.V0 T m\" and\n        REACH: \"path (degen.E T m) \n                 (lasso_v0 L) (lasso_reach L) (lasso_va L)\" and\n        LOOP: \"path (degen.E T m) \n                  (lasso_va L) (lasso_cycle L) (lasso_va L)\" and\n        ACC: \"(set (lasso_cycle L)) \\<inter> degen.F T m \\<noteq> {}\""], ["proof (prove)\nusing this:\n  b_graph.is_lasso (degeneralize_ext m) L\n\ngoal (1 subgoal):\n 1. (lasso_v0 L \\<in> g_V0 (degeneralize_ext m) &&&\n     path (g_E (degeneralize_ext m)) (lasso_v0 L) (lasso_reach L)\n      (lasso_va L)) &&&\n    path (g_E (degeneralize_ext m)) (lasso_va L) (lasso_cycle L)\n     (lasso_va L) &&&\n    set (lasso_cycle L) \\<inter> bg_F (degeneralize_ext m) \\<noteq> {}", "unfolding degen.is_lasso_def degen.is_lasso_pre_def"], ["proof (prove)\nusing this:\n  (lasso_v0 L \\<in> g_V0 (degeneralize_ext m) \\<and>\n   path (g_E (degeneralize_ext m)) (lasso_v0 L) (lasso_reach L)\n    (lasso_va L) \\<and>\n   path (g_E (degeneralize_ext m)) (lasso_va L) (lasso_cycle L)\n    (lasso_va L)) \\<and>\n  set (lasso_cycle L) \\<inter> bg_F (degeneralize_ext m) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (lasso_v0 L \\<in> g_V0 (degeneralize_ext m) &&&\n     path (g_E (degeneralize_ext m)) (lasso_v0 L) (lasso_reach L)\n      (lasso_va L)) &&&\n    path (g_E (degeneralize_ext m)) (lasso_va L) (lasso_cycle L)\n     (lasso_va L) &&&\n    set (lasso_cycle L) \\<inter> bg_F (degeneralize_ext m) \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  lasso_v0 L \\<in> g_V0 (degeneralize_ext m)\n  path (g_E (degeneralize_ext m)) (lasso_v0 L) (lasso_reach L) (lasso_va L)\n  path (g_E (degeneralize_ext m)) (lasso_va L) (lasso_cycle L) (lasso_va L)\n  set (lasso_cycle L) \\<inter> bg_F (degeneralize_ext m) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. is_lasso (map_lasso fst L)", "{"], ["proof (state)\nthis:\n  lasso_v0 L \\<in> g_V0 (degeneralize_ext m)\n  path (g_E (degeneralize_ext m)) (lasso_v0 L) (lasso_reach L) (lasso_va L)\n  path (g_E (degeneralize_ext m)) (lasso_va L) (lasso_cycle L) (lasso_va L)\n  set (lasso_cycle L) \\<inter> bg_F (degeneralize_ext m) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. is_lasso (map_lasso fst L)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. is_lasso (map_lasso fst L)", "assume \"i<num_acc\""], ["proof (state)\nthis:\n  i < num_acc\n\ngoal (1 subgoal):\n 1. is_lasso (map_lasso fst L)", "hence \"\\<exists>q\\<in>set (lasso_cycle L). i \\<in> local.acc (fst q) \\<and> snd q = i\""], ["proof (prove)\nusing this:\n  i < num_acc\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>set (lasso_cycle L). i \\<in> acc (fst q) \\<and> snd q = i", "proof (induction i)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < num_acc \\<Longrightarrow>\n    \\<exists>q\\<in>set (lasso_cycle L). 0 \\<in> acc (fst q) \\<and> snd q = 0\n 2. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "case 0"], ["proof (state)\nthis:\n  0 < num_acc\n\ngoal (2 subgoals):\n 1. 0 < num_acc \\<Longrightarrow>\n    \\<exists>q\\<in>set (lasso_cycle L). 0 \\<in> acc (fst q) \\<and> snd q = 0\n 2. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "thus ?case"], ["proof (prove)\nusing this:\n  0 < num_acc\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>set (lasso_cycle L). 0 \\<in> acc (fst q) \\<and> snd q = 0", "using ACC"], ["proof (prove)\nusing this:\n  0 < num_acc\n  set (lasso_cycle L) \\<inter> bg_F (degeneralize_ext m) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>set (lasso_cycle L). 0 \\<in> acc (fst q) \\<and> snd q = 0", "unfolding degeneralize_ext_def"], ["proof (prove)\nusing this:\n  0 < num_acc\n  set (lasso_cycle L) \\<inter>\n  bg_F\n   (if num_acc = 0\n    then \\<lparr>g_V = V \\<times> {0},\n            g_E = {((q, 0), q', 0) |q q'. (q, q') \\<in> E},\n            g_V0 = V0 \\<times> {0}, bg_F = V \\<times> {0},\n            \\<dots> = m G\\<rparr>\n    else \\<lparr>g_V = V \\<times> {0..<num_acc},\n            g_E =\n              {((q, i), q', i') |i i' q q'.\n               i < num_acc \\<and>\n               (q, q') \\<in> E \\<and>\n               i' = (if i \\<in> acc q then (i + 1) mod num_acc else i)},\n            g_V0 = V0 \\<times> {0}, bg_F = {(q, 0) |q. 0 \\<in> acc q},\n            \\<dots> = m G\\<rparr>) \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>set (lasso_cycle L). 0 \\<in> acc (fst q) \\<and> snd q = 0", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>q\\<in>set (lasso_cycle L). 0 \\<in> acc (fst q) \\<and> snd q = 0\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "case (Suc i)"], ["proof (state)\nthis:\n  i < num_acc \\<Longrightarrow>\n  \\<exists>q\\<in>set (lasso_cycle L). i \\<in> acc (fst q) \\<and> snd q = i\n  Suc i < num_acc\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "then"], ["proof (chain)\npicking this:\n  i < num_acc \\<Longrightarrow>\n  \\<exists>q\\<in>set (lasso_cycle L). i \\<in> acc (fst q) \\<and> snd q = i\n  Suc i < num_acc", "obtain q where \"(q,i)\\<in>set (lasso_cycle L)\" and \"i\\<in>acc q\""], ["proof (prove)\nusing this:\n  i < num_acc \\<Longrightarrow>\n  \\<exists>q\\<in>set (lasso_cycle L). i \\<in> acc (fst q) \\<and> snd q = i\n  Suc i < num_acc\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>(q, i) \\<in> set (lasso_cycle L); i \\<in> acc q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (q, i) \\<in> set (lasso_cycle L)\n  i \\<in> acc q\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "with LOOP"], ["proof (chain)\npicking this:\n  path (g_E (degeneralize_ext m)) (lasso_va L) (lasso_cycle L) (lasso_va L)\n  (q, i) \\<in> set (lasso_cycle L)\n  i \\<in> acc q", "obtain pl' where SPL: \"set (lasso_cycle L) = set pl'\" \n            and PS: \"path (degen.E T m) (q,i) pl' (q,i)\""], ["proof (prove)\nusing this:\n  path (g_E (degeneralize_ext m)) (lasso_va L) (lasso_cycle L) (lasso_va L)\n  (q, i) \\<in> set (lasso_cycle L)\n  i \\<in> acc q\n\ngoal (1 subgoal):\n 1. (\\<And>pl'.\n        \\<lbrakk>set (lasso_cycle L) = set pl';\n         path (g_E (degeneralize_ext m)) (q, i) pl' (q, i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (blast elim: path_loop_shift)"], ["proof (state)\nthis:\n  set (lasso_cycle L) = set pl'\n  path (g_E (degeneralize_ext m)) (q, i) pl' (q, i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "from SPL"], ["proof (chain)\npicking this:\n  set (lasso_cycle L) = set pl'", "have \"pl'\\<noteq>[]\""], ["proof (prove)\nusing this:\n  set (lasso_cycle L) = set pl'\n\ngoal (1 subgoal):\n 1. pl' \\<noteq> []", "by (auto simp: lasso_cycle_def)"], ["proof (state)\nthis:\n  pl' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "then"], ["proof (chain)\npicking this:\n  pl' \\<noteq> []", "obtain pl'' where [simp]: \"pl'=(q,i)#pl''\""], ["proof (prove)\nusing this:\n  pl' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>pl''.\n        pl' = (q, i) # pl'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using PS"], ["proof (prove)\nusing this:\n  pl' \\<noteq> []\n  path (g_E (degeneralize_ext m)) (q, i) pl' (q, i)\n\ngoal (1 subgoal):\n 1. (\\<And>pl''.\n        pl' = (q, i) # pl'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases pl') (auto simp: path_simps)"], ["proof (state)\nthis:\n  pl' = (q, i) # pl''\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "then"], ["proof (chain)\npicking this:\n  pl' = (q, i) # pl''", "obtain q2 pl''' where \n            [simp]: \"pl'' = (q2,(i + 1) mod num_acc)#pl'''\""], ["proof (prove)\nusing this:\n  pl' = (q, i) # pl''\n\ngoal (1 subgoal):\n 1. (\\<And>q2 pl'''.\n        pl'' = (q2, (i + 1) mod num_acc) # pl''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using PS \\<open>i\\<in>acc q\\<close> \\<open>Suc i < num_acc\\<close>"], ["proof (prove)\nusing this:\n  pl' = (q, i) # pl''\n  path (g_E (degeneralize_ext m)) (q, i) pl' (q, i)\n  i \\<in> acc q\n  Suc i < num_acc\n\ngoal (1 subgoal):\n 1. (\\<And>q2 pl'''.\n        pl'' = (q2, (i + 1) mod num_acc) # pl''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply (cases pl'')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>q2 pl'''.\n                pl'' = (q2, (i + 1) mod num_acc) # pl''' \\<Longrightarrow>\n                thesis;\n     pl' = (q, i) # pl''; path (g_E (degeneralize_ext m)) (q, i) pl' (q, i);\n     i \\<in> acc q; Suc i < num_acc; pl'' = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>q2 pl'''.\n                   pl'' =\n                   (q2, (i + 1) mod num_acc) # pl''' \\<Longrightarrow>\n                   thesis;\n        pl' = (q, i) # pl'';\n        path (g_E (degeneralize_ext m)) (q, i) pl' (q, i); i \\<in> acc q;\n        Suc i < num_acc; pl'' = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (auto \n              simp: path_simps degeneralize_ext_def \n              split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  pl'' = (q2, (i + 1) mod num_acc) # pl'''\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "from PS"], ["proof (chain)\npicking this:\n  path (g_E (degeneralize_ext m)) (q, i) pl' (q, i)", "have \n            \"path (degen.E T m) (q2,Suc i) pl'' (q,i)\""], ["proof (prove)\nusing this:\n  path (g_E (degeneralize_ext m)) (q, i) pl' (q, i)\n\ngoal (1 subgoal):\n 1. path (g_E (degeneralize_ext m)) (q2, Suc i) pl'' (q, i)", "using \\<open>Suc i < num_acc\\<close>"], ["proof (prove)\nusing this:\n  path (g_E (degeneralize_ext m)) (q, i) pl' (q, i)\n  Suc i < num_acc\n\ngoal (1 subgoal):\n 1. path (g_E (degeneralize_ext m)) (q2, Suc i) pl'' (q, i)", "by (auto simp: path_simps)"], ["proof (state)\nthis:\n  path (g_E (degeneralize_ext m)) (q2, Suc i) pl'' (q, i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "from degen_visit_acc[OF this]"], ["proof (chain)\npicking this:\n  Suc i \\<noteq> i \\<Longrightarrow>\n  \\<exists>qa. (qa, Suc i) \\<in> set pl'' \\<and> Suc i \\<in> acc qa", "obtain qa \n            where \"(qa,Suc i)\\<in>set pl''\" \"Suc i \\<in> acc qa\""], ["proof (prove)\nusing this:\n  Suc i \\<noteq> i \\<Longrightarrow>\n  \\<exists>qa. (qa, Suc i) \\<in> set pl'' \\<and> Suc i \\<in> acc qa\n\ngoal (1 subgoal):\n 1. (\\<And>qa.\n        \\<lbrakk>(qa, Suc i) \\<in> set pl''; Suc i \\<in> acc qa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (qa, Suc i) \\<in> set pl''\n  Suc i \\<in> acc qa\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < num_acc \\<Longrightarrow>\n                \\<exists>q\\<in>set (lasso_cycle L).\n                   i \\<in> acc (fst q) \\<and> snd q = i;\n        Suc i < num_acc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>set (lasso_cycle L).\n                            Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "thus ?case"], ["proof (prove)\nusing this:\n  (qa, Suc i) \\<in> set pl''\n  Suc i \\<in> acc qa\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>set (lasso_cycle L).\n       Suc i \\<in> acc (fst q) \\<and> snd q = Suc i", "by (rule_tac bexI[where x=\"(qa,Suc i)\"]) (auto simp: SPL)"], ["proof (state)\nthis:\n  \\<exists>q\\<in>set (lasso_cycle L).\n     Suc i \\<in> acc (fst q) \\<and> snd q = Suc i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>q\\<in>set (lasso_cycle L). i \\<in> acc (fst q) \\<and> snd q = i\n\ngoal (1 subgoal):\n 1. is_lasso (map_lasso fst L)", "}"], ["proof (state)\nthis:\n  ?i4 < num_acc \\<Longrightarrow>\n  \\<exists>q\\<in>set (lasso_cycle L).\n     ?i4 \\<in> acc (fst q) \\<and> snd q = ?i4\n\ngoal (1 subgoal):\n 1. is_lasso (map_lasso fst L)", "note aux=this"], ["proof (state)\nthis:\n  ?i4 < num_acc \\<Longrightarrow>\n  \\<exists>q\\<in>set (lasso_cycle L).\n     ?i4 \\<in> acc (fst q) \\<and> snd q = ?i4\n\ngoal (1 subgoal):\n 1. is_lasso (map_lasso fst L)", "from degen_V0_sound[OF V0] \n        degen_path_sound[OF REACH] \n        degen_path_sound[OF LOOP] aux"], ["proof (chain)\npicking this:\n  fst (lasso_v0 L) \\<in> V0\n  path E (fst (lasso_v0 L)) (map fst (lasso_reach L)) (fst (lasso_va L))\n  path E (fst (lasso_va L)) (map fst (lasso_cycle L)) (fst (lasso_va L))\n  ?i4 < num_acc \\<Longrightarrow>\n  \\<exists>q\\<in>set (lasso_cycle L).\n     ?i4 \\<in> acc (fst q) \\<and> snd q = ?i4", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (lasso_v0 L) \\<in> V0\n  path E (fst (lasso_v0 L)) (map fst (lasso_reach L)) (fst (lasso_va L))\n  path E (fst (lasso_va L)) (map fst (lasso_cycle L)) (fst (lasso_va L))\n  ?i4 < num_acc \\<Longrightarrow>\n  \\<exists>q\\<in>set (lasso_cycle L).\n     ?i4 \\<in> acc (fst q) \\<and> snd q = ?i4\n\ngoal (1 subgoal):\n 1. is_lasso (map_lasso fst L)", "unfolding is_lasso_def is_lasso_pre_def"], ["proof (prove)\nusing this:\n  fst (lasso_v0 L) \\<in> V0\n  path E (fst (lasso_v0 L)) (map fst (lasso_reach L)) (fst (lasso_va L))\n  path E (fst (lasso_va L)) (map fst (lasso_cycle L)) (fst (lasso_va L))\n  ?i4 < num_acc \\<Longrightarrow>\n  \\<exists>q\\<in>set (lasso_cycle L).\n     ?i4 \\<in> acc (fst q) \\<and> snd q = ?i4\n\ngoal (1 subgoal):\n 1. (lasso_v0 (map_lasso fst L) \\<in> V0 \\<and>\n     path E (lasso_v0 (map_lasso fst L)) (lasso_reach (map_lasso fst L))\n      (lasso_va (map_lasso fst L)) \\<and>\n     path E (lasso_va (map_lasso fst L)) (lasso_cycle (map_lasso fst L))\n      (lasso_va (map_lasso fst L))) \\<and>\n    (\\<forall>i<num_acc.\n        \\<exists>q\\<in>set (lasso_cycle (map_lasso fst L)). i \\<in> acc q)", "by auto"], ["proof (state)\nthis:\n  is_lasso (map_lasso fst L)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "definition lasso_rel_ext_internal_def: \"\\<And>Re R. lasso_rel_ext Re R \\<equiv> {\n    (\\<lparr> lasso_reach = r', lasso_va = va', lasso_cysfx = cysfx', \\<dots>=m' \\<rparr>, \n     \\<lparr> lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx, \\<dots>=m \\<rparr>) |\n      r' r va' va cysfx' cysfx m' m. \n      (r',r) \\<in> \\<langle>R\\<rangle>list_rel \n    \\<and> (va',va)\\<in>R\n    \\<and> (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel\n    \\<and> (m',m) \\<in> Re\n    }\""], ["", "lemma lasso_rel_ext_def: \"\\<And> Re R. \\<langle>Re,R\\<rangle>lasso_rel_ext = {\n    (\\<lparr> lasso_reach = r', lasso_va = va', lasso_cysfx = cysfx', \\<dots>=m' \\<rparr>, \n     \\<lparr> lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx, \\<dots>=m \\<rparr>) |\n      r' r va' va cysfx' cysfx m' m. \n      (r',r) \\<in> \\<langle>R\\<rangle>list_rel \n    \\<and> (va',va)\\<in>R\n    \\<and> (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel\n    \\<and> (m',m) \\<in> Re\n    }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Re R.\n       \\<langle>Re, R\\<rangle>lasso_rel_ext =\n       {(\\<lparr>lasso_reach = r', lasso_va = va', lasso_cysfx = cysfx',\n            \\<dots> = m'\\<rparr>,\n         \\<lparr>lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx,\n            \\<dots> = m\\<rparr>) |\n        r' r va' va cysfx' cysfx m' m.\n        (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n        (va', va) \\<in> R \\<and>\n        (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n        (m', m) \\<in> Re}", "unfolding lasso_rel_ext_internal_def relAPP_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Re R.\n       {(\\<lparr>lasso_reach = r', lasso_va = va', lasso_cysfx = cysfx',\n            \\<dots> = m'\\<rparr>,\n         \\<lparr>lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx,\n            \\<dots> = m\\<rparr>) |\n        r' r va' va cysfx' cysfx m' m.\n        (r', r) \\<in> list_rel R \\<and>\n        (va', va) \\<in> R \\<and>\n        (cysfx', cysfx) \\<in> list_rel R \\<and> (m', m) \\<in> Re} =\n       {(\\<lparr>lasso_reach = r', lasso_va = va', lasso_cysfx = cysfx',\n            \\<dots> = m'\\<rparr>,\n         \\<lparr>lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx,\n            \\<dots> = m\\<rparr>) |\n        r' r va' va cysfx' cysfx m' m.\n        (r', r) \\<in> list_rel R \\<and>\n        (va', va) \\<in> R \\<and>\n        (cysfx', cysfx) \\<in> list_rel R \\<and> (m', m) \\<in> Re}", "by auto"], ["", "lemma lasso_rel_ext_sv[relator_props]: \n    \"\\<And> Re R. \\<lbrakk> single_valued Re; single_valued R \\<rbrakk> \\<Longrightarrow> single_valued (\\<langle>Re,R\\<rangle>lasso_rel_ext)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Re R.\n       \\<lbrakk>single_valued Re; single_valued R\\<rbrakk>\n       \\<Longrightarrow> single_valued\n                          (\\<langle>Re, R\\<rangle>lasso_rel_ext)", "unfolding lasso_rel_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Re R.\n       \\<lbrakk>single_valued Re; single_valued R\\<rbrakk>\n       \\<Longrightarrow> single_valued\n                          {(\\<lparr>lasso_reach = r', lasso_va = va',\n                               lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                            \\<lparr>lasso_reach = r, lasso_va = va,\n                               lasso_cysfx = cysfx, \\<dots> = m\\<rparr>) |\n                           r' r va' va cysfx' cysfx m' m.\n                           (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                           (va', va) \\<in> R \\<and>\n                           (cysfx', cysfx)\n                           \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                           (m', m) \\<in> Re}", "apply (rule single_valuedI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Re R x y z.\n       \\<lbrakk>single_valued Re; single_valued R;\n        (x, y)\n        \\<in> {(\\<lparr>lasso_reach = r', lasso_va = va',\n                   lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                \\<lparr>lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx,\n                   \\<dots> = m\\<rparr>) |\n               r' r va' va cysfx' cysfx m' m.\n               (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (va', va) \\<in> R \\<and>\n               (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (m', m) \\<in> Re};\n        (x, z)\n        \\<in> {(\\<lparr>lasso_reach = r', lasso_va = va',\n                   lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                \\<lparr>lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx,\n                   \\<dots> = m\\<rparr>) |\n               r' r va' va cysfx' cysfx m' m.\n               (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (va', va) \\<in> R \\<and>\n               (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (m', m) \\<in> Re}\\<rbrakk>\n       \\<Longrightarrow> y = z", "apply safe"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Re R x y z r' r'a r ra va' va'a va vaa cysfx' cysfx'a cysfx cysfxa\n       m' m'a m ma.\n       \\<lbrakk>single_valued Re; single_valued R;\n        (r'a, r) \\<in> \\<langle>R\\<rangle>list_rel;\n        (r'a, ra) \\<in> \\<langle>R\\<rangle>list_rel; (va'a, va) \\<in> R;\n        (va'a, vaa) \\<in> R;\n        (cysfx'a, cysfx) \\<in> \\<langle>R\\<rangle>list_rel;\n        (m'a, m) \\<in> Re;\n        (cysfx'a, cysfxa) \\<in> \\<langle>R\\<rangle>list_rel;\n        (m'a, ma) \\<in> Re\\<rbrakk>\n       \\<Longrightarrow> r = ra\n 2. \\<And>Re R x y z r' r'a r ra va' va'a va vaa cysfx' cysfx'a cysfx cysfxa\n       m' m'a m ma.\n       \\<lbrakk>single_valued Re; single_valued R;\n        (r'a, r) \\<in> \\<langle>R\\<rangle>list_rel;\n        (r'a, ra) \\<in> \\<langle>R\\<rangle>list_rel; (va'a, va) \\<in> R;\n        (va'a, vaa) \\<in> R;\n        (cysfx'a, cysfx) \\<in> \\<langle>R\\<rangle>list_rel;\n        (m'a, m) \\<in> Re;\n        (cysfx'a, cysfxa) \\<in> \\<langle>R\\<rangle>list_rel;\n        (m'a, ma) \\<in> Re\\<rbrakk>\n       \\<Longrightarrow> va = vaa\n 3. \\<And>Re R x y z r' r'a r ra va' va'a va vaa cysfx' cysfx'a cysfx cysfxa\n       m' m'a m ma.\n       \\<lbrakk>single_valued Re; single_valued R;\n        (r'a, r) \\<in> \\<langle>R\\<rangle>list_rel;\n        (r'a, ra) \\<in> \\<langle>R\\<rangle>list_rel; (va'a, va) \\<in> R;\n        (va'a, vaa) \\<in> R;\n        (cysfx'a, cysfx) \\<in> \\<langle>R\\<rangle>list_rel;\n        (m'a, m) \\<in> Re;\n        (cysfx'a, cysfxa) \\<in> \\<langle>R\\<rangle>list_rel;\n        (m'a, ma) \\<in> Re\\<rbrakk>\n       \\<Longrightarrow> cysfx = cysfxa\n 4. \\<And>Re R x y z r' r'a r ra va' va'a va vaa cysfx' cysfx'a cysfx cysfxa\n       m' m'a m ma.\n       \\<lbrakk>single_valued Re; single_valued R;\n        (r'a, r) \\<in> \\<langle>R\\<rangle>list_rel;\n        (r'a, ra) \\<in> \\<langle>R\\<rangle>list_rel; (va'a, va) \\<in> R;\n        (va'a, vaa) \\<in> R;\n        (cysfx'a, cysfx) \\<in> \\<langle>R\\<rangle>list_rel;\n        (m'a, m) \\<in> Re;\n        (cysfx'a, cysfxa) \\<in> \\<langle>R\\<rangle>list_rel;\n        (m'a, ma) \\<in> Re\\<rbrakk>\n       \\<Longrightarrow> m = ma", "apply (blast dest: single_valuedD list_rel_sv[THEN single_valuedD])+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lasso_rel_ext_id[relator_props]: \n    \"\\<And>Re R. \\<lbrakk> Re=Id; R=Id \\<rbrakk> \\<Longrightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext = Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Re R.\n       \\<lbrakk>Re = Id; R = Id\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Re, R\\<rangle>lasso_rel_ext = Id", "unfolding lasso_rel_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Re R.\n       \\<lbrakk>Re = Id; R = Id\\<rbrakk>\n       \\<Longrightarrow> {(\\<lparr>lasso_reach = r', lasso_va = va',\n                              lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                           \\<lparr>lasso_reach = r, lasso_va = va,\n                              lasso_cysfx = cysfx, \\<dots> = m\\<rparr>) |\n                          r' r va' va cysfx' cysfx m' m.\n                          (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                          (va', va) \\<in> R \\<and>\n                          (cysfx', cysfx)\n                          \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                          (m', m) \\<in> Re} =\n                         Id", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Re R.\n       \\<lbrakk>Re = Id; R = Id\\<rbrakk>\n       \\<Longrightarrow> {uu_.\n                          \\<exists>r' va' cysfx' m'.\n                             uu_ =\n                             (\\<lparr>lasso_reach = r', lasso_va = va',\n                                 lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                              \\<lparr>lasso_reach = r', lasso_va = va',\n                                 lasso_cysfx = cysfx',\n                                 \\<dots> = m'\\<rparr>)} =\n                         Id", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Re R a b.\n       \\<exists>r' va' cysfx' m'.\n          (b, b) =\n          (\\<lparr>lasso_reach = r', lasso_va = va', lasso_cysfx = cysfx',\n              \\<dots> = m'\\<rparr>,\n           \\<lparr>lasso_reach = r', lasso_va = va', lasso_cysfx = cysfx',\n              \\<dots> = m'\\<rparr>)", "by (metis lasso.surjective)"], ["", "consts i_lasso_ext :: \"interface \\<Rightarrow> interface \\<Rightarrow> interface\""], ["", "lemmas [autoref_rel_intf] = REL_INTFI[of lasso_rel_ext i_lasso_ext]"], ["", "find_consts \"(_,_) lasso_scheme\""], ["", "term lasso_reach_update"], ["", "lemma lasso_param[param, autoref_rules]:\n    \"\\<And>Re R. (lasso_reach, lasso_reach) \\<in> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>R\\<rangle>list_rel\"\n    \"\\<And>Re R. (lasso_va, lasso_va) \\<in> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> R\"\n    \"\\<And>Re R. (lasso_cysfx, lasso_cysfx) \\<in> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>R\\<rangle>list_rel\"\n    \"\\<And>Re R. (lasso_ext, lasso_ext) \n      \\<in> \\<langle>R\\<rangle>list_rel \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>list_rel \\<rightarrow> Re \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext\"\n    \"\\<And>Re R. (lasso_reach_update, lasso_reach_update) \n      \\<in> (\\<langle>R\\<rangle>list_rel \\<rightarrow> \\<langle>R\\<rangle>list_rel) \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext\"\n    \"\\<And>Re R. (lasso_va_update, lasso_va_update) \n      \\<in> (R\\<rightarrow>R) \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext\"\n    \"\\<And>Re R. (lasso_cysfx_update, lasso_cysfx_update) \n      \\<in> (\\<langle>R\\<rangle>list_rel \\<rightarrow> \\<langle>R\\<rangle>list_rel) \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext\"\n    \"\\<And>Re R. (lasso.more_update, lasso.more_update) \n      \\<in> (Re\\<rightarrow>Re) \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>Re R.\n          (lasso_reach, lasso_reach)\n          \\<in> \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow>\n                \\<langle>R\\<rangle>list_rel) &&&\n      (\\<And>Re R.\n          (lasso_va, lasso_va)\n          \\<in> \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow> R)) &&&\n     (\\<And>Re R.\n         (lasso_cysfx, lasso_cysfx)\n         \\<in> \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow>\n               \\<langle>R\\<rangle>list_rel) &&&\n     (\\<And>Re R.\n         (lasso_ext, lasso_ext)\n         \\<in> \\<langle>R\\<rangle>list_rel \\<rightarrow>\n               R \\<rightarrow>\n               \\<langle>R\\<rangle>list_rel \\<rightarrow>\n               Re \\<rightarrow> \\<langle>Re, R\\<rangle>lasso_rel_ext)) &&&\n    ((\\<And>Re R.\n         (lasso_reach_update, lasso_reach_update)\n         \\<in> (\\<langle>R\\<rangle>list_rel \\<rightarrow>\n                \\<langle>R\\<rangle>list_rel) \\<rightarrow>\n               \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow>\n               \\<langle>Re, R\\<rangle>lasso_rel_ext) &&&\n     (\\<And>Re R.\n         (lasso_va_update, lasso_va_update)\n         \\<in> (R \\<rightarrow> R) \\<rightarrow>\n               \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow>\n               \\<langle>Re, R\\<rangle>lasso_rel_ext)) &&&\n    (\\<And>Re R.\n        (lasso_cysfx_update, lasso_cysfx_update)\n        \\<in> (\\<langle>R\\<rangle>list_rel \\<rightarrow>\n               \\<langle>R\\<rangle>list_rel) \\<rightarrow>\n              \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow>\n              \\<langle>Re, R\\<rangle>lasso_rel_ext) &&&\n    (\\<And>Re R.\n        (lasso.more_update, lasso.more_update)\n        \\<in> (Re \\<rightarrow> Re) \\<rightarrow>\n              \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow>\n              \\<langle>Re, R\\<rangle>lasso_rel_ext)", "unfolding lasso_rel_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>Re R.\n          (lasso_reach, lasso_reach)\n          \\<in> {(\\<lparr>lasso_reach = r', lasso_va = va',\n                     lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                  \\<lparr>lasso_reach = r, lasso_va = va,\n                     lasso_cysfx = cysfx, \\<dots> = m\\<rparr>) |\n                 r' r va' va cysfx' cysfx m' m.\n                 (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                 (va', va) \\<in> R \\<and>\n                 (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                 (m', m) \\<in> Re} \\<rightarrow>\n                \\<langle>R\\<rangle>list_rel) &&&\n      (\\<And>Re R.\n          (lasso_va, lasso_va)\n          \\<in> {(\\<lparr>lasso_reach = r', lasso_va = va',\n                     lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                  \\<lparr>lasso_reach = r, lasso_va = va,\n                     lasso_cysfx = cysfx, \\<dots> = m\\<rparr>) |\n                 r' r va' va cysfx' cysfx m' m.\n                 (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                 (va', va) \\<in> R \\<and>\n                 (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                 (m', m) \\<in> Re} \\<rightarrow>\n                R)) &&&\n     (\\<And>Re R.\n         (lasso_cysfx, lasso_cysfx)\n         \\<in> {(\\<lparr>lasso_reach = r', lasso_va = va',\n                    lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                 \\<lparr>lasso_reach = r, lasso_va = va,\n                    lasso_cysfx = cysfx, \\<dots> = m\\<rparr>) |\n                r' r va' va cysfx' cysfx m' m.\n                (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (va', va) \\<in> R \\<and>\n                (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (m', m) \\<in> Re} \\<rightarrow>\n               \\<langle>R\\<rangle>list_rel) &&&\n     (\\<And>Re R.\n         (lasso_ext, lasso_ext)\n         \\<in> \\<langle>R\\<rangle>list_rel \\<rightarrow>\n               R \\<rightarrow>\n               \\<langle>R\\<rangle>list_rel \\<rightarrow>\n               Re \\<rightarrow>\n               {(\\<lparr>lasso_reach = r', lasso_va = va',\n                    lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                 \\<lparr>lasso_reach = r, lasso_va = va,\n                    lasso_cysfx = cysfx, \\<dots> = m\\<rparr>) |\n                r' r va' va cysfx' cysfx m' m.\n                (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (va', va) \\<in> R \\<and>\n                (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (m', m) \\<in> Re})) &&&\n    ((\\<And>Re R.\n         (lasso_reach_update, lasso_reach_update)\n         \\<in> (\\<langle>R\\<rangle>list_rel \\<rightarrow>\n                \\<langle>R\\<rangle>list_rel) \\<rightarrow>\n               {(\\<lparr>lasso_reach = r', lasso_va = va',\n                    lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                 \\<lparr>lasso_reach = r, lasso_va = va,\n                    lasso_cysfx = cysfx, \\<dots> = m\\<rparr>) |\n                r' r va' va cysfx' cysfx m' m.\n                (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (va', va) \\<in> R \\<and>\n                (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (m', m) \\<in> Re} \\<rightarrow>\n               {(\\<lparr>lasso_reach = r', lasso_va = va',\n                    lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                 \\<lparr>lasso_reach = r, lasso_va = va,\n                    lasso_cysfx = cysfx, \\<dots> = m\\<rparr>) |\n                r' r va' va cysfx' cysfx m' m.\n                (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (va', va) \\<in> R \\<and>\n                (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (m', m) \\<in> Re}) &&&\n     (\\<And>Re R.\n         (lasso_va_update, lasso_va_update)\n         \\<in> (R \\<rightarrow> R) \\<rightarrow>\n               {(\\<lparr>lasso_reach = r', lasso_va = va',\n                    lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                 \\<lparr>lasso_reach = r, lasso_va = va,\n                    lasso_cysfx = cysfx, \\<dots> = m\\<rparr>) |\n                r' r va' va cysfx' cysfx m' m.\n                (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (va', va) \\<in> R \\<and>\n                (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (m', m) \\<in> Re} \\<rightarrow>\n               {(\\<lparr>lasso_reach = r', lasso_va = va',\n                    lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                 \\<lparr>lasso_reach = r, lasso_va = va,\n                    lasso_cysfx = cysfx, \\<dots> = m\\<rparr>) |\n                r' r va' va cysfx' cysfx m' m.\n                (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (va', va) \\<in> R \\<and>\n                (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n                (m', m) \\<in> Re})) &&&\n    (\\<And>Re R.\n        (lasso_cysfx_update, lasso_cysfx_update)\n        \\<in> (\\<langle>R\\<rangle>list_rel \\<rightarrow>\n               \\<langle>R\\<rangle>list_rel) \\<rightarrow>\n              {(\\<lparr>lasso_reach = r', lasso_va = va',\n                   lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                \\<lparr>lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx,\n                   \\<dots> = m\\<rparr>) |\n               r' r va' va cysfx' cysfx m' m.\n               (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (va', va) \\<in> R \\<and>\n               (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (m', m) \\<in> Re} \\<rightarrow>\n              {(\\<lparr>lasso_reach = r', lasso_va = va',\n                   lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                \\<lparr>lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx,\n                   \\<dots> = m\\<rparr>) |\n               r' r va' va cysfx' cysfx m' m.\n               (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (va', va) \\<in> R \\<and>\n               (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (m', m) \\<in> Re}) &&&\n    (\\<And>Re R.\n        (lasso.more_update, lasso.more_update)\n        \\<in> (Re \\<rightarrow> Re) \\<rightarrow>\n              {(\\<lparr>lasso_reach = r', lasso_va = va',\n                   lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                \\<lparr>lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx,\n                   \\<dots> = m\\<rparr>) |\n               r' r va' va cysfx' cysfx m' m.\n               (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (va', va) \\<in> R \\<and>\n               (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (m', m) \\<in> Re} \\<rightarrow>\n              {(\\<lparr>lasso_reach = r', lasso_va = va',\n                   lasso_cysfx = cysfx', \\<dots> = m'\\<rparr>,\n                \\<lparr>lasso_reach = r, lasso_va = va, lasso_cysfx = cysfx,\n                   \\<dots> = m\\<rparr>) |\n               r' r va' va cysfx' cysfx m' m.\n               (r', r) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (va', va) \\<in> R \\<and>\n               (cysfx', cysfx) \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n               (m', m) \\<in> Re})", "by (auto dest: fun_relD)"], ["", "lemma lasso_param2[param, autoref_rules]:\n    \"\\<And>Re R. (lasso_v0, lasso_v0) \\<in> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> R\"\n    \"\\<And>Re R. (lasso_cycle, lasso_cycle) \\<in> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>R\\<rangle>list_rel\"\n    \"\\<And>Re R. (map_lasso, map_lasso) \n      \\<in> (R\\<rightarrow>R') \\<rightarrow> \\<langle>Re,R\\<rangle>lasso_rel_ext \\<rightarrow> \\<langle>unit_rel,R'\\<rangle>lasso_rel_ext\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Re R.\n        (lasso_v0, lasso_v0)\n        \\<in> \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow> R) &&&\n    (\\<And>Re R.\n        (lasso_cycle, lasso_cycle)\n        \\<in> \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow>\n              \\<langle>R\\<rangle>list_rel) &&&\n    (\\<And>Re R.\n        (map_lasso, map_lasso)\n        \\<in> (R \\<rightarrow> R') \\<rightarrow>\n              \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow>\n              \\<langle>unit_rel, R'\\<rangle>lasso_rel_ext)", "unfolding lasso_v0_def[abs_def] lasso_cycle_def[abs_def] map_lasso_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Re R.\n        (\\<lambda>L.\n            case lasso_reach L of [] \\<Rightarrow> lasso_va L\n            | v0 # x \\<Rightarrow> v0,\n         \\<lambda>L.\n            case lasso_reach L of [] \\<Rightarrow> lasso_va L\n            | v0 # x \\<Rightarrow> v0)\n        \\<in> \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow> R) &&&\n    (\\<And>Re R.\n        (\\<lambda>L. lasso_va L # lasso_cysfx L,\n         \\<lambda>L. lasso_va L # lasso_cysfx L)\n        \\<in> \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow>\n              \\<langle>R\\<rangle>list_rel) &&&\n    (\\<And>Re R.\n        (\\<lambda>f L.\n            \\<lparr>lasso_reach = map f (lasso_reach L),\n               lasso_va = f (lasso_va L),\n               lasso_cysfx = map f (lasso_cysfx L)\\<rparr>,\n         \\<lambda>f L.\n            \\<lparr>lasso_reach = map f (lasso_reach L),\n               lasso_va = f (lasso_va L),\n               lasso_cysfx = map f (lasso_cysfx L)\\<rparr>)\n        \\<in> (R \\<rightarrow> R') \\<rightarrow>\n              \\<langle>Re, R\\<rangle>lasso_rel_ext \\<rightarrow>\n              \\<langle>unit_rel, R'\\<rangle>lasso_rel_ext)", "by parametricity+"], ["", "lemma lasso_of_prpl_param: \"\\<lbrakk>(l',l)\\<in>\\<langle>R\\<rangle>list_rel \\<times>\\<^sub>r \\<langle>R\\<rangle>list_rel; snd l \\<noteq> []\\<rbrakk> \n    \\<Longrightarrow> (lasso_of_prpl l', lasso_of_prpl l) \\<in> \\<langle>unit_rel,R\\<rangle>lasso_rel_ext\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(l', l)\n             \\<in> \\<langle>R\\<rangle>list_rel \\<times>\\<^sub>r\n                   \\<langle>R\\<rangle>list_rel;\n     snd l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> (lasso_of_prpl l', lasso_of_prpl l)\n                      \\<in> \\<langle>unit_rel, R\\<rangle>lasso_rel_ext", "unfolding lasso_of_prpl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(l', l)\n             \\<in> \\<langle>R\\<rangle>list_rel \\<times>\\<^sub>r\n                   \\<langle>R\\<rangle>list_rel;\n     snd l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> (case l' of\n                       (pr, pl) \\<Rightarrow>\n                         \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                            lasso_cysfx = tl pl\\<rparr>,\n                       case l of\n                       (pr, pl) \\<Rightarrow>\n                         \\<lparr>lasso_reach = pr, lasso_va = hd pl,\n                            lasso_cysfx = tl pl\\<rparr>)\n                      \\<in> \\<langle>unit_rel, R\\<rangle>lasso_rel_ext", "apply (cases l, cases l', clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>b \\<noteq> []; l = (a, b); l' = (aa, ba);\n        (aa, a) \\<in> \\<langle>R\\<rangle>list_rel;\n        (ba, b) \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>lasso_reach = aa, lasso_va = hd ba,\n                             lasso_cysfx = tl ba\\<rparr>,\n                          \\<lparr>lasso_reach = a, lasso_va = hd b,\n                             lasso_cysfx = tl b\\<rparr>)\n                         \\<in> \\<langle>unit_rel, R\\<rangle>lasso_rel_ext", "apply (case_tac b, simp, case_tac ba, clarsimp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab list ac lista.\n       \\<lbrakk>l = (a, ab # list); l' = (aa, ac # lista);\n        (aa, a) \\<in> \\<langle>R\\<rangle>list_rel; (ac, ab) \\<in> R;\n        (lista, list) \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>lasso_reach = aa, lasso_va = ac,\n                             lasso_cysfx = lista\\<rparr>,\n                          \\<lparr>lasso_reach = a, lasso_va = ab,\n                             lasso_cysfx = list\\<rparr>)\n                         \\<in> \\<langle>unit_rel, R\\<rangle>lasso_rel_ext", "apply parametricity"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "context begin"], ["", "interpretation autoref_syn"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma lasso_of_prpl_autoref[autoref_rules]:\n    assumes \"SIDE_PRECOND (snd l \\<noteq> [])\"\n    assumes \"(l',l)\\<in>\\<langle>R\\<rangle>list_rel \\<times>\\<^sub>r \\<langle>R\\<rangle>list_rel\"\n    shows \"(lasso_of_prpl l', \n      (OP lasso_of_prpl \n        ::: \\<langle>R\\<rangle>list_rel \\<times>\\<^sub>r \\<langle>R\\<rangle>list_rel \\<rightarrow> \\<langle>unit_rel,R\\<rangle>lasso_rel_ext)$l) \n      \\<in> \\<langle>unit_rel,R\\<rangle>lasso_rel_ext\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lasso_of_prpl l',\n     (OP lasso_of_prpl :::\n      \\<langle>R\\<rangle>list_rel \\<times>\\<^sub>r\n      \\<langle>R\\<rangle>list_rel \\<rightarrow>\n      \\<langle>unit_rel, R\\<rangle>lasso_rel_ext) $\n     l)\n    \\<in> \\<langle>unit_rel, R\\<rangle>lasso_rel_ext", "using assms"], ["proof (prove)\nusing this:\n  SIDE_PRECOND (snd l \\<noteq> [])\n  (l', l)\n  \\<in> \\<langle>R\\<rangle>list_rel \\<times>\\<^sub>r\n        \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. (lasso_of_prpl l',\n     (OP lasso_of_prpl :::\n      \\<langle>R\\<rangle>list_rel \\<times>\\<^sub>r\n      \\<langle>R\\<rangle>list_rel \\<rightarrow>\n      \\<langle>unit_rel, R\\<rangle>lasso_rel_ext) $\n     l)\n    \\<in> \\<langle>unit_rel, R\\<rangle>lasso_rel_ext", "apply (simp add: lasso_of_prpl_param)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "subsection \\<open>Implementing runs by lassos\\<close>"], ["", "definition lasso_run_rel_def_internal: \n    \"lasso_run_rel R \\<equiv> br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R)\""], ["", "lemma lasso_run_rel_def: \n    \"\\<langle>R\\<rangle>lasso_run_rel = br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>R\\<rangle>lasso_run_rel =\n    br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R)", "unfolding lasso_run_rel_def_internal relAPP_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. br run_of_lasso (\\<lambda>_. True) O fun_rel nat_rel R =\n    br run_of_lasso (\\<lambda>_. True) O fun_rel nat_rel R", "by simp"], ["", "lemma lasso_run_rel_sv[relator_props]: \n    \"single_valued R \\<Longrightarrow> single_valued (\\<langle>R\\<rangle>lasso_run_rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued R \\<Longrightarrow>\n    single_valued (\\<langle>R\\<rangle>lasso_run_rel)", "unfolding lasso_run_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued R \\<Longrightarrow>\n    single_valued\n     (br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R))", "by tagged_solver"], ["", "consts i_run :: \"interface \\<Rightarrow> interface\""], ["", "lemmas [autoref_rel_intf] = REL_INTFI[of lasso_run_rel i_run]"], ["", "definition [simp]: \"op_map_run \\<equiv> (o)\""], ["", "lemma [autoref_op_pat]: \"(o) \\<equiv> op_map_run\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<circ>) \\<equiv> op_map_run", "by simp"], ["", "lemma map_lasso_run_refine[autoref_rules]:\n    shows \"(map_lasso,op_map_run) \\<in> (R\\<rightarrow>R') \\<rightarrow> \\<langle>R\\<rangle>lasso_run_rel \\<rightarrow> \\<langle>R'\\<rangle>lasso_run_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_lasso, op_map_run)\n    \\<in> (R \\<rightarrow> R') \\<rightarrow>\n          \\<langle>R\\<rangle>lasso_run_rel \\<rightarrow>\n          \\<langle>R'\\<rangle>lasso_run_rel", "unfolding lasso_run_rel_def op_map_run_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_lasso, (\\<circ>))\n    \\<in> (R \\<rightarrow> R') \\<rightarrow>\n          br run_of_lasso (\\<lambda>_. True) O\n          (nat_rel \\<rightarrow> R) \\<rightarrow>\n          br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R')", "proof (intro fun_relI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> R \\<rightarrow> R';\n        (aa, a'a)\n        \\<in> br run_of_lasso (\\<lambda>_. True) O\n              (nat_rel \\<rightarrow> R)\\<rbrakk>\n       \\<Longrightarrow> (map_lasso a aa, a' \\<circ> a'a)\n                         \\<in> br run_of_lasso (\\<lambda>_. True) O\n                               (nat_rel \\<rightarrow> R')", "fix f f' l r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> R \\<rightarrow> R';\n        (aa, a'a)\n        \\<in> br run_of_lasso (\\<lambda>_. True) O\n              (nat_rel \\<rightarrow> R)\\<rbrakk>\n       \\<Longrightarrow> (map_lasso a aa, a' \\<circ> a'a)\n                         \\<in> br run_of_lasso (\\<lambda>_. True) O\n                               (nat_rel \\<rightarrow> R')", "assume [param]: \"(f,f')\\<in>R\\<rightarrow>R'\" and \n      \"(l, r) \\<in> br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R)\""], ["proof (state)\nthis:\n  (f, f') \\<in> R \\<rightarrow> R'\n  (l, r)\n  \\<in> br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R)\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> R \\<rightarrow> R';\n        (aa, a'a)\n        \\<in> br run_of_lasso (\\<lambda>_. True) O\n              (nat_rel \\<rightarrow> R)\\<rbrakk>\n       \\<Longrightarrow> (map_lasso a aa, a' \\<circ> a'a)\n                         \\<in> br run_of_lasso (\\<lambda>_. True) O\n                               (nat_rel \\<rightarrow> R')", "then"], ["proof (chain)\npicking this:\n  (f, f') \\<in> R \\<rightarrow> R'\n  (l, r)\n  \\<in> br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R)", "obtain r' where [param]: \"(r',r)\\<in>nat_rel \\<rightarrow> R\" \n      and [simp]: \"r' = run_of_lasso l\""], ["proof (prove)\nusing this:\n  (f, f') \\<in> R \\<rightarrow> R'\n  (l, r)\n  \\<in> br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R)\n\ngoal (1 subgoal):\n 1. (\\<And>r'.\n        \\<lbrakk>(r', r) \\<in> nat_rel \\<rightarrow> R;\n         r' = run_of_lasso l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: br_def)"], ["proof (state)\nthis:\n  (r', r) \\<in> nat_rel \\<rightarrow> R\n  r' = run_of_lasso l\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> R \\<rightarrow> R';\n        (aa, a'a)\n        \\<in> br run_of_lasso (\\<lambda>_. True) O\n              (nat_rel \\<rightarrow> R)\\<rbrakk>\n       \\<Longrightarrow> (map_lasso a aa, a' \\<circ> a'a)\n                         \\<in> br run_of_lasso (\\<lambda>_. True) O\n                               (nat_rel \\<rightarrow> R')", "have \"(map_lasso f l, f o r') \\<in> br run_of_lasso (\\<lambda>_. True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_lasso f l, f \\<circ> r') \\<in> br run_of_lasso (\\<lambda>_. True)", "by (simp add: br_def)"], ["proof (state)\nthis:\n  (map_lasso f l, f \\<circ> r') \\<in> br run_of_lasso (\\<lambda>_. True)\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> R \\<rightarrow> R';\n        (aa, a'a)\n        \\<in> br run_of_lasso (\\<lambda>_. True) O\n              (nat_rel \\<rightarrow> R)\\<rbrakk>\n       \\<Longrightarrow> (map_lasso a aa, a' \\<circ> a'a)\n                         \\<in> br run_of_lasso (\\<lambda>_. True) O\n                               (nat_rel \\<rightarrow> R')", "also"], ["proof (state)\nthis:\n  (map_lasso f l, f \\<circ> r') \\<in> br run_of_lasso (\\<lambda>_. True)\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> R \\<rightarrow> R';\n        (aa, a'a)\n        \\<in> br run_of_lasso (\\<lambda>_. True) O\n              (nat_rel \\<rightarrow> R)\\<rbrakk>\n       \\<Longrightarrow> (map_lasso a aa, a' \\<circ> a'a)\n                         \\<in> br run_of_lasso (\\<lambda>_. True) O\n                               (nat_rel \\<rightarrow> R')", "have \"(f o r', f' o r) \\<in> nat_rel \\<rightarrow> R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> r', f' \\<circ> r) \\<in> nat_rel \\<rightarrow> R'", "by parametricity"], ["proof (state)\nthis:\n  (f \\<circ> r', f' \\<circ> r) \\<in> nat_rel \\<rightarrow> R'\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> R \\<rightarrow> R';\n        (aa, a'a)\n        \\<in> br run_of_lasso (\\<lambda>_. True) O\n              (nat_rel \\<rightarrow> R)\\<rbrakk>\n       \\<Longrightarrow> (map_lasso a aa, a' \\<circ> a'a)\n                         \\<in> br run_of_lasso (\\<lambda>_. True) O\n                               (nat_rel \\<rightarrow> R')", "finally (relcompI)"], ["proof (chain)\npicking this:\n  (map_lasso f l, f' \\<circ> r)\n  \\<in> br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R')", "show \n      \"(map_lasso f l, f' o r) \\<in> br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R')\""], ["proof (prove)\nusing this:\n  (map_lasso f l, f' \\<circ> r)\n  \\<in> br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R')\n\ngoal (1 subgoal):\n 1. (map_lasso f l, f' \\<circ> r)\n    \\<in> br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R')", "."], ["proof (state)\nthis:\n  (map_lasso f l, f' \\<circ> r)\n  \\<in> br run_of_lasso (\\<lambda>_. True) O (nat_rel \\<rightarrow> R')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}