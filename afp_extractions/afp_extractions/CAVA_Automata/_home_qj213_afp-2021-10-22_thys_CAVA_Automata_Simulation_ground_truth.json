{"file_name": "/home/qj213/afp-2021-10-22/thys/CAVA_Automata/Simulation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CAVA_Automata", "problem_names": ["lemma finite_ImageI:\n    assumes \"finite A\"  \n    assumes \"\\<And>a. a\\<in>A \\<Longrightarrow> finite (R``{a})\"\n    shows \"finite (R``A)\"", "lemma the_br[simp]: \n    assumes \"single_valued R\"  \n    shows \"br (the_br_\\<alpha> R) (the_br_invar R) = R\"", "lemma the_br_br[simp]: \n    \"I x \\<Longrightarrow> the_br_\\<alpha> (br \\<alpha> I) x = \\<alpha> x\"\n    \"the_br_invar (br \\<alpha> I) = I\"", "lemma run_rel_converse[simp]: \"(ra, rb) \\<in> run_rel (R\\<inverse>) \\<longleftrightarrow> (rb, ra) \\<in> run_rel R\"", "lemma run_rel_single_valued: \"single_valued R \n    \\<Longrightarrow> (ra, rb) \\<in> run_rel R \\<longleftrightarrow> ((\\<forall>i. the_br_invar R (ra i)) \\<and> rb = the_br_\\<alpha> R o ra)\"", "lemma simulation_this: \"simulation R A B\"", "lemma run_sim: \n      assumes arun: \"a.is_run ra\"\n      obtains rb where \"b.is_run rb\" \"(ra, rb) \\<in> run_rel R\"", "lemma stuck_sim: \n      assumes \"(a, b) \\<in> R\"\n      assumes \"b \\<notin> Domain b.E\"\n      shows \"a \\<notin> Domain a.E\"", "lemma run_Domain: \"a.is_run r \\<Longrightarrow> r i \\<in> Domain R\"", "lemma br_run_sim:\n      assumes \"R = br \\<alpha> I\"\n      assumes \"a.is_run r\"\n      shows \"b.is_run (\\<alpha> o r)\"", "lemma is_reachable_sim: \"a \\<in> a.E\\<^sup>* `` a.V0 \\<Longrightarrow> \\<exists> b. (a, b) \\<in> R \\<and> b \\<in> b.E\\<^sup>* `` b.V0\"", "lemma reachable_sim: \"a.E\\<^sup>* `` a.V0 \\<subseteq> R\\<inverse> `` b.E\\<^sup>* `` b.V0\"", "lemma reachable_finite_sim:\n      assumes \"finite (b.E\\<^sup>* `` b.V0)\"\n      assumes \"\\<And>b. b \\<in> b.E\\<^sup>* `` b.V0 \\<Longrightarrow> finite (R\\<inverse> `` {b})\"\n      shows \"finite (a.E\\<^sup>* `` a.V0)\"", "lemma simulation_trans[trans]:\n    assumes \"simulation R1 A B\"\n    assumes \"simulation R2 B C\"\n    shows \"simulation (R1 O R2) A C\"", "lemma (in graph) simulation_refl[simp]: \"simulation Id G G\"", "lemma lsimulation_this: \"lsimulation R A B\"", "lemma run_rel_consistent: \"(ra, rb) \\<in> run_rel R \\<Longrightarrow> a.L o ra = b.L o rb\"", "lemma accept_sim: \"a.accept w \\<Longrightarrow> b.accept w\"", "lemma lsimulation_trans[trans]: \n    assumes \"lsimulation R1 A B\"\n    assumes \"lsimulation R2 B C\"\n    shows \"lsimulation (R1 O R2) A C\"", "lemma (in sa) lsimulation_refl[simp]: \"lsimulation Id G G\"", "lemma bisimulation_this: \"bisimulation R A B\"", "lemma converse: \"bisimulation (R\\<inverse>) B A\"", "lemma br_run_conv:\n      assumes \"R = br \\<alpha> I\"\n      shows \"b.is_run rb \\<longleftrightarrow> (\\<exists>ra. rb=\\<alpha> o ra \\<and> a.is_run ra)\"", "lemma bri_run_conv:\n      assumes \"R = (br \\<gamma> I)\\<inverse>\"\n      shows \"a.is_run ra \\<longleftrightarrow> (\\<exists>rb. ra=\\<gamma> o rb \\<and> b.is_run rb)\"", "lemma inj_map_run_eq:\n      assumes \"inj \\<alpha>\"\n      assumes E: \"\\<alpha> o r1 = \\<alpha> o r2\"\n      shows \"r1 = r2\"", "lemma br_inj_run_conv:\n      assumes INJ: \"inj \\<alpha>\"\n      assumes [simp]: \"R = br \\<alpha> I\"\n      shows \"b.is_run (\\<alpha> o ra) \\<longleftrightarrow> a.is_run ra\"", "lemma single_valued_run_conv:\n      assumes \"single_valued R\"\n      shows \"b.is_run rb \n        \\<longleftrightarrow> (\\<exists>ra. rb=the_br_\\<alpha> R o ra \\<and> a.is_run ra)\"", "lemma stuck_bisim: \n      assumes A: \"(a, b) \\<in> R\"\n      shows \"a \\<in> Domain a.E \\<longleftrightarrow> b \\<in> Domain b.E\"", "lemma bisimulation_trans[trans]:\n    assumes \"bisimulation R1 A B\" \n    assumes \"bisimulation R2 B C\"\n    shows \"bisimulation (R1 O R2) A C\"", "lemma (in graph) bisimulation_refl[simp]: \"bisimulation Id G G\"", "lemma lbisimulation_this: \"lbisimulation R A B\"", "lemma accept_bisim: \"a.accept = b.accept\"", "lemma lbisimulation_trans[trans]:\n    assumes \"lbisimulation R1 A B\" \n    assumes \"lbisimulation R2 B C\"\n    shows \"lbisimulation (R1 O R2) A C\"", "lemma (in sa) lbisimulation_refl[simp]: \"lbisimulation Id G G\""], "translations": [["", "lemma finite_ImageI:\n    assumes \"finite A\"  \n    assumes \"\\<And>a. a\\<in>A \\<Longrightarrow> finite (R``{a})\"\n    shows \"finite (R``A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (R `` A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (R `` A)", "note [[simproc add: finite_Collect]]"], ["proof (state)\nthis:\n  TERM _\n\ngoal (1 subgoal):\n 1. finite (R `` A)", "have \"R``A = \\<Union>{R``{a} | a. a:A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R `` A = \\<Union> {R `` {a} |a. a \\<in> A}", "by auto"], ["proof (state)\nthis:\n  R `` A = \\<Union> {R `` {a} |a. a \\<in> A}\n\ngoal (1 subgoal):\n 1. finite (R `` A)", "also"], ["proof (state)\nthis:\n  R `` A = \\<Union> {R `` {a} |a. a \\<in> A}\n\ngoal (1 subgoal):\n 1. finite (R `` A)", "have \"finite (\\<Union>{R``{a} | a. a:A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> {R `` {a} |a. a \\<in> A})", "apply (rule finite_Union)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite {R `` {a} |a. a \\<in> A}\n 2. \\<And>M. M \\<in> {R `` {a} |a. a \\<in> A} \\<Longrightarrow> finite M", "apply (simp add: assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M. M \\<in> {R `` {a} |a. a \\<in> A} \\<Longrightarrow> finite M", "apply (clarsimp simp: assms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  finite (\\<Union> {R `` {a} |a. a \\<in> A})\n\ngoal (1 subgoal):\n 1. finite (R `` A)", "finally"], ["proof (chain)\npicking this:\n  finite (R `` A)", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (R `` A)\n\ngoal (1 subgoal):\n 1. finite (R `` A)", "."], ["proof (state)\nthis:\n  finite (R `` A)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Simulation\\<close>"], ["", "subsection \\<open>Functional Relations\\<close>"], ["", "definition \"the_br_\\<alpha> R \\<equiv> \\<lambda> x. SOME y. (x, y) \\<in> R\""], ["", "abbreviation (input) \"the_br_invar R \\<equiv> \\<lambda> x. x \\<in> Domain R\""], ["", "lemma the_br[simp]: \n    assumes \"single_valued R\"  \n    shows \"br (the_br_\\<alpha> R) (the_br_invar R) = R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. br (the_br_\\<alpha> R) (\\<lambda>x. x \\<in> Domain R) = R", "unfolding build_rel_def the_br_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(c, a). a = (SOME y. (c, y) \\<in> R) \\<and> c \\<in> Domain R} = R", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a ba.\n       (a, ba) \\<in> R \\<Longrightarrow> (a, SOME y. (a, y) \\<in> R) \\<in> R\n 2. \\<And>a b. (a, b) \\<in> R \\<Longrightarrow> b = (SOME y. (a, y) \\<in> R)", "apply (metis someI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b. (a, b) \\<in> R \\<Longrightarrow> b = (SOME y. (a, y) \\<in> R)", "apply (metis assms someI_ex single_valuedD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma the_br_br[simp]: \n    \"I x \\<Longrightarrow> the_br_\\<alpha> (br \\<alpha> I) x = \\<alpha> x\"\n    \"the_br_invar (br \\<alpha> I) = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I x \\<Longrightarrow>\n     the_br_\\<alpha> (br \\<alpha> I) x = \\<alpha> x) &&&\n    (\\<lambda>x. x \\<in> Domain (br \\<alpha> I)) = I", "unfolding the_br_\\<alpha>_def build_rel_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (I x \\<Longrightarrow>\n     (SOME y. (x, y) \\<in> {(c, a). a = \\<alpha> c \\<and> I c}) =\n     \\<alpha> x) &&&\n    (\\<lambda>x. x \\<in> Domain {(c, a). a = \\<alpha> c \\<and> I c}) = I", "by auto"], ["", "subsection \\<open>Relation between Runs\\<close>"], ["", "definition run_rel :: \"('a \\<times> 'b) set \\<Rightarrow> ('a word \\<times> 'b word) set\" where\n    \"run_rel R \\<equiv> {(ra, rb). \\<forall> i. (ra i, rb i) \\<in> R}\""], ["", "lemma run_rel_converse[simp]: \"(ra, rb) \\<in> run_rel (R\\<inverse>) \\<longleftrightarrow> (rb, ra) \\<in> run_rel R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((ra, rb) \\<in> run_rel (R\\<inverse>)) = ((rb, ra) \\<in> run_rel R)", "unfolding run_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((ra, rb)\n     \\<in> {(ra, rb). \\<forall>i. (ra i, rb i) \\<in> R\\<inverse>}) =\n    ((rb, ra) \\<in> {(ra, rb). \\<forall>i. (ra i, rb i) \\<in> R})", "by auto"], ["", "lemma run_rel_single_valued: \"single_valued R \n    \\<Longrightarrow> (ra, rb) \\<in> run_rel R \\<longleftrightarrow> ((\\<forall>i. the_br_invar R (ra i)) \\<and> rb = the_br_\\<alpha> R o ra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued R \\<Longrightarrow>\n    ((ra, rb) \\<in> run_rel R) =\n    ((\\<forall>i. ra i \\<in> Domain R) \\<and>\n     rb = the_br_\\<alpha> R \\<circ> ra)", "unfolding run_rel_def the_br_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued R \\<Longrightarrow>\n    ((ra, rb) \\<in> {(ra, rb). \\<forall>i. (ra i, rb i) \\<in> R}) =\n    ((\\<forall>i. ra i \\<in> Domain R) \\<and>\n     rb = (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<circ> ra)", "apply (auto intro!: ext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>single_valued R; \\<forall>i. (ra i, rb i) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> rb x = (SOME y. (ra x, y) \\<in> R)\n 2. \\<And>i.\n       \\<lbrakk>single_valued R; \\<forall>i. ra i \\<in> Domain R;\n        rb = (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<circ> ra\\<rbrakk>\n       \\<Longrightarrow> (ra i, SOME y. (ra i, y) \\<in> R) \\<in> R", "apply (metis single_valuedD someI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>single_valued R; \\<forall>i. ra i \\<in> Domain R;\n        rb = (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<circ> ra\\<rbrakk>\n       \\<Longrightarrow> (ra i, SOME y. (ra i, y) \\<in> R) \\<in> R", "apply (metis DomainE someI_ex)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Simulation\\<close>"], ["", "locale simulation =\n    a: graph A +\n    b: graph B\n    for R :: \"('a \\<times> 'b) set\"\n    and A :: \"('a, _) graph_rec_scheme\"\n    and B :: \"('b, _) graph_rec_scheme\"\n    +\n    assumes nodes_sim: \"a \\<in> a.V \\<Longrightarrow> (a, b) \\<in> R \\<Longrightarrow> b \\<in> b.V\"\n    assumes init_sim: \"a0 \\<in> a.V0 \\<Longrightarrow> \\<exists> b0. b0 \\<in> b.V0 \\<and> (a0, b0) \\<in> R\"\n    assumes step_sim: \"(a, a') \\<in> a.E \\<Longrightarrow> (a, b) \\<in> R \\<Longrightarrow> \\<exists> b'. (b, b') \\<in> b.E \\<and> (a', b') \\<in> R\"\n  begin"], ["", "lemma simulation_this: \"simulation R A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation R A B", "by unfold_locales"], ["", "lemma run_sim: \n      assumes arun: \"a.is_run ra\"\n      obtains rb where \"b.is_run rb\" \"(ra, rb) \\<in> run_rel R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from arun"], ["proof (chain)\npicking this:\n  a.is_run ra", "have ainit: \"ra 0 \\<in> a.V0\" \n        and astep: \"\\<forall>i. (ra i, ra (Suc i)) \\<in> a.E\""], ["proof (prove)\nusing this:\n  a.is_run ra\n\ngoal (1 subgoal):\n 1. ra 0 \\<in> a.V0 &&& \\<forall>i. (ra i, ra (Suc i)) \\<in> a.E", "using a.run_V0 a.run_ipath ipathD"], ["proof (prove)\nusing this:\n  a.is_run ra\n  a.is_run ?r \\<Longrightarrow> ?r 0 \\<in> a.V0\n  a.is_run ?r \\<Longrightarrow> ipath a.E ?r\n  ipath ?E ?r \\<Longrightarrow> (?r ?i, ?r (Suc ?i)) \\<in> ?E\n\ngoal (1 subgoal):\n 1. ra 0 \\<in> a.V0 &&& \\<forall>i. (ra i, ra (Suc i)) \\<in> a.E", "by blast+"], ["proof (state)\nthis:\n  ra 0 \\<in> a.V0\n  \\<forall>i. (ra i, ra (Suc i)) \\<in> a.E\n\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from init_sim"], ["proof (chain)\npicking this:\n  ?a0.0 \\<in> a.V0 \\<Longrightarrow>\n  \\<exists>b0. b0 \\<in> b.V0 \\<and> (?a0.0, b0) \\<in> R", "obtain rb0 where rel0: \"(ra 0, rb0) \\<in> R\" and binit: \"rb0 \\<in> b.V0\""], ["proof (prove)\nusing this:\n  ?a0.0 \\<in> a.V0 \\<Longrightarrow>\n  \\<exists>b0. b0 \\<in> b.V0 \\<and> (?a0.0, b0) \\<in> R\n\ngoal (1 subgoal):\n 1. (\\<And>rb0.\n        \\<lbrakk>(ra 0, rb0) \\<in> R; rb0 \\<in> b.V0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: ainit)"], ["proof (state)\nthis:\n  (ra 0, rb0) \\<in> R\n  rb0 \\<in> b.V0\n\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define rb\n        where \"rb = rec_nat rb0 (\\<lambda>i rbi. SOME rbsi. (rbi, rbsi) \\<in> b.E \\<and> (ra (Suc i), rbsi) \\<in> R)\""], ["proof (state)\nthis:\n  rb =\n  rec_nat rb0\n   (\\<lambda>i rbi.\n       SOME rbsi. (rbi, rbsi) \\<in> b.E \\<and> (ra (Suc i), rbsi) \\<in> R)\n\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have [simp]: \n        \"rb 0 = rb0\" \n        \"\\<And>i. rb (Suc i) = (SOME rbsi. (rb i, rbsi) \\<in> b.E \\<and> (ra (Suc i), rbsi) \\<in> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rb 0 = rb0 &&&\n    (\\<And>i.\n        rb (Suc i) =\n        (SOME rbsi.\n            (rb i, rbsi) \\<in> b.E \\<and> (ra (Suc i), rbsi) \\<in> R))", "unfolding rb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_nat rb0\n     (\\<lambda>i rbi.\n         SOME rbsi. (rbi, rbsi) \\<in> b.E \\<and> (ra (Suc i), rbsi) \\<in> R)\n     0 =\n    rb0 &&&\n    (\\<And>i.\n        rec_nat rb0\n         (\\<lambda>i rbi.\n             SOME rbsi.\n                (rbi, rbsi) \\<in> b.E \\<and> (ra (Suc i), rbsi) \\<in> R)\n         (Suc i) =\n        (SOME rbsi.\n            (rec_nat rb0\n              (\\<lambda>i rbi.\n                  SOME rbsi.\n                     (rbi, rbsi) \\<in> b.E \\<and>\n                     (ra (Suc i), rbsi) \\<in> R)\n              i,\n             rbsi)\n            \\<in> b.E \\<and>\n            (ra (Suc i), rbsi) \\<in> R))", "by auto"], ["proof (state)\nthis:\n  rb 0 = rb0\n  rb (Suc ?i) =\n  (SOME rbsi. (rb ?i, rbsi) \\<in> b.E \\<and> (ra (Suc ?i), rbsi) \\<in> R)\n\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  rb 0 = rb0\n  rb (Suc ?i) =\n  (SOME rbsi. (rb ?i, rbsi) \\<in> b.E \\<and> (ra (Suc ?i), rbsi) \\<in> R)\n\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"(rb i, rb (Suc i)) \\<in> b.E \\<and> (ra (Suc i), rb (Suc i)) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rb i, rb (Suc i)) \\<in> b.E \\<and> (ra (Suc i), rb (Suc i)) \\<in> R", "proof (induction i)"], ["proof (state)\ngoal (2 subgoals):\n 1. (rb 0, rb (Suc 0)) \\<in> b.E \\<and> (ra (Suc 0), rb (Suc 0)) \\<in> R\n 2. \\<And>i.\n       (rb i, rb (Suc i)) \\<in> b.E \\<and>\n       (ra (Suc i), rb (Suc i)) \\<in> R \\<Longrightarrow>\n       (rb (Suc i), rb (Suc (Suc i))) \\<in> b.E \\<and>\n       (ra (Suc (Suc i)), rb (Suc (Suc i))) \\<in> R", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (rb 0, rb (Suc 0)) \\<in> b.E \\<and> (ra (Suc 0), rb (Suc 0)) \\<in> R\n 2. \\<And>i.\n       (rb i, rb (Suc i)) \\<in> b.E \\<and>\n       (ra (Suc i), rb (Suc i)) \\<in> R \\<Longrightarrow>\n       (rb (Suc i), rb (Suc (Suc i))) \\<in> b.E \\<and>\n       (ra (Suc (Suc i)), rb (Suc (Suc i))) \\<in> R", "from step_sim astep rel0"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?a, ?a') \\<in> a.E; (?a, ?b) \\<in> R\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b'. (?b, b') \\<in> b.E \\<and> (?a', b') \\<in> R\n  \\<forall>i. (ra i, ra (Suc i)) \\<in> a.E\n  (ra 0, rb0) \\<in> R", "obtain rb1 where \"(rb 0, rb1) \\<in> b.E\" and \"(ra 1, rb1) \\<in> R\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a, ?a') \\<in> a.E; (?a, ?b) \\<in> R\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b'. (?b, b') \\<in> b.E \\<and> (?a', b') \\<in> R\n  \\<forall>i. (ra i, ra (Suc i)) \\<in> a.E\n  (ra 0, rb0) \\<in> R\n\ngoal (1 subgoal):\n 1. (\\<And>rb1.\n        \\<lbrakk>(rb 0, rb1) \\<in> b.E; (ra 1, rb1) \\<in> R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (rb 0, rb1) \\<in> b.E\n  (ra 1, rb1) \\<in> R\n\ngoal (2 subgoals):\n 1. (rb 0, rb (Suc 0)) \\<in> b.E \\<and> (ra (Suc 0), rb (Suc 0)) \\<in> R\n 2. \\<And>i.\n       (rb i, rb (Suc i)) \\<in> b.E \\<and>\n       (ra (Suc i), rb (Suc i)) \\<in> R \\<Longrightarrow>\n       (rb (Suc i), rb (Suc (Suc i))) \\<in> b.E \\<and>\n       (ra (Suc (Suc i)), rb (Suc (Suc i))) \\<in> R", "thus ?case"], ["proof (prove)\nusing this:\n  (rb 0, rb1) \\<in> b.E\n  (ra 1, rb1) \\<in> R\n\ngoal (1 subgoal):\n 1. (rb 0, rb (Suc 0)) \\<in> b.E \\<and> (ra (Suc 0), rb (Suc 0)) \\<in> R", "by (auto intro!: someI)"], ["proof (state)\nthis:\n  (rb 0, rb (Suc 0)) \\<in> b.E \\<and> (ra (Suc 0), rb (Suc 0)) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (rb i, rb (Suc i)) \\<in> b.E \\<and>\n       (ra (Suc i), rb (Suc i)) \\<in> R \\<Longrightarrow>\n       (rb (Suc i), rb (Suc (Suc i))) \\<in> b.E \\<and>\n       (ra (Suc (Suc i)), rb (Suc (Suc i))) \\<in> R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (rb i, rb (Suc i)) \\<in> b.E \\<and>\n       (ra (Suc i), rb (Suc i)) \\<in> R \\<Longrightarrow>\n       (rb (Suc i), rb (Suc (Suc i))) \\<in> b.E \\<and>\n       (ra (Suc (Suc i)), rb (Suc (Suc i))) \\<in> R", "case (Suc i)"], ["proof (state)\nthis:\n  (rb i, rb (Suc i)) \\<in> b.E \\<and> (ra (Suc i), rb (Suc i)) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (rb i, rb (Suc i)) \\<in> b.E \\<and>\n       (ra (Suc i), rb (Suc i)) \\<in> R \\<Longrightarrow>\n       (rb (Suc i), rb (Suc (Suc i))) \\<in> b.E \\<and>\n       (ra (Suc (Suc i)), rb (Suc (Suc i))) \\<in> R", "with step_sim astep"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?a, ?a') \\<in> a.E; (?a, ?b) \\<in> R\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b'. (?b, b') \\<in> b.E \\<and> (?a', b') \\<in> R\n  \\<forall>i. (ra i, ra (Suc i)) \\<in> a.E\n  (rb i, rb (Suc i)) \\<in> b.E \\<and> (ra (Suc i), rb (Suc i)) \\<in> R", "obtain rbss where \"(rb (Suc i), rbss) \\<in> b.E\" and\n            \"(ra (Suc (Suc i)), rbss) \\<in> R\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a, ?a') \\<in> a.E; (?a, ?b) \\<in> R\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b'. (?b, b') \\<in> b.E \\<and> (?a', b') \\<in> R\n  \\<forall>i. (ra i, ra (Suc i)) \\<in> a.E\n  (rb i, rb (Suc i)) \\<in> b.E \\<and> (ra (Suc i), rb (Suc i)) \\<in> R\n\ngoal (1 subgoal):\n 1. (\\<And>rbss.\n        \\<lbrakk>(rb (Suc i), rbss) \\<in> b.E;\n         (ra (Suc (Suc i)), rbss) \\<in> R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (rb (Suc i), rbss) \\<in> b.E\n  (ra (Suc (Suc i)), rbss) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (rb i, rb (Suc i)) \\<in> b.E \\<and>\n       (ra (Suc i), rb (Suc i)) \\<in> R \\<Longrightarrow>\n       (rb (Suc i), rb (Suc (Suc i))) \\<in> b.E \\<and>\n       (ra (Suc (Suc i)), rb (Suc (Suc i))) \\<in> R", "thus ?case"], ["proof (prove)\nusing this:\n  (rb (Suc i), rbss) \\<in> b.E\n  (ra (Suc (Suc i)), rbss) \\<in> R\n\ngoal (1 subgoal):\n 1. (rb (Suc i), rb (Suc (Suc i))) \\<in> b.E \\<and>\n    (ra (Suc (Suc i)), rb (Suc (Suc i))) \\<in> R", "by (auto intro!: someI)"], ["proof (state)\nthis:\n  (rb (Suc i), rb (Suc (Suc i))) \\<in> b.E \\<and>\n  (ra (Suc (Suc i)), rb (Suc (Suc i))) \\<in> R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (rb i, rb (Suc i)) \\<in> b.E \\<and> (ra (Suc i), rb (Suc i)) \\<in> R\n\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  (rb ?i2, rb (Suc ?i2)) \\<in> b.E \\<and>\n  (ra (Suc ?i2), rb (Suc ?i2)) \\<in> R\n\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note aux=this"], ["proof (state)\nthis:\n  (rb ?i2, rb (Suc ?i2)) \\<in> b.E \\<and>\n  (ra (Suc ?i2), rb (Suc ?i2)) \\<in> R\n\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from aux binit"], ["proof (chain)\npicking this:\n  (rb ?i2, rb (Suc ?i2)) \\<in> b.E \\<and>\n  (ra (Suc ?i2), rb (Suc ?i2)) \\<in> R\n  rb0 \\<in> b.V0", "have \"b.is_run rb\""], ["proof (prove)\nusing this:\n  (rb ?i2, rb (Suc ?i2)) \\<in> b.E \\<and>\n  (ra (Suc ?i2), rb (Suc ?i2)) \\<in> R\n  rb0 \\<in> b.V0\n\ngoal (1 subgoal):\n 1. b.is_run rb", "unfolding b.is_run_def ipath_def"], ["proof (prove)\nusing this:\n  (rb ?i2, rb (Suc ?i2)) \\<in> b.E \\<and>\n  (ra (Suc ?i2), rb (Suc ?i2)) \\<in> R\n  rb0 \\<in> b.V0\n\ngoal (1 subgoal):\n 1. rb 0 \\<in> b.V0 \\<and> (\\<forall>i. (rb i, rb (Suc i)) \\<in> b.E)", "by simp"], ["proof (state)\nthis:\n  b.is_run rb\n\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  b.is_run rb\n\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from aux rel0"], ["proof (chain)\npicking this:\n  (rb ?i2, rb (Suc ?i2)) \\<in> b.E \\<and>\n  (ra (Suc ?i2), rb (Suc ?i2)) \\<in> R\n  (ra 0, rb0) \\<in> R", "have \"(ra, rb) \\<in> run_rel R\""], ["proof (prove)\nusing this:\n  (rb ?i2, rb (Suc ?i2)) \\<in> b.E \\<and>\n  (ra (Suc ?i2), rb (Suc ?i2)) \\<in> R\n  (ra 0, rb0) \\<in> R\n\ngoal (1 subgoal):\n 1. (ra, rb) \\<in> run_rel R", "unfolding run_rel_def"], ["proof (prove)\nusing this:\n  (rb ?i2, rb (Suc ?i2)) \\<in> b.E \\<and>\n  (ra (Suc ?i2), rb (Suc ?i2)) \\<in> R\n  (ra 0, rb0) \\<in> R\n\ngoal (1 subgoal):\n 1. (ra, rb) \\<in> {(ra, rb). \\<forall>i. (ra i, rb i) \\<in> R}", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>i.\n                   (rb i, rb (Suc i)) \\<in> b.E \\<and>\n                   (ra (Suc i), rb (Suc i)) \\<in> R;\n        (ra 0, rb0) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (ra i, rb i) \\<in> R", "apply (case_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>i.\n                   (rb i, rb (Suc i)) \\<in> b.E \\<and>\n                   (ra (Suc i), rb (Suc i)) \\<in> R;\n        (ra 0, rb0) \\<in> R; i = 0\\<rbrakk>\n       \\<Longrightarrow> (ra i, rb i) \\<in> R\n 2. \\<And>i nat.\n       \\<lbrakk>\\<And>i.\n                   (rb i, rb (Suc i)) \\<in> b.E \\<and>\n                   (ra (Suc i), rb (Suc i)) \\<in> R;\n        (ra 0, rb0) \\<in> R; i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (ra i, rb i) \\<in> R", "by auto"], ["proof (state)\nthis:\n  (ra, rb) \\<in> run_rel R\n\ngoal (1 subgoal):\n 1. (\\<And>rb.\n        \\<lbrakk>b.is_run rb; (ra, rb) \\<in> run_rel R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  b.is_run rb\n  (ra, rb) \\<in> run_rel R", "show ?thesis"], ["proof (prove)\nusing this:\n  b.is_run rb\n  (ra, rb) \\<in> run_rel R\n\ngoal (1 subgoal):\n 1. thesis", "by rule"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma stuck_sim: \n      assumes \"(a, b) \\<in> R\"\n      assumes \"b \\<notin> Domain b.E\"\n      shows \"a \\<notin> Domain a.E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> Domain a.E", "using assms"], ["proof (prove)\nusing this:\n  (a, b) \\<in> R\n  b \\<notin> Domain b.E\n\ngoal (1 subgoal):\n 1. a \\<notin> Domain a.E", "by (auto dest: step_sim)"], ["", "lemma run_Domain: \"a.is_run r \\<Longrightarrow> r i \\<in> Domain R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a.is_run r \\<Longrightarrow> r i \\<in> Domain R", "by (erule run_sim) (auto simp: run_rel_def)"], ["", "lemma br_run_sim:\n      assumes \"R = br \\<alpha> I\"\n      assumes \"a.is_run r\"\n      shows \"b.is_run (\\<alpha> o r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b.is_run (\\<alpha> \\<circ> r)", "using assms"], ["proof (prove)\nusing this:\n  R = br \\<alpha> I\n  a.is_run r\n\ngoal (1 subgoal):\n 1. b.is_run (\\<alpha> \\<circ> r)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R = br \\<alpha> I; a.is_run r\\<rbrakk>\n    \\<Longrightarrow> b.is_run (\\<alpha> \\<circ> r)", "apply (erule run_sim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rb.\n       \\<lbrakk>R = br \\<alpha> I; b.is_run rb;\n        (r, rb) \\<in> run_rel R\\<rbrakk>\n       \\<Longrightarrow> b.is_run (\\<alpha> \\<circ> r)", "apply (auto simp: run_rel_def build_rel_def a.is_run_def b.is_run_def ipath_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_reachable_sim: \"a \\<in> a.E\\<^sup>* `` a.V0 \\<Longrightarrow> \\<exists> b. (a, b) \\<in> R \\<and> b \\<in> b.E\\<^sup>* `` b.V0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> a.reachable \\<Longrightarrow>\n    \\<exists>b. (a, b) \\<in> R \\<and> b \\<in> b.reachable", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(x, a) \\<in> a.E\\<^sup>*; x \\<in> a.V0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            (a, b) \\<in> R \\<and> b \\<in> b.reachable", "apply (erule rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> a.V0 \\<Longrightarrow>\n       \\<exists>b. (x, b) \\<in> R \\<and> b \\<in> b.reachable\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> a.V0; (x, y) \\<in> a.E\\<^sup>*; (y, z) \\<in> a.E;\n        \\<exists>b. (y, b) \\<in> R \\<and> b \\<in> b.reachable\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            (z, b) \\<in> R \\<and> b \\<in> b.reachable", "apply (metis ImageI init_sim rtrancl.rtrancl_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> a.V0; (x, y) \\<in> a.E\\<^sup>*; (y, z) \\<in> a.E;\n        \\<exists>b. (y, b) \\<in> R \\<and> b \\<in> b.reachable\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            (z, b) \\<in> R \\<and> b \\<in> b.reachable", "apply (metis rtrancl_image_advance step_sim)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma reachable_sim: \"a.E\\<^sup>* `` a.V0 \\<subseteq> R\\<inverse> `` b.E\\<^sup>* `` b.V0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a.reachable \\<subseteq> R\\<inverse> `` b.reachable", "using is_reachable_sim"], ["proof (prove)\nusing this:\n  ?a \\<in> a.reachable \\<Longrightarrow>\n  \\<exists>b. (?a, b) \\<in> R \\<and> b \\<in> b.reachable\n\ngoal (1 subgoal):\n 1. a.reachable \\<subseteq> R\\<inverse> `` b.reachable", "by blast"], ["", "lemma reachable_finite_sim:\n      assumes \"finite (b.E\\<^sup>* `` b.V0)\"\n      assumes \"\\<And>b. b \\<in> b.E\\<^sup>* `` b.V0 \\<Longrightarrow> finite (R\\<inverse> `` {b})\"\n      shows \"finite (a.E\\<^sup>* `` a.V0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite a.reachable", "apply (rule finite_subset[OF reachable_sim])"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (R\\<inverse> `` b.reachable)", "apply (rule finite_ImageI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite b.reachable\n 2. \\<And>a.\n       a \\<in> b.reachable \\<Longrightarrow> finite (R\\<inverse> `` {a})", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemma simulation_trans[trans]:\n    assumes \"simulation R1 A B\"\n    assumes \"simulation R2 B C\"\n    shows \"simulation (R1 O R2) A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation (R1 O R2) A C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. simulation (R1 O R2) A C", "interpret s1: simulation R1 A B"], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation R1 A B", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. simulation (R1 O R2) A C", "interpret s2: simulation R2 B C"], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation R2 B C", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. simulation (R1 O R2) A C", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation (R1 O R2) A C", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> s1.a.V; (a, b) \\<in> R1 O R2\\<rbrakk>\n       \\<Longrightarrow> b \\<in> s2.b.V\n 2. \\<And>a0.\n       a0 \\<in> s1.a.V0 \\<Longrightarrow>\n       \\<exists>b0. b0 \\<in> s2.b.V0 \\<and> (a0, b0) \\<in> R1 O R2\n 3. \\<And>a a' b.\n       \\<lbrakk>(a, a') \\<in> s1.a.E; (a, b) \\<in> R1 O R2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b'.\n                            (b, b') \\<in> s2.b.E \\<and>\n                            (a', b') \\<in> R1 O R2", "using s1.nodes_sim s2.nodes_sim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> s1.a.V; (?a, ?b) \\<in> R1\\<rbrakk>\n  \\<Longrightarrow> ?b \\<in> s1.b.V\n  \\<lbrakk>?a \\<in> s1.b.V; (?a, ?b) \\<in> R2\\<rbrakk>\n  \\<Longrightarrow> ?b \\<in> s2.b.V\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> s1.a.V; (a, b) \\<in> R1 O R2\\<rbrakk>\n       \\<Longrightarrow> b \\<in> s2.b.V\n 2. \\<And>a0.\n       a0 \\<in> s1.a.V0 \\<Longrightarrow>\n       \\<exists>b0. b0 \\<in> s2.b.V0 \\<and> (a0, b0) \\<in> R1 O R2\n 3. \\<And>a a' b.\n       \\<lbrakk>(a, a') \\<in> s1.a.E; (a, b) \\<in> R1 O R2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b'.\n                            (b, b') \\<in> s2.b.E \\<and>\n                            (a', b') \\<in> R1 O R2", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a0.\n       a0 \\<in> s1.a.V0 \\<Longrightarrow>\n       \\<exists>b0. b0 \\<in> s2.b.V0 \\<and> (a0, b0) \\<in> R1 O R2\n 2. \\<And>a a' b.\n       \\<lbrakk>(a, a') \\<in> s1.a.E; (a, b) \\<in> R1 O R2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b'.\n                            (b, b') \\<in> s2.b.E \\<and>\n                            (a', b') \\<in> R1 O R2", "using s1.init_sim s2.init_sim"], ["proof (prove)\nusing this:\n  ?a0.0 \\<in> s1.a.V0 \\<Longrightarrow>\n  \\<exists>b0. b0 \\<in> s1.b.V0 \\<and> (?a0.0, b0) \\<in> R1\n  ?a0.0 \\<in> s1.b.V0 \\<Longrightarrow>\n  \\<exists>b0. b0 \\<in> s2.b.V0 \\<and> (?a0.0, b0) \\<in> R2\n\ngoal (2 subgoals):\n 1. \\<And>a0.\n       a0 \\<in> s1.a.V0 \\<Longrightarrow>\n       \\<exists>b0. b0 \\<in> s2.b.V0 \\<and> (a0, b0) \\<in> R1 O R2\n 2. \\<And>a a' b.\n       \\<lbrakk>(a, a') \\<in> s1.a.E; (a, b) \\<in> R1 O R2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b'.\n                            (b, b') \\<in> s2.b.E \\<and>\n                            (a', b') \\<in> R1 O R2", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' b.\n       \\<lbrakk>(a, a') \\<in> s1.a.E; (a, b) \\<in> R1 O R2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b'.\n                            (b, b') \\<in> s2.b.E \\<and>\n                            (a', b') \\<in> R1 O R2", "using s1.step_sim s2.step_sim"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a, ?a') \\<in> s1.a.E; (?a, ?b) \\<in> R1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b'.\n                       (?b, b') \\<in> s1.b.E \\<and> (?a', b') \\<in> R1\n  \\<lbrakk>(?a, ?a') \\<in> s1.b.E; (?a, ?b) \\<in> R2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b'.\n                       (?b, b') \\<in> s2.b.E \\<and> (?a', b') \\<in> R2\n\ngoal (1 subgoal):\n 1. \\<And>a a' b.\n       \\<lbrakk>(a, a') \\<in> s1.a.E; (a, b) \\<in> R1 O R2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b'.\n                            (b, b') \\<in> s2.b.E \\<and>\n                            (a', b') \\<in> R1 O R2", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  simulation (R1 O R2) A C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in graph) simulation_refl[simp]: \"simulation Id G G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation Id G G", "by unfold_locales auto"], ["", "locale lsimulation = \n    a: sa A +\n    b: sa B +\n    simulation R A B\n    for R :: \"('a \\<times> 'b) set\"\n    and A :: \"('a, 'l, _) sa_rec_scheme\"\n    and B :: \"('b, 'l, _) sa_rec_scheme\"\n    +\n    assumes labeling_consistent: \"(a, b) \\<in> R \\<Longrightarrow> a.L a = b.L b\"\n  begin"], ["", "lemma lsimulation_this: \"lsimulation R A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lsimulation R A B", "by unfold_locales"], ["", "lemma run_rel_consistent: \"(ra, rb) \\<in> run_rel R \\<Longrightarrow> a.L o ra = b.L o rb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ra, rb) \\<in> run_rel R \\<Longrightarrow>\n    a.L \\<circ> ra = b.L \\<circ> rb", "using labeling_consistent"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> R \\<Longrightarrow> a.L ?a = b.L ?b\n\ngoal (1 subgoal):\n 1. (ra, rb) \\<in> run_rel R \\<Longrightarrow>\n    a.L \\<circ> ra = b.L \\<circ> rb", "unfolding run_rel_def"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> R \\<Longrightarrow> a.L ?a = b.L ?b\n\ngoal (1 subgoal):\n 1. (ra, rb)\n    \\<in> {(ra, rb). \\<forall>i. (ra i, rb i) \\<in> R} \\<Longrightarrow>\n    a.L \\<circ> ra = b.L \\<circ> rb", "by auto"], ["", "lemma accept_sim: \"a.accept w \\<Longrightarrow> b.accept w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a.accept w \\<Longrightarrow> b.accept w", "unfolding a.accept_def b.accept_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. a.is_run r \\<and> w = a.L \\<circ> r \\<Longrightarrow>\n    \\<exists>r. b.is_run r \\<and> w = b.L \\<circ> r", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>a.is_run r; w = a.L \\<circ> r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ra.\n                            b.is_run ra \\<and>\n                            a.L \\<circ> r = b.L \\<circ> ra", "apply (erule run_sim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rb.\n       \\<lbrakk>w = a.L \\<circ> r; b.is_run rb;\n        (r, rb) \\<in> run_rel R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ra.\n                            b.is_run ra \\<and>\n                            a.L \\<circ> r = b.L \\<circ> ra", "apply (auto simp: run_rel_consistent)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemma lsimulation_trans[trans]: \n    assumes \"lsimulation R1 A B\"\n    assumes \"lsimulation R2 B C\"\n    shows \"lsimulation (R1 O R2) A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lsimulation (R1 O R2) A C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lsimulation (R1 O R2) A C", "interpret s1: lsimulation R1 A B"], ["proof (prove)\ngoal (1 subgoal):\n 1. lsimulation R1 A B", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. lsimulation (R1 O R2) A C", "interpret s2: lsimulation R2 B C"], ["proof (prove)\ngoal (1 subgoal):\n 1. lsimulation R2 B C", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. lsimulation (R1 O R2) A C", "interpret simulation \"R1 O R2\" A C"], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation (R1 O R2) A C", "using simulation_trans s1.simulation_this s2.simulation_this"], ["proof (prove)\nusing this:\n  \\<lbrakk>simulation ?R1.0 ?A ?B; simulation ?R2.0 ?B ?C\\<rbrakk>\n  \\<Longrightarrow> simulation (?R1.0 O ?R2.0) ?A ?C\n  simulation R1 A B\n  simulation R2 B C\n\ngoal (1 subgoal):\n 1. simulation (R1 O R2) A C", "by this"], ["proof (state)\ngoal (1 subgoal):\n 1. lsimulation (R1 O R2) A C", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lsimulation (R1 O R2) A C", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b. (a, b) \\<in> R1 O R2 \\<Longrightarrow> s1.a.L a = s2.b.L b", "using s1.labeling_consistent s2.labeling_consistent"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> R1 \\<Longrightarrow> s1.a.L ?a = s1.b.L ?b\n  (?a, ?b) \\<in> R2 \\<Longrightarrow> s1.b.L ?a = s2.b.L ?b\n\ngoal (1 subgoal):\n 1. \\<And>a b. (a, b) \\<in> R1 O R2 \\<Longrightarrow> s1.a.L a = s2.b.L b", "by auto"], ["proof (state)\nthis:\n  lsimulation (R1 O R2) A C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in sa) lsimulation_refl[simp]: \"lsimulation Id G G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lsimulation Id G G", "by unfold_locales auto"], ["", "subsection \\<open>Bisimulation\\<close>"], ["", "locale bisimulation = \n    a: graph A +\n    b: graph B +\n    s1: simulation \"R\" A B +\n    s2: simulation \"R\\<inverse>\" B A\n    for R :: \"('a \\<times> 'b) set\"\n    and A :: \"('a, _) graph_rec_scheme\"\n    and B :: \"('b, _) graph_rec_scheme\"\n  begin"], ["", "lemma bisimulation_this: \"bisimulation R A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation R A B", "by unfold_locales"], ["", "lemma converse: \"bisimulation (R\\<inverse>) B A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation (R\\<inverse>) B A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bisimulation (R\\<inverse>) B A", "interpret simulation \"(R\\<inverse>)\\<inverse>\" A B"], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation ((R\\<inverse>)\\<inverse>) A B", "by simp unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. bisimulation (R\\<inverse>) B A", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation (R\\<inverse>) B A", "by unfold_locales"], ["proof (state)\nthis:\n  bisimulation (R\\<inverse>) B A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma br_run_conv:\n      assumes \"R = br \\<alpha> I\"\n      shows \"b.is_run rb \\<longleftrightarrow> (\\<exists>ra. rb=\\<alpha> o ra \\<and> a.is_run ra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b.is_run rb = (\\<exists>ra. rb = \\<alpha> \\<circ> ra \\<and> a.is_run ra)", "using assms"], ["proof (prove)\nusing this:\n  R = br \\<alpha> I\n\ngoal (1 subgoal):\n 1. b.is_run rb = (\\<exists>ra. rb = \\<alpha> \\<circ> ra \\<and> a.is_run ra)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>R = br \\<alpha> I; b.is_run rb\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ra.\n                         rb = \\<alpha> \\<circ> ra \\<and> a.is_run ra\n 2. \\<And>ra.\n       \\<lbrakk>R = br \\<alpha> I; a.is_run ra;\n        rb = \\<alpha> \\<circ> ra\\<rbrakk>\n       \\<Longrightarrow> b.is_run (\\<alpha> \\<circ> ra)", "apply (erule s2.run_sim, auto \n        intro!: ext\n        simp: run_rel_def build_rel_def) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra.\n       \\<lbrakk>R = br \\<alpha> I; a.is_run ra;\n        rb = \\<alpha> \\<circ> ra\\<rbrakk>\n       \\<Longrightarrow> b.is_run (\\<alpha> \\<circ> ra)", "apply (erule s1.br_run_sim, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bri_run_conv:\n      assumes \"R = (br \\<gamma> I)\\<inverse>\"\n      shows \"a.is_run ra \\<longleftrightarrow> (\\<exists>rb. ra=\\<gamma> o rb \\<and> b.is_run rb)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a.is_run ra = (\\<exists>rb. ra = \\<gamma> \\<circ> rb \\<and> b.is_run rb)", "using assms"], ["proof (prove)\nusing this:\n  R = (br \\<gamma> I)\\<inverse>\n\ngoal (1 subgoal):\n 1. a.is_run ra = (\\<exists>rb. ra = \\<gamma> \\<circ> rb \\<and> b.is_run rb)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>R = (br \\<gamma> I)\\<inverse>; a.is_run ra\\<rbrakk>\n    \\<Longrightarrow> \\<exists>rb.\n                         ra = \\<gamma> \\<circ> rb \\<and> b.is_run rb\n 2. \\<And>rb.\n       \\<lbrakk>R = (br \\<gamma> I)\\<inverse>; b.is_run rb;\n        ra = \\<gamma> \\<circ> rb\\<rbrakk>\n       \\<Longrightarrow> a.is_run (\\<gamma> \\<circ> rb)", "apply (erule s1.run_sim, auto simp: run_rel_def build_rel_def intro!: ext) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rb.\n       \\<lbrakk>R = (br \\<gamma> I)\\<inverse>; b.is_run rb;\n        ra = \\<gamma> \\<circ> rb\\<rbrakk>\n       \\<Longrightarrow> a.is_run (\\<gamma> \\<circ> rb)", "apply (erule s2.run_sim, auto simp: run_rel_def build_rel_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rb rba.\n       \\<lbrakk>R = {(a, c). a = \\<gamma> c \\<and> I c};\n        ra = \\<gamma> \\<circ> rb; a.is_run rba;\n        \\<forall>i. rba i = \\<gamma> (rb i) \\<and> I (rb i)\\<rbrakk>\n       \\<Longrightarrow> a.is_run (\\<gamma> \\<circ> rb)", "by (metis (no_types, hide_lams) fun_comp_eq_conv)"], ["", "lemma inj_map_run_eq:\n      assumes \"inj \\<alpha>\"\n      assumes E: \"\\<alpha> o r1 = \\<alpha> o r2\"\n      shows \"r1 = r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r1 = r2", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. r1 x = r2 x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. r1 x = r2 x", "from E"], ["proof (chain)\npicking this:\n  \\<alpha> \\<circ> r1 = \\<alpha> \\<circ> r2", "have \"\\<alpha> (r1 i) = \\<alpha> (r2 i)\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<circ> r1 = \\<alpha> \\<circ> r2\n\ngoal (1 subgoal):\n 1. \\<alpha> (r1 i) = \\<alpha> (r2 i)", "by (simp add: comp_def) metis"], ["proof (state)\nthis:\n  \\<alpha> (r1 i) = \\<alpha> (r2 i)\n\ngoal (1 subgoal):\n 1. \\<And>x. r1 x = r2 x", "with \\<open>inj \\<alpha>\\<close>"], ["proof (chain)\npicking this:\n  inj \\<alpha>\n  \\<alpha> (r1 i) = \\<alpha> (r2 i)", "show \"r1 i = r2 i\""], ["proof (prove)\nusing this:\n  inj \\<alpha>\n  \\<alpha> (r1 i) = \\<alpha> (r2 i)\n\ngoal (1 subgoal):\n 1. r1 i = r2 i", "by (auto dest: injD)"], ["proof (state)\nthis:\n  r1 i = r2 i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma br_inj_run_conv:\n      assumes INJ: \"inj \\<alpha>\"\n      assumes [simp]: \"R = br \\<alpha> I\"\n      shows \"b.is_run (\\<alpha> o ra) \\<longleftrightarrow> a.is_run ra\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b.is_run (\\<alpha> \\<circ> ra) = a.is_run ra", "apply (subst br_run_conv[OF assms(2)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>raa.\n        \\<alpha> \\<circ> ra = \\<alpha> \\<circ> raa \\<and> a.is_run raa) =\n    a.is_run ra", "apply (auto dest: inj_map_run_eq[OF INJ])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma single_valued_run_conv:\n      assumes \"single_valued R\"\n      shows \"b.is_run rb \n        \\<longleftrightarrow> (\\<exists>ra. rb=the_br_\\<alpha> R o ra \\<and> a.is_run ra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b.is_run rb =\n    (\\<exists>ra. rb = the_br_\\<alpha> R \\<circ> ra \\<and> a.is_run ra)", "using assms"], ["proof (prove)\nusing this:\n  single_valued R\n\ngoal (1 subgoal):\n 1. b.is_run rb =\n    (\\<exists>ra. rb = the_br_\\<alpha> R \\<circ> ra \\<and> a.is_run ra)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>single_valued R; b.is_run rb\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ra.\n                         rb = the_br_\\<alpha> R \\<circ> ra \\<and>\n                         a.is_run ra\n 2. \\<And>ra.\n       \\<lbrakk>single_valued R; a.is_run ra;\n        rb = the_br_\\<alpha> R \\<circ> ra\\<rbrakk>\n       \\<Longrightarrow> b.is_run (the_br_\\<alpha> R \\<circ> ra)", "apply (erule s2.run_sim)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rba.\n       \\<lbrakk>single_valued R; a.is_run rba;\n        (rb, rba) \\<in> run_rel (R\\<inverse>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ra.\n                            rb = the_br_\\<alpha> R \\<circ> ra \\<and>\n                            a.is_run ra\n 2. \\<And>ra.\n       \\<lbrakk>single_valued R; a.is_run ra;\n        rb = the_br_\\<alpha> R \\<circ> ra\\<rbrakk>\n       \\<Longrightarrow> b.is_run (the_br_\\<alpha> R \\<circ> ra)", "apply (auto simp add: run_rel_single_valued)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra.\n       \\<lbrakk>single_valued R; a.is_run ra;\n        rb = the_br_\\<alpha> R \\<circ> ra\\<rbrakk>\n       \\<Longrightarrow> b.is_run (the_br_\\<alpha> R \\<circ> ra)", "apply (erule s1.run_sim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra rba.\n       \\<lbrakk>single_valued R; rb = the_br_\\<alpha> R \\<circ> ra;\n        b.is_run rba; (ra, rba) \\<in> run_rel R\\<rbrakk>\n       \\<Longrightarrow> b.is_run (the_br_\\<alpha> R \\<circ> ra)", "apply (auto simp add: run_rel_single_valued)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma stuck_bisim: \n      assumes A: \"(a, b) \\<in> R\"\n      shows \"a \\<in> Domain a.E \\<longleftrightarrow> b \\<in> Domain b.E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> Domain a.E) = (b \\<in> Domain b.E)", "using s1.stuck_sim[OF A]"], ["proof (prove)\nusing this:\n  b \\<notin> Domain b.E \\<Longrightarrow> a \\<notin> Domain a.E\n\ngoal (1 subgoal):\n 1. (a \\<in> Domain a.E) = (b \\<in> Domain b.E)", "using s2.stuck_sim[OF A[THEN converseI[of _ _ R]]]"], ["proof (prove)\nusing this:\n  b \\<notin> Domain b.E \\<Longrightarrow> a \\<notin> Domain a.E\n  a \\<notin> Domain a.E \\<Longrightarrow> b \\<notin> Domain b.E\n\ngoal (1 subgoal):\n 1. (a \\<in> Domain a.E) = (b \\<in> Domain b.E)", "by blast"], ["", "end"], ["", "lemma bisimulation_trans[trans]:\n    assumes \"bisimulation R1 A B\" \n    assumes \"bisimulation R2 B C\"\n    shows \"bisimulation (R1 O R2) A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation (R1 O R2) A C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bisimulation (R1 O R2) A C", "interpret s1: bisimulation R1 A B"], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation R1 A B", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. bisimulation (R1 O R2) A C", "interpret s2: bisimulation R2 B C"], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation R2 B C", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. bisimulation (R1 O R2) A C", "interpret t1: simulation \"(R1 O R2)\" A C"], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation (R1 O R2) A C", "using simulation_trans s1.s1.simulation_this s2.s1.simulation_this"], ["proof (prove)\nusing this:\n  \\<lbrakk>simulation ?R1.0 ?A ?B; simulation ?R2.0 ?B ?C\\<rbrakk>\n  \\<Longrightarrow> simulation (?R1.0 O ?R2.0) ?A ?C\n  simulation R1 A B\n  simulation R2 B C\n\ngoal (1 subgoal):\n 1. simulation (R1 O R2) A C", "by this"], ["proof (state)\ngoal (1 subgoal):\n 1. bisimulation (R1 O R2) A C", "interpret t2: simulation \"(R1 O R2)\\<inverse>\" C A"], ["proof (prove)\ngoal (1 subgoal):\n 1. simulation ((R1 O R2)\\<inverse>) C A", "using simulation_trans s2.s2.simulation_this s1.s2.simulation_this"], ["proof (prove)\nusing this:\n  \\<lbrakk>simulation ?R1.0 ?A ?B; simulation ?R2.0 ?B ?C\\<rbrakk>\n  \\<Longrightarrow> simulation (?R1.0 O ?R2.0) ?A ?C\n  simulation (R2\\<inverse>) C B\n  simulation (R1\\<inverse>) B A\n\ngoal (1 subgoal):\n 1. simulation ((R1 O R2)\\<inverse>) C A", "unfolding converse_relcomp"], ["proof (prove)\nusing this:\n  \\<lbrakk>simulation ?R1.0 ?A ?B; simulation ?R2.0 ?B ?C\\<rbrakk>\n  \\<Longrightarrow> simulation (?R1.0 O ?R2.0) ?A ?C\n  simulation (R2\\<inverse>) C B\n  simulation (R1\\<inverse>) B A\n\ngoal (1 subgoal):\n 1. simulation (R2\\<inverse> O R1\\<inverse>) C A", "by this"], ["proof (state)\ngoal (1 subgoal):\n 1. bisimulation (R1 O R2) A C", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation (R1 O R2) A C", "by unfold_locales"], ["proof (state)\nthis:\n  bisimulation (R1 O R2) A C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in graph) bisimulation_refl[simp]: \"bisimulation Id G G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation Id G G", "by unfold_locales auto"], ["", "locale lbisimulation = \n    a: sa A +\n    b: sa B +\n    s1: lsimulation \"R\" A B +\n    s2: lsimulation \"R\\<inverse>\" B A +\n    bisimulation R A B\n    for R :: \"('a \\<times> 'b) set\"\n    and A :: \"('a, 'l, _) sa_rec_scheme\"\n    and B :: \"('b, 'l, _) sa_rec_scheme\"\n  begin"], ["", "lemma lbisimulation_this: \"lbisimulation R A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lbisimulation R A B", "by unfold_locales"], ["", "lemma accept_bisim: \"a.accept = b.accept\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a.accept = b.accept", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. a.accept x = b.accept x", "using s1.accept_sim s2.accept_sim"], ["proof (prove)\nusing this:\n  a.accept ?w \\<Longrightarrow> b.accept ?w\n  b.accept ?w \\<Longrightarrow> a.accept ?w\n\ngoal (1 subgoal):\n 1. \\<And>x. a.accept x = b.accept x", "by blast"], ["", "end"], ["", "lemma lbisimulation_trans[trans]:\n    assumes \"lbisimulation R1 A B\" \n    assumes \"lbisimulation R2 B C\"\n    shows \"lbisimulation (R1 O R2) A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lbisimulation (R1 O R2) A C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lbisimulation (R1 O R2) A C", "interpret s1: lbisimulation R1 A B"], ["proof (prove)\ngoal (1 subgoal):\n 1. lbisimulation R1 A B", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. lbisimulation (R1 O R2) A C", "interpret s2: lbisimulation R2 B C"], ["proof (prove)\ngoal (1 subgoal):\n 1. lbisimulation R2 B C", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. lbisimulation (R1 O R2) A C", "from lsimulation_trans[OF s1.s1.lsimulation_this s2.s1.lsimulation_this]"], ["proof (chain)\npicking this:\n  lsimulation (R1 O R2) A C", "interpret t1: lsimulation \"(R1 O R2)\" A C"], ["proof (prove)\nusing this:\n  lsimulation (R1 O R2) A C\n\ngoal (1 subgoal):\n 1. lsimulation (R1 O R2) A C", "."], ["proof (state)\ngoal (1 subgoal):\n 1. lbisimulation (R1 O R2) A C", "from lsimulation_trans[OF s2.s2.lsimulation_this s1.s2.lsimulation_this, folded converse_relcomp]"], ["proof (chain)\npicking this:\n  lsimulation ((R1 O R2)\\<inverse>) C A", "interpret t2: lsimulation \"(R1 O R2)\\<inverse>\" C A"], ["proof (prove)\nusing this:\n  lsimulation ((R1 O R2)\\<inverse>) C A\n\ngoal (1 subgoal):\n 1. lsimulation ((R1 O R2)\\<inverse>) C A", "."], ["proof (state)\ngoal (1 subgoal):\n 1. lbisimulation (R1 O R2) A C", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lbisimulation (R1 O R2) A C", "by unfold_locales"], ["proof (state)\nthis:\n  lbisimulation (R1 O R2) A C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in sa) lbisimulation_refl[simp]: \"lbisimulation Id G G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lbisimulation Id G G", "by unfold_locales auto"], ["", "end"]]}