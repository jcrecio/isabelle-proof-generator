{"file_name": "/home/qj213/afp-2021-10-22/thys/CAVA_Automata/Digraph.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CAVA_Automata", "problem_names": ["lemma graph_restrict_simps[simp]:\n  \"g_V (graph_restrict G R) = g_V G\"\n  \"g_E (graph_restrict G R) = rel_restrict (g_E G) R\"\n  \"g_V0 (graph_restrict G R) = g_V0 G - R\"\n  \"graph_rec.more (graph_restrict G R) = graph_rec.more G\"", "lemma graph_restrict_trivial[simp]: \"graph_restrict G {} = G\"", "lemma finite_V0: \"finite reachable \\<Longrightarrow> finite V0\"", "lemma run_ipath: \"is_run r \\<Longrightarrow> ipath E r\"", "lemma run_V0: \"is_run r \\<Longrightarrow> r 0 \\<in> V0\"", "lemma run_reachable: \"is_run r \\<Longrightarrow> range r \\<subseteq> reachable\"", "lemma reachable_V: \"reachable \\<subseteq> V\"", "lemma finite_E: \"finite V \\<Longrightarrow> finite E\"", "lemma fb_graph_subset:\n    assumes \"g_V G' = V\"\n    assumes \"g_E G' \\<subseteq> E\"\n    assumes \"finite (g_V0 G')\"\n    assumes \"g_V0 G' \\<subseteq> reachable\"\n    shows \"fb_graph G'\"", "lemma fb_graph_restrict: \"fb_graph (graph_restrict G R)\"", "lemma (in graph) fb_graphI_fr:\n  assumes \"finite reachable\"\n  shows \"fb_graph G\"", "lemma G'_fields:\n    \"g_V G' = f`V\"\n    \"g_V0 G' = f`V0\"\n    \"g_E G' = rename_E f E\"", "lemma \n    fi_f: \"x\\<in>V \\<Longrightarrow> fi (f x) = x\" and\n    f_fi: \"y\\<in>f`V \\<Longrightarrow> f (fi y) = y\" and\n    fi_f_eq: \"\\<lbrakk>f x = y; x\\<in>V\\<rbrakk> \\<Longrightarrow> fi y = x\"", "lemma E'_to_E: \"(u,v) \\<in> g_E G' \\<Longrightarrow> (fi u, fi v)\\<in>E\"", "lemma V0'_to_V0: \"v\\<in>g_V0 G' \\<Longrightarrow> fi v \\<in> V0\"", "lemma rtrancl_E'_sim:\n    assumes \"(f u,v')\\<in>(g_E G')\\<^sup>*\"\n    assumes \"u\\<in>V\"\n    shows \"\\<exists>v. v' = f v \\<and> v\\<in>V \\<and> (u,v)\\<in>E\\<^sup>*\"", "lemma rtrancl_E'_to_E: assumes \"(u,v)\\<in>(g_E G')\\<^sup>*\" shows \"(fi u, fi v)\\<in>E\\<^sup>*\"", "lemma G'_invar: \"graph G'\"", "lemma G'_finite_reachable:\n    assumes \"finite ((g_E G)\\<^sup>* `` g_V0 G)\"\n    shows \"finite ((g_E G')\\<^sup>* `` g_V0 G')\"", "lemma V'_to_V: \"v \\<in> G'.V \\<Longrightarrow> fi v \\<in> V\"", "lemma ipath_sim1: \"ipath E r \\<Longrightarrow> ipath G'.E (f o r)\"", "lemma ipath_sim2: \"ipath G'.E r \\<Longrightarrow> ipath E (fi o r)\"", "lemma run_sim1: \"is_run r \\<Longrightarrow> G'.is_run (f o r)\"", "lemma run_sim2: \"G'.is_run r \\<Longrightarrow> is_run (fi o r)\""], "translations": [["", "lemma graph_restrict_simps[simp]:\n  \"g_V (graph_restrict G R) = g_V G\"\n  \"g_E (graph_restrict G R) = rel_restrict (g_E G) R\"\n  \"g_V0 (graph_restrict G R) = g_V0 G - R\"\n  \"graph_rec.more (graph_restrict G R) = graph_rec.more G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (g_V (graph_restrict G R) = g_V G &&&\n     g_E (graph_restrict G R) = rel_restrict (g_E G) R) &&&\n    g_V0 (graph_restrict G R) = g_V0 G - R &&&\n    graph_rec.more (graph_restrict G R) = graph_rec.more G", "unfolding graph_restrict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (g_V \\<lparr>g_V = g_V G, g_E = rel_restrict (g_E G) R,\n            g_V0 = g_V0 G - R, \\<dots> = graph_rec.more G\\<rparr> =\n     g_V G &&&\n     g_E \\<lparr>g_V = g_V G, g_E = rel_restrict (g_E G) R,\n            g_V0 = g_V0 G - R, \\<dots> = graph_rec.more G\\<rparr> =\n     rel_restrict (g_E G) R) &&&\n    g_V0\n     \\<lparr>g_V = g_V G, g_E = rel_restrict (g_E G) R, g_V0 = g_V0 G - R,\n        \\<dots> = graph_rec.more G\\<rparr> =\n    g_V0 G - R &&&\n    graph_rec.more\n     \\<lparr>g_V = g_V G, g_E = rel_restrict (g_E G) R, g_V0 = g_V0 G - R,\n        \\<dots> = graph_rec.more G\\<rparr> =\n    graph_rec.more G", "by auto"], ["", "lemma graph_restrict_trivial[simp]: \"graph_restrict G {} = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_restrict G {} = G", "by simp"], ["", "locale graph_defs =\n  fixes G :: \"('v, 'more) graph_rec_scheme\"\nbegin"], ["", "abbreviation \"V \\<equiv> g_V G\""], ["", "abbreviation \"E \\<equiv> g_E G\""], ["", "abbreviation \"V0 \\<equiv> g_V0 G\""], ["", "abbreviation \"reachable \\<equiv> E\\<^sup>* `` V0\""], ["", "abbreviation \"succ v \\<equiv> E `` {v}\""], ["", "lemma finite_V0: \"finite reachable \\<Longrightarrow> finite V0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite reachable \\<Longrightarrow> finite V0", "by (auto intro: finite_subset)"], ["", "definition is_run\n    \\<comment> \\<open>Infinite run, i.e., a rooted infinite path\\<close>\n    where \"is_run r \\<equiv> r 0 \\<in> V0 \\<and> ipath E r\""], ["", "lemma run_ipath: \"is_run r \\<Longrightarrow> ipath E r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_run r \\<Longrightarrow> ipath E r", "unfolding is_run_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. r 0 \\<in> V0 \\<and> ipath E r \\<Longrightarrow> ipath E r", "by auto"], ["", "lemma run_V0: \"is_run r \\<Longrightarrow> r 0 \\<in> V0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_run r \\<Longrightarrow> r 0 \\<in> V0", "unfolding is_run_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. r 0 \\<in> V0 \\<and> ipath E r \\<Longrightarrow> r 0 \\<in> V0", "by auto"], ["", "lemma run_reachable: \"is_run r \\<Longrightarrow> range r \\<subseteq> reachable\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_run r \\<Longrightarrow> range r \\<subseteq> reachable", "unfolding is_run_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. r 0 \\<in> V0 \\<and> ipath E r \\<Longrightarrow>\n    range r \\<subseteq> reachable", "using ipath_to_rtrancl"], ["proof (prove)\nusing this:\n  \\<lbrakk>ipath ?E ?r; ?i1.0 \\<le> ?i2.0\\<rbrakk>\n  \\<Longrightarrow> (?r ?i1.0, ?r ?i2.0) \\<in> ?E\\<^sup>*\n\ngoal (1 subgoal):\n 1. r 0 \\<in> V0 \\<and> ipath E r \\<Longrightarrow>\n    range r \\<subseteq> reachable", "by blast"], ["", "end"], ["", "locale graph =\n  graph_defs G\n  for G :: \"('v, 'more) graph_rec_scheme\"\n  +\n  assumes V0_ss: \"V0 \\<subseteq> V\"\n  assumes E_ss: \"E \\<subseteq> V \\<times> V\"\nbegin"], ["", "lemma reachable_V: \"reachable \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable \\<subseteq> V", "using V0_ss E_ss"], ["proof (prove)\nusing this:\n  V0 \\<subseteq> V\n  E \\<subseteq> V \\<times> V\n\ngoal (1 subgoal):\n 1. reachable \\<subseteq> V", "by (auto elim: rtrancl_induct)"], ["", "lemma finite_E: \"finite V \\<Longrightarrow> finite E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite V \\<Longrightarrow> finite E", "using finite_subset E_ss"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  E \\<subseteq> V \\<times> V\n\ngoal (1 subgoal):\n 1. finite V \\<Longrightarrow> finite E", "by auto"], ["", "end"], ["", "(* TODO: finite reachability is handled using loose assumptions, while finitely branching\n  graphs are captured using a locale. it may be advantageous to unify this. *)"], ["", "locale fb_graph =\n  graph G\n  for G :: \"('v, 'more) graph_rec_scheme\"\n  +\n  assumes finite_V0[simp, intro!]: \"finite V0\"\n  assumes finitely_branching[simp, intro]: \"v \\<in> reachable \\<Longrightarrow> finite (succ v)\"\nbegin"], ["", "lemma fb_graph_subset:\n    assumes \"g_V G' = V\"\n    assumes \"g_E G' \\<subseteq> E\"\n    assumes \"finite (g_V0 G')\"\n    assumes \"g_V0 G' \\<subseteq> reachable\"\n    shows \"fb_graph G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fb_graph G'", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. g_V0 G' \\<subseteq> g_V G'\n 2. g_E G' \\<subseteq> g_V G' \\<times> g_V G'\n 3. finite (g_V0 G')\n 4. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "show \"g_V0 G' \\<subseteq> g_V G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g_V0 G' \\<subseteq> g_V G'", "using reachable_V assms(1, 4)"], ["proof (prove)\nusing this:\n  reachable \\<subseteq> V\n  g_V G' = V\n  g_V0 G' \\<subseteq> reachable\n\ngoal (1 subgoal):\n 1. g_V0 G' \\<subseteq> g_V G'", "by simp"], ["proof (state)\nthis:\n  g_V0 G' \\<subseteq> g_V G'\n\ngoal (3 subgoals):\n 1. g_E G' \\<subseteq> g_V G' \\<times> g_V G'\n 2. finite (g_V0 G')\n 3. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "show \"g_E G' \\<subseteq> g_V G' \\<times> g_V G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g_E G' \\<subseteq> g_V G' \\<times> g_V G'", "using E_ss assms(1, 2)"], ["proof (prove)\nusing this:\n  E \\<subseteq> V \\<times> V\n  g_V G' = V\n  g_E G' \\<subseteq> E\n\ngoal (1 subgoal):\n 1. g_E G' \\<subseteq> g_V G' \\<times> g_V G'", "by simp"], ["proof (state)\nthis:\n  g_E G' \\<subseteq> g_V G' \\<times> g_V G'\n\ngoal (2 subgoals):\n 1. finite (g_V0 G')\n 2. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "show \"finite (g_V0 G')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (g_V0 G')", "using assms(3)"], ["proof (prove)\nusing this:\n  finite (g_V0 G')\n\ngoal (1 subgoal):\n 1. finite (g_V0 G')", "by this"], ["proof (state)\nthis:\n  finite (g_V0 G')\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "assume 1: \"v \\<in> (g_E G')\\<^sup>* `` g_V0 G'\""], ["proof (state)\nthis:\n  v \\<in> (g_E G')\\<^sup>* `` g_V0 G'\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "obtain u where 2: \"u \\<in> g_V0 G'\" \"(u, v) \\<in> (g_E G')\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> g_V0 G'; (u, v) \\<in> (g_E G')\\<^sup>*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  v \\<in> (g_E G')\\<^sup>* `` g_V0 G'\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> g_V0 G'; (u, v) \\<in> (g_E G')\\<^sup>*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by rule"], ["proof (state)\nthis:\n  u \\<in> g_V0 G'\n  (u, v) \\<in> (g_E G')\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "have 3: \"u \\<in> reachable\" \"(u, v) \\<in> E\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> reachable &&& (u, v) \\<in> E\\<^sup>*", "using rtrancl_mono assms(2, 4) 2"], ["proof (prove)\nusing this:\n  ?r \\<subseteq> ?s \\<Longrightarrow> ?r\\<^sup>* \\<subseteq> ?s\\<^sup>*\n  g_E G' \\<subseteq> E\n  g_V0 G' \\<subseteq> reachable\n  u \\<in> g_V0 G'\n  (u, v) \\<in> (g_E G')\\<^sup>*\n\ngoal (1 subgoal):\n 1. u \\<in> reachable &&& (u, v) \\<in> E\\<^sup>*", "by auto"], ["proof (state)\nthis:\n  u \\<in> reachable\n  (u, v) \\<in> E\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "have 4: \"v \\<in> reachable\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> reachable", "using rtrancl_image_advance_rtrancl 3"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> ?R\\<^sup>* `` ?Q0.0; (?q, ?x) \\<in> ?R\\<^sup>*\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?R\\<^sup>* `` ?Q0.0\n  u \\<in> reachable\n  (u, v) \\<in> E\\<^sup>*\n\ngoal (1 subgoal):\n 1. v \\<in> reachable", "by metis"], ["proof (state)\nthis:\n  v \\<in> reachable\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "have 5: \"finite (E `` {v})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (E `` {v})", "using 4"], ["proof (prove)\nusing this:\n  v \\<in> reachable\n\ngoal (1 subgoal):\n 1. finite (E `` {v})", "by rule"], ["proof (state)\nthis:\n  finite (E `` {v})\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "have 6: \"g_E G' `` {v} \\<subseteq> E `` {v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g_E G' `` {v} \\<subseteq> E `` {v}", "using assms(2)"], ["proof (prove)\nusing this:\n  g_E G' \\<subseteq> E\n\ngoal (1 subgoal):\n 1. g_E G' `` {v} \\<subseteq> E `` {v}", "by auto"], ["proof (state)\nthis:\n  g_E G' `` {v} \\<subseteq> E `` {v}\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> (g_E G')\\<^sup>* `` g_V0 G' \\<Longrightarrow>\n       finite (g_E G' `` {v})", "show \"finite (g_E G' `` {v})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (g_E G' `` {v})", "using finite_subset 5 6"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  finite (E `` {v})\n  g_E G' `` {v} \\<subseteq> E `` {v}\n\ngoal (1 subgoal):\n 1. finite (g_E G' `` {v})", "by auto"], ["proof (state)\nthis:\n  finite (g_E G' `` {v})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fb_graph_restrict: \"fb_graph (graph_restrict G R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fb_graph (graph_restrict G R)", "by (rule fb_graph_subset, auto simp: rel_restrict_sub)"], ["", "end"], ["", "lemma (in graph) fb_graphI_fr:\n  assumes \"finite reachable\"\n  shows \"fb_graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fb_graph G", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. finite V0\n 2. \\<And>v. v \\<in> reachable \\<Longrightarrow> finite (E `` {v})", "from assms"], ["proof (chain)\npicking this:\n  finite reachable", "show \"finite V0\""], ["proof (prove)\nusing this:\n  finite reachable\n\ngoal (1 subgoal):\n 1. finite V0", "by (rule finite_subset[rotated]) auto"], ["proof (state)\nthis:\n  finite V0\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> reachable \\<Longrightarrow> finite (E `` {v})", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> reachable \\<Longrightarrow> finite (E `` {v})", "assume \"v \\<in> reachable\""], ["proof (state)\nthis:\n  v \\<in> reachable\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> reachable \\<Longrightarrow> finite (E `` {v})", "hence \"succ v \\<subseteq> reachable\""], ["proof (prove)\nusing this:\n  v \\<in> reachable\n\ngoal (1 subgoal):\n 1. E `` {v} \\<subseteq> reachable", "by (metis Image_singleton_iff rtrancl_image_advance subsetI)"], ["proof (state)\nthis:\n  E `` {v} \\<subseteq> reachable\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> reachable \\<Longrightarrow> finite (E `` {v})", "thus \"finite (succ v)\""], ["proof (prove)\nusing this:\n  E `` {v} \\<subseteq> reachable\n\ngoal (1 subgoal):\n 1. finite (E `` {v})", "using assms"], ["proof (prove)\nusing this:\n  E `` {v} \\<subseteq> reachable\n  finite reachable\n\ngoal (1 subgoal):\n 1. finite (E `` {v})", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite (E `` {v})\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \"rename_E f E \\<equiv> (\\<lambda>(u,v). (f u, f v))`E\""], ["", "definition \"fr_rename_ext ecnv f G \\<equiv> \\<lparr> \n    g_V = f`(g_V G),\n    g_E = rename_E f (g_E G),   \n    g_V0 = (f`g_V0 G),\n    \\<dots> = ecnv G\n  \\<rparr>\""], ["", "locale g_rename_precond =\n  graph G\n  for G :: \"('u,'more) graph_rec_scheme\"\n  +\n  fixes f :: \"'u \\<Rightarrow> 'v\"\n  fixes ecnv :: \"('u, 'more) graph_rec_scheme \\<Rightarrow> 'more'\"\n  assumes INJ: \"inj_on f V\"\nbegin"], ["", "abbreviation \"G' \\<equiv> fr_rename_ext ecnv f G\""], ["", "lemma G'_fields:\n    \"g_V G' = f`V\"\n    \"g_V0 G' = f`V0\"\n    \"g_E G' = rename_E f E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g_V G' = f ` V &&& g_V0 G' = f ` V0 &&& g_E G' = rename_E f E", "unfolding fr_rename_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. g_V \\<lparr>g_V = f ` V, g_E = rename_E f E, g_V0 = f ` V0,\n           \\<dots> = ecnv G\\<rparr> =\n    f ` V &&&\n    g_V0\n     \\<lparr>g_V = f ` V, g_E = rename_E f E, g_V0 = f ` V0,\n        \\<dots> = ecnv G\\<rparr> =\n    f ` V0 &&&\n    g_E \\<lparr>g_V = f ` V, g_E = rename_E f E, g_V0 = f ` V0,\n           \\<dots> = ecnv G\\<rparr> =\n    rename_E f E", "by simp_all"], ["", "definition \"fi \\<equiv> the_inv_into V f\""], ["", "lemma \n    fi_f: \"x\\<in>V \\<Longrightarrow> fi (f x) = x\" and\n    f_fi: \"y\\<in>f`V \\<Longrightarrow> f (fi y) = y\" and\n    fi_f_eq: \"\\<lbrakk>f x = y; x\\<in>V\\<rbrakk> \\<Longrightarrow> fi y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> V \\<Longrightarrow> fi (f x) = x) &&&\n    (y \\<in> f ` V \\<Longrightarrow> f (fi y) = y) &&&\n    (\\<lbrakk>f x = y; x \\<in> V\\<rbrakk> \\<Longrightarrow> fi y = x)", "unfolding fi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> V \\<Longrightarrow> the_inv_into V f (f x) = x) &&&\n    (y \\<in> f ` V \\<Longrightarrow> f (the_inv_into V f y) = y) &&&\n    (\\<lbrakk>f x = y; x \\<in> V\\<rbrakk>\n     \\<Longrightarrow> the_inv_into V f y = x)", "by (auto \n      simp: the_inv_into_f_f f_the_inv_into_f the_inv_into_f_eq INJ)"], ["", "lemma E'_to_E: \"(u,v) \\<in> g_E G' \\<Longrightarrow> (fi u, fi v)\\<in>E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> g_E G' \\<Longrightarrow> (fi u, fi v) \\<in> E", "using E_ss"], ["proof (prove)\nusing this:\n  E \\<subseteq> V \\<times> V\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> g_E G' \\<Longrightarrow> (fi u, fi v) \\<in> E", "by (auto simp: fi_f G'_fields)"], ["", "lemma V0'_to_V0: \"v\\<in>g_V0 G' \\<Longrightarrow> fi v \\<in> V0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> g_V0 G' \\<Longrightarrow> fi v \\<in> V0", "using V0_ss"], ["proof (prove)\nusing this:\n  V0 \\<subseteq> V\n\ngoal (1 subgoal):\n 1. v \\<in> g_V0 G' \\<Longrightarrow> fi v \\<in> V0", "by (auto simp: fi_f G'_fields)"], ["", "lemma rtrancl_E'_sim:\n    assumes \"(f u,v')\\<in>(g_E G')\\<^sup>*\"\n    assumes \"u\\<in>V\"\n    shows \"\\<exists>v. v' = f v \\<and> v\\<in>V \\<and> (u,v)\\<in>E\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v. v' = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "using assms"], ["proof (prove)\nusing this:\n  (f u, v') \\<in> (g_E G')\\<^sup>*\n  u \\<in> V\n\ngoal (1 subgoal):\n 1. \\<exists>v. v' = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "proof (induction \"f u\" v' arbitrary: u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> V \\<Longrightarrow>\n       \\<exists>v. f u = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*\n 2. \\<And>b c u.\n       \\<lbrakk>(f u, b) \\<in> (g_E G')\\<^sup>*;\n        \\<And>ua.\n           \\<lbrakk>f u = f ua; ua \\<in> V\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v.\n                                b = f v \\<and>\n                                v \\<in> V \\<and> (ua, v) \\<in> E\\<^sup>*;\n        (b, c) \\<in> g_E G'; u \\<in> V\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            c = f v \\<and>\n                            v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "case (rtrancl_into_rtrancl v' w' u)"], ["proof (state)\nthis:\n  (f u, v') \\<in> (g_E G')\\<^sup>*\n  \\<lbrakk>f u = f ?u; ?u \\<in> V\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v.\n                       v' = f v \\<and>\n                       v \\<in> V \\<and> (?u, v) \\<in> E\\<^sup>*\n  (v', w') \\<in> g_E G'\n  u \\<in> V\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> V \\<Longrightarrow>\n       \\<exists>v. f u = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*\n 2. \\<And>b c u.\n       \\<lbrakk>(f u, b) \\<in> (g_E G')\\<^sup>*;\n        \\<And>ua.\n           \\<lbrakk>f u = f ua; ua \\<in> V\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v.\n                                b = f v \\<and>\n                                v \\<in> V \\<and> (ua, v) \\<in> E\\<^sup>*;\n        (b, c) \\<in> g_E G'; u \\<in> V\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            c = f v \\<and>\n                            v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "then"], ["proof (chain)\npicking this:\n  (f u, v') \\<in> (g_E G')\\<^sup>*\n  \\<lbrakk>f u = f ?u; ?u \\<in> V\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v.\n                       v' = f v \\<and>\n                       v \\<in> V \\<and> (?u, v) \\<in> E\\<^sup>*\n  (v', w') \\<in> g_E G'\n  u \\<in> V", "obtain v w where \"v' = f v\" \"w' = f w\" \"(v,w)\\<in>E\""], ["proof (prove)\nusing this:\n  (f u, v') \\<in> (g_E G')\\<^sup>*\n  \\<lbrakk>f u = f ?u; ?u \\<in> V\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v.\n                       v' = f v \\<and>\n                       v \\<in> V \\<and> (?u, v) \\<in> E\\<^sup>*\n  (v', w') \\<in> g_E G'\n  u \\<in> V\n\ngoal (1 subgoal):\n 1. (\\<And>v w.\n        \\<lbrakk>v' = f v; w' = f w; (v, w) \\<in> E\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: G'_fields)"], ["proof (state)\nthis:\n  v' = f v\n  w' = f w\n  (v, w) \\<in> E\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> V \\<Longrightarrow>\n       \\<exists>v. f u = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*\n 2. \\<And>b c u.\n       \\<lbrakk>(f u, b) \\<in> (g_E G')\\<^sup>*;\n        \\<And>ua.\n           \\<lbrakk>f u = f ua; ua \\<in> V\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v.\n                                b = f v \\<and>\n                                v \\<in> V \\<and> (ua, v) \\<in> E\\<^sup>*;\n        (b, c) \\<in> g_E G'; u \\<in> V\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            c = f v \\<and>\n                            v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "hence \"v\\<in>V\" \"w\\<in>V\""], ["proof (prove)\nusing this:\n  v' = f v\n  w' = f w\n  (v, w) \\<in> E\n\ngoal (1 subgoal):\n 1. v \\<in> V &&& w \\<in> V", "using E_ss"], ["proof (prove)\nusing this:\n  v' = f v\n  w' = f w\n  (v, w) \\<in> E\n  E \\<subseteq> V \\<times> V\n\ngoal (1 subgoal):\n 1. v \\<in> V &&& w \\<in> V", "by auto"], ["proof (state)\nthis:\n  v \\<in> V\n  w \\<in> V\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> V \\<Longrightarrow>\n       \\<exists>v. f u = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*\n 2. \\<And>b c u.\n       \\<lbrakk>(f u, b) \\<in> (g_E G')\\<^sup>*;\n        \\<And>ua.\n           \\<lbrakk>f u = f ua; ua \\<in> V\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v.\n                                b = f v \\<and>\n                                v \\<in> V \\<and> (ua, v) \\<in> E\\<^sup>*;\n        (b, c) \\<in> g_E G'; u \\<in> V\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            c = f v \\<and>\n                            v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "from rtrancl_into_rtrancl"], ["proof (chain)\npicking this:\n  (f u, v') \\<in> (g_E G')\\<^sup>*\n  \\<lbrakk>f u = f ?u; ?u \\<in> V\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v.\n                       v' = f v \\<and>\n                       v \\<in> V \\<and> (?u, v) \\<in> E\\<^sup>*\n  (v', w') \\<in> g_E G'\n  u \\<in> V", "obtain vv where \"v' = f vv\" \"vv\\<in>V\" \"(u,vv)\\<in>E\\<^sup>*\""], ["proof (prove)\nusing this:\n  (f u, v') \\<in> (g_E G')\\<^sup>*\n  \\<lbrakk>f u = f ?u; ?u \\<in> V\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v.\n                       v' = f v \\<and>\n                       v \\<in> V \\<and> (?u, v) \\<in> E\\<^sup>*\n  (v', w') \\<in> g_E G'\n  u \\<in> V\n\ngoal (1 subgoal):\n 1. (\\<And>vv.\n        \\<lbrakk>v' = f vv; vv \\<in> V; (u, vv) \\<in> E\\<^sup>*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v' = f vv\n  vv \\<in> V\n  (u, vv) \\<in> E\\<^sup>*\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> V \\<Longrightarrow>\n       \\<exists>v. f u = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*\n 2. \\<And>b c u.\n       \\<lbrakk>(f u, b) \\<in> (g_E G')\\<^sup>*;\n        \\<And>ua.\n           \\<lbrakk>f u = f ua; ua \\<in> V\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v.\n                                b = f v \\<and>\n                                v \\<in> V \\<and> (ua, v) \\<in> E\\<^sup>*;\n        (b, c) \\<in> g_E G'; u \\<in> V\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            c = f v \\<and>\n                            v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "from \\<open>v' = f v\\<close> \\<open>v\\<in>V\\<close> \\<open>v' = f vv\\<close> \\<open>vv\\<in>V\\<close>"], ["proof (chain)\npicking this:\n  v' = f v\n  v \\<in> V\n  v' = f vv\n  vv \\<in> V", "have [simp]: \"vv = v\""], ["proof (prove)\nusing this:\n  v' = f v\n  v \\<in> V\n  v' = f vv\n  vv \\<in> V\n\ngoal (1 subgoal):\n 1. vv = v", "using INJ"], ["proof (prove)\nusing this:\n  v' = f v\n  v \\<in> V\n  v' = f vv\n  vv \\<in> V\n  inj_on f V\n\ngoal (1 subgoal):\n 1. vv = v", "by (metis inj_on_contraD)"], ["proof (state)\nthis:\n  vv = v\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> V \\<Longrightarrow>\n       \\<exists>v. f u = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*\n 2. \\<And>b c u.\n       \\<lbrakk>(f u, b) \\<in> (g_E G')\\<^sup>*;\n        \\<And>ua.\n           \\<lbrakk>f u = f ua; ua \\<in> V\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v.\n                                b = f v \\<and>\n                                v \\<in> V \\<and> (ua, v) \\<in> E\\<^sup>*;\n        (b, c) \\<in> g_E G'; u \\<in> V\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            c = f v \\<and>\n                            v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "note \\<open>(u,vv)\\<in>E\\<^sup>*\\<close>[simplified]"], ["proof (state)\nthis:\n  (u, v) \\<in> E\\<^sup>*\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> V \\<Longrightarrow>\n       \\<exists>v. f u = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*\n 2. \\<And>b c u.\n       \\<lbrakk>(f u, b) \\<in> (g_E G')\\<^sup>*;\n        \\<And>ua.\n           \\<lbrakk>f u = f ua; ua \\<in> V\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v.\n                                b = f v \\<and>\n                                v \\<in> V \\<and> (ua, v) \\<in> E\\<^sup>*;\n        (b, c) \\<in> g_E G'; u \\<in> V\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            c = f v \\<and>\n                            v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "also"], ["proof (state)\nthis:\n  (u, v) \\<in> E\\<^sup>*\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> V \\<Longrightarrow>\n       \\<exists>v. f u = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*\n 2. \\<And>b c u.\n       \\<lbrakk>(f u, b) \\<in> (g_E G')\\<^sup>*;\n        \\<And>ua.\n           \\<lbrakk>f u = f ua; ua \\<in> V\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v.\n                                b = f v \\<and>\n                                v \\<in> V \\<and> (ua, v) \\<in> E\\<^sup>*;\n        (b, c) \\<in> g_E G'; u \\<in> V\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            c = f v \\<and>\n                            v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "note \\<open>(v,w)\\<in>E\\<close>"], ["proof (state)\nthis:\n  (v, w) \\<in> E\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       u \\<in> V \\<Longrightarrow>\n       \\<exists>v. f u = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*\n 2. \\<And>b c u.\n       \\<lbrakk>(f u, b) \\<in> (g_E G')\\<^sup>*;\n        \\<And>ua.\n           \\<lbrakk>f u = f ua; ua \\<in> V\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v.\n                                b = f v \\<and>\n                                v \\<in> V \\<and> (ua, v) \\<in> E\\<^sup>*;\n        (b, c) \\<in> g_E G'; u \\<in> V\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            c = f v \\<and>\n                            v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "finally"], ["proof (chain)\npicking this:\n  (u, w) \\<in> E\\<^sup>*", "show ?case"], ["proof (prove)\nusing this:\n  (u, w) \\<in> E\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<exists>v. w' = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "using \\<open>w' = f w\\<close> \\<open>w\\<in>V\\<close>"], ["proof (prove)\nusing this:\n  (u, w) \\<in> E\\<^sup>*\n  w' = f w\n  w \\<in> V\n\ngoal (1 subgoal):\n 1. \\<exists>v. w' = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "by blast"], ["proof (state)\nthis:\n  \\<exists>v. w' = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> V \\<Longrightarrow>\n       \\<exists>v. f u = f v \\<and> v \\<in> V \\<and> (u, v) \\<in> E\\<^sup>*", "qed auto"], ["", "lemma rtrancl_E'_to_E: assumes \"(u,v)\\<in>(g_E G')\\<^sup>*\" shows \"(fi u, fi v)\\<in>E\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fi u, fi v) \\<in> E\\<^sup>*", "using assms"], ["proof (prove)\nusing this:\n  (u, v) \\<in> (g_E G')\\<^sup>*\n\ngoal (1 subgoal):\n 1. (fi u, fi v) \\<in> E\\<^sup>*", "apply induction"], ["proof (prove)\ngoal (2 subgoals):\n 1. (fi u, fi u) \\<in> E\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(u, y) \\<in> (g_E G')\\<^sup>*; (y, z) \\<in> g_E G';\n        (fi u, fi y) \\<in> E\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (fi u, fi z) \\<in> E\\<^sup>*", "by (fastforce intro: E'_to_E rtrancl_into_rtrancl)+"], ["", "lemma G'_invar: \"graph G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G'", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. g_V0 G' \\<subseteq> g_V G'\n 2. g_E G' \\<subseteq> g_V G' \\<times> g_V G'", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. g_V0 G' \\<subseteq> g_V G'\n 2. g_E G' \\<subseteq> g_V G' \\<times> g_V G'", "show \"g_V0 G' \\<subseteq> g_V G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g_V0 G' \\<subseteq> g_V G'", "using V0_ss"], ["proof (prove)\nusing this:\n  V0 \\<subseteq> V\n\ngoal (1 subgoal):\n 1. g_V0 G' \\<subseteq> g_V G'", "by (auto simp: G'_fields) []"], ["proof (state)\nthis:\n  g_V0 G' \\<subseteq> g_V G'\n\ngoal (1 subgoal):\n 1. g_E G' \\<subseteq> g_V G' \\<times> g_V G'", "show \"g_E G' \\<subseteq> g_V G' \\<times> g_V G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g_E G' \\<subseteq> g_V G' \\<times> g_V G'", "using E_ss"], ["proof (prove)\nusing this:\n  E \\<subseteq> V \\<times> V\n\ngoal (1 subgoal):\n 1. g_E G' \\<subseteq> g_V G' \\<times> g_V G'", "by (auto simp: G'_fields) []"], ["proof (state)\nthis:\n  g_E G' \\<subseteq> g_V G' \\<times> g_V G'\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale G': graph G'"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G'", "using G'_invar"], ["proof (prove)\nusing this:\n  graph G'\n\ngoal (1 subgoal):\n 1. graph G'", "."], ["", "lemma G'_finite_reachable:\n    assumes \"finite ((g_E G)\\<^sup>* `` g_V0 G)\"\n    shows \"finite ((g_E G')\\<^sup>* `` g_V0 G')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite G'.reachable", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite G'.reachable", "have \"(g_E G')\\<^sup>* `` g_V0 G' \\<subseteq> f ` (E\\<^sup>*``V0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.reachable \\<subseteq> f ` reachable", "apply (clarsimp_all simp: G'_fields(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xb.\n       \\<lbrakk>(f xb, x) \\<in> G'.E\\<^sup>*; xb \\<in> V0\\<rbrakk>\n       \\<Longrightarrow> x \\<in> f ` reachable", "apply (drule rtrancl_E'_sim)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xb. xb \\<in> V0 \\<Longrightarrow> xb \\<in> V\n 2. \\<And>x xb.\n       \\<lbrakk>xb \\<in> V0;\n        \\<exists>v.\n           x = f v \\<and> v \\<in> V \\<and> (xb, v) \\<in> E\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> x \\<in> f ` reachable", "using V0_ss"], ["proof (prove)\nusing this:\n  V0 \\<subseteq> V\n\ngoal (2 subgoals):\n 1. \\<And>x xb. xb \\<in> V0 \\<Longrightarrow> xb \\<in> V\n 2. \\<And>x xb.\n       \\<lbrakk>xb \\<in> V0;\n        \\<exists>v.\n           x = f v \\<and> v \\<in> V \\<and> (xb, v) \\<in> E\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> x \\<in> f ` reachable", "apply auto []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xb.\n       \\<lbrakk>xb \\<in> V0;\n        \\<exists>v.\n           x = f v \\<and> v \\<in> V \\<and> (xb, v) \\<in> E\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> x \\<in> f ` reachable", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  G'.reachable \\<subseteq> f ` reachable\n\ngoal (1 subgoal):\n 1. finite G'.reachable", "thus ?thesis"], ["proof (prove)\nusing this:\n  G'.reachable \\<subseteq> f ` reachable\n\ngoal (1 subgoal):\n 1. finite G'.reachable", "using finite_subset assms"], ["proof (prove)\nusing this:\n  G'.reachable \\<subseteq> f ` reachable\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  finite reachable\n\ngoal (1 subgoal):\n 1. finite G'.reachable", "by blast"], ["proof (state)\nthis:\n  finite G'.reachable\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma V'_to_V: \"v \\<in> G'.V \\<Longrightarrow> fi v \\<in> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> G'.V \\<Longrightarrow> fi v \\<in> V", "by (auto simp: fi_f G'_fields)"], ["", "lemma ipath_sim1: \"ipath E r \\<Longrightarrow> ipath G'.E (f o r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipath E r \\<Longrightarrow> ipath G'.E (f \\<circ> r)", "unfolding ipath_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. (r i, r (Suc i)) \\<in> E \\<Longrightarrow>\n    \\<forall>i. ((f \\<circ> r) i, (f \\<circ> r) (Suc i)) \\<in> G'.E", "by (auto simp: G'_fields)"], ["", "lemma ipath_sim2: \"ipath G'.E r \\<Longrightarrow> ipath E (fi o r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipath G'.E r \\<Longrightarrow> ipath E (fi \\<circ> r)", "unfolding ipath_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. (r i, r (Suc i)) \\<in> G'.E \\<Longrightarrow>\n    \\<forall>i. ((fi \\<circ> r) i, (fi \\<circ> r) (Suc i)) \\<in> E", "apply (clarsimp simp: G'_fields)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<forall>i. (r i, r (Suc i)) \\<in> rename_E f E \\<Longrightarrow>\n       (fi (r i), fi (r (Suc i))) \\<in> E", "apply (drule_tac x=i in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (r i, r (Suc i)) \\<in> rename_E f E \\<Longrightarrow>\n       (fi (r i), fi (r (Suc i))) \\<in> E", "using E_ss"], ["proof (prove)\nusing this:\n  E \\<subseteq> V \\<times> V\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (r i, r (Suc i)) \\<in> rename_E f E \\<Longrightarrow>\n       (fi (r i), fi (r (Suc i))) \\<in> E", "by (auto simp: fi_f)"], ["", "lemma run_sim1: \"is_run r \\<Longrightarrow> G'.is_run (f o r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_run r \\<Longrightarrow> G'.is_run (f \\<circ> r)", "unfolding is_run_def G'.is_run_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. r 0 \\<in> V0 \\<and> ipath E r \\<Longrightarrow>\n    (f \\<circ> r) 0 \\<in> G'.V0 \\<and> ipath G'.E (f \\<circ> r)", "apply (intro conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. r 0 \\<in> V0 \\<and> ipath E r \\<Longrightarrow>\n    (f \\<circ> r) 0 \\<in> G'.V0\n 2. r 0 \\<in> V0 \\<and> ipath E r \\<Longrightarrow> ipath G'.E (f \\<circ> r)", "apply (auto simp: G'_fields) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. r 0 \\<in> V0 \\<and> ipath E r \\<Longrightarrow> ipath G'.E (f \\<circ> r)", "apply (auto simp: ipath_sim1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma run_sim2: \"G'.is_run r \\<Longrightarrow> is_run (fi o r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.is_run r \\<Longrightarrow> is_run (fi \\<circ> r)", "unfolding is_run_def G'.is_run_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. r 0 \\<in> G'.V0 \\<and> ipath G'.E r \\<Longrightarrow>\n    (fi \\<circ> r) 0 \\<in> V0 \\<and> ipath E (fi \\<circ> r)", "by (auto simp: ipath_sim2 V0'_to_V0)"], ["", "end"], ["", "end"]]}