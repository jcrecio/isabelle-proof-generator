{"file_name": "/home/qj213/afp-2021-10-22/thys/CAVA_Automata/Step_Conv.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CAVA_Automata", "problem_names": ["lemma rps_expand[simp]:\n    \"(a,b)\\<in>rel_of_pred p \\<longleftrightarrow> p a b\"\n    \"(a,b)\\<in>rel_of_succ s \\<longleftrightarrow> b \\<in> s a\"\n\n    \"pred_of_rel r a b \\<longleftrightarrow> (a,b)\\<in>r\"\n    \"pred_of_succ s a b \\<longleftrightarrow> b \\<in> s a\"\n\n    \"b\\<in>succ_of_rel r a \\<longleftrightarrow> (a,b)\\<in>r\"\n    \"b\\<in>succ_of_pred p a \\<longleftrightarrow> p a b\"", "lemma rps_conv[simp]:\n    \"rel_of_pred (pred_of_rel r) = r\"\n    \"rel_of_pred (pred_of_succ s) = rel_of_succ s\"\n\n    \"rel_of_succ (succ_of_rel r) = r\"\n    \"rel_of_succ (succ_of_pred p) = rel_of_pred p\"\n\n    \"pred_of_rel (rel_of_pred p) = p\"\n    \"pred_of_rel (rel_of_succ s) = pred_of_succ s\"\n\n    \"pred_of_succ (succ_of_pred p) = p\"\n    \"pred_of_succ (succ_of_rel r) = pred_of_rel r\"\n\n    \"succ_of_rel (rel_of_succ s) = s\"\n    \"succ_of_rel (rel_of_pred p) = succ_of_pred p\"\n\n    \"succ_of_pred (pred_of_succ s) = s\"\n    \"succ_of_pred (pred_of_rel r) = succ_of_rel r\"", "lemma m2r_expand[simp]:\n    \"(a,b)\\<in>m2r_rel r \\<longleftrightarrow> (\\<exists>a'. a=Some a' \\<and> (a',b)\\<in>r)\"\n    \"m2r_pred p a b \\<longleftrightarrow> (\\<exists>a'. a=Some a' \\<and> p a' b)\"\n    \"b\\<in>m2r_succ s a \\<longleftrightarrow> (\\<exists>a'. a=Some a' \\<and> b \\<in> s a')\"", "lemma m2r_conv[simp]:\n    \"m2r_rel (rel_of_succ s) = rel_of_succ (m2r_succ s)\"\n    \"m2r_rel (rel_of_pred p) = rel_of_pred (m2r_pred p)\"\n\n    \"m2r_pred (pred_of_succ s) = pred_of_succ (m2r_succ s)\"\n    \"m2r_pred (pred_of_rel r) = pred_of_rel (m2r_rel r)\"\n\n    \"m2r_succ (succ_of_pred p) = succ_of_pred (m2r_pred p)\"\n    \"m2r_succ (succ_of_rel r) = succ_of_rel (m2r_rel r)\"", "lemma x_of_enex_expand[simp]: \n    \"(s, s') \\<in> rel_of_enex (en, ex) \\<longleftrightarrow> (\\<exists> a \\<in> en s. s' = ex a s)\"\n    \"pred_of_enex (en,ex) s s' \\<longleftrightarrow> (\\<exists>a\\<in>en s. s'=ex a s)\"\n    \"s'\\<in>succ_of_enex (en,ex) s \\<longleftrightarrow> (\\<exists>a\\<in>en s. s'=ex a s)\"", "lemma x_of_enex_conv[simp]:\n    \"rel_of_pred (pred_of_enex enex) = rel_of_enex enex\"\n    \"rel_of_succ (succ_of_enex enex) = rel_of_enex enex\"\n    \"pred_of_rel (rel_of_enex enex) = pred_of_enex enex\"\n    \"pred_of_succ (succ_of_enex enex) = pred_of_enex enex\"\n    \"succ_of_rel (rel_of_enex enex) = succ_of_enex enex\"\n    \"succ_of_pred (pred_of_enex enex) = succ_of_enex enex\""], "translations": [["", "lemma rps_expand[simp]:\n    \"(a,b)\\<in>rel_of_pred p \\<longleftrightarrow> p a b\"\n    \"(a,b)\\<in>rel_of_succ s \\<longleftrightarrow> b \\<in> s a\"\n\n    \"pred_of_rel r a b \\<longleftrightarrow> (a,b)\\<in>r\"\n    \"pred_of_succ s a b \\<longleftrightarrow> b \\<in> s a\"\n\n    \"b\\<in>succ_of_rel r a \\<longleftrightarrow> (a,b)\\<in>r\"\n    \"b\\<in>succ_of_pred p a \\<longleftrightarrow> p a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((a, b) \\<in> rel_of_pred p) = p a b &&&\n     ((a, b) \\<in> rel_of_succ s) = (b \\<in> s a) &&&\n     pred_of_rel r a b = ((a, b) \\<in> r)) &&&\n    pred_of_succ s a b = (b \\<in> s a) &&&\n    (b \\<in> succ_of_rel r a) = ((a, b) \\<in> r) &&&\n    (b \\<in> succ_of_pred p a) = p a b", "unfolding rel_of_pred_def pred_of_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((a, b) \\<in> {(a, b). p a b}) = p a b &&&\n     ((a, b) \\<in> rel_of_succ s) = (b \\<in> s a) &&&\n     ((a, b) \\<in> r) = ((a, b) \\<in> r)) &&&\n    pred_of_succ s a b = (b \\<in> s a) &&&\n    (b \\<in> succ_of_rel r a) = ((a, b) \\<in> r) &&&\n    (b \\<in> succ_of_pred p a) = p a b", "unfolding rel_of_succ_def succ_of_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((a, b) \\<in> {(a, b). p a b}) = p a b &&&\n     ((a, b) \\<in> {(a, b). b \\<in> s a}) = (b \\<in> s a) &&&\n     ((a, b) \\<in> r) = ((a, b) \\<in> r)) &&&\n    pred_of_succ s a b = (b \\<in> s a) &&&\n    (b \\<in> {b. (a, b) \\<in> r}) = ((a, b) \\<in> r) &&&\n    (b \\<in> succ_of_pred p a) = p a b", "unfolding pred_of_succ_def succ_of_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((a, b) \\<in> {(a, b). p a b}) = p a b &&&\n     ((a, b) \\<in> {(a, b). b \\<in> s a}) = (b \\<in> s a) &&&\n     ((a, b) \\<in> r) = ((a, b) \\<in> r)) &&&\n    (b \\<in> s a) = (b \\<in> s a) &&&\n    (b \\<in> {b. (a, b) \\<in> r}) = ((a, b) \\<in> r) &&&\n    (b \\<in> Collect (p a)) = p a b", "by auto"], ["", "lemma rps_conv[simp]:\n    \"rel_of_pred (pred_of_rel r) = r\"\n    \"rel_of_pred (pred_of_succ s) = rel_of_succ s\"\n\n    \"rel_of_succ (succ_of_rel r) = r\"\n    \"rel_of_succ (succ_of_pred p) = rel_of_pred p\"\n\n    \"pred_of_rel (rel_of_pred p) = p\"\n    \"pred_of_rel (rel_of_succ s) = pred_of_succ s\"\n\n    \"pred_of_succ (succ_of_pred p) = p\"\n    \"pred_of_succ (succ_of_rel r) = pred_of_rel r\"\n\n    \"succ_of_rel (rel_of_succ s) = s\"\n    \"succ_of_rel (rel_of_pred p) = succ_of_pred p\"\n\n    \"succ_of_pred (pred_of_succ s) = s\"\n    \"succ_of_pred (pred_of_rel r) = succ_of_rel r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((rel_of_pred (pred_of_rel r) = r &&&\n      rel_of_pred (pred_of_succ s) = rel_of_succ s &&&\n      rel_of_succ (succ_of_rel r) = r) &&&\n     rel_of_succ (succ_of_pred p) = rel_of_pred p &&&\n     pred_of_rel (rel_of_pred p) = p &&&\n     pred_of_rel (rel_of_succ s) = pred_of_succ s) &&&\n    (pred_of_succ (succ_of_pred p) = p &&&\n     pred_of_succ (succ_of_rel r) = pred_of_rel r &&&\n     succ_of_rel (rel_of_succ s) = s) &&&\n    succ_of_rel (rel_of_pred p) = succ_of_pred p &&&\n    succ_of_pred (pred_of_succ s) = s &&&\n    succ_of_pred (pred_of_rel r) = succ_of_rel r", "unfolding rel_of_pred_def pred_of_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (({(a, b). (a, b) \\<in> r} = r &&&\n      {(a, b). pred_of_succ s a b} = rel_of_succ s &&&\n      rel_of_succ (succ_of_rel r) = r) &&&\n     rel_of_succ (succ_of_pred p) = {(a, b). p a b} &&&\n     (\\<lambda>a b. (a, b) \\<in> {(x, y). p x y}) = p &&&\n     (\\<lambda>a b. (a, b) \\<in> rel_of_succ s) = pred_of_succ s) &&&\n    (pred_of_succ (succ_of_pred p) = p &&&\n     pred_of_succ (succ_of_rel r) = (\\<lambda>a b. (a, b) \\<in> r) &&&\n     succ_of_rel (rel_of_succ s) = s) &&&\n    succ_of_rel {(a, b). p a b} = succ_of_pred p &&&\n    succ_of_pred (pred_of_succ s) = s &&&\n    succ_of_pred (\\<lambda>a b. (a, b) \\<in> r) = succ_of_rel r", "unfolding rel_of_succ_def succ_of_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (({(a, b). (a, b) \\<in> r} = r &&&\n      {(a, b). pred_of_succ s a b} = {(a, b). b \\<in> s a} &&&\n      {(a, b). b \\<in> {b. (a, b) \\<in> r}} = r) &&&\n     {(a, b). b \\<in> succ_of_pred p a} = {(a, b). p a b} &&&\n     (\\<lambda>a b. (a, b) \\<in> {(x, y). p x y}) = p &&&\n     (\\<lambda>a b. (a, b) \\<in> {(a, b). b \\<in> s a}) =\n     pred_of_succ s) &&&\n    (pred_of_succ (succ_of_pred p) = p &&&\n     pred_of_succ (\\<lambda>a. {b. (a, b) \\<in> r}) =\n     (\\<lambda>a b. (a, b) \\<in> r) &&&\n     (\\<lambda>a. {b. (a, b) \\<in> {(a, b). b \\<in> s a}}) = s) &&&\n    (\\<lambda>a. {b. (a, b) \\<in> {(x, y). p x y}}) = succ_of_pred p &&&\n    succ_of_pred (pred_of_succ s) = s &&&\n    succ_of_pred (\\<lambda>a b. (a, b) \\<in> r) =\n    (\\<lambda>a. {b. (a, b) \\<in> r})", "unfolding pred_of_succ_def succ_of_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (({(a, b). (a, b) \\<in> r} = r &&&\n      {(a, b). b \\<in> s a} = {(a, b). b \\<in> s a} &&&\n      {(a, b). b \\<in> {b. (a, b) \\<in> r}} = r) &&&\n     {(a, b). b \\<in> Collect (p a)} = {(a, b). p a b} &&&\n     (\\<lambda>a b. (a, b) \\<in> {(x, y). p x y}) = p &&&\n     (\\<lambda>a b. (a, b) \\<in> {(a, b). b \\<in> s a}) =\n     (\\<lambda>a b. b \\<in> s a)) &&&\n    ((\\<lambda>a b. b \\<in> Collect (p a)) = p &&&\n     (\\<lambda>a b. b \\<in> {b. (a, b) \\<in> r}) =\n     (\\<lambda>a b. (a, b) \\<in> r) &&&\n     (\\<lambda>a. {b. (a, b) \\<in> {(a, b). b \\<in> s a}}) = s) &&&\n    (\\<lambda>a. {b. (a, b) \\<in> {(x, y). p x y}}) =\n    (\\<lambda>a. {b. p a b}) &&&\n    (\\<lambda>a. {b. b \\<in> s a}) = s &&&\n    (\\<lambda>a. {b. (a, b) \\<in> r}) = (\\<lambda>a. {b. (a, b) \\<in> r})", "by auto"], ["", "(* Lifting transitions from option monad to option\\<times>option *)"], ["", "definition m2r_rel :: \"('a \\<times> 'a option) set \\<Rightarrow> 'a option rel\"\n    where \"m2r_rel r \\<equiv> {(Some a,b)|a b. (a,b)\\<in>r}\""], ["", "definition m2r_pred :: \"('a \\<Rightarrow> 'a option \\<Rightarrow> bool) \\<Rightarrow> 'a option \\<Rightarrow> 'a option \\<Rightarrow> bool\"\n    where \"m2r_pred p \\<equiv> \\<lambda>None \\<Rightarrow> \\<lambda>_. False | Some a \\<Rightarrow> p a\""], ["", "definition m2r_succ :: \"('a \\<Rightarrow> 'a option set) \\<Rightarrow> 'a option \\<Rightarrow> 'a option set\"\n    where \"m2r_succ s \\<equiv> \\<lambda>None \\<Rightarrow> {} | Some a \\<Rightarrow> s a\""], ["", "lemma m2r_expand[simp]:\n    \"(a,b)\\<in>m2r_rel r \\<longleftrightarrow> (\\<exists>a'. a=Some a' \\<and> (a',b)\\<in>r)\"\n    \"m2r_pred p a b \\<longleftrightarrow> (\\<exists>a'. a=Some a' \\<and> p a' b)\"\n    \"b\\<in>m2r_succ s a \\<longleftrightarrow> (\\<exists>a'. a=Some a' \\<and> b \\<in> s a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b) \\<in> m2r_rel r) =\n    (\\<exists>a'. a = Some a' \\<and> (a', b) \\<in> r) &&&\n    m2r_pred p a b = (\\<exists>a'. a = Some a' \\<and> p a' b) &&&\n    (b \\<in> m2r_succ s a) = (\\<exists>a'. a = Some a' \\<and> b \\<in> s a')", "unfolding m2r_rel_def m2r_succ_def m2r_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b) \\<in> {(Some a, b) |a b. (a, b) \\<in> r}) =\n    (\\<exists>a'. a = Some a' \\<and> (a', b) \\<in> r) &&&\n    (case a of None \\<Rightarrow> \\<lambda>_. False\n     | Some a \\<Rightarrow> p a)\n     b =\n    (\\<exists>a'. a = Some a' \\<and> p a' b) &&&\n    (b \\<in> (case a of None \\<Rightarrow> {} | Some a \\<Rightarrow> s a)) =\n    (\\<exists>a'. a = Some a' \\<and> b \\<in> s a')", "by (auto split: option.splits)"], ["", "lemma m2r_conv[simp]:\n    \"m2r_rel (rel_of_succ s) = rel_of_succ (m2r_succ s)\"\n    \"m2r_rel (rel_of_pred p) = rel_of_pred (m2r_pred p)\"\n\n    \"m2r_pred (pred_of_succ s) = pred_of_succ (m2r_succ s)\"\n    \"m2r_pred (pred_of_rel r) = pred_of_rel (m2r_rel r)\"\n\n    \"m2r_succ (succ_of_pred p) = succ_of_pred (m2r_pred p)\"\n    \"m2r_succ (succ_of_rel r) = succ_of_rel (m2r_rel r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m2r_rel (rel_of_succ s) = rel_of_succ (m2r_succ s) &&&\n     m2r_rel (rel_of_pred p) = rel_of_pred (m2r_pred p) &&&\n     m2r_pred (pred_of_succ s) = pred_of_succ (m2r_succ s)) &&&\n    m2r_pred (pred_of_rel r) = pred_of_rel (m2r_rel r) &&&\n    m2r_succ (succ_of_pred p) = succ_of_pred (m2r_pred p) &&&\n    m2r_succ (succ_of_rel r) = succ_of_rel (m2r_rel r)", "unfolding rel_of_pred_def pred_of_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (m2r_rel (rel_of_succ s) = rel_of_succ (m2r_succ s) &&&\n     m2r_rel {(a, b). p a b} = {(a, b). m2r_pred p a b} &&&\n     m2r_pred (pred_of_succ s) = pred_of_succ (m2r_succ s)) &&&\n    m2r_pred (\\<lambda>a b. (a, b) \\<in> r) =\n    (\\<lambda>a b. (a, b) \\<in> m2r_rel r) &&&\n    m2r_succ (succ_of_pred p) = succ_of_pred (m2r_pred p) &&&\n    m2r_succ (succ_of_rel r) = succ_of_rel (m2r_rel r)", "unfolding rel_of_succ_def succ_of_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (m2r_rel {(a, b). b \\<in> s a} = {(a, b). b \\<in> m2r_succ s a} &&&\n     m2r_rel {(a, b). p a b} = {(a, b). m2r_pred p a b} &&&\n     m2r_pred (pred_of_succ s) = pred_of_succ (m2r_succ s)) &&&\n    m2r_pred (\\<lambda>a b. (a, b) \\<in> r) =\n    (\\<lambda>a b. (a, b) \\<in> m2r_rel r) &&&\n    m2r_succ (succ_of_pred p) = succ_of_pred (m2r_pred p) &&&\n    m2r_succ (\\<lambda>a. {b. (a, b) \\<in> r}) =\n    (\\<lambda>a. {b. (a, b) \\<in> m2r_rel r})", "unfolding pred_of_succ_def succ_of_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (m2r_rel {(a, b). b \\<in> s a} = {(a, b). b \\<in> m2r_succ s a} &&&\n     m2r_rel {(a, b). p a b} = {(a, b). m2r_pred p a b} &&&\n     m2r_pred (\\<lambda>a b. b \\<in> s a) =\n     (\\<lambda>a b. b \\<in> m2r_succ s a)) &&&\n    m2r_pred (\\<lambda>a b. (a, b) \\<in> r) =\n    (\\<lambda>a b. (a, b) \\<in> m2r_rel r) &&&\n    m2r_succ (\\<lambda>a. {b. p a b}) =\n    (\\<lambda>a. {b. m2r_pred p a b}) &&&\n    m2r_succ (\\<lambda>a. {b. (a, b) \\<in> r}) =\n    (\\<lambda>a. {b. (a, b) \\<in> m2r_rel r})", "unfolding m2r_rel_def m2r_succ_def m2r_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({(Some a, b) |a b. (a, b) \\<in> {(a, b). b \\<in> s a}} =\n     {(a, b).\n      b \\<in> (case a of None \\<Rightarrow> {}\n               | Some a \\<Rightarrow> s a)} &&&\n     {(Some a, b) |a b. (a, b) \\<in> {(x, y). p x y}} =\n     {(a, b).\n      (case a of None \\<Rightarrow> \\<lambda>_. False\n       | Some a \\<Rightarrow> p a)\n       b} &&&\n     (\\<lambda>x.\n         case x of None \\<Rightarrow> \\<lambda>_. False\n         | Some a \\<Rightarrow> \\<lambda>b. b \\<in> s a) =\n     (\\<lambda>a b.\n         b \\<in> (case a of None \\<Rightarrow> {}\n                  | Some a \\<Rightarrow> s a))) &&&\n    (\\<lambda>x.\n        case x of None \\<Rightarrow> \\<lambda>_. False\n        | Some a \\<Rightarrow> \\<lambda>b. (a, b) \\<in> r) =\n    (\\<lambda>a b. (a, b) \\<in> {(Some a, b) |a b. (a, b) \\<in> r}) &&&\n    (\\<lambda>x.\n        case x of None \\<Rightarrow> {}\n        | Some a \\<Rightarrow> Collect (p a)) =\n    (\\<lambda>a.\n        {b. (case a of None \\<Rightarrow> \\<lambda>_. False\n             | Some a \\<Rightarrow> p a)\n             b}) &&&\n    (\\<lambda>x.\n        case x of None \\<Rightarrow> {}\n        | Some a \\<Rightarrow> {b. (a, b) \\<in> r}) =\n    (\\<lambda>a. {b. (a, b) \\<in> {(Some a, b) |a b. (a, b) \\<in> r}})", "by (auto split: option.splits)"], ["", "definition \"rel_of_enex enex \\<equiv> let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}\""], ["", "definition \"pred_of_enex enex \\<equiv> \\<lambda>s s'. let (en,ex) = enex in \\<exists>a\\<in>en s. s'=ex a s\""], ["", "definition \"succ_of_enex enex \\<equiv> \\<lambda>s. let (en,ex) = enex in {s'. \\<exists>a\\<in>en s. s'=ex a s}\""], ["", "lemma x_of_enex_expand[simp]: \n    \"(s, s') \\<in> rel_of_enex (en, ex) \\<longleftrightarrow> (\\<exists> a \\<in> en s. s' = ex a s)\"\n    \"pred_of_enex (en,ex) s s' \\<longleftrightarrow> (\\<exists>a\\<in>en s. s'=ex a s)\"\n    \"s'\\<in>succ_of_enex (en,ex) s \\<longleftrightarrow> (\\<exists>a\\<in>en s. s'=ex a s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((s, s') \\<in> rel_of_enex (en, ex)) =\n    (\\<exists>a\\<in>en s. s' = ex a s) &&&\n    pred_of_enex (en, ex) s s' = (\\<exists>a\\<in>en s. s' = ex a s) &&&\n    (s' \\<in> succ_of_enex (en, ex) s) = (\\<exists>a\\<in>en s. s' = ex a s)", "unfolding rel_of_enex_def pred_of_enex_def succ_of_enex_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((s, s')\n     \\<in> (let (en, ex) = (en, ex) in {(s, ex a s) |s a. a \\<in> en s})) =\n    (\\<exists>a\\<in>en s. s' = ex a s) &&&\n    (let (en, ex) = (en, ex) in \\<exists>a\\<in>en s. s' = ex a s) =\n    (\\<exists>a\\<in>en s. s' = ex a s) &&&\n    (s' \\<in> (let (en, ex) = (en, ex)\n               in {s'. \\<exists>a\\<in>en s. s' = ex a s})) =\n    (\\<exists>a\\<in>en s. s' = ex a s)", "by auto"], ["", "lemma x_of_enex_conv[simp]:\n    \"rel_of_pred (pred_of_enex enex) = rel_of_enex enex\"\n    \"rel_of_succ (succ_of_enex enex) = rel_of_enex enex\"\n    \"pred_of_rel (rel_of_enex enex) = pred_of_enex enex\"\n    \"pred_of_succ (succ_of_enex enex) = pred_of_enex enex\"\n    \"succ_of_rel (rel_of_enex enex) = succ_of_enex enex\"\n    \"succ_of_pred (pred_of_enex enex) = succ_of_enex enex\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_of_pred (pred_of_enex enex) = rel_of_enex enex &&&\n     rel_of_succ (succ_of_enex enex) = rel_of_enex enex &&&\n     pred_of_rel (rel_of_enex enex) = pred_of_enex enex) &&&\n    pred_of_succ (succ_of_enex enex) = pred_of_enex enex &&&\n    succ_of_rel (rel_of_enex enex) = succ_of_enex enex &&&\n    succ_of_pred (pred_of_enex enex) = succ_of_enex enex", "unfolding rel_of_enex_def pred_of_enex_def succ_of_enex_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_of_pred\n      (\\<lambda>s s'.\n          let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s) =\n     (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) &&&\n     rel_of_succ\n      (\\<lambda>s.\n          let (en, ex) = enex in {s'. \\<exists>a\\<in>en s. s' = ex a s}) =\n     (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) &&&\n     pred_of_rel (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) =\n     (\\<lambda>s s'.\n         let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s)) &&&\n    pred_of_succ\n     (\\<lambda>s.\n         let (en, ex) = enex in {s'. \\<exists>a\\<in>en s. s' = ex a s}) =\n    (\\<lambda>s s'.\n        let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s) &&&\n    succ_of_rel (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) =\n    (\\<lambda>s.\n        let (en, ex) = enex in {s'. \\<exists>a\\<in>en s. s' = ex a s}) &&&\n    succ_of_pred\n     (\\<lambda>s s'.\n         let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s) =\n    (\\<lambda>s.\n        let (en, ex) = enex in {s'. \\<exists>a\\<in>en s. s' = ex a s})", "unfolding rel_of_pred_def rel_of_succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({(a, b). let (en, ex) = enex in \\<exists>aa\\<in>en a. b = ex aa a} =\n     (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) &&&\n     {(a, b).\n      b \\<in> (let (en, ex) = enex\n               in {s'. \\<exists>aa\\<in>en a. s' = ex aa a})} =\n     (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) &&&\n     pred_of_rel (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) =\n     (\\<lambda>s s'.\n         let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s)) &&&\n    pred_of_succ\n     (\\<lambda>s.\n         let (en, ex) = enex in {s'. \\<exists>a\\<in>en s. s' = ex a s}) =\n    (\\<lambda>s s'.\n        let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s) &&&\n    succ_of_rel (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) =\n    (\\<lambda>s.\n        let (en, ex) = enex in {s'. \\<exists>a\\<in>en s. s' = ex a s}) &&&\n    succ_of_pred\n     (\\<lambda>s s'.\n         let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s) =\n    (\\<lambda>s.\n        let (en, ex) = enex in {s'. \\<exists>a\\<in>en s. s' = ex a s})", "unfolding pred_of_rel_def pred_of_succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({(a, b). let (en, ex) = enex in \\<exists>aa\\<in>en a. b = ex aa a} =\n     (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) &&&\n     {(a, b).\n      b \\<in> (let (en, ex) = enex\n               in {s'. \\<exists>aa\\<in>en a. s' = ex aa a})} =\n     (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) &&&\n     (\\<lambda>a b.\n         (a, b)\n         \\<in> (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s})) =\n     (\\<lambda>s s'.\n         let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s)) &&&\n    (\\<lambda>a b.\n        b \\<in> (let (en, ex) = enex\n                 in {s'. \\<exists>aa\\<in>en a. s' = ex aa a})) =\n    (\\<lambda>s s'.\n        let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s) &&&\n    succ_of_rel (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) =\n    (\\<lambda>s.\n        let (en, ex) = enex in {s'. \\<exists>a\\<in>en s. s' = ex a s}) &&&\n    succ_of_pred\n     (\\<lambda>s s'.\n         let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s) =\n    (\\<lambda>s.\n        let (en, ex) = enex in {s'. \\<exists>a\\<in>en s. s' = ex a s})", "unfolding succ_of_rel_def succ_of_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({(a, b). let (en, ex) = enex in \\<exists>aa\\<in>en a. b = ex aa a} =\n     (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) &&&\n     {(a, b).\n      b \\<in> (let (en, ex) = enex\n               in {s'. \\<exists>aa\\<in>en a. s' = ex aa a})} =\n     (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s}) &&&\n     (\\<lambda>a b.\n         (a, b)\n         \\<in> (let (en, ex) = enex in {(s, ex a s) |s a. a \\<in> en s})) =\n     (\\<lambda>s s'.\n         let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s)) &&&\n    (\\<lambda>a b.\n        b \\<in> (let (en, ex) = enex\n                 in {s'. \\<exists>aa\\<in>en a. s' = ex aa a})) =\n    (\\<lambda>s s'.\n        let (en, ex) = enex in \\<exists>a\\<in>en s. s' = ex a s) &&&\n    (\\<lambda>a.\n        {b. (a, b)\n            \\<in> (let (en, ex) = enex\n                   in {(s, ex a s) |s a. a \\<in> en s})}) =\n    (\\<lambda>s.\n        let (en, ex) = enex in {s'. \\<exists>a\\<in>en s. s' = ex a s}) &&&\n    (\\<lambda>a.\n        {b. let (en, ex) = enex in \\<exists>aa\\<in>en a. b = ex aa a}) =\n    (\\<lambda>s.\n        let (en, ex) = enex in {s'. \\<exists>a\\<in>en s. s' = ex a s})", "by auto"], ["", "end"]]}