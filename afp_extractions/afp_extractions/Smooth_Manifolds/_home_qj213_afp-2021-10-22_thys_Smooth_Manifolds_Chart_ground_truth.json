{"file_name": "/home/qj213/afp-2021-10-22/thys/Smooth_Manifolds/Chart.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Smooth_Manifolds", "problem_names": ["lemma open_domain[intro, simp]: \"open (domain c)\"\n  and open_codomain[intro, simp]: \"open (codomain c)\"\n  and chart_homeomorphism: \"homeomorphism (domain c) (codomain c) c (inv_chart c)\"", "lemma at_within_domain: \"at x within domain c = at x\" if \"x \\<in> domain c\"", "lemma at_within_codomain: \"at x within codomain c = at x\" if \"x \\<in> codomain c\"", "lemma\n  chart_in_codomain[intro, simp]: \"x \\<in> domain c \\<Longrightarrow> c x \\<in> codomain c\"\n  and inv_chart_inverse[simp]: \"x \\<in> domain c \\<Longrightarrow> inv_chart c (c x) = x\"\n  and inv_chart_in_domain[intro, simp]:\"y \\<in> codomain c \\<Longrightarrow> inv_chart c y \\<in> domain c\"\n  and chart_inverse_inv_chart[simp]: \"y \\<in> codomain c \\<Longrightarrow> c (inv_chart c y) = y\"\n  and image_domain_eq: \"c ` (domain c) = codomain c\"\n  and inv_image_codomain_eq[simp]: \"inv_chart c ` (codomain c) = domain c\"\n  and continuous_on_domain: \"continuous_on (domain c) c\"\n  and continuous_on_codomain: \"continuous_on (codomain c) (inv_chart c)\"", "lemma chart_eqI: \"c = d\"\n  if \"domain c = domain d\"\n    \"codomain c = codomain d\"\n    \"\\<And>x. c x = d x\"\n    \"\\<And>x. inv_chart c x = inv_chart  d x\"", "lemmas continuous_on_chart[continuous_intros] =\n  continuous_on_compose2[OF continuous_on_domain]\n  continuous_on_compose2[OF continuous_on_codomain]", "lemma continuous_apply_chart: \"continuous (at x within X) c\" if \"x \\<in> domain c\"", "lemma continuous_inv_chart: \"continuous (at x within X) (inv_chart c)\" if \"x \\<in> codomain c\"", "lemmas apply_chart_tendsto[tendsto_intros] = isCont_tendsto_compose[OF continuous_apply_chart, rotated]", "lemmas inv_chart_tendsto[tendsto_intros] = isCont_tendsto_compose[OF continuous_inv_chart, rotated]", "lemma continuous_within_compose2':\n  \"continuous (at (f x) within t) g \\<Longrightarrow> f ` s \\<subseteq> t \\<Longrightarrow>\n    continuous (at x within s) f \\<Longrightarrow>\n    continuous (at x within s) (\\<lambda>x. g (f x))\"", "lemmas continuous_chart[continuous_intros] =\n  continuous_within_compose2'[OF continuous_apply_chart]\n  continuous_within_compose2'[OF continuous_inv_chart]", "lemma continuous_on_chart_inv:\n  assumes \"continuous_on s (apply_chart c o f)\"\n    \"f ` s \\<subseteq> domain c\"\n  shows \"continuous_on s f\"", "lemma continuous_on_chart_inv':\n  assumes \"continuous_on (apply_chart c ` s) (f o inv_chart c)\"\n    \"s \\<subseteq> domain c\"\n  shows \"continuous_on s f\"", "lemma inj_on_apply_chart: \"inj_on (apply_chart f) (domain f)\"", "lemma apply_chart_Int: \"f ` (X \\<inter> Y) = f ` X \\<inter> f ` Y\" if \"X \\<subseteq> domain f\" \"Y \\<subseteq> domain f\"", "lemma chart_image_eq_vimage: \"c ` X = inv_chart c -` X \\<inter> codomain c\"\n  if \"X \\<subseteq> domain c\"", "lemma open_chart_image[simp, intro]: \"open (c ` X)\"\n  if \"open X\" \"X \\<subseteq> domain c\"", "lemma open_inv_chart_image[simp, intro]: \"open (inv_chart c ` X)\"\n  if \"open X\" \"X \\<subseteq> codomain c\"", "lemma homeomorphism_UNIV_imp_open_map:\n  \"homeomorphism UNIV UNIV p p' \\<Longrightarrow> open f' \\<Longrightarrow> open (p ` f')\"", "lemma homeomorphism_restrict:\n  \"homeomorphism (a \\<inter> s) (b \\<inter> f' -` s) f f'\" if \"homeomorphism a b f f'\"", "lemma restrict_chart_restrict_chart:\n  \"restrict_chart X (restrict_chart Y c) = restrict_chart (X \\<inter> Y) c\"\n  if \"open X\" \"open Y\"", "lemma domain_restrict_chart[simp]: \"open S \\<Longrightarrow> domain (restrict_chart S c) = domain c \\<inter> S\"\n  and domain_restrict_chart_if: \"domain (restrict_chart S c) = (if open S then domain c \\<inter> S else {})\"\n  and codomain_restrict_chart[simp]: \"open S \\<Longrightarrow> codomain (restrict_chart S c) = codomain c \\<inter> inv_chart c -` S\"\n  and codomain_restrict_chart_if: \"codomain (restrict_chart S c) = (if open S then codomain c \\<inter> inv_chart c -` S else {})\"\n  and apply_chart_restrict_chart[simp]: \"apply_chart (restrict_chart S c) = apply_chart c\"\n  and inv_chart_restrict_chart[simp]: \"inv_chart (restrict_chart S c) = inv_chart c\"", "lemma compose_chart_apply_chart[simp]: \"apply_chart (compose_chart p p' c) = p o apply_chart c\"\n  and compose_chart_inv_chart[simp]: \"inv_chart (compose_chart p p' c) = inv_chart c o p'\"\n  and domain_compose_chart[simp]: \"domain (compose_chart p p' c) = domain c\"\n  and codomain_compose_chart[simp]: \"codomain (compose_chart p p' c) = p ` codomain c\"\n  if \"homeomorphism UNIV UNIV p p'\""], "translations": [["", "lemma open_domain[intro, simp]: \"open (domain c)\"\n  and open_codomain[intro, simp]: \"open (codomain c)\"\n  and chart_homeomorphism: \"homeomorphism (domain c) (codomain c) c (inv_chart c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open (domain c) &&&\n    open (codomain c) &&&\n    homeomorphism (domain c) (codomain c) (apply_chart c) (inv_chart c)", "by (transfer, auto)+"], ["", "lemma at_within_domain: \"at x within domain c = at x\" if \"x \\<in> domain c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. at x within domain c = at x", "by (rule at_within_open[OF that open_domain])"], ["", "lemma at_within_codomain: \"at x within codomain c = at x\" if \"x \\<in> codomain c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. at x within codomain c = at x", "by (rule at_within_open[OF that open_codomain])"], ["", "lemma\n  chart_in_codomain[intro, simp]: \"x \\<in> domain c \\<Longrightarrow> c x \\<in> codomain c\"\n  and inv_chart_inverse[simp]: \"x \\<in> domain c \\<Longrightarrow> inv_chart c (c x) = x\"\n  and inv_chart_in_domain[intro, simp]:\"y \\<in> codomain c \\<Longrightarrow> inv_chart c y \\<in> domain c\"\n  and chart_inverse_inv_chart[simp]: \"y \\<in> codomain c \\<Longrightarrow> c (inv_chart c y) = y\"\n  and image_domain_eq: \"c ` (domain c) = codomain c\"\n  and inv_image_codomain_eq[simp]: \"inv_chart c ` (codomain c) = domain c\"\n  and continuous_on_domain: \"continuous_on (domain c) c\"\n  and continuous_on_codomain: \"continuous_on (codomain c) (inv_chart c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((x \\<in> domain c \\<Longrightarrow>\n       apply_chart c x \\<in> codomain c) &&&\n      (x \\<in> domain c \\<Longrightarrow>\n       inv_chart c (apply_chart c x) = x)) &&&\n     (y \\<in> codomain c \\<Longrightarrow> inv_chart c y \\<in> domain c) &&&\n     (y \\<in> codomain c \\<Longrightarrow>\n      apply_chart c (inv_chart c y) = y)) &&&\n    (apply_chart c ` domain c = codomain c &&&\n     inv_chart c ` codomain c = domain c) &&&\n    continuous_on (domain c) (apply_chart c) &&&\n    continuous_on (codomain c) (inv_chart c)", "using chart_homeomorphism[of c]"], ["proof (prove)\nusing this:\n  homeomorphism (domain c) (codomain c) (apply_chart c) (inv_chart c)\n\ngoal (1 subgoal):\n 1. (((x \\<in> domain c \\<Longrightarrow>\n       apply_chart c x \\<in> codomain c) &&&\n      (x \\<in> domain c \\<Longrightarrow>\n       inv_chart c (apply_chart c x) = x)) &&&\n     (y \\<in> codomain c \\<Longrightarrow> inv_chart c y \\<in> domain c) &&&\n     (y \\<in> codomain c \\<Longrightarrow>\n      apply_chart c (inv_chart c y) = y)) &&&\n    (apply_chart c ` domain c = codomain c &&&\n     inv_chart c ` codomain c = domain c) &&&\n    continuous_on (domain c) (apply_chart c) &&&\n    continuous_on (codomain c) (inv_chart c)", "by (auto simp: homeomorphism_def)"], ["", "lemma chart_eqI: \"c = d\"\n  if \"domain c = domain d\"\n    \"codomain c = codomain d\"\n    \"\\<And>x. c x = d x\"\n    \"\\<And>x. inv_chart c x = inv_chart  d x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c = d", "using that"], ["proof (prove)\nusing this:\n  domain c = domain d\n  codomain c = codomain d\n  apply_chart c ?x = apply_chart d ?x\n  inv_chart c ?x = inv_chart d ?x\n\ngoal (1 subgoal):\n 1. c = d", "by transfer auto"], ["", "lemmas continuous_on_chart[continuous_intros] =\n  continuous_on_compose2[OF continuous_on_domain]\n  continuous_on_compose2[OF continuous_on_codomain]"], ["", "lemma continuous_apply_chart: \"continuous (at x within X) c\" if \"x \\<in> domain c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous (at x within X) (apply_chart c)", "apply (rule continuous_at_imp_continuous_within)"], ["proof (prove)\ngoal (1 subgoal):\n 1. isCont (apply_chart c) x", "using continuous_on_domain[of c] that at_within_domain[OF that]"], ["proof (prove)\nusing this:\n  continuous_on (domain c) (apply_chart c)\n  x \\<in> domain c\n  at x within domain c = at x\n\ngoal (1 subgoal):\n 1. isCont (apply_chart c) x", "by (auto simp: continuous_on_eq_continuous_within)"], ["", "lemma continuous_inv_chart: \"continuous (at x within X) (inv_chart c)\" if \"x \\<in> codomain c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous (at x within X) (inv_chart c)", "apply (rule continuous_at_imp_continuous_within)"], ["proof (prove)\ngoal (1 subgoal):\n 1. isCont (inv_chart c) x", "using continuous_on_codomain[of c] that at_within_codomain[OF that]"], ["proof (prove)\nusing this:\n  continuous_on (codomain c) (inv_chart c)\n  x \\<in> codomain c\n  at x within codomain c = at x\n\ngoal (1 subgoal):\n 1. isCont (inv_chart c) x", "by (auto simp: continuous_on_eq_continuous_within)"], ["", "lemmas apply_chart_tendsto[tendsto_intros] = isCont_tendsto_compose[OF continuous_apply_chart, rotated]"], ["", "lemmas inv_chart_tendsto[tendsto_intros] = isCont_tendsto_compose[OF continuous_inv_chart, rotated]"], ["", "lemma continuous_within_compose2':\n  \"continuous (at (f x) within t) g \\<Longrightarrow> f ` s \\<subseteq> t \\<Longrightarrow>\n    continuous (at x within s) f \\<Longrightarrow>\n    continuous (at x within s) (\\<lambda>x. g (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>continuous (at (f x) within t) g; f ` s \\<subseteq> t;\n     continuous (at x within s) f\\<rbrakk>\n    \\<Longrightarrow> continuous (at x within s) (\\<lambda>x. g (f x))", "by (simp add: continuous_within_compose2 continuous_within_subset)"], ["", "lemmas continuous_chart[continuous_intros] =\n  continuous_within_compose2'[OF continuous_apply_chart]\n  continuous_within_compose2'[OF continuous_inv_chart]"], ["", "lemma continuous_on_chart_inv:\n  assumes \"continuous_on s (apply_chart c o f)\"\n    \"f ` s \\<subseteq> domain c\"\n  shows \"continuous_on s f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on s f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on s f", "have \"continuous_on s (inv_chart c o apply_chart c o f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on s (inv_chart c \\<circ> apply_chart c \\<circ> f)", "using assms"], ["proof (prove)\nusing this:\n  continuous_on s (apply_chart c \\<circ> f)\n  f ` s \\<subseteq> domain c\n\ngoal (1 subgoal):\n 1. continuous_on s (inv_chart c \\<circ> apply_chart c \\<circ> f)", "by (auto intro!: continuous_on_chart(2))"], ["proof (state)\nthis:\n  continuous_on s (inv_chart c \\<circ> apply_chart c \\<circ> f)\n\ngoal (1 subgoal):\n 1. continuous_on s f", "moreover"], ["proof (state)\nthis:\n  continuous_on s (inv_chart c \\<circ> apply_chart c \\<circ> f)\n\ngoal (1 subgoal):\n 1. continuous_on s f", "have \"\\<And>x. x \\<in> s \\<Longrightarrow> (inv_chart c o apply_chart c o f) x = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> s \\<Longrightarrow>\n       (inv_chart c \\<circ> apply_chart c \\<circ> f) x = f x", "using assms"], ["proof (prove)\nusing this:\n  continuous_on s (apply_chart c \\<circ> f)\n  f ` s \\<subseteq> domain c\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> s \\<Longrightarrow>\n       (inv_chart c \\<circ> apply_chart c \\<circ> f) x = f x", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> s \\<Longrightarrow>\n  (inv_chart c \\<circ> apply_chart c \\<circ> f) ?x = f ?x\n\ngoal (1 subgoal):\n 1. continuous_on s f", "ultimately"], ["proof (chain)\npicking this:\n  continuous_on s (inv_chart c \\<circ> apply_chart c \\<circ> f)\n  ?x \\<in> s \\<Longrightarrow>\n  (inv_chart c \\<circ> apply_chart c \\<circ> f) ?x = f ?x", "show ?thesis"], ["proof (prove)\nusing this:\n  continuous_on s (inv_chart c \\<circ> apply_chart c \\<circ> f)\n  ?x \\<in> s \\<Longrightarrow>\n  (inv_chart c \\<circ> apply_chart c \\<circ> f) ?x = f ?x\n\ngoal (1 subgoal):\n 1. continuous_on s f", "by auto"], ["proof (state)\nthis:\n  continuous_on s f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma continuous_on_chart_inv':\n  assumes \"continuous_on (apply_chart c ` s) (f o inv_chart c)\"\n    \"s \\<subseteq> domain c\"\n  shows \"continuous_on s f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on s f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on s f", "have \"continuous_on s (apply_chart c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on s (apply_chart c)", "using assms continuous_on_domain continuous_on_subset"], ["proof (prove)\nusing this:\n  continuous_on (apply_chart c ` s) (f \\<circ> inv_chart c)\n  s \\<subseteq> domain c\n  continuous_on (domain ?c) (apply_chart ?c)\n  \\<lbrakk>continuous_on ?s ?f; ?t \\<subseteq> ?s\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?t ?f\n\ngoal (1 subgoal):\n 1. continuous_on s (apply_chart c)", "by blast"], ["proof (state)\nthis:\n  continuous_on s (apply_chart c)\n\ngoal (1 subgoal):\n 1. continuous_on s f", "then"], ["proof (chain)\npicking this:\n  continuous_on s (apply_chart c)", "have \"continuous_on s (f o inv_chart c o apply_chart c)\""], ["proof (prove)\nusing this:\n  continuous_on s (apply_chart c)\n\ngoal (1 subgoal):\n 1. continuous_on s (f \\<circ> inv_chart c \\<circ> apply_chart c)", "apply (rule continuous_on_compose)"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (apply_chart c ` s) (f \\<circ> inv_chart c)", "using assms"], ["proof (prove)\nusing this:\n  continuous_on (apply_chart c ` s) (f \\<circ> inv_chart c)\n  s \\<subseteq> domain c\n\ngoal (1 subgoal):\n 1. continuous_on (apply_chart c ` s) (f \\<circ> inv_chart c)", "by auto"], ["proof (state)\nthis:\n  continuous_on s (f \\<circ> inv_chart c \\<circ> apply_chart c)\n\ngoal (1 subgoal):\n 1. continuous_on s f", "moreover"], ["proof (state)\nthis:\n  continuous_on s (f \\<circ> inv_chart c \\<circ> apply_chart c)\n\ngoal (1 subgoal):\n 1. continuous_on s f", "have \"(f o inv_chart c o apply_chart c) x = f x\" if \"x \\<in> s\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> inv_chart c \\<circ> apply_chart c) x = f x", "using assms that"], ["proof (prove)\nusing this:\n  continuous_on (apply_chart c ` s) (f \\<circ> inv_chart c)\n  s \\<subseteq> domain c\n  x \\<in> s\n\ngoal (1 subgoal):\n 1. (f \\<circ> inv_chart c \\<circ> apply_chart c) x = f x", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> s \\<Longrightarrow>\n  (f \\<circ> inv_chart c \\<circ> apply_chart c) ?x = f ?x\n\ngoal (1 subgoal):\n 1. continuous_on s f", "ultimately"], ["proof (chain)\npicking this:\n  continuous_on s (f \\<circ> inv_chart c \\<circ> apply_chart c)\n  ?x \\<in> s \\<Longrightarrow>\n  (f \\<circ> inv_chart c \\<circ> apply_chart c) ?x = f ?x", "show ?thesis"], ["proof (prove)\nusing this:\n  continuous_on s (f \\<circ> inv_chart c \\<circ> apply_chart c)\n  ?x \\<in> s \\<Longrightarrow>\n  (f \\<circ> inv_chart c \\<circ> apply_chart c) ?x = f ?x\n\ngoal (1 subgoal):\n 1. continuous_on s f", "by auto"], ["proof (state)\nthis:\n  continuous_on s f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inj_on_apply_chart: \"inj_on (apply_chart f) (domain f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (apply_chart f) (domain f)", "by (auto simp: intro!: inj_on_inverseI[where g=\"inv_chart f\"])"], ["", "lemma apply_chart_Int: \"f ` (X \\<inter> Y) = f ` X \\<inter> f ` Y\" if \"X \\<subseteq> domain f\" \"Y \\<subseteq> domain f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_chart f ` (X \\<inter> Y) =\n    apply_chart f ` X \\<inter> apply_chart f ` Y", "using inj_on_apply_chart that"], ["proof (prove)\nusing this:\n  inj_on (apply_chart ?f) (domain ?f)\n  X \\<subseteq> domain f\n  Y \\<subseteq> domain f\n\ngoal (1 subgoal):\n 1. apply_chart f ` (X \\<inter> Y) =\n    apply_chart f ` X \\<inter> apply_chart f ` Y", "by (rule inj_on_image_Int)"], ["", "lemma chart_image_eq_vimage: \"c ` X = inv_chart c -` X \\<inter> codomain c\"\n  if \"X \\<subseteq> domain c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_chart c ` X = inv_chart c -` X \\<inter> codomain c", "using that"], ["proof (prove)\nusing this:\n  X \\<subseteq> domain c\n\ngoal (1 subgoal):\n 1. apply_chart c ` X = inv_chart c -` X \\<inter> codomain c", "by force"], ["", "lemma open_chart_image[simp, intro]: \"open (c ` X)\"\n  if \"open X\" \"X \\<subseteq> domain c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open (apply_chart c ` X)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. open (apply_chart c ` X)", "have \"c ` X = inv_chart c -` X \\<inter> codomain c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_chart c ` X = inv_chart c -` X \\<inter> codomain c", "using that(2)"], ["proof (prove)\nusing this:\n  X \\<subseteq> domain c\n\ngoal (1 subgoal):\n 1. apply_chart c ` X = inv_chart c -` X \\<inter> codomain c", "by (rule chart_image_eq_vimage)"], ["proof (state)\nthis:\n  apply_chart c ` X = inv_chart c -` X \\<inter> codomain c\n\ngoal (1 subgoal):\n 1. open (apply_chart c ` X)", "also"], ["proof (state)\nthis:\n  apply_chart c ` X = inv_chart c -` X \\<inter> codomain c\n\ngoal (1 subgoal):\n 1. open (apply_chart c ` X)", "have \"open \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open (inv_chart c -` X \\<inter> codomain c)", "using that"], ["proof (prove)\nusing this:\n  open X\n  X \\<subseteq> domain c\n\ngoal (1 subgoal):\n 1. open (inv_chart c -` X \\<inter> codomain c)", "by (metis continuous_on_codomain continuous_on_open_vimage open_codomain)"], ["proof (state)\nthis:\n  open (inv_chart c -` X \\<inter> codomain c)\n\ngoal (1 subgoal):\n 1. open (apply_chart c ` X)", "finally"], ["proof (chain)\npicking this:\n  open (apply_chart c ` X)", "show ?thesis"], ["proof (prove)\nusing this:\n  open (apply_chart c ` X)\n\ngoal (1 subgoal):\n 1. open (apply_chart c ` X)", "."], ["proof (state)\nthis:\n  open (apply_chart c ` X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma open_inv_chart_image[simp, intro]: \"open (inv_chart c ` X)\"\n  if \"open X\" \"X \\<subseteq> codomain c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open (inv_chart c ` X)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. open (inv_chart c ` X)", "have \"inv_chart c ` X = c -` X \\<inter> domain c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_chart c ` X = apply_chart c -` X \\<inter> domain c", "using that(2)"], ["proof (prove)\nusing this:\n  X \\<subseteq> codomain c\n\ngoal (1 subgoal):\n 1. inv_chart c ` X = apply_chart c -` X \\<inter> domain c", "apply (auto simp: )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> codomain c; x \\<in> domain c;\n        apply_chart c x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> x \\<in> inv_chart c ` X", "using image_iff"], ["proof (prove)\nusing this:\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> codomain c; x \\<in> domain c;\n        apply_chart c x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> x \\<in> inv_chart c ` X", "by fastforce"], ["proof (state)\nthis:\n  inv_chart c ` X = apply_chart c -` X \\<inter> domain c\n\ngoal (1 subgoal):\n 1. open (inv_chart c ` X)", "also"], ["proof (state)\nthis:\n  inv_chart c ` X = apply_chart c -` X \\<inter> domain c\n\ngoal (1 subgoal):\n 1. open (inv_chart c ` X)", "have \"open \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open (apply_chart c -` X \\<inter> domain c)", "using that"], ["proof (prove)\nusing this:\n  open X\n  X \\<subseteq> codomain c\n\ngoal (1 subgoal):\n 1. open (apply_chart c -` X \\<inter> domain c)", "by (metis continuous_on_domain continuous_on_open_vimage open_domain)"], ["proof (state)\nthis:\n  open (apply_chart c -` X \\<inter> domain c)\n\ngoal (1 subgoal):\n 1. open (inv_chart c ` X)", "finally"], ["proof (chain)\npicking this:\n  open (inv_chart c ` X)", "show ?thesis"], ["proof (prove)\nusing this:\n  open (inv_chart c ` X)\n\ngoal (1 subgoal):\n 1. open (inv_chart c ` X)", "."], ["proof (state)\nthis:\n  open (inv_chart c ` X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma homeomorphism_UNIV_imp_open_map:\n  \"homeomorphism UNIV UNIV p p' \\<Longrightarrow> open f' \\<Longrightarrow> open (p ` f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>homeomorphism UNIV UNIV p p'; open f'\\<rbrakk>\n    \\<Longrightarrow> open (p ` f')", "by (auto dest: homeomorphism_imp_open_map[where U=f'])"], ["", "subsection \\<open>Restriction\\<close>"], ["", "lemma homeomorphism_restrict:\n  \"homeomorphism (a \\<inter> s) (b \\<inter> f' -` s) f f'\" if \"homeomorphism a b f f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. homeomorphism (a \\<inter> s) (b \\<inter> f' -` s) f f'", "using that"], ["proof (prove)\nusing this:\n  homeomorphism a b f f'\n\ngoal (1 subgoal):\n 1. homeomorphism (a \\<inter> s) (b \\<inter> f' -` s) f f'", "by (fastforce simp: homeomorphism_def intro: continuous_on_subset intro!: imageI)"], ["", "lift_definition restrict_chart::\"'a set \\<Rightarrow> ('a::t2_space, 'e::euclidean_space) chart \\<Rightarrow> ('a, 'e) chart\"\n  is \"\\<lambda>S. \\<lambda>(d, d', f, f'). if open S then (d \\<inter> S, d' \\<inter> f' -` S, f, f') else ({}, {}, f, f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set prod.\n       prod\n       \\<in> {(d, d', f, f').\n              open d \\<and>\n              open d' \\<and> homeomorphism d d' f f'} \\<Longrightarrow>\n       (case prod of\n        (d, d', f, f') \\<Rightarrow>\n          if open set then (d \\<inter> set, d' \\<inter> f' -` set, f, f')\n          else ({}, {}, f, f'))\n       \\<in> {(d, d', f, f').\n              open d \\<and> open d' \\<and> homeomorphism d d' f f'}", "by (auto simp: split: if_splits intro!: open_continuous_vimage' homeomorphism_restrict\n      intro: homeomorphism_cont2 homeomorphism_cont1 )"], ["", "lemma restrict_chart_restrict_chart:\n  \"restrict_chart X (restrict_chart Y c) = restrict_chart (X \\<inter> Y) c\"\n  if \"open X\" \"open Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_chart X (restrict_chart Y c) = restrict_chart (X \\<inter> Y) c", "using that"], ["proof (prove)\nusing this:\n  open X\n  open Y\n\ngoal (1 subgoal):\n 1. restrict_chart X (restrict_chart Y c) = restrict_chart (X \\<inter> Y) c", "by transfer auto"], ["", "lemma domain_restrict_chart[simp]: \"open S \\<Longrightarrow> domain (restrict_chart S c) = domain c \\<inter> S\"\n  and domain_restrict_chart_if: \"domain (restrict_chart S c) = (if open S then domain c \\<inter> S else {})\"\n  and codomain_restrict_chart[simp]: \"open S \\<Longrightarrow> codomain (restrict_chart S c) = codomain c \\<inter> inv_chart c -` S\"\n  and codomain_restrict_chart_if: \"codomain (restrict_chart S c) = (if open S then codomain c \\<inter> inv_chart c -` S else {})\"\n  and apply_chart_restrict_chart[simp]: \"apply_chart (restrict_chart S c) = apply_chart c\"\n  and inv_chart_restrict_chart[simp]: \"inv_chart (restrict_chart S c) = inv_chart c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((open S \\<Longrightarrow>\n      domain (restrict_chart S c) = domain c \\<inter> S) &&&\n     domain (restrict_chart S c) =\n     (if open S then domain c \\<inter> S else {}) &&&\n     (open S \\<Longrightarrow>\n      codomain (restrict_chart S c) =\n      codomain c \\<inter> inv_chart c -` S)) &&&\n    codomain (restrict_chart S c) =\n    (if open S then codomain c \\<inter> inv_chart c -` S else {}) &&&\n    apply_chart (restrict_chart S c) = apply_chart c &&&\n    inv_chart (restrict_chart S c) = inv_chart c", "by (transfer, auto)+"], ["", "subsection \\<open>Composition\\<close>"], ["", "lift_definition compose_chart::\"('e\\<Rightarrow>'e) \\<Rightarrow> ('e\\<Rightarrow>'e) \\<Rightarrow>\n  ('a::topological_space, 'e::euclidean_space) chart \\<Rightarrow> ('a, 'e) chart\"\n  is \"\\<lambda>p p'. \\<lambda>(d, d', f, f'). if homeomorphism UNIV UNIV p p' then (d, p ` d', p o f, f' o p')\n    else ({}, {}, f, f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2 prod.\n       prod\n       \\<in> {(d, d', f, f').\n              open d \\<and>\n              open d' \\<and> homeomorphism d d' f f'} \\<Longrightarrow>\n       (case prod of\n        (d, d', f, f') \\<Rightarrow>\n          if homeomorphism UNIV UNIV fun1 fun2\n          then (d, fun1 ` d', fun1 \\<circ> f, f' \\<circ> fun2)\n          else ({}, {}, f, f'))\n       \\<in> {(d, d', f, f').\n              open d \\<and> open d' \\<and> homeomorphism d d' f f'}", "by (auto split: if_splits)\n    (auto intro: homeomorphism_UNIV_imp_open_map homeomorphism_compose homeomorphism_of_subsets)"], ["", "lemma compose_chart_apply_chart[simp]: \"apply_chart (compose_chart p p' c) = p o apply_chart c\"\n  and compose_chart_inv_chart[simp]: \"inv_chart (compose_chart p p' c) = inv_chart c o p'\"\n  and domain_compose_chart[simp]: \"domain (compose_chart p p' c) = domain c\"\n  and codomain_compose_chart[simp]: \"codomain (compose_chart p p' c) = p ` codomain c\"\n  if \"homeomorphism UNIV UNIV p p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (apply_chart (compose_chart p p' c) = p \\<circ> apply_chart c &&&\n     inv_chart (compose_chart p p' c) = inv_chart c \\<circ> p') &&&\n    domain (compose_chart p p' c) = domain c &&&\n    codomain (compose_chart p p' c) = p ` codomain c", "using that"], ["proof (prove)\nusing this:\n  homeomorphism UNIV UNIV p p'\n\ngoal (1 subgoal):\n 1. (apply_chart (compose_chart p p' c) = p \\<circ> apply_chart c &&&\n     inv_chart (compose_chart p p' c) = inv_chart c \\<circ> p') &&&\n    domain (compose_chart p p' c) = domain c &&&\n    codomain (compose_chart p p' c) = p ` codomain c", "by (transfer, auto)+"], ["", "end"]]}